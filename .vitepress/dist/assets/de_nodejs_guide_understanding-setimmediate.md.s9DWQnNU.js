import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Verstehen von setImmediate() in Node.js","description":"Erfahren Sie, wie setImmediate() in Node.js funktioniert, seine Unterschiede zu setTimeout(), process.nextTick() und Promise.then() und wie es mit dem Ereignisschleife und Warteschlangen interagiert.","frontmatter":{"title":"Verstehen von setImmediate() in Node.js","description":"Erfahren Sie, wie setImmediate() in Node.js funktioniert, seine Unterschiede zu setTimeout(), process.nextTick() und Promise.then() und wie es mit dem Ereignisschleife und Warteschlangen interagiert.","head":[["meta",{"name":"og:title","content":"Verstehen von setImmediate() in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Erfahren Sie, wie setImmediate() in Node.js funktioniert, seine Unterschiede zu setTimeout(), process.nextTick() und Promise.then() und wie es mit dem Ereignisschleife und Warteschlangen interagiert."}],["meta",{"name":"twitter:title","content":"Verstehen von setImmediate() in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Erfahren Sie, wie setImmediate() in Node.js funktioniert, seine Unterschiede zu setTimeout(), process.nextTick() und Promise.then() und wie es mit dem Ereignisschleife und Warteschlangen interagiert."}],["link",{"rel":"canonical","href":"https://idoc.dev/de/nodejs/guide/understanding-setimmediate"}],["meta",{"property":"og:url","content":"https://idoc.dev/de/nodejs/guide/understanding-setimmediate"}]]},"headers":[],"relativePath":"de/nodejs/guide/understanding-setimmediate.md","filePath":"de/nodejs/guide/understanding-setimmediate.md","lastUpdated":1749464498000}`),a={name:`de/nodejs/guide/understanding-setimmediate.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="setimmediate-verstehen" tabindex="-1"><code>setImmediate()</code> verstehen <a class="header-anchor" href="#setimmediate-verstehen" aria-label="Permalink to “setImmediate() verstehen”">​</a></h1><p>Wenn Sie ein Stück Code asynchron, aber so schnell wie möglich ausführen möchten, ist eine Option die Verwendung der von Node.js bereitgestellten Funktion <code>setImmediate()</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // etwas tun</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Jede Funktion, die als Argument an <code>setImmediate()</code> übergeben wird, ist ein Callback, der in der nächsten Iteration der Event-Loop ausgeführt wird.</p><p>Wie unterscheidet sich <code>setImmediate()</code> von <code>setTimeout(() =&gt; {}, 0)</code> (Übergabe eines 0-ms-Timeouts) und von <code>process.nextTick()</code> und <code>Promise.then()</code>?</p><p>Eine an <code>process.nextTick()</code> übergebene Funktion wird in der aktuellen Iteration der Event-Loop ausgeführt, nachdem die aktuelle Operation beendet ist. Das bedeutet, dass sie immer vor <code>setTimeout</code> und <code>setImmediate</code> ausgeführt wird.</p><p>Ein <code>setTimeout()</code>-Callback mit einer Verzögerung von 0 ms ist <code>setImmediate()</code> sehr ähnlich. Die Ausführungsreihenfolge hängt von verschiedenen Faktoren ab, aber beide werden in der nächsten Iteration der Event-Loop ausgeführt.</p><p>Ein <code>process.nextTick</code>-Callback wird zur <strong>process.nextTick-Warteschlange</strong> hinzugefügt. Ein <code>Promise.then()</code>-Callback wird zur <strong>Microtask-Warteschlange</strong> für Promises hinzugefügt. Ein <code>setTimeout</code>- oder <code>setImmediate</code>-Callback wird zur <strong>Macrotask-Warteschlange</strong> hinzugefügt.</p><p>Die Event-Loop führt zuerst Aufgaben in der <strong>process.nextTick-Warteschlange</strong> aus, dann die <strong>Microtask-Warteschlange</strong> für Promises und dann die <strong>Macrotask-Warteschlange</strong> für <code>setTimeout</code> oder <code>setImmediate</code>.</p><p>Hier ist ein Beispiel, um die Reihenfolge zwischen <code>setImmediate()</code>, <code>process.nextTick()</code> und <code>Promise.then()</code> zu zeigen:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> zoo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zoo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baz);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(zoo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start foo bar zoo baz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Dieser Code ruft zuerst <code>start()</code> auf, dann <code>foo()</code> in der <strong>process.nextTick-Warteschlange</strong>. Danach wird die <strong>Microtask-Warteschlange</strong> für Promises behandelt, die bar ausgibt und gleichzeitig <code>zoo()</code> in der <strong>process.nextTick-Warteschlange</strong> hinzufügt. Dann wird <code>zoo()</code> aufgerufen, das gerade hinzugefügt wurde. Am Ende wird <code>baz()</code> in der <strong>Macrotask-Warteschlange</strong> aufgerufen.</p><p>Das oben genannte Prinzip gilt in CommonJS-Fällen, aber denken Sie daran, dass in ES-Modulen, z. B. <code>mjs</code>-Dateien, die Ausführungsreihenfolge unterschiedlich ist:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start bar foo zoo baz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Dies liegt daran, dass das geladene ES-Modul als asynchrone Operation verpackt ist und somit das gesamte Skript bereits in der <strong>Microtask-Warteschlange</strong> für Promises ist. Wenn das Promise also sofort aufgelöst wird, wird sein Callback an die <strong>Microtask-Warteschlange</strong> angehängt. Node.js wird versuchen, die Warteschlange zu leeren, bevor zu einer anderen Warteschlange übergegangen wird, und daher wird die Ausgabe zuerst bar angezeigt.</p>`,15)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};