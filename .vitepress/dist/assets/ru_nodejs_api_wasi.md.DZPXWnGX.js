import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Документация Node.js по WASI","description":"Изучите документацию Node.js по интерфейсу системы WebAssembly (WASI), подробно описывающую использование WASI в средах Node.js, включая API для операций с файловой системой, переменные окружения и многое другое.","frontmatter":{"title":"Документация Node.js по WASI","description":"Изучите документацию Node.js по интерфейсу системы WebAssembly (WASI), подробно описывающую использование WASI в средах Node.js, включая API для операций с файловой системой, переменные окружения и многое другое.","head":[["meta",{"name":"og:title","content":"Документация Node.js по WASI | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Изучите документацию Node.js по интерфейсу системы WebAssembly (WASI), подробно описывающую использование WASI в средах Node.js, включая API для операций с файловой системой, переменные окружения и многое другое."}],["meta",{"name":"twitter:title","content":"Документация Node.js по WASI | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Изучите документацию Node.js по интерфейсу системы WebAssembly (WASI), подробно описывающую использование WASI в средах Node.js, включая API для операций с файловой системой, переменные окружения и многое другое."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/api/wasi"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/api/wasi"}]]},"headers":[],"relativePath":"ru/nodejs/api/wasi.md","filePath":"ru/nodejs/api/wasi.md","lastUpdated":1749464498000}`),a={name:`ru/nodejs/api/wasi.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="webassembly-system-interface-wasi" tabindex="-1">WebAssembly System Interface (WASI) <a class="header-anchor" href="#webassembly-system-interface-wasi" aria-label="Permalink to “WebAssembly System Interface (WASI)”">​</a></h1><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ru/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ru/nodejs/api/documentation#stability-index">Stability: 1</a> - Experimental</p></div><p><strong>Модуль <code>node:wasi</code> в настоящее время не предоставляет всесторонние свойства безопасности файловой системы, предоставляемые некоторыми средами выполнения WASI. Полная поддержка безопасной песочницы файловой системы может быть или не быть реализована в будущем. Тем временем не полагайтесь на него для запуска ненадежного кода.</strong></p><p><strong>Исходный код:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/wasi.js" target="_blank" rel="noreferrer">lib/wasi.js</a></p><p>API WASI предоставляет реализацию спецификации <a href="https://wasi.dev/" target="_blank" rel="noreferrer">WebAssembly System Interface</a>. WASI предоставляет приложениям WebAssembly доступ к базовой операционной системе через набор функций, подобных POSIX.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-17" id="tab-18" checked><label data-title="ESM" for="tab-18">ESM</label><input type="radio" name="group-17" id="tab-19"><label data-title="CJS" for="tab-19">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFile } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { WASI } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:wasi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { argv, env } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preview1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args: argv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preopens: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/some/real/path/that/wasm/can/access&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./demo.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasm, wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImportObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:wasi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preview1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args: argv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preopens: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/some/real/path/that/wasm/can/access&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;demo.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasm, wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImportObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></div></div><p>Чтобы запустить приведенный выше пример, создайте новый текстовый файл WebAssembly с именем <code>demo.wat</code>:</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>(module</span></span>
<span class="line"><span>    ;; Import the required fd_write WASI function which will write the given io vectors to stdout</span></span>
<span class="line"><span>    ;; The function signature for fd_write is:</span></span>
<span class="line"><span>    ;; (File Descriptor, *iovs, iovs_len, nwritten) -&gt; Returns number of bytes written</span></span>
<span class="line"><span>    (import &quot;wasi_snapshot_preview1&quot; &quot;fd_write&quot; (func $fd_write (param i32 i32 i32 i32) (result i32)))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    (memory 1)</span></span>
<span class="line"><span>    (export &quot;memory&quot; (memory 0))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ;; Write &#39;hello world\\n&#39; to memory at an offset of 8 bytes</span></span>
<span class="line"><span>    ;; Note the trailing newline which is required for the text to appear</span></span>
<span class="line"><span>    (data (i32.const 8) &quot;hello world\\n&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    (func $main (export &quot;_start&quot;)</span></span>
<span class="line"><span>        ;; Creating a new io vector within linear memory</span></span>
<span class="line"><span>        (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - This is a pointer to the start of the &#39;hello world\\n&#39; string</span></span>
<span class="line"><span>        (i32.store (i32.const 4) (i32.const 12))  ;; iov.iov_len - The length of the &#39;hello world\\n&#39; string</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        (call $fd_write</span></span>
<span class="line"><span>            (i32.const 1) ;; file_descriptor - 1 for stdout</span></span>
<span class="line"><span>            (i32.const 0) ;; *iovs - The pointer to the iov array, which is stored at memory location 0</span></span>
<span class="line"><span>            (i32.const 1) ;; iovs_len - We&#39;re printing 1 string stored in an iov - so one.</span></span>
<span class="line"><span>            (i32.const 20) ;; nwritten - A place in memory to store the number of bytes written</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>        drop ;; Discard the number of bytes written from the top of the stack</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>Используйте <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a> для компиляции <code>.wat</code> в <code>.wasm</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wat2wasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo.wat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="security" tabindex="-1">Безопасность <a class="header-anchor" href="#security" aria-label="Permalink to “Безопасность”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v21.2.0, v20.11.0</td><td>Уточнены свойства безопасности WASI.</td></tr><tr><td>v21.2.0, v20.11.0</td><td>Добавлено в: v21.2.0, v20.11.0</td></tr></tbody></table></div><p>WASI предоставляет модель на основе возможностей, посредством которой приложениям предоставляются их собственные пользовательские возможности <code>env</code>, <code>preopens</code>, <code>stdin</code>, <code>stdout</code>, <code>stderr</code> и <code>exit</code>.</p><p><strong>Текущая модель угроз Node.js не обеспечивает безопасную песочницу, как это реализовано в некоторых средах выполнения WASI.</strong></p><p>Хотя функции возможностей поддерживаются, они не формируют модель безопасности в Node.js. Например, песочница файловой системы может быть преодолена с помощью различных методов. Проект изучает, можно ли добавить эти гарантии безопасности в будущем.</p><h2 id="class-wasi" tabindex="-1">Класс: <code>WASI</code> <a class="header-anchor" href="#class-wasi" aria-label="Permalink to “Класс: WASI”">​</a></h2><p><strong>Добавлено в: v13.3.0, v12.16.0</strong></p><p>Класс <code>WASI</code> предоставляет API системных вызовов WASI и дополнительные удобные методы для работы с приложениями на основе WASI. Каждый экземпляр <code>WASI</code> представляет собой отдельную среду.</p><h3 id="new-wasioptions" tabindex="-1"><code>new WASI([options])</code> <a class="header-anchor" href="#new-wasioptions" aria-label="Permalink to “new WASI([options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v20.1.0</td><td>Значение по умолчанию для returnOnExit изменено на true.</td></tr><tr><td>v20.0.0</td><td>Опция version теперь обязательна и не имеет значения по умолчанию.</td></tr><tr><td>v19.8.0</td><td>Поле version добавлено в options.</td></tr><tr><td>v13.3.0, v12.16.0</td><td>Добавлено в: v13.3.0, v12.16.0</td></tr></tbody></table></div><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>args</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">&lt;Array&gt;</a> Массив строк, который WebAssembly-приложение увидит как аргументы командной строки. Первый аргумент — это виртуальный путь к самой команде WASI. <strong>По умолчанию:</strong> <code>[]</code>.</li><li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> Объект, аналогичный <code>process.env</code>, который WebAssembly-приложение увидит в качестве своей среды. <strong>По умолчанию:</strong> <code>{}</code>.</li><li><code>preopens</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> Этот объект представляет локальную структуру каталогов WebAssembly-приложения. Строковые ключи <code>preopens</code> рассматриваются как каталоги в файловой системе. Соответствующие значения в <code>preopens</code> — это реальные пути к этим каталогам на хост-машине.</li><li><code>returnOnExit</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> По умолчанию, когда приложения WASI вызывают <code>__wasi_proc_exit()</code>, <code>wasi.start()</code> возвращает код выхода, а не завершает процесс. Установка этого параметра в <code>false</code> приведет к тому, что процесс Node.js завершится с указанным кодом выхода. <strong>По умолчанию:</strong> <code>true</code>.</li><li><code>stdin</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> Файловый дескриптор, используемый в качестве стандартного ввода в WebAssembly-приложении. <strong>По умолчанию:</strong> <code>0</code>.</li><li><code>stdout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> Файловый дескриптор, используемый в качестве стандартного вывода в WebAssembly-приложении. <strong>По умолчанию:</strong> <code>1</code>.</li><li><code>stderr</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> Файловый дескриптор, используемый в качестве стандартной ошибки в WebAssembly-приложении. <strong>По умолчанию:</strong> <code>2</code>.</li><li><code>version</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Запрашиваемая версия WASI. В настоящее время поддерживаются только версии <code>unstable</code> и <code>preview1</code>. Эта опция является обязательной.</li></ul></li></ul><h3 id="wasigetimportobject" tabindex="-1"><code>wasi.getImportObject()</code> <a class="header-anchor" href="#wasigetimportobject" aria-label="Permalink to “wasi.getImportObject()”">​</a></h3><p><strong>Добавлено в: v19.8.0</strong></p><p>Возвращает объект импорта, который можно передать в <code>WebAssembly.instantiate()</code>, если кроме тех, что предоставляются WASI, другие импорты WASM не нужны.</p><p>Если в конструктор была передана версия <code>unstable</code>, он вернет:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi_unstable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi.wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Если в конструктор была передана версия <code>preview1</code> или версия не была указана, он вернет:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi_snapshot_preview1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi.wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="wasistartinstance" tabindex="-1"><code>wasi.start(instance)</code> <a class="header-anchor" href="#wasistartinstance" aria-label="Permalink to “wasi.start(instance)”">​</a></h3><p><strong>Добавлено в: v13.3.0, v12.16.0</strong></p><ul><li><code>instance</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer">&lt;WebAssembly.Instance&gt;</a></li></ul><p>Пытается начать выполнение <code>instance</code> в качестве команды WASI, вызвав его экспорт <code>_start()</code>. Если <code>instance</code> не содержит экспорт <code>_start()</code>, или если <code>instance</code> содержит экспорт <code>_initialize()</code>, то выбрасывается исключение.</p><p><code>start()</code> требует, чтобы <code>instance</code> экспортировал <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory" target="_blank" rel="noreferrer"><code>WebAssembly.Memory</code></a> с именем <code>memory</code>. Если у <code>instance</code> нет экспорта <code>memory</code>, выбрасывается исключение.</p><p>Если <code>start()</code> вызывается более одного раза, выбрасывается исключение.</p><h3 id="wasiinitializeinstance" tabindex="-1"><code>wasi.initialize(instance)</code> <a class="header-anchor" href="#wasiinitializeinstance" aria-label="Permalink to “wasi.initialize(instance)”">​</a></h3><p><strong>Добавлено в: v14.6.0, v12.19.0</strong></p><ul><li><code>instance</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer">&lt;WebAssembly.Instance&gt;</a></li></ul><p>Пытается инициализировать <code>instance</code> в качестве реактора WASI, вызвав его экспорт <code>_initialize()</code>, если он присутствует. Если <code>instance</code> содержит экспорт <code>_start()</code>, то выбрасывается исключение.</p><p><code>initialize()</code> требует, чтобы <code>instance</code> экспортировал <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory" target="_blank" rel="noreferrer"><code>WebAssembly.Memory</code></a> с именем <code>memory</code>. Если у <code>instance</code> нет экспорта <code>memory</code>, выбрасывается исключение.</p><p>Если <code>initialize()</code> вызывается более одного раза, выбрасывается исключение.</p><h3 id="wasiwasiimport" tabindex="-1"><code>wasi.wasiImport</code> <a class="header-anchor" href="#wasiwasiimport" aria-label="Permalink to “wasi.wasiImport”">​</a></h3><p><strong>Добавлено в: v13.3.0, v12.16.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><code>wasiImport</code> — это объект, который реализует API системных вызовов WASI. Этот объект следует передавать в качестве импорта <code>wasi_snapshot_preview1</code> во время инстанцирования <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer"><code>WebAssembly.Instance</code></a>.</p>`,44)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};