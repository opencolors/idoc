import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Melhores práticas de segurança para aplicações Node.js","description":"Um guia completo para proteger aplicações Node.js, abordando a modelagem de ameaças, as melhores práticas e a mitigação de vulnerabilidades comuns como a negação de serviço, o rebinding de DNS e a exposição de informações sensíveis.","frontmatter":{"title":"Melhores práticas de segurança para aplicações Node.js","description":"Um guia completo para proteger aplicações Node.js, abordando a modelagem de ameaças, as melhores práticas e a mitigação de vulnerabilidades comuns como a negação de serviço, o rebinding de DNS e a exposição de informações sensíveis.","head":[["meta",{"name":"og:title","content":"Melhores práticas de segurança para aplicações Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Um guia completo para proteger aplicações Node.js, abordando a modelagem de ameaças, as melhores práticas e a mitigação de vulnerabilidades comuns como a negação de serviço, o rebinding de DNS e a exposição de informações sensíveis."}],["meta",{"name":"twitter:title","content":"Melhores práticas de segurança para aplicações Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Um guia completo para proteger aplicações Node.js, abordando a modelagem de ameaças, as melhores práticas e a mitigação de vulnerabilidades comuns como a negação de serviço, o rebinding de DNS e a exposição de informações sensíveis."}],["link",{"rel":"canonical","href":"https://idoc.dev/pt/nodejs/guide/security-best-practices"}],["meta",{"property":"og:url","content":"https://idoc.dev/pt/nodejs/guide/security-best-practices"}]]},"headers":[],"relativePath":"pt/nodejs/guide/security-best-practices.md","filePath":"pt/nodejs/guide/security-best-practices.md","lastUpdated":1749464498000}`),a={name:`pt/nodejs/guide/security-best-practices.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="melhores-praticas-de-seguranca" tabindex="-1">Melhores Práticas de Segurança <a class="header-anchor" href="#melhores-praticas-de-seguranca" aria-label="Permalink to “Melhores Práticas de Segurança”">​</a></h1><h3 id="intencao" tabindex="-1">Intenção <a class="header-anchor" href="#intencao" aria-label="Permalink to “Intenção”">​</a></h3><p>Este documento tem a intenção de estender o atual <a href="/pt/nodejs/guide/security-best-practices#threat-model">modelo de ameaças</a> e fornecer diretrizes extensivas sobre como proteger uma aplicação Node.js.</p><h2 id="conteudo-do-documento" tabindex="-1">Conteúdo do Documento <a class="header-anchor" href="#conteudo-do-documento" aria-label="Permalink to “Conteúdo do Documento”">​</a></h2><ul><li>Melhores práticas: Uma maneira simplificada e condensada de ver as melhores práticas. Podemos usar <a href="https://github.com/nodejs/security-wg/issues/488" target="_blank" rel="noreferrer">esta issue</a> ou <a href="https://github.com/goldbergyoni/nodebestpractices" target="_blank" rel="noreferrer">esta diretriz</a> como ponto de partida. É importante notar que este documento é específico para Node.js, se você está procurando algo mais amplo, considere as <a href="https://github.com/ossf/wg-best-practices-os-developers" target="_blank" rel="noreferrer">Melhores Práticas da OSSF</a>.</li><li>Ataques explicados: ilustrar e documentar em inglês simples com alguns exemplos de código (se possível) dos ataques que estamos mencionando no modelo de ameaças.</li><li>Bibliotecas de Terceiros: definir ameaças (ataques de typosquatting, pacotes maliciosos...) e melhores práticas em relação a dependências de módulos node, etc...</li></ul><h2 id="lista-de-ameacas" tabindex="-1">Lista de Ameaças <a class="header-anchor" href="#lista-de-ameacas" aria-label="Permalink to “Lista de Ameaças”">​</a></h2><h3 id="negacao-de-servico-do-servidor-http-cwe-400" tabindex="-1">Negação de Serviço do servidor HTTP (CWE-400) <a class="header-anchor" href="#negacao-de-servico-do-servidor-http-cwe-400" aria-label="Permalink to “Negação de Serviço do servidor HTTP (CWE-400)”">​</a></h3><p>Este é um ataque onde a aplicação se torna indisponível para o propósito para o qual foi projetada devido à forma como processa as requisições HTTP recebidas. Estas requisições não precisam ser deliberadamente criadas por um ator malicioso: um cliente mal configurado ou com bugs também pode enviar um padrão de requisições para o servidor que resultam em uma negação de serviço.</p><p>As requisições HTTP são recebidas pelo servidor HTTP do Node.js e entregues ao código da aplicação através do manipulador de requisições registrado. O servidor não analisa o conteúdo do corpo da requisição. Portanto, qualquer DoS causado pelo conteúdo do corpo após ser entregue ao manipulador de requisições não é uma vulnerabilidade no Node.js em si, já que é responsabilidade do código da aplicação lidar com isso corretamente.</p><p>Certifique-se de que o WebServer lida com erros de socket adequadamente, por exemplo, quando um servidor é criado sem um manipulador de erros, ele estará vulnerável a DoS.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:net&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // socket.on(&#39;error&#39;, console.error)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // isso impede que o servidor quebre</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Echo server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(socket)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0.0.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><em>Se uma requisição ruim for realizada, o servidor pode quebrar.</em></p><p>Um exemplo de um ataque DoS que não é causado pelo conteúdo da requisição é o Slowloris. Neste ataque, as requisições HTTP são enviadas lentamente e fragmentadas, um fragmento de cada vez. Até que a requisição completa seja entregue, o servidor manterá recursos dedicados à requisição em andamento. Se um número suficiente dessas requisições forem enviadas ao mesmo tempo, a quantidade de conexões concorrentes logo atingirá seu máximo, resultando em uma negação de serviço. É assim que o ataque depende não do conteúdo da requisição, mas do tempo e do padrão das requisições que estão sendo enviadas ao servidor.</p><h4 id="mitigacoes" tabindex="-1">Mitigações <a class="header-anchor" href="#mitigacoes" aria-label="Permalink to “Mitigações”">​</a></h4><ul><li>Use um proxy reverso para receber e encaminhar as requisições para a aplicação Node.js. Proxies reversos podem fornecer caching, balanceamento de carga, listas negras de IP, etc., o que reduz a probabilidade de um ataque DoS ser eficaz.</li><li>Configure corretamente os timeouts do servidor, de modo que as conexões que estão ociosas ou onde as requisições estão chegando muito lentamente possam ser descartadas. Veja os diferentes timeouts em <code>http.Server</code>, particularmente <code>headersTimeout</code>, <code>requestTimeout</code>, <code>timeout</code> e <code>keepAliveTimeout</code>.</li><li>Limite o número de sockets abertos por host e no total. Veja os <a href="/pt/nodejs/api/http">docs do http</a>, particularmente <code>agent.maxSockets</code>, <code>agent.maxTotalSockets</code>, <code>agent.maxFreeSockets</code> e <code>server.maxRequestsPerSocket</code>.</li></ul><h3 id="redirecionamento-de-dns-cwe-346" tabindex="-1">Redirecionamento de DNS (CWE-346) <a class="header-anchor" href="#redirecionamento-de-dns-cwe-346" aria-label="Permalink to “Redirecionamento de DNS (CWE-346)”">​</a></h3><p>Este é um ataque que pode ter como alvo aplicações Node.js que estão sendo executadas com o inspetor de depuração habilitado usando a opção <a href="/pt/nodejs/guide/debugging-nodejs">--inspect switch</a>.</p><p>Como os sites abertos em um navegador da web podem fazer requisições WebSocket e HTTP, eles podem ter como alvo o inspetor de depuração em execução localmente. Isso geralmente é evitado pela <a href="/pt/nodejs/guide/debugging-nodejs">política de mesma origem</a> implementada pelos navegadores modernos, que proíbe que scripts alcancem recursos de diferentes origens (o que significa que um site malicioso não pode ler dados solicitados de um endereço IP local).</p><p>No entanto, por meio do redirecionamento de DNS, um invasor pode controlar temporariamente a origem de suas requisições para que pareçam originar-se de um endereço IP local. Isso é feito controlando tanto um site quanto o servidor DNS usado para resolver seu endereço IP. Veja <a href="https://en.wikipedia.org/wiki/DNS_rebinding" target="_blank" rel="noreferrer">DNS Rebinding wiki</a> para mais detalhes.</p><h4 id="mitigacoes-1" tabindex="-1">Mitigações <a class="header-anchor" href="#mitigacoes-1" aria-label="Permalink to “Mitigações”">​</a></h4><ul><li>Desabilite o inspetor no sinal SIGUSR1 anexando um listener <code>process.on(‘SIGUSR1’, …)</code> a ele.</li><li>Não execute o protocolo do inspetor em produção.</li></ul><h3 id="exposicao-de-informacoes-sensiveis-a-um-ator-nao-autorizado-cwe-552" tabindex="-1">Exposição de Informações Sensíveis a um Ator Não Autorizado (CWE-552) <a class="header-anchor" href="#exposicao-de-informacoes-sensiveis-a-um-ator-nao-autorizado-cwe-552" aria-label="Permalink to “Exposição de Informações Sensíveis a um Ator Não Autorizado (CWE-552)”">​</a></h3><p>Todos os arquivos e pastas incluídos no diretório atual são enviados para o registro npm durante a publicação do pacote.</p><p>Existem alguns mecanismos para controlar esse comportamento definindo uma lista de bloqueio com <code>.npmignore</code> e <code>.gitignore</code> ou definindo uma lista de permissões no <code>package.json</code>.</p><h4 id="mitigacoes-2" tabindex="-1">Mitigações <a class="header-anchor" href="#mitigacoes-2" aria-label="Permalink to “Mitigações”">​</a></h4><ul><li>Usar <code>npm publish --dry-run</code> para listar todos os arquivos a serem publicados. Certifique-se de revisar o conteúdo antes de publicar o pacote.</li><li>Também é importante criar e manter arquivos de ignorar, como <code>.gitignore</code> e <code>.npmignore</code>. Nestes arquivos, você pode especificar quais arquivos/pastas não devem ser publicados. A <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#files" target="_blank" rel="noreferrer">propriedade files</a> em <code>package.json</code> permite a operação inversa <code>-- lista permitida</code>.</li><li>Em caso de exposição, certifique-se de <a href="https://docs.npmjs.com/unpublishing-packages-from-the-registry" target="_blank" rel="noreferrer">cancelar a publicação do pacote</a>.</li></ul><h3 id="ataque-de-contrabando-de-requisicao-http-cwe-444" tabindex="-1">Ataque de Contrabando de Requisição HTTP (CWE-444) <a class="header-anchor" href="#ataque-de-contrabando-de-requisicao-http-cwe-444" aria-label="Permalink to “Ataque de Contrabando de Requisição HTTP (CWE-444)”">​</a></h3><p>Este é um ataque que envolve dois servidores HTTP (geralmente um proxy e uma aplicação Node.js). Um cliente envia uma requisição HTTP que passa primeiro pelo servidor front-end (o proxy) e então é redirecionada para o servidor back-end (a aplicação). Quando o front-end e o back-end interpretam requisições HTTP ambíguas de forma diferente, existe o potencial para um atacante enviar uma mensagem maliciosa que não será vista pelo front-end, mas será vista pelo back-end, efetivamente &quot;contrabandeando-a&quot; pelo servidor proxy.</p><p>Veja o <a href="https://cwe.mitre.org/data/definitions/444.html" target="_blank" rel="noreferrer">CWE-444</a> para uma descrição mais detalhada e exemplos.</p><p>Como este ataque depende do Node.js interpretar as requisições HTTP de forma diferente de um servidor HTTP (arbitrário), um ataque bem-sucedido pode ser devido a uma vulnerabilidade no Node.js, no servidor front-end ou em ambos. Se a forma como a requisição é interpretada pelo Node.js é consistente com a especificação HTTP (veja <a href="https://datatracker.ietf.org/doc/html/rfc7230#section-3" target="_blank" rel="noreferrer">RFC7230</a>), então não é considerada uma vulnerabilidade no Node.js.</p><h4 id="mitigacoes-3" tabindex="-1">Mitigações <a class="header-anchor" href="#mitigacoes-3" aria-label="Permalink to “Mitigações”">​</a></h4><ul><li>Não use a opção <code>insecureHTTPParser</code> ao criar um Servidor HTTP.</li><li>Configure o servidor front-end para normalizar requisições ambíguas.</li><li>Monitore continuamente novas vulnerabilidades de contrabando de requisição HTTP tanto no Node.js quanto no servidor front-end de sua escolha.</li><li>Use HTTP/2 de ponta a ponta e desative o downgrade de HTTP, se possível.</li></ul><h3 id="exposicao-de-informacoes-atraves-de-ataques-de-tempo-cwe-208" tabindex="-1">Exposição de Informações Através de Ataques de Tempo (CWE-208) <a class="header-anchor" href="#exposicao-de-informacoes-atraves-de-ataques-de-tempo-cwe-208" aria-label="Permalink to “Exposição de Informações Através de Ataques de Tempo (CWE-208)”">​</a></h3><p>Este é um ataque que permite ao atacante aprender informações potencialmente sensíveis, por exemplo, medindo quanto tempo leva para o aplicativo responder a uma solicitação. Este ataque não é específico do Node.js e pode ter como alvo quase todos os tempos de execução.</p><p>O ataque é possível sempre que o aplicativo usa um segredo em uma operação sensível ao tempo (por exemplo, branch). Considere o tratamento da autenticação em um aplicativo típico. Aqui, um método de autenticação básico inclui e-mail e senha como credenciais. As informações do usuário são recuperadas da entrada fornecida pelo usuário, idealmente de um SGBD. Ao recuperar as informações do usuário, a senha é comparada com as informações do usuário recuperadas do banco de dados. O uso da comparação de strings integrada leva mais tempo para valores de mesmo comprimento. Essa comparação, quando executada por um tempo aceitável, aumenta involuntariamente o tempo de resposta da solicitação. Ao comparar os tempos de resposta da solicitação, um invasor pode adivinhar o comprimento e o valor da senha em uma grande quantidade de solicitações.</p><h4 id="mitigacoes-4" tabindex="-1">Mitigações <a class="header-anchor" href="#mitigacoes-4" aria-label="Permalink to “Mitigações”">​</a></h4><ul><li>A API crypto expõe uma função <code>timingSafeEqual</code> para comparar valores sensíveis reais e esperados usando um algoritmo de tempo constante.</li><li>Para comparação de senhas, você pode usar o <a href="/pt/nodejs/api/crypto">scrypt</a> também disponível no módulo crypto nativo.</li><li>De forma mais geral, evite usar segredos em operações de tempo variável. Isso inclui ramificação em segredos e, quando o invasor pode estar co-localizado na mesma infraestrutura (por exemplo, a mesma máquina na nuvem), usar um segredo como um índice na memória. Escrever código de tempo constante em JavaScript é difícil (em parte por causa do JIT). Para aplicações criptográficas, use as APIs criptográficas integradas ou WebAssembly (para algoritmos não implementados nativamente).</li></ul><h3 id="modulos-maliciosos-de-terceiros-cwe-1357" tabindex="-1">Módulos Maliciosos de Terceiros (CWE-1357) <a class="header-anchor" href="#modulos-maliciosos-de-terceiros-cwe-1357" aria-label="Permalink to “Módulos Maliciosos de Terceiros (CWE-1357)”">​</a></h3><p>Atualmente, no Node.js, qualquer pacote pode acessar recursos poderosos, como acesso à rede. Além disso, como também têm acesso ao sistema de arquivos, podem enviar qualquer dado para qualquer lugar.</p><p>Todo o código em execução em um processo node tem a capacidade de carregar e executar código arbitrário adicional usando <code>eval()</code> (ou seus equivalentes). Todo o código com acesso de gravação ao sistema de arquivos pode conseguir a mesma coisa gravando em arquivos novos ou existentes que são carregados.</p><p>O Node.js possui um <a href="/pt/nodejs/api/permissions">mecanismo de política</a> experimental¹ para declarar o recurso carregado como não confiável ou confiável. No entanto, esta política não está habilitada por padrão. Certifique-se de fixar as versões das dependências e execute verificações automáticas de vulnerabilidades usando fluxos de trabalho comuns ou scripts npm. Antes de instalar um pacote, certifique-se de que este pacote seja mantido e inclua todo o conteúdo que você esperava. Tenha cuidado, o código-fonte do GitHub nem sempre é o mesmo que o publicado, valide-o em <code>node_modules</code>.</p><h4 id="ataques-a-cadeia-de-fornecimento" tabindex="-1">Ataques à cadeia de fornecimento <a class="header-anchor" href="#ataques-a-cadeia-de-fornecimento" aria-label="Permalink to “Ataques à cadeia de fornecimento”">​</a></h4><p>Um ataque à cadeia de fornecimento em uma aplicação Node.js acontece quando uma de suas dependências (direta ou transitiva) é comprometida. Isso pode acontecer devido à aplicação ser muito permissiva na especificação das dependências (permitindo atualizações indesejadas) e/ou erros de digitação comuns na especificação (vulnerável a <a href="https://en.wikipedia.org/wiki/Typosquatting" target="_blank" rel="noreferrer">typosquatting</a>).</p><p>Um atacante que assume o controle de um pacote upstream pode publicar uma nova versão com código malicioso. Se uma aplicação Node.js depende desse pacote sem ser rigorosa sobre qual versão é segura para uso, o pacote pode ser automaticamente atualizado para a versão maliciosa mais recente, comprometendo a aplicação.</p><p>As dependências especificadas no arquivo <code>package.json</code> podem ter um número de versão exato ou um intervalo. No entanto, ao fixar uma dependência em uma versão exata, suas dependências transitivas não são fixadas. Isso ainda deixa a aplicação vulnerável a atualizações indesejadas/inesperadas.</p><p>Possíveis vetores de ataque:</p><ul><li>Ataques de Typosquatting</li><li>Envenenamento de lockfile</li><li>Mantenedores comprometidos</li><li>Pacotes Maliciosos</li><li>Confusões de Dependência</li></ul><h5 id="mitigacoes-5" tabindex="-1">Mitigações <a class="header-anchor" href="#mitigacoes-5" aria-label="Permalink to “Mitigações”">​</a></h5><ul><li>Impeça o npm de executar scripts arbitrários com <code>--ignore-scripts</code><ul><li>Adicionalmente, você pode desabilitá-lo globalmente com <code>npm config set ignore-scripts true</code></li></ul></li><li>Fixe as versões das dependências para uma versão imutável específica, não uma versão que seja um intervalo ou de uma fonte mutável.</li><li>Use lockfiles, que fixam todas as dependências (diretas e transitivas). <ul><li>Use <a href="https://blog.ulisesgascon.com/lockfile-posioned" target="_blank" rel="noreferrer">Mitigações para envenenamento de lockfile</a>.</li></ul></li><li>Automatize verificações para novas vulnerabilidades usando CI, com ferramentas como <a href="https://www.npmjs.com/package/npm-audit" target="_blank" rel="noreferrer">npm-audit</a>. <ul><li>Ferramentas como <code>Socket</code> podem ser usadas para analisar pacotes com análise estática para encontrar comportamentos arriscados, como acesso à rede ou ao sistema de arquivos.</li></ul></li><li>Use <code>npm ci</code> em vez de <code>npm install</code>. Isso impõe o lockfile, de modo que inconsistências entre ele e o arquivo <code>package.json</code> causam um erro (em vez de ignorar silenciosamente o lockfile em favor de <code>package.json</code>).</li><li>Verifique cuidadosamente o arquivo <code>package.json</code> em busca de erros/erros de digitação nos nomes das dependências.</li></ul><h3 id="violacao-de-acesso-a-memoria-cwe-284" tabindex="-1">Violação de Acesso à Memória (CWE-284) <a class="header-anchor" href="#violacao-de-acesso-a-memoria-cwe-284" aria-label="Permalink to “Violação de Acesso à Memória (CWE-284)”">​</a></h3><p>Ataques baseados em memória ou em heap dependem de uma combinação de erros de gerenciamento de memória e um alocador de memória explorável. Como todos os runtimes, o Node.js é vulnerável a esses ataques se seus projetos forem executados em uma máquina compartilhada. Usar um heap seguro é útil para evitar que informações confidenciais vazem devido a estouros e underuns de ponteiros.</p><p>Infelizmente, um heap seguro não está disponível no Windows. Mais informações podem ser encontradas na <a href="/pt/nodejs/api/cli">documentação secure-heap</a> do Node.js.</p><h4 id="mitigacoes-6" tabindex="-1">Mitigações <a class="header-anchor" href="#mitigacoes-6" aria-label="Permalink to “Mitigações”">​</a></h4><ul><li>Use <code>--secure-heap=n</code> dependendo do seu aplicativo, onde n é o tamanho máximo alocado em bytes.</li><li>Não execute seu aplicativo de produção em uma máquina compartilhada.</li></ul><h3 id="monkey-patching-cwe-349" tabindex="-1">Monkey Patching (CWE-349) <a class="header-anchor" href="#monkey-patching-cwe-349" aria-label="Permalink to “Monkey Patching (CWE-349)”">​</a></h3><p>Monkey patching refere-se à modificação de propriedades em tempo de execução com o objetivo de alterar o comportamento existente. Exemplo:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// eslint-disable-next-line no-extend-native</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // substituindo o [].push global</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="mitigacoes-7" tabindex="-1">Mitigações <a class="header-anchor" href="#mitigacoes-7" aria-label="Permalink to “Mitigações”">​</a></h4><p>A flag <code>--frozen-intrinsics</code> habilita intrinsics congelados experimentais¹, o que significa que todos os objetos e funções JavaScript integrados são congelados recursivamente. Portanto, o seguinte trecho não substituirá o comportamento padrão de <code>Array.prototype.push</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// eslint-disable-next-line no-extend-native</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // substituindo o [].push global</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Não capturado:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError &lt;Object &lt;Object &lt;[Object: null prototype] {}&gt;&gt;&gt;:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Não é possível atribuir à propriedade somente leitura &#39;push&#39; do objeto &#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>No entanto, é importante mencionar que você ainda pode definir novos globais e substituir os globais existentes usando <code>globalThis</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalThis.foo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> você</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ainda</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> definir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> novos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> globais</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalThis.Array</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> No</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entanto,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> você</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> também</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> substituir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> os</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> globais</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> existentes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Portanto, <code>Object.freeze(globalThis)</code> pode ser usado para garantir que nenhum global seja substituído.</p><h3 id="ataques-de-poluicao-de-prototipos-cwe-1321" tabindex="-1">Ataques de Poluição de Protótipos (CWE-1321) <a class="header-anchor" href="#ataques-de-poluicao-de-prototipos-cwe-1321" aria-label="Permalink to “Ataques de Poluição de Protótipos (CWE-1321)”">​</a></h3><p>Poluição de protótipos refere-se à possibilidade de modificar ou injetar propriedades em itens da linguagem JavaScript, abusando do uso de _<em>proto</em>, _constructor, prototype e outras propriedades herdadas de protótipos integrados.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;__proto__&quot;: { &quot;polluted&quot;: true}}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, a, data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c.polluted) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DoS Potencial</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;__proto__&quot;: null}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, data2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasOwnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError não capturado: d.hasOwnProperty não é uma função</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Esta é uma vulnerabilidade potencial herdada da linguagem JavaScript.</p><h4 id="exemplos" tabindex="-1">Exemplos <a class="header-anchor" href="#exemplos" aria-label="Permalink to “Exemplos”">​</a></h4><ul><li><a href="https://www.cvedetails.com/cve/CVE-2022-21824/" target="_blank" rel="noreferrer">CVE-2022-21824</a> (Node.js)</li><li><a href="https://www.cvedetails.com/cve/CVE-2018-3721/" target="_blank" rel="noreferrer">CVE-2018-3721</a> (Biblioteca de Terceiros: Lodash)</li></ul><h4 id="mitigacoes-8" tabindex="-1">Mitigações <a class="header-anchor" href="#mitigacoes-8" aria-label="Permalink to “Mitigações”">​</a></h4><ul><li>Evite <a href="https://gist.github.com/DaniAkash/b3d7159fddcff0a9ee035bd10e34b277#file-unsafe-merge-js" target="_blank" rel="noreferrer">mesclagens recursivas inseguras</a>, veja <a href="https://www.cve.org/CVERecord?id=CVE-2018-16487" target="_blank" rel="noreferrer">CVE-2018-16487</a>.</li><li>Implemente validações de Esquema JSON para requisições externas/não confiáveis.</li><li>Crie Objetos sem protótipo usando <code>Object.create(null)</code>.</li><li>Congelando o protótipo: <code>Object.freeze(MyObject.prototype)</code>.</li><li>Desabilite a propriedade <code>Object.prototype.__proto__</code> usando a flag <code>--disable-proto</code>.</li><li>Verifique se a propriedade existe diretamente no objeto, não do protótipo usando <code>Object.hasOwn(obj, keyFromObj)</code>.</li><li>Evite usar métodos de <code>Object.prototype</code>.</li></ul><h3 id="elemento-de-caminho-de-pesquisa-nao-controlado-cwe-427" tabindex="-1">Elemento de Caminho de Pesquisa Não Controlado (CWE-427) <a class="header-anchor" href="#elemento-de-caminho-de-pesquisa-nao-controlado-cwe-427" aria-label="Permalink to “Elemento de Caminho de Pesquisa Não Controlado (CWE-427)”">​</a></h3><p>Node.js carrega módulos seguindo o <a href="/pt/nodejs/api/modules">Algoritmo de Resolução de Módulos</a>. Portanto, ele assume que o diretório no qual um módulo é requisitado (require) é confiável.</p><p>Com isso, significa que o seguinte comportamento da aplicação é esperado. Assumindo a seguinte estrutura de diretório:</p><ul><li>app/ <ul><li>server.js</li><li>auth.js</li><li>auth</li></ul></li></ul><p>Se server.js usa <code>require(&#39;./auth&#39;)</code> ele seguirá o algoritmo de resolução de módulo e carregará auth ao invés de <code>auth.js</code>.</p><h4 id="mitigacoes-9" tabindex="-1">Mitigações <a class="header-anchor" href="#mitigacoes-9" aria-label="Permalink to “Mitigações”">​</a></h4><p>Usar o experimental¹ <a href="/pt/nodejs/api/permissions">mecanismo de política com verificação de integridade</a> pode evitar a ameaça acima. Para o diretório descrito acima, pode-se usar o seguinte <code>policy.json</code></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./app/auth.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;integrity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-iuGZ6SFVFpMuHUcJciQTIKpIyaQVigMZlvg9Lx66HV8=&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./app/server.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;./auth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./app/auth.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;integrity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-NPtLCQ0ntPPWgfVEgX46ryTNpdvTWdQPoZO3kHo0bKI=&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Portanto, ao requisitar o módulo auth, o sistema irá validar a integridade e lançar um erro se não corresponder ao esperado.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">»</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --experimental-policy=policy.json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app/server.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node:internal/policy/sri:65</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      throw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ERR_SRI_PARSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">str,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> str[prevIndex],</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prevIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SyntaxError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ERR_SRI_PARSE]: Subresource Integrity string </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-iuGZ6SFVFpMuHUcJciQTIKpIyaQVigMZlvg9Lx66HV8=%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> had an unexpected </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> at position 51</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NodeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/errors:393:5)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Object.parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/policy/sri:65:13)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> processEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/policy/manifest:581:38)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Manifest.assertIntegrity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/policy/manifest:588:32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1119:21)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._extensions..js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1213:10)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module.load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1037:32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:878:12)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module.require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1061:19)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/helpers:99:18) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  code:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_SRI_PARSE&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Note, é sempre recomendado o uso de <code>--policy-integrity</code> para evitar mutações na política.</p><h2 id="funcionalidades-experimentais-em-producao" tabindex="-1">Funcionalidades Experimentais em Produção <a class="header-anchor" href="#funcionalidades-experimentais-em-producao" aria-label="Permalink to “Funcionalidades Experimentais em Produção”">​</a></h2><p>O uso de funcionalidades experimentais em produção não é recomendado. Funcionalidades experimentais podem sofrer alterações que quebram a compatibilidade, se necessário, e sua funcionalidade não é seguramente estável. No entanto, o feedback é muito apreciado.</p><h2 id="ferramentas-openssf" tabindex="-1">Ferramentas OpenSSF <a class="header-anchor" href="#ferramentas-openssf" aria-label="Permalink to “Ferramentas OpenSSF”">​</a></h2><p>O <a href="https://www.openssf.org" target="_blank" rel="noreferrer">OpenSSF</a> está liderando várias iniciativas que podem ser muito úteis, especialmente se você planeja publicar um pacote npm. Essas iniciativas incluem:</p><ul><li><a href="https://securityscorecards.dev/" target="_blank" rel="noreferrer">OpenSSF Scorecard</a> Scorecard avalia projetos de código aberto usando uma série de verificações automatizadas de risco de segurança. Você pode usá-lo para avaliar proativamente vulnerabilidades e dependências em sua base de código e tomar decisões informadas sobre a aceitação de vulnerabilidades.</li><li><a href="https://bestpractices.coreinfrastructure.org/en" target="_blank" rel="noreferrer">OpenSSF Best Practices Badge Program</a> Projetos podem se auto-certificar voluntariamente descrevendo como eles cumprem cada prática recomendada. Isso gerará um selo que pode ser adicionado ao projeto.</li></ul>`,87)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};