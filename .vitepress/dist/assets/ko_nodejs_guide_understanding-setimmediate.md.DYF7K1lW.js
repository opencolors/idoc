import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 의 setImmediate() 이해","description":"Node.js 의 setImmediate() 의 동작을 알아보고, setTimeout(), process.nextTick(), Promise.then() 과의 차이점, 이벤트 루프와 큐との 상호작용에 대해 학습합니다.","frontmatter":{"title":"Node.js 의 setImmediate() 이해","description":"Node.js 의 setImmediate() 의 동작을 알아보고, setTimeout(), process.nextTick(), Promise.then() 과의 차이점, 이벤트 루프와 큐との 상호작용에 대해 학습합니다.","head":[["meta",{"name":"og:title","content":"Node.js 의 setImmediate() 이해 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js 의 setImmediate() 의 동작을 알아보고, setTimeout(), process.nextTick(), Promise.then() 과의 차이점, 이벤트 루프와 큐との 상호작용에 대해 학습합니다."}],["meta",{"name":"twitter:title","content":"Node.js 의 setImmediate() 이해 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js 의 setImmediate() 의 동작을 알아보고, setTimeout(), process.nextTick(), Promise.then() 과의 차이점, 이벤트 루프와 큐との 상호작용에 대해 학습합니다."}],["link",{"rel":"canonical","href":"https://idoc.dev/ko/nodejs/guide/understanding-setimmediate"}],["meta",{"property":"og:url","content":"https://idoc.dev/ko/nodejs/guide/understanding-setimmediate"}]]},"headers":[],"relativePath":"ko/nodejs/guide/understanding-setimmediate.md","filePath":"ko/nodejs/guide/understanding-setimmediate.md","lastUpdated":null}`),a={name:`ko/nodejs/guide/understanding-setimmediate.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="setimmediate-이해하기" tabindex="-1"><code>setImmediate()</code> 이해하기 <a class="header-anchor" href="#setimmediate-이해하기" aria-label="Permalink to “setImmediate() 이해하기”">​</a></h1><p>비동기적으로 코드를 실행하되 최대한 빨리 실행하고 싶을 때 Node.js에서 제공하는 <code>setImmediate()</code> 함수를 사용하는 것이 한 가지 방법입니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>setImmediate()</code> 인수로 전달된 모든 함수는 이벤트 루프의 다음 반복에서 실행되는 콜백입니다.</p><p><code>setImmediate()</code>는 <code>setTimeout(() =&gt; {}, 0)</code>(0ms 제한 시간을 전달)과 <code>process.nextTick()</code> 및 <code>Promise.then()</code>과 어떻게 다를까요?</p><p><code>process.nextTick()</code>에 전달된 함수는 현재 작업이 끝난 후 이벤트 루프의 현재 반복에서 실행됩니다. 즉, 항상 <code>setTimeout</code> 및 <code>setImmediate</code>보다 먼저 실행됩니다.</p><p>0ms 지연이 있는 <code>setTimeout()</code> 콜백은 <code>setImmediate()</code>와 매우 유사합니다. 실행 순서는 여러 요인에 따라 달라지지만 둘 다 이벤트 루프의 다음 반복에서 실행됩니다.</p><p><code>process.nextTick</code> 콜백은 <strong>process.nextTick 큐</strong>에 추가됩니다. <code>Promise.then()</code> 콜백은 프로미스 <strong>마이크로태스크 큐</strong>에 추가됩니다. <code>setTimeout</code>, <code>setImmediate</code> 콜백은 <strong>매크로태스크 큐</strong>에 추가됩니다.</p><p>이벤트 루프는 먼저 <strong>process.nextTick 큐</strong>의 태스크를 실행한 다음 <strong>프로미스 마이크로태스크 큐</strong>를 실행하고 마지막으로 <code>setTimeout</code> 또는 <code>setImmediate</code> <strong>매크로태스크 큐</strong>를 실행합니다.</p><p>다음은 <code>setImmediate()</code>, <code>process.nextTick()</code> 및 <code>Promise.then()</code> 간의 순서를 보여주는 예입니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> zoo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zoo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baz);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(zoo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start foo bar zoo baz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>이 코드는 먼저 <code>start()</code>를 호출한 다음 <strong>process.nextTick 큐</strong>에서 <code>foo()</code>를 호출합니다. 그런 다음 <strong>프로미스 마이크로태스크 큐</strong>를 처리하여 bar를 출력하고 동시에 <strong>process.nextTick 큐</strong>에 <code>zoo()</code>를 추가합니다. 그런 다음 방금 추가된 <code>zoo()</code>를 호출합니다. 마지막으로 <strong>매크로태스크 큐</strong>의 <code>baz()</code>가 호출됩니다.</p><p>위에서 언급한 원칙은 CommonJS의 경우에 해당하지만 ES 모듈(예: <code>mjs</code> 파일)에서는 실행 순서가 다를 수 있습니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start bar foo zoo baz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>이는 로드되는 ES 모듈이 비동기 작업으로 래핑되기 때문에 전체 스크립트가 실제로 이미 <code>promises microtask queue</code>에 있기 때문입니다. 따라서 프로미스가 즉시 해결되면 해당 콜백이 <code>microtask queue</code>에 추가됩니다. Node.js는 다른 큐로 이동하기 전까지 큐를 지우려고 시도하므로 bar가 먼저 출력되는 것을 볼 수 있습니다.</p>`,15)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};