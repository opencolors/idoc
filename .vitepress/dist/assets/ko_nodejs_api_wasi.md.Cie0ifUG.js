import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js WASI 문서","description":"Node.js의 WebAssembly 시스템 인터페이스(WASI)에 대한 문서를 탐색하여 Node.js 환경에서 WASI를 사용하는 방법을 자세히 설명합니다. 파일 시스템 작업, 환경 변수 등의 API를 포함합니다.","frontmatter":{"title":"Node.js WASI 문서","description":"Node.js의 WebAssembly 시스템 인터페이스(WASI)에 대한 문서를 탐색하여 Node.js 환경에서 WASI를 사용하는 방법을 자세히 설명합니다. 파일 시스템 작업, 환경 변수 등의 API를 포함합니다.","head":[["meta",{"name":"og:title","content":"Node.js WASI 문서 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js의 WebAssembly 시스템 인터페이스(WASI)에 대한 문서를 탐색하여 Node.js 환경에서 WASI를 사용하는 방법을 자세히 설명합니다. 파일 시스템 작업, 환경 변수 등의 API를 포함합니다."}],["meta",{"name":"twitter:title","content":"Node.js WASI 문서 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js의 WebAssembly 시스템 인터페이스(WASI)에 대한 문서를 탐색하여 Node.js 환경에서 WASI를 사용하는 방법을 자세히 설명합니다. 파일 시스템 작업, 환경 변수 등의 API를 포함합니다."}],["link",{"rel":"canonical","href":"https://idoc.dev/ko/nodejs/api/wasi"}],["meta",{"property":"og:url","content":"https://idoc.dev/ko/nodejs/api/wasi"}]]},"headers":[],"relativePath":"ko/nodejs/api/wasi.md","filePath":"ko/nodejs/api/wasi.md","lastUpdated":null}`),a={name:`ko/nodejs/api/wasi.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="webassembly-system-interface-wasi" tabindex="-1">WebAssembly System Interface (WASI) <a class="header-anchor" href="#webassembly-system-interface-wasi" aria-label="Permalink to “WebAssembly System Interface (WASI)”">​</a></h1><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ko/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ko/nodejs/api/documentation#stability-index">Stability: 1</a> - 실험적</p></div><p><strong><code>node:wasi</code> 모듈은 일부 WASI 런타임에서 제공하는 포괄적인 파일 시스템 보안 속성을 현재 제공하지 않습니다. 안전한 파일 시스템 샌드박싱에 대한 완전한 지원은 향후 구현될 수도 있고 구현되지 않을 수도 있습니다. 그 동안 신뢰할 수 없는 코드를 실행하는 데 의존하지 마십시오.</strong></p><p><strong>소스 코드:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/wasi.js" target="_blank" rel="noreferrer">lib/wasi.js</a></p><p>WASI API는 <a href="https://wasi.dev/" target="_blank" rel="noreferrer">WebAssembly System Interface</a> 사양의 구현을 제공합니다. WASI는 WebAssembly 애플리케이션에 POSIX와 유사한 함수 모음을 통해 기본 운영 체제에 대한 액세스를 제공합니다.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-17" id="tab-18" checked><label data-title="ESM" for="tab-18">ESM</label><input type="radio" name="group-17" id="tab-19"><label data-title="CJS" for="tab-19">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFile } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { WASI } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:wasi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { argv, env } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preview1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args: argv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preopens: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/some/real/path/that/wasm/can/access&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./demo.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasm, wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImportObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:wasi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const { argv, env } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const { join } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const wasi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preview1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args: argv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preopens: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/some/real/path/that/wasm/can/access&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;demo.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasm, wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImportObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></div></div><p>위의 예제를 실행하려면 <code>demo.wat</code>라는 새 WebAssembly 텍스트 형식 파일을 만드십시오.</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>(module</span></span>
<span class="line"><span>    ;; Import the required fd_write WASI function which will write the given io vectors to stdout</span></span>
<span class="line"><span>    ;; The function signature for fd_write is:</span></span>
<span class="line"><span>    ;; (File Descriptor, *iovs, iovs_len, nwritten) -&gt; Returns number of bytes written</span></span>
<span class="line"><span>    (import &quot;wasi_snapshot_preview1&quot; &quot;fd_write&quot; (func $fd_write (param i32 i32 i32 i32) (result i32)))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    (memory 1)</span></span>
<span class="line"><span>    (export &quot;memory&quot; (memory 0))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ;; Write &#39;hello world\\n&#39; to memory at an offset of 8 bytes</span></span>
<span class="line"><span>    ;; Note the trailing newline which is required for the text to appear</span></span>
<span class="line"><span>    (data (i32.const 8) &quot;hello world\\n&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    (func $main (export &quot;_start&quot;)</span></span>
<span class="line"><span>        ;; Creating a new io vector within linear memory</span></span>
<span class="line"><span>        (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - This is a pointer to the start of the &#39;hello world\\n&#39; string</span></span>
<span class="line"><span>        (i32.store (i32.const 4) (i32.const 12))  ;; iov.iov_len - The length of the &#39;hello world\\n&#39; string</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        (call $fd_write</span></span>
<span class="line"><span>            (i32.const 1) ;; file_descriptor - 1 for stdout</span></span>
<span class="line"><span>            (i32.const 0) ;; *iovs - The pointer to the iov array, which is stored at memory location 0</span></span>
<span class="line"><span>            (i32.const 1) ;; iovs_len - We&#39;re printing 1 string stored in an iov - so one.</span></span>
<span class="line"><span>            (i32.const 20) ;; nwritten - A place in memory to store the number of bytes written</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>        drop ;; Discard the number of bytes written from the top of the stack</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p><a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a>를 사용하여 <code>.wat</code>를 <code>.wasm</code>으로 컴파일합니다.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wat2wasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo.wat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="security" tabindex="-1">보안 <a class="header-anchor" href="#security" aria-label="Permalink to “보안”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[기록]</p><table tabindex="0"><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v21.2.0, v20.11.0</td><td>WASI 보안 속성 명확화.</td></tr><tr><td>v21.2.0, v20.11.0</td><td>추가됨: v21.2.0, v20.11.0</td></tr></tbody></table></div><p>WASI는 애플리케이션에 자체 사용자 지정 <code>env</code>, <code>preopens</code>, <code>stdin</code>, <code>stdout</code>, <code>stderr</code> 및 <code>exit</code> 기능을 제공하는 기능 기반 모델을 제공합니다.</p><p><strong>현재 Node.js 위협 모델은 일부 WASI 런타임에 있는 것과 같은 안전한 샌드박싱을 제공하지 않습니다.</strong></p><p>기능 기능은 지원되지만 Node.js에서는 보안 모델을 구성하지 않습니다. 예를 들어 파일 시스템 샌드박싱은 다양한 기술로 이스케이프할 수 있습니다. 프로젝트에서는 이러한 보안 보장이 향후 추가될 수 있는지 여부를 모색하고 있습니다.</p><h2 id="class-wasi" tabindex="-1">클래스: <code>WASI</code> <a class="header-anchor" href="#class-wasi" aria-label="Permalink to “클래스: WASI”">​</a></h2><p><strong>추가됨: v13.3.0, v12.16.0</strong></p><p><code>WASI</code> 클래스는 WASI 시스템 호출 API와 WASI 기반 애플리케이션 작업을 위한 추가 편의 메서드를 제공합니다. 각 <code>WASI</code> 인스턴스는 고유한 환경을 나타냅니다.</p><h3 id="new-wasioptions" tabindex="-1"><code>new WASI([options])</code> <a class="header-anchor" href="#new-wasioptions" aria-label="Permalink to “new WASI([options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[기록]</p><table tabindex="0"><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v20.1.0</td><td>returnOnExit의 기본값이 true로 변경됨.</td></tr><tr><td>v20.0.0</td><td>이제 version 옵션이 필수이며 기본값이 없습니다.</td></tr><tr><td>v19.8.0</td><td>options에 version 필드가 추가됨.</td></tr><tr><td>v13.3.0, v12.16.0</td><td>추가됨: v13.3.0, v12.16.0</td></tr></tbody></table></div><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>args</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">&lt;Array&gt;</a> WebAssembly 애플리케이션이 명령줄 인수로 보게 될 문자열 배열입니다. 첫 번째 인수는 WASI 명령 자체의 가상 경로입니다. <strong>기본값:</strong> <code>[]</code>.</li><li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> WebAssembly 애플리케이션이 해당 환경으로 보게 될 <code>process.env</code>와 유사한 객체입니다. <strong>기본값:</strong> <code>{}</code>.</li><li><code>preopens</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 이 객체는 WebAssembly 애플리케이션의 로컬 디렉터리 구조를 나타냅니다. <code>preopens</code>의 문자열 키는 파일 시스템 내의 디렉터리로 처리됩니다. <code>preopens</code>의 해당 값은 호스트 머신의 해당 디렉터리에 대한 실제 경로입니다.</li><li><code>returnOnExit</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 기본적으로 WASI 애플리케이션이 <code>__wasi_proc_exit()</code>를 호출하면 <code>wasi.start()</code>는 프로세스를 종료하는 대신 지정된 종료 코드로 반환됩니다. 이 옵션을 <code>false</code>로 설정하면 Node.js 프로세스가 지정된 종료 코드로 종료됩니다. <strong>기본값:</strong> <code>true</code>.</li><li><code>stdin</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> WebAssembly 애플리케이션에서 표준 입력으로 사용되는 파일 설명자입니다. <strong>기본값:</strong> <code>0</code>.</li><li><code>stdout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> WebAssembly 애플리케이션에서 표준 출력으로 사용되는 파일 설명자입니다. <strong>기본값:</strong> <code>1</code>.</li><li><code>stderr</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> WebAssembly 애플리케이션에서 표준 오류로 사용되는 파일 설명자입니다. <strong>기본값:</strong> <code>2</code>.</li><li><code>version</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 요청된 WASI 버전입니다. 현재 지원되는 유일한 버전은 <code>unstable</code> 및 <code>preview1</code>입니다. 이 옵션은 필수입니다.</li></ul></li></ul><h3 id="wasigetimportobject" tabindex="-1"><code>wasi.getImportObject()</code> <a class="header-anchor" href="#wasigetimportobject" aria-label="Permalink to “wasi.getImportObject()”">​</a></h3><p><strong>Added in: v19.8.0</strong></p><p>WASI에서 제공하는 것 외에 다른 WASM 가져오기가 필요하지 않은 경우 <code>WebAssembly.instantiate()</code>에 전달할 수 있는 가져오기 객체를 반환합니다.</p><p><code>unstable</code> 버전이 생성자에 전달된 경우 다음을 반환합니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi_unstable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi.wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>preview1</code> 버전이 생성자에 전달되었거나 버전이 지정되지 않은 경우 다음을 반환합니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi_snapshot_preview1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi.wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="wasistartinstance" tabindex="-1"><code>wasi.start(instance)</code> <a class="header-anchor" href="#wasistartinstance" aria-label="Permalink to “wasi.start(instance)”">​</a></h3><p><strong>Added in: v13.3.0, v12.16.0</strong></p><ul><li><code>instance</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer">&lt;WebAssembly.Instance&gt;</a></li></ul><p><code>_start()</code> 내보내기를 호출하여 <code>instance</code>의 실행을 WASI 명령으로 시작하려고 시도합니다. <code>instance</code>에 <code>_start()</code> 내보내기가 없거나 <code>instance</code>에 <code>_initialize()</code> 내보내기가 포함된 경우 예외가 발생합니다.</p><p><code>start()</code>는 <code>instance</code>가 <code>memory</code>라는 이름의 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory" target="_blank" rel="noreferrer"><code>WebAssembly.Memory</code></a>를 내보내도록 요구합니다. <code>instance</code>에 <code>memory</code> 내보내기가 없으면 예외가 발생합니다.</p><p><code>start()</code>가 두 번 이상 호출되면 예외가 발생합니다.</p><h3 id="wasiinitializeinstance" tabindex="-1"><code>wasi.initialize(instance)</code> <a class="header-anchor" href="#wasiinitializeinstance" aria-label="Permalink to “wasi.initialize(instance)”">​</a></h3><p><strong>Added in: v14.6.0, v12.19.0</strong></p><ul><li><code>instance</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer">&lt;WebAssembly.Instance&gt;</a></li></ul><p><code>_initialize()</code> 내보내기가 있는 경우 이를 호출하여 <code>instance</code>를 WASI 리액터로 초기화하려고 시도합니다. <code>instance</code>에 <code>_start()</code> 내보내기가 포함된 경우 예외가 발생합니다.</p><p><code>initialize()</code>는 <code>instance</code>가 <code>memory</code>라는 이름의 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory" target="_blank" rel="noreferrer"><code>WebAssembly.Memory</code></a>를 내보내도록 요구합니다. <code>instance</code>에 <code>memory</code> 내보내기가 없으면 예외가 발생합니다.</p><p><code>initialize()</code>가 두 번 이상 호출되면 예외가 발생합니다.</p><h3 id="wasiwasiimport" tabindex="-1"><code>wasi.wasiImport</code> <a class="header-anchor" href="#wasiwasiimport" aria-label="Permalink to “wasi.wasiImport”">​</a></h3><p><strong>Added in: v13.3.0, v12.16.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><code>wasiImport</code>는 WASI 시스템 호출 API를 구현하는 객체입니다. 이 객체는 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer"><code>WebAssembly.Instance</code></a>를 인스턴스화하는 동안 <code>wasi_snapshot_preview1</code> 가져오기로 전달해야 합니다.</p>`,44)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};