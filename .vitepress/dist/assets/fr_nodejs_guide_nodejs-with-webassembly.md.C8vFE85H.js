import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js avec WebAssembly","description":"WebAssembly est un langage assembleur haute performance qui peut être compilé à partir de divers langages, notamment C/C++, Rust et AssemblyScript. Node.js fournit les API nécessaires via l'objet WebAssembly global pour communiquer avec WebAssembly.","frontmatter":{"title":"Node.js avec WebAssembly","description":"WebAssembly est un langage assembleur haute performance qui peut être compilé à partir de divers langages, notamment C/C++, Rust et AssemblyScript. Node.js fournit les API nécessaires via l'objet WebAssembly global pour communiquer avec WebAssembly.","head":[["meta",{"name":"og:title","content":"Node.js avec WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"WebAssembly est un langage assembleur haute performance qui peut être compilé à partir de divers langages, notamment C/C++, Rust et AssemblyScript. Node.js fournit les API nécessaires via l'objet WebAssembly global pour communiquer avec WebAssembly."}],["meta",{"name":"twitter:title","content":"Node.js avec WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"WebAssembly est un langage assembleur haute performance qui peut être compilé à partir de divers langages, notamment C/C++, Rust et AssemblyScript. Node.js fournit les API nécessaires via l'objet WebAssembly global pour communiquer avec WebAssembly."}],["link",{"rel":"canonical","href":"https://idoc.dev/fr/nodejs/guide/nodejs-with-webassembly"}],["meta",{"property":"og:url","content":"https://idoc.dev/fr/nodejs/guide/nodejs-with-webassembly"}]]},"headers":[],"relativePath":"fr/nodejs/guide/nodejs-with-webassembly.md","filePath":"fr/nodejs/guide/nodejs-with-webassembly.md","lastUpdated":null}`),a={name:`fr/nodejs/guide/nodejs-with-webassembly.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-avec-webassembly" tabindex="-1">Node.js avec WebAssembly <a class="header-anchor" href="#node-js-avec-webassembly" aria-label="Permalink to “Node.js avec WebAssembly”">​</a></h1><p><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> est un langage de type assembleur haute performance qui peut être compilé à partir de divers langages, notamment C/C++, Rust et AssemblyScript. Il est actuellement pris en charge par Chrome, Firefox, Safari, Edge et Node.js\xA0!</p><p>La spécification WebAssembly détaille deux formats de fichiers, un format binaire appelé module WebAssembly avec une extension <code>.wasm</code> et une représentation textuelle correspondante appelée format texte WebAssembly avec une extension <code>.wat</code>.</p><h2 id="concepts-cles" tabindex="-1">Concepts clés <a class="header-anchor" href="#concepts-cles" aria-label="Permalink to “Concepts clés”">​</a></h2><ul><li>Module - Un binaire WebAssembly compilé, c&#39;est-à-dire un fichier <code>.wasm</code>.</li><li>Mémoire - Un ArrayBuffer redimensionnable.</li><li>Table - Un tableau typé redimensionnable de références non stockées dans la mémoire.</li><li>Instance - Une instanciation d&#39;un module avec sa mémoire, sa table et ses variables.</li></ul><p>Pour utiliser WebAssembly, vous avez besoin d&#39;un fichier binaire <code>.wasm</code> et d&#39;un ensemble d&#39;API pour communiquer avec WebAssembly. Node.js fournit les API nécessaires via l&#39;objet global <code>WebAssembly</code>.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebAssembly)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Object [WebAssembly] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  compile: [Function: compile],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  validate: [Function: validate],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  instantiate: [Function: instantiate]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="generation-de-modules-webassembly" tabindex="-1">Génération de modules WebAssembly <a class="header-anchor" href="#generation-de-modules-webassembly" aria-label="Permalink to “Génération de modules WebAssembly”">​</a></h2><p>Il existe plusieurs méthodes disponibles pour générer des fichiers binaires WebAssembly, notamment\xA0:</p><ul><li>Écrire WebAssembly (<code>.wat</code>) à la main et convertir au format binaire à l&#39;aide d&#39;outils tels que <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a>.</li><li>Utiliser <a href="https://github.com/emscripten-core/emscripten" target="_blank" rel="noreferrer">emscripten</a> avec une application C/C++</li><li>Utiliser <a href="https://github.com/rustwasm/wasm-pack" target="_blank" rel="noreferrer">wasm-pack</a> avec une application Rust</li><li>Utiliser <a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noreferrer">AssemblyScript</a> si vous préférez une expérience de type TypeScript</li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong>Certains de ces outils génèrent non seulement le fichier binaire, mais aussi le code JavaScript &quot;glue&quot; et les fichiers HTML correspondants pour s&#39;exécuter dans le navigateur.</strong></p></div><h2 id="comment-l-utiliser" tabindex="-1">Comment l&#39;utiliser <a class="header-anchor" href="#comment-l-utiliser" aria-label="Permalink to “Comment l&#39;utiliser”">​</a></h2><p>Une fois que vous avez un module WebAssembly, vous pouvez utiliser l&#39;objet <code>WebAssembly</code> de Node.js pour l&#39;instancier.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/add.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasmBuffer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wasmModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // La fonction exportée se trouve sous instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmModule.instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Affiche\xA0: 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="interagir-avec-le-systeme-d-exploitation" tabindex="-1">Interagir avec le système d&#39;exploitation <a class="header-anchor" href="#interagir-avec-le-systeme-d-exploitation" aria-label="Permalink to “Interagir avec le système d&#39;exploitation”">​</a></h2><p>Les modules WebAssembly ne peuvent pas accéder directement aux fonctionnalités du système d&#39;exploitation par eux-mêmes. Un outil tiers <a href="https://github.com/bytecodealliance/wasmtime" target="_blank" rel="noreferrer">Wasmtime</a> peut être utilisé pour accéder à cette fonctionnalité. <code>Wasmtime</code> utilise l&#39;API <a href="https://webassembly.org/WASI" target="_blank" rel="noreferrer">WASI</a> pour accéder aux fonctionnalités du système d&#39;exploitation.</p><h2 id="ressources" tabindex="-1">Ressources <a class="header-anchor" href="#ressources" aria-label="Permalink to “Ressources”">​</a></h2><ul><li><a href="https://webassembly.org/" target="_blank" rel="noreferrer">Informations générales sur WebAssembly</a></li><li><a href="https://developer.mozilla.org/fr/docs/WebAssembly" target="_blank" rel="noreferrer">Documentation MDN</a></li><li><a href="https://webassembly.github.io/spec/core/text/index.html" target="_blank" rel="noreferrer">Écrire WebAssembly à la main</a></li></ul>`,18)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};