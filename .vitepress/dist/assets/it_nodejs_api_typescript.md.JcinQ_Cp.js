import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Supporto di TypeScript in Node.js","description":"Scopri come usare TypeScript con Node.js, inclusa l'installazione, la configurazione e le migliori pratiche per integrare TypeScript nei tuoi progetti Node.js.","frontmatter":{"title":"Supporto di TypeScript in Node.js","description":"Scopri come usare TypeScript con Node.js, inclusa l'installazione, la configurazione e le migliori pratiche per integrare TypeScript nei tuoi progetti Node.js.","head":[["meta",{"name":"og:title","content":"Supporto di TypeScript in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Scopri come usare TypeScript con Node.js, inclusa l'installazione, la configurazione e le migliori pratiche per integrare TypeScript nei tuoi progetti Node.js."}],["meta",{"name":"twitter:title","content":"Supporto di TypeScript in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Scopri come usare TypeScript con Node.js, inclusa l'installazione, la configurazione e le migliori pratiche per integrare TypeScript nei tuoi progetti Node.js."}],["link",{"rel":"canonical","href":"https://idoc.dev/it/nodejs/api/typescript"}],["meta",{"property":"og:url","content":"https://idoc.dev/it/nodejs/api/typescript"}]]},"headers":[],"relativePath":"it/nodejs/api/typescript.md","filePath":"it/nodejs/api/typescript.md","lastUpdated":null}`),a={name:`it/nodejs/api/typescript.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="modules-typescript" tabindex="-1">Moduli: TypeScript <a class="header-anchor" href="#modules-typescript" aria-label="Permalink to “Moduli: TypeScript”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[Cronologia]</p><table tabindex="0"><thead><tr><th>Versione</th><th>Modifiche</th></tr></thead><tbody><tr><td>v22.7.0</td><td>Aggiunto il flag <code>--experimental-transform-types</code>.</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[Stabile: 1 - Sperimentale]</p><p><a href="/it/nodejs/api/documentation#stability-index">Stabile: 1</a> <a href="/it/nodejs/api/documentation#stability-index">Stabilità: 1</a>.1 - Sviluppo attivo</p></div><h2 id="enabling" tabindex="-1">Abilitazione <a class="header-anchor" href="#enabling" aria-label="Permalink to “Abilitazione”">​</a></h2><p>Ci sono due modi per abilitare il supporto runtime di TypeScript in Node.js:</p><h2 id="full-typescript-support" tabindex="-1">Supporto completo di TypeScript <a class="header-anchor" href="#full-typescript-support" aria-label="Permalink to “Supporto completo di TypeScript”">​</a></h2><p>Per utilizzare TypeScript con il supporto completo di tutte le funzionalità di TypeScript, incluso <code>tsconfig.json</code>, è possibile utilizzare un pacchetto di terze parti. Queste istruzioni utilizzano <a href="https://tsx.is/" target="_blank" rel="noreferrer"><code>tsx</code></a> come esempio, ma sono disponibili molte altre librerie simili.</p><h2 id="type-stripping" tabindex="-1">Rimozione dei tipi <a class="header-anchor" href="#type-stripping" aria-label="Permalink to “Rimozione dei tipi”">​</a></h2><p><strong>Aggiunto in: v22.6.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stabile: 1 - Sperimentale]</p><p><a href="/it/nodejs/api/documentation#stability-index">Stabile: 1</a> <a href="/it/nodejs/api/documentation#stability-index">Stabilità: 1</a>.1 - Sviluppo attivo</p></div><p>Il flag <a href="/it/nodejs/api/cli#experimental-strip-types"><code>--experimental-strip-types</code></a> abilita Node.js per eseguire file TypeScript. Per impostazione predefinita, Node.js eseguirà solo i file che non contengono funzionalità TypeScript che richiedono la trasformazione, come enum o spazi dei nomi. Node.js sostituirà le annotazioni di tipo inline con spazi vuoti e non verrà eseguito alcun controllo del tipo. Per abilitare la trasformazione di tali funzionalità, utilizzare il flag <a href="/it/nodejs/api/cli#experimental-transform-types"><code>--experimental-transform-types</code></a>. Le funzionalità di TypeScript che dipendono dalle impostazioni all&#39;interno di <code>tsconfig.json</code>, come i percorsi o la conversione della sintassi JavaScript più recente in standard precedenti, non sono intenzionalmente supportate. Per ottenere il supporto completo di TypeScript, vedere <a href="/it/nodejs/api/typescript#full-typescript-support">Supporto completo di TypeScript</a>.</p><p>La funzionalità di rimozione dei tipi è progettata per essere leggera. Non supportando intenzionalmente le sintassi che richiedono la generazione di codice JavaScript e sostituendo i tipi inline con spazi vuoti, Node.js può eseguire codice TypeScript senza la necessità di source map.</p><p>La rimozione dei tipi funziona con la maggior parte delle versioni di TypeScript, ma si consiglia la versione 5.7 o successiva con le seguenti impostazioni di <code>tsconfig.json</code>:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esnext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nodenext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;allowImportingTsExtensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;rewriteRelativeImportExtensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;verbatimModuleSyntax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="determining-module-system" tabindex="-1">Determinazione del sistema di moduli <a class="header-anchor" href="#determining-module-system" aria-label="Permalink to “Determinazione del sistema di moduli”">​</a></h3><p>Node.js supporta sia la sintassi <a href="/it/nodejs/api/modules">CommonJS</a> che quella <a href="/it/nodejs/api/esm">ES Modules</a> nei file TypeScript. Node.js non convertirà da un sistema di moduli all&#39;altro; se vuoi che il tuo codice venga eseguito come un modulo ES, devi usare la sintassi <code>import</code> e <code>export</code>, e se vuoi che il tuo codice venga eseguito come CommonJS devi usare <code>require</code> e <code>module.exports</code>.</p><ul><li>I file <code>.ts</code> avranno il loro sistema di moduli determinato <a href="/it/nodejs/api/packages#determining-module-system">allo stesso modo dei file <code>.js</code>.</a> Per usare la sintassi <code>import</code> e <code>export</code>, aggiungi <code>&quot;type&quot;: &quot;module&quot;</code> al <code>package.json</code> padre più vicino.</li><li>I file <code>.mts</code> saranno sempre eseguiti come moduli ES, in modo simile ai file <code>.mjs</code>.</li><li>I file <code>.cts</code> saranno sempre eseguiti come moduli CommonJS, in modo simile ai file <code>.cjs</code>.</li><li>I file <code>.tsx</code> non sono supportati.</li></ul><p>Come nei file JavaScript, <a href="/it/nodejs/api/esm#mandatory-file-extensions">le estensioni dei file sono obbligatorie</a> nelle istruzioni <code>import</code> e nelle espressioni <code>import()</code>: <code>import &#39;./file.ts&#39;</code>, non <code>import &#39;./file&#39;</code>. A causa della retrocompatibilità, le estensioni dei file sono anche obbligatorie nelle chiamate <code>require()</code>: <code>require(&#39;./file.ts&#39;)</code>, non <code>require(&#39;./file&#39;)</code>, in modo simile a come l&#39;estensione <code>.cjs</code> è obbligatoria nelle chiamate <code>require</code> nei file CommonJS.</p><p>L&#39;opzione <code>tsconfig.json</code> <code>allowImportingTsExtensions</code> consentirà al compilatore TypeScript <code>tsc</code> di controllare i tipi di file con specificatori <code>import</code> che includono l&#39;estensione <code>.ts</code>.</p><h3 id="typescript-features" tabindex="-1">Funzionalità di TypeScript <a class="header-anchor" href="#typescript-features" aria-label="Permalink to “Funzionalità di TypeScript”">​</a></h3><p>Poiché Node.js sta rimuovendo solo i tipi inline, qualsiasi funzionalità TypeScript che implichi la <em>sostituzione</em> della sintassi TypeScript con una nuova sintassi JavaScript genererà un errore, a meno che non venga passato il flag <a href="/it/nodejs/api/cli#experimental-transform-types"><code>--experimental-transform-types</code></a>.</p><p>Le funzionalità più importanti che richiedono la trasformazione sono:</p><ul><li><code>Enum</code></li><li><code>namespaces</code></li><li><code>legacy module</code></li><li>proprietà dei parametri</li></ul><p>Poiché i Decorator sono attualmente una <a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noreferrer">proposta TC39 Stage 3</a> e saranno presto supportati dal motore JavaScript, non vengono trasformati e comporteranno un errore di analisi. Questa è una limitazione temporanea e sarà risolta in futuro.</p><p>Inoltre, Node.js non legge i file <code>tsconfig.json</code> e non supporta le funzionalità che dipendono dalle impostazioni all&#39;interno di <code>tsconfig.json</code>, come percorsi o la conversione di una sintassi JavaScript più recente in standard precedenti.</p><h3 id="importing-types-without-type-keyword" tabindex="-1">Importazione di tipi senza la parola chiave <code>type</code> <a class="header-anchor" href="#importing-types-without-type-keyword" aria-label="Permalink to “Importazione di tipi senza la parola chiave type”">​</a></h3><p>A causa della natura dello stripping dei tipi, la parola chiave <code>type</code> è necessaria per rimuovere correttamente gli import di tipi. Senza la parola chiave <code>type</code>, Node.js tratterà l&#39;import come un import di valore, il che comporterà un errore di runtime. L&#39;opzione tsconfig <a href="https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax" target="_blank" rel="noreferrer"><code>verbatimModuleSyntax</code></a> può essere utilizzata per abbinare questo comportamento.</p><p>Questo esempio funzionerà correttamente:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Type1, Type2 } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fn, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FnParams } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./fn.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Questo comporterà un errore di runtime:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Type1, Type2 } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fn, FnParams } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./fn.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="non-file-forms-of-input" tabindex="-1">Forme di input non file <a class="header-anchor" href="#non-file-forms-of-input" aria-label="Permalink to “Forme di input non file”">​</a></h3><p>Lo stripping dei tipi può essere abilitato per <code>--eval</code>. Il sistema di moduli sarà determinato da <code>--input-type</code>, come lo è per JavaScript.</p><p>La sintassi TypeScript non è supportata in REPL, input STDIN, <code>--print</code>, <code>--check</code> e <code>inspect</code>.</p><h3 id="source-maps" tabindex="-1">Source map <a class="header-anchor" href="#source-maps" aria-label="Permalink to “Source map”">​</a></h3><p>Poiché i tipi inline vengono sostituiti da spazi vuoti, le source map non sono necessarie per numeri di riga corretti negli stack trace; e Node.js non le genera. Quando <a href="/it/nodejs/api/cli#experimental-transform-types"><code>--experimental-transform-types</code></a> è abilitato, le source map sono abilitate di default.</p><h3 id="type-stripping-in-dependencies" tabindex="-1">Type stripping nelle dipendenze <a class="header-anchor" href="#type-stripping-in-dependencies" aria-label="Permalink to “Type stripping nelle dipendenze”">​</a></h3><p>Per scoraggiare gli autori di pacchetti dalla pubblicazione di pacchetti scritti in TypeScript, Node.js di default rifiuterà di gestire i file TypeScript all&#39;interno di cartelle sotto un percorso <code>node_modules</code>.</p><h3 id="paths-aliases" tabindex="-1">Alias di percorso <a class="header-anchor" href="#paths-aliases" aria-label="Permalink to “Alias di percorso”">​</a></h3><p><a href="https://www.typescriptlang.org/tsconfig/#paths" target="_blank" rel="noreferrer"><code>tsconfig</code> &quot;paths&quot;</a> non verranno trasformati e quindi produrranno un errore. La feature più simile disponibile è <a href="/it/nodejs/api/packages#subpath-imports">importazioni di sottopercorso</a> con la limitazione che devono iniziare con <code>#</code>.</p>`,40)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};