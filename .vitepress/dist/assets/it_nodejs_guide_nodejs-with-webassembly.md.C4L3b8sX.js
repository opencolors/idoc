import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js con WebAssembly","description":"WebAssembly è un linguaggio assembly ad alte prestazioni che può essere compilato da vari linguaggi, tra cui C/C++, Rust e AssemblyScript. Node.js fornisce le API necessarie tramite l'oggetto WebAssembly globale per comunicare con WebAssembly.","frontmatter":{"title":"Node.js con WebAssembly","description":"WebAssembly è un linguaggio assembly ad alte prestazioni che può essere compilato da vari linguaggi, tra cui C/C++, Rust e AssemblyScript. Node.js fornisce le API necessarie tramite l'oggetto WebAssembly globale per comunicare con WebAssembly.","head":[["meta",{"name":"og:title","content":"Node.js con WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"WebAssembly è un linguaggio assembly ad alte prestazioni che può essere compilato da vari linguaggi, tra cui C/C++, Rust e AssemblyScript. Node.js fornisce le API necessarie tramite l'oggetto WebAssembly globale per comunicare con WebAssembly."}],["meta",{"name":"twitter:title","content":"Node.js con WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"WebAssembly è un linguaggio assembly ad alte prestazioni che può essere compilato da vari linguaggi, tra cui C/C++, Rust e AssemblyScript. Node.js fornisce le API necessarie tramite l'oggetto WebAssembly globale per comunicare con WebAssembly."}],["link",{"rel":"canonical","href":"https://idoc.dev/it/nodejs/guide/nodejs-with-webassembly"}],["meta",{"property":"og:url","content":"https://idoc.dev/it/nodejs/guide/nodejs-with-webassembly"}]]},"headers":[],"relativePath":"it/nodejs/guide/nodejs-with-webassembly.md","filePath":"it/nodejs/guide/nodejs-with-webassembly.md","lastUpdated":null}`),a={name:`it/nodejs/guide/nodejs-with-webassembly.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-con-webassembly" tabindex="-1">Node.js con WebAssembly <a class="header-anchor" href="#node-js-con-webassembly" aria-label="Permalink to “Node.js con WebAssembly”">​</a></h1><p><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> è un linguaggio simile all&#39;assembly ad alte prestazioni che può essere compilato da vari linguaggi, tra cui C/C++, Rust e AssemblyScript. Attualmente, è supportato da Chrome, Firefox, Safari, Edge e Node.js!</p><p>La specifica WebAssembly descrive in dettaglio due formati di file, un formato binario chiamato Modulo WebAssembly con estensione <code>.wasm</code> e la corrispondente rappresentazione testuale chiamata formato testo WebAssembly con estensione <code>.wat</code>.</p><h2 id="concetti-chiave" tabindex="-1">Concetti chiave <a class="header-anchor" href="#concetti-chiave" aria-label="Permalink to “Concetti chiave”">​</a></h2><ul><li>Module - Un binario WebAssembly compilato, ad esempio un file <code>.wasm</code>.</li><li>Memory - Un ArrayBuffer ridimensionabile.</li><li>Table - Un array tipizzato ridimensionabile di riferimenti non memorizzati in Memory.</li><li>Instance - Un&#39;istanza di un Modulo con la sua Memory, Table e variabili.</li></ul><p>Per utilizzare WebAssembly, è necessario un file binario <code>.wasm</code> e un set di API per comunicare con WebAssembly. Node.js fornisce le API necessarie tramite l&#39;oggetto globale <code>WebAssembly</code>.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebAssembly)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Object [WebAssembly] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  compile: [Function: compile],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  validate: [Function: validate],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  instantiate: [Function: instantiate]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="generazione-di-moduli-webassembly" tabindex="-1">Generazione di moduli WebAssembly <a class="header-anchor" href="#generazione-di-moduli-webassembly" aria-label="Permalink to “Generazione di moduli WebAssembly”">​</a></h2><p>Sono disponibili diversi metodi per generare file binari WebAssembly, tra cui:</p><ul><li>Scrivere WebAssembly (<code>.wat</code>) a mano e convertire in formato binario utilizzando strumenti come <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a>.</li><li>Utilizzo di <a href="https://github.com/emscripten-core/emscripten" target="_blank" rel="noreferrer">emscripten</a> con un&#39;applicazione C/C++</li><li>Utilizzo di <a href="https://github.com/rustwasm/wasm-pack" target="_blank" rel="noreferrer">wasm-pack</a> con un&#39;applicazione Rust</li><li>Utilizzo di <a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noreferrer">AssemblyScript</a> se preferisci un&#39;esperienza simile a TypeScript</li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong>Alcuni di questi strumenti generano non solo il file binario, ma anche il codice &quot;glue&quot; JavaScript e i corrispondenti file HTML per l&#39;esecuzione nel browser.</strong></p></div><h2 id="come-usarlo" tabindex="-1">Come usarlo <a class="header-anchor" href="#come-usarlo" aria-label="Permalink to “Come usarlo”">​</a></h2><p>Una volta che hai un modulo WebAssembly, puoi utilizzare l&#39;oggetto <code>WebAssembly</code> di Node.js per istanziarlo.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/add.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasmBuffer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wasmModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // La funzione esportata risiede in instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmModule.instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="interazione-con-il-sistema-operativo" tabindex="-1">Interazione con il Sistema Operativo <a class="header-anchor" href="#interazione-con-il-sistema-operativo" aria-label="Permalink to “Interazione con il Sistema Operativo”">​</a></h2><p>I moduli WebAssembly non possono accedere direttamente alle funzionalità del sistema operativo da soli. Uno strumento di terze parti, <a href="https://github.com/bytecodealliance/wasmtime" target="_blank" rel="noreferrer">Wasmtime</a>, può essere utilizzato per accedere a questa funzionalità. <code>Wasmtime</code> utilizza l&#39;API <a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a> per accedere alle funzionalità del sistema operativo.</p><h2 id="risorse" tabindex="-1">Risorse <a class="header-anchor" href="#risorse" aria-label="Permalink to “Risorse”">​</a></h2><ul><li><a href="https://webassembly.org/" target="_blank" rel="noreferrer">Informazioni generali su WebAssembly</a></li><li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noreferrer">Documenti MDN</a></li><li><a href="https://webassembly.github.io/spec/core/text/index.html" target="_blank" rel="noreferrer">Scrivere WebAssembly a mano</a></li></ul>`,18)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};