import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js の ECMAScript 2015（ES6）とその先","description":"Node.js は V8 エンジンを通じて最新の ECMAScript 機能をサポートし、新しい機能や改善が適時に行われています。","frontmatter":{"title":"Node.js の ECMAScript 2015（ES6）とその先","description":"Node.js は V8 エンジンを通じて最新の ECMAScript 機能をサポートし、新しい機能や改善が適時に行われています。","head":[["meta",{"name":"og:title","content":"Node.js の ECMAScript 2015（ES6）とその先 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js は V8 エンジンを通じて最新の ECMAScript 機能をサポートし、新しい機能や改善が適時に行われています。"}],["meta",{"name":"twitter:title","content":"Node.js の ECMAScript 2015（ES6）とその先 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js は V8 エンジンを通じて最新の ECMAScript 機能をサポートし、新しい機能や改善が適時に行われています。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/guide/ECMAScript-2015(ES6)-and-beyond"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/guide/ECMAScript-2015(ES6)-and-beyond"}]]},"headers":[],"relativePath":"ja/nodejs/guide/ECMAScript-2015(ES6)-and-beyond.md","filePath":"ja/nodejs/guide/ECMAScript-2015(ES6)-and-beyond.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/guide/ECMAScript-2015(ES6)-and-beyond.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="ecmascript-2015-es6-以降" tabindex="-1">ECMAScript 2015 (ES6) 以降 <a class="header-anchor" href="#ecmascript-2015-es6-以降" aria-label="Permalink to “ECMAScript 2015 (ES6) 以降”">​</a></h1><p>Node.js は最新バージョンの <a href="https://v8.dev/" target="_blank" rel="noreferrer">V8</a> を基に構築されています。このエンジンの最新リリースに追従することで、<a href="https://tc39.es/ecma262/" target="_blank" rel="noreferrer">JavaScript ECMA-262 仕様</a> の新しい機能が Node.js 開発者にタイムリーに提供されるだけでなく、パフォーマンスと安定性の継続的な向上が保証されます。</p><p>すべての ECMAScript 2015 (ES6) 機能は、<code>shipping</code>、<code>staged</code>、および <code>in progress</code> 機能の 3 つのグループに分けられます。</p><ul><li>V8 が安定していると見なす <code>shipping</code> 機能はすべて、<code>Node.js でデフォルトで有効</code> になっており、ランタイムフラグは一切 <code>不要</code> です。</li><li><code>Staged</code> 機能は、ほぼ完成しているものの、V8 チームによって安定していると見なされていない機能であり、ランタイムフラグ <code>--harmony</code> が必要です。</li><li><code>In progress</code> 機能は、それぞれの harmony フラグによって個別にアクティブ化できますが、テスト目的以外では強くお勧めしません。注: これらのフラグは V8 によって公開されており、非推奨の通知なしに変更される可能性があります。</li></ul><h2 id="どの機能がどの-node-js-バージョンでデフォルトで提供されますか" tabindex="-1">どの機能がどの Node.js バージョンでデフォルトで提供されますか？ <a class="header-anchor" href="#どの機能がどの-node-js-バージョンでデフォルトで提供されますか" aria-label="Permalink to “どの機能がどの Node.js バージョンでデフォルトで提供されますか？”">​</a></h2><p>ウェブサイト <a href="https://node.green" target="_blank" rel="noreferrer">node.green</a> は、kangax の compat-table に基づいて、さまざまなバージョンの Node.js でサポートされている ECMAScript 機能の優れた概要を提供します。</p><h2 id="どの機能が-in-progress-ですか" tabindex="-1">どの機能が in progress ですか？ <a class="header-anchor" href="#どの機能が-in-progress-ですか" aria-label="Permalink to “どの機能が in progress ですか？”">​</a></h2><p>新しい機能は V8 エンジンに常に追加されています。一般的に言って、今後の Node.js リリースで利用できるようになることを期待できますが、時期は不明です。</p><p><code>--v8-options</code> 引数を grep することで、各 Node.js リリースで利用可能なすべての in progress 機能を一覧表示できます。これらは V8 の未完成で、場合によっては壊れている機能であるため、ご自身の責任で使用してください。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --v8-options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;in progress&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="harmony-フラグを活用するようにインフラストラクチャを設定しています。削除する必要がありますか" tabindex="-1"><code>--harmony</code> フラグを活用するようにインフラストラクチャを設定しています。削除する必要がありますか？ <a class="header-anchor" href="#harmony-フラグを活用するようにインフラストラクチャを設定しています。削除する必要がありますか" aria-label="Permalink to “--harmony フラグを活用するようにインフラストラクチャを設定しています。削除する必要がありますか？”">​</a></h2><p>Node.js での <code>--harmony</code> フラグの現在の動作は、<code>staged</code> 機能のみを有効にすることです。結局のところ、これは現在 <code>--es_staging</code> の同義語です。上記のように、これらはまだ安定しているとは見なされていない完了した機能です。特に本番環境では、安全を期したい場合は、V8 で、したがって Node.js でデフォルトで提供されるまで、このランタイムフラグを削除することを検討してください。これを有効にしたままにする場合は、V8 が標準により厳密に従うようにセマンティクスを変更した場合、Node.js のアップグレードによってコードが破損する可能性があることに備えておく必要があります。</p><h2 id="特定のバージョンのnode-jsに同梱されているv8のバージョンを調べるにはどうすればよいですか" tabindex="-1">特定のバージョンのNode.jsに同梱されているV8のバージョンを調べるにはどうすればよいですか？ <a class="header-anchor" href="#特定のバージョンのnode-jsに同梱されているv8のバージョンを調べるにはどうすればよいですか" aria-label="Permalink to “特定のバージョンのNode.jsに同梱されているV8のバージョンを調べるにはどうすればよいですか？”">​</a></h2><p>Node.jsでは、<code>process</code>グローバルオブジェクトを通じて、特定のバイナリに同梱されているすべての依存関係とそのバージョンを簡単にリストアップできます。V8エンジンの場合、そのバージョンを取得するには、ターミナルで次のコマンドを入力します。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> process.versions.v8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,15)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};