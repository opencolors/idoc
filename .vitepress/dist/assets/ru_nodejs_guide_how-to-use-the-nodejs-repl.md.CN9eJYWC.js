import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Как использовать REPL Node.js","description":"Узнайте, как использовать REPL Node.js для быстрого тестирования простого кода JavaScript и изучения его функций, включая многострочный режим, специальные переменные и команды точки.","frontmatter":{"title":"Как использовать REPL Node.js","description":"Узнайте, как использовать REPL Node.js для быстрого тестирования простого кода JavaScript и изучения его функций, включая многострочный режим, специальные переменные и команды точки.","head":[["meta",{"name":"og:title","content":"Как использовать REPL Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Узнайте, как использовать REPL Node.js для быстрого тестирования простого кода JavaScript и изучения его функций, включая многострочный режим, специальные переменные и команды точки."}],["meta",{"name":"twitter:title","content":"Как использовать REPL Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Узнайте, как использовать REPL Node.js для быстрого тестирования простого кода JavaScript и изучения его функций, включая многострочный режим, специальные переменные и команды точки."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/guide/how-to-use-the-nodejs-repl"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/guide/how-to-use-the-nodejs-repl"}]]},"headers":[],"relativePath":"ru/nodejs/guide/how-to-use-the-nodejs-repl.md","filePath":"ru/nodejs/guide/how-to-use-the-nodejs-repl.md","lastUpdated":null}`),a={name:`ru/nodejs/guide/how-to-use-the-nodejs-repl.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="как-использовать-repl-в-node-js" tabindex="-1">Как использовать REPL в Node.js <a class="header-anchor" href="#как-использовать-repl-в-node-js" aria-label="Permalink to “Как использовать REPL в Node.js”">​</a></h1><p>Команда <code>node</code> используется для запуска наших Node.js скриптов:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Если мы запустим команду <code>node</code> без скрипта или аргументов, мы запустим REPL сессию:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">ПРИМЕЧАНИЕ</p><p>REPL расшифровывается как Read Evaluate Print Loop (цикл чтения, оценки, печати) и представляет собой среду программирования (в основном консольное окно), которая принимает отдельные выражения в качестве ввода пользователя и возвращает результат обратно в консоль после выполнения. REPL сессия предоставляет удобный способ быстрого тестирования простого JavaScript кода.</p></div><p>Если вы попробуете сейчас в своем терминале, произойдет следующее:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Команда переходит в режим ожидания и ждет, пока мы что-нибудь введем.</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>если вы не знаете, как открыть терминал, поищите в Google &quot;Как открыть терминал на вашей операционной системе&quot;.</p></div><p>REPL ждет, когда мы введем какой-нибудь JavaScript код, если быть точнее.</p><p>Начните с простого и введите:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.log(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Первое значение, <code>test</code>, - это вывод, который мы указали консоли напечатать, затем мы получаем <code>undefined</code>, которое является возвращаемым значением запуска <code>console.log()</code>. Node прочитал эту строку кода, оценил ее, напечатал результат, а затем вернулся к ожиданию новых строк кода. Node будет циклически проходить через эти три шага для каждого фрагмента кода, который мы выполняем в REPL, пока мы не выйдем из сессии. Именно отсюда REPL и получил свое название.</p><p>Node автоматически печатает результат любой строки JavaScript кода без необходимости указывать ему это делать. Например, введите следующую строку и нажмите Enter:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Обратите внимание на разницу в выводах двух вышеприведенных строк. Node REPL напечатал <code>undefined</code> после выполнения <code>console.log()</code>, в то время как, с другой стороны, он просто напечатал результат <code>5== &#39;5&#39;</code>. Вам нужно помнить, что первое - это просто оператор в JavaScript, а второе - выражение.</p><p>В некоторых случаях код, который вы хотите протестировать, может потребовать несколько строк. Например, предположим, вы хотите определить функцию, которая генерирует случайное число, в REPL сессии введите следующую строку и нажмите Enter:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateRandom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Node REPL достаточно умен, чтобы определить, что вы еще не закончили писать свой код, и он перейдет в многострочный режим, чтобы вы могли ввести больше кода. Теперь завершите определение своей функции и нажмите Enter:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateRandom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="специальная-переменная" tabindex="-1">Специальная переменная: <a class="header-anchor" href="#специальная-переменная" aria-label="Permalink to “Специальная переменная:”">​</a></h3><p>Если после какого-либо кода вы введете <code>_</code>, это выведет результат последней операции.</p><h3 id="стрелка-вверх" tabindex="-1">Стрелка вверх: <a class="header-anchor" href="#стрелка-вверх" aria-label="Permalink to “Стрелка вверх:”">​</a></h3><p>Если вы нажмете клавишу со стрелкой вверх, вы получите доступ к истории предыдущих строк кода, выполненных в текущем и даже предыдущих сеансах REPL.</p><h2 id="dot-команды" tabindex="-1">Dot команды <a class="header-anchor" href="#dot-команды" aria-label="Permalink to “Dot команды”">​</a></h2><p>REPL имеет несколько специальных команд, все они начинаются с точки <code>.</code>. Они:</p><ul><li><code>.help</code>: показывает справку по dot командам.</li><li><code>.editor</code>: включает режим редактора, чтобы с легкостью писать многострочный код JavaScript. Как только вы окажетесь в этом режиме, введите <code>ctrl-D</code>, чтобы запустить написанный вами код.</li><li><code>.break</code>: при вводе многострочного выражения ввод команды <code>.break</code> прервет дальнейший ввод. То же самое, что и нажатие <code>ctrl-C</code>.</li><li><code>.clear</code>: сбрасывает контекст REPL в пустой объект и очищает любое многострочное выражение, вводимое в данный момент.</li><li><code>.1oad</code>: загружает файл JavaScript относительно текущего рабочего каталога.</li><li><code>.save</code>: сохраняет все, что вы ввели в сеансе REPL, в файл (укажите имя файла).</li><li><code>.exit</code>: выходит из REPL (то же самое, что и двойное нажатие <code>ctrl-C</code>).</li></ul><p>REPL знает, когда вы набираете многострочное выражение без необходимости вызывать <code>.editor</code>. Например, если вы начнете вводить итерацию следующим образом:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foxEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>и вы нажмете enter, REPL перейдет на новую строку, которая начинается с 3 точек, указывая, что теперь вы можете продолжить работу над этим блоком.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.. console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (num)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">..}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Если вы введете <code>.break</code> в конце строки, многострочный режим остановится и оператор не будет выполнен.</p><h2 id="запуск-repl-из-фаила-javascript" tabindex="-1">Запуск REPL из файла JavaScript <a class="header-anchor" href="#запуск-repl-из-фаила-javascript" aria-label="Permalink to “Запуск REPL из файла JavaScript”">​</a></h2><p>Мы можем импортировать REPL в файл JavaScript, используя <code>repl</code>.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> repl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:repl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Используя переменную <code>repl</code>, мы можем выполнять различные операции. Чтобы запустить командную строку REPL, введите следующую строку:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">repl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Запустите файл в командной строке.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repl.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Вы можете передать строку, которая будет отображаться при запуске REPL. По умолчанию это &#39;&gt;\` (с последующим пробелом), но мы можем определить собственное приглашение.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// приглашение в стиле Unix</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$ &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Вы можете отобразить сообщение при выходе из REPL</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;exit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;выход из repl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Вы можете узнать больше о модуле REPL в <a href="/ru/nodejs/api/repl">документации REPL</a>.</p>`,45)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};