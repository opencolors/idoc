import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js con WebAssembly","description":"WebAssembly es un lenguaje ensamblador de alto rendimiento que se puede compilar desde varios lenguajes, incluyendo C/C++, Rust y AssemblyScript. Node.js proporciona las API necesarias a través del objeto WebAssembly global para comunicarse con WebAssembly.","frontmatter":{"title":"Node.js con WebAssembly","description":"WebAssembly es un lenguaje ensamblador de alto rendimiento que se puede compilar desde varios lenguajes, incluyendo C/C++, Rust y AssemblyScript. Node.js proporciona las API necesarias a través del objeto WebAssembly global para comunicarse con WebAssembly.","head":[["meta",{"name":"og:title","content":"Node.js con WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"WebAssembly es un lenguaje ensamblador de alto rendimiento que se puede compilar desde varios lenguajes, incluyendo C/C++, Rust y AssemblyScript. Node.js proporciona las API necesarias a través del objeto WebAssembly global para comunicarse con WebAssembly."}],["meta",{"name":"twitter:title","content":"Node.js con WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"WebAssembly es un lenguaje ensamblador de alto rendimiento que se puede compilar desde varios lenguajes, incluyendo C/C++, Rust y AssemblyScript. Node.js proporciona las API necesarias a través del objeto WebAssembly global para comunicarse con WebAssembly."}],["link",{"rel":"canonical","href":"https://idoc.dev/es/nodejs/guide/nodejs-with-webassembly"}],["meta",{"property":"og:url","content":"https://idoc.dev/es/nodejs/guide/nodejs-with-webassembly"}]]},"headers":[],"relativePath":"es/nodejs/guide/nodejs-with-webassembly.md","filePath":"es/nodejs/guide/nodejs-with-webassembly.md","lastUpdated":1749464498000}`),a={name:`es/nodejs/guide/nodejs-with-webassembly.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-con-webassembly" tabindex="-1">Node.js con WebAssembly <a class="header-anchor" href="#node-js-con-webassembly" aria-label="Permalink to “Node.js con WebAssembly”">​</a></h1><p><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> es un lenguaje de tipo ensamblador de alto rendimiento que se puede compilar desde varios lenguajes, incluidos C/C++, Rust y AssemblyScript. ¡Actualmente, es compatible con Chrome, Firefox, Safari, Edge y Node.js!</p><p>La especificación de WebAssembly detalla dos formatos de archivo, un formato binario llamado Módulo WebAssembly con una extensión <code>.wasm</code> y la representación de texto correspondiente llamada formato de texto WebAssembly con una extensión <code>.wat</code>.</p><h2 id="conceptos-clave" tabindex="-1">Conceptos clave <a class="header-anchor" href="#conceptos-clave" aria-label="Permalink to “Conceptos clave”">​</a></h2><ul><li>Módulo: un binario WebAssembly compilado, es decir, un archivo <code>.wasm</code>.</li><li>Memoria: un ArrayBuffer redimensionable.</li><li>Tabla: una matriz tipada redimensionable de referencias no almacenadas en la memoria.</li><li>Instancia: una instancia de un módulo con su memoria, tabla y variables.</li></ul><p>Para usar WebAssembly, necesita un archivo binario <code>.wasm</code> y un conjunto de API para comunicarse con WebAssembly. Node.js proporciona las API necesarias a través del objeto global <code>WebAssembly</code>.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebAssembly)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Object [WebAssembly] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  compile: [Function: compile],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  validate: [Function: validate],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  instantiate: [Function: instantiate]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="generando-modulos-webassembly" tabindex="-1">Generando módulos WebAssembly <a class="header-anchor" href="#generando-modulos-webassembly" aria-label="Permalink to “Generando módulos WebAssembly”">​</a></h2><p>Existen varios métodos disponibles para generar archivos binarios WebAssembly, que incluyen:</p><ul><li>Escribir WebAssembly (<code>.wat</code>) a mano y convertirlo a formato binario utilizando herramientas como <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a>.</li><li>Usar <a href="https://github.com/emscripten-core/emscripten" target="_blank" rel="noreferrer">emscripten</a> con una aplicación C/C++</li><li>Usar <a href="https://github.com/rustwasm/wasm-pack" target="_blank" rel="noreferrer">wasm-pack</a> con una aplicación Rust</li><li>Usar <a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noreferrer">AssemblyScript</a> si prefiere una experiencia similar a TypeScript</li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong>Algunas de estas herramientas generan no solo el archivo binario, sino también el código JavaScript &quot;glue&quot; y los archivos HTML correspondientes para ejecutarse en el navegador.</strong></p></div><h2 id="como-usarlo" tabindex="-1">Cómo usarlo <a class="header-anchor" href="#como-usarlo" aria-label="Permalink to “Cómo usarlo”">​</a></h2><p>Una vez que tenga un módulo WebAssembly, puede usar el objeto <code>WebAssembly</code> de Node.js para instanciarlo.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/add.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasmBuffer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wasmModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // La función exportada vive en instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmModule.instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Imprime: 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="interaccion-con-el-so" tabindex="-1">Interacción con el SO <a class="header-anchor" href="#interaccion-con-el-so" aria-label="Permalink to “Interacción con el SO”">​</a></h2><p>Los módulos de WebAssembly no pueden acceder directamente a la funcionalidad del SO por sí mismos. Se puede utilizar una herramienta de terceros, <a href="https://github.com/bytecodealliance/wasmtime" target="_blank" rel="noreferrer">Wasmtime</a>, para acceder a esta funcionalidad. <code>Wasmtime</code> utiliza la API <a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a> para acceder a la funcionalidad del SO.</p><h2 id="recursos" tabindex="-1">Recursos <a class="header-anchor" href="#recursos" aria-label="Permalink to “Recursos”">​</a></h2><ul><li><a href="https://webassembly.org/" target="_blank" rel="noreferrer">Información general sobre WebAssembly</a></li><li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noreferrer">Documentos MDN</a></li><li><a href="https://webassembly.github.io/spec/core/text/index.html" target="_blank" rel="noreferrer">Escribir WebAssembly a mano</a></li></ul>`,18)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};