import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"مقدمة في Node.js","description":"Node.js هو بيئة تشغيل مفتوحة المصدر ومتعددة المنصات بلغة JavaScript تسمح للمطورين بتشغيل JavaScript على جانب الخادم، مما يوفر أداء عالي وقابلية للتوسع.","frontmatter":{"title":"مقدمة في Node.js","description":"Node.js هو بيئة تشغيل مفتوحة المصدر ومتعددة المنصات بلغة JavaScript تسمح للمطورين بتشغيل JavaScript على جانب الخادم، مما يوفر أداء عالي وقابلية للتوسع.","head":[["meta",{"name":"og:title","content":"مقدمة في Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js هو بيئة تشغيل مفتوحة المصدر ومتعددة المنصات بلغة JavaScript تسمح للمطورين بتشغيل JavaScript على جانب الخادم، مما يوفر أداء عالي وقابلية للتوسع."}],["meta",{"name":"twitter:title","content":"مقدمة في Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js هو بيئة تشغيل مفتوحة المصدر ومتعددة المنصات بلغة JavaScript تسمح للمطورين بتشغيل JavaScript على جانب الخادم، مما يوفر أداء عالي وقابلية للتوسع."}],["link",{"rel":"canonical","href":"https://idoc.dev/ar/nodejs/guide/what-is-nodejs"}],["meta",{"property":"og:url","content":"https://idoc.dev/ar/nodejs/guide/what-is-nodejs"}]]},"headers":[],"relativePath":"ar/nodejs/guide/what-is-nodejs.md","filePath":"ar/nodejs/guide/what-is-nodejs.md","lastUpdated":null}`),a={name:`ar/nodejs/guide/what-is-nodejs.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="مقدمة-إلى-node-js" tabindex="-1">مقدمة إلى Node.js <a class="header-anchor" href="#مقدمة-إلى-node-js" aria-label="Permalink to “مقدمة إلى Node.js”">​</a></h1><p>Node.js هي بيئة تشغيل JavaScript مفتوحة المصدر وعبر الأنظمة الأساسية. إنها أداة شائعة لأي نوع من المشاريع تقريبًا!</p><p>يقوم Node.js بتشغيل محرك V8 JavaScript، وهو جوهر Google Chrome، خارج المتصفح. هذا يسمح لـ Node.js بأن يكون عالي الأداء للغاية.</p><p>يعمل تطبيق Node.js في عملية واحدة، دون إنشاء سلسلة محادثات جديدة لكل طلب. يوفر Node.js مجموعة من بدائيات الإدخال/الإخراج غير المتزامنة في مكتبته القياسية التي تمنع كود JavaScript من الحظر وبشكل عام، تتم كتابة المكتبات في Node.js باستخدام نماذج غير حظر، مما يجعل سلوك الحظر هو الاستثناء وليس القاعدة.</p><p>عندما يقوم Node.js بتنفيذ عملية إدخال/إخراج، مثل القراءة من الشبكة أو الوصول إلى قاعدة بيانات أو نظام الملفات، بدلاً من حظر سلسلة المحادثات وإضاعة دورات وحدة المعالجة المركزية في الانتظار، سيستأنف Node.js العمليات عند عودة الاستجابة.</p><p>هذا يسمح لـ Node.js بالتعامل مع آلاف الاتصالات المتزامنة بخادم واحد دون إدخال عبء إدارة تزامن سلسلة المحادثات، والذي قد يكون مصدرًا مهمًا للأخطاء.</p><p>يتمتع Node.js بميزة فريدة لأن ملايين مطوري الواجهة الأمامية الذين يكتبون JavaScript للمتصفح قادرون الآن على كتابة كود جانب الخادم بالإضافة إلى كود جانب العميل دون الحاجة إلى تعلم لغة مختلفة تمامًا.</p><p>في Node.js، يمكن استخدام معايير ECMAScript الجديدة دون مشاكل، حيث لا يتعين عليك انتظار قيام جميع المستخدمين بتحديث متصفحاتهم - أنت المسؤول عن تحديد إصدار ECMAScript المراد استخدامه عن طريق تغيير إصدار Node.js، ويمكنك أيضًا تمكين ميزات تجريبية محددة عن طريق تشغيل Node.js باستخدام علامات.</p><h2 id="مثال-على-تطبيق-node-js" tabindex="-1">مثال على تطبيق Node.js <a class="header-anchor" href="#مثال-على-تطبيق-node-js" aria-label="Permalink to “مثال على تطبيق Node.js”">​</a></h2><p>المثال الأكثر شيوعًا لبرنامج Hello World لـ Node.js هو خادم الويب:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createServer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hostname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;127.0.0.1&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port, hostname, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Server running at http://\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hostname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>لتشغيل هذه المقتطفة، احفظها كملف <code>server.js</code> وقم بتشغيل <code>node server.js</code> في جهازك الطرفي. إذا كنت تستخدم إصدار mjs من الكود، فيجب عليك حفظه كملف <code>server.mjs</code> وتشغيل <code>node server.mjs</code> في جهازك الطرفي.</p><p>يتضمن هذا الكود أولاً <a href="/ar/nodejs/api/http">وحدة http</a> الخاصة بـ Node.js.</p><p>يحتوي Node.js على <a href="/ar/nodejs/api/synopsis">مكتبة قياسية</a> رائعة، بما في ذلك دعم من الدرجة الأولى للشبكات.</p><p>تقوم الطريقة <code>createServer()</code> الخاصة بـ <code>http</code> بإنشاء خادم HTTP جديد وإعادته.</p><p>تم تعيين الخادم للاستماع على المنفذ واسم المضيف المحددين. عندما يكون الخادم جاهزًا، يتم استدعاء وظيفة رد الاتصال، وفي هذه الحالة تخبرنا أن الخادم قيد التشغيل.</p><p>عند استلام طلب جديد، يتم استدعاء <a href="/ar/nodejs/api/http">حدث الطلب</a>، وتوفير كائنين: طلب (كائن <code>http.IncomingMessage</code>) واستجابة (كائن <code>http.ServerResponse</code>).</p><p>هذان الكائنان ضروريان للتعامل مع استدعاء HTTP.</p><p>يوفر الأول تفاصيل الطلب. في هذا المثال البسيط، لا يتم استخدام هذا، ولكن يمكنك الوصول إلى رؤوس الطلب وبيانات الطلب.</p><p>يستخدم الثاني لإرجاع البيانات إلى المتصل.</p><p>في هذه الحالة مع:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>نقوم بتعيين خاصية statusCode على 200 للإشارة إلى استجابة ناجحة.</p><p>نقوم بتعيين رأس Content-Type:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ونغلق الاستجابة، مع إضافة المحتوى كوسيطة إلى <code>end()</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>سيؤدي ذلك إلى إرسال الاستجابة إلى العميل.</p>`,28)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};