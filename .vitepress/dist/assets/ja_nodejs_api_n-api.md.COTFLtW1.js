import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js N-API ドキュメント","description":"N-API（Node.js API）は、ネイティブアドオンに対して安定した一貫したインターフェースを提供し、開発者が異なるNode.jsバージョン間で互換性のあるモジュールを作成できるようにします。","frontmatter":{"title":"Node.js N-API ドキュメント","description":"N-API（Node.js API）は、ネイティブアドオンに対して安定した一貫したインターフェースを提供し、開発者が異なるNode.jsバージョン間で互換性のあるモジュールを作成できるようにします。","head":[["meta",{"name":"og:title","content":"Node.js N-API ドキュメント | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"N-API（Node.js API）は、ネイティブアドオンに対して安定した一貫したインターフェースを提供し、開発者が異なるNode.jsバージョン間で互換性のあるモジュールを作成できるようにします。"}],["meta",{"name":"twitter:title","content":"Node.js N-API ドキュメント | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"N-API（Node.js API）は、ネイティブアドオンに対して安定した一貫したインターフェースを提供し、開発者が異なるNode.jsバージョン間で互換性のあるモジュールを作成できるようにします。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/n-api"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/n-api"}]]},"headers":[],"relativePath":"ja/nodejs/api/n-api.md","filePath":"ja/nodejs/api/n-api.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/api/n-api.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-api" tabindex="-1">Node-API <a class="header-anchor" href="#node-api" aria-label="Permalink to “Node-API”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 2</a> - 安定版</p></div><p>Node-API（旧称 N-API）は、ネイティブアドオンを構築するための API です。これは、基盤となる JavaScript ランタイム（例えば、V8）から独立しており、Node.js 自体の一部としてメンテナンスされています。この API は、Node.js のバージョン間で Application Binary Interface（ABI）の安定性が保たれます。これは、アドオンを基盤となる JavaScript エンジンの変更から隔離し、あるメジャーバージョン用にコンパイルされたモジュールを、再コンパイルせずに後のメジャーバージョンの Node.js で実行できるようにすることを目的としています。<a href="https://nodejs.org/en/docs/guides/abi-stability/" target="_blank" rel="noreferrer">ABI 安定性</a>ガイドでは、より詳細な説明を提供しています。</p><p>アドオンは、<a href="/ja/nodejs/api/addons">C++ アドオン</a>というタイトルのセクションで概説されているのと同じアプローチ/ツールで構築/パッケージ化されます。唯一の違いは、ネイティブコードで使用される API のセットです。V8 または <a href="https://github.com/nodejs/nan" target="_blank" rel="noreferrer">Native Abstractions for Node.js</a> API を使用する代わりに、Node-API で利用可能な関数が使用されます。</p><p>Node-API によって公開される API は、通常、JavaScript 値の作成と操作に使用されます。概念と操作は、一般的に ECMA-262 言語仕様で指定されているアイデアに対応しています。API には、次のプロパティがあります。</p><ul><li>すべての Node-API 呼び出しは、<code>napi_status</code> 型のステータスコードを返します。このステータスは、API 呼び出しが成功したか失敗したかを示します。</li><li>API の戻り値は、出力パラメータを介して渡されます。</li><li>すべての JavaScript 値は、<code>napi_value</code> という名前の不透明な型の背後に抽象化されています。</li><li>エラーのステータスコードの場合、<code>napi_get_last_error_info</code> を使用して追加の情報を取得できます。詳細については、エラー処理セクション <a href="/ja/nodejs/api/n-api#error-handling">エラー処理</a> を参照してください。</li></ul><p>Node-API は、Node.js のバージョンや異なるコンパイラレベル間で ABI の安定性を保証する C API です。C++ API は、より使いやすくなります。C++ の使用をサポートするために、プロジェクトは <a href="https://github.com/nodejs/node-addon-api" target="_blank" rel="noreferrer"><code>node-addon-api</code></a> と呼ばれる C++ ラッパーモジュールを維持しています。このラッパーは、インライン化可能な C++ API を提供します。<code>node-addon-api</code> で構築されたバイナリは、Node.js によってエクスポートされる Node-API C ベースの関数のシンボルに依存します。<code>node-addon-api</code> は、Node-API を呼び出すコードを記述するためのより効率的な方法です。たとえば、次の <code>node-addon-api</code> コードを見てください。最初のセクションは <code>node-addon-api</code> コードを示し、2 番目のセクションはアドオンで実際に使用されるものを示しています。</p><div class="language-C++ line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-C++ line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status status;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value object, string;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">object);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  napi_throw_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_string_utf8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, NAPI_AUTO_LENGTH, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  napi_throw_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_set_named_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, object, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, string);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  napi_throw_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>最終的な結果として、アドオンはエクスポートされた C API のみを使用します。その結果、C API によって提供される ABI の安定性の恩恵を受けることができます。</p><p>C API の代わりに <code>node-addon-api</code> を使用する場合は、まず <code>node-addon-api</code> の API <a href="https://github.com/nodejs/node-addon-api#api-documentation" target="_blank" rel="noreferrer">ドキュメント</a> から始めてください。</p><p><a href="https://nodejs.github.io/node-addon-examples/" target="_blank" rel="noreferrer">Node-API リソース</a>は、Node-API と <code>node-addon-api</code> を使い始めたばかりの開発者にとって、優れたオリエンテーションとヒントを提供します。追加のメディアリソースは、<a href="https://github.com/nodejs/abi-stable-node/blob/HEAD/node-api-media.md" target="_blank" rel="noreferrer">Node-API メディア</a>ページにあります。</p><h2 id="implications-of-abi-stability" tabindex="-1">ABI の安定性の意味合い <a class="header-anchor" href="#implications-of-abi-stability" aria-label="Permalink to “ABI の安定性の意味合い”">​</a></h2><p>Node-API は ABI の安定性を保証しますが、Node.js の他の部分は保証していません。また、アドオンから使用される外部ライブラリも保証していない可能性があります。特に、以下の API は、メジャーバージョン間の ABI の安定性を保証していません。</p><ul><li>Node.js の C++ API (経由で利用可能)</li><li>libuv API (Node.js にも含まれており、経由で利用可能)</li><li>V8 API (経由で利用可能)</li></ul><p>したがって、アドオンが Node.js のメジャーバージョン間で ABI 互換性を維持するためには、以下の使用に制限して、Node-API のみを使用する必要があります。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;node_api.h&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>また、使用するすべての外部ライブラリについて、その外部ライブラリが Node-API と同様の ABI 安定性を保証していることを確認する必要があります。</p><h2 id="building" tabindex="-1">ビルド <a class="header-anchor" href="#building" aria-label="Permalink to “ビルド”">​</a></h2><p>JavaScript で記述されたモジュールとは異なり、Node-API を使用した Node.js ネイティブアドオンの開発とデプロイには、追加のツールセットが必要です。Node.js 向けの開発に必要な基本ツールに加えて、ネイティブアドオン開発者は C および C++ コードをバイナリにコンパイルできるツールチェーンが必要です。さらに、ネイティブアドオンのデプロイ方法によっては、ネイティブアドオンの <em>ユーザー</em> も C/C++ ツールチェーンをインストールする必要があります。</p><p>Linux 開発者にとって、必要な C/C++ ツールチェーンパッケージはすぐに入手できます。<a href="https://gcc.gnu.org/" target="_blank" rel="noreferrer">GCC</a> は、Node.js コミュニティでさまざまなプラットフォームでビルドおよびテストするために広く使用されています。多くの開発者にとって、<a href="https://llvm.org/" target="_blank" rel="noreferrer">LLVM</a> コンパイラインフラストラクチャも良い選択肢です。</p><p>Mac 開発者にとって、<a href="https://developer.apple.com/xcode/" target="_blank" rel="noreferrer">Xcode</a> は必要なすべてのコンパイラツールを提供します。ただし、Xcode IDE 全体をインストールする必要はありません。次のコマンドは、必要なツールチェーンをインストールします。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xcode-select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Windows 開発者にとって、<a href="https://visualstudio.microsoft.com/" target="_blank" rel="noreferrer">Visual Studio</a> は必要なすべてのコンパイラツールを提供します。ただし、Visual Studio IDE 全体をインストールする必要はありません。次のコマンドは、必要なツールチェーンをインストールします。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> windows-build-tools</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以下のセクションでは、Node.js ネイティブアドオンの開発およびデプロイに利用できる追加のツールについて説明します。</p><h3 id="build-tools" tabindex="-1">ビルドツール <a class="header-anchor" href="#build-tools" aria-label="Permalink to “ビルドツール”">​</a></h3><p>ここにリストされているツールは、ネイティブアドオンの <em>ユーザー</em> がネイティブアドオンを正常にインストールするために、C/C++ツールチェーンをインストールしている必要があることを前提としています。</p><h4 id="node-gyp" tabindex="-1">node-gyp <a class="header-anchor" href="#node-gyp" aria-label="Permalink to “node-gyp”">​</a></h4><p><a href="https://github.com/nodejs/node-gyp" target="_blank" rel="noreferrer">node-gyp</a> は、Google の <a href="https://gyp.gsrc.io/" target="_blank" rel="noreferrer">GYP</a> ツールの <a href="https://github.com/nodejs/gyp-next" target="_blank" rel="noreferrer">gyp-next</a> フォークに基づくビルドシステムであり、npm に同梱されています。GYP、ひいては node-gyp は、Python がインストールされている必要があります。</p><p>歴史的に、node-gyp はネイティブアドオンを構築するためのツールとして選ばれてきました。広く採用され、ドキュメントも充実しています。しかし、一部の開発者は node-gyp の制限に遭遇しています。</p><h4 id="cmakejs" tabindex="-1">CMake.js <a class="header-anchor" href="#cmakejs" aria-label="Permalink to “CMake.js”">​</a></h4><p><a href="https://github.com/cmake-js/cmake-js" target="_blank" rel="noreferrer">CMake.js</a> は、<a href="https://cmake.org/" target="_blank" rel="noreferrer">CMake</a> に基づく代替ビルドシステムです。</p><p>CMake.js は、すでに CMake を使用しているプロジェクトや、node-gyp の制限に影響を受けている開発者にとって良い選択肢です。<a href="https://github.com/nodejs/node-addon-examples/tree/main/src/8-tooling/build_with_cmake" target="_blank" rel="noreferrer"><code>build_with_cmake</code></a> は、CMake ベースのネイティブアドオンプロジェクトの例です。</p><h3 id="uploading-precompiled-binaries" tabindex="-1">プリコンパイル済みバイナリのアップロード <a class="header-anchor" href="#uploading-precompiled-binaries" aria-label="Permalink to “プリコンパイル済みバイナリのアップロード”">​</a></h3><p>ここにリストされている3つのツールを使用すると、ネイティブアドオンの開発者とメンテナーは、バイナリを作成して、パブリックまたはプライベートサーバーにアップロードできます。これらのツールは通常、<a href="https://travis-ci.org/" target="_blank" rel="noreferrer">Travis CI</a> や <a href="https://www.appveyor.com/" target="_blank" rel="noreferrer">AppVeyor</a> などの CI/CD ビルドシステムと統合して、さまざまなプラットフォームおよびアーキテクチャ用のバイナリを構築およびアップロードします。これらのバイナリは、C/C++ツールチェーンをインストールする必要のないユーザーがダウンロードできます。</p><h4 id="node-pre-gyp" tabindex="-1">node-pre-gyp <a class="header-anchor" href="#node-pre-gyp" aria-label="Permalink to “node-pre-gyp”">​</a></h4><p><a href="https://github.com/mapbox/node-pre-gyp" target="_blank" rel="noreferrer">node-pre-gyp</a> は、開発者が選択したサーバーにバイナリをアップロードする機能を追加する node-gyp に基づくツールです。node-pre-gyp は、Amazon S3 へのバイナリのアップロードを特に強力にサポートしています。</p><h4 id="prebuild" tabindex="-1">prebuild <a class="header-anchor" href="#prebuild" aria-label="Permalink to “prebuild”">​</a></h4><p><a href="https://github.com/prebuild/prebuild" target="_blank" rel="noreferrer">prebuild</a> は、node-gyp または CMake.js を使用したビルドをサポートするツールです。さまざまなサーバーをサポートする node-pre-gyp とは異なり、prebuild はバイナリを <a href="https://help.github.com/en/github/administering-a-repository/about-releases" target="_blank" rel="noreferrer">GitHub releases</a> にのみアップロードします。prebuild は、CMake.js を使用する GitHub プロジェクトに適しています。</p><h4 id="prebuildify" tabindex="-1">prebuildify <a class="header-anchor" href="#prebuildify" aria-label="Permalink to “prebuildify”">​</a></h4><p><a href="https://github.com/prebuild/prebuildify" target="_blank" rel="noreferrer">prebuildify</a> は node-gyp をベースにしたツールです。prebuildify の利点は、ビルドされたバイナリが npm にアップロードされる際にネイティブアドオンにバンドルされることです。バイナリは npm からダウンロードされ、ネイティブアドオンがインストールされるとモジュールユーザーがすぐに利用できます。</p><h2 id="usage" tabindex="-1">使用法 <a class="header-anchor" href="#usage" aria-label="Permalink to “使用法”">​</a></h2><p>Node-API 関数を使用するには、Node 開発ツリーの src ディレクトリにある <a href="https://github.com/nodejs/node/blob/HEAD/src/node_api.h" target="_blank" rel="noreferrer"><code>node_api.h</code></a> ファイルを含めます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;node_api.h&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>これにより、Node.js の特定リリースに対するデフォルトの <code>NAPI_VERSION</code> が有効になります。Node-API の特定のバージョンとの互換性を確保するために、ヘッダーを含める際にバージョンを明示的に指定できます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NAPI_VERSION</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;node_api.h&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>これにより、Node-API サーフェスは、指定された（およびそれ以前の）バージョンで利用可能だった機能のみに制限されます。</p><p>Node-API サーフェスの一部は実験的であり、明示的なオプトインが必要です。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NAPI_EXPERIMENTAL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;node_api.h&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>この場合、実験的な API を含む API サーフェス全体がモジュールコードで利用可能になります。</p><p>場合によっては、すでにリリースされて安定している API に影響を与える実験的な機能が導入されることがあります。これらの機能は、オプトアウトによって無効にできます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NAPI_EXPERIMENTAL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NODE_API_EXPERIMENTAL_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FEATURE_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_OPT_OUT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;node_api.h&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>ここで、<code>\\&lt;FEATURE_NAME\\&gt;</code> は、実験的および安定した API の両方に影響を与える実験的な機能の名前です。</p><h2 id="node-api-version-matrix" tabindex="-1">Node-API バージョンマトリックス <a class="header-anchor" href="#node-api-version-matrix" aria-label="Permalink to “Node-API バージョンマトリックス”">​</a></h2><p>バージョン 9 までは、Node-API バージョンは追加的であり、Node.js とは独立してバージョン管理されていました。これは、すべてのバージョンが前のバージョンの拡張であり、前のバージョンからのすべての API に追加が加えられていることを意味します。各 Node.js バージョンは、単一の Node-API バージョンのみをサポートしていました。たとえば、v18.15.0 は Node-API バージョン 8 のみをサポートしています。ABI の安定性は、8 が以前のすべてのバージョンの厳密なスーパーセットであるため達成されました。</p><p>バージョン 9 以降、Node-API バージョンは引き続き独立してバージョン管理されますが、Node-API バージョン 9 で実行されるアドオンは、Node-API バージョン 10 で実行するためにコードの更新が必要になる場合があります。ただし、ABI の安定性は維持されます。なぜなら、Node-API バージョン 8 より高いバージョンをサポートする Node.js バージョンは、8 からサポートする最高バージョンまでのすべてのバージョンをサポートし、アドオンがより高い Node-API バージョンをオプトインしない限り、バージョン 8 API をデフォルトで提供するためです。このアプローチは、ABI の安定性を維持しながら、既存の Node-API 関数をより適切に最適化する柔軟性を提供します。既存のアドオンは、以前のバージョンの Node-API を使用して再コンパイルせずに実行を継続できます。アドオンが新しい Node-API バージョンの機能を必要とする場合は、既存のコードの変更と再コンパイルが必要になります。</p><p>Node.js のバージョンで Node-API バージョン 9 以降をサポートする場合、<code>NAPI_VERSION=X</code> を定義し、既存のアドオン初期化マクロを使用すると、実行時にアドオンで使用される要求された Node-API バージョンがアドオンに組み込まれます。<code>NAPI_VERSION</code> が設定されていない場合は、デフォルトで 8 になります。</p><p>この表は、古いストリームでは最新ではない可能性があります。最新の情報は、次の API ドキュメントにあります。<a href="/ja/nodejs/api/n-api#node-api-version-matrix">Node-API バージョンマトリックス</a></p><table tabindex="0"><thead><tr><th>Node-API バージョン</th><th>サポート対象</th></tr></thead><tbody><tr><td>9</td><td>v18.17.0 以降、20.3.0 以降、21.0.0 以降のすべてのバージョン</td></tr><tr><td>8</td><td>v12.22.0 以降、v14.17.0 以降、v15.12.0 以降、16.0.0 以降のすべてのバージョン</td></tr><tr><td>7</td><td>v10.23.0 以降、v12.19.0 以降、v14.12.0 以降、15.0.0 以降のすべてのバージョン</td></tr><tr><td>6</td><td>v10.20.0 以降、v12.17.0 以降、14.0.0 以降のすべてのバージョン</td></tr><tr><td>5</td><td>v10.17.0 以降、v12.11.0 以降、13.0.0 以降のすべてのバージョン</td></tr><tr><td>4</td><td>v10.16.0 以降、v11.8.0 以降、12.0.0 以降のすべてのバージョン</td></tr><tr><td>3</td><td>v6.14.2*、8.11.2 以降、v9.11.0 以降*、10.0.0 以降のすべてのバージョン</td></tr><tr><td>2</td><td>v8.10.0 以降*、v9.3.0 以降*、10.0.0 以降のすべてのバージョン</td></tr><tr><td>1</td><td>v8.6.0 以降**、v9.0.0 以降*、10.0.0 以降のすべてのバージョン</td></tr></tbody></table><ul><li>Node-API は実験的でした。</li></ul><p>** Node.js 8.0.0 には、Node-API が実験的に含まれていました。Node-API バージョン 1 としてリリースされましたが、Node.js 8.6.0 まで進化し続けました。API は Node.js 8.6.0 より前のバージョンでは異なります。Node-API バージョン 3 以降をお勧めします。</p><p>Node-API 用に文書化された各 API には、<code>added in:</code> という名前のヘッダーがあり、安定している API には、追加のヘッダー <code>Node-API version:</code> があります。API は、<code>Node-API version:</code> に示されている Node-API バージョン以上をサポートする Node.js バージョンを使用している場合に直接使用できます。<code>Node-API version:</code> がリストされていない場合、または <code>Node-API version:</code> がリストされていない Node.js バージョンを使用している場合、API は <code>#define NAPI_EXPERIMENTAL</code> が <code>node_api.h</code> または <code>js_native_api.h</code> のインクルードより前にある場合にのみ使用できます。API が <code>added in:</code> に示されているものより後の Node.js のバージョンで使用できないように見える場合、これはおそらく見かけ上の不在の理由です。</p><p>ネイティブコードから ECMAScript 機能にアクセスすることに厳密に関連付けられている Node-API は、<code>js_native_api.h</code> および <code>js_native_api_types.h</code> で個別に見つけることができます。これらのヘッダーで定義されている API は、<code>node_api.h</code> および <code>node_api_types.h</code> に含まれています。ヘッダーは、Node.js 以外の Node-API の実装を許可するために、このように構成されています。これらの実装では、Node.js 固有の API は適用できない場合があります。</p><p>アドオンの Node.js 固有の部分は、JavaScript 環境に実際の機能を公開するコードから分離できるため、後者は Node-API の複数の実装で使用できます。以下の例では、<code>addon.c</code> および <code>addon.h</code> は <code>js_native_api.h</code> のみを参照しています。これにより、<code>addon.c</code> を再利用して、Node.js 実装の Node-API または Node.js 以外の Node-API の任意の実装に対してコンパイルできます。</p><p><code>addon_node.c</code> は、アドオンの Node.js 固有のエントリポイントを含む別のファイルであり、アドオンが Node.js 環境にロードされるときに <code>addon.c</code> を呼び出してアドオンをインスタンス化します。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// addon.h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifndef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _ADDON_H_</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _ADDON_H_</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;js_native_api.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create_addon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // _ADDON_H_</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// addon.c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;addon.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NODE_API_CALL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                                  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {                                                            </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    napi_status status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (call);                                  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) {                                      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_extended_error_info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      napi_get_last_error_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((env), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">error_info);               </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err_message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error_info-&gt;error_message;        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is_pending;                                            </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      napi_is_exception_pending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((env), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">is_pending);              </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* If an exception is already pending, don&#39;t rethrow it */</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">is_pending) {                                          </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err_message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)               </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;empty error message&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                               \\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err_message;                                        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        napi_throw_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((env), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message);                   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }                                                           </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;                                                </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }                                                             </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DoSomethingUseful</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_callback_info </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Do something useful.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create_addon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_value result;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  NODE_API_CALL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_value exported_function;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  NODE_API_CALL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                          &quot;doSomethingUseful&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                          NAPI_AUTO_LENGTH,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                          DoSomethingUseful,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                          NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                          &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exported_function));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  NODE_API_CALL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_set_named_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                             result,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                             &quot;doSomethingUseful&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                             exported_function));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// addon_node.c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;node_api.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;addon.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NAPI_MODULE_INIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* napi_env env, napi_value exports */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // This function body is expected to return a \`napi_value\`.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // The variables \`napi_env env\` and \`napi_value exports\` may be used within</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // the body, as they are provided by the definition of \`NAPI_MODULE_INIT()\`.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create_addon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="environment-life-cycle-apis" tabindex="-1">環境ライフサイクル API <a class="header-anchor" href="#environment-life-cycle-apis" aria-label="Permalink to “環境ライフサイクル API”">​</a></h2><p><a href="https://tc39.github.io/ecma262/" target="_blank" rel="noreferrer">ECMAScript 言語仕様</a> の <a href="https://tc39.ecma262/#sec-agents" target="_blank" rel="noreferrer">セクション 8.7</a> では、JavaScript コードが実行される自己完結型環境として「エージェント」の概念が定義されています。複数のそのようなエージェントは、プロセスによって同時または順番に開始および終了される場合があります。</p><p>Node.js 環境は ECMAScript エージェントに対応します。メインプロセスでは、環境は起動時に作成され、追加の環境は <a href="https://nodejs.org/api/worker_threads" target="_blank" rel="noreferrer">ワーカー スレッド</a> として機能するように個別のスレッドで作成できます。Node.js が別のアプリケーションに埋め込まれている場合、アプリケーションのメインスレッドもアプリケーションプロセスのライフサイクル中に Node.js 環境を複数回構築および破棄する場合があります。アプリケーションによって作成された各 Node.js 環境は、そのライフサイクル中にワーカー スレッドとして追加の環境を作成および破棄する場合があります。</p><p>ネイティブアドオンの観点からすると、これは、それが提供するバインディングが複数のコンテキストから複数回呼び出され、複数のスレッドから同時に呼び出される可能性があることを意味します。</p><p>ネイティブアドオンは、アドオンの各インスタンスに固有になるように、Node.js 環境のライフサイクル中に使用するグローバル状態を割り当てる必要がある場合があります。</p><p>この目的のために、Node-API は、そのライフサイクルが Node.js 環境のライフサイクルに結び付けられるように、データを関連付ける方法を提供します。</p><h3 id="napi_set_instance_data" tabindex="-1"><code>napi_set_instance_data</code> <a class="header-anchor" href="#napi_set_instance_data" aria-label="Permalink to “napi_set_instance_data”">​</a></h3><p><strong>追加: v12.8.0, v10.20.0</strong></p><p><strong>N-API バージョン: 6</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_set_instance_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                   void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_finalize </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">finalize_cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                   void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> finalize_hint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API 呼び出しが呼び出される環境。</li><li><code>[in] data</code>: このインスタンスのバインディングで使用できるようにするデータ項目。</li><li><code>[in] finalize_cb</code>: 環境が破棄されるときに呼び出す関数。 関数は <code>data</code> を受け取るので、それを解放する可能性があります。 <a href="/ja/nodejs/api/n-api#napi-finalize"><code>napi_finalize</code></a> に詳細が記載されています。</li><li><code>[in] finalize_hint</code>: コレクション中にファイナライズコールバックに渡すオプションのヒント。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この API は <code>data</code> を現在実行中の Node.js 環境に関連付けます。 <code>data</code> は後で <code>napi_get_instance_data()</code> を使用して取得できます。 現在実行中の Node.js 環境に関連付けられ、以前の <code>napi_set_instance_data()</code> の呼び出しによって設定された既存のデータはすべて上書きされます。 以前の呼び出しで <code>finalize_cb</code> が提供された場合、それは呼び出されません。</p><h3 id="napi_get_instance_data" tabindex="-1"><code>napi_get_instance_data</code> <a class="header-anchor" href="#napi_get_instance_data" aria-label="Permalink to “napi_get_instance_data”">​</a></h3><p><strong>追加:</strong> v12.8.0, v10.20.0**</p><p><strong>N-API バージョン: 6</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_instance_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                   void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: Node-API 呼び出しが実行される環境。</li><li><code>[out] data</code>: 以前に <code>napi_set_instance_data()</code> の呼び出しによって現在実行中の Node.js 環境に関連付けられたデータ項目。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この API は、以前に <code>napi_set_instance_data()</code> を介して現在実行中の Node.js 環境に関連付けられたデータを取得します。 データが設定されていない場合、呼び出しは成功し、<code>data</code> は <code>NULL</code> に設定されます。</p><h2 id="basic-node-api-data-types" tabindex="-1">基本的な Node-API データ型 <a class="header-anchor" href="#basic-node-api-data-types" aria-label="Permalink to “基本的な Node-API データ型”">​</a></h2><p>Node-API は、次の基本的なデータ型を抽象化として公開し、さまざまな API で使用されます。 これらの API は、不透明なものとして扱い、他の Node-API 呼び出しでのみイントロスペクトする必要があります。</p><h3 id="napi_status" tabindex="-1"><code>napi_status</code> <a class="header-anchor" href="#napi_status" aria-label="Permalink to “napi_status”">​</a></h3><p><strong>追加:</strong> v8.0.0**</p><p><strong>N-API バージョン: 1</strong></p><p>Node-API 呼び出しの成功または失敗を示す整数ステータスコード。 現在、次のステータスコードがサポートされています。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_ok,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_invalid_arg,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_object_expected,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_string_expected,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_name_expected,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_function_expected,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_number_expected,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_boolean_expected,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_array_expected,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_generic_failure,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_pending_exception,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_cancelled,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_escape_called_twice,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_handle_scope_mismatch,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_callback_scope_mismatch,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_queue_full,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_closing,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_bigint_expected,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_date_expected,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_arraybuffer_expected,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_detachable_arraybuffer_expected,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_would_deadlock,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 未使用 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_no_external_buffers_allowed,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_cannot_run_js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_status;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>API が失敗したステータスを返したときに追加情報が必要な場合は、<code>napi_get_last_error_info</code> を呼び出すことで取得できます。</p><h3 id="napi_extended_error_info" tabindex="-1"><code>napi_extended_error_info</code> <a class="header-anchor" href="#napi_extended_error_info" aria-label="Permalink to “napi_extended_error_info”">​</a></h3><p><strong>追加:</strong> v8.0.0**</p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error_message;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> engine_reserved;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> engine_error_code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_status error_code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_extended_error_info;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>error_message</code>: VM に依存しないエラーの説明を含む UTF8 エンコードされた文字列。</li><li><code>engine_reserved</code>: VM 固有のエラー詳細のために予約されています。 これは現在、どの VM にも実装されていません。</li><li><code>engine_error_code</code>: VM 固有のエラーコード。 これは現在、どの VM にも実装されていません。</li><li><code>error_code</code>: 最後のエラーで発生した Node-API ステータスコード。</li></ul><p>詳細については、<a href="/ja/nodejs/api/n-api#error-handling">エラー処理</a> セクションを参照してください。</p><h3 id="napi_env" tabindex="-1"><code>napi_env</code> <a class="header-anchor" href="#napi_env" aria-label="Permalink to “napi_env”">​</a></h3><p><code>napi_env</code>は、基盤となるNode-API実装がVM固有の状態を永続化するために使用できるコンテキストを表すために使用されます。この構造体は、ネイティブ関数が呼び出されるときにネイティブ関数に渡され、Node-API呼び出しを行う際には返される必要があります。具体的には、最初のネイティブ関数が呼び出されたときに渡されたものと同じ<code>napi_env</code>を、後続のネストされたNode-API呼び出しに渡す必要があります。一般的な再利用を目的として<code>napi_env</code>をキャッシュしたり、異なる<a href="/ja/nodejs/api/worker_threads#class-worker"><code>Worker</code></a>スレッドで実行されている同じアドオンのインスタンス間で<code>napi_env</code>を渡したりすることは許可されていません。ネイティブアドオンのインスタンスがアンロードされると、<code>napi_env</code>は無効になります。このイベントの通知は、<a href="/ja/nodejs/api/n-api#napi-add-env-cleanup-hook"><code>napi_add_env_cleanup_hook</code></a>および<a href="/ja/nodejs/api/n-api#napi-set-instance-data"><code>napi_set_instance_data</code></a>に渡されるコールバックを通じて配信されます。</p><h3 id="node_api_basic_env" tabindex="-1"><code>node_api_basic_env</code> <a class="header-anchor" href="#node_api_basic_env" aria-label="Permalink to “node_api_basic_env”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 実験的</p></div><p><code>napi_env</code>のこのバリアントは、同期ファイナライザー（<a href="/ja/nodejs/api/n-api#node-api-basic-finalize"><code>node_api_basic_finalize</code></a>）に渡されます。<code>node_api_basic_env</code>型のパラメーターを最初の引数として受け入れるNode-APIのサブセットがあります。これらのAPIは、JavaScriptエンジンの状態にアクセスしないため、同期ファイナライザーから安全に呼び出すことができます。<code>napi_env</code>型のパラメーターをこれらのAPIに渡すことは許可されていますが、JavaScriptエンジンの状態にアクセスするAPIに<code>node_api_basic_env</code>型のパラメーターを渡すことは許可されていません。キャストなしでこれを行おうとすると、アドオンがコンパイル時に警告やエラーを発するようにフラグが設定されている場合、コンパイラの警告またはエラーが発生します。そのようなAPIを同期ファイナライザーから呼び出すと、最終的にアプリケーションが終了します。</p><h3 id="napi_value" tabindex="-1"><code>napi_value</code> <a class="header-anchor" href="#napi_value" aria-label="Permalink to “napi_value”">​</a></h3><p>これは、JavaScript値を表すために使用される不透明なポインタです。</p><h3 id="napi_threadsafe_function" tabindex="-1"><code>napi_threadsafe_function</code> <a class="header-anchor" href="#napi_threadsafe_function" aria-label="Permalink to “napi_threadsafe_function”">​</a></h3><p><strong>Added in: v10.6.0</strong></p><p><strong>N-API version: 4</strong></p><p>これは不透明なポインターであり、<code>napi_call_threadsafe_function()</code> を介して複数のスレッドから非同期的に呼び出すことができる JavaScript 関数を表します。</p><h3 id="napi_threadsafe_function_release_mode" tabindex="-1"><code>napi_threadsafe_function_release_mode</code> <a class="header-anchor" href="#napi_threadsafe_function_release_mode" aria-label="Permalink to “napi_threadsafe_function_release_mode”">​</a></h3><p><strong>Added in: v10.6.0</strong></p><p><strong>N-API version: 4</strong></p><p>スレッドセーフ関数をすぐに閉じるか (<code>napi_tsfn_abort</code>)、単に解放する (<code>napi_tsfn_release</code>) かを示すために、<code>napi_release_threadsafe_function()</code> に与えられる値。解放された場合、<code>napi_acquire_threadsafe_function()</code> と <code>napi_call_threadsafe_function()</code> を介して後で使用できます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_tsfn_release,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_tsfn_abort</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_threadsafe_function_release_mode;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="napi_threadsafe_function_call_mode" tabindex="-1"><code>napi_threadsafe_function_call_mode</code> <a class="header-anchor" href="#napi_threadsafe_function_call_mode" aria-label="Permalink to “napi_threadsafe_function_call_mode”">​</a></h3><p><strong>Added in: v10.6.0</strong></p><p><strong>N-API version: 4</strong></p><p>スレッドセーフ関数に関連付けられたキューがいっぱいになったときに、呼び出しをブロックするかどうかを示すために、<code>napi_call_threadsafe_function()</code> に与えられる値。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_tsfn_nonblocking,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_tsfn_blocking</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_threadsafe_function_call_mode;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="node-api-memory-management-types" tabindex="-1">Node-API メモリ管理型 <a class="header-anchor" href="#node-api-memory-management-types" aria-label="Permalink to “Node-API メモリ管理型”">​</a></h3><h4 id="napi_handle_scope" tabindex="-1"><code>napi_handle_scope</code> <a class="header-anchor" href="#napi_handle_scope" aria-label="Permalink to “napi_handle_scope”">​</a></h4><p>これは、特定のスコープ内で作成されたオブジェクトのライフタイムを制御および変更するために使用される抽象化です。 一般に、Node-API 値はハンドルスコープのコンテキスト内で作成されます。 JavaScript からネイティブメソッドが呼び出されると、デフォルトのハンドルスコープが存在します。 ユーザーが新しいハンドルスコープを明示的に作成しない場合、Node-API 値はデフォルトのハンドルスコープで作成されます。 ネイティブメソッドの実行外のコードの呼び出し（たとえば、libuv コールバックの呼び出し中）の場合、JavaScript 値の作成につながる可能性のある関数を呼び出す前に、モジュールはスコープを作成する必要があります。</p><p>ハンドルスコープは、<a href="/ja/nodejs/api/n-api#napi-open-handle-scope"><code>napi_open_handle_scope</code></a> を使用して作成され、<a href="/ja/nodejs/api/n-api#napi-close-handle-scope"><code>napi_close_handle_scope</code></a> を使用して破棄されます。 スコープを閉じると、ハンドルスコープのライフタイム中に作成されたすべての <code>napi_value</code> が現在のスタックフレームから参照されなくなったことを GC に示すことができます。</p><p>詳細については、<a href="/ja/nodejs/api/n-api#object-lifetime-management">オブジェクトのライフタイム管理</a> を確認してください。</p><h4 id="napi_escapable_handle_scope" tabindex="-1"><code>napi_escapable_handle_scope</code> <a class="header-anchor" href="#napi_escapable_handle_scope" aria-label="Permalink to “napi_escapable_handle_scope”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><p>エスケープ可能なハンドルスコープは、特定のハンドルスコープ内で作成された値を親スコープに返すための特殊なハンドルスコープです。</p><h4 id="napi_ref" tabindex="-1"><code>napi_ref</code> <a class="header-anchor" href="#napi_ref" aria-label="Permalink to “napi_ref”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><p>これは<code>napi_value</code>を参照するために使用される抽象化です。これにより、ユーザーは JavaScript の値のライフサイクルを管理し、最小ライフサイクルを明示的に定義することができます。</p><p>詳細については、<a href="/ja/nodejs/api/n-api#object-lifetime-management">オブジェクトのライフサイクル管理</a>を参照してください。</p><h4 id="napi_type_tag" tabindex="-1"><code>napi_type_tag</code> <a class="header-anchor" href="#napi_type_tag" aria-label="Permalink to “napi_type_tag”">​</a></h4><p><strong>Added in: v14.8.0, v12.19.0</strong></p><p><strong>N-API version: 8</strong></p><p>符号なし 64 ビット整数として格納される 128 ビットの値。特定のタイプであることを保証するために、JavaScript オブジェクトまたは<a href="/ja/nodejs/api/n-api#napi-create-external">externals</a>に「タグ付け」できる UUID として機能します。これは、オブジェクトのプロトタイプが操作されている場合、偽陽性を報告する可能性があるため、<a href="/ja/nodejs/api/n-api#napi-instanceof"><code>napi_instanceof</code></a>よりも強力なチェックです。タイプタグ付けは、<a href="/ja/nodejs/api/n-api#napi-wrap"><code>napi_wrap</code></a>と組み合わせて使用​​すると最も役立ちます。これは、ラップされたオブジェクトから取得されたポインターを、以前に JavaScript オブジェクトに適用されたタイプタグに対応するネイティブタイプに安全にキャストできることを保証するためです。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lower;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> upper;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_type_tag;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="napi_async_cleanup_hook_handle" tabindex="-1"><code>napi_async_cleanup_hook_handle</code> <a class="header-anchor" href="#napi_async_cleanup_hook_handle" aria-label="Permalink to “napi_async_cleanup_hook_handle”">​</a></h4><p><strong>Added in: v14.10.0, v12.19.0</strong></p><p><a href="/ja/nodejs/api/n-api#napi-add-async-cleanup-hook"><code>napi_add_async_cleanup_hook</code></a>によって返される不透明な値。非同期クリーンアップイベントのチェーンが完了したら、<a href="/ja/nodejs/api/n-api#napi-remove-async-cleanup-hook"><code>napi_remove_async_cleanup_hook</code></a>に渡す必要があります。</p><h3 id="node-api-callback-types" tabindex="-1">Node-API コールバック型 <a class="header-anchor" href="#node-api-callback-types" aria-label="Permalink to “Node-API コールバック型”">​</a></h3><h4 id="napi_callback_info" tabindex="-1"><code>napi_callback_info</code> <a class="header-anchor" href="#napi_callback_info" aria-label="Permalink to “napi_callback_info”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><p>コールバック関数に渡される不透明なデータ型。コールバックが呼び出されたコンテキストに関する追加情報を取得するために使用できます。</p><h4 id="napi_callback" tabindex="-1"><code>napi_callback</code> <a class="header-anchor" href="#napi_callback" aria-label="Permalink to “napi_callback”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><p>Node-API を介して JavaScript に公開されるユーザー提供のネイティブ関数の関数ポインター型。コールバック関数は、次の署名を満たす必要があります。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">napi_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(napi_env, napi_callback_info);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><a href="/ja/nodejs/api/n-api#object-lifetime-management">オブジェクトのライフサイクル管理</a>で説明されている理由がない限り、<code>napi_callback</code>内でハンドルやコールバックスコープを作成する必要はありません。</p><h4 id="node_api_basic_finalize" tabindex="-1"><code>node_api_basic_finalize</code> <a class="header-anchor" href="#node_api_basic_finalize" aria-label="Permalink to “node_api_basic_finalize”">​</a></h4><p><strong>追加:</strong> v21.6.0, v20.12.0, v18.20.0</p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 実験的</p></div><p>アドオンが提供する関数に対する関数ポインタ型です。これは、外部所有のデータが、それに関連付けられたオブジェクトがガベージコレクションされたためにクリーンアップできる状態になったときに、ユーザーに通知できるようにします。ユーザーは、オブジェクトのコレクション時に呼び出される次のシグネチャを満たす関数を提供する必要があります。現在、<code>node_api_basic_finalize</code>は、外部データを持つオブジェクトがいつコレクションされたかを知るために使用できます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node_api_basic_finalize)(node_api_basic_env env,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalize_data,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalize_hint);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><a href="/ja/nodejs/api/n-api#object-lifetime-management">オブジェクトのライフタイム管理</a>で説明されている理由がない限り、関数本体内でハンドルやコールバックスコープを作成する必要はありません。</p><p>これらの関数は、JavaScriptエンジンがJavaScriptコードを実行できない状態にある間に呼び出される可能性があるため、最初のパラメータとして<code>node_api_basic_env</code>を受け入れるNode-APIのみを呼び出すことができます。 <a href="/ja/nodejs/api/n-api#node-api-post-finalizer"><code>node_api_post_finalizer</code></a>は、JavaScriptエンジンの状態へのアクセスを必要とするNode-API呼び出しを、現在のガベージコレクションサイクルが完了した後に実行するようにスケジュールするために使用できます。</p><p><a href="/ja/nodejs/api/n-api#node-api-create-external-string-latin1"><code>node_api_create_external_string_latin1</code></a> および <a href="/ja/nodejs/api/n-api#node-api-create-external-string-utf16"><code>node_api_create_external_string_utf16</code></a> の場合、外部文字列は環境シャットダウンの後半に収集される可能性があるため、<code>env</code> パラメータは null になる場合があります。</p><p>変更履歴:</p><ul><li>実験的（<code>NAPI_EXPERIMENTAL</code>）：最初のパラメータとして<code>node_api_basic_env</code>を受け入れるNode-APIのみを呼び出すことができます。そうでない場合、アプリケーションは適切なエラーメッセージで終了します。 この機能は、<code>NODE_API_EXPERIMENTAL_BASIC_ENV_OPT_OUT</code>を定義することでオフにできます。</li></ul><h4 id="napi_finalize" tabindex="-1"><code>napi_finalize</code> <a class="header-anchor" href="#napi_finalize" aria-label="Permalink to “napi_finalize”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p><strong>N-API バージョン:</strong> 1</p><p>アドオンが提供する関数の関数ポインタ型であり、ガベージコレクションイベントに応答して、ガベージコレクションサイクルが完了した後、Node-APIへの呼び出しグループをスケジュールすることができます。 これらの関数ポインタは、<a href="/ja/nodejs/api/n-api#node-api-post-finalizer"><code>node_api_post_finalizer</code></a>で使用できます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_finalize)(napi_env env,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalize_data,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalize_hint);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>変更履歴:</p><ul><li>実験的 (<code>NAPI_EXPERIMENTAL</code> が定義されている場合): この型の関数は、<a href="/ja/nodejs/api/n-api#node-api-post-finalizer"><code>node_api_post_finalizer</code></a>以外ではファイナライザーとして使用できなくなりました。 代わりに <a href="/ja/nodejs/api/n-api#node-api-basic-finalize"><code>node_api_basic_finalize</code></a> を使用する必要があります。 この機能は、<code>NODE_API_EXPERIMENTAL_BASIC_ENV_OPT_OUT</code> を定義することで無効にできます。</li></ul><h4 id="napi_async_execute_callback" tabindex="-1"><code>napi_async_execute_callback</code> <a class="header-anchor" href="#napi_async_execute_callback" aria-label="Permalink to “napi_async_execute_callback”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p><strong>N-API バージョン:</strong> 1</p><p>非同期操作をサポートする関数で使用される関数ポインタ。 コールバック関数は、次のシグネチャを満たす必要があります。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_async_execute_callback)(napi_env env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>この関数の実装では、JavaScriptを実行したり、JavaScriptオブジェクトと対話したりするNode-API呼び出しを行うことは避けてください。 Node-API呼び出しは、代わりに <code>napi_async_complete_callback</code> で行う必要があります。 <code>napi_env</code> パラメータは、JavaScriptの実行につながる可能性があるので使用しないでください。</p><h4 id="napi_async_complete_callback" tabindex="-1"><code>napi_async_complete_callback</code> <a class="header-anchor" href="#napi_async_complete_callback" aria-label="Permalink to “napi_async_complete_callback”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p><strong>N-API バージョン:</strong> 1</p><p>非同期操作をサポートする関数で使用される関数ポインタ。 コールバック関数は、次のシグネチャを満たす必要があります。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_async_complete_callback)(napi_env env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                             napi_status status,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                             void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><a href="/ja/nodejs/api/n-api#object-lifetime-management">オブジェクトのライフタイム管理</a>で説明されている理由がない限り、関数本体内でハンドルやコールバックスコープを作成する必要はありません。</p><h4 id="napi_threadsafe_function_call_js" tabindex="-1"><code>napi_threadsafe_function_call_js</code> <a class="header-anchor" href="#napi_threadsafe_function_call_js" aria-label="Permalink to “napi_threadsafe_function_call_js”">​</a></h4><p><strong>Added in: v10.6.0</strong></p><p><strong>N-API version: 4</strong></p><p>非同期スレッドセーフ関数呼び出しで使用される関数ポインタです。このコールバックはメインスレッドで呼び出されます。その目的は、セカンダリスレッドからのキュー経由で到着したデータ項目を使用して、通常は <code>napi_call_function</code> 経由で JavaScript への呼び出しに必要なパラメータを構築し、その後 JavaScript への呼び出しを行うことです。</p><p>セカンダリスレッドからキュー経由で到着したデータは <code>data</code> パラメータで与えられ、呼び出す JavaScript 関数は <code>js_callback</code> パラメータで与えられます。</p><p>Node-API はこのコールバックを呼び出す前に環境をセットアップするため、<code>napi_make_callback</code> 経由ではなく、<code>napi_call_function</code> 経由で JavaScript 関数を呼び出すだけで十分です。</p><p>コールバック関数は、次のシグネチャを満たす必要があります。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_threadsafe_function_call_js)(napi_env env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                 napi_value js_callback,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                 void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                 void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: API 呼び出しに使用する環境。または、スレッドセーフ関数が破棄中で <code>data</code> を解放する必要がある場合は <code>NULL</code>。</li><li><code>[in] js_callback</code>: 呼び出す JavaScript 関数。または、スレッドセーフ関数が破棄中で <code>data</code> を解放する必要がある場合は <code>NULL</code>。また、スレッドセーフ関数が <code>js_callback</code> なしで作成された場合も <code>NULL</code> になる可能性があります。</li><li><code>[in] context</code>: スレッドセーフ関数の作成時に指定されたオプションのデータ。</li><li><code>[in] data</code>: セカンダリスレッドによって作成されたデータ。このネイティブデータを JavaScript 値 (Node-API 関数を使用) に変換し、<code>js_callback</code> が呼び出されたときにパラメータとして渡せるようにするのは、コールバックの責任です。このポインタは、スレッドとこのコールバックによって完全に管理されます。したがって、このコールバックはデータを解放する必要があります。</li></ul><p><a href="/ja/nodejs/api/n-api#object-lifetime-management">オブジェクトのライフタイム管理</a> で説明されている理由がない限り、関数本体内でハンドルやコールバックスコープを作成する必要はありません。</p><h4 id="napi_cleanup_hook" tabindex="-1"><code>napi_cleanup_hook</code> <a class="header-anchor" href="#napi_cleanup_hook" aria-label="Permalink to “napi_cleanup_hook”">​</a></h4><p><strong>追加:</strong> v19.2.0, v18.13.0</p><p><strong>N-APIバージョン:</strong> 3</p><p><a href="/ja/nodejs/api/n-api#napi-add-env-cleanup-hook"><code>napi_add_env_cleanup_hook</code></a> で使用される関数ポインタ。環境が破棄されるときに呼び出されます。</p><p>コールバック関数は、次のシグネチャを満たす必要があります。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_cleanup_hook)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] data</code>: <a href="/ja/nodejs/api/n-api#napi-add-env-cleanup-hook"><code>napi_add_env_cleanup_hook</code></a> に渡されたデータ。</li></ul><h4 id="napi_async_cleanup_hook" tabindex="-1"><code>napi_async_cleanup_hook</code> <a class="header-anchor" href="#napi_async_cleanup_hook" aria-label="Permalink to “napi_async_cleanup_hook”">​</a></h4><p><strong>追加:</strong> v14.10.0, v12.19.0</p><p><a href="/ja/nodejs/api/n-api#napi-add-async-cleanup-hook"><code>napi_add_async_cleanup_hook</code></a> で使用される関数ポインタ。環境が破棄されるときに呼び出されます。</p><p>コールバック関数は、次のシグネチャを満たす必要があります。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_async_cleanup_hook)(napi_async_cleanup_hook_handle handle,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] handle</code>: 非同期クリーンアップの完了後、<a href="/ja/nodejs/api/n-api#napi-remove-async-cleanup-hook"><code>napi_remove_async_cleanup_hook</code></a> に渡す必要があるハンドル。</li><li><code>[in] data</code>: <a href="/ja/nodejs/api/n-api#napi-add-async-cleanup-hook"><code>napi_add_async_cleanup_hook</code></a> に渡されたデータ。</li></ul><p>関数の本体は、非同期クリーンアップアクションを開始し、その最後に <code>handle</code> を <a href="/ja/nodejs/api/n-api#napi-remove-async-cleanup-hook"><code>napi_remove_async_cleanup_hook</code></a> の呼び出しに渡す必要があります。</p><h2 id="error-handling" tabindex="-1">エラー処理 <a class="header-anchor" href="#error-handling" aria-label="Permalink to “エラー処理”">​</a></h2><p>Node-API は、エラー処理に戻り値と JavaScript 例外の両方を使用します。次のセクションでは、それぞれのケースのアプローチについて説明します。</p><h3 id="return-values" tabindex="-1">戻り値 <a class="header-anchor" href="#return-values" aria-label="Permalink to “戻り値”">​</a></h3><p>すべての Node-API 関数は、同じエラー処理パターンを共有します。すべての API 関数の戻り値の型は <code>napi_status</code> です。</p><p>リクエストが成功し、キャッチされない JavaScript 例外がスローされなかった場合、戻り値は <code>napi_ok</code> になります。エラーが発生し、例外がスローされた場合、エラーの <code>napi_status</code> 値が返されます。例外がスローされ、エラーが発生しなかった場合、<code>napi_pending_exception</code> が返されます。</p><p><code>napi_ok</code> または <code>napi_pending_exception</code> 以外の戻り値が返された場合は、<a href="/ja/nodejs/api/n-api#napi-is-exception-pending"><code>napi_is_exception_pending</code></a> を呼び出して、例外が保留中かどうかを確認する必要があります。詳細については、例外に関するセクションを参照してください。</p><p>可能な <code>napi_status</code> 値の完全なセットは、<code>napi_api_types.h</code> で定義されています。</p><p><code>napi_status</code> の戻り値は、発生したエラーの VM に依存しない表現を提供します。場合によっては、エラーを表す文字列や VM（エンジン）固有の情報など、より詳細な情報を取得できると便利です。</p><p>この情報を取得するために、<code>napi_extended_error_info</code> 構造体を返す <a href="/ja/nodejs/api/n-api#napi-get-last-error-info"><code>napi_get_last_error_info</code></a> が提供されています。<code>napi_extended_error_info</code> 構造体の形式は次のとおりです。</p><p><strong>追加:</strong> v8.0.0</p><p><strong>N-APIバージョン:</strong> 1</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_extended_error_info {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error_message;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> engine_reserved;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> engine_error_code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_status error_code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>error_message</code>: 発生したエラーのテキスト表現。</li><li><code>engine_reserved</code>: エンジンの使用のみのために予約された不透明なハンドル。</li><li><code>engine_error_code</code>: VM 固有のエラーコード。</li><li><code>error_code</code>: 最後のエラーの Node-API ステータスコード。</li></ul><p><a href="/ja/nodejs/api/n-api#napi-get-last-error-info"><code>napi_get_last_error_info</code></a> は、最後に行われた Node-API 呼び出しの情報を返します。</p><p>拡張情報のコンテンツまたは形式に依存しないでください。SemVer の対象ではなく、いつでも変更される可能性があります。これは、ロギングのみを目的としています。</p><h4 id="napi_get_last_error_info" tabindex="-1"><code>napi_get_last_error_info</code> <a class="header-anchor" href="#napi_get_last_error_info" aria-label="Permalink to “napi_get_last_error_info”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_last_error_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_extended_error_info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが起動される環境。</li><li><code>[out] result</code>: エラーに関する詳細情報を持つ <code>napi_extended_error_info</code> 構造体。</li></ul><p>APIが成功した場合は <code>napi_ok</code> を返します。</p><p>このAPIは、発生した最後のエラーに関する情報を持つ <code>napi_extended_error_info</code> 構造体を取得します。</p><p>返される <code>napi_extended_error_info</code> の内容は、同じ <code>env</code> で Node-API 関数が呼び出されるまでのみ有効です。 これには <code>napi_is_exception_pending</code> の呼び出しも含まれるため、後で使用できるように情報をコピーする必要があることがよくあります。 <code>error_message</code> で返されるポインターは静的に定義された文字列を指しているため、別のNode-API関数が呼び出される前に <code>error_message</code> フィールド（上書きされます）からコピーした場合、そのポインターを安全に使用できます。</p><p>拡張情報の内容または形式に依存しないでください。SemVerの対象ではなく、いつでも変更される可能性があります。 これはロギングのみを目的としています。</p><p>このAPIは、JavaScriptの例外が保留中の場合でも呼び出すことができます。</p><h3 id="exceptions" tabindex="-1">例外 <a class="header-anchor" href="#exceptions" aria-label="Permalink to “例外”">​</a></h3><p>Node-API 関数の呼び出しは、保留中の JavaScript 例外を引き起こす可能性があります。 これは、JavaScript の実行を引き起こさない API 関数にも当てはまります。</p><p>関数から返される <code>napi_status</code> が <code>napi_ok</code> の場合、例外は保留されておらず、追加のアクションは必要ありません。 返される <code>napi_status</code> が <code>napi_ok</code> または <code>napi_pending_exception</code> 以外の場合は、単にすぐに戻るのではなく、回復して続行しようとするために、例外が保留中かどうかを判断するために <a href="/ja/nodejs/api/n-api#napi-is-exception-pending"><code>napi_is_exception_pending</code></a> を呼び出す必要があります。</p><p>多くの場合、Node-API 関数が呼び出され、例外がすでに保留中の場合、関数は <code>napi_status</code> の <code>napi_pending_exception</code> で直ちに返されます。 ただし、これはすべての関数に当てはまるわけではありません。 Node-APIを使用すると、JavaScriptに戻る前に最小限のクリーンアップを行うために、関数のサブセットを呼び出すことができます。 その場合、<code>napi_status</code> は関数のステータスを反映します。 以前の保留中の例外は反映されません。 混乱を避けるために、すべての関数呼び出しの後にエラーステータスを確認してください。</p><p>例外が保留中の場合は、2つのアプローチのいずれかを採用できます。</p><p>最初のアプローチは、適切なクリーンアップを実行し、実行がJavaScriptに戻るように戻ることです。 JavaScriptへのトランジションの一部として、例外はネイティブメソッドが呼び出されたJavaScriptコードのポイントでスローされます。 ほとんどの Node-API 呼び出しの動作は、例外が保留中の場合は指定されておらず、多くの場合、<code>napi_pending_exception</code> が返されるだけなので、できるだけ少なくして JavaScript に戻り、例外を処理できます。</p><p>2番目のアプローチは、例外を処理しようとすることです。 ネイティブコードが例外をキャッチし、適切なアクションを実行して、続行できる場合があります。 これは、例外を安全に処理できることがわかっている特定のケースでのみ推奨されます。 これらの場合、<a href="/ja/nodejs/api/n-api#napi-get-and-clear-last-exception"><code>napi_get_and_clear_last_exception</code></a> を使用して、例外を取得してクリアできます。 成功すると、result には、最後にスローされた JavaScript <code>Object</code> へのハンドルが含まれます。 例外を取得した後、例外を処理できないと判断した場合は、<a href="/ja/nodejs/api/n-api#napi-throw"><code>napi_throw</code></a> で再度スローできます。ここで、error はスローされる JavaScript 値です。</p><p>ネイティブコードが例外をスローする必要がある場合、または <code>napi_value</code> が JavaScript <code>Error</code> オブジェクトのインスタンスであるかどうかを判断する必要がある場合に備えて、次のユーティリティ関数も使用できます：<a href="/ja/nodejs/api/n-api#napi-throw-error"><code>napi_throw_error</code></a>, <a href="/ja/nodejs/api/n-api#napi-throw-type-error"><code>napi_throw_type_error</code></a>, <a href="/ja/nodejs/api/n-api#napi-throw-range-error"><code>napi_throw_range_error</code></a>, <a href="/ja/nodejs/api/n-api#node-api-throw-syntax-error"><code>node_api_throw_syntax_error</code></a> および <a href="/ja/nodejs/api/n-api#napi-is-error"><code>napi_is_error</code></a>。</p><p>ネイティブコードが <code>Error</code> オブジェクトを作成する必要がある場合に備えて、次のユーティリティ関数も使用できます：<a href="/ja/nodejs/api/n-api#napi-create-error"><code>napi_create_error</code></a>, <a href="/ja/nodejs/api/n-api#napi-create-type-error"><code>napi_create_type_error</code></a>, <a href="/ja/nodejs/api/n-api#napi-create-range-error"><code>napi_create_range_error</code></a> および <a href="/ja/nodejs/api/n-api#node-api-create-syntax-error"><code>node_api_create_syntax_error</code></a>。ここで、result は新しく作成された JavaScript <code>Error</code> オブジェクトを参照する <code>napi_value</code> です。</p><p>Node.jsプロジェクトは、内部で生成されるすべてのエラーにエラーコードを追加しています。 目標は、アプリケーションがすべてのエラーチェックにこれらのエラーコードを使用することです。 関連するエラーメッセージは残りますが、ロギングと表示のみに使用することを目的としており、メッセージはSemVerを適用せずに変更できると予想されます。 Node-APIでこのモデルをサポートするために、内部機能とモジュール固有の機能の両方（優れたプラクティスとして）、<code>throw_</code> および <code>create_</code> 関数は、エラーオブジェクトに追加されるコードの文字列であるオプションのコードパラメータを取ります。 オプションのパラメータが <code>NULL</code> の場合、エラーに関連付けられるコードはありません。 コードが指定されている場合、エラーに関連付けられている名前も次のように更新されます。</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>originalName [code]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ここで、<code>originalName</code> はエラーに関連付けられている元の名前であり、<code>code</code> は指定されたコードです。 たとえば、コードが <code>&#39;ERR_ERROR_1&#39;</code> で、<code>TypeError</code> が作成されている場合、名前は次のようになります。</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>TypeError [ERR_ERROR_1]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="napi_throw" tabindex="-1"><code>napi_throw</code> <a class="header-anchor" href="#napi_throw" aria-label="Permalink to “napi_throw”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] error</code>: スローされるJavaScriptの値。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、提供されたJavaScriptの値をスローします。</p><h4 id="napi_throw_error" tabindex="-1"><code>napi_throw_error</code> <a class="header-anchor" href="#napi_throw_error" aria-label="Permalink to “napi_throw_error”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_throw_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                         const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                         const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] code</code>: エラーに設定されるオプションのエラーコード。</li><li><code>[in] msg</code>: エラーに関連付けられるテキストを表すC文字列。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、提供されたテキストを持つJavaScriptの<code>Error</code>をスローします。</p><h4 id="napi_throw_type_error" tabindex="-1"><code>napi_throw_type_error</code> <a class="header-anchor" href="#napi_throw_type_error" aria-label="Permalink to “napi_throw_type_error”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_throw_type_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                              const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                              const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] code</code>: エラーに設定されるオプションのエラーコード。</li><li><code>[in] msg</code>: エラーに関連付けられるテキストを表すC文字列。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、提供されたテキストを持つJavaScriptの<code>TypeError</code>をスローします。</p><h4 id="napi_throw_range_error" tabindex="-1"><code>napi_throw_range_error</code> <a class="header-anchor" href="#napi_throw_range_error" aria-label="Permalink to “napi_throw_range_error”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_throw_range_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                               const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                               const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] code</code>: エラーに設定されるオプションのエラーコード。</li><li><code>[in] msg</code>: エラーに関連付けられるテキストを表すC文字列。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、提供されたテキストを持つJavaScriptの<code>RangeError</code>をスローします。</p><h4 id="node_api_throw_syntax_error" tabindex="-1"><code>node_api_throw_syntax_error</code> <a class="header-anchor" href="#node_api_throw_syntax_error" aria-label="Permalink to “node_api_throw_syntax_error”">​</a></h4><p><strong>追加:</strong> v17.2.0, v16.14.0</p><p><strong>N-APIバージョン:</strong> 9</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_api_throw_syntax_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] code</code>: エラーに設定されるオプションのエラーコード。</li><li><code>[in] msg</code>: エラーに関連付けられるテキストを表すC文字列。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、提供されたテキストとともにJavaScript <code>SyntaxError</code>をスローします。</p><h4 id="napi_is_error" tabindex="-1"><code>napi_is_error</code> <a class="header-anchor" href="#napi_is_error" aria-label="Permalink to “napi_is_error”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p><strong>N-APIバージョン:</strong> 1</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_is_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                      napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: チェックされる<code>napi_value</code>。</li><li><code>[out] result</code>: <code>napi_value</code>がエラーを表す場合はtrue、そうでない場合はfalseに設定されるブール値。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、<code>napi_value</code>を照会して、エラーオブジェクトを表すかどうかを確認します。</p><h4 id="napi_create_error" tabindex="-1"><code>napi_create_error</code> <a class="header-anchor" href="#napi_create_error" aria-label="Permalink to “napi_create_error”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p><strong>N-APIバージョン:</strong> 1</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                          napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                          napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                          napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] code</code>: エラーに関連付けられるエラーコードの文字列を持つオプションの<code>napi_value</code>。</li><li><code>[in] msg</code>: <code>Error</code>のメッセージとして使用されるJavaScript <code>string</code>を参照する<code>napi_value</code>。</li><li><code>[out] result</code>: 作成されたエラーを表す<code>napi_value</code>。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、提供されたテキストとともにJavaScript <code>Error</code>を返します。</p><h4 id="napi_create_type_error" tabindex="-1"><code>napi_create_type_error</code> <a class="header-anchor" href="#napi_create_type_error" aria-label="Permalink to “napi_create_type_error”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p><strong>N-APIバージョン:</strong> 1</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_type_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                               napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                               napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                               napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] code</code>: エラーに関連付けられるエラーコードの文字列を持つオプションの<code>napi_value</code>。</li><li><code>[in] msg</code>: <code>Error</code>のメッセージとして使用されるJavaScript <code>string</code>を参照する<code>napi_value</code>。</li><li><code>[out] result</code>: 作成されたエラーを表す<code>napi_value</code>。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、提供されたテキストとともにJavaScript <code>TypeError</code>を返します。</p><h4 id="napi_create_range_error" tabindex="-1"><code>napi_create_range_error</code> <a class="header-anchor" href="#napi_create_range_error" aria-label="Permalink to “napi_create_range_error”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_range_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] code</code>: エラーに関連付けられるエラーコードの文字列を持つオプションの <code>napi_value</code>。</li><li><code>[in] msg</code>: <code>Error</code> のメッセージとして使用される JavaScript <code>string</code> を参照する <code>napi_value</code>。</li><li><code>[out] result</code>: 作成されたエラーを表す <code>napi_value</code>。</li></ul><p>API が成功した場合 <code>napi_ok</code> を返します。</p><p>この API は、指定されたテキストを持つ JavaScript <code>RangeError</code> を返します。</p><h4 id="node_api_create_syntax_error" tabindex="-1"><code>node_api_create_syntax_error</code> <a class="header-anchor" href="#node_api_create_syntax_error" aria-label="Permalink to “node_api_create_syntax_error”">​</a></h4><p><strong>Added in: v17.2.0, v16.14.0</strong></p><p><strong>N-API バージョン: 9</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_api_create_syntax_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                     napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                     napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                     napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] code</code>: エラーに関連付けられるエラーコードの文字列を持つオプションの <code>napi_value</code>。</li><li><code>[in] msg</code>: <code>Error</code> のメッセージとして使用される JavaScript <code>string</code> を参照する <code>napi_value</code>。</li><li><code>[out] result</code>: 作成されたエラーを表す <code>napi_value</code>。</li></ul><p>API が成功した場合 <code>napi_ok</code> を返します。</p><p>この API は、指定されたテキストを持つ JavaScript <code>SyntaxError</code> を返します。</p><h4 id="napi_get_and_clear_last_exception" tabindex="-1"><code>napi_get_and_clear_last_exception</code> <a class="header-anchor" href="#napi_get_and_clear_last_exception" aria-label="Permalink to “napi_get_and_clear_last_exception”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_and_clear_last_exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                              napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[out] result</code>: 保留中の例外がある場合は例外、それ以外の場合は <code>NULL</code>。</li></ul><p>API が成功した場合 <code>napi_ok</code> を返します。</p><p>この API は、保留中の JavaScript 例外がある場合でも呼び出すことができます。</p><h4 id="napi_is_exception_pending" tabindex="-1"><code>napi_is_exception_pending</code> <a class="header-anchor" href="#napi_is_exception_pending" aria-label="Permalink to “napi_is_exception_pending”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_is_exception_pending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[out] result</code>: 例外が保留中の場合、trueに設定されるブール値。</li></ul><p>APIが成功した場合<code>napi_ok</code>を返します。</p><p>このAPIは、JavaScriptの例外が保留中の場合でも呼び出すことができます。</p><h4 id="napi_fatal_exception" tabindex="-1"><code>napi_fatal_exception</code> <a class="header-anchor" href="#napi_fatal_exception" aria-label="Permalink to “napi_fatal_exception”">​</a></h4><p><strong>Added in: v9.10.0</strong></p><p><strong>N-API version: 3</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_fatal_exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] err</code>: <code>&#39;uncaughtException&#39;</code>に渡されるエラー。</li></ul><p>JavaScriptで<code>&#39;uncaughtException&#39;</code>をトリガーします。非同期コールバックが回復不能な例外をスローする場合に便利です。</p><h3 id="fatal-errors" tabindex="-1">致命的なエラー <a class="header-anchor" href="#fatal-errors" aria-label="Permalink to “致命的なエラー”">​</a></h3><p>ネイティブアドオンで回復不能なエラーが発生した場合、プロセスを直ちに終了させるために致命的なエラーをスローすることができます。</p><h4 id="napi_fatal_error" tabindex="-1"><code>napi_fatal_error</code> <a class="header-anchor" href="#napi_fatal_error" aria-label="Permalink to “napi_fatal_error”">​</a></h4><p><strong>Added in: v8.2.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_NO_RETURN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_fatal_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> location_len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> message_len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] location</code>: エラーが発生した場所（オプション）。</li><li><code>[in] location_len</code>: 場所の長さをバイト単位で指定します。null終端の場合は<code>NAPI_AUTO_LENGTH</code>。</li><li><code>[in] message</code>: エラーに関連付けられたメッセージ。</li><li><code>[in] message_len</code>: メッセージの長さをバイト単位で指定します。null終端の場合は<code>NAPI_AUTO_LENGTH</code>。</li></ul><p>この関数呼び出しは戻らず、プロセスは終了します。</p><p>このAPIは、JavaScriptの例外が保留中の場合でも呼び出すことができます。</p><h2 id="object-lifetime-management" tabindex="-1">オブジェクトのライフタイム管理 <a class="header-anchor" href="#object-lifetime-management" aria-label="Permalink to “オブジェクトのライフタイム管理”">​</a></h2><p>Node-APIの呼び出しが行われると、基盤となるVMのヒープ内のオブジェクトへのハンドルは<code>napi_values</code>として返されることがあります。 これらのハンドルは、ネイティブコードが必要としなくなるまでオブジェクトを「ライブ」に保つ必要があります。そうしないと、ネイティブコードが使用を終える前にオブジェクトが収集される可能性があります。</p><p>オブジェクトハンドルが返されると、それらは「スコープ」に関連付けられます。 デフォルトのスコープの有効期間は、ネイティブメソッド呼び出しの有効期間に関連付けられています。 その結果、デフォルトでは、ハンドルは有効なままであり、これらのハンドルに関連付けられたオブジェクトは、ネイティブメソッド呼び出しの有効期間中ライブに保持されます。</p><p>ただし、多くの場合、ハンドルがネイティブメソッドの有効期間よりも短いまたは長い有効期間を維持する必要がある場合があります。 以下のセクションでは、ハンドル の寿命をデフォルトから変更するために使用できるNode-API関数について説明します。</p><h3 id="making-handle-lifespan-shorter-than-that-of-the-native-method" tabindex="-1">ネイティブメソッドの寿命よりも短いハンドルの寿命を作る <a class="header-anchor" href="#making-handle-lifespan-shorter-than-that-of-the-native-method" aria-label="Permalink to “ネイティブメソッドの寿命よりも短いハンドルの寿命を作る”">​</a></h3><p>多くの場合、ネイティブメソッドの寿命よりもハンドルの寿命を短くする必要があります。たとえば、大きな配列の要素を反復処理するループを持つネイティブメソッドについて考えてみます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_value result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_status status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_get_element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, object, i, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // do something with element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>これにより、多数のハンドルが作成され、多大なリソースが消費されることになります。さらに、ネイティブコードが最新のハンドルしか使用できない場合でも、すべての関連オブジェクトは同じスコープを共有するため、すべて保持されます。</p><p>この場合に対応するために、Node-API は、新しく作成されたハンドルが関連付けられる新しい「スコープ」を確立する機能を提供します。これらのハンドルが不要になったら、スコープを「閉じる」ことができ、スコープに関連付けられているすべてのハンドルは無効になります。スコープを開閉するために利用できるメソッドは、<a href="/ja/nodejs/api/n-api#napi-open-handle-scope"><code>napi_open_handle_scope</code></a> および <a href="/ja/nodejs/api/n-api#napi-close-handle-scope"><code>napi_close_handle_scope</code></a> です。</p><p>Node-API は、スコープの単一の入れ子になった階層のみをサポートします。アクティブなスコープは常に 1 つだけであり、アクティブな間はすべての新しいハンドルがそのスコープに関連付けられます。スコープは、開かれた順序と逆の順序で閉じる必要があります。さらに、ネイティブメソッド内で作成されたすべてのスコープは、そのメソッドから戻る前に閉じる必要があります。</p><p>前の例を取り上げて、<a href="/ja/nodejs/api/n-api#napi-open-handle-scope"><code>napi_open_handle_scope</code></a> および <a href="/ja/nodejs/api/n-api#napi-close-handle-scope"><code>napi_close_handle_scope</code></a> への呼び出しを追加すると、ループの実行全体で最大で 1 つのハンドルが有効であることが保証されます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_handle_scope scope;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_status status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_open_handle_scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scope);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_value result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_get_element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, object, i, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // do something with element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_close_handle_scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, scope);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>スコープを入れ子にすると、内側のスコープからのハンドルがそのスコープの寿命を超えて存続する必要がある場合があります。Node-API は、この場合をサポートするために「エスケープ可能スコープ」をサポートしています。エスケープ可能スコープを使用すると、1 つのハンドルを「昇格」させて、現在のスコープから「エスケープ」させることができ、ハンドルの寿命が現在のスコープから外側のスコープの寿命に変わります。</p><p>エスケープ可能スコープを開閉するために利用できるメソッドは、<a href="/ja/nodejs/api/n-api#napi-open-escapable-handle-scope"><code>napi_open_escapable_handle_scope</code></a> および <a href="/ja/nodejs/api/n-api#napi-close-escapable-handle-scope"><code>napi_close_escapable_handle_scope</code></a> です。</p><p>ハンドルの昇格要求は、一度しか呼び出すことができない <a href="/ja/nodejs/api/n-api#napi-escape-handle"><code>napi_escape_handle</code></a> を介して行われます。</p><h4 id="napi_open_handle_scope" tabindex="-1"><code>napi_open_handle_scope</code> <a class="header-anchor" href="#napi_open_handle_scope" aria-label="Permalink to “napi_open_handle_scope”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_open_handle_scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                               napi_handle_scope</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[out] result</code>: 新しいスコープを表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは新しいスコープを開きます。</p><h4 id="napi_close_handle_scope" tabindex="-1"><code>napi_close_handle_scope</code> <a class="header-anchor" href="#napi_close_handle_scope" aria-label="Permalink to “napi_close_handle_scope”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_close_handle_scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                napi_handle_scope </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] scope</code>: 閉じられるスコープを表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは渡されたスコープを閉じます。スコープは作成された順序と逆の順序で閉じなければなりません。</p><p>このAPIは、保留中のJavaScript例外がある場合でも呼び出すことができます。</p><h4 id="napi_open_escapable_handle_scope" tabindex="-1"><code>napi_open_escapable_handle_scope</code> <a class="header-anchor" href="#napi_open_escapable_handle_scope" aria-label="Permalink to “napi_open_escapable_handle_scope”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    napi_open_escapable_handle_scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                     napi_handle_scope</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[out] result</code>: 新しいスコープを表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、1つのオブジェクトを外側のスコープに昇格させることができる新しいスコープを開きます。</p><h4 id="napi_close_escapable_handle_scope" tabindex="-1"><code>napi_close_escapable_handle_scope</code> <a class="header-anchor" href="#napi_close_escapable_handle_scope" aria-label="Permalink to “napi_close_escapable_handle_scope”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    napi_close_escapable_handle_scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                      napi_handle_scope </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] scope</code>: 閉じられるスコープを表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは渡されたスコープを閉じます。スコープは作成された順序と逆の順序で閉じなければなりません。</p><p>このAPIは、保留中のJavaScript例外がある場合でも呼び出すことができます。</p><h4 id="napi_escape_handle" tabindex="-1"><code>napi_escape_handle</code> <a class="header-anchor" href="#napi_escape_handle" aria-label="Permalink to “napi_escape_handle”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p><strong>N-API バージョン:</strong> 1</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_escape_handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_escapable_handle_scope </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">escapee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] scope</code>: 現在のスコープを表す <code>napi_value</code>。</li><li><code>[in] escapee</code>: エスケープされるJavaScriptの <code>Object</code> を表す <code>napi_value</code>。</li><li><code>[out] result</code>: 外側のスコープでエスケープされた <code>Object</code> へのハンドルを表す <code>napi_value</code>。</li></ul><p>APIが成功した場合は <code>napi_ok</code> を返します。</p><p>このAPIは、JavaScriptオブジェクトへのハンドルを昇格させ、外側のスコープの有効期間中有効になるようにします。 これはスコープごとに1回のみ呼び出すことができます。 複数回呼び出すと、エラーが返されます。</p><p>このAPIは、保留中のJavaScript例外がある場合でも呼び出すことができます。</p><h3 id="references-to-values-with-a-lifespan-longer-than-that-of-the-native-method" tabindex="-1">ネイティブメソッドの有効期間よりも長い有効期間を持つ値への参照 <a class="header-anchor" href="#references-to-values-with-a-lifespan-longer-than-that-of-the-native-method" aria-label="Permalink to “ネイティブメソッドの有効期間よりも長い有効期間を持つ値への参照”">​</a></h3><p>場合によっては、アドオンが単一のネイティブメソッド呼び出しよりも長い有効期間を持つ値を作成および参照できる必要が生じます。 たとえば、コンストラクターを作成し、後でインスタンスを作成するリクエストでそのコンストラクターを使用するには、多くの異なるインスタンス作成リクエスト間でコンストラクターオブジェクトを参照できる必要があります。 これは、前のセクションで説明したように、 <code>napi_value</code> として返される通常のハンドルでは不可能になります。 通常のハンドルの有効期間はスコープによって管理され、すべてのスコープはネイティブメソッドの終了前に閉じられる必要があります。</p><p>Node-APIは、値への永続的な参照を作成するためのメソッドを提供します。 現在、Node-APIは、オブジェクト、外部、関数、シンボルを含む、限られた値の型に対してのみ参照の作成を許可しています。</p><p>各参照には、関連付けられたカウントがあり、値は0以上です。このカウントは、参照が対応する値を保持するかどうかを決定します。 カウントが0の参照は、値が収集されるのを防ぎません。 オブジェクト (オブジェクト、関数、外部) およびシンボル型の値は、「弱い」参照になりつつあり、収集されなくてもアクセスできます。 0より大きいカウントは、値が収集されるのを防ぎます。</p><p>シンボル値には、さまざまな種類があります。 真の弱い参照動作は、 <code>napi_create_symbol</code> 関数またはJavaScriptの <code>Symbol()</code> コンストラクター呼び出しで作成されたローカルシンボルでのみサポートされます。 <code>node_api_symbol_for</code> 関数またはJavaScriptの <code>Symbol.for()</code> 関数呼び出しで作成されたグローバルに登録されたシンボルは、ガベージコレクターがそれらを収集しないため、常に強い参照のままです。 これは、 <code>Symbol.iterator</code> などの既知のシンボルにも当てはまります。 それらもガベージコレクターによって収集されることはありません。</p><p>参照は、初期参照カウントで作成できます。 カウントは、<a href="/ja/nodejs/api/n-api#napi-reference-ref"><code>napi_reference_ref</code></a> および <a href="/ja/nodejs/api/n-api#napi-reference-unref"><code>napi_reference_unref</code></a> を通じて変更できます。 参照のカウントが0の間にオブジェクトが収集された場合、参照に関連付けられたオブジェクトを取得するための後続のすべての呼び出し <a href="/ja/nodejs/api/n-api#napi-get-reference-value"><code>napi_get_reference_value</code></a> は、返された <code>napi_value</code> に対して <code>NULL</code> を返します。 オブジェクトが収集された参照に対して <a href="/ja/nodejs/api/n-api#napi-reference-ref"><code>napi_reference_ref</code></a> を呼び出そうとすると、エラーが発生します。</p><p>参照は、アドオンで不要になったら削除する必要があります。 参照が削除されると、対応するオブジェクトが収集されるのを防ぐことはなくなります。 永続的な参照を削除しないと、永続的な参照のネイティブメモリとヒープ上の対応するオブジェクトの両方が永久に保持される「メモリリーク」が発生します。</p><p>同じオブジェクトを参照する複数の永続的な参照を作成できます。各参照は、個々のカウントに基づいてオブジェクトを保持するかどうかを決定します。 同じオブジェクトへの複数の永続的な参照は、ネイティブメモリを予期せず保持する可能性があります。 永続的な参照のネイティブ構造は、参照されるオブジェクトのファイナライザーが実行されるまで保持する必要があります。 同じオブジェクトに対して新しい永続的な参照が作成された場合、そのオブジェクトのファイナライザーは実行されず、以前の永続的な参照が指すネイティブメモリは解放されません。 これは、可能な場合は <code>napi_reference_unref</code> に加えて <code>napi_delete_reference</code> を呼び出すことで回避できます。</p><p><strong>変更履歴:</strong></p><ul><li>実験的 (<code>NAPI_EXPERIMENTAL</code> が定義されています): すべての値型に対して参照を作成できます。 新しくサポートされる値型は、弱い参照セマンティクスをサポートしていません。これらの型の値は、参照カウントが0になると解放され、参照からアクセスできなくなります。</li></ul><h4 id="napi_create_reference" tabindex="-1"><code>napi_create_reference</code> <a class="header-anchor" href="#napi_create_reference" aria-label="Permalink to “napi_create_reference”">​</a></h4><p><strong>追加: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_reference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                              napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                              uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> initial_refcount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                              napi_ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] value</code>: リファレンスが作成される <code>napi_value</code>。</li><li><code>[in] initial_refcount</code>: 新しいリファレンスの初期参照カウント。</li><li><code>[out] result</code>: 新しいリファレンスを指す <code>napi_ref</code>。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この API は、渡された値に対して、指定された参照カウントを持つ新しいリファレンスを作成します。</p><h4 id="napi_delete_reference" tabindex="-1"><code>napi_delete_reference</code> <a class="header-anchor" href="#napi_delete_reference" aria-label="Permalink to “napi_delete_reference”">​</a></h4><p><strong>追加: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_delete_reference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_ref </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] ref</code>: 削除される <code>napi_ref</code>。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この API は、渡されたリファレンスを削除します。</p><p>この API は、保留中の JavaScript 例外がある場合でも呼び出すことができます。</p><h4 id="napi_reference_ref" tabindex="-1"><code>napi_reference_ref</code> <a class="header-anchor" href="#napi_reference_ref" aria-label="Permalink to “napi_reference_ref”">​</a></h4><p><strong>追加: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_reference_ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                           napi_ref </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                           uint32_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] ref</code>: 参照カウントが増加される <code>napi_ref</code>。</li><li><code>[out] result</code>: 新しい参照カウント。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この API は、渡されたリファレンスの参照カウントを増やし、その結果の参照カウントを返します。</p><h4 id="napi_reference_unref" tabindex="-1"><code>napi_reference_unref</code> <a class="header-anchor" href="#napi_reference_unref" aria-label="Permalink to “napi_reference_unref”">​</a></h4><p><strong>追加: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_reference_unref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                             napi_ref </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                             uint32_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] ref</code>: 参照カウントが減少される <code>napi_ref</code>。</li><li><code>[out] result</code>: 新しい参照カウント。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この API は、渡されたリファレンスの参照カウントを減らし、その結果の参照カウントを返します。</p><h4 id="napi_get_reference_value" tabindex="-1"><code>napi_get_reference_value</code> <a class="header-anchor" href="#napi_get_reference_value" aria-label="Permalink to “napi_get_reference_value”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_reference_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                 napi_ref </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                 napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が起動される環境。</li><li><code>[in] ref</code>: 対応する値が要求されている <code>napi_ref</code>。</li><li><code>[out] result</code>: <code>napi_ref</code> によって参照される <code>napi_value</code>。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>まだ有効な場合、この API は <code>napi_ref</code> に関連付けられた JavaScript 値を表す <code>napi_value</code> を返します。 そうでない場合、result は <code>NULL</code> になります。</p><h3 id="cleanup-on-exit-of-the-current-nodejs-environment" tabindex="-1">現在の Node.js 環境の終了時のクリーンアップ <a class="header-anchor" href="#cleanup-on-exit-of-the-current-nodejs-environment" aria-label="Permalink to “現在の Node.js 環境の終了時のクリーンアップ”">​</a></h3><p>通常、Node.js プロセスは終了時にすべてのリソースを解放しますが、Node.js の埋め込みや将来の Worker のサポートでは、アドオンが現在の Node.js 環境の終了時に実行されるクリーンアップフックを登録する必要があります。</p><p>Node-API は、このようなコールバックを登録および登録解除するための関数を提供します。 これらのコールバックが実行されると、アドオンによって保持されているすべてのリソースを解放する必要があります。</p><h4 id="napi_add_env_cleanup_hook" tabindex="-1"><code>napi_add_env_cleanup_hook</code> <a class="header-anchor" href="#napi_add_env_cleanup_hook" aria-label="Permalink to “napi_add_env_cleanup_hook”">​</a></h4><p><strong>Added in: v10.2.0</strong></p><p><strong>N-API バージョン: 3</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_add_env_cleanup_hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                  napi_cleanup_hook </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                  void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>現在の Node.js 環境が終了したら、<code>arg</code> パラメータで実行される関数として <code>fun</code> を登録します。</p><p>関数は、異なる <code>arg</code> 値で複数回安全に指定できます。 その場合、複数回呼び出されます。 同じ <code>fun</code> と <code>arg</code> の値を複数回指定することは許可されておらず、プロセスが中止されます。</p><p>フックは逆順に呼び出されます。つまり、最後に追加されたものが最初に呼び出されます。</p><p>このフックの削除は、<a href="/ja/nodejs/api/n-api#napi-remove-env-cleanup-hook"><code>napi_remove_env_cleanup_hook</code></a> を使用して行うことができます。 通常、これは、このフックが追加されたリソースがとにかく破棄されている場合に発生します。</p><p>非同期クリーンアップの場合、<a href="/ja/nodejs/api/n-api#napi-add-async-cleanup-hook"><code>napi_add_async_cleanup_hook</code></a> が利用可能です。</p><h4 id="napi_remove_env_cleanup_hook" tabindex="-1"><code>napi_remove_env_cleanup_hook</code> <a class="header-anchor" href="#napi_remove_env_cleanup_hook" aria-label="Permalink to “napi_remove_env_cleanup_hook”">​</a></h4><p><strong>Added in: v10.2.0</strong></p><p><strong>N-API バージョン: 3</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_remove_env_cleanup_hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                     void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fun)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arg),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                     void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>現在の Node.js 環境が終了したときに、<code>arg</code> パラメーターとともに実行される関数として <code>fun</code> の登録を解除します。引数と関数の値は正確に一致する必要があります。</p><p>関数は元々 <code>napi_add_env_cleanup_hook</code> で登録されている必要があります。そうでない場合、プロセスは中止されます。</p><h4 id="napi_add_async_cleanup_hook" tabindex="-1"><code>napi_add_async_cleanup_hook</code> <a class="header-anchor" href="#napi_add_async_cleanup_hook" aria-label="Permalink to “napi_add_async_cleanup_hook”">​</a></h4><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v14.10.0, v12.19.0</td><td><code>hook</code> コールバックのシグネチャが変更されました。</td></tr><tr><td>v14.8.0, v12.19.0</td><td>Added in: v14.8.0, v12.19.0</td></tr></tbody></table></div><p><strong>N-API バージョン: 8</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_add_async_cleanup_hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    napi_async_cleanup_hook </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    napi_async_cleanup_hook_handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> remove_handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] hook</code>: 環境の破棄時に呼び出す関数ポインター。 <a href="/ja/nodejs/api/n-api#napi-async-cleanup-hook"><code>napi_async_cleanup_hook</code></a> 型の関数です。</li><li><code>[in] arg</code>: <code>hook</code> が呼び出されたときに渡すポインター。</li><li><code>[out] remove_handle</code>: オプションのハンドルで、非同期クリーンアップフックを参照します。</li></ul><p>現在の Node.js 環境が終了したときに、<code>remove_handle</code> および <code>arg</code> パラメーターとともに実行される関数として、<a href="/ja/nodejs/api/n-api#napi-async-cleanup-hook"><code>napi_async_cleanup_hook</code></a> 型の関数である <code>hook</code> を登録します。</p><p><a href="/ja/nodejs/api/n-api#napi-add-env-cleanup-hook"><code>napi_add_env_cleanup_hook</code></a> とは異なり、フックは非同期にすることができます。</p><p>それ以外の場合、動作は一般的に <a href="/ja/nodejs/api/n-api#napi-add-env-cleanup-hook"><code>napi_add_env_cleanup_hook</code></a> と一致します。</p><p><code>remove_handle</code> が <code>NULL</code> でない場合は、不透明な値が格納され、フックがすでに呼び出されているかどうかに関係なく、後で <a href="/ja/nodejs/api/n-api#napi-remove-async-cleanup-hook"><code>napi_remove_async_cleanup_hook</code></a> に渡す必要があります。通常、これはこのフックが追加されたリソースが破棄される場合に発生します。</p><h4 id="napi_remove_async_cleanup_hook" tabindex="-1"><code>napi_remove_async_cleanup_hook</code> <a class="header-anchor" href="#napi_remove_async_cleanup_hook" aria-label="Permalink to “napi_remove_async_cleanup_hook”">​</a></h4><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v14.10.0, v12.19.0</td><td><code>env</code> パラメータを削除しました。</td></tr><tr><td>v14.8.0, v12.19.0</td><td>v14.8.0, v12.19.0 で追加されました。</td></tr></tbody></table></div><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_remove_async_cleanup_hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    napi_async_cleanup_hook_handle </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">remove_handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] remove_handle</code>: <a href="/ja/nodejs/api/n-api#napi-add-async-cleanup-hook"><code>napi_add_async_cleanup_hook</code></a> で作成された非同期クリーンアップフックのハンドル。</li></ul><p><code>remove_handle</code> に対応するクリーンアップフックの登録を解除します。 これにより、フックがすでに実行を開始している場合を除き、フックの実行が防止されます。 これは、<a href="/ja/nodejs/api/n-api#napi-add-async-cleanup-hook"><code>napi_add_async_cleanup_hook</code></a> から取得したすべての <code>napi_async_cleanup_hook_handle</code> 値に対して呼び出す必要があります。</p><h3 id="finalization-on-the-exit-of-the-nodejs-environment" tabindex="-1">Node.js 環境終了時のファイナライゼーション <a class="header-anchor" href="#finalization-on-the-exit-of-the-nodejs-environment" aria-label="Permalink to “Node.js 環境終了時のファイナライゼーション”">​</a></h3><p>Node.js 環境は、JavaScript の実行が禁止されるとすぐに、<a href="/ja/nodejs/api/worker_threads#workerterminate"><code>worker.terminate()</code></a> のリクエストのように、任意のタイミングで可能な限り早く破棄される可能性があります。 環境が破棄されるとき、JavaScript オブジェクト、スレッドセーフ関数、および環境インスタンスデータに登録されている <code>napi_finalize</code> コールバックは、即座に独立して呼び出されます。</p><p><code>napi_finalize</code> コールバックの呼び出しは、手動で登録されたクリーンアップフックの後にスケジュールされます。 環境のシャットダウン中にアドオンのファイナライゼーションが適切な順序で行われ、<code>napi_finalize</code> コールバックでの使用後解放を回避するために、アドオンは <code>napi_add_env_cleanup_hook</code> および <code>napi_add_async_cleanup_hook</code> を使用してクリーンアップフックを登録し、割り当てられたリソースを適切な順序で手動で解放する必要があります。</p><h2 id="module-registration" tabindex="-1">モジュールの登録 <a class="header-anchor" href="#module-registration" aria-label="Permalink to “モジュールの登録”">​</a></h2><p>Node-API モジュールは、他のモジュールと同様の方法で登録されます。ただし、<code>NODE_MODULE</code> マクロの代わりに、次のものが使用されます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NAPI_MODULE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NODE_GYP_MODULE_NAME, Init)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>次の違いは、<code>Init</code> メソッドのシグネチャです。 Node-API モジュールの場合、次のようになります。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>Init</code> からの戻り値は、モジュールの <code>exports</code> オブジェクトとして扱われます。 <code>Init</code> メソッドには、便宜上 <code>exports</code> パラメータを介して空のオブジェクトが渡されます。 <code>Init</code> が <code>NULL</code> を返す場合、<code>exports</code> として渡されたパラメータがモジュールによってエクスポートされます。 Node-API モジュールは <code>module</code> オブジェクトを変更できませんが、モジュールの <code>exports</code> プロパティとして任意のもの指定できます。</p><p>アドオンによって提供されるメソッドとして呼び出すことができるように、メソッド <code>hello</code> を関数として追加するには:</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_status status;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_property_descriptor desc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Method,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    napi_writable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_enumerable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_configurable,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    NULL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_define_properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, exports, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">desc);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exports;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>アドオンの <code>require()</code> によって返される関数を設定するには:</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_value method;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_status status;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, NAPI_AUTO_LENGTH, Method, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">method);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>新しいインスタンスを作成できるようにクラスを定義するには（<a href="/ja/nodejs/api/n-api#object-wrap">オブジェクトのラップ</a> でよく使用されます）:</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注: 部分的な例であり、参照されているコードがすべて含まれているわけではありません</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_status status;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_property_descriptor properties</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, GetValue, SetValue, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_writable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_configurable, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DECLARE_NAPI_METHOD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;plusOne&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, PlusOne),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DECLARE_NAPI_METHOD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiply&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Multiply),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_value cons;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      napi_define_class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyObject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, New, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, properties, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cons);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_reference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, cons, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">constructor);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_set_named_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, exports, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyObject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cons);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exports;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><code>NAPI_MODULE_INIT</code> マクロを使用することもできます。これは <code>NAPI_MODULE</code> の省略形として機能し、<code>Init</code> 関数を定義します。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NAPI_MODULE_INIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* napi_env env, napi_value exports */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_value answer;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_status result;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">answer);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_set_named_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, exports, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;answer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, answer);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exports;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>パラメータ <code>env</code> および <code>exports</code> は、<code>NAPI_MODULE_INIT</code> マクロの本体に提供されます。</p><p>すべての Node-API アドオンはコンテキスト認識型です。つまり、複数回ロードされる可能性があります。 このようなモジュールを宣言する際には、いくつかの設計上の考慮事項があります。<a href="/ja/nodejs/api/addons#context-aware-addons">コンテキスト認識アドオン</a> に関するドキュメントでは、詳細について説明します。</p><p>マクロの呼び出し後、変数 <code>env</code> および <code>exports</code> は関数本体内で使用可能になります。</p><p>オブジェクトのプロパティの設定の詳細については、<a href="/ja/nodejs/api/n-api#working-with-javascript-properties">JavaScript プロパティの操作</a> のセクションを参照してください。</p><p>一般的にアドオンモジュールを構築する方法の詳細については、既存の API を参照してください。</p><h2 id="working-with-javascript-values" tabindex="-1">JavaScript 値の操作 <a class="header-anchor" href="#working-with-javascript-values" aria-label="Permalink to “JavaScript 値の操作”">​</a></h2><p>Node-API は、すべての種類の JavaScript 値を作成するための一連の API を公開しています。これらの型のいくつかは、<a href="https://tc39.github.io/ecma262/" target="_blank" rel="noreferrer">ECMAScript 言語仕様</a> の <a href="https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values" target="_blank" rel="noreferrer">セクション 6</a> で文書化されています。</p><p>基本的に、これらの API は次のいずれかを行うために使用されます。</p><p>Node-API 値は、型 <code>napi_value</code> で表されます。JavaScript 値を必要とする Node-API 呼び出しは、<code>napi_value</code> を受け取ります。場合によっては、API は <code>napi_value</code> の型を事前にチェックします。ただし、パフォーマンスを向上させるには、問題の <code>napi_value</code> が API によって予期される JavaScript 型であることを呼び出し元が確認する方が良いでしょう。</p><h3 id="enum-types" tabindex="-1">Enum 型 <a class="header-anchor" href="#enum-types" aria-label="Permalink to “Enum 型”">​</a></h3><h4 id="napi_key_collection_mode" tabindex="-1"><code>napi_key_collection_mode</code> <a class="header-anchor" href="#napi_key_collection_mode" aria-label="Permalink to “napi_key_collection_mode”">​</a></h4><p><strong>追加: v13.7.0, v12.17.0, v10.20.0</strong></p><p><strong>N-API バージョン: 6</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_key_include_prototypes,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_key_own_only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_key_collection_mode;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>Keys/Properties</code> フィルタ enum を記述します。</p><p><code>napi_key_collection_mode</code> は、収集されるプロパティの範囲を制限します。</p><p><code>napi_key_own_only</code> は、収集されるプロパティを与えられたオブジェクトのみに制限します。 <code>napi_key_include_prototypes</code> は、オブジェクトのプロトタイプチェーンのすべてのキーも含まれます。</p><h4 id="napi_key_filter" tabindex="-1"><code>napi_key_filter</code> <a class="header-anchor" href="#napi_key_filter" aria-label="Permalink to “napi_key_filter”">​</a></h4><p><strong>追加: v13.7.0, v12.17.0, v10.20.0</strong></p><p><strong>N-API バージョン: 6</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_key_all_properties </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_key_writable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_key_enumerable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_key_configurable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_key_skip_strings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_key_skip_symbols </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_key_filter;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>プロパティフィルタビット。これらは、複合フィルタを構築するために or 演算できます。</p><h4 id="napi_key_conversion" tabindex="-1"><code>napi_key_conversion</code> <a class="header-anchor" href="#napi_key_conversion" aria-label="Permalink to “napi_key_conversion”">​</a></h4><p><strong>追加: v13.7.0, v12.17.0, v10.20.0</strong></p><p><strong>N-API バージョン: 6</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_key_keep_numbers,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_key_numbers_to_strings</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_key_conversion;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>napi_key_numbers_to_strings</code> は、整数のインデックスを文字列に変換します。 <code>napi_key_keep_numbers</code> は、整数のインデックスに対して数値を返します。</p><h4 id="napi_valuetype" tabindex="-1"><code>napi_valuetype</code> <a class="header-anchor" href="#napi_valuetype" aria-label="Permalink to “napi_valuetype”">​</a></h4><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ES6 型 (typeof に対応)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_undefined,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_null,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_boolean,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_number,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_string,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_symbol,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_object,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_function,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_external,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_bigint,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_valuetype;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>napi_value</code> の型を記述します。これは通常、ECMAScript 言語仕様の <a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types" target="_blank" rel="noreferrer">セクション 6.1</a> で説明されている型に対応します。そのセクションの型に加えて、<code>napi_valuetype</code> は、外部データを持つ <code>Function</code> と <code>Object</code> も表すことができます。</p><p>型 <code>napi_external</code> の JavaScript 値は、プロパティを設定できず、プロトタイプがないプレーンオブジェクトとして JavaScript に表示されます。</p><h4 id="napi_typedarray_type" tabindex="-1"><code>napi_typedarray_type</code> <a class="header-anchor" href="#napi_typedarray_type" aria-label="Permalink to “napi_typedarray_type”">​</a></h4><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_int8_array,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_uint8_array,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_uint8_clamped_array,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_int16_array,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_uint16_array,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_int32_array,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_uint32_array,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_float32_array,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_float64_array,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_bigint64_array,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_biguint64_array,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_typedarray_type;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>これは、<code>TypedArray</code>の基となるバイナリスカラーデータ型を表します。このenumの要素は、<a href="https://tc39.github.io/ecma262/" target="_blank" rel="noreferrer">ECMAScript Language Specification</a>の<a href="https://tc39.github.io/ecma262/#sec-typedarray-objects" target="_blank" rel="noreferrer">Section 22.2</a>に対応しています。</p><h3 id="object-creation-functions" tabindex="-1">オブジェクト作成関数 <a class="header-anchor" href="#object-creation-functions" aria-label="Permalink to “オブジェクト作成関数”">​</a></h3><h4 id="napi_create_array" tabindex="-1"><code>napi_create_array</code> <a class="header-anchor" href="#napi_create_array" aria-label="Permalink to “napi_create_array”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが実行される環境。</li><li><code>[out] result</code>: JavaScript <code>Array</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、JavaScript <code>Array</code>型に対応するNode-API値を返します。JavaScript配列は、ECMAScript Language Specificationの<a href="https://tc39.github.io/ecma262/#sec-array-objects" target="_blank" rel="noreferrer">Section 22.1</a>で説明されています。</p><h4 id="napi_create_array_with_length" tabindex="-1"><code>napi_create_array_with_length</code> <a class="header-anchor" href="#napi_create_array_with_length" aria-label="Permalink to “napi_create_array_with_length”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_array_with_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                          size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                          napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが実行される環境。</li><li><code>[in] length</code>: <code>Array</code>の初期の長さ。</li><li><code>[out] result</code>: JavaScript <code>Array</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、JavaScript <code>Array</code>型に対応するNode-API値を返します。<code>Array</code>のlengthプロパティは、渡されたlengthパラメータに設定されます。ただし、配列が作成されたときに、基になるバッファがVMによって事前に割り当てられることは保証されません。その動作は、基になるVM実装に委ねられます。バッファがCを介して直接読み取りおよび/または書き込み可能な連続したメモリブロックである必要がある場合は、<a href="/ja/nodejs/api/n-api#napi-create-external-arraybuffer"><code>napi_create_external_arraybuffer</code></a>の使用を検討してください。</p><p>JavaScript配列は、ECMAScript Language Specificationの<a href="https://tc39.github.io/ecma262/#sec-array-objects" target="_blank" rel="noreferrer">Section 22.1</a>で説明されています。</p><h4 id="napi_create_arraybuffer" tabindex="-1"><code>napi_create_arraybuffer</code> <a class="header-anchor" href="#napi_create_arraybuffer" aria-label="Permalink to “napi_create_arraybuffer”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> byte_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが起動される環境。</li><li><code>[in] length</code>: 作成する配列バッファーのバイト単位の長さ。</li><li><code>[out] data</code>: <code>ArrayBuffer</code>の基礎となるバイトバッファーへのポインター。 <code>data</code>はオプションで、<code>NULL</code>を渡すことで無視できます。</li><li><code>[out] result</code>: JavaScriptの<code>ArrayBuffer</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、JavaScriptの<code>ArrayBuffer</code>に対応するNode-API値を返します。 <code>ArrayBuffer</code>は、固定長のバイナリデータバッファーを表すために使用されます。 通常、<code>TypedArray</code>オブジェクトのバッキングバッファーとして使用されます。 割り当てられた<code>ArrayBuffer</code>は、渡された<code>length</code>パラメーターによってサイズが決定される基礎となるバイトバッファーを持ちます。 基礎となるバッファーは、呼び出し元がバッファーを直接操作したい場合に備えて、オプションで呼び出し元に返されます。 このバッファーは、ネイティブコードからのみ直接書き込むことができます。 JavaScriptからこのバッファーに書き込むには、型付き配列または<code>DataView</code>オブジェクトを作成する必要があります。</p><p>JavaScriptの<code>ArrayBuffer</code>オブジェクトについては、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-arraybuffer-objects" target="_blank" rel="noreferrer">セクション24.1</a>で説明されています。</p><h4 id="napi_create_buffer" tabindex="-1"><code>napi_create_buffer</code> <a class="header-anchor" href="#napi_create_buffer" aria-label="Permalink to “napi_create_buffer”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                               size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                               void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが起動される環境。</li><li><code>[in] size</code>: 基礎となるバッファーのバイト単位のサイズ。</li><li><code>[out] data</code>: 基礎となるバッファーへの生のポインター。 <code>data</code>はオプションで、<code>NULL</code>を渡すことで無視できます。</li><li><code>[out] result</code>: <code>node::Buffer</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、<code>node::Buffer</code>オブジェクトを割り当てます。 これはまだ完全にサポートされているデータ構造ですが、ほとんどの場合、<code>TypedArray</code>を使用すれば十分です。</p><h4 id="napi_create_buffer_copy" tabindex="-1"><code>napi_create_buffer_copy</code> <a class="header-anchor" href="#napi_create_buffer_copy" aria-label="Permalink to “napi_create_buffer_copy”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_buffer_copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] size</code>: 入力バッファのサイズ（バイト単位）（新しいバッファのサイズと同じである必要があります）。</li><li><code>[in] data</code>: コピー元の基になるバッファへの生のポインター。</li><li><code>[out] result_data</code>: 新しい <code>Buffer</code> の基になるデータバッファへのポインター。<code>result_data</code> は、オプションで <code>NULL</code> を渡すことで無視できます。</li><li><code>[out] result</code>: <code>node::Buffer</code> を表す <code>napi_value</code> 。</li></ul><p>APIが成功した場合 <code>napi_ok</code> を返します。</p><p>このAPIは <code>node::Buffer</code> オブジェクトを割り当て、渡されたバッファからコピーされたデータで初期化します。これは完全にサポートされているデータ構造ですが、ほとんどの場合 <code>TypedArray</code> を使用すれば十分です。</p><h4 id="napi_create_date" tabindex="-1"><code>napi_create_date</code> <a class="header-anchor" href="#napi_create_date" aria-label="Permalink to “napi_create_date”">​</a></h4><p><strong>Added in: v11.11.0, v10.17.0</strong></p><p><strong>N-API version: 5</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] time</code>: 1970年1月1日UTCからのミリ秒単位のECMAScript時間値。</li><li><code>[out] result</code>: JavaScriptの <code>Date</code> を表す <code>napi_value</code> 。</li></ul><p>APIが成功した場合 <code>napi_ok</code> を返します。</p><p>このAPIはうるう秒を観測しません。ECMAScriptはPOSIX時間仕様に準拠しているため、無視されます。</p><p>このAPIはJavaScriptの <code>Date</code> オブジェクトを割り当てます。</p><p>JavaScriptの <code>Date</code> オブジェクトは、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-date-objects" target="_blank" rel="noreferrer">セクション20.3</a>で説明されています。</p><h4 id="napi_create_external" tabindex="-1"><code>napi_create_external</code> <a class="header-anchor" href="#napi_create_external" aria-label="Permalink to “napi_create_external”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_finalize </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">finalize_cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> finalize_hint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] data</code>: 外部データへの生のポインター。</li><li><code>[in] finalize_cb</code>: 外部値が収集されているときに呼び出すオプションのコールバック。<a href="/ja/nodejs/api/n-api#napi-finalize"><code>napi_finalize</code></a> は詳細を提供します。</li><li><code>[in] finalize_hint</code>: コレクション中にfinalizeコールバックに渡すオプションのヒント。</li><li><code>[out] result</code>: 外部値を表す <code>napi_value</code> 。</li></ul><p>APIが成功した場合 <code>napi_ok</code> を返します。</p><p>このAPIは、外部データが添付されたJavaScript値を割り当てます。これは、JavaScriptコードを介して外部データを渡し、後で <a href="/ja/nodejs/api/n-api#napi-get-value-external"><code>napi_get_value_external</code></a> を使用してネイティブコードで取得するために使用されます。</p><p>このAPIは、作成されたJavaScriptオブジェクトがガベージコレクションされたときに呼び出される <code>napi_finalize</code> コールバックを追加します。</p><p>作成された値はオブジェクトではないため、追加のプロパティをサポートしていません。これは個別の値の型と見なされます。外部値で <code>napi_typeof()</code> を呼び出すと <code>napi_external</code> が生成されます。</p><h4 id="napi_create_external_arraybuffer" tabindex="-1"><code>napi_create_external_arraybuffer</code> <a class="header-anchor" href="#napi_create_external_arraybuffer" aria-label="Permalink to “napi_create_external_arraybuffer”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_external_arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> external_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> byte_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_finalize </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">finalize_cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> finalize_hint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] external_data</code>: <code>ArrayBuffer</code>の基となるバイトバッファへのポインタ。</li><li><code>[in] byte_length</code>: 基となるバッファのバイト単位の長さ。</li><li><code>[in] finalize_cb</code>: <code>ArrayBuffer</code>が回収される際に呼び出されるオプションのコールバック。 <a href="/ja/nodejs/api/n-api#napi-finalize"><code>napi_finalize</code></a> で詳細を確認してください。</li><li><code>[in] finalize_hint</code>: 回収中にファイナライズコールバックに渡すオプションのヒント。</li><li><code>[out] result</code>: JavaScriptの<code>ArrayBuffer</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p><strong>Node.js以外のいくつかのランタイムでは、外部バッファのサポートが削除されています。</strong> Node.js以外のランタイムでは、このメソッドは外部バッファがサポートされていないことを示すために<code>napi_no_external_buffers_allowed</code>を返すことがあります。 そのようなランタイムの1つは、このissue <a href="https://github.com/electron/electron/issues/35801" target="_blank" rel="noreferrer">electron/issues/35801</a> で説明されているElectronです。</p><p>すべてのランタイムとの幅広い互換性を維持するために、node-apiヘッダーのインクルード前にアドオンで<code>NODE_API_NO_EXTERNAL_BUFFERS_ALLOWED</code>を定義できます。 そうすることで、外部バッファを作成する2つの関数が非表示になります。 これにより、誤ってこれらのメソッドのいずれかを使用した場合にコンパイルエラーが発生することが保証されます。</p><p>このAPIは、JavaScriptの<code>ArrayBuffer</code>に対応するNode-API値を返します。 <code>ArrayBuffer</code>の基となるバイトバッファは外部で割り当てられ、管理されます。 呼び出し元は、ファイナライズコールバックが呼び出されるまで、バイトバッファが有効なままであることを確認する必要があります。</p><p>このAPIは、作成されたJavaScriptオブジェクトがガベージコレクションされたときに呼び出される<code>napi_finalize</code>コールバックを追加します。</p><p>JavaScriptの<code>ArrayBuffer</code>は、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-arraybuffer-objects" target="_blank" rel="noreferrer">セクション24.1</a>で説明されています。</p><h4 id="napi_create_external_buffer" tabindex="-1"><code>napi_create_external_buffer</code> <a class="header-anchor" href="#napi_create_external_buffer" aria-label="Permalink to “napi_create_external_buffer”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p><strong>N-API バージョン:</strong> 1</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_external_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                        napi_finalize </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">finalize_cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> finalize_hint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                        napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] length</code>: 入力バッファのバイト単位のサイズ (新しいバッファのサイズと同じである必要があります)。</li><li><code>[in] data</code>: JavaScript に公開する基盤となるバッファへの生のポインタ。</li><li><code>[in] finalize_cb</code>: <code>ArrayBuffer</code> が回収されるときに呼び出されるオプションのコールバック。 <a href="/ja/nodejs/api/n-api#napi-finalize"><code>napi_finalize</code></a> で詳細を確認してください。</li><li><code>[in] finalize_hint</code>: 回収時に finalize コールバックに渡すオプションのヒント。</li><li><code>[out] result</code>: <code>node::Buffer</code> を表す <code>napi_value</code>。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p><strong>Node.js 以外のいくつかのランタイムでは、外部バッファのサポートが廃止されています。</strong> Node.js 以外のランタイムでは、このメソッドは、外部バッファがサポートされていないことを示すために <code>napi_no_external_buffers_allowed</code> を返す場合があります。 このようなランタイムの 1 つは、この問題 <a href="https://github.com/electron/electron/issues/35801" target="_blank" rel="noreferrer">electron/issues/35801</a> に記載されている Electron です。</p><p>すべてのランタイムとの最大の互換性を維持するために、node-api ヘッダーのインクルードの前に、アドオンで <code>NODE_API_NO_EXTERNAL_BUFFERS_ALLOWED</code> を定義することができます。 そうすることで、外部バッファを作成する 2 つの関数が非表示になります。 これにより、誤ってこれらのメソッドのいずれかを使用すると、コンパイルエラーが発生することが保証されます。</p><p>この API は <code>node::Buffer</code> オブジェクトを割り当て、渡されたバッファによってバックアップされたデータで初期化します。 これは依然として完全にサポートされているデータ構造ですが、ほとんどの場合、<code>TypedArray</code> を使用すれば十分です。</p><p>この API は、作成された JavaScript オブジェクトがガベージコレクションされたときに呼び出される <code>napi_finalize</code> コールバックを追加します。</p><p>Node.js &gt;=4 の場合、<code>Buffers</code> は <code>Uint8Array</code> です。</p><h4 id="napi_create_object" tabindex="-1"><code>napi_create_object</code> <a class="header-anchor" href="#napi_create_object" aria-label="Permalink to “napi_create_object”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[out] result</code>: JavaScriptの<code>Object</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、デフォルトのJavaScript <code>Object</code>を割り当てます。 これは、JavaScriptで <code>new Object()</code> を実行するのと同じです。</p><p>JavaScriptの<code>Object</code>型は、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-object-type" target="_blank" rel="noreferrer">セクション6.1.7</a>で説明されています。</p><h4 id="napi_create_symbol" tabindex="-1"><code>napi_create_symbol</code> <a class="header-anchor" href="#napi_create_symbol" aria-label="Permalink to “napi_create_symbol”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] description</code>: シンボルの説明として設定されるJavaScript <code>string</code>を参照するオプションの<code>napi_value</code>。</li><li><code>[out] result</code>: JavaScriptの<code>symbol</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、UTF8エンコードされたC文字列からJavaScriptの<code>symbol</code>値を作成します。</p><p>JavaScriptの<code>symbol</code>型は、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-symbol-objects" target="_blank" rel="noreferrer">セクション19.4</a>で説明されています。</p><h4 id="node_api_symbol_for" tabindex="-1"><code>node_api_symbol_for</code> <a class="header-anchor" href="#node_api_symbol_for" aria-label="Permalink to “node_api_symbol_for”">​</a></h4><p><strong>Added in: v17.5.0, v16.15.0</strong></p><p><strong>N-API version: 9</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_api_symbol_for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> utf8description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] utf8description</code>: シンボルの説明として使用されるテキストを表すUTF-8 C文字列。</li><li><code>[in] length</code>: 説明文字列の長さ（バイト単位）。null終端の場合は<code>NAPI_AUTO_LENGTH</code>。</li><li><code>[out] result</code>: JavaScriptの<code>symbol</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、指定された説明を持つ既存のシンボルをグローバルレジストリで検索します。 シンボルがすでに存在する場合はそれが返され、存在しない場合はレジストリに新しいシンボルが作成されます。</p><p>JavaScriptの<code>symbol</code>型は、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-symbol-objects" target="_blank" rel="noreferrer">セクション19.4</a>で説明されています。</p><h4 id="napi_create_typedarray" tabindex="-1"><code>napi_create_typedarray</code> <a class="header-anchor" href="#napi_create_typedarray" aria-label="Permalink to “napi_create_typedarray”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_typedarray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_typedarray_type </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                   size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                   size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> byte_offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] type</code>: <code>TypedArray</code>内の要素のスカラーデータ型。</li><li><code>[in] length</code>: <code>TypedArray</code>内の要素数。</li><li><code>[in] arraybuffer</code>: 型付き配列の基礎となる<code>ArrayBuffer</code>。</li><li><code>[in] byte_offset</code>: <code>TypedArray</code>の投影を開始する<code>ArrayBuffer</code>内のバイトオフセット。</li><li><code>[out] result</code>: JavaScriptの<code>TypedArray</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、既存の<code>ArrayBuffer</code>上にJavaScriptの<code>TypedArray</code>オブジェクトを作成します。<code>TypedArray</code>オブジェクトは、各要素が同じ基礎となるバイナリスカラーデータ型を持つ、基礎となるデータバッファー上の配列のようなビューを提供します。</p><p><code>(length * size_of_element) + byte_offset</code>が、渡された配列のバイトサイズ以下である必要があります。そうでない場合、<code>RangeError</code>例外が発生します。</p><p>JavaScriptの<code>TypedArray</code>オブジェクトは、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-typedarray-objects" target="_blank" rel="noreferrer">セクション22.2</a>で説明されています。</p><h4 id="node_api_create_buffer_from_arraybuffer" tabindex="-1"><code>node_api_create_buffer_from_arraybuffer</code> <a class="header-anchor" href="#node_api_create_buffer_from_arraybuffer" aria-label="Permalink to “node_api_create_buffer_from_arraybuffer”">​</a></h4><p><strong>Added in: v23.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status NAPI_CDECL </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_api_create_buffer_from_arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                              napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                              size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> byte_offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                              size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> byte_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                              napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><strong><code>[in] env</code></strong>: APIが呼び出される環境。</li><li><strong><code>[in] arraybuffer</code></strong>: バッファーの作成元となる <code>ArrayBuffer</code>。</li><li><strong><code>[in] byte_offset</code></strong>: バッファーの作成を開始する <code>ArrayBuffer</code> 内のバイトオフセット。</li><li><strong><code>[in] byte_length</code></strong>: <code>ArrayBuffer</code> から作成するバッファーのバイト単位の長さ。</li><li><strong><code>[out] result</code></strong>: 作成された JavaScript <code>Buffer</code> オブジェクトを表す <code>napi_value</code>。</li></ul><p>APIが成功した場合、<code>napi_ok</code> を返します。</p><p>このAPIは、既存の <code>ArrayBuffer</code> から JavaScript <code>Buffer</code> オブジェクトを作成します。 <code>Buffer</code> オブジェクトは Node.js 固有のクラスであり、JavaScript でバイナリデータを直接操作する方法を提供します。</p><p>バイト範囲 <code>[byte_offset, byte_offset + byte_length)</code> は、<code>ArrayBuffer</code> の範囲内になければなりません。 <code>byte_offset + byte_length</code> が <code>ArrayBuffer</code> のサイズを超える場合、<code>RangeError</code> 例外が発生します。</p><h4 id="napi_create_dataview" tabindex="-1"><code>napi_create_dataview</code> <a class="header-anchor" href="#napi_create_dataview" aria-label="Permalink to “napi_create_dataview”">​</a></h4><p><strong>Added in: v8.3.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_dataview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> byte_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> byte_offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] length</code>: <code>DataView</code> 内の要素数。</li><li><code>[in] arraybuffer</code>: <code>DataView</code> の基となる <code>ArrayBuffer</code>。</li><li><code>[in] byte_offset</code>: <code>DataView</code> の投影を開始する <code>ArrayBuffer</code> 内のバイトオフセット。</li><li><code>[out] result</code>: JavaScript の <code>DataView</code> を表す <code>napi_value</code>。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>このAPIは、既存の <code>ArrayBuffer</code> 上に JavaScript の <code>DataView</code> オブジェクトを作成します。<code>DataView</code> オブジェクトは、基となるデータバッファに対する配列のようなビューを提供しますが、<code>ArrayBuffer</code> 内のさまざまなサイズと型の項目を許可するものです。</p><p><code>byte_length + byte_offset</code> が渡された配列のバイト単位のサイズ以下であることが必要です。そうでない場合、<code>RangeError</code> 例外が発生します。</p><p>JavaScript の <code>DataView</code> オブジェクトは、ECMAScript 言語仕様の <a href="https://tc39.github.io/ecma262/#sec-dataview-objects" target="_blank" rel="noreferrer">Section 24.3</a> で説明されています。</p><h3 id="functions-to-convert-from-c-types-to-node-api" tabindex="-1">C型からNode-APIに変換する関数 <a class="header-anchor" href="#functions-to-convert-from-c-types-to-node-api" aria-label="Permalink to “C型からNode-APIに変換する関数”">​</a></h3><h4 id="napi_create_int32" tabindex="-1"><code>napi_create_int32</code> <a class="header-anchor" href="#napi_create_int32" aria-label="Permalink to “napi_create_int32”">​</a></h4><p><strong>Added in: v8.4.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: JavaScript で表現される整数値。</li><li><code>[out] result</code>: JavaScript の <code>number</code> を表す <code>napi_value</code>。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>このAPIは、C の <code>int32_t</code> 型から JavaScript の <code>number</code> 型への変換に使用されます。</p><p>JavaScript の <code>number</code> 型は、ECMAScript 言語仕様の <a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type" target="_blank" rel="noreferrer">Section 6.1.6</a> で説明されています。</p><h4 id="napi_create_uint32" tabindex="-1"><code>napi_create_uint32</code> <a class="header-anchor" href="#napi_create_uint32" aria-label="Permalink to “napi_create_uint32”">​</a></h4><p><strong>Added in: v8.4.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_uint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: API が起動される環境。</li><li><code>[in] value</code>: JavaScript で表現される符号なし整数値。</li><li><code>[out] result</code>: JavaScript の <code>number</code> を表す <code>napi_value</code>。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この API は、C の <code>uint32_t</code> 型から JavaScript の <code>number</code> 型に変換するために使用されます。</p><p>JavaScript の <code>number</code> 型は、ECMAScript 言語仕様の<a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type" target="_blank" rel="noreferrer">セクション 6.1.6</a>で説明されています。</p><h4 id="napi_create_int64" tabindex="-1"><code>napi_create_int64</code> <a class="header-anchor" href="#napi_create_int64" aria-label="Permalink to “napi_create_int64”">​</a></h4><p><strong>Added in: v8.4.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: API が起動される環境。</li><li><code>[in] value</code>: JavaScript で表現される整数値。</li><li><code>[out] result</code>: JavaScript の <code>number</code> を表す <code>napi_value</code>。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この API は、C の <code>int64_t</code> 型から JavaScript の <code>number</code> 型に変換するために使用されます。</p><p>JavaScript の <code>number</code> 型は、ECMAScript 言語仕様の<a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type" target="_blank" rel="noreferrer">セクション 6.1.6</a>で説明されています。 <code>int64_t</code> の完全な範囲は JavaScript で完全な精度で表現できないことに注意してください。 <a href="https://tc39.github.io/ecma262/#sec-number.min_safe_integer" target="_blank" rel="noreferrer"><code>Number.MIN_SAFE_INTEGER</code></a> <code>-(2**53 - 1)</code> - <a href="https://tc39.github.io/ecma262/#sec-number.max_safe_integer" target="_blank" rel="noreferrer"><code>Number.MAX_SAFE_INTEGER</code></a> <code>(2**53 - 1)</code> の範囲外の整数値は精度が失われます。</p><h4 id="napi_create_double" tabindex="-1"><code>napi_create_double</code> <a class="header-anchor" href="#napi_create_double" aria-label="Permalink to “napi_create_double”">​</a></h4><p><strong>Added in: v8.4.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: API が起動される環境。</li><li><code>[in] value</code>: JavaScript で表現される倍精度値。</li><li><code>[out] result</code>: JavaScript の <code>number</code> を表す <code>napi_value</code>。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この API は、C の <code>double</code> 型から JavaScript の <code>number</code> 型に変換するために使用されます。</p><p>JavaScript の <code>number</code> 型は、ECMAScript 言語仕様の<a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type" target="_blank" rel="noreferrer">セクション 6.1.6</a>で説明されています。</p><h4 id="napi_create_bigint_int64" tabindex="-1"><code>napi_create_bigint_int64</code> <a class="header-anchor" href="#napi_create_bigint_int64" aria-label="Permalink to “napi_create_bigint_int64”">​</a></h4><p><strong>Added in: v10.7.0</strong></p><p><strong>N-API version: 6</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_bigint_int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     int64_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                     napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: JavaScriptで表現される整数値。</li><li><code>[out] result</code>: JavaScriptの<code>BigInt</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、Cの<code>int64_t</code>型をJavaScriptの<code>BigInt</code>型に変換します。</p><h4 id="napi_create_bigint_uint64" tabindex="-1"><code>napi_create_bigint_uint64</code> <a class="header-anchor" href="#napi_create_bigint_uint64" aria-label="Permalink to “napi_create_bigint_uint64”">​</a></h4><p><strong>Added in: v10.7.0</strong></p><p><strong>N-API version: 6</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_bigint_uint64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      uint64_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                      napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: JavaScriptで表現される符号なし整数値。</li><li><code>[out] result</code>: JavaScriptの<code>BigInt</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、Cの<code>uint64_t</code>型をJavaScriptの<code>BigInt</code>型に変換します。</p><h4 id="napi_create_bigint_words" tabindex="-1"><code>napi_create_bigint_words</code> <a class="header-anchor" href="#napi_create_bigint_words" aria-label="Permalink to “napi_create_bigint_words”">​</a></h4><p><strong>Added in: v10.7.0</strong></p><p><strong>N-API version: 6</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_bigint_words</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sign_bit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> word_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint64_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> words</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                     napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] sign_bit</code>: 結果の<code>BigInt</code>が正か負かを決定します。</li><li><code>[in] word_count</code>: <code>words</code>配列の長さ。</li><li><code>[in] words</code>: <code>uint64_t</code>のリトルエンディアン64ビットワードの配列。</li><li><code>[out] result</code>: JavaScriptの<code>BigInt</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、符号なし64ビットワードの配列を単一の<code>BigInt</code>値に変換します。</p><p>結果の<code>BigInt</code>は、次のように計算されます: (–1) (<code>words[0]</code> × (2) + <code>words[1]</code> × (2) + …)</p><h4 id="napi_create_string_latin1" tabindex="-1"><code>napi_create_string_latin1</code> <a class="header-anchor" href="#napi_create_string_latin1" aria-label="Permalink to “napi_create_string_latin1”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p><strong>N-API バージョン:</strong> 1</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_string_latin1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                      napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: API が起動される環境。</li><li><code>[in] str</code>: ISO-8859-1 エンコードされた文字列を表す文字バッファー。</li><li><code>[in] length</code>: 文字列のバイト単位の長さ。null 終端されている場合は <code>NAPI_AUTO_LENGTH</code>。</li><li><code>[out] result</code>: JavaScript の <code>string</code> を表す <code>napi_value</code>。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この API は、ISO-8859-1 エンコードされた C 文字列から JavaScript の <code>string</code> 値を作成します。 ネイティブ文字列はコピーされます。</p><p>JavaScript の <code>string</code> 型は、ECMAScript 言語仕様の <a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type" target="_blank" rel="noreferrer">セクション 6.1.4</a> で説明されています。</p><h4 id="node_api_create_external_string_latin1" tabindex="-1"><code>node_api_create_external_string_latin1</code> <a class="header-anchor" href="#node_api_create_external_string_latin1" aria-label="Permalink to “node_api_create_external_string_latin1”">​</a></h4><p><strong>追加:</strong> v20.4.0, v18.18.0</p><div class="warning custom-block"><p class="custom-block-title">[安定: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 試験的</p></div><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_api_create_external_string_latin1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                       char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                       size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                       napi_finalize </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">finalize_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                       void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> finalize_hint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                       napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                       bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> copied</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><p><code>[in] env</code>: API が起動される環境。</p></li><li><p><code>[in] str</code>: ISO-8859-1 エンコードされた文字列を表す文字バッファー。</p></li><li><p><code>[in] length</code>: 文字列のバイト単位の長さ。null 終端されている場合は <code>NAPI_AUTO_LENGTH</code>。</p></li><li><p><code>[in] finalize_callback</code>: 文字列が回収されるときに呼び出す関数。 この関数は、次のパラメータで呼び出されます。</p><ul><li><code>[in] env</code>: アドオンが実行されている環境。 文字列がワーカーまたはメインの Node.js インスタンスの終了の一部として回収されている場合、この値は null になることがあります。</li><li><code>[in] data</code>: これは <code>void*</code> ポインターとしての値 <code>str</code> です。</li><li><code>[in] finalize_hint</code>: これは、API に与えられた値 <code>finalize_hint</code> です。 <a href="/ja/nodejs/api/n-api#napi-finalize"><code>napi_finalize</code></a> に詳細が記載されています。 このパラメータはオプションです。 null 値を渡すことは、対応する JavaScript 文字列が回収されるときにアドオンに通知する必要がないことを意味します。</li></ul></li><li><p><code>[in] finalize_hint</code>: 回収中にファイナライズコールバックに渡すオプションのヒント。</p></li><li><p><code>[out] result</code>: JavaScript の <code>string</code> を表す <code>napi_value</code>。</p></li><li><p><code>[out] copied</code>: 文字列がコピーされたかどうか。 コピーされた場合、ファイナライザーはすでに <code>str</code> を破棄するために呼び出されています。</p></li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この API は、ISO-8859-1 エンコードされた C 文字列から JavaScript の <code>string</code> 値を作成します。 ネイティブ文字列はコピーされない可能性があり、したがって、JavaScript 値のライフサイクル全体にわたって存在する必要があります。</p><p>JavaScript の <code>string</code> 型は、ECMAScript 言語仕様の <a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type" target="_blank" rel="noreferrer">セクション 6.1.4</a> で説明されています。</p><h4 id="napi_create_string_utf16" tabindex="-1"><code>napi_create_string_utf16</code> <a class="header-anchor" href="#napi_create_string_utf16" aria-label="Permalink to “napi_create_string_utf16”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p><strong>N-API バージョン:</strong> 1</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_string_utf16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> char16_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                     napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] str</code>: UTF16-LEエンコードされた文字列を表す文字バッファ。</li><li><code>[in] length</code>: 文字列の長さを2バイトコード単位で指定します。null終端の場合は<code>NAPI_AUTO_LENGTH</code>を指定します。</li><li><code>[out] result</code>: JavaScriptの<code>string</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、UTF16-LEエンコードされたC文字列からJavaScriptの<code>string</code>値を生成します。ネイティブ文字列はコピーされます。</p><p>JavaScriptの<code>string</code>型については、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type" target="_blank" rel="noreferrer">セクション6.1.4</a>で説明されています。</p><h4 id="node_api_create_external_string_utf16" tabindex="-1"><code>node_api_create_external_string_utf16</code> <a class="header-anchor" href="#node_api_create_external_string_utf16" aria-label="Permalink to “node_api_create_external_string_utf16”">​</a></h4><p><strong>追加:</strong> v20.4.0, v18.18.0</p><div class="warning custom-block"><p class="custom-block-title">[安定: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定: 1</a> - 試験的</p></div><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_api_create_external_string_utf16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                      char16_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                      napi_finalize </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">finalize_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> finalize_hint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                      napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> copied</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><p><code>[in] env</code>: APIが呼び出される環境。</p></li><li><p><code>[in] str</code>: UTF16-LEエンコードされた文字列を表す文字バッファ。</p></li><li><p><code>[in] length</code>: 文字列の長さを2バイトコード単位で指定します。null終端の場合は<code>NAPI_AUTO_LENGTH</code>を指定します。</p></li><li><p><code>[in] finalize_callback</code>: 文字列が回収されるときに呼び出される関数。 この関数は、次のパラメーターで呼び出されます。</p><ul><li><code>[in] env</code>: アドオンが実行されている環境。 この値は、ワーカーまたはメインのNode.jsインスタンスの終了の一部として文字列が収集されている場合は、nullになる場合があります。</li><li><code>[in] data</code>: これは、<code>str</code>が<code>void*</code>ポインターとして渡される値です。</li><li><code>[in] finalize_hint</code>: これは、APIに渡された<code>finalize_hint</code>の値です。 <a href="/ja/nodejs/api/n-api#napi-finalize"><code>napi_finalize</code></a>には詳細が記載されています。 このパラメータはオプションです。 null値を渡すと、対応するJavaScript文字列が収集されたときにアドオンに通知する必要がないことを意味します。</li></ul></li><li><p><code>[in] finalize_hint</code>: コレクション中にファイナライズコールバックに渡すオプションのヒント。</p></li><li><p><code>[out] result</code>: JavaScriptの<code>string</code>を表す<code>napi_value</code>。</p></li><li><p><code>[out] copied</code>: 文字列がコピーされたかどうか。 コピーされた場合、ファイナライザーはすでに呼び出されて<code>str</code>を破棄しています。</p></li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、UTF16-LEエンコードされたC文字列からJavaScriptの<code>string</code>値を生成します。 ネイティブ文字列はコピーされない場合があり、したがってJavaScript値のライフサイクル全体にわたって存在する必要があります。</p><p>JavaScriptの<code>string</code>型については、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type" target="_blank" rel="noreferrer">セクション6.1.4</a>で説明されています。</p><h4 id="napi_create_string_utf8" tabindex="-1"><code>napi_create_string_utf8</code> <a class="header-anchor" href="#napi_create_string_utf8" aria-label="Permalink to “napi_create_string_utf8”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_string_utf8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] str</code>: UTF8エンコードされた文字列を表す文字バッファ。</li><li><code>[in] length</code>: バイト単位の文字列長。null終端の場合は<code>NAPI_AUTO_LENGTH</code>。</li><li><code>[out] result</code>: JavaScriptの<code>string</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、UTF8エンコードされたC文字列からJavaScriptの<code>string</code>値を作成します。ネイティブ文字列はコピーされます。</p><p>JavaScriptの<code>string</code>型は、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type" target="_blank" rel="noreferrer">セクション6.1.4</a>で説明されています。</p><h3 id="functions-to-create-optimized-property-keys" tabindex="-1">最適化されたプロパティキーを作成する関数 <a class="header-anchor" href="#functions-to-create-optimized-property-keys" aria-label="Permalink to “最適化されたプロパティキーを作成する関数”">​</a></h3><p>V8を含む多くのJavaScriptエンジンは、内部化された文字列をプロパティ値を設定および取得するためのキーとして使用します。 それらは通常、ハッシュテーブルを使用してそのような文字列を作成およびルックアップします。 キーの作成ごとにコストが追加されますが、文字列全体ではなく文字列ポインタの比較を可能にすることで、その後のパフォーマンスが向上します。</p><p>新しいJavaScript文字列をプロパティキーとして使用する場合、一部のJavaScriptエンジンでは、このセクションの関数を使用する方が効率的です。 それ以外の場合は、<code>napi_create_string_utf8</code>または<code>node_api_create_external_string_utf8</code>シリーズの関数を使用してください。プロパティキーの作成メソッドで文字列を作成/格納する際に、追加のオーバーヘッドが発生する可能性があるためです。</p><h4 id="node_api_create_property_key_latin1" tabindex="-1"><code>node_api_create_property_key_latin1</code> <a class="header-anchor" href="#node_api_create_property_key_latin1" aria-label="Permalink to “node_api_create_property_key_latin1”">​</a></h4><p><strong>Added in: v22.9.0, v20.18.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 試験的</p></div><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status NAPI_CDECL </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_api_create_property_key_latin1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                           const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                           size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                           napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] str</code>: ISO-8859-1エンコードされた文字列を表す文字バッファ。</li><li><code>[in] length</code>: バイト単位の文字列長。null終端の場合は<code>NAPI_AUTO_LENGTH</code>。</li><li><code>[out] result</code>: オブジェクトのプロパティキーとして使用される、最適化されたJavaScriptの<code>string</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、オブジェクトのプロパティキーとして使用されるISO-8859-1エンコードされたC文字列から、最適化されたJavaScriptの<code>string</code>値を作成します。 ネイティブ文字列はコピーされます。 <code>napi_create_string_latin1</code>とは対照的に、同じ<code>str</code>ポインタを使用してこの関数を後続呼び出すと、エンジンに応じて、要求された<code>napi_value</code>の作成が高速化される可能性があります。</p><p>JavaScriptの<code>string</code>型は、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type" target="_blank" rel="noreferrer">セクション6.1.4</a>で説明されています。</p><h4 id="node_api_create_property_key_utf16" tabindex="-1"><code>node_api_create_property_key_utf16</code> <a class="header-anchor" href="#node_api_create_property_key_utf16" aria-label="Permalink to “node_api_create_property_key_utf16”">​</a></h4><p><strong>Added in: v21.7.0, v20.12.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - Experimental</p></div><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status NAPI_CDECL </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_api_create_property_key_utf16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                          const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> char16_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                          size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                          napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] str</code>: UTF16-LE エンコードされた文字列を表す文字バッファ。</li><li><code>[in] length</code>: 文字列の長さ（2 バイトのコードユニット単位）。null 終端の場合は <code>NAPI_AUTO_LENGTH</code>。</li><li><code>[out] result</code>: オブジェクトのプロパティキーとして使用される最適化された JavaScript の <code>string</code> を表す <code>napi_value</code>。</li></ul><p>API が成功した場合 <code>napi_ok</code> を返します。</p><p>この API は、オブジェクトのプロパティキーとして使用される UTF16-LE エンコードされた C 文字列から、最適化された JavaScript の <code>string</code> 値を作成します。ネイティブ文字列はコピーされます。</p><p>JavaScript の <code>string</code> 型は、ECMAScript 言語仕様の <a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type" target="_blank" rel="noreferrer">セクション 6.1.4</a> で説明されています。</p><h4 id="node_api_create_property_key_utf8" tabindex="-1"><code>node_api_create_property_key_utf8</code> <a class="header-anchor" href="#node_api_create_property_key_utf8" aria-label="Permalink to “node_api_create_property_key_utf8”">​</a></h4><p><strong>Added in: v22.9.0, v20.18.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - Experimental</p></div><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status NAPI_CDECL </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_api_create_property_key_utf8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                         const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                         size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                         napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] str</code>: UTF8 エンコードされた文字列を表す文字バッファ。</li><li><code>[in] length</code>: 文字列の長さ（2 バイトのコードユニット単位）。null 終端の場合は <code>NAPI_AUTO_LENGTH</code>。</li><li><code>[out] result</code>: オブジェクトのプロパティキーとして使用される最適化された JavaScript の <code>string</code> を表す <code>napi_value</code>。</li></ul><p>API が成功した場合 <code>napi_ok</code> を返します。</p><p>この API は、オブジェクトのプロパティキーとして使用される UTF8 エンコードされた C 文字列から、最適化された JavaScript の <code>string</code> 値を作成します。ネイティブ文字列はコピーされます。</p><p>JavaScript の <code>string</code> 型は、ECMAScript 言語仕様の <a href="https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type" target="_blank" rel="noreferrer">セクション 6.1.4</a> で説明されています。</p><h3 id="functions-to-convert-from-node-api-to-c-types" tabindex="-1">Node-API から C の型に変換する関数 <a class="header-anchor" href="#functions-to-convert-from-node-api-to-c-types" aria-label="Permalink to “Node-API から C の型に変換する関数”">​</a></h3><h4 id="napi_get_array_length" tabindex="-1"><code>napi_get_array_length</code> <a class="header-anchor" href="#napi_get_array_length" aria-label="Permalink to “napi_get_array_length”">​</a></h4><p><strong>追加: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_array_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                  uint32_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] value</code>: 長さを問い合わせる JavaScript <code>Array</code> を表す <code>napi_value</code>。</li><li><code>[out] result</code>: 配列の長さを表す <code>uint32</code>。</li></ul><p>API が成功した場合 <code>napi_ok</code> を返します。</p><p>この API は、配列の長さを返します。</p><p><code>Array</code> の長さは、ECMAScript 言語仕様の <a href="https://tc39.github.io/ecma262/#sec-properties-of-array-instances-length" target="_blank" rel="noreferrer">セクション 22.1.4.1</a> で説明されています。</p><h4 id="napi_get_arraybuffer_info" tabindex="-1"><code>napi_get_arraybuffer_info</code> <a class="header-anchor" href="#napi_get_arraybuffer_info" aria-label="Permalink to “napi_get_arraybuffer_info”">​</a></h4><p><strong>追加: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_arraybuffer_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                      napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      size_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> byte_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] arraybuffer</code>: 問い合わせる <code>ArrayBuffer</code> を表す <code>napi_value</code>。</li><li><code>[out] data</code>: <code>ArrayBuffer</code> の基になるデータバッファ。 byte_length が <code>0</code> の場合、これは <code>NULL</code> または他の任意のポインタ値になる可能性があります。</li><li><code>[out] byte_length</code>: 基になるデータバッファのバイト単位の長さ。</li></ul><p>API が成功した場合 <code>napi_ok</code> を返します。</p><p>この API は、<code>ArrayBuffer</code> の基になるデータバッファとその長さを取得するために使用されます。</p><p><em>警告</em>: この API を使用する際は注意してください。 基になるデータバッファのライフタイムは、返された後でも <code>ArrayBuffer</code> によって管理されます。 この API を安全に使用できる可能性のある方法は、<a href="/ja/nodejs/api/n-api#napi-create-reference"><code>napi_create_reference</code></a> と組み合わせて使用​​することです。これは、<code>ArrayBuffer</code> のライフタイムの制御を保証するために使用できます。 また、GC をトリガーする可能性のある他の API を呼び出さない限り、同じコールバック内で返されたデータバッファを使用しても安全です。</p><h4 id="napi_get_buffer_info" tabindex="-1"><code>napi_get_buffer_info</code> <a class="header-anchor" href="#napi_get_buffer_info" aria-label="Permalink to “napi_get_buffer_info”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_buffer_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 size_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: クエリされる<code>node::Buffer</code>または<code>Uint8Array</code>を表す<code>napi_value</code>。</li><li><code>[out] data</code>: <code>node::Buffer</code>または<code>Uint8Array</code>の基になるデータバッファー。 lengthが<code>0</code>の場合、これは<code>NULL</code>または他の任意のポインタ値である可能性があります。</li><li><code>[out] length</code>: 基になるデータバッファーのバイト単位の長さ。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このメソッドは、<a href="/ja/nodejs/api/n-api#napi-get-typedarray-info"><code>napi_get_typedarray_info</code></a>と同一の<code>data</code>と<code>byte_length</code>を返します。 また、<code>napi_get_typedarray_info</code>は、<code>node::Buffer</code>（Uint8Array）も値として受け入れます。</p><p>このAPIは、<code>node::Buffer</code>の基になるデータバッファーとその長さを取得するために使用されます。</p><p><em>警告</em>: 基になるデータバッファーの有効期間がVMによって管理されている場合、このAPIの使用には注意が必要です。</p><h4 id="napi_get_prototype" tabindex="-1"><code>napi_get_prototype</code> <a class="header-anchor" href="#napi_get_prototype" aria-label="Permalink to “napi_get_prototype”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] object</code>: プロトタイプを返すJavaScript <code>Object</code>を表す<code>napi_value</code>。 これは、<code>Object.getPrototypeOf</code>と同等です（関数の<code>prototype</code>プロパティと同じではありません）。</li><li><code>[out] result</code>: 指定されたオブジェクトのプロトタイプを表す<code>napi_value</code>。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><h4 id="napi_get_typedarray_info" tabindex="-1"><code>napi_get_typedarray_info</code> <a class="header-anchor" href="#napi_get_typedarray_info" aria-label="Permalink to “napi_get_typedarray_info”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_typedarray_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                     napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">typedarray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                     napi_typedarray_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     size_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                     napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     size_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> byte_offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] typedarray</code>: プロパティをクエリする<code>TypedArray</code>を表す<code>napi_value</code>。</li><li><code>[out] type</code>: <code>TypedArray</code>内の要素のスカラーデータ型。</li><li><code>[out] length</code>: <code>TypedArray</code>内の要素数。</li><li><code>[out] data</code>: <code>TypedArray</code>の最初の要素を指すように<code>byte_offset</code>値で調整された、<code>TypedArray</code>の基になるデータバッファー。 配列の長さが <code>0</code> の場合、これは <code>NULL</code> または他の任意のポインタ値である可能性があります。</li><li><code>[out] arraybuffer</code>: <code>TypedArray</code>の基になる<code>ArrayBuffer</code>。</li><li><code>[out] byte_offset</code>: 配列の最初の要素が配置される、基になるネイティブ配列内のバイトオフセット。 dataパラメーターの値は、配列の最初の要素をdataが指すようにすでに調整されています。 したがって、ネイティブ配列の最初のバイトは <code>data - byte_offset</code> になります。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、型付き配列のさまざまなプロパティを返します。</p><p>そのプロパティが不要な場合、出力パラメーターのいずれかが <code>NULL</code> になる場合があります。</p><p><em>警告</em>: 基になるデータバッファーはVMによって管理されているため、このAPIの使用には注意が必要です。</p><h4 id="napi_get_dataview_info" tabindex="-1"><code>napi_get_dataview_info</code> <a class="header-anchor" href="#napi_get_dataview_info" aria-label="Permalink to “napi_get_dataview_info”">​</a></h4><p><strong>Added in: v8.3.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_dataview_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dataview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                   size_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> byte_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                   void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                   size_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> byte_offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] dataview</code>: プロパティをクエリする <code>DataView</code> を表す <code>napi_value</code>。</li><li><code>[out] byte_length</code>: <code>DataView</code> 内のバイト数。</li><li><code>[out] data</code>: <code>DataView</code> の基になるデータバッファ。 byte_length が <code>0</code> の場合、これは <code>NULL</code> またはその他のポインタ値になる可能性があります。</li><li><code>[out] arraybuffer</code>: <code>DataView</code> の基になる <code>ArrayBuffer</code>。</li><li><code>[out] byte_offset</code>: <code>DataView</code> の投影を開始するデータバッファ内のバイトオフセット。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>プロパティが不要な場合、出力パラメータのいずれかが <code>NULL</code> になる可能性があります。</p><p>この API は、<code>DataView</code> のさまざまなプロパティを返します。</p><h4 id="napi_get_date_value" tabindex="-1"><code>napi_get_date_value</code> <a class="header-anchor" href="#napi_get_date_value" aria-label="Permalink to “napi_get_date_value”">​</a></h4><p><strong>Added in: v11.11.0, v10.17.0</strong></p><p><strong>N-API バージョン: 5</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_date_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                double*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] value</code>: JavaScript <code>Date</code> を表す <code>napi_value</code>。</li><li><code>[out] result</code>: 1970 年 1 月 1 日の深夜からのミリ秒として表される <code>double</code> としての時間値（UTC）。</li></ul><p>この API はうるう秒を監視しません。ECMAScript は POSIX 時間仕様に準拠しているため、うるう秒は無視されます。</p><p>API が成功した場合は <code>napi_ok</code> を返します。 日付以外の <code>napi_value</code> が渡された場合、<code>napi_date_expected</code> を返します。</p><p>この API は、指定された JavaScript <code>Date</code> の時間値の C double プリミティブを返します。</p><h4 id="napi_get_value_bool" tabindex="-1"><code>napi_get_value_bool</code> <a class="header-anchor" href="#napi_get_value_bool" aria-label="Permalink to “napi_get_value_bool”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_value_bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] value</code>: JavaScript <code>Boolean</code> を表す <code>napi_value</code>。</li><li><code>[out] result</code>: 指定された JavaScript <code>Boolean</code> と同等の C ブール型プリミティブ。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。 ブール値以外の <code>napi_value</code> が渡された場合、<code>napi_boolean_expected</code> を返します。</p><p>この API は、指定された JavaScript <code>Boolean</code> と同等の C ブール型プリミティブを返します。</p><h4 id="napi_get_value_double" tabindex="-1"><code>napi_get_value_double</code> <a class="header-anchor" href="#napi_get_value_double" aria-label="Permalink to “napi_get_value_double”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_value_double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                  double*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] value</code>: JavaScript の <code>number</code> を表す <code>napi_value</code>。</li><li><code>[out] result</code>: 指定された JavaScript の <code>number</code> に相当する C の double プリミティブ。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。数値以外の <code>napi_value</code> が渡された場合は、<code>napi_number_expected</code> を返します。</p><p>この API は、指定された JavaScript の <code>number</code> に相当する C の double プリミティブを返します。</p><h4 id="napi_get_value_bigint_int64" tabindex="-1"><code>napi_get_value_bigint_int64</code> <a class="header-anchor" href="#napi_get_value_bigint_int64" aria-label="Permalink to “napi_get_value_bigint_int64”">​</a></h4><p><strong>Added in: v10.7.0</strong></p><p><strong>N-API バージョン: 6</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_value_bigint_int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                        napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        int64_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> lossless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] value</code>: JavaScript の <code>BigInt</code> を表す <code>napi_value</code>。</li><li><code>[out] result</code>: 指定された JavaScript の <code>BigInt</code> に相当する C の <code>int64_t</code> プリミティブ。</li><li><code>[out] lossless</code>: <code>BigInt</code> 値がロスレスで変換されたかどうかを示します。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。<code>BigInt</code> 以外のものが渡された場合は、<code>napi_bigint_expected</code> を返します。</p><p>この API は、指定された JavaScript の <code>BigInt</code> に相当する C の <code>int64_t</code> プリミティブを返します。必要に応じて値を切り捨て、<code>lossless</code> を <code>false</code> に設定します。</p><h4 id="napi_get_value_bigint_uint64" tabindex="-1"><code>napi_get_value_bigint_uint64</code> <a class="header-anchor" href="#napi_get_value_bigint_uint64" aria-label="Permalink to “napi_get_value_bigint_uint64”">​</a></h4><p><strong>Added in: v10.7.0</strong></p><p><strong>N-API バージョン: 6</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_value_bigint_uint64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                        napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        uint64_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> lossless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] value</code>: JavaScript の <code>BigInt</code> を表す <code>napi_value</code>。</li><li><code>[out] result</code>: 指定された JavaScript の <code>BigInt</code> に相当する C の <code>uint64_t</code> プリミティブ。</li><li><code>[out] lossless</code>: <code>BigInt</code> 値がロスレスで変換されたかどうかを示します。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。<code>BigInt</code> 以外のものが渡された場合は、<code>napi_bigint_expected</code> を返します。</p><p>この API は、指定された JavaScript の <code>BigInt</code> に相当する C の <code>uint64_t</code> プリミティブを返します。必要に応じて値を切り捨て、<code>lossless</code> を <code>false</code> に設定します。</p><h4 id="napi_get_value_bigint_words" tabindex="-1"><code>napi_get_value_bigint_words</code> <a class="header-anchor" href="#napi_get_value_bigint_words" aria-label="Permalink to “napi_get_value_bigint_words”">​</a></h4><p><strong>Added in: v10.7.0</strong></p><p><strong>N-API version: 6</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_value_bigint_words</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                        napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        int*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sign_bit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        size_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> word_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        uint64_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> words</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: JavaScript の <code>BigInt</code> を表す <code>napi_value</code>。</li><li><code>[out] sign_bit</code>: JavaScript の <code>BigInt</code> が正か負かを表す整数。</li><li><code>[in/out] word_count</code>: <code>words</code> 配列の長さに初期化する必要があります。戻ると、この <code>BigInt</code> を格納するために必要な実際のワード数に設定されます。</li><li><code>[out] words</code>: 事前に割り当てられた 64 ビットのワード配列へのポインタ。</li></ul><p>APIが成功した場合は <code>napi_ok</code> を返します。</p><p>この API は、単一の <code>BigInt</code> 値を符号ビット、64 ビットのリトルエンディアン配列、および配列内の要素数に変換します。 <code>word_count</code> のみを取得するために、<code>sign_bit</code> と <code>words</code> の両方を <code>NULL</code> に設定できます。</p><h4 id="napi_get_value_external" tabindex="-1"><code>napi_get_value_external</code> <a class="header-anchor" href="#napi_get_value_external" aria-label="Permalink to “napi_get_value_external”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_value_external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: JavaScript の外部値を表す <code>napi_value</code>。</li><li><code>[out] result</code>: JavaScript の外部値によってラップされたデータへのポインタ。</li></ul><p>APIが成功した場合は <code>napi_ok</code> を返します。外部でない <code>napi_value</code> が渡された場合は <code>napi_invalid_arg</code> を返します。</p><p>この API は、以前に <code>napi_create_external()</code> に渡された外部データポインタを取得します。</p><h4 id="napi_get_value_int32" tabindex="-1"><code>napi_get_value_int32</code> <a class="header-anchor" href="#napi_get_value_int32" aria-label="Permalink to “napi_get_value_int32”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_value_int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 int32_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: JavaScript の <code>number</code> を表す <code>napi_value</code>。</li><li><code>[out] result</code>: 指定された JavaScript の <code>number</code> に相当する C の <code>int32</code> プリミティブ。</li></ul><p>APIが成功した場合は <code>napi_ok</code> を返します。数値でない <code>napi_value</code> が渡された場合は <code>napi_number_expected</code> を返します。</p><p>この API は、指定された JavaScript の <code>number</code> に相当する C の <code>int32</code> プリミティブを返します。</p><p>数値が 32 ビット整数の範囲を超える場合、結果は下位 32 ビットに相当するように切り捨てられます。これにより、値が &gt; 2 - 1 の場合、大きな正の数が負の数になる可能性があります。</p><p>非有限数値 (<code>NaN</code>、<code>+Infinity</code>、または <code>-Infinity</code>) は、結果をゼロに設定します。</p><h4 id="napi_get_value_int64" tabindex="-1"><code>napi_get_value_int64</code> <a class="header-anchor" href="#napi_get_value_int64" aria-label="Permalink to “napi_get_value_int64”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_value_int64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 int64_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境です。</li><li><code>[in] value</code>: JavaScriptの<code>number</code>を表す<code>napi_value</code>。</li><li><code>[out] result</code>: 指定されたJavaScriptの<code>number</code>と同等のCの<code>int64</code>プリミティブ。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。数値以外の<code>napi_value</code>が渡された場合は、<code>napi_number_expected</code>を返します。</p><p>このAPIは、指定されたJavaScriptの<code>number</code>と同等のCの<code>int64</code>プリミティブを返します。</p><p><a href="https://tc39.github.io/ecma262/#sec-number.min_safe_integer" target="_blank" rel="noreferrer"><code>Number.MIN_SAFE_INTEGER</code></a> <code>-(2**53 - 1)</code> - <a href="https://tc39.github.io/ecma262/#sec-number.max_safe_integer" target="_blank" rel="noreferrer"><code>Number.MAX_SAFE_INTEGER</code></a> <code>(2**53 - 1)</code>の範囲外の<code>number</code>値は、精度が失われます。</p><p>非有限数値（<code>NaN</code>、<code>+Infinity</code>、または<code>-Infinity</code>）は、結果をゼロに設定します。</p><h4 id="napi_get_value_string_latin1" tabindex="-1"><code>napi_get_value_string_latin1</code> <a class="header-anchor" href="#napi_get_value_string_latin1" aria-label="Permalink to “napi_get_value_string_latin1”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_value_string_latin1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                         napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                         char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                         size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> bufsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                         size_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境です。</li><li><code>[in] value</code>: JavaScriptの文字列を表す<code>napi_value</code>。</li><li><code>[in] buf</code>: ISO-8859-1エンコードされた文字列を書き込むバッファ。 <code>NULL</code>が渡された場合、文字列の長さ（バイト単位、ヌル終端文字を除く）が<code>result</code>で返されます。</li><li><code>[in] bufsize</code>: 宛先バッファのサイズ。 この値が不十分な場合、返される文字列は切り捨てられ、ヌル終端されます。</li><li><code>[out] result</code>: バッファにコピーされたバイト数（ヌル終端文字を除く）。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。 <code>string</code>以外の<code>napi_value</code>が渡された場合は、<code>napi_string_expected</code>を返します。</p><p>このAPIは、渡された値に対応するISO-8859-1エンコードされた文字列を返します。</p><h4 id="napi_get_value_string_utf8" tabindex="-1"><code>napi_get_value_string_utf8</code> <a class="header-anchor" href="#napi_get_value_string_utf8" aria-label="Permalink to “napi_get_value_string_utf8”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_value_string_utf8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                       napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                       char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                       size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> bufsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                       size_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: JavaScript文字列を表す<code>napi_value</code>。</li><li><code>[in] buf</code>: UTF8エンコードされた文字列を書き込むバッファー。 <code>NULL</code>が渡された場合、nullターミネータを除いた文字列のバイト長が<code>result</code>で返されます。</li><li><code>[in] bufsize</code>: 宛先バッファーのサイズ。 この値が不十分な場合、返される文字列は切り捨てられ、null終端されます。</li><li><code>[out] result</code>: バッファーにコピーされたバイト数（nullターミネータを除く）。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。 <code>string</code>以外の<code>napi_value</code>が渡された場合は、<code>napi_string_expected</code>を返します。</p><p>このAPIは、渡された値に対応するUTF8エンコードされた文字列を返します。</p><h4 id="napi_get_value_string_utf16" tabindex="-1"><code>napi_get_value_string_utf16</code> <a class="header-anchor" href="#napi_get_value_string_utf16" aria-label="Permalink to “napi_get_value_string_utf16”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_value_string_utf16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                        napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                        char16_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> bufsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                        size_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: JavaScript文字列を表す<code>napi_value</code>。</li><li><code>[in] buf</code>: UTF16-LEエンコードされた文字列を書き込むバッファー。 <code>NULL</code>が渡された場合、nullターミネータを除いた文字列の2バイトコードユニットの長さが返されます。</li><li><code>[in] bufsize</code>: 宛先バッファーのサイズ。 この値が不十分な場合、返される文字列は切り捨てられ、null終端されます。</li><li><code>[out] result</code>: バッファーにコピーされた2バイトコードユニットの数（nullターミネータを除く）。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。 <code>string</code>以外の<code>napi_value</code>が渡された場合は、<code>napi_string_expected</code>を返します。</p><p>このAPIは、渡された値に対応するUTF16エンコードされた文字列を返します。</p><h4 id="napi_get_value_uint32" tabindex="-1"><code>napi_get_value_uint32</code> <a class="header-anchor" href="#napi_get_value_uint32" aria-label="Permalink to “napi_get_value_uint32”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_value_uint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                  uint32_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: JavaScriptの<code>number</code>を表す<code>napi_value</code>。</li><li><code>[out] result</code>: 指定された<code>napi_value</code>に対応するCのプリミティブを<code>uint32_t</code>として取得。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。数値以外の<code>napi_value</code>が渡された場合は、<code>napi_number_expected</code>を返します。</p><p>このAPIは、指定された<code>napi_value</code>に対応するCのプリミティブを<code>uint32_t</code>として返します。</p><h3 id="functions-to-get-global-instances" tabindex="-1">グローバルインスタンスを取得する関数 <a class="header-anchor" href="#functions-to-get-global-instances" aria-label="Permalink to “グローバルインスタンスを取得する関数”">​</a></h3><h4 id="napi_get_boolean" tabindex="-1"><code>napi_get_boolean</code> <a class="header-anchor" href="#napi_get_boolean" aria-label="Permalink to “napi_get_boolean”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: 取得するbooleanの値。</li><li><code>[out] result</code>: 取得するJavaScriptの<code>Boolean</code>シングルトンを表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、指定されたboolean値を表すために使用されるJavaScriptのシングルトンオブジェクトを返すために使用されます。</p><h4 id="napi_get_global" tabindex="-1"><code>napi_get_global</code> <a class="header-anchor" href="#napi_get_global" aria-label="Permalink to “napi_get_global”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[out] result</code>: JavaScriptの<code>global</code>オブジェクトを表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは<code>global</code>オブジェクトを返します。</p><h4 id="napi_get_null" tabindex="-1"><code>napi_get_null</code> <a class="header-anchor" href="#napi_get_null" aria-label="Permalink to “napi_get_null”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[out] result</code>: JavaScriptの<code>null</code>オブジェクトを表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは<code>null</code>オブジェクトを返します。</p><h4 id="napi_get_undefined" tabindex="-1"><code>napi_get_undefined</code> <a class="header-anchor" href="#napi_get_undefined" aria-label="Permalink to “napi_get_undefined”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[out] result</code>: JavaScriptのUndefined値を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIはUndefinedオブジェクトを返します。</p><h2 id="working-with-javascript-values-and-abstract-operations" tabindex="-1">JavaScriptの値と抽象的な操作の扱い <a class="header-anchor" href="#working-with-javascript-values-and-abstract-operations" aria-label="Permalink to “JavaScriptの値と抽象的な操作の扱い”">​</a></h2><p>Node-APIは、JavaScriptの値に対して抽象的な操作を実行するための一連のAPIを公開しています。これらの操作の一部は、<a href="https://tc39.github.io/ecma262/" target="_blank" rel="noreferrer">ECMAScript Language Specification</a>の<a href="https://tc39.github.io/ecma262/#sec-abstract-operations" target="_blank" rel="noreferrer">セクション7</a>で文書化されています。</p><p>これらのAPIは、次のいずれかの実行をサポートしています。</p><h3 id="napi_coerce_to_bool" tabindex="-1"><code>napi_coerce_to_bool</code> <a class="header-anchor" href="#napi_coerce_to_bool" aria-label="Permalink to “napi_coerce_to_bool”">​</a></h3><p><strong>追加:</strong> v8.0.0</p><p><strong>N-APIバージョン:</strong> 1</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_coerce_to_bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: 強制するJavaScriptの値。</li><li><code>[out] result</code>: 強制されたJavaScript <code>Boolean</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、ECMAScript Language Specificationの<a href="https://tc39.github.io/ecma262/#sec-toboolean" target="_blank" rel="noreferrer">セクション7.1.2</a>で定義されている抽象的な操作<code>ToBoolean()</code>を実装しています。</p><h3 id="napi_coerce_to_number" tabindex="-1"><code>napi_coerce_to_number</code> <a class="header-anchor" href="#napi_coerce_to_number" aria-label="Permalink to “napi_coerce_to_number”">​</a></h3><p><strong>追加:</strong> v8.0.0</p><p><strong>N-APIバージョン:</strong> 1</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_coerce_to_number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: 強制するJavaScriptの値。</li><li><code>[out] result</code>: 強制されたJavaScript <code>number</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、ECMAScript Language Specificationの<a href="https://tc39.github.io/ecma262/#sec-tonumber" target="_blank" rel="noreferrer">セクション7.1.3</a>で定義されている抽象的な操作<code>ToNumber()</code>を実装しています。 この関数は、渡された値がオブジェクトの場合、JSコードを実行する可能性があります。</p><h3 id="napi_coerce_to_object" tabindex="-1"><code>napi_coerce_to_object</code> <a class="header-anchor" href="#napi_coerce_to_object" aria-label="Permalink to “napi_coerce_to_object”">​</a></h3><p><strong>追加:</strong> v8.0.0</p><p><strong>N-APIバージョン:</strong> 1</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_coerce_to_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: 強制するJavaScriptの値。</li><li><code>[out] result</code>: 強制されたJavaScript <code>Object</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、ECMAScript Language Specificationの<a href="https://tc39.github.io/ecma262/#sec-toobject" target="_blank" rel="noreferrer">セクション7.1.13</a>で定義されている抽象的な操作<code>ToObject()</code>を実装しています。</p><h3 id="napi_coerce_to_string" tabindex="-1"><code>napi_coerce_to_string</code> <a class="header-anchor" href="#napi_coerce_to_string" aria-label="Permalink to “napi_coerce_to_string”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_coerce_to_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: 強制するJavaScriptの値。</li><li><code>[out] result</code>: 強制されたJavaScriptの<code>string</code>を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-toobject" target="_blank" rel="noreferrer">セクション7.1.13</a>で定義されている抽象操作<code>ToString()</code>を実装します。この関数は、渡された値がオブジェクトの場合、JSコードを実行する可能性があります。</p><h3 id="napi_typeof" tabindex="-1"><code>napi_typeof</code> <a class="header-anchor" href="#napi_typeof" aria-label="Permalink to “napi_typeof”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_valuetype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: 型を照会するJavaScriptの値。</li><li><code>[out] result</code>: JavaScriptの値の型。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><ul><li><code>value</code>の型が既知のECMAScript型でなく、<code>value</code>がExternal値でない場合、<code>napi_invalid_arg</code>。</li></ul><p>このAPIは、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-typeof-operator" target="_blank" rel="noreferrer">セクション12.5.5</a>で定義されているオブジェクトに対して<code>typeof</code>演算子を呼び出すのと同様の動作を表します。ただし、いくつかの違いがあります。</p><p><code>value</code>が無効な型である場合、エラーが返されます。</p><h3 id="napi_instanceof" tabindex="-1"><code>napi_instanceof</code> <a class="header-anchor" href="#napi_instanceof" aria-label="Permalink to “napi_instanceof”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                            bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] object</code>: チェックするJavaScriptの値。</li><li><code>[in] constructor</code>: チェック対象のコンストラクタ関数のJavaScript関数オブジェクト。</li><li><code>[out] result</code>: <code>object instanceof constructor</code>が真の場合にtrueに設定されるブール値。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-instanceofoperator" target="_blank" rel="noreferrer">セクション12.10.4</a>で定義されているオブジェクトに対して<code>instanceof</code>演算子を呼び出すことを表します。</p><h3 id="napi_is_array" tabindex="-1"><code>napi_is_array</code> <a class="header-anchor" href="#napi_is_array" aria-label="Permalink to “napi_is_array”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_is_array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] value</code>: チェックする JavaScript の値。</li><li><code>[out] result</code>: 与えられたオブジェクトが配列かどうか。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>この API は、ECMAScript 言語仕様の <a href="https://tc39.github.io/ecma262/#sec-isarray" target="_blank" rel="noreferrer">セクション 7.2.2</a> で定義されているオブジェクトに対して <code>IsArray</code> 操作を呼び出すことを表します。</p><h3 id="napi_is_arraybuffer" tabindex="-1"><code>napi_is_arraybuffer</code> <a class="header-anchor" href="#napi_is_arraybuffer" aria-label="Permalink to “napi_is_arraybuffer”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_is_arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] value</code>: チェックする JavaScript の値。</li><li><code>[out] result</code>: 与えられたオブジェクトが <code>ArrayBuffer</code> かどうか。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>この API は、渡された <code>Object</code> が ArrayBuffer かどうかをチェックします。</p><h3 id="napi_is_buffer" tabindex="-1"><code>napi_is_buffer</code> <a class="header-anchor" href="#napi_is_buffer" aria-label="Permalink to “napi_is_buffer”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_is_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] value</code>: チェックする JavaScript の値。</li><li><code>[out] result</code>: 与えられた <code>napi_value</code> が <code>node::Buffer</code> または <code>Uint8Array</code> オブジェクトを表すかどうか。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>この API は、渡された <code>Object</code> が Buffer または Uint8Array かどうかをチェックします。 値が Uint8Array かどうかを呼び出し元が確認する必要がある場合は、<a href="/ja/nodejs/api/n-api#napi-is-typedarray"><code>napi_is_typedarray</code></a> を優先する必要があります。</p><h3 id="napi_is_date" tabindex="-1"><code>napi_is_date</code> <a class="header-anchor" href="#napi_is_date" aria-label="Permalink to “napi_is_date”">​</a></h3><p><strong>Added in: v11.11.0, v10.17.0</strong></p><p><strong>N-API version: 5</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_is_date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] value</code>: チェックする JavaScript の値。</li><li><code>[out] result</code>: 与えられた <code>napi_value</code> が JavaScript の <code>Date</code> オブジェクトを表すかどうか。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>この API は、渡された <code>Object</code> が Date かどうかをチェックします。</p><h3 id="napi_is_error_1" tabindex="-1"><code>napi_is_error</code> <a class="header-anchor" href="#napi_is_error_1" aria-label="Permalink to “napi_is_error”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_is_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: チェックする JavaScript の値。</li><li><code>[out] result</code>: 指定された <code>napi_value</code> が <code>Error</code> オブジェクトを表すかどうか。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>この API は、渡された <code>Object</code> が <code>Error</code> であるかどうかをチェックします。</p><h3 id="napi_is_typedarray" tabindex="-1"><code>napi_is_typedarray</code> <a class="header-anchor" href="#napi_is_typedarray" aria-label="Permalink to “napi_is_typedarray”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_is_typedarray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: チェックする JavaScript の値。</li><li><code>[out] result</code>: 指定された <code>napi_value</code> が <code>TypedArray</code> を表すかどうか。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>この API は、渡された <code>Object</code> が型付き配列であるかどうかをチェックします。</p><h3 id="napi_is_dataview" tabindex="-1"><code>napi_is_dataview</code> <a class="header-anchor" href="#napi_is_dataview" aria-label="Permalink to “napi_is_dataview”">​</a></h3><p><strong>Added in: v8.3.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_is_dataview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] value</code>: チェックする JavaScript の値。</li><li><code>[out] result</code>: 指定された <code>napi_value</code> が <code>DataView</code> を表すかどうか。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>この API は、渡された <code>Object</code> が <code>DataView</code> であるかどうかをチェックします。</p><h3 id="napi_strict_equals" tabindex="-1"><code>napi_strict_equals</code> <a class="header-anchor" href="#napi_strict_equals" aria-label="Permalink to “napi_strict_equals”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_strict_equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rhs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                               bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] lhs</code>: チェックする JavaScript の値。</li><li><code>[in] rhs</code>: チェック対象の JavaScript の値。</li><li><code>[out] result</code>: 2 つの <code>napi_value</code> オブジェクトが等しいかどうか。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>この API は、ECMAScript 言語仕様の <a href="https://tc39.github.io/ecma262/#sec-strict-equality-comparison" target="_blank" rel="noreferrer">セクション 7.2.14</a> で定義されている厳密等価性アルゴリズムの呼び出しを表します。</p><h3 id="napi_detach_arraybuffer" tabindex="-1"><code>napi_detach_arraybuffer</code> <a class="header-anchor" href="#napi_detach_arraybuffer" aria-label="Permalink to “napi_detach_arraybuffer”">​</a></h3><p><strong>追加:</strong> v13.0.0, v12.16.0, v10.22.0</p><p><strong>N-API バージョン:</strong> 7</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_detach_arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] arraybuffer</code>: デタッチされる JavaScript の <code>ArrayBuffer</code>。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。デタッチできない <code>ArrayBuffer</code> が渡された場合は、<code>napi_detachable_arraybuffer_expected</code> を返します。</p><p>一般的に、<code>ArrayBuffer</code> は以前にデタッチされた場合、デタッチできません。エンジンは、<code>ArrayBuffer</code> がデタッチ可能かどうかについて、追加の条件を課す場合があります。たとえば、V8 では、<code>ArrayBuffer</code> が外部であること、つまり <a href="/ja/nodejs/api/n-api#napi-create-external-arraybuffer"><code>napi_create_external_arraybuffer</code></a> で作成されていることが必要です。</p><p>この API は、ECMAScript 言語仕様の <a href="https://tc39.es/ecma262/#sec-detacharraybuffer" target="_blank" rel="noreferrer">セクション 24.1.1.3</a> で定義されている <code>ArrayBuffer</code> のデタッチ操作の呼び出しを表します。</p><h3 id="napi_is_detached_arraybuffer" tabindex="-1"><code>napi_is_detached_arraybuffer</code> <a class="header-anchor" href="#napi_is_detached_arraybuffer" aria-label="Permalink to “napi_is_detached_arraybuffer”">​</a></h3><p><strong>追加:</strong> v13.3.0, v12.16.0, v10.22.0</p><p><strong>N-API バージョン:</strong> 7</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_is_detached_arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                         napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                         bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] arraybuffer</code>: チェックされる JavaScript の <code>ArrayBuffer</code>。</li><li><code>[out] result</code>: <code>arraybuffer</code> がデタッチされているかどうか。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p><code>ArrayBuffer</code> は、その内部データが <code>null</code> の場合、デタッチされていると見なされます。</p><p>この API は、ECMAScript 言語仕様の <a href="https://tc39.es/ecma262/#sec-isdetachedbuffer" target="_blank" rel="noreferrer">セクション 24.1.1.2</a> で定義されている <code>ArrayBuffer</code> の <code>IsDetachedBuffer</code> 操作の呼び出しを表します。</p><h2 id="working-with-javascript-properties" tabindex="-1">JavaScript プロパティの操作 <a class="header-anchor" href="#working-with-javascript-properties" aria-label="Permalink to “JavaScript プロパティの操作”">​</a></h2><p>Node-API は、JavaScript オブジェクトのプロパティを取得および設定するための一連の API を公開しています。これらの型のいくつかは、<a href="https://tc39.github.io/ecma262/" target="_blank" rel="noreferrer">ECMAScript 言語仕様</a> の <a href="https://tc39.github.io/ecma262/#sec-abstract-operations" target="_blank" rel="noreferrer">セクション 7</a> でドキュメント化されています。</p><p>JavaScript のプロパティは、キーと値のタプルとして表されます。基本的に、Node-API のすべてのプロパティキーは、次のいずれかの形式で表すことができます。</p><ul><li>名前付き: 単純な UTF8 エンコードされた文字列</li><li>整数インデックス付き: <code>uint32_t</code> で表されるインデックス値</li><li>JavaScript 値: これらは Node-API で <code>napi_value</code> で表されます。これは、<code>string</code>、<code>number</code>、または <code>symbol</code> を表す <code>napi_value</code> になります。</li></ul><p>Node-API 値は、型 <code>napi_value</code> で表されます。JavaScript 値が必要な Node-API 呼び出しはすべて、<code>napi_value</code> を受け取ります。ただし、問題の <code>napi_value</code> が API が予期する JavaScript 型であることを確認するのは、呼び出し側の責任です。</p><p>このセクションでドキュメント化されている API は、<code>napi_value</code> で表される任意の JavaScript オブジェクトのプロパティを取得および設定するための簡単なインターフェイスを提供します。</p><p>たとえば、次の JavaScript コードスニペットを考えてみましょう。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.myProp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>同等のことは、次のスニペットを使用して Node-API 値で実行できます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_generic_failure;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const obj = {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value obj, value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create a napi_value for 123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj.myProp = 123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_set_named_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myProp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>インデックス付きプロパティは、同様の方法で設定できます。次の JavaScript スニペットを考えてみましょう。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>同等のことは、次のスニペットを使用して Node-API 値で実行できます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_generic_failure;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const arr = [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value arr, value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create a napi_value for &#39;hello&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_string_utf8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, NAPI_AUTO_LENGTH, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// arr[123] = &#39;hello&#39;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_set_element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>プロパティは、このセクションで説明されている API を使用して取得できます。次の JavaScript スニペットを考えてみましょう。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>次は、Node-API の対応するもののほぼ同等です。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_generic_failure;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const arr = []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value arr, value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const value = arr[123]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_get_element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>最後に、パフォーマンス上の理由から、複数のプロパティをオブジェクトに定義することもできます。次の JavaScript を考えてみましょう。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>次は、Node-API の対応するもののほぼ同等です。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_status_generic_failure;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const obj = {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create napi_values for 123 and 456</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value fooValue, barValue;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fooValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">barValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set the properties</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_property_descriptor descriptors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fooValue, napi_writable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_configurable, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, barValue, napi_writable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_configurable, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_define_properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                obj,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(descriptors) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">descriptors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                descriptors);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="structures" tabindex="-1">構造体 <a class="header-anchor" href="#structures" aria-label="Permalink to “構造体”">​</a></h3><h4 id="napi_property_attributes" tabindex="-1"><code>napi_property_attributes</code> <a class="header-anchor" href="#napi_property_attributes" aria-label="Permalink to “napi_property_attributes”">​</a></h4><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v14.12.0</td><td><code>napi_default_method</code> と <code>napi_default_property</code> が追加されました。</td></tr></tbody></table></div><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_default </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_writable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_enumerable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_configurable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // クラスの静的プロパティとインスタンスプロパティを区別するために</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // napi_define_class で使用されます。 napi_define_properties では無視されます。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_static </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // クラスメソッドのデフォルト。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_default_method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_writable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_configurable,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // JS の obj[prop] のようなオブジェクトプロパティのデフォルト。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_default_jsproperty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_writable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                          napi_enumerable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                          napi_configurable,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_property_attributes;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>napi_property_attributes</code> は、JavaScript オブジェクトに設定されたプロパティの動作を制御するために使用されるフラグです。<code>napi_static</code> 以外は、<a href="https://tc39.github.io/ecma262/" target="_blank" rel="noreferrer">ECMAScript 言語仕様</a>の<a href="https://tc39.github.io/ecma262/#table-2" target="_blank" rel="noreferrer">セクション 6.1.7.1</a> にリストされている属性に対応します。 それらは、以下のビットフラグの 1 つ以上である可能性があります。</p><ul><li><code>napi_default</code>: プロパティに明示的な属性は設定されていません。 デフォルトでは、プロパティは読み取り専用で、列挙可能ではなく、構成可能ではありません。</li><li><code>napi_writable</code>: プロパティは書き込み可能です。</li><li><code>napi_enumerable</code>: プロパティは列挙可能です。</li><li><code>napi_configurable</code>: プロパティは <a href="https://tc39.github.io/ecma262/" target="_blank" rel="noreferrer">ECMAScript 言語仕様</a>の<a href="https://tc39.github.io/ecma262/#table-2" target="_blank" rel="noreferrer">セクション 6.1.7.1</a> で定義されているように構成可能です。</li><li><code>napi_static</code>: プロパティは、デフォルトであるインスタンスプロパティではなく、クラスの静的プロパティとして定義されます。 これは <a href="/ja/nodejs/api/n-api#napi-define-class"><code>napi_define_class</code></a> でのみ使用されます。 <code>napi_define_properties</code> では無視されます。</li><li><code>napi_default_method</code>: JS クラスのメソッドと同様に、プロパティは構成可能で書き込み可能ですが、列挙可能ではありません。</li><li><code>napi_default_jsproperty</code>: JavaScript での代入によって設定されたプロパティと同様に、プロパティは書き込み可能、列挙可能、および構成可能です。</li></ul><h4 id="napi_property_descriptor" tabindex="-1"><code>napi_property_descriptor</code> <a class="header-anchor" href="#napi_property_descriptor" aria-label="Permalink to “napi_property_descriptor”">​</a></h4><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // utf8nameまたはnameのいずれかはNULLである必要があります。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utf8name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_value name;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_callback method;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_callback getter;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_callback setter;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_value value;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_property_attributes attributes;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_property_descriptor;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li><code>utf8name</code>: プロパティのキーを記述するオプションの文字列。UTF8でエンコードされています。 <code>utf8name</code>または<code>name</code>のいずれかをプロパティに指定する必要があります。</li><li><code>name</code>: プロパティのキーとして使用されるJavaScript文字列またはシンボルを指すオプションの<code>napi_value</code>。 <code>utf8name</code>または<code>name</code>のいずれかをプロパティに指定する必要があります。</li><li><code>value</code>: プロパティがデータプロパティの場合、プロパティのgetアクセスによって取得される値。 これが渡された場合は、<code>getter</code>、<code>setter</code>、<code>method</code>、および<code>data</code>を<code>NULL</code>に設定します（これらのメンバーは使用されないため）。</li><li><code>getter</code>: プロパティのgetアクセスが実行されたときに呼び出す関数。 これが渡された場合は、<code>value</code>と<code>method</code>を<code>NULL</code>に設定します（これらのメンバーは使用されないため）。 指定された関数は、JavaScriptコードからプロパティにアクセスされた場合（またはNode-API呼び出しを使用してプロパティでgetが実行された場合）、ランタイムによって暗黙的に呼び出されます。 <a href="/ja/nodejs/api/n-api#napi-callback"><code>napi_callback</code></a>は、詳細を提供します。</li><li><code>setter</code>: プロパティのsetアクセスが実行されたときに呼び出す関数。 これが渡された場合は、<code>value</code>と<code>method</code>を<code>NULL</code>に設定します（これらのメンバーは使用されないため）。 指定された関数は、JavaScriptコードからプロパティが設定された場合（またはNode-API呼び出しを使用してプロパティが設定された場合）、ランタイムによって暗黙的に呼び出されます。 <a href="/ja/nodejs/api/n-api#napi-callback"><code>napi_callback</code></a>は、詳細を提供します。</li><li><code>method</code>: この設定により、プロパティ記述子オブジェクトの<code>value</code>プロパティが、<code>method</code>によって表されるJavaScript関数になります。 これが渡された場合は、<code>value</code>、<code>getter</code>、および<code>setter</code>を<code>NULL</code>に設定します（これらのメンバーは使用されないため）。 <a href="/ja/nodejs/api/n-api#napi-callback"><code>napi_callback</code></a>は、詳細を提供します。</li><li><code>attributes</code>: 特定のプロパティに関連付けられた属性。 <a href="/ja/nodejs/api/n-api#napi-property-attributes"><code>napi_property_attributes</code></a>を参照してください。</li><li><code>data</code>: この関数が呼び出された場合に、<code>method</code>、<code>getter</code>、および<code>setter</code>に渡されるコールバックデータ。</li></ul><h3 id="functions" tabindex="-1">関数 <a class="header-anchor" href="#functions" aria-label="Permalink to “関数”">​</a></h3><h4 id="napi_get_property_names" tabindex="-1"><code>napi_get_property_names</code> <a class="header-anchor" href="#napi_get_property_names" aria-label="Permalink to “napi_get_property_names”">​</a></h4><p><strong>追加: v8.0.0</strong></p><p><strong>N-APIバージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_property_names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが実行される環境。</li><li><code>[in] object</code>: プロパティを取得するオブジェクト。</li><li><code>[out] result</code>: オブジェクトのプロパティ名を表すJavaScript値の配列を表す<code>napi_value</code>。このAPIは、<a href="/ja/nodejs/api/n-api#napi-get-array-length"><code>napi_get_array_length</code></a>と<a href="/ja/nodejs/api/n-api#napi-get-element"><code>napi_get_element</code></a>を使用して<code>result</code>を反復処理するために使用できます。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、<code>object</code>の列挙可能なプロパティの名前を文字列の配列として返します。キーがシンボルである<code>object</code>のプロパティは含まれません。</p><h4 id="napi_get_all_property_names" tabindex="-1"><code>napi_get_all_property_names</code> <a class="header-anchor" href="#napi_get_all_property_names" aria-label="Permalink to “napi_get_all_property_names”">​</a></h4><p><strong>追加: v13.7.0, v12.17.0, v10.20.0</strong></p><p><strong>N-APIバージョン: 6</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_all_property_names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            napi_key_collection_mode </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            napi_key_filter </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key_filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            napi_key_conversion </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key_conversion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが実行される環境。</li><li><code>[in] object</code>: プロパティを取得するオブジェクト。</li><li><code>[in] key_mode</code>: プロトタイププロパティも取得するかどうか。</li><li><code>[in] key_filter</code>: 取得するプロパティ (列挙可能/読み取り可能/書き込み可能)。</li><li><code>[in] key_conversion</code>: 番号付きプロパティキーを文字列に変換するかどうか。</li><li><code>[out] result</code>: オブジェクトのプロパティ名を表すJavaScript値の配列を表す<code>napi_value</code>。<a href="/ja/nodejs/api/n-api#napi-get-array-length"><code>napi_get_array_length</code></a>と<a href="/ja/nodejs/api/n-api#napi-get-element"><code>napi_get_element</code></a>を使用して<code>result</code>を反復処理できます。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、このオブジェクトで使用可能なプロパティの名前を含む配列を返します。</p><h4 id="napi_set_property" tabindex="-1"><code>napi_set_property</code> <a class="header-anchor" href="#napi_set_property" aria-label="Permalink to “napi_set_property”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_set_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが起動される環境。</li><li><code>[in] object</code>: プロパティを設定するオブジェクト。</li><li><code>[in] key</code>: 設定するプロパティの名前。</li><li><code>[in] value</code>: プロパティの値。</li></ul><p>APIが成功した場合<code>napi_ok</code>を返します。</p><p>このAPIは、渡された<code>Object</code>にプロパティを設定します。</p><h4 id="napi_get_property" tabindex="-1"><code>napi_get_property</code> <a class="header-anchor" href="#napi_get_property" aria-label="Permalink to “napi_get_property”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが起動される環境。</li><li><code>[in] object</code>: プロパティを取得するオブジェクト。</li><li><code>[in] key</code>: 取得するプロパティの名前。</li><li><code>[out] result</code>: プロパティの値。</li></ul><p>APIが成功した場合<code>napi_ok</code>を返します。</p><p>このAPIは、渡された<code>Object</code>から要求されたプロパティを取得します。</p><h4 id="napi_has_property" tabindex="-1"><code>napi_has_property</code> <a class="header-anchor" href="#napi_has_property" aria-label="Permalink to “napi_has_property”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_has_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが起動される環境。</li><li><code>[in] object</code>: クエリを実行するオブジェクト。</li><li><code>[in] key</code>: 存在を確認するプロパティの名前。</li><li><code>[out] result</code>: プロパティがオブジェクトに存在するかどうか。</li></ul><p>APIが成功した場合<code>napi_ok</code>を返します。</p><p>このAPIは、渡された<code>Object</code>に指定された名前のプロパティがあるかどうかを確認します。</p><h4 id="napi_delete_property" tabindex="-1"><code>napi_delete_property</code> <a class="header-anchor" href="#napi_delete_property" aria-label="Permalink to “napi_delete_property”">​</a></h4><p><strong>Added in: v8.2.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_delete_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが起動される環境。</li><li><code>[in] object</code>: クエリを実行するオブジェクト。</li><li><code>[in] key</code>: 削除するプロパティの名前。</li><li><code>[out] result</code>: プロパティの削除が成功したかどうか。 <code>result</code>は、<code>NULL</code>を渡すことでオプションで無視できます。</li></ul><p>APIが成功した場合<code>napi_ok</code>を返します。</p><p>このAPIは、<code>object</code>から<code>key</code>独自のプロパティを削除しようとします。</p><h4 id="napi_has_own_property" tabindex="-1"><code>napi_has_own_property</code> <a class="header-anchor" href="#napi_has_own_property" aria-label="Permalink to “napi_has_own_property”">​</a></h4><p><strong>Added in: v8.2.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_has_own_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                  bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API 呼び出しが起動される環境。</li><li><code>[in] object</code>: クエリするオブジェクト。</li><li><code>[in] key</code>: 存在を確認する独自のプロパティの名前。</li><li><code>[out] result</code>: オブジェクトに独自のプロパティが存在するかどうか。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>この API は、渡された <code>Object</code> に名前付きの独自のプロパティがあるかどうかを確認します。<code>key</code> は <code>string</code> または <code>symbol</code> でなければなりません。そうでない場合、エラーがスローされます。Node-API は、データ型間の変換を実行しません。</p><h4 id="napi_set_named_property" tabindex="-1"><code>napi_set_named_property</code> <a class="header-anchor" href="#napi_set_named_property" aria-label="Permalink to “napi_set_named_property”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_set_named_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> utf8Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API 呼び出しが起動される環境。</li><li><code>[in] object</code>: プロパティを設定するオブジェクト。</li><li><code>[in] utf8Name</code>: 設定するプロパティの名前。</li><li><code>[in] value</code>: プロパティ値。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>このメソッドは、<code>utf8Name</code> として渡された文字列から作成された <code>napi_value</code> を使用して、<a href="/ja/nodejs/api/n-api#napi-set-property"><code>napi_set_property</code></a> を呼び出すのと同じです。</p><h4 id="napi_get_named_property" tabindex="-1"><code>napi_get_named_property</code> <a class="header-anchor" href="#napi_get_named_property" aria-label="Permalink to “napi_get_named_property”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_named_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> utf8Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API 呼び出しが起動される環境。</li><li><code>[in] object</code>: プロパティを取得するオブジェクト。</li><li><code>[in] utf8Name</code>: 取得するプロパティの名前。</li><li><code>[out] result</code>: プロパティの値。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>このメソッドは、<code>utf8Name</code> として渡された文字列から作成された <code>napi_value</code> を使用して、<a href="/ja/nodejs/api/n-api#napi-get-property"><code>napi_get_property</code></a> を呼び出すのと同じです。</p><h4 id="napi_has_named_property" tabindex="-1"><code>napi_has_named_property</code> <a class="header-anchor" href="#napi_has_named_property" aria-label="Permalink to “napi_has_named_property”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_has_named_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> utf8Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが実行される環境。</li><li><code>[in] object</code>: クエリするオブジェクト。</li><li><code>[in] utf8Name</code>: 存在を確認するプロパティの名前。</li><li><code>[out] result</code>: プロパティがオブジェクトに存在するかどうか。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このメソッドは、<code>utf8Name</code>として渡された文字列から作成された<code>napi_value</code>を使用して<a href="/ja/nodejs/api/n-api#napi-has-property"><code>napi_has_property</code></a>を呼び出すことと同等です。</p><h4 id="napi_set_element" tabindex="-1"><code>napi_set_element</code> <a class="header-anchor" href="#napi_set_element" aria-label="Permalink to “napi_set_element”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_set_element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが実行される環境。</li><li><code>[in] object</code>: プロパティを設定するオブジェクト。</li><li><code>[in] index</code>: 設定するプロパティのインデックス。</li><li><code>[in] value</code>: プロパティの値。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、渡された<code>Object</code>の要素を設定します。</p><h4 id="napi_get_element" tabindex="-1"><code>napi_get_element</code> <a class="header-anchor" href="#napi_get_element" aria-label="Permalink to “napi_get_element”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが実行される環境。</li><li><code>[in] object</code>: プロパティを取得するオブジェクト。</li><li><code>[in] index</code>: 取得するプロパティのインデックス。</li><li><code>[out] result</code>: プロパティの値。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、要求されたインデックスにある要素を取得します。</p><h4 id="napi_has_element" tabindex="-1"><code>napi_has_element</code> <a class="header-anchor" href="#napi_has_element" aria-label="Permalink to “napi_has_element”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_has_element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが実行される環境。</li><li><code>[in] object</code>: クエリするオブジェクト。</li><li><code>[in] index</code>: 存在を確認するプロパティのインデックス。</li><li><code>[out] result</code>: プロパティがオブジェクトに存在するかどうか。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、渡された<code>Object</code>が要求されたインデックスに要素を持っているかどうかを返します。</p><h4 id="napi_delete_element" tabindex="-1"><code>napi_delete_element</code> <a class="header-anchor" href="#napi_delete_element" aria-label="Permalink to “napi_delete_element”">​</a></h4><p><strong>Added in: v8.2.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_delete_element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが起動される環境。</li><li><code>[in] object</code>: クエリするオブジェクト。</li><li><code>[in] index</code>: 削除するプロパティのインデックス。</li><li><code>[out] result</code>: 要素の削除が成功したかどうか。 <code>result</code>は、<code>NULL</code>を渡すことで任意に無視できます。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIは、指定された<code>index</code>を<code>object</code>から削除しようとします。</p><h4 id="napi_define_properties" tabindex="-1"><code>napi_define_properties</code> <a class="header-anchor" href="#napi_define_properties" aria-label="Permalink to “napi_define_properties”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_define_properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                   size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> property_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                   const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_property_descriptor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが起動される環境。</li><li><code>[in] object</code>: プロパティの取得元となるオブジェクト。</li><li><code>[in] property_count</code>: <code>properties</code>配列内の要素数。</li><li><code>[in] properties</code>: プロパティ記述子の配列。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このメソッドを使用すると、特定のオブジェクトに対して複数のプロパティを効率的に定義できます。 プロパティはプロパティ記述子を使用して定義されます（<a href="/ja/nodejs/api/n-api#napi-property-descriptor"><code>napi_property_descriptor</code></a>を参照）。 このようなプロパティ記述子の配列が与えられた場合、このAPIは<code>DefineOwnProperty()</code>（ECMA-262仕様の<a href="https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc" target="_blank" rel="noreferrer">セクション9.1.6</a>で説明されています）で定義されているように、オブジェクト上のプロパティを一度に1つずつ設定します。</p><h4 id="napi_object_freeze" tabindex="-1"><code>napi_object_freeze</code> <a class="header-anchor" href="#napi_object_freeze" aria-label="Permalink to “napi_object_freeze”">​</a></h4><p><strong>Added in: v14.14.0, v12.20.0</strong></p><p><strong>N-API version: 8</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_object_freeze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが起動される環境。</li><li><code>[in] object</code>: フリーズするオブジェクト。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このメソッドは、特定のオブジェクトをフリーズします。 これにより、新しいプロパティの追加、既存のプロパティの削除、既存のプロパティの列挙可能性、構成可能性、または書き込み可能性の変更、および既存のプロパティの値の変更が防止されます。 また、オブジェクトのプロトタイプが変更されるのも防ぎます。 これは、ECMA-262仕様の<a href="https://tc39.es/ecma262/#sec-object.freeze" target="_blank" rel="noreferrer">セクション19.1.2.6</a>に記載されています。</p><h4 id="napi_object_seal" tabindex="-1"><code>napi_object_seal</code> <a class="header-anchor" href="#napi_object_seal" aria-label="Permalink to “napi_object_seal”">​</a></h4><p><strong>追加:</strong> v14.14.0, v12.20.0</p><p><strong>N-API バージョン: 8</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_object_seal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: Node-API呼び出しが実行される環境。</li><li><code>[in] object</code>: シールするオブジェクト。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このメソッドは、与えられたオブジェクトをシールします。 これにより、新しいプロパティがオブジェクトに追加されるのを防ぎ、既存のすべてのプロパティを非構成可能としてマークします。 これは、ECMA-262仕様の<a href="https://tc39.es/ecma262/#sec-object.seal" target="_blank" rel="noreferrer">セクション19.1.2.20</a>で説明されています。</p><h2 id="working-with-javascript-functions" tabindex="-1">JavaScript関数との連携 <a class="header-anchor" href="#working-with-javascript-functions" aria-label="Permalink to “JavaScript関数との連携”">​</a></h2><p>Node-APIは、JavaScriptコードがネイティブコードにコールバックできるようにするAPIセットを提供します。 ネイティブコードへのコールバックをサポートするNode-APIは、<code>napi_callback</code>型で表されるコールバック関数を受け取ります。 JavaScript VMがネイティブコードにコールバックすると、提供された<code>napi_callback</code>関数が呼び出されます。 このセクションで説明されているAPIを使用すると、コールバック関数は次のことができます。</p><ul><li>コールバックが呼び出されたコンテキストに関する情報を取得します。</li><li>コールバックに渡された引数を取得します。</li><li>コールバックから<code>napi_value</code>を返します。</li></ul><p>さらに、Node-APIは、ネイティブコードからJavaScript関数を呼び出すことを可能にする関数セットを提供します。 関数は、通常のJavaScript関数呼び出しのように、またはコンストラクタ関数として呼び出すことができます。</p><p><code>napi_property_descriptor</code>アイテムの<code>data</code>フィールドを介してこのAPIに渡される非<code>NULL</code>データは、<code>object</code>に関連付けられ、<code>object</code>とデータを<a href="/ja/nodejs/api/n-api#napi-add-finalizer"><code>napi_add_finalizer</code></a>に渡すことによって、<code>object</code>がガベージコレクションされるたびに解放できます。</p><h3 id="napi_call_function" tabindex="-1"><code>napi_call_function</code> <a class="header-anchor" href="#napi_call_function" aria-label="Permalink to “napi_call_function”">​</a></h3><p><strong>追加:</strong> v8.0.0</p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_call_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                           napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">recv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                           napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                           size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                           const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                           napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] recv</code>: 呼び出された関数に渡される<code>this</code>値。</li><li><code>[in] func</code>: 呼び出すJavaScript関数を表す<code>napi_value</code>。</li><li><code>[in] argc</code>: <code>argv</code>配列内の要素の数。</li><li><code>[in] argv</code>: 関数への引数として渡されるJavaScript値を表す<code>napi_values</code>の配列。</li><li><code>[out] result</code>: 返されたJavaScriptオブジェクトを表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このメソッドを使用すると、ネイティブアドオンからJavaScript関数オブジェクトを呼び出すことができます。 これは、アドオンのネイティブコード<em>から</em>JavaScript<em>へ</em>コールバックする主なメカニズムです。 非同期操作後にJavaScriptにコールバックする特別なケースについては、<a href="/ja/nodejs/api/n-api#napi-make-callback"><code>napi_make_callback</code></a>を参照してください。</p><p>サンプルユースケースは次のようになります。 次のJavaScriptスニペットを検討してください。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AddTwo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global.AddTwo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AddTwo;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>次に、上記の関数は、次のコードを使用してネイティブアドオンから呼び出すことができます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// グローバルオブジェクトの &quot;AddTwo&quot; という名前の関数を取得します</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value global, add_two, arg;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_get_global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_get_named_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, global, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AddTwo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">add_two</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const arg = 1337</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1337</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arg;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AddTwo(arg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value return_val;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_call_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, global, add_two, argc, argv, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">return_val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 結果をネイティブ型に変換します</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_get_value_int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, return_val, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="napi_create_function" tabindex="-1"><code>napi_create_function</code> <a class="header-anchor" href="#napi_create_function" aria-label="Permalink to “napi_create_function”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> utf8name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_callback </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] utf8Name</code>: UTF8としてエンコードされた関数のオプションの名前。これは、新しい関数オブジェクトの<code>name</code>プロパティとしてJavaScript内で表示されます。</li><li><code>[in] length</code>: <code>utf8name</code>のバイト単位の長さ。null終端の場合は<code>NAPI_AUTO_LENGTH</code>。</li><li><code>[in] cb</code>: この関数オブジェクトが呼び出されたときに呼び出す必要があるネイティブ関数。詳細は<a href="/ja/nodejs/api/n-api#napi-callback"><code>napi_callback</code></a>を参照してください。</li><li><code>[in] data</code>: ユーザーが提供するデータコンテキスト。これは、後で呼び出されたときに関数に返されます。</li><li><code>[out] result</code>: 新しく作成された関数のJavaScript関数オブジェクトを表す<code>napi_value</code>。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p>このAPIを使用すると、アドオンの作成者はネイティブコードで関数オブジェクトを作成できます。これは、JavaScript <em>から</em>アドオンのネイティブコード<em>に</em>呼び出すための主要なメカニズムです。</p><p>新しく作成された関数は、この呼び出しの後にスクリプトから自動的に表示されるわけではありません。代わりに、関数がスクリプトからアクセスできるようにするには、JavaScriptに表示されるオブジェクトのプロパティを明示的に設定する必要があります。</p><p>関数をアドオンのモジュールエクスポートの一部として公開するには、エクスポートオブジェクトに新しく作成された関数を設定します。サンプルモジュールは次のようになります。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_callback_info </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_status status;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_value fn;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SayHello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fn);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_set_named_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, exports, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sayHello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fn);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exports;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NAPI_MODULE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NODE_GYP_MODULE_NAME, Init)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>上記のコードが与えられた場合、アドオンはJavaScriptから次のように使用できます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myaddon</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./addon&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myaddon.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>require()</code>に渡される文字列は、<code>.node</code>ファイルの作成を担当する<code>binding.gyp</code>内のターゲットの名前です。</p><p>このAPIに<code>data</code>パラメーターを介して渡される<code>NULL</code>以外のデータは、結果として得られるJavaScript関数（<code>result</code>パラメーターで返されます）に関連付けることができ、JavaScript関数とデータの両方を<a href="/ja/nodejs/api/n-api#napi-add-finalizer"><code>napi_add_finalizer</code></a>に渡すことによって、関数がガベージコレクションされるたびに解放できます。</p><p>JavaScriptの<code>Function</code>は、ECMAScript言語仕様の<a href="https://tc39.github.io/ecma262/#sec-function-objects" target="_blank" rel="noreferrer">Section 19.2</a>で説明されています。</p><h3 id="napi_get_cb_info" tabindex="-1"><code>napi_get_cb_info</code> <a class="header-anchor" href="#napi_get_cb_info" aria-label="Permalink to “napi_get_cb_info”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_cb_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             napi_callback_info </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cbinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             size_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> thisArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>[in] env</code>: APIが起動される環境。</li><li><code>[in] cbinfo</code>: コールバック関数に渡されるコールバック情報。</li><li><code>[in-out] argc</code>: 提供された <code>argv</code> 配列の長さを指定し、引数の実際の数を受け取ります。 <code>argc</code> は、オプションで <code>NULL</code> を渡して無視できます。</li><li><code>[out] argv</code>: 引数がコピーされる <code>napi_value</code> のC配列。 提供された数よりも引数が多い場合、要求された引数の数のみがコピーされます。 提供された引数が要求された数よりも少ない場合、残りの <code>argv</code> は <code>undefined</code> を表す <code>napi_value</code> 値で埋められます。 <code>argv</code> は、オプションで <code>NULL</code> を渡して無視できます。</li><li><code>[out] thisArg</code>: 呼び出しに対するJavaScriptの <code>this</code> 引数を受け取ります。 <code>thisArg</code> は、オプションで <code>NULL</code> を渡して無視できます。</li><li><code>[out] data</code>: コールバックのデータポインタを受け取ります。 <code>data</code> は、オプションで <code>NULL</code> を渡して無視できます。</li></ul><p>APIが成功した場合、<code>napi_ok</code> を返します。</p><p>このメソッドは、コールバック関数内で、指定されたコールバック情報から引数や <code>this</code> ポインタなどの呼び出しに関する詳細を取得するために使用されます。</p><h3 id="napi_get_new_target" tabindex="-1"><code>napi_get_new_target</code> <a class="header-anchor" href="#napi_get_new_target" aria-label="Permalink to “napi_get_new_target”">​</a></h3><p><strong>Added in: v8.6.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_new_target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_callback_info </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cbinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが起動される環境。</li><li><code>[in] cbinfo</code>: コールバック関数に渡されるコールバック情報。</li><li><code>[out] result</code>: コンストラクタ呼び出しの <code>new.target</code>。</li></ul><p>APIが成功した場合、<code>napi_ok</code> を返します。</p><p>このAPIは、コンストラクタ呼び出しの <code>new.target</code> を返します。 現在のコールバックがコンストラクタ呼び出しでない場合、結果は <code>NULL</code> になります。</p><h3 id="napi_new_instance" tabindex="-1"><code>napi_new_instance</code> <a class="header-anchor" href="#napi_new_instance" aria-label="Permalink to “napi_new_instance”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_new_instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cons</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] cons</code>: コンストラクタとして呼び出すJavaScript関数を表す<code>napi_value</code>。</li><li><code>[in] argc</code>: <code>argv</code>配列内の要素数。</li><li><code>[in] argv</code>: コンストラクタへの引数を表す<code>napi_value</code>としてのJavaScript値の配列。 <code>argc</code>がゼロの場合、このパラメータは<code>NULL</code>を渡すことで省略できます。</li><li><code>[out] result</code>: 返されるJavaScriptオブジェクトを表す<code>napi_value</code>。この場合は構築されたオブジェクトです。</li></ul><p>このメソッドは、オブジェクトのコンストラクタを表す指定された<code>napi_value</code>を使用して新しいJavaScript値をインスタンス化するために使用されます。 たとえば、次のスニペットを考えてみましょう。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> param;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>次のスニペットを使用して、Node-APIでおおよそ近似できます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// コンストラクタ関数MyObjectを取得します</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value global, constructor, arg, value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_get_global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_get_named_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, global, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyObject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const arg = &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_string_utf8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, NAPI_AUTO_LENGTH, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arg;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const value = new MyObject(arg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_new_instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, constructor, argc, argv, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><h2 id="object-wrap" tabindex="-1">オブジェクトのラップ <a class="header-anchor" href="#object-wrap" aria-label="Permalink to “オブジェクトのラップ”">​</a></h2><p>Node-APIは、JavaScriptからクラスのコンストラクタとメソッドを呼び出すことができるように、C++クラスとインスタンスを「ラップ」する方法を提供します。</p><p>ラップされたオブジェクトの場合、クラスプロトタイプで呼び出された関数とクラスのインスタンスで呼び出された関数を区別することが難しい場合があります。 この問題に対処するために使用される一般的なパターンは、後で<code>instanceof</code>チェックを行うために、クラスコンストラクタへの永続的な参照を保存することです。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value MyClass_constructor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_get_reference_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, MyClass::es_constructor, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">MyClass_constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is_instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, es_this, MyClass_constructor, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">is_instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (is_instance) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // napi_unwrap() ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // otherwise...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>参照は、不要になったら解放する必要があります。</p><p>JavaScriptオブジェクトが特定のネイティブ型のラッパーであることを保証するには、<code>napi_instanceof()</code>だけでは不十分な場合があります。 これは特に、ラップされたJavaScriptオブジェクトが、プロトタイプメソッドの<code>this</code>値としてではなく、静的メソッドを介してアドオンに渡される場合に当てはまります。 このような場合、正しくないアンラップが発生する可能性があります。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myAddon</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./build/Release/my_addon.node&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`openDatabase()\`は、ネイティブデータベースをラップするJavaScriptオブジェクトを返します</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ハンドル。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dbHandle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myAddon.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`query()\`は、ネイティブクエリハンドルをラップするJavaScriptオブジェクトを返します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> queryHandle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myAddon.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dbHandle, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Gimme ALL the things!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 下の行には偶発的なエラーがあります。 の最初のパラメータ</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`myAddon.queryHasRecords()\`は、データベースハンドル（\`dbHandle\`）である必要があります。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// クエリハンドル（\`query\`）であるため、whileループの正しい条件は</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// あるはずです</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// myAddon.queryHasRecords(dbHandle, queryHandle)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (myAddon.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">queryHasRecords</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(queryHandle, dbHandle)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // レコードを取得します</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>上記の例では、<code>myAddon.queryHasRecords()</code>は2つの引数を受け入れるメソッドです。 1つ目はデータベースハンドルで、2つ目はクエリハンドルです。 内部的には、最初の引数をアンラップし、結果のポインタをネイティブデータベースハンドルにキャストします。 次に、2番目の引数をアンラップし、結果のポインタをクエリハンドルにキャストします。 引数が間違った順序で渡された場合、キャストは機能しますが、基になるデータベース操作が失敗したり、無効なメモリアクセスが発生したりする可能性が高くなります。</p><p>最初の引数から取得したポインタがデータベースハンドルへのポインタであり、同様に、2番目の引数から取得したポインタがクエリハンドルへのポインタであることを確認するために、<code>queryHasRecords()</code>の実装ではタイプ検証を実行する必要があります。 データベースハンドルがインスタンス化されたJavaScriptクラスコンストラクタと、<code>napi_ref</code>のクエリハンドルがインスタンス化されたコンストラクタを保持すると、<code>napi_instanceof()</code>を使用して、<code>queryHashRecords()</code>に渡されたインスタンスが確かに正しいタイプであることを確認できます。</p><p>残念ながら、<code>napi_instanceof()</code>はプロトタイプ操作から保護しません。 たとえば、データベースハンドルインスタンスのプロトタイプは、クエリハンドルインスタンスのコンストラクタのプロトタイプに設定できます。 この場合、データベースハンドルインスタンスはクエリハンドルインスタンスとして表示され、クエリハンドルインスタンスの<code>napi_instanceof()</code>テストに合格しますが、データベースハンドルへのポインタは引き続き含まれます。</p><p>この目的のために、Node-APIはタイプタグ付け機能を提供します。</p><p>タイプタグは、アドオンに固有の128ビット整数です。 Node-APIは、タイプタグを格納するための<code>napi_type_tag</code>構造体を提供します。 このような値が、JavaScriptオブジェクトとともに渡されるか、または<code>napi_value</code>に格納されている<a href="/ja/nodejs/api/n-api#napi-create-external">外部</a>とともに<code>napi_type_tag_object()</code>に渡されると、JavaScriptオブジェクトはタイプタグで「マーク」されます。 「マーク」はJavaScript側では見えません。 JavaScriptオブジェクトがネイティブバインディングに到達すると、<code>napi_check_object_type_tag()</code>を元のタイプタグとともに使用して、JavaScriptオブジェクトが以前にタイプタグで「マーク」されていたかどうかを判断できます。 これにより、<code>napi_instanceof()</code>が提供できるよりも忠実度の高いタイプチェック機能が作成されます。これは、このようなタイプタグ付けがプロトタイプ操作とアドオンのアンロード/リロードに耐えるためです。</p><p>上記の例を続けると、次のスケルトンアドオン実装は、<code>napi_type_tag_object()</code>と<code>napi_check_object_type_tag()</code>の使用法を示しています。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// この値は、データベースハンドルのタイプタグです。 コマンド</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   uuidgen | sed -r -e &#39;s/-//g&#39; -e &#39;s/(.{16})(.*)/0x\\1, 0x\\2/&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 構造体を初期化するために使用する2つの値を取得するために使用できます。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_type_tag DatabaseHandleTypeTag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1edf75a38336451d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a5ed9ce2e4c00c38</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// この値は、クエリハンドルのタイプタグです。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_type_tag QueryHandleTypeTag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9c73317f9fad44a3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93c3920bf3b0ad6a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_callback_info </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_status status;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_value result;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // データベースハンドルをもたらす基になるアクションを実行します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  DatabaseHandle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dbHandle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open_database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 新しい空のJSオブジェクトを作成します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // オブジェクトに、\`DatabaseHandle\`へのポインタを保持していることを示すタグを付けます。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_type_tag_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, result, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DatabaseHandleTypeTag);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // JSオブジェクト内に\`DatabaseHandle\`構造体へのポインタを格納します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, result, dbHandle, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 後で、データベースハンドルであるJavaScriptオブジェクトを受信した場合</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`napi_check_object_type_tag()\`を使用して、それが実際にそのようなものであることを確認できます。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ハンドル。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_callback_info </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_status status;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is_db_handle;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_get_cb_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, info, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argc, argv, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 最初にパラメータとして渡されたオブジェクトに、以前に</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 適用されたタグ。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_check_object_type_tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">                                      argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DatabaseHandleTypeTag,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">is_db_handle);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // そうでない場合は\`TypeError\`をスローします。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">is_db_handle) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // TypeErrorをスローします。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><h3 id="napi_define_class" tabindex="-1"><code>napi_define_class</code> <a class="header-anchor" href="#napi_define_class" aria-label="Permalink to “napi_define_class”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_define_class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> utf8name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_callback </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> property_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_property_descriptor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] utf8name</code>: JavaScriptのコンストラクタ関数の名前。明確にするために、C++クラスをラップする場合はC++クラス名を使用することを推奨します。</li><li><code>[in] length</code>: <code>utf8name</code>のバイト単位の長さ。null終端されている場合は<code>NAPI_AUTO_LENGTH</code>。</li><li><code>[in] constructor</code>: クラスのインスタンスの構築を処理するコールバック関数。C++クラスをラップする場合、このメソッドは<a href="/ja/nodejs/api/n-api#napi-callback"><code>napi_callback</code></a>シグネチャを持つstaticメンバである必要があります。C++クラスのコンストラクタは使用できません。詳細は<a href="/ja/nodejs/api/n-api#napi-callback"><code>napi_callback</code></a>を参照してください。</li><li><code>[in] data</code>: コールバック情報の<code>data</code>プロパティとしてコンストラクタコールバックに渡されるオプションのデータ。</li><li><code>[in] property_count</code>: <code>properties</code>配列引数の項目数。</li><li><code>[in] properties</code>: クラスのstaticおよびインスタンスデータプロパティ、アクセサ、およびメソッドを記述するプロパティ記述子の配列。<code>napi_property_descriptor</code>を参照してください。</li><li><code>[out] result</code>: クラスのコンストラクタ関数を表す<code>napi_value</code>。</li></ul><p>APIが成功した場合<code>napi_ok</code>を返します。</p><p>JavaScriptクラスを定義します。</p><ul><li>クラス名を持つJavaScriptコンストラクタ関数。対応するC++クラスをラップする場合、<code>constructor</code>を介して渡されるコールバックを使用して、新しいC++クラスインスタンスをインスタンス化できます。これは、<a href="/ja/nodejs/api/n-api#napi-wrap"><code>napi_wrap</code></a>を使用して構築されるJavaScriptオブジェクトインスタンス内に配置できます。</li><li>実装が対応するC++クラスの<em>static</em>データプロパティ、アクセサ、およびメソッドを呼び出すことができるコンストラクタ関数のプロパティ（<code>napi_static</code>属性を持つプロパティ記述子によって定義されます）。</li><li>コンストラクタ関数の<code>prototype</code>オブジェクトのプロパティ。C++クラスをラップする場合、JavaScriptオブジェクトインスタンス内に配置されたC++クラスインスタンスを<a href="/ja/nodejs/api/n-api#napi-unwrap"><code>napi_unwrap</code></a>を使用して取得した後、C++クラスの<em>非static</em>データプロパティ、アクセサ、およびメソッドは、<code>napi_static</code>属性なしでプロパティ記述子に指定されたstatic関数から呼び出すことができます。</li></ul><p>C++クラスをラップする場合、<code>constructor</code>を介して渡されるC++コンストラクタコールバックは、実際のクラスコンストラクタを呼び出すクラスのstaticメソッドである必要があります。次に、新しいC++インスタンスをJavaScriptオブジェクトでラップし、ラッパーオブジェクトを返します。詳細については、<a href="/ja/nodejs/api/n-api#napi-wrap"><code>napi_wrap</code></a>を参照してください。</p><p><a href="/ja/nodejs/api/n-api#napi-define-class"><code>napi_define_class</code></a>から返されるJavaScriptコンストラクタ関数は、ネイティブコードからクラスの新しいインスタンスを構築したり、指定された値がクラスのインスタンスであるかどうかを確認するために、後で保存して使用されることがよくあります。その場合、関数値がガベージコレクションされるのを防ぐために、<a href="/ja/nodejs/api/n-api#napi-create-reference"><code>napi_create_reference</code></a>を使用して、それへの強力な永続的な参照を作成し、参照カウントが&gt;= 1に維持されるようにすることができます。</p><p><code>data</code>パラメーターまたは<code>napi_property_descriptor</code>配列項目の<code>data</code>フィールドを介してこのAPIに渡される<code>NULL</code>以外のデータは、結果のJavaScriptコンストラクタ（<code>result</code>パラメーターで返されます）に関連付け、JavaScript関数とデータを<a href="/ja/nodejs/api/n-api#napi-add-finalizer"><code>napi_add_finalizer</code></a>に渡すことによって、クラスがガベージコレクションされるときにいつでも解放できます。</p><h3 id="napi_wrap" tabindex="-1"><code>napi_wrap</code> <a class="header-anchor" href="#napi_wrap" aria-label="Permalink to “napi_wrap”">​</a></h3><p><strong>追加: v8.0.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">js_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> native_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      napi_finalize </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">finalize_cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> finalize_hint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      napi_ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] js_object</code>: ネイティブオブジェクトのラッパーとなる JavaScript オブジェクト。</li><li><code>[in] native_object</code>: JavaScript オブジェクトにラップされるネイティブインスタンス。</li><li><code>[in] finalize_cb</code>: JavaScript オブジェクトがガベージコレクションされたときにネイティブインスタンスを解放するために使用できる、オプションのネイティブコールバック。詳細については、<a href="/ja/nodejs/api/n-api#napi-finalize"><code>napi_finalize</code></a> を参照してください。</li><li><code>[in] finalize_hint</code>: ファイナライズコールバックに渡されるオプションのコンテキストヒント。</li><li><code>[out] result</code>: ラップされたオブジェクトへのオプションの参照。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>ネイティブインスタンスを JavaScript オブジェクトでラップします。ネイティブインスタンスは、後で <code>napi_unwrap()</code> を使用して取得できます。</p><p>JavaScript コードが <code>napi_define_class()</code> を使用して定義されたクラスのコンストラクタを呼び出すと、コンストラクタの <code>napi_callback</code> が呼び出されます。ネイティブクラスのインスタンスを構築した後、コールバックは <code>napi_wrap()</code> を呼び出して、新しく構築されたインスタンスを、コンストラクタコールバックへの <code>this</code> 引数であるすでに作成された JavaScript オブジェクトにラップする必要があります。（この <code>this</code> オブジェクトは、コンストラクタ関数の <code>prototype</code> から作成されたため、すでにすべてのインスタンスプロパティとメソッドの定義を持っています。）</p><p>通常、クラスインスタンスをラップするときは、ファイナライズコールバックを提供する必要があります。これは、ファイナライズコールバックへの <code>data</code> 引数として受信されるネイティブインスタンスを単純に削除します。</p><p>オプションで返される参照は、最初は弱参照です。つまり、参照カウントは 0 です。通常、この参照カウントは、インスタンスを有効な状態に保つ必要のある非同期操作中に一時的にインクリメントされます。</p><p><em>注意</em>: オプションで返される参照（取得した場合）は、ファイナライズコールバックの呼び出しに応じてのみ、<a href="/ja/nodejs/api/n-api#napi-delete-reference"><code>napi_delete_reference</code></a> を介して削除する必要があります。それより前に削除すると、ファイナライズコールバックが呼び出されない可能性があります。したがって、参照を取得するときは、参照の正しい破棄を可能にするために、ファイナライズコールバックも必要です。</p><p>ファイナライザーコールバックは遅延される場合があり、オブジェクトがガベージコレクションされ（弱参照が無効になり）、ファイナライザーがまだ呼び出されていないウィンドウが残ります。<code>napi_wrap()</code> によって返された弱参照に対して <code>napi_get_reference_value()</code> を使用する場合は、空の結果も処理する必要があります。</p><p>オブジェクトに対して 2 回目に <code>napi_wrap()</code> を呼び出すと、エラーが返されます。別のネイティブインスタンスをオブジェクトに関連付けるには、最初に <code>napi_remove_wrap()</code> を使用します。</p><h3 id="napi_unwrap" tabindex="-1"><code>napi_unwrap</code> <a class="header-anchor" href="#napi_unwrap" aria-label="Permalink to “napi_unwrap”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">js_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] js_object</code>: ネイティブインスタンスに関連付けられたオブジェクト。</li><li><code>[out] result</code>: ラップされたネイティブインスタンスへのポインター。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p><code>napi_wrap()</code> を使用して以前に JavaScript オブジェクトにラップされたネイティブインスタンスを取得します。</p><p>JavaScript コードがクラスのメソッドまたはプロパティアクセサーを呼び出すと、対応する <code>napi_callback</code> が呼び出されます。コールバックがインスタンスメソッドまたはアクセサーの場合、コールバックへの <code>this</code> 引数はラッパーオブジェクトです。呼び出しのターゲットであるラップされた C++ インスタンスは、ラッパーオブジェクトで <code>napi_unwrap()</code> を呼び出すことで取得できます。</p><h3 id="napi_remove_wrap" tabindex="-1"><code>napi_remove_wrap</code> <a class="header-anchor" href="#napi_remove_wrap" aria-label="Permalink to “napi_remove_wrap”">​</a></h3><p><strong>Added in: v8.5.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_remove_wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                             napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">js_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] js_object</code>: ネイティブインスタンスに関連付けられたオブジェクト。</li><li><code>[out] result</code>: ラップされたネイティブインスタンスへのポインター。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p><code>napi_wrap()</code> を使用して以前に JavaScript オブジェクト <code>js_object</code> にラップされたネイティブインスタンスを取得し、ラッピングを削除します。ファイナライズコールバックがラッピングに関連付けられていた場合、JavaScript オブジェクトがガベージコレクションされても、それは呼び出されなくなります。</p><h3 id="napi_type_tag_object" tabindex="-1"><code>napi_type_tag_object</code> <a class="header-anchor" href="#napi_type_tag_object" aria-label="Permalink to “napi_type_tag_object”">​</a></h3><p><strong>Added in: v14.8.0, v12.19.0</strong></p><p><strong>N-API version: 8</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_type_tag_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">js_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_type_tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> type_tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] js_object</code>: マークされる JavaScript オブジェクトまたは <a href="/ja/nodejs/api/n-api#napi-create-external">external</a>。</li><li><code>[in] type_tag</code>: オブジェクトがマークされるタグ。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p><code>type_tag</code> ポインターの値を JavaScript オブジェクトまたは <a href="/ja/nodejs/api/n-api#napi-create-external">external</a> に関連付けます。<code>napi_check_object_type_tag()</code> を使用すると、オブジェクトにアタッチされたタグをアドオンが所有するタグと比較して、オブジェクトの型が正しいことを確認できます。</p><p>オブジェクトにすでにタイプタグが関連付けられている場合、この API は <code>napi_invalid_arg</code> を返します。</p><h3 id="napi_check_object_type_tag" tabindex="-1"><code>napi_check_object_type_tag</code> <a class="header-anchor" href="#napi_check_object_type_tag" aria-label="Permalink to “napi_check_object_type_tag”">​</a></h3><p><strong>Added in: v14.8.0, v12.19.0</strong></p><p><strong>N-API version: 8</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_check_object_type_tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                       napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">js_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                       const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_type_tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> type_tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                       bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] js_object</code>: 型タグを調べるJavaScriptオブジェクトまたは<a href="/ja/nodejs/api/n-api#napi-create-external">外部</a>。</li><li><code>[in] type_tag</code>: オブジェクトに見つかったタグと比較するタグ。</li><li><code>[out] result</code>: 指定された型タグがオブジェクトの型タグと一致するかどうか。 オブジェクトに型タグが見つからなかった場合も<code>false</code>が返されます。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p><code>type_tag</code>として指定されたポインタを<code>js_object</code>で見つけることができるものと比較します。 <code>js_object</code>にタグが見つからない場合、またはタグが見つかったが<code>type_tag</code>と一致しない場合、<code>result</code>は<code>false</code>に設定されます。 タグが見つかり、<code>type_tag</code>と一致する場合、<code>result</code>は<code>true</code>に設定されます。</p><h3 id="napi_add_finalizer" tabindex="-1"><code>napi_add_finalizer</code> <a class="header-anchor" href="#napi_add_finalizer" aria-label="Permalink to “napi_add_finalizer”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 5</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_add_finalizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">js_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                               void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> finalize_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               node_api_basic_finalize </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">finalize_cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                               void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> finalize_hint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] js_object</code>: ネイティブデータがアタッチされるJavaScriptオブジェクト。</li><li><code>[in] finalize_data</code>: <code>finalize_cb</code>に渡されるオプションのデータ。</li><li><code>[in] finalize_cb</code>: JavaScriptオブジェクトがガベージコレクションされたときに、ネイティブデータを解放するために使用されるネイティブコールバック。 <a href="/ja/nodejs/api/n-api#napi-finalize"><code>napi_finalize</code></a> で詳細を確認できます。</li><li><code>[in] finalize_hint</code>: ファイナライズコールバックに渡されるオプションのコンテキストヒント。</li><li><code>[out] result</code>: JavaScriptオブジェクトへのオプションの参照。</li></ul><p>APIが成功した場合は<code>napi_ok</code>を返します。</p><p><code>js_object</code>内のJavaScriptオブジェクトがガベージコレクションされたときに呼び出される<code>napi_finalize</code>コールバックを追加します。</p><p>このAPIは、単一のJavaScriptオブジェクトに対して複数回呼び出すことができます。</p><p><em>注意</em>: オプションで返される参照（取得した場合）は、ファイナライズコールバックの呼び出しに応じて<strong>のみ</strong> <a href="/ja/nodejs/api/n-api#napi-delete-reference"><code>napi_delete_reference</code></a>を介して削除する必要があります。 それより前に削除すると、ファイナライズコールバックが呼び出されない可能性があります。 したがって、参照を取得する場合は、参照の正しい破棄を可能にするために、ファイナライズコールバックも必要になります。</p><h4 id="node_api_post_finalizer" tabindex="-1"><code>node_api_post_finalizer</code> <a class="header-anchor" href="#node_api_post_finalizer" aria-label="Permalink to “node_api_post_finalizer”">​</a></h4><p><strong>追加:</strong> v21.0.0, v20.10.0, v18.19.0</p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 実験的</p></div><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_api_post_finalizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                    napi_finalize </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">finalize_cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> finalize_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> finalize_hint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] finalize_cb</code>: JavaScriptオブジェクトがガベージコレクションされたときに、ネイティブデータを解放するために使用されるネイティブコールバック。 <a href="/ja/nodejs/api/n-api#napi-finalize"><code>napi_finalize</code></a>により詳細な情報が提供されます。</li><li><code>[in] finalize_data</code>: <code>finalize_cb</code>に渡されるオプションのデータ。</li><li><code>[in] finalize_hint</code>: finalizeコールバックに渡されるオプションのコンテキストヒント。</li></ul><p>APIが成功した場合<code>napi_ok</code>を返します。</p><p>イベントループで非同期に呼び出される<code>napi_finalize</code>コールバックをスケジュールします。</p><p>通常、ファイナライザはGC（ガベージコレクター）がオブジェクトを収集している間に呼び出されます。その時点で、GC状態の変更を引き起こす可能性のあるNode-APIの呼び出しは無効になり、Node.jsがクラッシュします。</p><p><code>node_api_post_finalizer</code>は、アドオンがそのようなNode-APIの呼び出しをGCファイナライズの外部の時点に延期できるようにすることで、この制限を回避するのに役立ちます。</p><h2 id="simple-asynchronous-operations" tabindex="-1">単純な非同期操作 <a class="header-anchor" href="#simple-asynchronous-operations" aria-label="Permalink to “単純な非同期操作”">​</a></h2><p>アドオンモジュールは、実装の一部としてlibuvから非同期ヘルパーを活用する必要があることがよくあります。 これにより、作業が完了する前にメソッドが返ることができるように、非同期で実行される作業をスケジュールできます。 これにより、Node.jsアプリケーション全体の実行がブロックされるのを防ぐことができます。</p><p>Node-APIは、最も一般的な非同期ユースケースをカバーするこれらのサポート機能のABI安定インターフェイスを提供します。</p><p>Node-APIは、非同期ワーカーの管理に使用される<code>napi_async_work</code>構造体を定義します。 インスタンスは、<a href="/ja/nodejs/api/n-api#napi-create-async-work"><code>napi_create_async_work</code></a>および<a href="/ja/nodejs/api/n-api#napi-delete-async-work"><code>napi_delete_async_work</code></a>で作成/削除されます。</p><p><code>execute</code>および<code>complete</code>コールバックは、エグゼキューターが実行準備完了になったとき、およびタスクが完了したときにそれぞれ呼び出される関数です。</p><p><code>execute</code>関数は、JavaScriptの実行またはJavaScriptオブジェクトとの対話を招く可能性のあるNode-API呼び出しを避ける必要があります。 ほとんどの場合、Node-API呼び出しを行う必要があるコードは、代わりに<code>complete</code>コールバックで行う必要があります。 JavaScriptを実行する可能性が高いため、executeコールバックで<code>napi_env</code>パラメーターを使用しないでください。</p><p>これらの関数は、次のインターフェイスを実装します。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_async_execute_callback)(napi_env env,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                            void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_async_complete_callback)(napi_env env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                             napi_status status,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                             void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>これらのメソッドが呼び出されると、渡される<code>data</code>パラメーターは、アドオンが提供する<code>void*</code>データであり、<code>napi_create_async_work</code>呼び出しに渡されました。</p><p>作成されると、非同期ワーカーは<a href="/ja/nodejs/api/n-api#napi-queue-async-work"><code>napi_queue_async_work</code></a>関数を使用して実行のためにキューに入れることができます。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_queue_async_work</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_async_work </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">work</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>作業が実行を開始する前にキャンセルする必要がある場合は、<a href="/ja/nodejs/api/n-api#napi-cancel-async-work"><code>napi_cancel_async_work</code></a>を使用できます。</p><p><a href="/ja/nodejs/api/n-api#napi-cancel-async-work"><code>napi_cancel_async_work</code></a>を呼び出した後、<code>complete</code>コールバックは<code>napi_cancelled</code>のステータス値で呼び出されます。 キャンセルされた場合でも、<code>complete</code>コールバックの呼び出し前に作業を削除しないでください。</p><h3 id="napi_create_async_work" tabindex="-1"><code>napi_create_async_work</code> <a class="header-anchor" href="#napi_create_async_work" aria-label="Permalink to “napi_create_async_work”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v8.6.0</td><td><code>async_resource</code> および <code>async_resource_name</code> パラメータが追加されました。</td></tr><tr><td>v8.0.0</td><td>v8.0.0 で追加されました。</td></tr></tbody></table></div><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_async_work</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">async_resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">async_resource_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_async_execute_callback </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_async_complete_callback </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                   void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_async_work</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] async_resource</code>: オプションで、非同期処理に関連付けられたオブジェクトであり、可能な <code>async_hooks</code> の <a href="/ja/nodejs/api/async_hooks#initasyncid-type-triggerasyncid-resource"><code>init</code> フック</a> に渡されます。</li><li><code>[in] async_resource_name</code>: <code>async_hooks</code> API によって公開される診断情報のために提供されるリソースの種類を示す識別子。</li><li><code>[in] execute</code>: ロジックを非同期的に実行するために呼び出されるべきネイティブ関数。 指定された関数は、ワーカースレッドプールから呼び出され、メインイベントループスレッドと並行して実行できます。</li><li><code>[in] complete</code>: 非同期ロジックが完了したかキャンセルされたときに呼び出されるネイティブ関数。 指定された関数は、メインイベントループスレッドから呼び出されます。 詳細は、<a href="/ja/nodejs/api/n-api#napi-async-complete-callback"><code>napi_async_complete_callback</code></a> を参照してください。</li><li><code>[in] data</code>: ユーザー提供のデータコンテキスト。 これは、execute 関数および complete 関数に返されます。</li><li><code>[out] result</code>: 新しく作成された非同期処理のハンドルである <code>napi_async_work*</code>。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>このAPIは、ロジックを非同期的に実行するために使用されるワークオブジェクトを割り当てます。 ワークが不要になったら、<a href="/ja/nodejs/api/n-api#napi-delete-async-work"><code>napi_delete_async_work</code></a> を使用して解放する必要があります。</p><p><code>async_resource_name</code> は、ヌル終端されたUTF-8エンコードされた文字列である必要があります。</p><p><code>async_resource_name</code> 識別子はユーザーによって提供され、実行される非同期処理のタイプを表す必要があります。 モジュール名を含めるなど、名前空間を識別子に適用することも推奨されます。 詳細は、<a href="/ja/nodejs/api/async_hooks#type"><code>async_hooks</code> ドキュメント</a>を参照してください。</p><h3 id="napi_delete_async_work" tabindex="-1"><code>napi_delete_async_work</code> <a class="header-anchor" href="#napi_delete_async_work" aria-label="Permalink to “napi_delete_async_work”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_delete_async_work</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_async_work </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">work</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: APIが起動された環境です。</li><li><code>[in] work</code>: <code>napi_create_async_work</code>の呼び出しによって返されるハンドルです。</li></ul><p>APIが成功した場合<code>napi_ok</code>を返します。</p><p>このAPIは、以前に割り当てられたworkオブジェクトを解放します。</p><p>このAPIは、JavaScriptの例外が保留中の場合でも呼び出すことができます。</p><h3 id="napi_queue_async_work" tabindex="-1"><code>napi_queue_async_work</code> <a class="header-anchor" href="#napi_queue_async_work" aria-label="Permalink to “napi_queue_async_work”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_queue_async_work</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_async_work </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">work</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: APIが起動された環境です。</li><li><code>[in] work</code>: <code>napi_create_async_work</code>の呼び出しによって返されるハンドルです。</li></ul><p>APIが成功した場合<code>napi_ok</code>を返します。</p><p>このAPIは、以前に割り当てられたworkの実行をスケジュールするように要求します。 正常に返された場合、同じ<code>napi_async_work</code>アイテムでこのAPIを再度呼び出してはなりません。結果は未定義になります。</p><h3 id="napi_cancel_async_work" tabindex="-1"><code>napi_cancel_async_work</code> <a class="header-anchor" href="#napi_cancel_async_work" aria-label="Permalink to “napi_cancel_async_work”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_cancel_async_work</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                   napi_async_work </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">work</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: APIが起動された環境です。</li><li><code>[in] work</code>: <code>napi_create_async_work</code>の呼び出しによって返されるハンドルです。</li></ul><p>APIが成功した場合<code>napi_ok</code>を返します。</p><p>このAPIは、キューに登録されたworkがまだ開始されていない場合にキャンセルします。 既に実行を開始している場合は、キャンセルできず、<code>napi_generic_failure</code>が返されます。 成功した場合、<code>complete</code>コールバックは、ステータス値<code>napi_cancelled</code>で呼び出されます。 workは、正常にキャンセルされた場合でも、<code>complete</code>コールバックが呼び出される前に削除しないでください。</p><p>このAPIは、JavaScriptの例外が保留中の場合でも呼び出すことができます。</p><h2 id="custom-asynchronous-operations" tabindex="-1">カスタムの非同期操作 <a class="header-anchor" href="#custom-asynchronous-operations" aria-label="Permalink to “カスタムの非同期操作”">​</a></h2><p>上記の単純な非同期work APIは、すべてのシナリオに適しているとは限りません。 他の非同期メカニズムを使用する場合は、非同期操作がランタイムによって適切に追跡されるようにするために、次のAPIが必要です。</p><h3 id="napi_async_init" tabindex="-1"><code>napi_async_init</code> <a class="header-anchor" href="#napi_async_init" aria-label="Permalink to “napi_async_init”">​</a></h3><p><strong>追加: v8.6.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_async_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">async_resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">async_resource_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            napi_async_context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] async_resource</code>: <code>async_hooks</code>の<a href="/ja/nodejs/api/async_hooks#initasyncid-type-triggerasyncid-resource"><code>init</code>フック</a>に渡されうる、<a href="/ja/nodejs/api/async_hooks#async-hooksexecutionasyncresource"><code>async_hooks.executionAsyncResource()</code></a>からアクセスできる、非同期処理に関連付けられたオブジェクト。</li><li><code>[in] async_resource_name</code>: <code>async_hooks</code> APIによって公開される診断情報のために提供されているリソースの種類を識別子。</li><li><code>[out] result</code>: 初期化された非同期コンテキスト。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p><code>async_hooks</code>関連のAPIが正しく動作するように、<code>async_resource</code>オブジェクトは<a href="/ja/nodejs/api/n-api#napi-async-destroy"><code>napi_async_destroy</code></a>まで保持される必要があります。以前のバージョンとのABI互換性を維持するために、メモリリークの発生を避けるために、<code>napi_async_context</code>は<code>async_resource</code>オブジェクトへの強い参照を保持していません。ただし、<code>napi_async_context</code>が<code>napi_async_destroy</code>によって破棄される前に<code>async_resource</code>がJavaScriptエンジンによってガベージコレクションされた場合、<a href="/ja/nodejs/api/n-api#napi-open-callback-scope"><code>napi_open_callback_scope</code></a>や<a href="/ja/nodejs/api/n-api#napi-make-callback"><code>napi_make_callback</code></a>のような<code>napi_async_context</code>関連のAPIを呼び出すと、<code>AsyncLocalStorage</code> APIを使用する際に非同期コンテキストの損失のような問題が発生する可能性があります。</p><p>以前のバージョンとのABI互換性を維持するために、<code>async_resource</code>に<code>NULL</code>を渡してもエラーにはなりません。ただし、これは推奨されません。これは、<code>async_hooks</code>の<a href="/ja/nodejs/api/async_hooks#initasyncid-type-triggerasyncid-resource"><code>init</code>フック</a>と<code>async_hooks.executionAsyncResource()</code>で望ましくない動作を引き起こす可能性があるため、リソースは非同期コールバック間のリンクを提供するために、基盤となる<code>async_hooks</code>実装で必要とされるようになりました。</p><h3 id="napi_async_destroy" tabindex="-1"><code>napi_async_destroy</code> <a class="header-anchor" href="#napi_async_destroy" aria-label="Permalink to “napi_async_destroy”">​</a></h3><p><strong>追加:</strong> v8.6.0</p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_async_destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               napi_async_context </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">async_context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] async_context</code>: 破棄される非同期コンテキスト。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>保留中の JavaScript 例外がある場合でも、この API を呼び出すことができます。</p><h3 id="napi_make_callback" tabindex="-1"><code>napi_make_callback</code> <a class="header-anchor" href="#napi_make_callback" aria-label="Permalink to “napi_make_callback”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v8.6.0</td><td><code>async_context</code> パラメータを追加しました。</td></tr><tr><td>v8.0.0</td><td>追加: v8.0.0</td></tr></tbody></table></div><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_make_callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                           napi_async_context </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">async_context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                           napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">recv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                           napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                           size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                           const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                           napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] async_context</code>: コールバックを呼び出す非同期操作のコンテキスト。 これは通常、以前に <a href="/ja/nodejs/api/n-api#napi-async-init"><code>napi_async_init</code></a> から取得した値である必要があります。 以前のバージョンとの ABI 互換性を維持するために、<code>async_context</code> に <code>NULL</code> を渡してもエラーにはなりません。 ただし、これにより、非同期フックの動作が正しくなくなります。 考えられる問題としては、<code>AsyncLocalStorage</code> API を使用する際の非同期コンテキストの損失などがあります。</li><li><code>[in] recv</code>: 呼び出された関数に渡される <code>this</code> 値。</li><li><code>[in] func</code>: 呼び出す JavaScript 関数を表す <code>napi_value</code>。</li><li><code>[in] argc</code>: <code>argv</code> 配列内の要素の数。</li><li><code>[in] argv</code>: 関数の引数を表す <code>napi_value</code> としての JavaScript 値の配列。 <code>argc</code> がゼロの場合、このパラメータは <code>NULL</code> を渡すことで省略できます。</li><li><code>[out] result</code>: 返される JavaScript オブジェクトを表す <code>napi_value</code>。</li></ul><p>API が成功した場合、<code>napi_ok</code> を返します。</p><p>このメソッドを使用すると、ネイティブアドオンから JavaScript 関数オブジェクトを呼び出すことができます。 この API は <code>napi_call_function</code> と似ています。 ただし、非同期操作から戻った後 (スタックに他のスクリプトがない場合) に、ネイティブコードから JavaScript <em>に</em>コールバックする <em>ため</em>に使用されます。 これは <code>node::MakeCallback</code> の非常に単純なラッパーです。</p><p><code>napi_async_complete_callback</code> 内から <code>napi_make_callback</code> を使用する必要は <em>ありません</em>。 その状況では、コールバックの非同期コンテキストはすでに設定されているため、<code>napi_call_function</code> を直接呼び出すだけで十分です。 <code>napi_create_async_work</code> を使用しないカスタム非同期動作を実装する場合は、<code>napi_make_callback</code> 関数が必要になる場合があります。</p><p>コールバック中に JavaScript によってマイクロタスクキューでスケジュールされた <code>process.nextTick</code> または Promise は、C/C++ に戻る前に実行されます。</p><h3 id="napi_open_callback_scope" tabindex="-1"><code>napi_open_callback_scope</code> <a class="header-anchor" href="#napi_open_callback_scope" aria-label="Permalink to “napi_open_callback_scope”">​</a></h3><p><strong>Added in: v9.6.0</strong></p><p><strong>N-API version: 3</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_open_callback_scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                 napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resource_object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                 napi_async_context </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                 napi_callback_scope</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] resource_object</code>: <code>async_hooks</code> <a href="/ja/nodejs/api/async_hooks#initasyncid-type-triggerasyncid-resource"><code>init</code>フック</a>に渡される非同期処理に関連付けられたオブジェクト。このパラメータは非推奨であり、実行時には無視されます。代わりに<a href="/ja/nodejs/api/n-api#napi-async-init"><code>napi_async_init</code></a>の<code>async_resource</code>パラメータを使用してください。</li><li><code>[in] context</code>: コールバックを呼び出す非同期操作のコンテキスト。これは、以前に<a href="/ja/nodejs/api/n-api#napi-async-init"><code>napi_async_init</code></a>から取得した値である必要があります。</li><li><code>[out] result</code>: 新しく作成されたスコープ。</li></ul><p>(例えば、promiseを解決するような) 特定のNode-API呼び出しを行う際に、コールバックに関連付けられたスコープと同等のものが存在する必要がある場合があります。スタック上に他のスクリプトがない場合、<a href="/ja/nodejs/api/n-api#napi-open-callback-scope"><code>napi_open_callback_scope</code></a>と<a href="/ja/nodejs/api/n-api#napi-close-callback-scope"><code>napi_close_callback_scope</code></a>関数を使用して、必要なスコープを開閉できます。</p><h3 id="napi_close_callback_scope" tabindex="-1"><code>napi_close_callback_scope</code> <a class="header-anchor" href="#napi_close_callback_scope" aria-label="Permalink to “napi_close_callback_scope”">​</a></h3><p><strong>Added in: v9.6.0</strong></p><p><strong>N-API version: 3</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_close_callback_scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                  napi_callback_scope </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] scope</code>: 閉じられるスコープ。</li></ul><p>このAPIは、保留中のJavaScript例外がある場合でも呼び出すことができます。</p><h2 id="version-management" tabindex="-1">バージョン管理 <a class="header-anchor" href="#version-management" aria-label="Permalink to “バージョン管理”">​</a></h2><h3 id="napi_get_node_version" tabindex="-1"><code>napi_get_node_version</code> <a class="header-anchor" href="#napi_get_node_version" aria-label="Permalink to “napi_get_node_version”">​</a></h3><p><strong>Added in: v8.4.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> major;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> minor;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> patch;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> release;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} napi_node_version;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_node_version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_node_version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[out] version</code>: Node.js自身のバージョン情報へのポインタ。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>この関数は、現在実行中のNode.jsのメジャー、マイナー、パッチバージョンを<code>version</code>構造体に格納し、<code>release</code>フィールドに<a href="/ja/nodejs/api/process#processrelease"><code>process.release.name</code></a>の値を格納します。</p><p>返されるバッファは静的に割り当てられており、解放する必要はありません。</p><h3 id="napi_get_version" tabindex="-1"><code>napi_get_version</code> <a class="header-anchor" href="#napi_get_version" aria-label="Permalink to “napi_get_version”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             uint32_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: API が起動される環境。</li><li><code>[out] result</code>: サポートされている Node-API の最高バージョン。</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この API は、Node.js ランタイムでサポートされている最高の Node-API バージョンを返します。 Node-API は、Node.js の新しいリリースが追加の API 関数をサポートするように、追加される予定です。 アドオンが、それをサポートする Node.js のバージョンで実行されている場合に新しい関数を使用し、それをサポートしない Node.js のバージョンで実行されている場合はフォールバック動作を提供できるようにするには、次の手順を実行します。</p><ul><li><code>napi_get_version()</code> を呼び出して、API が利用可能かどうかを判断します。</li><li>利用可能な場合は、<code>uv_dlsym()</code> を使用して関数へのポインタを動的にロードします。</li><li>動的にロードされたポインタを使用して関数を呼び出します。</li><li>関数が利用できない場合は、関数を使用しない代替実装を提供します。</li></ul><h2 id="memory-management" tabindex="-1">メモリ管理 <a class="header-anchor" href="#memory-management" aria-label="Permalink to “メモリ管理”">​</a></h2><h3 id="napi_adjust_external_memory" tabindex="-1"><code>napi_adjust_external_memory</code> <a class="header-anchor" href="#napi_adjust_external_memory" aria-label="Permalink to “napi_adjust_external_memory”">​</a></h3><p><strong>Added in: v8.5.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_adjust_external_memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                    int64_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> change_in_bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                    int64_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が起動される環境。</li><li><code>[in] change_in_bytes</code>: JavaScript オブジェクトによって維持されている外部で割り当てられたメモリの変化量。</li><li><code>[out] result</code>: 調整された値</li></ul><p>API が成功した場合は <code>napi_ok</code> を返します。</p><p>この関数は、JavaScript オブジェクトによって維持されている外部で割り当てられたメモリの量（つまり、ネイティブアドオンによって割り当てられた独自のメモリを指す JavaScript オブジェクト）を V8 に示します。 外部で割り当てられたメモリを登録すると、通常よりもグローバルガベージコレクションがより頻繁にトリガーされます。</p><h2 id="promises" tabindex="-1">Promise <a class="header-anchor" href="#promises" aria-label="Permalink to “Promise”">​</a></h2><p>Node-API は、ECMA 仕様の <a href="https://tc39.github.io/ecma262/#sec-promise-objects" target="_blank" rel="noreferrer">セクション 25.4</a> で説明されているように、<code>Promise</code> オブジェクトを作成するための機能を提供します。 これは、オブジェクトのペアとしてプロミスを実装します。 <code>napi_create_promise()</code> によってプロミスが作成されると、「遅延」オブジェクトが作成され、<code>Promise</code> と共に返されます。 遅延オブジェクトは、作成された <code>Promise</code> にバインドされ、<code>napi_resolve_deferred()</code> または <code>napi_reject_deferred()</code> を使用して <code>Promise</code> を解決または拒否する唯一の手段です。 <code>napi_create_promise()</code> によって作成された遅延オブジェクトは、<code>napi_resolve_deferred()</code> または <code>napi_reject_deferred()</code> によって解放されます。 <code>Promise</code> オブジェクトは JavaScript に返され、通常の方法で使用できます。</p><p>たとえば、プロミスを作成して非同期ワーカーに渡すには:</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_deferred deferred;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value promise;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status status;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// プロミスを作成します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_create_promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">deferred</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 遅延を非同期アクションを実行する関数に渡します。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">do_something_asynchronous</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deferred);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JS にプロミスを返します</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> promise;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>上記の関数 <code>do_something_asynchronous()</code> は、非同期アクションを実行し、遅延を解決または拒否して、プロミスを終了し、遅延を解放します。</p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_deferred deferred;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_value undefined;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status status;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 遅延を終了するための値を作成します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_get_undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 非同期アクションが成功したかどうかに応じて、遅延に関連付けられたプロミスを解決または拒否します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (asynchronous_action_succeeded) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_resolve_deferred</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, deferred, undefined);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> napi_reject_deferred</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env, deferred, undefined);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> napi_ok) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// この時点で、遅延は解放されているため、NULL を割り当てる必要があります。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">deferred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="napi_create_promise" tabindex="-1"><code>napi_create_promise</code> <a class="header-anchor" href="#napi_create_promise" aria-label="Permalink to “napi_create_promise”">​</a></h3><p><strong>Added in: v8.5.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_deferred</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> deferred</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[out] deferred</code>: 新規に作成されたdeferredオブジェクト。関連付けられたPromiseを解決または拒否するために、後で<code>napi_resolve_deferred()</code>または<code>napi_reject_deferred()</code>に渡すことができます。</li><li><code>[out] promise</code>: deferredオブジェクトに関連付けられたJavaScript Promise。</li></ul><p>APIが成功した場合、<code>napi_ok</code>を返します。</p><p>このAPIは、deferredオブジェクトとJavaScript Promiseを作成します。</p><h3 id="napi_resolve_deferred" tabindex="-1"><code>napi_resolve_deferred</code> <a class="header-anchor" href="#napi_resolve_deferred" aria-label="Permalink to “napi_resolve_deferred”">​</a></h3><p><strong>Added in: v8.5.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_resolve_deferred</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_deferred </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">deferred</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                  napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] deferred</code>: 解決する関連Promiseを持つdeferredオブジェクト。</li><li><code>[in] resolution</code>: Promiseを解決する値。</li></ul><p>このAPIは、関連付けられたdeferredオブジェクトを介してJavaScript Promiseを解決します。 したがって、対応するdeferredオブジェクトが利用可能なJavaScript Promiseを解決するためにのみ使用できます。 これは事実上、Promiseが<code>napi_create_promise()</code>を使用して作成され、その呼び出しから返されたdeferredオブジェクトがこのAPIに渡されるために保持されている必要があることを意味します。</p><p>deferredオブジェクトは、正常に完了すると解放されます。</p><h3 id="napi_reject_deferred" tabindex="-1"><code>napi_reject_deferred</code> <a class="header-anchor" href="#napi_reject_deferred" aria-label="Permalink to “napi_reject_deferred”">​</a></h3><p><strong>Added in: v8.5.0</strong></p><p><strong>N-API version: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_reject_deferred</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_deferred </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">deferred</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rejection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[in] deferred</code>: 解決する関連Promiseを持つdeferredオブジェクト。</li><li><code>[in] rejection</code>: Promiseを拒否する値。</li></ul><p>このAPIは、関連付けられたdeferredオブジェクトを介してJavaScript Promiseを拒否します。 したがって、対応するdeferredオブジェクトが利用可能なJavaScript Promiseを拒否するためにのみ使用できます。 これは事実上、Promiseが<code>napi_create_promise()</code>を使用して作成され、その呼び出しから返されたdeferredオブジェクトがこのAPIに渡されるために保持されている必要があることを意味します。</p><p>deferredオブジェクトは、正常に完了すると解放されます。</p><h3 id="napi_is_promise" tabindex="-1"><code>napi_is_promise</code> <a class="header-anchor" href="#napi_is_promise" aria-label="Permalink to “napi_is_promise”">​</a></h3><p><strong>追加: v8.5.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_is_promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                            bool*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> is_promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] value</code>: 調査する値。</li><li><code>[out] is_promise</code>: <code>promise</code> がネイティブの Promise オブジェクトであるかどうかを示すフラグ（つまり、基盤となるエンジンによって作成された Promise オブジェクト）。</li></ul><h2 id="script-execution" tabindex="-1">スクリプトの実行 <a class="header-anchor" href="#script-execution" aria-label="Permalink to “スクリプトの実行”">​</a></h2><p>Node-API は、基盤となる JavaScript エンジンを使用して JavaScript を含む文字列を実行するための API を提供します。</p><h3 id="napi_run_script" tabindex="-1"><code>napi_run_script</code> <a class="header-anchor" href="#napi_run_script" aria-label="Permalink to “napi_run_script”">​</a></h3><p><strong>追加: v8.5.0</strong></p><p><strong>N-API バージョン: 1</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_run_script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                        napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                        napi_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] script</code>: 実行するスクリプトを含む JavaScript 文字列。</li><li><code>[out] result</code>: スクリプトの実行によって得られた値。</li></ul><p>この関数は、JavaScript コードの文字列を実行し、次の注意点とともにその結果を返します。</p><ul><li><code>eval</code> とは異なり、この関数はスクリプトが現在のレキシカルスコープにアクセスすることを許可しないため、<a href="/ja/nodejs/api/modules#the-module-scope">モジュールスコープ</a>にもアクセスできません。つまり、<code>require</code> などの疑似グローバルは使用できません。</li><li>スクリプトは<a href="/ja/nodejs/api/globals">グローバルスコープ</a>にアクセスできます。スクリプト内の関数と <code>var</code> 宣言は、<a href="/ja/nodejs/api/globals#global"><code>global</code></a> オブジェクトに追加されます。<code>let</code> と <code>const</code> を使用して行われた変数宣言はグローバルに表示されますが、<a href="/ja/nodejs/api/globals#global"><code>global</code></a> オブジェクトには追加されません。</li><li>スクリプト内の <code>this</code> の値は <a href="/ja/nodejs/api/globals#global"><code>global</code></a> です。</li></ul><h2 id="libuv-event-loop" tabindex="-1">libuv イベントループ <a class="header-anchor" href="#libuv-event-loop" aria-label="Permalink to “libuv イベントループ”">​</a></h2><p>Node-API は、特定の <code>napi_env</code> に関連付けられた現在のイベントループを取得する関数を提供します。</p><h3 id="napi_get_uv_event_loop" tabindex="-1"><code>napi_get_uv_event_loop</code> <a class="header-anchor" href="#napi_get_uv_event_loop" aria-label="Permalink to “napi_get_uv_event_loop”">​</a></h3><p><strong>追加: v9.3.0, v8.10.0</strong></p><p><strong>N-API バージョン: 2</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_uv_event_loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                               struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uv_loop_s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[out] loop</code>: 現在の libuv ループインスタンス。</li></ul><p>注: libuv は時間の経過とともに比較的安定していますが、ABI の安定性は保証されていません。この関数の使用は避ける必要があります。この関数を使用すると、Node.js のバージョン間で動作しないアドオンになる可能性があります。<a href="/ja/nodejs/api/n-api#asynchronous-thread-safe-function-calls">非同期スレッドセーフ関数呼び出し</a>は、多くのユースケースの代替手段です。</p><h2 id="asynchronous-thread-safe-function-calls" tabindex="-1">非同期スレッドセーフ関数呼び出し <a class="header-anchor" href="#asynchronous-thread-safe-function-calls" aria-label="Permalink to “非同期スレッドセーフ関数呼び出し”">​</a></h2><p>JavaScript関数は通常、ネイティブアドオンのメインスレッドからのみ呼び出すことができます。アドオンが追加のスレッドを作成する場合、<code>napi_env</code>、<code>napi_value</code>、または<code>napi_ref</code>を必要とするNode-API関数は、それらのスレッドから呼び出してはなりません。</p><p>アドオンに追加のスレッドがあり、それらのスレッドによって完了した処理に基づいてJavaScript関数を呼び出す必要がある場合、それらのスレッドはアドオンのメインスレッドと通信して、メインスレッドが代わりにJavaScript関数を呼び出すことができるようにする必要があります。スレッドセーフ関数APIは、これを行う簡単な方法を提供します。</p><p>これらのAPIは、型<code>napi_threadsafe_function</code>と、この型のオブジェクトを作成、破棄、および呼び出すためのAPIを提供します。<code>napi_create_threadsafe_function()</code>は、複数のスレッドから呼び出すことができるJavaScript関数を保持する<code>napi_value</code>への永続的な参照を作成します。呼び出しは非同期的に行われます。これは、JavaScriptコールバックで呼び出す値がキューに入れられ、キュー内の各値に対して、最終的にJavaScript関数が呼び出されることを意味します。</p><p><code>napi_threadsafe_function</code>の作成時に、<code>napi_finalize</code>コールバックを提供できます。このコールバックは、スレッドセーフ関数が破棄されようとしているときに、メインスレッドで呼び出されます。コンテキストと構築中に与えられた終了データを取得し、たとえば<code>uv_thread_join()</code>を呼び出すことによって、スレッドの後処理を行う機会を提供します。<strong>メインループスレッドを除き、終了コールバックが完了した後、スレッドセーフ関数を使用するスレッドは存在してはなりません。</strong></p><p><code>napi_create_threadsafe_function()</code>の呼び出し中に与えられた<code>context</code>は、<code>napi_get_threadsafe_function_context()</code>の呼び出しによって任意のスレッドから取得できます。</p><h3 id="calling-a-thread-safe-function" tabindex="-1">スレッドセーフ関数の呼び出し <a class="header-anchor" href="#calling-a-thread-safe-function" aria-label="Permalink to “スレッドセーフ関数の呼び出し”">​</a></h3><p><code>napi_call_threadsafe_function()</code>を使用して、JavaScriptへの呼び出しを開始できます。<code>napi_call_threadsafe_function()</code>は、APIがブロッキング的に動作するかどうかを制御するパラメータを受け入れます。<code>napi_tsfn_nonblocking</code>に設定されている場合、APIは非ブロッキング的に動作し、キューがいっぱいでデータがキューに正常に追加されなかった場合は<code>napi_queue_full</code>を返します。<code>napi_tsfn_blocking</code>に設定されている場合、APIはキューに空きができるまでブロックします。スレッドセーフ関数が最大キューサイズ0で作成された場合、<code>napi_call_threadsafe_function()</code>は決してブロックしません。</p><p>キューがいっぱいの場合、JavaScriptスレッドがデッドロックする可能性があるため、JavaScriptスレッドから<code>napi_tsfn_blocking</code>で<code>napi_call_threadsafe_function()</code>を呼び出すべきではありません。</p><p>JavaScriptへの実際の呼び出しは、<code>call_js_cb</code>パラメータを介して与えられたコールバックによって制御されます。<code>call_js_cb</code>は、<code>napi_call_threadsafe_function()</code>の正常な呼び出しによってキューに入れられた各値に対して、メインスレッドで一度呼び出されます。そのようなコールバックが与えられていない場合、デフォルトのコールバックが使用され、結果のJavaScript呼び出しには引数がありません。<code>call_js_cb</code>コールバックは、呼び出すJavaScript関数を<code>napi_value</code>としてパラメータで受け取り、<code>napi_threadsafe_function</code>を作成するときに使用された<code>void*</code>コンテキストポインタと、セカンダリスレッドのいずれかによって作成された次のデータポインタも受け取ります。次に、コールバックは<code>napi_call_function()</code>などのAPIを使用してJavaScriptを呼び出すことができます。</p><p>コールバックは、<code>env</code>と<code>call_js_cb</code>の両方を<code>NULL</code>に設定して呼び出すこともできます。これは、JavaScriptへの呼び出しが不可能になったことを示しますが、解放する必要があるアイテムがキューに残っています。これは通常、スレッドセーフ関数がまだアクティブな状態でNode.jsプロセスが終了したときに発生します。</p><p>Node-APIはコールバックに適したコンテキストで<code>call_js_cb</code>を実行するため、<code>napi_make_callback()</code>を介してJavaScriptを呼び出す必要はありません。</p><p>イベントループの各ティックで、ゼロ個以上のキューに入れられたアイテムが呼び出される場合があります。アプリケーションは、コールバックの呼び出しが進められ、時間が進むにつれてイベントが呼び出されるという特定の動作以外の特定の動作に依存すべきではありません。</p><h3 id="reference-counting-of-thread-safe-functions" tabindex="-1">スレッドセーフ関数の参照カウント <a class="header-anchor" href="#reference-counting-of-thread-safe-functions" aria-label="Permalink to “スレッドセーフ関数の参照カウント”">​</a></h3><p>スレッドは、その存在期間中に <code>napi_threadsafe_function</code> オブジェクトに追加および削除できます。 したがって、作成時に初期スレッド数を指定することに加えて、<code>napi_acquire_threadsafe_function</code> を呼び出して、新しいスレッドがスレッドセーフ関数を使用し始めることを示すことができます。 同様に、<code>napi_release_threadsafe_function</code> を呼び出して、既存のスレッドがスレッドセーフ関数の使用を停止することを示すことができます。</p><p><code>napi_threadsafe_function</code> オブジェクトは、オブジェクトを使用するすべてのスレッドが <code>napi_release_threadsafe_function()</code> を呼び出したか、<code>napi_call_threadsafe_function</code> の呼び出しに応じて <code>napi_closing</code> の戻りステータスを受け取った場合に破棄されます。 キューは、<code>napi_threadsafe_function</code> が破棄される前に空にされます。 <code>napi_release_threadsafe_function()</code> は、特定の <code>napi_threadsafe_function</code> と組み合わせて行われる最後API呼び出しである必要があります。これは、呼び出しが完了した後、<code>napi_threadsafe_function</code> がまだ割り当てられているという保証がないためです。 同じ理由で、<code>napi_call_threadsafe_function</code> の呼び出しに応じて <code>napi_closing</code> の戻り値を受け取った後は、スレッドセーフ関数を使用しないでください。 <code>napi_threadsafe_function</code> に関連付けられたデータは、<code>napi_create_threadsafe_function()</code> に渡された <code>napi_finalize</code> コールバックで解放できます。 <code>napi_create_threadsafe_function</code> のパラメーター <code>initial_thread_count</code> は、作成時に <code>napi_acquire_threadsafe_function</code> を複数回呼び出す代わりに、スレッドセーフ関数の最初の取得数をマークします。</p><p><code>napi_threadsafe_function</code> を使用するスレッドの数がゼロに達すると、<code>napi_acquire_threadsafe_function()</code> を呼び出すことによって、それ以上のスレッドがそれを使用し始めることはできません。 実際、<code>napi_release_threadsafe_function()</code> を除く、それに関連付けられた後続のすべてのAPI呼び出しは、<code>napi_closing</code> のエラー値を返します。</p><p>スレッドセーフ関数は、<code>napi_release_threadsafe_function()</code> に <code>napi_tsfn_abort</code> の値を渡すことによって「中止」できます。 これにより、参照カウントがゼロに達する前でも、<code>napi_release_threadsafe_function()</code> を除く、スレッドセーフ関数に関連付けられた後続のすべてのAPIが <code>napi_closing</code> を返します。 特に、<code>napi_call_threadsafe_function()</code> は <code>napi_closing</code> を返し、スレッドセーフ関数への非同期呼び出しを行うことができなくなったことをスレッドに通知します。 これは、スレッドを終了するための基準として使用できます。 <strong><code>napi_call_threadsafe_function()</code> から <code>napi_closing</code> の戻り値を受け取ると、スレッドはスレッドセーフ関数が割り当てられていることが保証されなくなるため、それ以上使用してはなりません。</strong></p><h3 id="deciding-whether-to-keep-the-process-running" tabindex="-1">プロセスを実行し続けるかどうかの決定 <a class="header-anchor" href="#deciding-whether-to-keep-the-process-running" aria-label="Permalink to “プロセスを実行し続けるかどうかの決定”">​</a></h3><p>libuvハンドルと同様に、スレッドセーフ関数は「参照」および「非参照」にすることができます。「参照」されたスレッドセーフ関数は、それが作成されたスレッドのイベントループが、スレッドセーフ関数が破棄されるまで生き続けるようにします。対照的に、「非参照」されたスレッドセーフ関数は、イベントループが終了するのを防ぎません。この目的のために、API <code>napi_ref_threadsafe_function</code> および <code>napi_unref_threadsafe_function</code> が存在します。</p><p><code>napi_unref_threadsafe_function</code> はスレッドセーフ関数を破棄可能としてマークせず、 <code>napi_ref_threadsafe_function</code> も破棄されるのを防ぎません。</p><h3 id="napi_create_threadsafe_function" tabindex="-1"><code>napi_create_threadsafe_function</code> <a class="header-anchor" href="#napi_create_threadsafe_function" aria-label="Permalink to “napi_create_threadsafe_function”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v12.6.0, v10.17.0</td><td>カスタム <code>call_js_cb</code> で <code>func</code> パラメータをオプションにしました。</td></tr><tr><td>v10.6.0</td><td>v10.6.0 で追加</td></tr></tbody></table></div><p><strong>N-API バージョン: 4</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_create_threadsafe_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">async_resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_value </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">async_resource_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> max_queue_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> initial_thread_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> thread_finalize_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_finalize </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">thread_finalize_cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_threadsafe_function_call_js </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">call_js_cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                napi_threadsafe_function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li><code>[in] env</code>: API が起動される環境。</li><li><code>[in] func</code>: 別のスレッドから呼び出すオプションの JavaScript 関数。 <code>NULL</code> が <code>call_js_cb</code> に渡される場合は、提供する必要があります。</li><li><code>[in] async_resource</code>: 可能な <code>async_hooks</code> <a href="/ja/nodejs/api/async_hooks#initasyncid-type-triggerasyncid-resource"><code>init</code> フック</a> に渡される非同期処理に関連付けられたオプションのオブジェクト。</li><li><code>[in] async_resource_name</code>: <code>async_hooks</code> API によって公開される診断情報のために提供されているリソースの種類に対する識別子を提供する JavaScript 文字列。</li><li><code>[in] max_queue_size</code>: キューの最大サイズ。制限がない場合は <code>0</code>。</li><li><code>[in] initial_thread_count</code>: 取得の初期数、つまり、この関数を使用するメインスレッドを含む、スレッドの初期数。</li><li><code>[in] thread_finalize_data</code>: <code>thread_finalize_cb</code> に渡すオプションのデータ。</li><li><code>[in] thread_finalize_cb</code>: <code>napi_threadsafe_function</code> が破棄されるときに呼び出すオプションの関数。</li><li><code>[in] context</code>: 結果の <code>napi_threadsafe_function</code> にアタッチするオプションのデータ。</li><li><code>[in] call_js_cb</code>: 別のスレッドでの呼び出しに応じて JavaScript 関数を呼び出すオプションのコールバック。このコールバックは、メインスレッドで呼び出されます。指定しない場合、JavaScript 関数はパラメータなしで、 <code>this</code> 値として <code>undefined</code> を使用して呼び出されます。 <a href="/ja/nodejs/api/n-api#napi-threadsafe-function-call-js"><code>napi_threadsafe_function_call_js</code></a> は、詳細を提供します。</li><li><code>[out] result</code>: 非同期スレッドセーフ JavaScript 関数。</li></ul><p><strong>変更履歴:</strong></p><ul><li>実験的 ( <code>NAPI_EXPERIMENTAL</code> が定義されている場合): <code>call_js_cb</code> でスローされたキャッチされない例外は、無視される代わりに、<a href="/ja/nodejs/api/process#event-uncaughtexception"><code>&#39;uncaughtException&#39;</code></a> イベントで処理されます。</li></ul><h3 id="napi_get_threadsafe_function_context" tabindex="-1"><code>napi_get_threadsafe_function_context</code> <a class="header-anchor" href="#napi_get_threadsafe_function_context" aria-label="Permalink to “napi_get_threadsafe_function_context”">​</a></h3><p><strong>Added in: v10.6.0</strong></p><p><strong>N-API version: 4</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_get_threadsafe_function_context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_threadsafe_function </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                     void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] func</code>: コンテキストを取得するスレッドセーフ関数。</li><li><code>[out] result</code>: コンテキストを格納する場所。</li></ul><p>このAPIは、<code>func</code>を使用する任意のスレッドから呼び出すことができます。</p><h3 id="napi_call_threadsafe_function" tabindex="-1"><code>napi_call_threadsafe_function</code> <a class="header-anchor" href="#napi_call_threadsafe_function" aria-label="Permalink to “napi_call_threadsafe_function”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v14.5.0</td><td><code>napi_would_deadlock</code> のサポートは元に戻されました。</td></tr><tr><td>v14.1.0</td><td>メインスレッドまたはワーカー スレッドから <code>napi_tsfn_blocking</code> を使用して呼び出され、キューがいっぱいの場合は、<code>napi_would_deadlock</code> を返します。</td></tr><tr><td>v10.6.0</td><td>Added in: v10.6.0</td></tr></tbody></table></div><p><strong>N-API version: 4</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_call_threadsafe_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_threadsafe_function </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              void*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              napi_threadsafe_function_call_mode </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">is_blocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>[in] func</code>: 呼び出す非同期スレッドセーフ JavaScript 関数。</li><li><code>[in] data</code>: スレッドセーフ JavaScript 関数の作成時に提供されたコールバック <code>call_js_cb</code> を介して JavaScript に送信されるデータ。</li><li><code>[in] is_blocking</code>: キューがいっぱいのときに呼び出しをブロックする必要があることを示す <code>napi_tsfn_blocking</code>、またはキューがいっぱいのときにステータス <code>napi_queue_full</code> で直ちに返される必要があることを示す <code>napi_tsfn_nonblocking</code> のいずれかの値を取ることができるフラグ。</li></ul><p>JavaScript スレッドから <code>napi_tsfn_blocking</code> でこのAPIを呼び出すべきではありません。キューがいっぱいの場合は、JavaScript スレッドがデッドロックする可能性があります。</p><p>このAPIは、<code>napi_release_threadsafe_function()</code> が任意の スレッドから <code>abort</code> を <code>napi_tsfn_abort</code> に設定して呼び出された場合、<code>napi_closing</code> を返します。この値は、APIが <code>napi_ok</code> を返す場合にのみキューに追加されます。</p><p>このAPIは、<code>func</code>を使用する任意のスレッドから呼び出すことができます。</p><h3 id="napi_acquire_threadsafe_function" tabindex="-1"><code>napi_acquire_threadsafe_function</code> <a class="header-anchor" href="#napi_acquire_threadsafe_function" aria-label="Permalink to “napi_acquire_threadsafe_function”">​</a></h3><p><strong>Added in: v10.6.0</strong></p><p><strong>N-API version: 4</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_acquire_threadsafe_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_threadsafe_function </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] func</code>: 使用を開始する非同期スレッドセーフ JavaScript 関数。</li></ul><p>スレッドは、他の スレッドセーフ 関数 API に <code>func</code> を渡す前に、このAPIを呼び出して、<code>func</code> を使用することを示す必要があります。これにより、他のすべての スレッド が <code>func</code> の使用を停止したときに、<code>func</code> が破棄されるのを防ぎます。</p><p>このAPIは、<code>func</code> の使用を開始する任意のスレッドから呼び出すことができます。</p><h3 id="napi_release_threadsafe_function" tabindex="-1"><code>napi_release_threadsafe_function</code> <a class="header-anchor" href="#napi_release_threadsafe_function" aria-label="Permalink to “napi_release_threadsafe_function”">​</a></h3><p><strong>追加: v10.6.0</strong></p><p><strong>N-API バージョン: 4</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_release_threadsafe_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(napi_threadsafe_function </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 napi_threadsafe_function_release_mode </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] func</code>: 参照カウントを減らす非同期スレッドセーフ JavaScript 関数。</li><li><code>[in] mode</code>: フラグ。値は、現在のスレッドがスレッドセーフ関数をこれ以上呼び出さないことを示す <code>napi_tsfn_release</code>、または、現在のスレッドだけでなく、他のスレッドもスレッドセーフ関数をこれ以上呼び出さないことを示す <code>napi_tsfn_abort</code> のいずれかになります。<code>napi_tsfn_abort</code> に設定した場合、<code>napi_call_threadsafe_function()</code> のさらなる呼び出しは <code>napi_closing</code> を返し、それ以上の値はキューに入れられません。</li></ul><p>スレッドは、<code>func</code> の使用を停止するときにこの API を呼び出す必要があります。この API を呼び出した後、<code>func</code> をスレッドセーフ API に渡すと、<code>func</code> が破棄されている可能性があるため、未定義の結果になります。</p><p>この API は、<code>func</code> の使用を停止する任意のスレッドから呼び出すことができます。</p><h3 id="napi_ref_threadsafe_function" tabindex="-1"><code>napi_ref_threadsafe_function</code> <a class="header-anchor" href="#napi_ref_threadsafe_function" aria-label="Permalink to “napi_ref_threadsafe_function”">​</a></h3><p><strong>追加: v10.6.0</strong></p><p><strong>N-API バージョン: 4</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_ref_threadsafe_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_threadsafe_function </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] func</code>: 参照するスレッドセーフ関数。</li></ul><p>この API は、<code>func</code> が破棄されるまでメインスレッドで実行されているイベントループが終了しないようにするために使用されます。<a href="https://docs.libuv.org/en/v1.x/handle#c.uv_ref" target="_blank" rel="noreferrer"><code>uv_ref</code></a> と同様に、べき等でもあります。</p><p><code>napi_unref_threadsafe_function</code> はスレッドセーフ関数を破棄可能としてマークするわけでもなく、<code>napi_ref_threadsafe_function</code> は破棄されるのを防ぐわけでもありません。その目的のために <code>napi_acquire_threadsafe_function</code> と <code>napi_release_threadsafe_function</code> が利用可能です。</p><p>この API は、メインスレッドからのみ呼び出すことができます。</p><h3 id="napi_unref_threadsafe_function" tabindex="-1"><code>napi_unref_threadsafe_function</code> <a class="header-anchor" href="#napi_unref_threadsafe_function" aria-label="Permalink to “napi_unref_threadsafe_function”">​</a></h3><p><strong>追加: v10.6.0</strong></p><p><strong>N-API バージョン: 4</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napi_unref_threadsafe_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, napi_threadsafe_function </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>[in] env</code>: API が呼び出される環境。</li><li><code>[in] func</code>: 参照解除するスレッドセーフ関数。</li></ul><p>この API は、<code>func</code> が破棄される前にメインスレッドで実行されているイベントループが終了する可能性があることを示すために使用されます。<a href="https://docs.libuv.org/en/v1.x/handle#c.uv_unref" target="_blank" rel="noreferrer"><code>uv_unref</code></a> と同様に、べき等でもあります。</p><p>この API は、メインスレッドからのみ呼び出すことができます。</p><h2 id="miscellaneous-utilities" tabindex="-1">その他のユーティリティ <a class="header-anchor" href="#miscellaneous-utilities" aria-label="Permalink to “その他のユーティリティ”">​</a></h2><h3 id="node_api_get_module_file_name" tabindex="-1"><code>node_api_get_module_file_name</code> <a class="header-anchor" href="#node_api_get_module_file_name" aria-label="Permalink to “node_api_get_module_file_name”">​</a></h3><p><strong>追加: v15.9.0, v14.18.0, v12.22.0</strong></p><p><strong>N-API バージョン: 9</strong></p><div class="language-C line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAPI_EXTERN napi_status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_api_get_module_file_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_api_basic_env </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>[in] env</code>: APIが呼び出される環境。</li><li><code>[out] result</code>: アドオンがロードされた場所の絶対パスを含むURL。ローカルファイルシステムのファイルの場合、<code>file://</code>で始まります。文字列はnullで終端され、<code>env</code>によって所有されるため、変更または解放してはなりません。</li></ul><p>アドオンのロードプロセス中にアドオンのファイル名を確立できなかった場合、<code>result</code>は空の文字列になることがあります。</p>`,1599)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};