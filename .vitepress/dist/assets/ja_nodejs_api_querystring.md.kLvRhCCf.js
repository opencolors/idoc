import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js ドキュメント - クエリ文字列","description":"Node.jsのこのドキュメントのセクションでは、URLクエリ文字列の解析とフォーマットのためのユーティリティを提供するquerystringモジュールについて詳しく説明しています。特殊文字のエスケープとアンエスケープ、ネストされたオブジェクトの処理、クエリ文字列のシリアライズ管理の方法が含まれています。","frontmatter":{"title":"Node.js ドキュメント - クエリ文字列","description":"Node.jsのこのドキュメントのセクションでは、URLクエリ文字列の解析とフォーマットのためのユーティリティを提供するquerystringモジュールについて詳しく説明しています。特殊文字のエスケープとアンエスケープ、ネストされたオブジェクトの処理、クエリ文字列のシリアライズ管理の方法が含まれています。","head":[["meta",{"name":"og:title","content":"Node.js ドキュメント - クエリ文字列 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.jsのこのドキュメントのセクションでは、URLクエリ文字列の解析とフォーマットのためのユーティリティを提供するquerystringモジュールについて詳しく説明しています。特殊文字のエスケープとアンエスケープ、ネストされたオブジェクトの処理、クエリ文字列のシリアライズ管理の方法が含まれています。"}],["meta",{"name":"twitter:title","content":"Node.js ドキュメント - クエリ文字列 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.jsのこのドキュメントのセクションでは、URLクエリ文字列の解析とフォーマットのためのユーティリティを提供するquerystringモジュールについて詳しく説明しています。特殊文字のエスケープとアンエスケープ、ネストされたオブジェクトの処理、クエリ文字列のシリアライズ管理の方法が含まれています。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/querystring"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/querystring"}]]},"headers":[],"relativePath":"ja/nodejs/api/querystring.md","filePath":"ja/nodejs/api/querystring.md","lastUpdated":null}`),a={name:`ja/nodejs/api/querystring.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="query-string" tabindex="-1">クエリ文字列 <a class="header-anchor" href="#query-string" aria-label="Permalink to “クエリ文字列”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 2</a> - 安定</p></div><p><strong>ソースコード:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/querystring.js" target="_blank" rel="noreferrer">lib/querystring.js</a></p><p><code>node:querystring</code> モジュールは、URL クエリ文字列をパースおよびフォーマットするためのユーティリティを提供します。これは次のようにしてアクセスできます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:querystring&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>querystring</code> は <a href="/ja/nodejs/api/url#class-urlsearchparams">&lt;URLSearchParams&gt;</a> よりも高性能ですが、標準化された API ではありません。パフォーマンスが重要でない場合、またはブラウザコードとの互換性が必要な場合は、<a href="/ja/nodejs/api/url#class-urlsearchparams">&lt;URLSearchParams&gt;</a> を使用してください。</p><h2 id="querystringdecode" tabindex="-1"><code>querystring.decode()</code> <a class="header-anchor" href="#querystringdecode" aria-label="Permalink to “querystring.decode()”">​</a></h2><p><strong>追加: v0.1.99</strong></p><p><code>querystring.decode()</code> 関数は <code>querystring.parse()</code> のエイリアスです。</p><h2 id="querystringencode" tabindex="-1"><code>querystring.encode()</code> <a class="header-anchor" href="#querystringencode" aria-label="Permalink to “querystring.encode()”">​</a></h2><p><strong>追加: v0.1.99</strong></p><p><code>querystring.encode()</code> 関数は <code>querystring.stringify()</code> のエイリアスです。</p><h2 id="querystringescapestr" tabindex="-1"><code>querystring.escape(str)</code> <a class="header-anchor" href="#querystringescapestr" aria-label="Permalink to “querystring.escape(str)”">​</a></h2><p><strong>追加: v0.1.25</strong></p><ul><li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>querystring.escape()</code> メソッドは、URL クエリ文字列の特定の要件に合わせて最適化された方法で、与えられた <code>str</code> に対して URL パーセントエンコーディングを実行します。</p><p><code>querystring.escape()</code> メソッドは <code>querystring.stringify()</code> によって使用され、通常は直接使用されることは想定されていません。これは主に、アプリケーションコードが必要に応じて <code>querystring.escape</code> を代替関数に割り当てることによって、代替のパーセントエンコーディング実装を提供できるようにするためにエクスポートされます。</p><h2 id="querystringparsestr-sep-eq-options" tabindex="-1"><code>querystring.parse(str[, sep[, eq[, options]]])</code> <a class="header-anchor" href="#querystringparsestr-sep-eq-options" aria-label="Permalink to “querystring.parse(str[, sep[, eq[, options]]])”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v8.0.0</td><td>複数の空のエントリが正しく解析されるようになりました (例: <code>&amp;=&amp;=</code>)。</td></tr><tr><td>v6.0.0</td><td>返されるオブジェクトは <code>Object.prototype</code> から継承しなくなりました。</td></tr><tr><td>v6.0.0, v4.2.4</td><td><code>eq</code> パラメータの長さが <code>1</code> より長くなりました。</td></tr><tr><td>v0.1.25</td><td>追加: v0.1.25</td></tr></tbody></table></div><ul><li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> パースする URL クエリ文字列</li><li><code>sep</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> クエリ文字列内のキーと値のペアを区切るために使用されるサブ文字列。<strong>デフォルト:</strong> <code>&#39;&amp;&#39;</code>。</li><li><code>eq</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a>. クエリ文字列内のキーと値を区切るために使用されるサブ文字列。<strong>デフォルト:</strong> <code>&#39;=&#39;</code>。</li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>decodeURIComponent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> クエリ文字列内のパーセントエンコードされた文字をデコードするときに使用する関数。<strong>デフォルト:</strong> <code>querystring.unescape()</code>。</li><li><code>maxKeys</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> パースするキーの最大数を指定します。キーのカウント制限を削除するには <code>0</code> を指定します。<strong>デフォルト:</strong> <code>1000</code>。</li></ul></li></ul><p><code>querystring.parse()</code> メソッドは、URL クエリ文字列 (<code>str</code>) をキーと値のペアのコレクションにパースします。</p><p>たとえば、クエリ文字列 <code>&#39;foo=bar&amp;abc=xyz&amp;abc=123&#39;</code> は次のようにパースされます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xyz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>querystring.parse()</code> メソッドによって返されるオブジェクトは、JavaScript の <code>Object</code> から原型的に継承 <em>しません</em>。これは、<code>obj.toString()</code>、<code>obj.hasOwnProperty()</code> などの一般的な <code>Object</code> メソッドが定義されておらず、<em>機能しない</em> ことを意味します。</p><p>デフォルトでは、クエリ文字列内のパーセントエンコードされた文字は、UTF-8 エンコーディングを使用すると想定されます。別の文字エンコーディングが使用されている場合は、別の <code>decodeURIComponent</code> オプションを指定する必要があります。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// gbkDecodeURIComponent 関数が既に存在すると仮定...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;w=%D6%D0%CE%C4&amp;foo=bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  { decodeURIComponent: gbkDecodeURIComponent });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="querystringstringifyobj-sep-eq-options" tabindex="-1"><code>querystring.stringify(obj[, sep[, eq[, options]]])</code> <a class="header-anchor" href="#querystringstringifyobj-sep-eq-options" aria-label="Permalink to “querystring.stringify(obj[, sep[, eq[, options]]])”">​</a></h2><p><strong>Added in: v0.1.25</strong></p><ul><li><code>obj</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> URLクエリ文字列にシリアライズするオブジェクト</li><li><code>sep</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> クエリ文字列のキーと値のペアを区切るために使用される部分文字列。 <strong>Default:</strong> <code>&#39;&amp;&#39;</code>。</li><li><code>eq</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a>. クエリ文字列のキーと値を区切るために使用される部分文字列。 <strong>Default:</strong> <code>&#39;=&#39;</code>。</li><li><code>options</code><ul><li><code>encodeURIComponent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> URLセーフでない文字をクエリ文字列でパーセントエンコーディングに変換するときに使用する関数。 <strong>Default:</strong> <code>querystring.escape()</code>。</li></ul></li></ul><p><code>querystring.stringify()</code> メソッドは、オブジェクトの &quot;自身のプロパティ&quot; を反復処理して、指定された <code>obj</code> から URL クエリ文字列を生成します。</p><p><code>obj</code> に渡された次の型の値をシリアライズします。<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noreferrer">&lt;bigint&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noreferrer">&lt;bigint[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean[]&gt;</a> 数値は有限でなければなりません。他の入力値はすべて空の文字列に強制変換されます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, baz: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;qux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;quux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], corge: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns &#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, baz: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;qux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns &#39;foo:bar;baz:qux&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>デフォルトでは、クエリ文字列内でパーセントエンコーディングを必要とする文字は、UTF-8としてエンコードされます。別のエンコーディングが必要な場合は、別の <code>encodeURIComponent</code> オプションを指定する必要があります。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// gbkEncodeURIComponent 関数がすでに存在すると仮定します。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ w: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;中文&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      { encodeURIComponent: gbkEncodeURIComponent });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="querystringunescapestr" tabindex="-1"><code>querystring.unescape(str)</code> <a class="header-anchor" href="#querystringunescapestr" aria-label="Permalink to “querystring.unescape(str)”">​</a></h2><p><strong>Added in: v0.1.25</strong></p><ul><li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>querystring.unescape()</code> メソッドは、与えられた <code>str</code> に対して、URL でパーセントエンコードされた文字のデコードを行います。</p><p><code>querystring.unescape()</code> メソッドは、<code>querystring.parse()</code> によって使用され、通常は直接使用されることは想定されていません。これは主に、アプリケーションコードが <code>querystring.unescape</code> を代替関数に割り当てることで、必要に応じて代替のデコード実装を提供できるようにするためにエクスポートされています。</p><p>デフォルトでは、<code>querystring.unescape()</code> メソッドは、JavaScript の組み込み <code>decodeURIComponent()</code> メソッドを使用してデコードを試みます。それが失敗した場合、不正な URL でエラーをスローしない、より安全な同等のものが使用されます。</p>`,40)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};