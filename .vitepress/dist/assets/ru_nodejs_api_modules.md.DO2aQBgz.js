import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Документация Node.js - Модули","description":"Изучите документацию Node.js по модулям, включая CommonJS, ES модули и управление зависимостями и разрешением модулей.","frontmatter":{"title":"Документация Node.js - Модули","description":"Изучите документацию Node.js по модулям, включая CommonJS, ES модули и управление зависимостями и разрешением модулей.","head":[["meta",{"name":"og:title","content":"Документация Node.js - Модули | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Изучите документацию Node.js по модулям, включая CommonJS, ES модули и управление зависимостями и разрешением модулей."}],["meta",{"name":"twitter:title","content":"Документация Node.js - Модули | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Изучите документацию Node.js по модулям, включая CommonJS, ES модули и управление зависимостями и разрешением модулей."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/api/modules"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/api/modules"}]]},"headers":[],"relativePath":"ru/nodejs/api/modules.md","filePath":"ru/nodejs/api/modules.md","lastUpdated":null}`),a={name:`ru/nodejs/api/modules.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="modules-commonjs-modules" tabindex="-1">Модули: модули CommonJS <a class="header-anchor" href="#modules-commonjs-modules" aria-label="Permalink to “Модули: модули CommonJS”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[Стабильно: 2 - Стабильно]</p><p><a href="/ru/nodejs/api/documentation#stability-index">Стабильно: 2</a> <a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 2</a> - Стабильно</p></div><p>Модули CommonJS - это оригинальный способ упаковки JavaScript кода для Node.js. Node.js также поддерживает стандарт <a href="/ru/nodejs/api/esm">модулей ECMAScript</a>, используемый браузерами и другими средами выполнения JavaScript.</p><p>В Node.js каждый файл рассматривается как отдельный модуль. Например, рассмотрим файл с именем <code>foo.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> circle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./circle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Площадь круга с радиусом 4 равна \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">circle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>В первой строке <code>foo.js</code> загружает модуль <code>circle.js</code>, который находится в том же каталоге, что и <code>foo.js</code>.</p><p>Вот содержимое <code>circle.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">circumference</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Модуль <code>circle.js</code> экспортировал функции <code>area()</code> и <code>circumference()</code>. Функции и объекты добавляются в корень модуля путем указания дополнительных свойств для специального объекта <code>exports</code>.</p><p>Переменные, локальные для модуля, будут приватными, поскольку модуль обернут в функцию Node.js (см. <a href="/ru/nodejs/api/modules#the-module-wrapper">обертку модуля</a>). В этом примере переменная <code>PI</code> является приватной для <code>circle.js</code>.</p><p>Свойству <code>module.exports</code> можно присвоить новое значение (например, функцию или объект).</p><p>В следующем коде <code>bar.js</code> использует модуль <code>square</code>, который экспортирует класс Square:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Square</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./square.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mySquare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Площадь mySquare равна \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mySquare</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Модуль <code>square</code> определен в <code>square.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Присвоение exports не изменит модуль, необходимо использовать module.exports</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Система модулей CommonJS реализована во <a href="/ru/nodejs/api/module">встроенном модуле <code>module</code></a>.</p><h2 id="enabling" tabindex="-1">Включение <a class="header-anchor" href="#enabling" aria-label="Permalink to “Включение”">​</a></h2><p>Node.js имеет две системы модулей: модули CommonJS и <a href="/ru/nodejs/api/esm">модули ECMAScript</a>.</p><p>По умолчанию Node.js будет рассматривать следующее как модули CommonJS:</p><ul><li>Файлы с расширением <code>.cjs</code>;</li><li>Файлы с расширением <code>.js</code>, когда ближайший родительский файл <code>package.json</code> содержит поле верхнего уровня <a href="/ru/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> со значением <code>&quot;commonjs&quot;</code>.</li><li>Файлы с расширением <code>.js</code> или без расширения, когда ближайший родительский файл <code>package.json</code> не содержит поле верхнего уровня <a href="/ru/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> или нет <code>package.json</code> ни в одной из родительских папок; если файл не содержит синтаксис, который выдает ошибку, если он не оценивается как модуль ES. Авторы пакетов должны включать поле <a href="/ru/nodejs/api/packages#type"><code>&quot;type&quot;</code></a>, даже в пакетах, где все источники являются CommonJS. Явное указание <code>type</code> пакета упростит инструментам сборки и загрузчикам определение того, как следует интерпретировать файлы в пакете.</li><li>Файлы с расширением, отличным от <code>.mjs</code>, <code>.cjs</code>, <code>.json</code>, <code>.node</code> или <code>.js</code> (когда ближайший родительский файл <code>package.json</code> содержит поле верхнего уровня <a href="/ru/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> со значением <code>&quot;module&quot;</code>, эти файлы будут распознаны как модули CommonJS только в том случае, если они включены через <code>require()</code>, а не при использовании в качестве точки входа командной строки программы).</li></ul><p>Подробнее см. в разделе <a href="/ru/nodejs/api/packages#determining-module-system">Определение системы модулей</a>.</p><p>Вызов <code>require()</code> всегда использует загрузчик модулей CommonJS. Вызов <code>import()</code> всегда использует загрузчик модулей ECMAScript.</p><h2 id="accessing-the-main-module" tabindex="-1">Доступ к основному модулю <a class="header-anchor" href="#accessing-the-main-module" aria-label="Permalink to “Доступ к основному модулю”">​</a></h2><p>Когда файл запускается непосредственно из Node.js, <code>require.main</code> устанавливается в его <code>module</code>. Это означает, что можно определить, был ли файл запущен напрямую, проверив <code>require.main === module</code>.</p><p>Для файла <code>foo.js</code> это будет <code>true</code> при запуске через <code>node foo.js</code>, но <code>false</code> при запуске через <code>require(&#39;./foo&#39;)</code>.</p><p>Когда точка входа не является модулем CommonJS, <code>require.main</code> имеет значение <code>undefined</code>, и основной модуль становится недоступным.</p><h2 id="package-manager-tips" tabindex="-1">Советы для менеджеров пакетов <a class="header-anchor" href="#package-manager-tips" aria-label="Permalink to “Советы для менеджеров пакетов”">​</a></h2><p>Семантика функции <code>require()</code> в Node.js была разработана таким образом, чтобы быть достаточно общей для поддержки разумных структур каталогов. Программы управления пакетами, такие как <code>dpkg</code>, <code>rpm</code> и <code>npm</code>, надеемся, сочтут возможным создавать собственные пакеты из модулей Node.js без изменений.</p><p>Ниже мы приводим предлагаемую структуру каталогов, которая могла бы работать:</p><p>Предположим, что мы хотим, чтобы папка по адресу <code>/usr/lib/node/\\&lt;some-package\\&gt;/\\&lt;some-version\\&gt;</code> содержала содержимое определенной версии пакета.</p><p>Пакеты могут зависеть друг от друга. Чтобы установить пакет <code>foo</code>, может потребоваться установить определенную версию пакета <code>bar</code>. Пакет <code>bar</code> сам может иметь зависимости, и в некоторых случаях они могут даже конфликтовать или образовывать циклические зависимости.</p><p>Поскольку Node.js ищет <code>realpath</code> всех загружаемых модулей (то есть разрешает символические ссылки), а затем <a href="/ru/nodejs/api/modules#loading-from-node-modules-folders">ищет их зависимости в папках <code>node_modules</code></a>, эту ситуацию можно решить с помощью следующей архитектуры:</p><ul><li><code>/usr/lib/node/foo/1.2.3/</code>: Содержимое пакета <code>foo</code>, версия 1.2.3.</li><li><code>/usr/lib/node/bar/4.3.2/</code>: Содержимое пакета <code>bar</code>, от которого зависит <code>foo</code>.</li><li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code>: Символическая ссылка на <code>/usr/lib/node/bar/4.3.2/</code>.</li><li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code>: Символические ссылки на пакеты, от которых зависит <code>bar</code>.</li></ul><p>Таким образом, даже если встречается цикл или возникают конфликты зависимостей, каждый модуль сможет получить версию своей зависимости, которую он может использовать.</p><p>Когда код в пакете <code>foo</code> выполняет <code>require(&#39;bar&#39;)</code>, он получит версию, на которую указывает символическая ссылка в <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code>. Затем, когда код в пакете <code>bar</code> вызывает <code>require(&#39;quux&#39;)</code>, он получит версию, на которую указывает символическая ссылка в <code>/usr/lib/node/bar/4.3.2/node_modules/quux</code>.</p><p>Кроме того, чтобы сделать процесс поиска модулей еще более оптимальным, вместо того чтобы помещать пакеты непосредственно в <code>/usr/lib/node</code>, мы могли бы поместить их в <code>/usr/lib/node_modules/\\&lt;name\\&gt;/\\&lt;version\\&gt;</code>. Тогда Node.js не будет беспокоиться о поиске отсутствующих зависимостей в <code>/usr/node_modules</code> или <code>/node_modules</code>.</p><p>Чтобы сделать модули доступными для Node.js REPL, может быть полезно также добавить папку <code>/usr/lib/node_modules</code> в переменную окружения <code>$NODE_PATH</code>. Поскольку поиск модулей с использованием папок <code>node_modules</code> является относительным и основан на реальном пути файлов, вызывающих <code>require()</code>, сами пакеты могут находиться где угодно.</p><h2 id="loading-ecmascript-modules-using-require" tabindex="-1">Загрузка модулей ECMAScript с использованием <code>require()</code> <a class="header-anchor" href="#loading-ecmascript-modules-using-require" aria-label="Permalink to “Загрузка модулей ECMAScript с использованием require()”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v23.5.0</td><td>Эта функция больше не выдает экспериментальное предупреждение по умолчанию, хотя предупреждение все еще можно вывести с помощью --trace-require-module.</td></tr><tr><td>v23.0.0</td><td>Эта функция больше не скрыта за флагом CLI <code>--experimental-require-module</code>.</td></tr><tr><td>v23.0.0</td><td>Поддержка экспорта <code>&#39;module.exports&#39;</code> для совместимости в <code>require(esm)</code>.</td></tr><tr><td>v22.0.0, v20.17.0</td><td>Добавлено в: v22.0.0, v20.17.0</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[Стабильно: 1 - Экспериментально]</p><p><a href="/ru/nodejs/api/documentation#stability-index">Стабильно: 1</a> <a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 1</a>.2 - Кандидат на выпуск</p></div><p>Расширение <code>.mjs</code> зарезервировано для <a href="/ru/nodejs/api/esm">модулей ECMAScript</a>. См. раздел <a href="/ru/nodejs/api/packages#determining-module-system">Определение системы модулей</a> для получения дополнительной информации о том, какие файлы анализируются как модули ECMAScript.</p><p><code>require()</code> поддерживает загрузку только тех модулей ECMAScript, которые соответствуют следующим требованиям:</p><ul><li>Модуль является полностью синхронным (не содержит <code>await</code> верхнего уровня); и</li><li>Выполняется одно из следующих условий:</li></ul><p>Если загружаемый модуль ES соответствует требованиям, <code>require()</code> может загрузить его и вернуть объект пространства имен модуля. В этом случае он похож на динамический <code>import()</code>, но запускается синхронно и возвращает объект пространства имен напрямую.</p><p>Рассмотрим следующие модули ES:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// distance.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// point.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Модуль CommonJS может загрузить их с помощью <code>require()</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./distance.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(distance);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [Module: null prototype] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   distance: [Function: distance]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./point.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(point);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [Module: null prototype] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   default: [class Point],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   __esModule: true,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Для обеспечения совместимости с существующими инструментами, которые преобразуют модули ES в CommonJS, которые затем могут загружать реальные модули ES через <code>require()</code>, возвращаемое пространство имен будет содержать свойство <code>__esModule: true</code>, если у него есть экспорт <code>default</code>, чтобы потребляющий код, сгенерированный инструментами, мог распознавать экспорты default в реальных модулях ES. Если пространство имен уже определяет <code>__esModule</code>, это не будет добавлено. Это свойство является экспериментальным и может измениться в будущем. Его следует использовать только инструментам, преобразующим модули ES в модули CommonJS, следуя существующим соглашениям экосистемы. Код, написанный непосредственно в CommonJS, должен избегать зависимости от него.</p><p>Когда модуль ES содержит как именованные экспорты, так и экспорт по умолчанию, результатом, возвращаемым <code>require()</code>, является объект пространства имен модуля, который помещает экспорт по умолчанию в свойство <code>.default</code>, аналогично результатам, возвращаемым <code>import()</code>. Чтобы настроить то, что должно быть возвращено непосредственно <code>require(esm)</code>, модуль ES может экспортировать желаемое значение, используя строковое имя <code>&quot;module.exports&quot;</code>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// point.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`distance\` потеряна для потребителей CommonJS этого модуля, если только она не</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// добавлена в \`Point\` как статическое свойство.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;module.exports&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./point.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Point); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [class Point]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Именованные экспорты теряются, когда используется &#39;module.exports&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./point.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(distance); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Обратите внимание, что в приведенном выше примере, когда используется имя экспорта <code>module.exports</code>, именованные экспорты будут потеряны для потребителей CommonJS. Чтобы разрешить потребителям CommonJS продолжать доступ к именованным экспортам, модуль может убедиться, что экспорт по умолчанию является объектом с именованными экспортами, прикрепленными к нему как свойства. Например, в приведенном выше примере <code>distance</code> может быть прикреплена к экспорту по умолчанию, классу <code>Point</code>, как статический метод.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> distance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;module.exports&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./point.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Point); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [class Point]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./point.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(distance); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [Function: distance]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Если модуль, который <code>require()</code>&#39;ится, содержит <code>await</code> верхнего уровня или граф модулей, который он <code>import</code>&#39;ит, содержит <code>await</code> верхнего уровня, будет выброшено <a href="/ru/nodejs/api/errors#err-require-async-module"><code>ERR_REQUIRE_ASYNC_MODULE</code></a>. В этом случае пользователям следует загрузить асинхронный модуль с помощью <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import" target="_blank" rel="noreferrer"><code>import()</code></a>.</p><p>Если <code>--experimental-print-required-tla</code> включен, вместо того, чтобы выбрасывать <code>ERR_REQUIRE_ASYNC_MODULE</code> перед вычислением, Node.js вычислит модуль, попытается найти ожидание верхнего уровня и распечатает их местоположение, чтобы помочь пользователям исправить их.</p><p>Поддержка загрузки модулей ES с помощью <code>require()</code> в настоящее время является экспериментальной и может быть отключена с помощью <code>--no-experimental-require-module</code>. Чтобы распечатать, где используется эта функция, используйте <a href="/ru/nodejs/api/cli#trace-require-modulemode"><code>--trace-require-module</code></a>.</p><p>Эту функцию можно обнаружить, проверив, является ли <a href="/ru/nodejs/api/process#processfeaturesrequire-module"><code>process.features.require_module</code></a> <code>true</code>.</p><h2 id="all-together" tabindex="-1">Всё вместе <a class="header-anchor" href="#all-together" aria-label="Permalink to “Всё вместе”">​</a></h2><p>Чтобы получить точное имя файла, которое будет загружено при вызове <code>require()</code>, используйте функцию <code>require.resolve()</code>.</p><p>Соединив все вышесказанное, вот высокоуровневый алгоритм в псевдокоде того, что делает <code>require()</code>:</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>require(X) из модуля по пути Y</span></span>
<span class="line"><span>1. Если X является основным модулем,</span></span>
<span class="line"><span>   a. вернуть основной модуль</span></span>
<span class="line"><span>   b. СТОП</span></span>
<span class="line"><span>2. Если X начинается с &#39;/&#39;</span></span>
<span class="line"><span>   a. установить Y как корень файловой системы</span></span>
<span class="line"><span>3. Если X начинается с &#39;./&#39;, &#39;/&#39; или &#39;../&#39;</span></span>
<span class="line"><span>   a. LOAD_AS_FILE(Y + X)</span></span>
<span class="line"><span>   b. LOAD_AS_DIRECTORY(Y + X)</span></span>
<span class="line"><span>   c. ВЫБРОСИТЬ &quot;не найдено&quot;</span></span>
<span class="line"><span>4. Если X начинается с &#39;#&#39;</span></span>
<span class="line"><span>   a. LOAD_PACKAGE_IMPORTS(X, dirname(Y))</span></span>
<span class="line"><span>5. LOAD_PACKAGE_SELF(X, dirname(Y))</span></span>
<span class="line"><span>6. LOAD_NODE_MODULES(X, dirname(Y))</span></span>
<span class="line"><span>7. ВЫБРОСИТЬ &quot;не найдено&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MAYBE_DETECT_AND_LOAD(X)</span></span>
<span class="line"><span>1. Если X разбирается как модуль CommonJS, загрузить X как модуль CommonJS. СТОП.</span></span>
<span class="line"><span>2. Иначе, если исходный код X может быть разобран как модуль ECMAScript с использованием</span></span>
<span class="line"><span>  &lt;a href=&quot;esm.md#resolver-algorithm-specification&quot;&gt;DETECT_MODULE_SYNTAX, определенного в</span></span>
<span class="line"><span>  ESM resolver&lt;/a&gt;,</span></span>
<span class="line"><span>  a. Загрузить X как модуль ECMAScript. СТОП.</span></span>
<span class="line"><span>3. ВЫБРОСИТЬ SyntaxError из-за попытки разобрать X как CommonJS в 1. СТОП.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_AS_FILE(X)</span></span>
<span class="line"><span>1. Если X является файлом, загрузить X как файл формата его расширения. СТОП</span></span>
<span class="line"><span>2. Если X.js является файлом,</span></span>
<span class="line"><span>    a. Найти ближайшую область пакета SCOPE к X.</span></span>
<span class="line"><span>    b. Если область не найдена</span></span>
<span class="line"><span>      1. MAYBE_DETECT_AND_LOAD(X.js)</span></span>
<span class="line"><span>    c. Если SCOPE/package.json содержит поле &quot;type&quot;,</span></span>
<span class="line"><span>      1. Если поле &quot;type&quot; имеет значение &quot;module&quot;, загрузить X.js как модуль ECMAScript. СТОП.</span></span>
<span class="line"><span>      2. Если поле &quot;type&quot; имеет значение &quot;commonjs&quot;, загрузить X.js как модуль CommonJS. СТОП.</span></span>
<span class="line"><span>    d. MAYBE_DETECT_AND_LOAD(X.js)</span></span>
<span class="line"><span>3. Если X.json является файлом, загрузить X.json в объект JavaScript. СТОП</span></span>
<span class="line"><span>4. Если X.node является файлом, загрузить X.node как бинарный аддон. СТОП</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_INDEX(X)</span></span>
<span class="line"><span>1. Если X/index.js является файлом</span></span>
<span class="line"><span>    a. Найти ближайшую область пакета SCOPE к X.</span></span>
<span class="line"><span>    b. Если область не найдена, загрузить X/index.js как модуль CommonJS. СТОП.</span></span>
<span class="line"><span>    c. Если SCOPE/package.json содержит поле &quot;type&quot;,</span></span>
<span class="line"><span>      1. Если поле &quot;type&quot; имеет значение &quot;module&quot;, загрузить X/index.js как модуль ECMAScript. СТОП.</span></span>
<span class="line"><span>      2. Иначе, загрузить X/index.js как модуль CommonJS. СТОП.</span></span>
<span class="line"><span>2. Если X/index.json является файлом, разобрать X/index.json в объект JavaScript. СТОП</span></span>
<span class="line"><span>3. Если X/index.node является файлом, загрузить X/index.node как бинарный аддон. СТОП</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_AS_DIRECTORY(X)</span></span>
<span class="line"><span>1. Если X/package.json является файлом,</span></span>
<span class="line"><span>   a. Разобрать X/package.json и найти поле &quot;main&quot;.</span></span>
<span class="line"><span>   b. Если &quot;main&quot; является ложным значением, перейти к 2.</span></span>
<span class="line"><span>   c. пусть M = X + (json main field)</span></span>
<span class="line"><span>   d. LOAD_AS_FILE(M)</span></span>
<span class="line"><span>   e. LOAD_INDEX(M)</span></span>
<span class="line"><span>   f. LOAD_INDEX(X) УСТАРЕЛО</span></span>
<span class="line"><span>   g. ВЫБРОСИТЬ &quot;не найдено&quot;</span></span>
<span class="line"><span>2. LOAD_INDEX(X)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_NODE_MODULES(X, START)</span></span>
<span class="line"><span>1. пусть DIRS = NODE_MODULES_PATHS(START)</span></span>
<span class="line"><span>2. для каждого DIR в DIRS:</span></span>
<span class="line"><span>   a. LOAD_PACKAGE_EXPORTS(X, DIR)</span></span>
<span class="line"><span>   b. LOAD_AS_FILE(DIR/X)</span></span>
<span class="line"><span>   c. LOAD_AS_DIRECTORY(DIR/X)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>NODE_MODULES_PATHS(START)</span></span>
<span class="line"><span>1. пусть PARTS = path split(START)</span></span>
<span class="line"><span>2. пусть I = количество PARTS - 1</span></span>
<span class="line"><span>3. пусть DIRS = []</span></span>
<span class="line"><span>4. пока I &gt;= 0,</span></span>
<span class="line"><span>   a. если PARTS[I] = &quot;node_modules&quot;, перейти к d.</span></span>
<span class="line"><span>   b. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)</span></span>
<span class="line"><span>   c. DIRS = DIR + DIRS</span></span>
<span class="line"><span>   d. пусть I = I - 1</span></span>
<span class="line"><span>5. вернуть DIRS + GLOBAL_FOLDERS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_PACKAGE_IMPORTS(X, DIR)</span></span>
<span class="line"><span>1. Найти ближайшую область пакета SCOPE к DIR.</span></span>
<span class="line"><span>2. Если область не найдена, вернуть.</span></span>
<span class="line"><span>3. Если SCOPE/package.json &quot;imports&quot; является null или undefined, вернуть.</span></span>
<span class="line"><span>4. Если \`--experimental-require-module\` включен</span></span>
<span class="line"><span>  a. пусть CONDITIONS = [&quot;node&quot;, &quot;require&quot;, &quot;module-sync&quot;]</span></span>
<span class="line"><span>  b. Иначе, пусть CONDITIONS = [&quot;node&quot;, &quot;require&quot;]</span></span>
<span class="line"><span>5. пусть MATCH = PACKAGE_IMPORTS_RESOLVE(X, pathToFileURL(SCOPE),</span></span>
<span class="line"><span>  CONDITIONS) &lt;a href=&quot;esm.md#resolver-algorithm-specification&quot;&gt;определено в ESM resolver&lt;/a&gt;.</span></span>
<span class="line"><span>6. RESOLVE_ESM_MATCH(MATCH).</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_PACKAGE_EXPORTS(X, DIR)</span></span>
<span class="line"><span>1. Попытаться интерпретировать X как комбинацию NAME и SUBPATH, где имя</span></span>
<span class="line"><span>   может иметь префикс @scope/, а подпуть начинается с косой черты (\`/\`).</span></span>
<span class="line"><span>2. Если X не соответствует этому шаблону или DIR/NAME/package.json не является файлом,</span></span>
<span class="line"><span>   вернуть.</span></span>
<span class="line"><span>3. Разобрать DIR/NAME/package.json и найти поле &quot;exports&quot;.</span></span>
<span class="line"><span>4. Если &quot;exports&quot; является null или undefined, вернуть.</span></span>
<span class="line"><span>5. Если \`--experimental-require-module\` включен</span></span>
<span class="line"><span>  a. пусть CONDITIONS = [&quot;node&quot;, &quot;require&quot;, &quot;module-sync&quot;]</span></span>
<span class="line"><span>  b. Иначе, пусть CONDITIONS = [&quot;node&quot;, &quot;require&quot;]</span></span>
<span class="line"><span>6. пусть MATCH = PACKAGE_EXPORTS_RESOLVE(pathToFileURL(DIR/NAME), &quot;.&quot; + SUBPATH,</span></span>
<span class="line"><span>   \`package.json\` &quot;exports&quot;, CONDITIONS) &lt;a href=&quot;esm.md#resolver-algorithm-specification&quot;&gt;определено в ESM resolver&lt;/a&gt;.</span></span>
<span class="line"><span>7. RESOLVE_ESM_MATCH(MATCH)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_PACKAGE_SELF(X, DIR)</span></span>
<span class="line"><span>1. Найти ближайшую область пакета SCOPE к DIR.</span></span>
<span class="line"><span>2. Если область не найдена, вернуть.</span></span>
<span class="line"><span>3. Если SCOPE/package.json &quot;exports&quot; является null или undefined, вернуть.</span></span>
<span class="line"><span>4. Если SCOPE/package.json &quot;name&quot; не является первым сегментом X, вернуть.</span></span>
<span class="line"><span>5. пусть MATCH = PACKAGE_EXPORTS_RESOLVE(pathToFileURL(SCOPE),</span></span>
<span class="line"><span>   &quot;.&quot; + X.slice(&quot;name&quot;.length), \`package.json\` &quot;exports&quot;, [&quot;node&quot;, &quot;require&quot;])</span></span>
<span class="line"><span>   &lt;a href=&quot;esm.md#resolver-algorithm-specification&quot;&gt;определено в ESM resolver&lt;/a&gt;.</span></span>
<span class="line"><span>6. RESOLVE_ESM_MATCH(MATCH)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>RESOLVE_ESM_MATCH(MATCH)</span></span>
<span class="line"><span>1. пусть RESOLVED_PATH = fileURLToPath(MATCH)</span></span>
<span class="line"><span>2. Если файл по адресу RESOLVED_PATH существует, загрузить RESOLVED_PATH как его расширение</span></span>
<span class="line"><span>   формат. СТОП</span></span>
<span class="line"><span>3. ВЫБРОСИТЬ &quot;не найдено&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br></div></div><h2 id="caching" tabindex="-1">Кэширование <a class="header-anchor" href="#caching" aria-label="Permalink to “Кэширование”">​</a></h2><p>Модули кэшируются после первой загрузки. Это означает (среди прочего), что каждый вызов <code>require(&#39;foo&#39;)</code> будет возвращать точно тот же объект, если он разрешается в тот же файл.</p><p>При условии, что <code>require.cache</code> не изменяется, многократные вызовы <code>require(&#39;foo&#39;)</code> не приведут к многократному выполнению кода модуля. Это важная особенность. Благодаря ей можно возвращать &quot;частично завершенные&quot; объекты, что позволяет загружать транзитивные зависимости даже в случае циклических зависимостей.</p><p>Чтобы модуль выполнял код несколько раз, экспортируйте функцию и вызывайте эту функцию.</p><h3 id="module-caching-caveats" tabindex="-1">Предостережения по поводу кэширования модулей <a class="header-anchor" href="#module-caching-caveats" aria-label="Permalink to “Предостережения по поводу кэширования модулей”">​</a></h3><p>Модули кэшируются на основе их разрешенного имени файла. Поскольку модули могут разрешаться в разные имена файлов в зависимости от местоположения вызывающего модуля (загрузка из папок <code>node_modules</code>), нет <em>гарантии</em>, что <code>require(&#39;foo&#39;)</code> всегда будет возвращать точно тот же объект, если он разрешается в разные файлы.</p><p>Кроме того, в файловых системах или операционных системах, нечувствительных к регистру, разные разрешенные имена файлов могут указывать на один и тот же файл, но кэш все равно будет рассматривать их как разные модули и будет перезагружать файл несколько раз. Например, <code>require(&#39;./foo&#39;)</code> и <code>require(&#39;./FOO&#39;)</code> возвращают два разных объекта, независимо от того, являются ли <code>./foo</code> и <code>./FOO</code> одним и тем же файлом.</p><h2 id="built-in-modules" tabindex="-1">Встроенные модули <a class="header-anchor" href="#built-in-modules" aria-label="Permalink to “Встроенные модули”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v16.0.0, v14.18.0</td><td>Добавлена поддержка импорта <code>node:</code> в <code>require(...)</code>.</td></tr></tbody></table></div><p>Node.js имеет несколько модулей, скомпилированных в двоичный файл. Эти модули более подробно описаны в другом месте этой документации.</p><p>Встроенные модули определены в исходном коде Node.js и находятся в папке <code>lib/</code>.</p><p>Встроенные модули можно идентифицировать с помощью префикса <code>node:</code>, в этом случае он обходит кэш <code>require</code>. Например, <code>require(&#39;node:http&#39;)</code> всегда будет возвращать встроенный HTTP-модуль, даже если есть запись <code>require.cache</code> с таким именем.</p><p>Некоторые встроенные модули всегда загружаются предпочтительно, если их идентификатор передается в <code>require()</code>. Например, <code>require(&#39;http&#39;)</code> всегда будет возвращать встроенный HTTP-модуль, даже если есть файл с таким именем. Список встроенных модулей, которые можно загрузить без использования префикса <code>node:</code>, представлен в <a href="/ru/nodejs/api/module#modulebuiltinmodules"><code>module.builtinModules</code></a>, перечислены без префикса.</p><h3 id="built-in-modules-with-mandatory-node-prefix" tabindex="-1">Встроенные модули с обязательным префиксом <code>node:</code> <a class="header-anchor" href="#built-in-modules-with-mandatory-node-prefix" aria-label="Permalink to “Встроенные модули с обязательным префиксом node:”">​</a></h3><p>При загрузке с помощью <code>require()</code> некоторые встроенные модули должны запрашиваться с префиксом <code>node:</code>. Это требование существует для предотвращения конфликта между новыми встроенными модулями и пакетами пользовательского пространства, которые уже используют это имя. В настоящее время встроенные модули, требующие префикс <code>node:</code>, это:</p><ul><li><a href="/ru/nodejs/api/single-executable-applications#single-executable-application-api"><code>node:sea</code></a></li><li><a href="/ru/nodejs/api/sqlite"><code>node:sqlite</code></a></li><li><a href="/ru/nodejs/api/test"><code>node:test</code></a></li><li><a href="/ru/nodejs/api/test#test-reporters"><code>node:test/reporters</code></a></li></ul><p>Список этих модулей представлен в <a href="/ru/nodejs/api/module#modulebuiltinmodules"><code>module.builtinModules</code></a>, включая префикс.</p><h2 id="cycles" tabindex="-1">Циклы <a class="header-anchor" href="#cycles" aria-label="Permalink to “Циклы”">​</a></h2><p>При наличии циклических вызовов <code>require()</code> модуль может не завершить выполнение к моменту его возврата.</p><p>Рассмотрим следующую ситуацию:</p><p><code>a.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a starting&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./b.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;in a, b.done = %j&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b.done);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a done&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>b.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b starting&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;in b, a.done = %j&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a.done);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b done&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>main.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main starting&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./b.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;in main, a.done = %j, b.done = %j&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a.done, b.done);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Когда <code>main.js</code> загружает <code>a.js</code>, затем <code>a.js</code> в свою очередь загружает <code>b.js</code>. В этот момент <code>b.js</code> пытается загрузить <code>a.js</code>. Чтобы предотвратить бесконечный цикл, <strong>незавершенная копия</strong> объекта exports из <code>a.js</code> возвращается модулю <code>b.js</code>. Затем <code>b.js</code> завершает загрузку, и его объект <code>exports</code> предоставляется модулю <code>a.js</code>.</p><p>К моменту, когда <code>main.js</code> загрузит оба модуля, они оба будут завершены. Таким образом, вывод этой программы будет следующим:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">in b, a.done = false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">in a, b.done = true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">in main, a.done = true, b.done = true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Для правильной работы циклических зависимостей модулей внутри приложения требуется тщательное планирование.</p><h2 id="file-modules" tabindex="-1">Файловые модули <a class="header-anchor" href="#file-modules" aria-label="Permalink to “Файловые модули”">​</a></h2><p>Если точное имя файла не найдено, Node.js попытается загрузить требуемый файл с добавленными расширениями: <code>.js</code>, <code>.json</code> и, наконец, <code>.node</code>. При загрузке файла с другим расширением (например, <code>.cjs</code>), его полное имя должно быть передано в <code>require()</code>, включая расширение файла (например, <code>require(&#39;./file.cjs&#39;)</code>).</p><p>Файлы <code>.json</code> анализируются как текстовые файлы JSON, файлы <code>.node</code> интерпретируются как скомпилированные модули-дополнения, загружаемые с помощью <code>process.dlopen()</code>. Файлы, использующие любое другое расширение (или вообще без расширения), анализируются как текстовые файлы JavaScript. Обратитесь к разделу <a href="/ru/nodejs/api/packages#determining-module-system">Определение системы модулей</a>, чтобы понять, какая цель анализа будет использоваться.</p><p>Требуемый модуль с префиксом <code>&#39;/&#39;</code> является абсолютным путем к файлу. Например, <code>require(&#39;/home/marco/foo.js&#39;)</code> загрузит файл по адресу <code>/home/marco/foo.js</code>.</p><p>Требуемый модуль с префиксом <code>&#39;./&#39;</code> является относительным по отношению к файлу, вызывающему <code>require()</code>. То есть, <code>circle.js</code> должен находиться в том же каталоге, что и <code>foo.js</code>, чтобы <code>require(&#39;./circle&#39;)</code> мог его найти.</p><p>Без префикса <code>&#39;/&#39;</code>, <code>&#39;./&#39;</code> или <code>&#39;../&#39;</code>, указывающего на файл, модуль должен быть либо основным модулем, либо загружен из папки <code>node_modules</code>.</p><p>Если указанный путь не существует, <code>require()</code> выдаст ошибку <a href="/ru/nodejs/api/errors#module-not-found"><code>MODULE_NOT_FOUND</code></a>.</p><h2 id="folders-as-modules" tabindex="-1">Папки как модули <a class="header-anchor" href="#folders-as-modules" aria-label="Permalink to “Папки как модули”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[Stable: 3 - Legacy]</p><p><a href="/ru/nodejs/api/documentation#stability-index">Stable: 3</a> <a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 3</a> - Устаревшее: используйте <a href="/ru/nodejs/api/packages#subpath-exports">экспорт подпутей</a> или <a href="/ru/nodejs/api/packages#subpath-imports">импорт подпутей</a> вместо этого.</p></div><p>Существует три способа, которыми папка может быть передана в <code>require()</code> в качестве аргумента.</p><p>Первый — это создать файл <a href="/ru/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> в корне папки, который определяет <code>main</code> модуль. Пример файла <a href="/ru/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> может выглядеть так:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;some-library&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/some-library.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Если это было в папке <code>./some-library</code>, то <code>require(&#39;./some-library&#39;)</code> попытался бы загрузить <code>./some-library/lib/some-library.js</code>.</p><p>Если в каталоге нет файла <a href="/ru/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a>, или если запись <a href="/ru/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> отсутствует или не может быть разрешена, Node.js попытается загрузить файл <code>index.js</code> или <code>index.node</code> из этого каталога. Например, если в предыдущем примере не было файла <a href="/ru/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a>, то <code>require(&#39;./some-library&#39;)</code> попытался бы загрузить:</p><ul><li><code>./some-library/index.js</code></li><li><code>./some-library/index.node</code></li></ul><p>Если эти попытки не удались, Node.js сообщит об отсутствии всего модуля с ошибкой по умолчанию:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Cannot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;some-library&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Во всех трех вышеуказанных случаях вызов <code>import(&#39;./some-library&#39;)</code> приведет к ошибке <a href="/ru/nodejs/api/errors#err-unsupported-dir-import"><code>ERR_UNSUPPORTED_DIR_IMPORT</code></a>. Использование пакетных <a href="/ru/nodejs/api/packages#subpath-exports">экспортов подпутей</a> или <a href="/ru/nodejs/api/packages#subpath-imports">импортов подпутей</a> может обеспечить те же преимущества организации содержимого, что и папки в качестве модулей, и работать как для <code>require</code>, так и для <code>import</code>.</p><h2 id="loading-from-node_modules-folders" tabindex="-1">Загрузка из папок <code>node_modules</code> <a class="header-anchor" href="#loading-from-node_modules-folders" aria-label="Permalink to “Загрузка из папок node_modules”">​</a></h2><p>Если идентификатор модуля, переданный в <code>require()</code>, не является <a href="/ru/nodejs/api/modules#built-in-modules">встроенным</a> модулем и не начинается с <code>&#39;/&#39;</code>, <code>&#39;../&#39;</code> или <code>&#39;./&#39;</code>, то Node.js начинает с каталога текущего модуля, добавляет <code>/node_modules</code> и пытается загрузить модуль из этого места. Node.js не будет добавлять <code>node_modules</code> к пути, уже заканчивающемуся на <code>node_modules</code>.</p><p>Если модуль не найден там, Node.js переходит к родительскому каталогу и так далее, пока не будет достигнут корень файловой системы.</p><p>Например, если файл <code>&#39;/home/ry/projects/foo.js&#39;</code> вызвал <code>require(&#39;bar.js&#39;)</code>, то Node.js будет искать в следующих местах в этом порядке:</p><ul><li><code>/home/ry/projects/node_modules/bar.js</code></li><li><code>/home/ry/node_modules/bar.js</code></li><li><code>/home/node_modules/bar.js</code></li><li><code>/node_modules/bar.js</code></li></ul><p>Это позволяет программам локализовать свои зависимости, чтобы они не конфликтовали.</p><p>Можно потребовать конкретные файлы или подмодули, распространяемые вместе с модулем, включив суффикс пути после имени модуля. Например, <code>require(&#39;example-module/path/to/file&#39;)</code> разрешит <code>path/to/file</code> относительно того, где находится <code>example-module</code>. Путь с суффиксом следует той же семантике разрешения модуля.</p><h2 id="loading-from-the-global-folders" tabindex="-1">Загрузка из глобальных папок <a class="header-anchor" href="#loading-from-the-global-folders" aria-label="Permalink to “Загрузка из глобальных папок”">​</a></h2><p>Если переменная окружения <code>NODE_PATH</code> установлена в список абсолютных путей, разделенных двоеточиями, то Node.js будет искать модули по этим путям, если они не будут найдены в другом месте.</p><p>В Windows <code>NODE_PATH</code> разделяется точками с запятой (<code>;</code>) вместо двоеточий.</p><p><code>NODE_PATH</code> был первоначально создан для поддержки загрузки модулей из разных путей до того, как был определен текущий алгоритм <a href="/ru/nodejs/api/modules#all-together">разрешения модулей</a>.</p><p><code>NODE_PATH</code> по-прежнему поддерживается, но в настоящее время менее необходим, поскольку экосистема Node.js остановилась на соглашении о местонахождении зависимых модулей. Иногда развертывания, которые полагаются на <code>NODE_PATH</code>, демонстрируют неожиданное поведение, когда люди не знают, что <code>NODE_PATH</code> должен быть установлен. Иногда зависимости модуля изменяются, что приводит к загрузке другой версии (или даже другого модуля), поскольку выполняется поиск по <code>NODE_PATH</code>.</p><p>Кроме того, Node.js будет искать в следующем списке GLOBAL_FOLDERS:</p><ul><li>1: <code>$HOME/.node_modules</code></li><li>2: <code>$HOME/.node_libraries</code></li><li>3: <code>$PREFIX/lib/node</code></li></ul><p>Где <code>$HOME</code> - домашний каталог пользователя, а <code>$PREFIX</code> - настроенный <code>node_prefix</code> Node.js.</p><p>Это в основном по историческим причинам.</p><p>Настоятельно рекомендуется размещать зависимости в локальной папке <code>node_modules</code>. Они будут загружаться быстрее и надежнее.</p><h2 id="the-module-wrapper" tabindex="-1">Обертка модуля <a class="header-anchor" href="#the-module-wrapper" aria-label="Permalink to “Обертка модуля”">​</a></h2><p>Перед выполнением кода модуля Node.js оборачивает его в функциональную обертку, которая выглядит следующим образом:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Здесь фактически находится код модуля</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Благодаря этому Node.js достигает нескольких целей:</p><ul><li>Он поддерживает видимость переменных верхнего уровня (определенных с помощью <code>var</code>, <code>const</code> или <code>let</code>) в пределах модуля, а не глобального объекта.</li><li>Он помогает предоставить некоторые глобально выглядящие переменные, которые на самом деле специфичны для модуля, такие как: <ul><li>Объекты <code>module</code> и <code>exports</code>, которые разработчик может использовать для экспорта значений из модуля.</li><li>Удобные переменные <code>__filename</code> и <code>__dirname</code>, содержащие абсолютное имя файла и путь к каталогу модуля.</li></ul></li></ul><h2 id="the-module-scope" tabindex="-1">Область видимости модуля <a class="header-anchor" href="#the-module-scope" aria-label="Permalink to “Область видимости модуля”">​</a></h2><h3 id="__dirname" tabindex="-1"><code>__dirname</code> <a class="header-anchor" href="#__dirname" aria-label="Permalink to “__dirname”">​</a></h3><p><strong>Добавлено в: v0.1.27</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>Имя каталога текущего модуля. Это то же самое, что и <a href="/ru/nodejs/api/path#pathdirnamepath"><code>path.dirname()</code></a> из <a href="/ru/nodejs/api/modules#filename"><code>__filename</code></a>.</p><p>Пример: запуск <code>node example.js</code> из <code>/Users/mjr</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Выводит: /Users/mjr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Выводит: /Users/mjr</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="__filename" tabindex="-1"><code>__filename</code> <a class="header-anchor" href="#__filename" aria-label="Permalink to “__filename”">​</a></h3><p><strong>Добавлено в: v0.0.1</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>Имя файла текущего модуля. Это абсолютный путь к текущему файлу модуля с разрешенными символическими ссылками.</p><p>Для основной программы это не обязательно то же самое имя файла, которое использовалось в командной строке.</p><p>См. <a href="/ru/nodejs/api/modules#dirname"><code>__dirname</code></a> для получения имени каталога текущего модуля.</p><p>Примеры:</p><p>Запуск <code>node example.js</code> из <code>/Users/mjr</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Выводит: /Users/mjr/example.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Выводит: /Users/mjr</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Даны два модуля: <code>a</code> и <code>b</code>, где <code>b</code> является зависимостью <code>a</code>, и существует следующая структура каталогов:</p><ul><li><code>/Users/mjr/app/a.js</code></li><li><code>/Users/mjr/app/node_modules/b/b.js</code></li></ul><p>Ссылки на <code>__filename</code> внутри <code>b.js</code> вернут <code>/Users/mjr/app/node_modules/b/b.js</code>, в то время как ссылки на <code>__filename</code> внутри <code>a.js</code> вернут <code>/Users/mjr/app/a.js</code>.</p><h3 id="exports" tabindex="-1"><code>exports</code> <a class="header-anchor" href="#exports" aria-label="Permalink to “exports”">​</a></h3><p><strong>Добавлено в версии: v0.1.12</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>Ссылка на <code>module.exports</code>, которую короче набирать. Подробнее о том, когда использовать <code>exports</code>, а когда <code>module.exports</code>, см. в разделе о <a href="/ru/nodejs/api/modules#exports-shortcut">ярлыке exports</a>.</p><h3 id="module" tabindex="-1"><code>module</code> <a class="header-anchor" href="#module" aria-label="Permalink to “module”">​</a></h3><p><strong>Добавлено в версии: v0.1.16</strong></p><ul><li><a href="/ru/nodejs/api/modules#the-module-object">&lt;module&gt;</a></li></ul><p>Ссылка на текущий модуль, см. раздел об <a href="/ru/nodejs/api/modules#the-module-object">объекте <code>module</code></a>. В частности, <code>module.exports</code> используется для определения того, что модуль экспортирует и делает доступным через <code>require()</code>.</p><h3 id="requireid" tabindex="-1"><code>require(id)</code> <a class="header-anchor" href="#requireid" aria-label="Permalink to “require(id)”">​</a></h3><p><strong>Добавлено в версии: v0.1.13</strong></p><ul><li><code>id</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> имя или путь модуля</li><li>Возвращает: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a> экспортированное содержимое модуля</li></ul><p>Используется для импорта модулей, <code>JSON</code> и локальных файлов. Модули можно импортировать из <code>node_modules</code>. Локальные модули и JSON-файлы можно импортировать, используя относительный путь (например, <code>./</code>, <code>./foo</code>, <code>./bar/baz</code>, <code>../foo</code>), который будет разрешен относительно каталога, указанного в <a href="/ru/nodejs/api/modules#dirname"><code>__dirname</code></a> (если определен) или текущего рабочего каталога. Относительные пути в стиле POSIX разрешаются независимо от операционной системы, что означает, что приведенные выше примеры будут работать в Windows так же, как и в Unix.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Импорт локального модуля с путем, относительным к \`__dirname\` или текущему</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// рабочему каталогу. (В Windows это будет разрешено в .\\path\\myLocalModule.)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myLocalModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./path/myLocalModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Импорт JSON-файла:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jsonData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./path/filename.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Импорт модуля из node_modules или встроенного модуля Node.js:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> crypto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:crypto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="requirecache" tabindex="-1"><code>require.cache</code> <a class="header-anchor" href="#requirecache" aria-label="Permalink to “require.cache”">​</a></h4><p><strong>Добавлено в версии: v0.3.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>Модули кэшируются в этом объекте при их запросе. При удалении значения ключа из этого объекта следующий <code>require</code> перезагрузит модуль. Это не относится к <a href="/ru/nodejs/api/addons">нативным аддонам</a>, для которых перезагрузка приведет к ошибке.</p><p>Добавление или замена записей также возможны. Этот кеш проверяется перед встроенными модулями, и если имя, совпадающее со встроенным модулем, добавляется в кеш, только вызовы <code>require</code> с префиксом <code>node:</code> будут получать встроенный модуль. Используйте с осторожностью!</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> assert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:assert&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> realFs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fakeFs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require.cache.fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { exports: fakeFs };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strictEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), fakeFs);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strictEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), realFs);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="requireextensions" tabindex="-1"><code>require.extensions</code> <a class="header-anchor" href="#requireextensions" aria-label="Permalink to “require.extensions”">​</a></h4><p><strong>Добавлено в версии: v0.3.0</strong></p><p><strong>Устарело с версии: v0.10.6</strong></p><div class="danger custom-block"><p class="custom-block-title">[Стабильность: 0 - Устарело]</p><p><a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 0</a> <a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 0</a> - Устарело</p></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>Указывает <code>require</code>, как обрабатывать определенные расширения файлов.</p><p>Обрабатывает файлы с расширением <code>.sjs</code> как <code>.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require.extensions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.sjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> require.extensions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>Устарело.</strong> В прошлом этот список использовался для загрузки модулей, отличных от JavaScript, в Node.js путем их компиляции по требованию. Однако на практике существуют гораздо лучшие способы сделать это, например, загрузка модулей через другую программу Node.js или предварительная компиляция их в JavaScript.</p><p>Избегайте использования <code>require.extensions</code>. Использование может привести к трудноуловимым ошибкам, и разрешение расширений замедляется с каждым зарегистрированным расширением.</p><h4 id="requiremain" tabindex="-1"><code>require.main</code> <a class="header-anchor" href="#requiremain" aria-label="Permalink to “require.main”">​</a></h4><p><strong>Добавлено в версии: v0.1.17</strong></p><ul><li><a href="/ru/nodejs/api/modules#the-module-object">&lt;module&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a></li></ul><p>Объект <code>Module</code>, представляющий скрипт входа, загруженный при запуске процесса Node.js, или <code>undefined</code>, если точка входа программы не является модулем CommonJS. См. <a href="/ru/nodejs/api/modules#accessing-the-main-module">&quot;Доступ к главному модулю&quot;</a>.</p><p>В скрипте <code>entry.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(require.main);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entry.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Module {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/absolute/path/to&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/absolute/path/to/entry.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  loaded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/absolute/path/to/node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &#39;/absolute/path/node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &#39;/absolute/node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &#39;/node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="requireresolverequest-options" tabindex="-1"><code>require.resolve(request[, options])</code> <a class="header-anchor" href="#requireresolverequest-options" aria-label="Permalink to “require.resolve(request[, options])”">​</a></h4><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v8.9.0</td><td>Теперь поддерживается опция <code>paths</code>.</td></tr><tr><td>v0.3.0</td><td>Добавлено в версии: v0.3.0</td></tr></tbody></table></div><ul><li><p><code>request</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Путь к модулю для разрешения.</p></li><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></p><ul><li><code>paths</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> Пути для разрешения местоположения модуля. Если присутствует, эти пути используются вместо путей разрешения по умолчанию, за исключением <a href="/ru/nodejs/api/modules#loading-from-the-global-folders">GLOBAL_FOLDERS</a>, таких как <code>$HOME/.node_modules</code>, которые всегда включены. Каждый из этих путей используется в качестве отправной точки для алгоритма разрешения модуля, что означает, что иерархия <code>node_modules</code> проверяется из этого местоположения.</li></ul></li><li><p>Возвращает: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></p></li></ul><p>Используйте внутренний механизм <code>require()</code>, чтобы найти местоположение модуля, но вместо загрузки модуля просто верните разрешенное имя файла.</p><p>Если модуль не может быть найден, выдается ошибка <code>MODULE_NOT_FOUND</code>.</p><h5 id="requireresolvepathsrequest" tabindex="-1"><code>require.resolve.paths(request)</code> <a class="header-anchor" href="#requireresolvepathsrequest" aria-label="Permalink to “require.resolve.paths(request)”">​</a></h5><p><strong>Добавлено в версии: v8.9.0</strong></p><ul><li><code>request</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Путь к модулю, для которого извлекаются пути поиска.</li><li>Возвращает: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" target="_blank" rel="noreferrer">&lt;null&gt;</a></li></ul><p>Возвращает массив, содержащий пути, по которым производился поиск во время разрешения <code>request</code>, или <code>null</code>, если строка <code>request</code> ссылается на основной модуль, например <code>http</code> или <code>fs</code>.</p><h2 id="the-module-object" tabindex="-1">Объект <code>module</code> <a class="header-anchor" href="#the-module-object" aria-label="Permalink to “Объект module”">​</a></h2><p><strong>Добавлено в версии: v0.1.16</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>В каждом модуле свободная переменная <code>module</code> является ссылкой на объект, представляющий текущий модуль. Для удобства <code>module.exports</code> также доступен через модуль-глобальный <code>exports</code>. <code>module</code> на самом деле не глобальный, а локальный для каждого модуля.</p><h3 id="modulechildren" tabindex="-1"><code>module.children</code> <a class="header-anchor" href="#modulechildren" aria-label="Permalink to “module.children”">​</a></h3><p><strong>Добавлено в версии: v0.1.16</strong></p><ul><li><a href="/ru/nodejs/api/modules#the-module-object">&lt;module[]&gt;</a></li></ul><p>Объекты модулей, впервые требуемые этим модулем.</p><h3 id="moduleexports" tabindex="-1"><code>module.exports</code> <a class="header-anchor" href="#moduleexports" aria-label="Permalink to “module.exports”">​</a></h3><p><strong>Добавлено в версии: v0.1.16</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>Объект <code>module.exports</code> создается системой <code>Module</code>. Иногда это неприемлемо; многие хотят, чтобы их модуль был экземпляром некоторого класса. Для этого назначьте желаемый объект экспорта в <code>module.exports</code>. Присваивание желаемого объекта в <code>exports</code> просто переопределит локальную переменную <code>exports</code>, что, вероятно, не то, что нужно.</p><p>Например, предположим, что мы делаем модуль под названием <code>a.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EventEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:events&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Do some work, and after some time emit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// the &#39;ready&#39; event from the module itself.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ready&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Тогда в другом файле мы можем сделать:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ready&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;module &quot;a&quot; is ready&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Присваивание <code>module.exports</code> должно быть выполнено немедленно. Это нельзя делать ни в каких обратных вызовах. Это не работает:</p><p><code>x.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>y.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.a);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="exports-shortcut" tabindex="-1">Ярлык <code>exports</code> <a class="header-anchor" href="#exports-shortcut" aria-label="Permalink to “Ярлык exports”">​</a></h4><p><strong>Добавлено в версии: v0.1.16</strong></p><p>Переменная <code>exports</code> доступна в области видимости файла модуля и ей присваивается значение <code>module.exports</code> до вычисления модуля.</p><p>Это позволяет использовать ярлык, так что <code>module.exports.f = ...</code> можно записать более кратко как <code>exports.f = ...</code>. Однако следует помнить, что, как и любой переменной, если <code>exports</code> присваивается новое значение, она больше не связана с <code>module.exports</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hello </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Экспортировано из require модуля</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { hello: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Не экспортировано, доступно только в модуле</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Когда свойство <code>module.exports</code> полностью заменяется новым объектом, обычно также переназначают <code>exports</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... и т.д.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Чтобы проиллюстрировать поведение, представьте себе эту гипотетическую реализацию <code>require()</code>, которая довольно похожа на то, что на самом деле делает <code>require()</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { exports: {} };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Код модуля здесь. В этом примере определим функцию.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someFunc;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // На этом этапе exports больше не является ярлыком для module.exports, и</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // этот модуль все равно будет экспортировать пустой объект по умолчанию.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someFunc;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // На этом этапе модуль теперь будет экспортировать someFunc, вместо</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // объекта по умолчанию.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="modulefilename" tabindex="-1"><code>module.filename</code> <a class="header-anchor" href="#modulefilename" aria-label="Permalink to “module.filename”">​</a></h3><p><strong>Добавлено в версии: v0.1.16</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>Полностью разрешенное имя файла модуля.</p><h3 id="moduleid" tabindex="-1"><code>module.id</code> <a class="header-anchor" href="#moduleid" aria-label="Permalink to “module.id”">​</a></h3><p><strong>Добавлено в версии: v0.1.16</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>Идентификатор модуля. Обычно это полностью разрешенное имя файла.</p><h3 id="moduleispreloading" tabindex="-1"><code>module.isPreloading</code> <a class="header-anchor" href="#moduleispreloading" aria-label="Permalink to “module.isPreloading”">​</a></h3><p><strong>Добавлено в версии: v15.4.0, v14.17.0</strong></p><ul><li>Тип: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>true</code>, если модуль выполняется во время фазы предварительной загрузки Node.js.</li></ul><h3 id="moduleloaded" tabindex="-1"><code>module.loaded</code> <a class="header-anchor" href="#moduleloaded" aria-label="Permalink to “module.loaded”">​</a></h3><p><strong>Добавлено в версии: v0.1.16</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>Указывает, завершена ли загрузка модуля, или находится ли он в процессе загрузки.</p><h3 id="moduleparent" tabindex="-1"><code>module.parent</code> <a class="header-anchor" href="#moduleparent" aria-label="Permalink to “module.parent”">​</a></h3><p><strong>Добавлено в версии: v0.1.16</strong></p><p><strong>Устарело начиная с версии: v14.6.0, v12.19.0</strong></p><div class="danger custom-block"><p class="custom-block-title">[Стабильность: 0 - Устарело]</p><p><a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 0</a> <a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 0</a> - Устарело: Пожалуйста, используйте <a href="/ru/nodejs/api/modules#requiremain"><code>require.main</code></a> и <a href="/ru/nodejs/api/modules#modulechildren"><code>module.children</code></a> вместо этого.</p></div><ul><li><a href="/ru/nodejs/api/modules#the-module-object">&lt;module&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" target="_blank" rel="noreferrer">&lt;null&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a></li></ul><p>Модуль, который первым потребовал этот, или <code>null</code>, если текущий модуль является точкой входа текущего процесса, или <code>undefined</code>, если модуль был загружен чем-то, что не является модулем CommonJS (например: REPL или <code>import</code>).</p><h3 id="modulepath" tabindex="-1"><code>module.path</code> <a class="header-anchor" href="#modulepath" aria-label="Permalink to “module.path”">​</a></h3><p><strong>Добавлено в версии: v11.14.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>Имя каталога модуля. Обычно совпадает с <a href="/ru/nodejs/api/path#pathdirnamepath"><code>path.dirname()</code></a> из <a href="/ru/nodejs/api/modules#moduleid"><code>module.id</code></a>.</p><h3 id="modulepaths" tabindex="-1"><code>module.paths</code> <a class="header-anchor" href="#modulepaths" aria-label="Permalink to “module.paths”">​</a></h3><p><strong>Добавлено в версии: v0.4.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>Пути поиска для модуля.</p><h3 id="modulerequireid" tabindex="-1"><code>module.require(id)</code> <a class="header-anchor" href="#modulerequireid" aria-label="Permalink to “module.require(id)”">​</a></h3><p><strong>Добавлено в версии: v0.5.1</strong></p><ul><li><code>id</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li>Возвращает: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a> экспортируемое содержимое модуля</li></ul><p>Метод <code>module.require()</code> предоставляет способ загрузки модуля, как если бы <code>require()</code> был вызван из исходного модуля.</p><p>Чтобы это сделать, необходимо получить ссылку на объект <code>module</code>. Поскольку <code>require()</code> возвращает <code>module.exports</code>, а <code>module</code> обычно <em>доступен только</em> в коде конкретного модуля, его необходимо явно экспортировать, чтобы использовать.</p><h2 id="the-module-object_1" tabindex="-1">Объект <code>Module</code> <a class="header-anchor" href="#the-module-object_1" aria-label="Permalink to “Объект Module”">​</a></h2><p>Этот раздел был перемещён в <a href="/ru/nodejs/api/module#the-module-object">Модули: Основной модуль <code>module</code></a>.</p><ul><li><a href="/ru/nodejs/api/module#modulebuiltinmodules"><code>module.builtinModules</code></a></li><li><a href="/ru/nodejs/api/module#modulecreaterequirefilename"><code>module.createRequire(filename)</code></a></li><li><a href="/ru/nodejs/api/module#modulesyncbuiltinesmexports"><code>module.syncBuiltinESMExports()</code></a></li></ul><h2 id="source-map-v3-support" tabindex="-1">Поддержка source map v3 <a class="header-anchor" href="#source-map-v3-support" aria-label="Permalink to “Поддержка source map v3”">​</a></h2><p>Этот раздел был перемещён в <a href="/ru/nodejs/api/module#source-map-v3-support">Модули: Основной модуль <code>module</code></a>.</p><ul><li><a href="/ru/nodejs/api/module#modulefindsourcemappath"><code>module.findSourceMap(path)</code></a></li><li><a href="/ru/nodejs/api/module#class-modulesourcemap">Класс: <code>module.SourceMap</code></a><ul><li><a href="/ru/nodejs/api/module#new-sourcemappayload"><code>new SourceMap(payload)</code></a></li><li><a href="/ru/nodejs/api/module#sourcemappayload"><code>sourceMap.payload</code></a></li><li><a href="/ru/nodejs/api/module#sourcemapfindentrylinenumber-columnnumber"><code>sourceMap.findEntry(lineNumber, columnNumber)</code></a></li></ul></li></ul>`,269)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};