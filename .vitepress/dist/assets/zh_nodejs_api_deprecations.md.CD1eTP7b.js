import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 废弃功能","description":"本页面记录了Node.js中已废弃的功能，提供了如何更新代码以避免使用过时的API和实践的指导。","frontmatter":{"title":"Node.js 废弃功能","description":"本页面记录了Node.js中已废弃的功能，提供了如何更新代码以避免使用过时的API和实践的指导。","head":[["meta",{"name":"og:title","content":"Node.js 废弃功能 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"本页面记录了Node.js中已废弃的功能，提供了如何更新代码以避免使用过时的API和实践的指导。"}],["meta",{"name":"twitter:title","content":"Node.js 废弃功能 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"本页面记录了Node.js中已废弃的功能，提供了如何更新代码以避免使用过时的API和实践的指导。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/deprecations"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/deprecations"}]]},"headers":[],"relativePath":"zh/nodejs/api/deprecations.md","filePath":"zh/nodejs/api/deprecations.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/api/deprecations.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="deprecated-apis" tabindex="-1">已弃用的 API <a class="header-anchor" href="#deprecated-apis" aria-label="Permalink to “已弃用的 API”">​</a></h1><p>Node.js API 可能会因以下任何原因而被弃用：</p><ul><li>使用该 API 不安全。</li><li>存在改进的替代 API。</li><li>预计在未来的主要版本中会对 API 进行重大更改。</li></ul><p>Node.js 使用四种类型的弃用：</p><ul><li>仅文档</li><li>应用程序（仅限非 <code>node_modules</code> 代码）</li><li>运行时（所有代码）</li><li>生命周期结束</li></ul><p>仅文档弃用是指仅在 Node.js API 文档中表达的弃用。这些在运行 Node.js 时不会产生任何副作用。某些仅文档弃用会在使用 <a href="/zh/nodejs/api/cli#pending-deprecation"><code>--pending-deprecation</code></a> 标志（或其替代方案 <code>NODE_PENDING_DEPRECATION=1</code> 环境变量）启动时触发运行时警告，类似于下面的运行时弃用。<a href="/zh/nodejs/api/deprecations#list-of-deprecated-apis">已弃用的 API 列表</a> 中明确标记了支持该标志的仅文档弃用。</p><p>仅针对非 <code>node_modules</code> 代码的应用程序弃用，默认情况下，会生成一个进程警告，该警告会在首次在非从 <code>node_modules</code> 加载的代码中使用已弃用的 API 时打印到 <code>stderr</code>。当使用 <a href="/zh/nodejs/api/cli#throw-deprecation"><code>--throw-deprecation</code></a> 命令行标志时，运行时弃用会导致抛出错误。当使用 <a href="/zh/nodejs/api/cli#pending-deprecation"><code>--pending-deprecation</code></a> 时，也会为从 <code>node_modules</code> 加载的代码发出警告。</p><p>针对所有代码的运行时弃用类似于针对非 <code>node_modules</code> 代码的运行时弃用，不同之处在于它还会为从 <code>node_modules</code> 加载的代码发出警告。</p><p>当功能已从或即将从 Node.js 中移除时，会使用生命周期结束弃用。</p><h2 id="revoking-deprecations" tabindex="-1">撤销弃用 <a class="header-anchor" href="#revoking-deprecations" aria-label="Permalink to “撤销弃用”">​</a></h2><p>有时，API 的弃用可能会被撤销。在这种情况下，本文档将更新与该决定相关的信息。但是，弃用标识符不会被修改。</p><h2 id="list-of-deprecated-apis" tabindex="-1">已弃用的 API 列表 <a class="header-anchor" href="#list-of-deprecated-apis" aria-label="Permalink to “已弃用的 API 列表”">​</a></h2><h3 id="dep0001-httpoutgoingmessageprototypeflush" tabindex="-1">DEP0001: <code>http.OutgoingMessage.prototype.flush</code> <a class="header-anchor" href="#dep0001-httpoutgoingmessageprototypeflush" aria-label="Permalink to “DEP0001: http.OutgoingMessage.prototype.flush”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.0.0</td><td>生命周期结束。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v1.6.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：生命周期结束</p><p><code>OutgoingMessage.prototype.flush()</code> 已被移除。请使用 <code>OutgoingMessage.prototype.flushHeaders()</code> 代替。</p><h3 id="dep0002-require_linklist" tabindex="-1">DEP0002: <code>require(&#39;_linklist&#39;)</code> <a class="header-anchor" href="#dep0002-require_linklist" aria-label="Permalink to “DEP0002: require(&#39;_linklist&#39;)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v8.0.0</td><td>已终止生命周期。</td></tr><tr><td>v6.12.0</td><td>已分配一个弃用代码。</td></tr><tr><td>v5.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p><code>_linklist</code> 模块已弃用。请使用用户空间替代方案。</p><h3 id="dep0003-_writablestatebuffer" tabindex="-1">DEP0003: <code>_writableState.buffer</code> <a class="header-anchor" href="#dep0003-_writablestatebuffer" aria-label="Permalink to “DEP0003: _writableState.buffer”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.0.0</td><td>已终止生命周期。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配一个弃用代码。</td></tr><tr><td>v0.11.15</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p><code>_writableState.buffer</code> 已移除。请使用 <code>_writableState.getBuffer()</code> 代替。</p><h3 id="dep0004-cryptostreamprototypereadystate" tabindex="-1">DEP0004: <code>CryptoStream.prototype.readyState</code> <a class="header-anchor" href="#dep0004-cryptostreamprototypereadystate" aria-label="Permalink to “DEP0004: CryptoStream.prototype.readyState”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>已终止生命周期。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配一个弃用代码。</td></tr><tr><td>v0.4.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p><code>CryptoStream.prototype.readyState</code> 属性已移除。</p><h3 id="dep0005-buffer-constructor" tabindex="-1">DEP0005: <code>Buffer()</code> 构造函数 <a class="header-anchor" href="#dep0005-buffer-constructor" aria-label="Permalink to “DEP0005: Buffer() 构造函数”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0</td><td>已分配一个弃用代码。</td></tr><tr><td>v6.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：应用程序（仅限非 <code>node_modules</code> 代码）</p><p>由于 API 可用性问题可能导致意外的安全问题，<code>Buffer()</code> 函数和 <code>new Buffer()</code> 构造函数已被弃用。</p><p>作为替代方案，请使用以下方法之一来构造 <code>Buffer</code> 对象：</p><ul><li><a href="/zh/nodejs/api/buffer#static-method-bufferallocsize-fill-encoding"><code>Buffer.alloc(size[, fill[, encoding]])</code></a>：创建一个具有<em>初始化</em>内存的 <code>Buffer</code>。</li><li><a href="/zh/nodejs/api/buffer#static-method-bufferallocunsafesize"><code>Buffer.allocUnsafe(size)</code></a>：创建一个具有<em>未初始化</em>内存的 <code>Buffer</code>。</li><li><a href="/zh/nodejs/api/buffer#static-method-bufferallocunsafeslowsize"><code>Buffer.allocUnsafeSlow(size)</code></a>：创建一个具有<em>未初始化</em>内存的 <code>Buffer</code>。</li><li><a href="/zh/nodejs/api/buffer#static-method-bufferfromarray"><code>Buffer.from(array)</code></a>：创建一个 <code>Buffer</code>，其中包含 <code>array</code> 的副本。</li><li><a href="/zh/nodejs/api/buffer#static-method-bufferfromarraybuffer-byteoffset-length"><code>Buffer.from(arrayBuffer[, byteOffset[, length]])</code></a> - 创建一个 <code>Buffer</code>，它包装给定的 <code>arrayBuffer</code>。</li><li><a href="/zh/nodejs/api/buffer#static-method-bufferfrombuffer"><code>Buffer.from(buffer)</code></a>：创建一个复制 <code>buffer</code> 的 <code>Buffer</code>。</li><li><a href="/zh/nodejs/api/buffer#static-method-bufferfromstring-encoding"><code>Buffer.from(string[, encoding])</code></a>：创建一个复制 <code>string</code> 的 <code>Buffer</code>。</li></ul><p>如果没有 <code>--pending-deprecation</code>，则运行时警告仅在 <code>node_modules</code> 之外的代码中才会出现。 这意味着不会为依赖项中 <code>Buffer()</code> 的使用发出弃用警告。 使用 <code>--pending-deprecation</code> 时，无论 <code>Buffer()</code> 的使用发生在何处，都会产生运行时警告。</p><h3 id="dep0006-child_process-optionscustomfds" tabindex="-1">DEP0006: <code>child_process</code> <code>options.customFds</code> <a class="header-anchor" href="#dep0006-child_process-optionscustomfds" aria-label="Permalink to “DEP0006: child_process options.customFds”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已停止使用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.11.14</td><td>运行时弃用。</td></tr><tr><td>v0.5.10</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p>在 <a href="/zh/nodejs/api/child_process"><code>child_process</code></a> 模块的 <code>spawn()</code>、<code>fork()</code> 和 <code>exec()</code> 方法中，<code>options.customFds</code> 选项已被弃用。应该使用 <code>options.stdio</code> 选项代替。</p><h3 id="dep0007-replace-cluster-workersuicide-with-workerexitedafterdisconnect" tabindex="-1">DEP0007: 将 <code>cluster</code> <code>worker.suicide</code> 替换为 <code>worker.exitedAfterDisconnect</code> <a class="header-anchor" href="#dep0007-replace-cluster-workersuicide-with-workerexitedafterdisconnect" aria-label="Permalink to “DEP0007: 将 cluster worker.suicide 替换为 worker.exitedAfterDisconnect”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v9.0.0</td><td>已停止使用。</td></tr><tr><td>v7.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0</td><td>已分配弃用代码。</td></tr><tr><td>v6.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p>在 Node.js <code>cluster</code> 的早期版本中，一个名为 <code>suicide</code> 的布尔属性被添加到 <code>Worker</code> 对象中。此属性的目的是提供有关 <code>Worker</code> 实例如何以及为何退出的指示。在 Node.js 6.0.0 中，旧属性已被弃用，并被新的 <a href="/zh/nodejs/api/cluster#workerexitedafterdisconnect"><code>worker.exitedAfterDisconnect</code></a> 属性替换。旧属性名称未能准确描述实际语义，并且不必要地带有情感色彩。</p><h3 id="dep0008-requirenodeconstants" tabindex="-1">DEP0008: <code>require(&#39;node:constants&#39;)</code> <a class="header-anchor" href="#dep0008-requirenodeconstants" aria-label="Permalink to “DEP0008: require(&#39;node:constants&#39;)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v6.12.0</td><td>已分配弃用代码。</td></tr><tr><td>v6.3.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><code>node:constants</code> 模块已被弃用。当需要访问与特定 Node.js 内置模块相关的常量时，开发者应改为参考相关模块公开的 <code>constants</code> 属性。例如，<code>require(&#39;node:fs&#39;).constants</code> 和 <code>require(&#39;node:os&#39;).constants</code>。</p><h3 id="dep0009-cryptopbkdf2-without-digest" tabindex="-1">DEP0009: 不带摘要的 <code>crypto.pbkdf2</code> <a class="header-anchor" href="#dep0009-cryptopbkdf2-without-digest" aria-label="Permalink to “DEP0009: 不带摘要的 crypto.pbkdf2”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.0.0</td><td>已停止使用（对于 <code>digest === null</code>）。</td></tr><tr><td>v11.0.0</td><td>运行时弃用（对于 <code>digest === null</code>）。</td></tr><tr><td>v8.0.0</td><td>已停止使用（对于 <code>digest === undefined</code>）。</td></tr><tr><td>v6.12.0</td><td>已分配弃用代码。</td></tr><tr><td>v6.0.0</td><td>运行时弃用（对于 <code>digest === undefined</code>）。</td></tr></tbody></table></div><p>类型：已停止使用</p><p>在 Node.js 6.0 中，不指定摘要的情况下使用 <a href="/zh/nodejs/api/crypto#cryptopbkdf2password-salt-iterations-keylen-digest-callback"><code>crypto.pbkdf2()</code></a> API 已被弃用，因为该方法默认使用不推荐的 <code>&#39;SHA1&#39;</code> 摘要。之前，会打印弃用警告。从 Node.js 8.0.0 开始，如果将 <code>digest</code> 设置为 <code>undefined</code> 调用 <code>crypto.pbkdf2()</code> 或 <code>crypto.pbkdf2Sync()</code> 将抛出一个 <code>TypeError</code>。</p><p>从 Node.js v11.0.0 开始，将 <code>digest</code> 设置为 <code>null</code> 调用这些函数会打印弃用警告，以便与 <code>digest</code> 为 <code>undefined</code> 时的行为保持一致。</p><p>但是，现在传递 <code>undefined</code> 或 <code>null</code> 都会抛出一个 <code>TypeError</code>。</p><h3 id="dep0010-cryptocreatecredentials" tabindex="-1">DEP0010: <code>crypto.createCredentials</code> <a class="header-anchor" href="#dep0010-cryptocreatecredentials" aria-label="Permalink to “DEP0010: crypto.createCredentials”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.0.0</td><td>已终止生命周期。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.11.13</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已终止生命周期</p><p><code>crypto.createCredentials()</code> API 已被移除。请使用 <a href="/zh/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> 代替。</p><h3 id="dep0011-cryptocredentials" tabindex="-1">DEP0011: <code>crypto.Credentials</code> <a class="header-anchor" href="#dep0011-cryptocredentials" aria-label="Permalink to “DEP0011: crypto.Credentials”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.0.0</td><td>已终止生命周期。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.11.13</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已终止生命周期</p><p><code>crypto.Credentials</code> 类已被移除。请使用 <a href="/zh/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.SecureContext</code></a> 代替。</p><h3 id="dep0012-domaindispose" tabindex="-1">DEP0012: <code>Domain.dispose</code> <a class="header-anchor" href="#dep0012-domaindispose" aria-label="Permalink to “DEP0012: Domain.dispose”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v9.0.0</td><td>已终止生命周期。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.11.7</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已终止生命周期</p><p><code>Domain.dispose()</code> 已被移除。请改为通过在域上设置的错误事件处理程序显式地从失败的 I/O 操作中恢复。</p><h3 id="dep0013-fs-asynchronous-function-without-callback" tabindex="-1">DEP0013: <code>fs</code> 没有回调的异步函数 <a class="header-anchor" href="#dep0013-fs-asynchronous-function-without-callback" aria-label="Permalink to “DEP0013: fs 没有回调的异步函数”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>已终止生命周期。</td></tr><tr><td>v7.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已终止生命周期</p><p>从 Node.js 10.0.0 开始，调用没有回调的异步函数会抛出一个 <code>TypeError</code>。参见 <a href="https://github.com/nodejs/node/pull/12562" target="_blank" rel="noreferrer">https://github.com/nodejs/node/pull/12562</a>。</p><h3 id="dep0014-fsread-legacy-string-interface" tabindex="-1">DEP0014: <code>fs.read</code> 遗留的 String 接口 <a class="header-anchor" href="#dep0014-fsread-legacy-string-interface" aria-label="Permalink to “DEP0014: fs.read 遗留的 String 接口”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v8.0.0</td><td>已终止生命周期。</td></tr><tr><td>v6.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.1.96</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 已终止生命周期</p><p>遗留的 <a href="/zh/nodejs/api/fs#fsreadfd-buffer-offset-length-position-callback"><code>fs.read()</code></a> <code>String</code> 接口已被弃用。请使用文档中提到的 <code>Buffer</code> API 代替。</p><h3 id="dep0015-fsreadsync-legacy-string-interface" tabindex="-1">DEP0015: <code>fs.readSync</code> 遗留的 String 接口 <a class="header-anchor" href="#dep0015-fsreadsync-legacy-string-interface" aria-label="Permalink to “DEP0015: fs.readSync 遗留的 String 接口”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v8.0.0</td><td>已终止生命周期。</td></tr><tr><td>v6.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.1.96</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 已终止生命周期</p><p>遗留的 <a href="/zh/nodejs/api/fs#fsreadsyncfd-buffer-offset-length-position"><code>fs.readSync()</code></a> <code>String</code> 接口已被弃用。请使用文档中提到的 <code>Buffer</code> API 代替。</p><h3 id="dep0016-global/root" tabindex="-1">DEP0016: <code>GLOBAL</code>/<code>root</code> <a class="header-anchor" href="#dep0016-global/root" aria-label="Permalink to “DEP0016: GLOBAL/root”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.0.0</td><td>已终止生命周期。</td></tr><tr><td>v6.12.0</td><td>已分配弃用代码。</td></tr><tr><td>v6.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p><code>GLOBAL</code> 和 <code>root</code> 作为 <code>global</code> 属性的别名，已在 Node.js 6.0.0 中被弃用，并且已被移除。</p><h3 id="dep0017-intlv8breakiterator" tabindex="-1">DEP0017: <code>Intl.v8BreakIterator</code> <a class="header-anchor" href="#dep0017-intlv8breakiterator" aria-label="Permalink to “DEP0017: Intl.v8BreakIterator”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v9.0.0</td><td>已终止生命周期。</td></tr><tr><td>v7.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p><code>Intl.v8BreakIterator</code> 是一个非标准扩展，已被移除。 参阅 <a href="https://github.com/tc39/proposal-intl-segmenter" target="_blank" rel="noreferrer"><code>Intl.Segmenter</code></a>。</p><h3 id="dep0018-unhandled-promise-rejections" tabindex="-1">DEP0018: 未处理的 Promise 拒绝 <a class="header-anchor" href="#dep0018-unhandled-promise-rejections" aria-label="Permalink to “DEP0018: 未处理的 Promise 拒绝”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.0.0</td><td>已终止生命周期。</td></tr><tr><td>v7.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p>未处理的 Promise 拒绝已被弃用。 默认情况下，未处理的 Promise 拒绝会终止 Node.js 进程，并返回一个非零退出码。 要更改 Node.js 处理未处理拒绝的方式，请使用 <a href="/zh/nodejs/api/cli#unhandled-rejectionsmode"><code>--unhandled-rejections</code></a> 命令行选项。</p><h3 id="dep0019-require-resolved-outside-directory" tabindex="-1">DEP0019: <code>require(&#39;.&#39;)</code> 解析到目录外部 <a class="header-anchor" href="#dep0019-require-resolved-outside-directory" aria-label="Permalink to “DEP0019: require(&#39;.&#39;) 解析到目录外部”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已移除功能。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v1.8.1</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p>在某些情况下，<code>require(&#39;.&#39;)</code> 可能会解析到包目录之外。 此行为已被移除。</p><h3 id="dep0020-serverconnections" tabindex="-1">DEP0020: <code>Server.connections</code> <a class="header-anchor" href="#dep0020-serverconnections" aria-label="Permalink to “DEP0020: Server.connections”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.0.0</td><td>Server.connections 已被移除。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.9.7</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p><code>Server.connections</code> 属性已在 Node.js v0.9.7 中被弃用，并且已被移除。 请使用 <a href="/zh/nodejs/api/net#servergetconnectionscallback"><code>Server.getConnections()</code></a> 方法代替。</p><h3 id="dep0021-serverlistenfd" tabindex="-1">DEP0021: <code>Server.listenFD</code> <a class="header-anchor" href="#dep0021-serverlistenfd" aria-label="Permalink to “DEP0021: Server.listenFD”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已终止生命周期。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.7.12</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p><code>Server.listenFD()</code> 方法已被弃用并移除。 请使用 <a href="/zh/nodejs/api/net#serverlistenhandle-backlog-callback"><code>Server.listen({fd: \\&lt;number\\&gt;})</code></a> 代替。</p><h3 id="dep0022-ostmpdir" tabindex="-1">DEP0022: <code>os.tmpDir()</code> <a class="header-anchor" href="#dep0022-ostmpdir" aria-label="Permalink to “DEP0022: os.tmpDir()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.0.0</td><td>已停止使用。</td></tr><tr><td>v7.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已停止使用</p><p><code>os.tmpDir()</code> API 在 Node.js 7.0.0 中被弃用，并且已被移除。请使用 <a href="/zh/nodejs/api/os#ostmpdir"><code>os.tmpdir()</code></a> 代替。</p><h3 id="dep0023-osgetnetworkinterfaces" tabindex="-1">DEP0023: <code>os.getNetworkInterfaces()</code> <a class="header-anchor" href="#dep0023-osgetnetworkinterfaces" aria-label="Permalink to “DEP0023: os.getNetworkInterfaces()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已停止使用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.6.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已停止使用</p><p><code>os.getNetworkInterfaces()</code> 方法已被弃用。请使用 <a href="/zh/nodejs/api/os#osnetworkinterfaces"><code>os.networkInterfaces()</code></a> 方法代替。</p><h3 id="dep0024-replserverprototypeconverttocontext" tabindex="-1">DEP0024: <code>REPLServer.prototype.convertToContext()</code> <a class="header-anchor" href="#dep0024-replserverprototypeconverttocontext" aria-label="Permalink to “DEP0024: REPLServer.prototype.convertToContext()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v9.0.0</td><td>已停止使用。</td></tr><tr><td>v7.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已停止使用</p><p><code>REPLServer.prototype.convertToContext()</code> API 已被移除。</p><h3 id="dep0025-requirenodesys" tabindex="-1">DEP0025: <code>require(&#39;node:sys&#39;)</code> <a class="header-anchor" href="#dep0025-requirenodesys" aria-label="Permalink to “DEP0025: require(&#39;node:sys&#39;)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v1.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p><code>node:sys</code> 模块已被弃用。请使用 <a href="/zh/nodejs/api/util"><code>util</code></a> 模块代替。</p><h3 id="dep0026-utilprint" tabindex="-1">DEP0026: <code>util.print()</code> <a class="header-anchor" href="#dep0026-utilprint" aria-label="Permalink to “DEP0026: util.print()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已停止使用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.11.3</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已停止使用</p><p><code>util.print()</code> 已被移除。请使用 <a href="/zh/nodejs/api/console#consolelogdata-args"><code>console.log()</code></a> 代替。</p><h3 id="dep0027-utilputs" tabindex="-1">DEP0027: <code>util.puts()</code> <a class="header-anchor" href="#dep0027-utilputs" aria-label="Permalink to “DEP0027: util.puts()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已停止使用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.11.3</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已停止使用</p><p><code>util.puts()</code> 已被移除。请使用 <a href="/zh/nodejs/api/console#consolelogdata-args"><code>console.log()</code></a> 代替。</p><h3 id="dep0028-utildebug" tabindex="-1">DEP0028: <code>util.debug()</code> <a class="header-anchor" href="#dep0028-utildebug" aria-label="Permalink to “DEP0028: util.debug()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已停止使用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.11.3</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已停止使用</p><p><code>util.debug()</code> 已被移除。请使用 <a href="/zh/nodejs/api/console#consoleerrordata-args"><code>console.error()</code></a> 代替。</p><h3 id="dep0029-utilerror" tabindex="-1">DEP0029: <code>util.error()</code> <a class="header-anchor" href="#dep0029-utilerror" aria-label="Permalink to “DEP0029: util.error()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已终止。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.11.3</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止</p><p><code>util.error()</code> 已被移除。请使用 <a href="/zh/nodejs/api/console#consoleerrordata-args"><code>console.error()</code></a> 代替。</p><h3 id="dep0030-slowbuffer" tabindex="-1">DEP0030: <code>SlowBuffer</code> <a class="header-anchor" href="#dep0030-slowbuffer" aria-label="Permalink to “DEP0030: SlowBuffer”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v6.12.0</td><td>已分配弃用代码。</td></tr><tr><td>v6.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/buffer#class-slowbuffer"><code>SlowBuffer</code></a> 类已被弃用。请使用 <a href="/zh/nodejs/api/buffer#static-method-bufferallocunsafeslowsize"><code>Buffer.allocUnsafeSlow(size)</code></a> 代替。</p><h3 id="dep0031-ecdhsetpublickey" tabindex="-1">DEP0031: <code>ecdh.setPublicKey()</code> <a class="header-anchor" href="#dep0031-ecdhsetpublickey" aria-label="Permalink to “DEP0031: ecdh.setPublicKey()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v6.12.0</td><td>已分配弃用代码。</td></tr><tr><td>v5.2.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/crypto#ecdhsetpublickeypublickey-encoding"><code>ecdh.setPublicKey()</code></a> 方法已被弃用，因为它包含在 API 中没有用处。</p><h3 id="dep0032-nodedomain-module" tabindex="-1">DEP0032: <code>node:domain</code> 模块 <a class="header-anchor" href="#dep0032-nodedomain-module" aria-label="Permalink to “DEP0032: node:domain 模块”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v1.4.2</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/domain"><code>domain</code></a> 模块已被弃用，不应使用。</p><h3 id="dep0033-eventemitterlistenercount" tabindex="-1">DEP0033: <code>EventEmitter.listenerCount()</code> <a class="header-anchor" href="#dep0033-eventemitterlistenercount" aria-label="Permalink to “DEP0033: EventEmitter.listenerCount()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v3.2.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/events#eventslistenercountemitter-eventname"><code>events.listenerCount(emitter, eventName)</code></a> API 已被弃用。请使用 <a href="/zh/nodejs/api/events#emitterlistenercounteventname-listener"><code>emitter.listenerCount(eventName)</code></a> 代替。</p><h3 id="dep0034-fsexistspath-callback" tabindex="-1">DEP0034: <code>fs.exists(path, callback)</code> <a class="header-anchor" href="#dep0034-fsexistspath-callback" aria-label="Permalink to “DEP0034: fs.exists(path, callback)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v1.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/fs#fsexistspath-callback"><code>fs.exists(path, callback)</code></a> API 已被弃用。请使用 <a href="/zh/nodejs/api/fs#fsstatpath-options-callback"><code>fs.stat()</code></a> 或 <a href="/zh/nodejs/api/fs#fsaccesspath-mode-callback"><code>fs.access()</code></a> 代替。</p><h3 id="dep0035-fslchmodpath-mode-callback" tabindex="-1">DEP0035: <code>fs.lchmod(path, mode, callback)</code> <a class="header-anchor" href="#dep0035-fslchmodpath-mode-callback" aria-label="Permalink to “DEP0035: fs.lchmod(path, mode, callback)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.4.7</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/fs#fslchmodpath-mode-callback"><code>fs.lchmod(path, mode, callback)</code></a> API 已弃用。</p><h3 id="dep0036-fslchmodsyncpath-mode" tabindex="-1">DEP0036: <code>fs.lchmodSync(path, mode)</code> <a class="header-anchor" href="#dep0036-fslchmodsyncpath-mode" aria-label="Permalink to “DEP0036: fs.lchmodSync(path, mode)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.4.7</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/fs#fslchmodsyncpath-mode"><code>fs.lchmodSync(path, mode)</code></a> API 已弃用。</p><h3 id="dep0037-fslchownpath-uid-gid-callback" tabindex="-1">DEP0037: <code>fs.lchown(path, uid, gid, callback)</code> <a class="header-anchor" href="#dep0037-fslchownpath-uid-gid-callback" aria-label="Permalink to “DEP0037: fs.lchown(path, uid, gid, callback)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.6.0</td><td>撤销弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.4.7</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：撤销弃用</p><p><a href="/zh/nodejs/api/fs#fslchownpath-uid-gid-callback"><code>fs.lchown(path, uid, gid, callback)</code></a> API 已被弃用。 撤销了弃用，因为 libuv 中添加了必需的支持 API。</p><h3 id="dep0038-fslchownsyncpath-uid-gid" tabindex="-1">DEP0038: <code>fs.lchownSync(path, uid, gid)</code> <a class="header-anchor" href="#dep0038-fslchownsyncpath-uid-gid" aria-label="Permalink to “DEP0038: fs.lchownSync(path, uid, gid)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.6.0</td><td>撤销弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.4.7</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：撤销弃用</p><p><a href="/zh/nodejs/api/fs#fslchownsyncpath-uid-gid"><code>fs.lchownSync(path, uid, gid)</code></a> API 已被弃用。 撤销了弃用，因为 libuv 中添加了必需的支持 API。</p><h3 id="dep0039-requireextensions" tabindex="-1">DEP0039: <code>require.extensions</code> <a class="header-anchor" href="#dep0039-requireextensions" aria-label="Permalink to “DEP0039: require.extensions”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.10.6</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/modules#requireextensions"><code>require.extensions</code></a> 属性已弃用。</p><h3 id="dep0040-nodepunycode-module" tabindex="-1">DEP0040: <code>node:punycode</code> 模块 <a class="header-anchor" href="#dep0040-nodepunycode-module" aria-label="Permalink to “DEP0040: node:punycode 模块”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v21.0.0</td><td>运行时弃用。</td></tr><tr><td>v16.6.0</td><td>增加了对 <code>--pending-deprecation</code> 的支持。</td></tr><tr><td>v7.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p><a href="/zh/nodejs/api/punycode"><code>punycode</code></a> 模块已弃用。 请使用用户态的替代方案。</p><h3 id="dep0041-node_repl_history_file-environment-variable" tabindex="-1">DEP0041: <code>NODE_REPL_HISTORY_FILE</code> 环境变量 <a class="header-anchor" href="#dep0041-node_repl_history_file-environment-variable" aria-label="Permalink to “DEP0041: NODE_REPL_HISTORY_FILE 环境变量”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>寿终正寝。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v3.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：寿终正寝</p><p><code>NODE_REPL_HISTORY_FILE</code> 环境变量已被移除。请使用 <code>NODE_REPL_HISTORY</code> 代替。</p><h3 id="dep0042-tlscryptostream" tabindex="-1">DEP0042: <code>tls.CryptoStream</code> <a class="header-anchor" href="#dep0042-tlscryptostream" aria-label="Permalink to “DEP0042: tls.CryptoStream”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>寿终正寝。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v0.11.3</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：寿终正寝</p><p><a href="/zh/nodejs/api/tls#class-tlscryptostream"><code>tls.CryptoStream</code></a> 类已被移除。请使用 <a href="/zh/nodejs/api/tls#class-tlstlssocket"><code>tls.TLSSocket</code></a> 代替。</p><h3 id="dep0043-tlssecurepair" tabindex="-1">DEP0043: <code>tls.SecurePair</code> <a class="header-anchor" href="#dep0043-tlssecurepair" aria-label="Permalink to “DEP0043: tls.SecurePair”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v8.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0</td><td>已分配弃用代码。</td></tr><tr><td>v6.0.0</td><td>仅文档弃用。</td></tr><tr><td>v0.11.15</td><td>撤销弃用。</td></tr><tr><td>v0.11.3</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/tls#class-tlssecurepair"><code>tls.SecurePair</code></a> 类已弃用。请使用 <a href="/zh/nodejs/api/tls#class-tlstlssocket"><code>tls.TLSSocket</code></a> 代替。</p><h3 id="dep0044-utilisarray" tabindex="-1">DEP0044: <code>util.isArray()</code> <a class="header-anchor" href="#dep0044-utilisarray" aria-label="Permalink to “DEP0044: util.isArray()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p><a href="/zh/nodejs/api/util#utilisarrayobject"><code>util.isArray()</code></a> API 已弃用。请使用 <code>Array.isArray()</code> 代替。</p><h3 id="dep0045-utilisboolean" tabindex="-1">DEP0045: <code>util.isBoolean()</code> <a class="header-anchor" href="#dep0045-utilisboolean" aria-label="Permalink to “DEP0045: util.isBoolean()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>寿终正寝弃用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：寿终正寝</p><p><code>util.isBoolean()</code> API 已被移除。请使用 <code>typeof arg === &#39;boolean&#39;</code> 代替。</p><h3 id="dep0046-utilisbuffer" tabindex="-1">DEP0046: <code>util.isBuffer()</code> <a class="header-anchor" href="#dep0046-utilisbuffer" aria-label="Permalink to “DEP0046: util.isBuffer()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>寿终正寝弃用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：寿终正寝</p><p><code>util.isBuffer()</code> API 已被移除。请使用 <a href="/zh/nodejs/api/buffer#static-method-bufferisbufferobj"><code>Buffer.isBuffer()</code></a> 代替。</p><h3 id="dep0047-utilisdate" tabindex="-1">DEP0047: <code>util.isDate()</code> <a class="header-anchor" href="#dep0047-utilisdate" aria-label="Permalink to “DEP0047: util.isDate()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>生命周期结束弃用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：生命周期结束</p><p><code>util.isDate()</code> API 已被移除。请使用 <code>arg instanceof Date</code> 代替。</p><h3 id="dep0048-utiliserror" tabindex="-1">DEP0048: <code>util.isError()</code> <a class="header-anchor" href="#dep0048-utiliserror" aria-label="Permalink to “DEP0048: util.isError()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>生命周期结束弃用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：生命周期结束</p><p><code>util.isError()</code> API 已被移除。请使用 <code>Object.prototype.toString(arg) === &#39;[object Error]&#39; || arg instanceof Error</code> 代替。</p><h3 id="dep0049-utilisfunction" tabindex="-1">DEP0049: <code>util.isFunction()</code> <a class="header-anchor" href="#dep0049-utilisfunction" aria-label="Permalink to “DEP0049: util.isFunction()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>生命周期结束弃用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：生命周期结束</p><p><code>util.isFunction()</code> API 已被移除。请使用 <code>typeof arg === &#39;function&#39;</code> 代替。</p><h3 id="dep0050-utilisnull" tabindex="-1">DEP0050: <code>util.isNull()</code> <a class="header-anchor" href="#dep0050-utilisnull" aria-label="Permalink to “DEP0050: util.isNull()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>生命周期结束弃用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：生命周期结束</p><p><code>util.isNull()</code> API 已被移除。请使用 <code>arg === null</code> 代替。</p><h3 id="dep0051-utilisnullorundefined" tabindex="-1">DEP0051: <code>util.isNullOrUndefined()</code> <a class="header-anchor" href="#dep0051-utilisnullorundefined" aria-label="Permalink to “DEP0051: util.isNullOrUndefined()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>生命周期结束弃用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：生命周期结束</p><p><code>util.isNullOrUndefined()</code> API 已被移除。请使用 <code>arg === null || arg === undefined</code> 代替。</p><h3 id="dep0052-utilisnumber" tabindex="-1">DEP0052: <code>util.isNumber()</code> <a class="header-anchor" href="#dep0052-utilisnumber" aria-label="Permalink to “DEP0052: util.isNumber()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>停止使用弃用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：停止使用</p><p><code>util.isNumber()</code> API 已被移除。请使用 <code>typeof arg === &#39;number&#39;</code> 代替。</p><h3 id="dep0053-utilisobject" tabindex="-1">DEP0053: <code>util.isObject()</code> <a class="header-anchor" href="#dep0053-utilisobject" aria-label="Permalink to “DEP0053: util.isObject()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>停止使用弃用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：停止使用</p><p><code>util.isObject()</code> API 已被移除。请使用 <code>arg &amp;&amp; typeof arg === &#39;object&#39;</code> 代替。</p><h3 id="dep0054-utilisprimitive" tabindex="-1">DEP0054: <code>util.isPrimitive()</code> <a class="header-anchor" href="#dep0054-utilisprimitive" aria-label="Permalink to “DEP0054: util.isPrimitive()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>停止使用弃用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：停止使用</p><p><code>util.isPrimitive()</code> API 已被移除。请使用 <code>arg === null || (typeof arg !==&#39;object&#39; &amp;&amp; typeof arg !== &#39;function&#39;)</code> 代替。</p><h3 id="dep0055-utilisregexp" tabindex="-1">DEP0055: <code>util.isRegExp()</code> <a class="header-anchor" href="#dep0055-utilisregexp" aria-label="Permalink to “DEP0055: util.isRegExp()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>停止使用弃用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：停止使用</p><p><code>util.isRegExp()</code> API 已被移除。请使用 <code>arg instanceof RegExp</code> 代替。</p><h3 id="dep0056-utilisstring" tabindex="-1">DEP0056: <code>util.isString()</code> <a class="header-anchor" href="#dep0056-utilisstring" aria-label="Permalink to “DEP0056: util.isString()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>停止使用弃用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：停止使用</p><p><code>util.isString()</code> API 已被移除。请使用 <code>typeof arg === &#39;string&#39;</code> 代替。</p><h3 id="dep0057-utilissymbol" tabindex="-1">DEP0057: <code>util.isSymbol()</code> <a class="header-anchor" href="#dep0057-utilissymbol" aria-label="Permalink to “DEP0057: util.isSymbol()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>已停止使用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p><code>util.isSymbol()</code> API 已被移除。请使用 <code>typeof arg === &#39;symbol&#39;</code> 代替。</p><h3 id="dep0058-utilisundefined" tabindex="-1">DEP0058: <code>util.isUndefined()</code> <a class="header-anchor" href="#dep0058-utilisundefined" aria-label="Permalink to “DEP0058: util.isUndefined()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>已停止使用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0, v4.8.6</td><td>已分配弃用代码。</td></tr><tr><td>v4.0.0, v3.3.1</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p><code>util.isUndefined()</code> API 已被移除。请使用 <code>arg === undefined</code> 代替。</p><h3 id="dep0059-utillog" tabindex="-1">DEP0059: <code>util.log()</code> <a class="header-anchor" href="#dep0059-utillog" aria-label="Permalink to “DEP0059: util.log()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>已停止使用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0</td><td>已分配弃用代码。</td></tr><tr><td>v6.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p><code>util.log()</code> API 已被移除，因为它是一个未维护的遗留 API，由于意外暴露给用户空间。 相反，请根据您的具体需求考虑以下替代方案：</p><ul><li><strong>第三方日志库</strong></li><li><strong>使用 <code>console.log(new Date().toLocaleString(), message)</code></strong></li></ul><p>通过采用这些替代方案之一，您可以从 <code>util.log()</code> 过渡，并选择一种符合您的应用程序的特定需求和复杂性的日志记录策略。</p><h3 id="dep0060-util_extend" tabindex="-1">DEP0060: <code>util._extend()</code> <a class="header-anchor" href="#dep0060-util_extend" aria-label="Permalink to “DEP0060: util._extend()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0</td><td>已分配弃用代码。</td></tr><tr><td>v6.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p><a href="/zh/nodejs/api/util#util-extendtarget-source"><code>util._extend()</code></a> API 已弃用，因为它是一个未维护的遗留 API，由于意外暴露给用户空间。 请使用 <code>target = Object.assign(target, source)</code> 代替。</p><h3 id="dep0061-fssyncwritestream" tabindex="-1">DEP0061: <code>fs.SyncWriteStream</code> <a class="header-anchor" href="#dep0061-fssyncwritestream" aria-label="Permalink to “DEP0061: fs.SyncWriteStream”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.0.0</td><td>已停止使用。</td></tr><tr><td>v8.0.0</td><td>运行时弃用。</td></tr><tr><td>v7.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p><code>fs.SyncWriteStream</code> 类从未打算作为公开可访问的 API，现已删除。没有可替代的 API。请使用用户空间的替代方案。</p><h3 id="dep0062-node---debug" tabindex="-1">DEP0062: <code>node --debug</code> <a class="header-anchor" href="#dep0062-node---debug" aria-label="Permalink to “DEP0062: node --debug”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已停止使用。</td></tr><tr><td>v8.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p><code>--debug</code> 激活了传统的 V8 调试器接口，该接口已从 V8 5.8 开始删除。它被 Inspector 替代，Inspector 通过 <code>--inspect</code> 激活。</p><h3 id="dep0063-serverresponseprototypewriteheader" tabindex="-1">DEP0063: <code>ServerResponse.prototype.writeHeader()</code> <a class="header-anchor" href="#dep0063-serverresponseprototypewriteheader" aria-label="Permalink to “DEP0063: ServerResponse.prototype.writeHeader()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v8.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><code>node:http</code> 模块的 <code>ServerResponse.prototype.writeHeader()</code> API 已弃用。请使用 <code>ServerResponse.prototype.writeHead()</code> 代替。</p><p><code>ServerResponse.prototype.writeHeader()</code> 方法从未作为官方支持的 API 记录在案。</p><h3 id="dep0064-tlscreatesecurepair" tabindex="-1">DEP0064: <code>tls.createSecurePair()</code> <a class="header-anchor" href="#dep0064-tlscreatesecurepair" aria-label="Permalink to “DEP0064: tls.createSecurePair()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v8.0.0</td><td>运行时弃用。</td></tr><tr><td>v6.12.0</td><td>已分配弃用代码。</td></tr><tr><td>v6.0.0</td><td>仅文档弃用。</td></tr><tr><td>v0.11.15</td><td>撤销弃用。</td></tr><tr><td>v0.11.3</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p><code>tls.createSecurePair()</code> API 在 Node.js 0.11.3 的文档中已弃用。用户应使用 <code>tls.Socket</code> 代替。</p><h3 id="dep0065-replrepl_mode_magic-and-node_repl_mode=magic" tabindex="-1">DEP0065: <code>repl.REPL_MODE_MAGIC</code> 和 <code>NODE_REPL_MODE=magic</code> <a class="header-anchor" href="#dep0065-replrepl_mode_magic-and-node_repl_mode=magic" aria-label="Permalink to “DEP0065: repl.REPL_MODE_MAGIC 和 NODE_REPL_MODE=magic”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>已停止使用。</td></tr><tr><td>v8.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p><code>node:repl</code> 模块的 <code>REPL_MODE_MAGIC</code> 常量（用于 <code>replMode</code> 选项）已被删除。自从 Node.js 6.0.0 导入 V8 5.0 以来，它的行为在功能上与 <code>REPL_MODE_SLOPPY</code> 相同。请使用 <code>REPL_MODE_SLOPPY</code> 代替。</p><p><code>NODE_REPL_MODE</code> 环境变量用于设置交互式 <code>node</code> 会话的底层 <code>replMode</code>。它的值 <code>magic</code> 也被删除。请使用 <code>sloppy</code> 代替。</p><h3 id="dep0066-outgoingmessageprototype_headers-outgoingmessageprototype_headernames" tabindex="-1">DEP0066: <code>OutgoingMessage.prototype._headers, OutgoingMessage.prototype._headerNames</code> <a class="header-anchor" href="#dep0066-outgoingmessageprototype_headers-outgoingmessageprototype_headernames" aria-label="Permalink to “DEP0066: OutgoingMessage.prototype._headers, OutgoingMessage.prototype._headerNames”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>运行时弃用。</td></tr><tr><td>v8.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p><code>node:http</code> 模块的 <code>OutgoingMessage.prototype._headers</code> 和 <code>OutgoingMessage.prototype._headerNames</code> 属性已被弃用。请使用公共方法（例如 <code>OutgoingMessage.prototype.getHeader()</code>、<code>OutgoingMessage.prototype.getHeaders()</code>、<code>OutgoingMessage.prototype.getHeaderNames()</code>、<code>OutgoingMessage.prototype.getRawHeaderNames()</code>、<code>OutgoingMessage.prototype.hasHeader()</code>、<code>OutgoingMessage.prototype.removeHeader()</code>、<code>OutgoingMessage.prototype.setHeader()</code>）来处理传出标头。</p><p><code>OutgoingMessage.prototype._headers</code> 和 <code>OutgoingMessage.prototype._headerNames</code> 属性从未被记录为官方支持的属性。</p><h3 id="dep0067-outgoingmessageprototype_renderheaders" tabindex="-1">DEP0067: <code>OutgoingMessage.prototype._renderHeaders</code> <a class="header-anchor" href="#dep0067-outgoingmessageprototype_renderheaders" aria-label="Permalink to “DEP0067: OutgoingMessage.prototype._renderHeaders”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v8.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 仅文档</p><p><code>node:http</code> 模块的 <code>OutgoingMessage.prototype._renderHeaders()</code> API 已被弃用。</p><p><code>OutgoingMessage.prototype._renderHeaders</code> 属性从未被记录为官方支持的 API。</p><h3 id="dep0068-node-debug" tabindex="-1">DEP0068: <code>node debug</code> <a class="header-anchor" href="#dep0068-node-debug" aria-label="Permalink to “DEP0068: node debug”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.0.0</td><td>遗留的 <code>node debug</code> 命令已被移除。</td></tr><tr><td>v8.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已终止</p><p><code>node debug</code> 对应于遗留的 CLI 调试器，它已被基于 V8 检查器的 CLI 调试器替换，该调试器可通过 <code>node inspect</code> 获得。</p><h3 id="dep0069-vmrunindebugcontextstring" tabindex="-1">DEP0069: <code>vm.runInDebugContext(string)</code> <a class="header-anchor" href="#dep0069-vmrunindebugcontextstring" aria-label="Permalink to “DEP0069: vm.runInDebugContext(string)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>已终止。</td></tr><tr><td>v9.0.0</td><td>运行时弃用。</td></tr><tr><td>v8.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 已终止</p><p>DebugContext 已在 V8 中移除，并且在 Node.js 10+ 中不可用。</p><p>DebugContext 是一个实验性的 API。</p><h3 id="dep0070-async_hookscurrentid" tabindex="-1">DEP0070: <code>async_hooks.currentId()</code> <a class="header-anchor" href="#dep0070-async_hookscurrentid" aria-label="Permalink to “DEP0070: async_hooks.currentId()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v9.0.0</td><td>已终止。</td></tr><tr><td>v8.2.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已终止</p><p><code>async_hooks.currentId()</code> 为了清晰起见，已重命名为 <code>async_hooks.executionAsyncId()</code>。</p><p>此更改是在 <code>async_hooks</code> 是实验性 API 时进行的。</p><h3 id="dep0071-async_hookstriggerid" tabindex="-1">DEP0071: <code>async_hooks.triggerId()</code> <a class="header-anchor" href="#dep0071-async_hookstriggerid" aria-label="Permalink to “DEP0071: async_hooks.triggerId()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v9.0.0</td><td>已终止生命周期。</td></tr><tr><td>v8.2.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p><code>async_hooks.triggerId()</code> 为了清晰起见，已重命名为 <code>async_hooks.triggerAsyncId()</code>。</p><p>此更改是在 <code>async_hooks</code> 还是实验性 API 时进行的。</p><h3 id="dep0072-async_hooksasyncresourcetriggerid" tabindex="-1">DEP0072: <code>async_hooks.AsyncResource.triggerId()</code> <a class="header-anchor" href="#dep0072-async_hooksasyncresourcetriggerid" aria-label="Permalink to “DEP0072: async_hooks.AsyncResource.triggerId()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v9.0.0</td><td>已终止生命周期。</td></tr><tr><td>v8.2.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p><code>async_hooks.AsyncResource.triggerId()</code> 为了清晰起见，已重命名为 <code>async_hooks.AsyncResource.triggerAsyncId()</code>。</p><p>此更改是在 <code>async_hooks</code> 还是实验性 API 时进行的。</p><h3 id="dep0073-several-internal-properties-of-netserver" tabindex="-1">DEP0073: <code>net.Server</code> 的多个内部属性 <a class="header-anchor" href="#dep0073-several-internal-properties-of-netserver" aria-label="Permalink to “DEP0073: net.Server 的多个内部属性”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>已终止生命周期。</td></tr><tr><td>v9.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p>访问 <code>net.Server</code> 实例的几个名称不当的内部、未记录的属性已被弃用。</p><p>由于原始 API 未被记录，并且对于非内部代码通常没有用处，因此没有提供替代 API。</p><h3 id="dep0074-replserverbufferedcommand" tabindex="-1">DEP0074: <code>REPLServer.bufferedCommand</code> <a class="header-anchor" href="#dep0074-replserverbufferedcommand" aria-label="Permalink to “DEP0074: REPLServer.bufferedCommand”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.0.0</td><td>已终止生命周期。</td></tr><tr><td>v9.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p><code>REPLServer.bufferedCommand</code> 属性已被弃用，建议使用 <a href="/zh/nodejs/api/repl#replserverclearbufferedcommand"><code>REPLServer.clearBufferedCommand()</code></a>。</p><h3 id="dep0075-replserverparsereplkeyword" tabindex="-1">DEP0075: <code>REPLServer.parseREPLKeyword()</code> <a class="header-anchor" href="#dep0075-replserverparsereplkeyword" aria-label="Permalink to “DEP0075: REPLServer.parseREPLKeyword()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.0.0</td><td>已终止生命周期。</td></tr><tr><td>v9.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p><code>REPLServer.parseREPLKeyword()</code> 已从用户区可见性中移除。</p><h3 id="dep0076-tlsparsecertstring" tabindex="-1">DEP0076: <code>tls.parseCertString()</code> <a class="header-anchor" href="#dep0076-tlsparsecertstring" aria-label="Permalink to “DEP0076: tls.parseCertString()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v18.0.0</td><td>已终止生命周期。</td></tr><tr><td>v9.0.0</td><td>运行时弃用。</td></tr><tr><td>v8.6.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：已终止生命周期</p><p><code>tls.parseCertString()</code> 是一个简单的解析助手，由于错误而公开。 虽然它应该解析证书主题和颁发者字符串，但它从未正确处理多值相对区分名称。</p><p>本文档的早期版本建议使用 <code>querystring.parse()</code> 作为 <code>tls.parseCertString()</code> 的替代方法。 但是，<code>querystring.parse()</code> 也无法正确处理所有证书主题，因此不应使用。</p><h3 id="dep0077-module_debug" tabindex="-1">DEP0077: <code>Module._debug()</code> <a class="header-anchor" href="#dep0077-module_debug" aria-label="Permalink to “DEP0077: Module._debug()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v9.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p><code>Module._debug()</code> 已弃用。</p><p><code>Module._debug()</code> 函数从未被正式记录为受支持的 API。</p><h3 id="dep0078-replserverturnoffeditormode" tabindex="-1">DEP0078: <code>REPLServer.turnOffEditorMode()</code> <a class="header-anchor" href="#dep0078-replserverturnoffeditormode" aria-label="Permalink to “DEP0078: REPLServer.turnOffEditorMode()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.0.0</td><td>寿命终止。</td></tr><tr><td>v9.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：寿命终止</p><p><code>REPLServer.turnOffEditorMode()</code> 已从用户态可见性中移除。</p><h3 id="dep0079-custom-inspection-function-on-objects-via-inspect" tabindex="-1">DEP0079: 通过 <code>.inspect()</code> 在对象上自定义检查函数 <a class="header-anchor" href="#dep0079-custom-inspection-function-on-objects-via-inspect" aria-label="Permalink to “DEP0079: 通过 .inspect() 在对象上自定义检查函数”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.0.0</td><td>寿命终止。</td></tr><tr><td>v10.0.0</td><td>运行时弃用。</td></tr><tr><td>v8.7.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：寿命终止</p><p>使用对象上名为 <code>inspect</code> 的属性来为 <a href="/zh/nodejs/api/util#utilinspectobject-options"><code>util.inspect()</code></a> 指定自定义检查函数已被弃用。 请改用 <a href="/zh/nodejs/api/util#utilinspectcustom"><code>util.inspect.custom</code></a>。 为了与 6.4.0 之前的 Node.js 版本向后兼容，可以同时指定两者。</p><h3 id="dep0080-path_makelong" tabindex="-1">DEP0080: <code>path._makeLong()</code> <a class="header-anchor" href="#dep0080-path_makelong" aria-label="Permalink to “DEP0080: path._makeLong()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v9.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p>内部 <code>path._makeLong()</code> 并非供公共使用。 但是，用户态模块发现它很有用。 内部 API 已被弃用，并替换为相同的公共 <code>path.toNamespacedPath()</code> 方法。</p><h3 id="dep0081-fstruncate-using-a-file-descriptor" tabindex="-1">DEP0081: 使用文件描述符的 <code>fs.truncate()</code> <a class="header-anchor" href="#dep0081-fstruncate-using-a-file-descriptor" aria-label="Permalink to “DEP0081: 使用文件描述符的 fs.truncate()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v9.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p>使用文件描述符的 <code>fs.truncate()</code> <code>fs.truncateSync()</code> 用法已被弃用。 请使用 <code>fs.ftruncate()</code> 或 <code>fs.ftruncateSync()</code> 来处理文件描述符。</p><h3 id="dep0082-replserverprototypememory" tabindex="-1">DEP0082: <code>REPLServer.prototype.memory()</code> <a class="header-anchor" href="#dep0082-replserverprototypememory" aria-label="Permalink to “DEP0082: REPLServer.prototype.memory()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.0.0</td><td>寿命终止。</td></tr><tr><td>v9.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：寿命终止</p><p><code>REPLServer.prototype.memory()</code> 仅对 <code>REPLServer</code> 本身的内部机制是必需的。 不要使用此函数。</p><h3 id="dep0083-disabling-ecdh-by-setting-ecdhcurve-to-false" tabindex="-1">DEP0083：通过将 <code>ecdhCurve</code> 设置为 <code>false</code> 来禁用 ECDH <a class="header-anchor" href="#dep0083-disabling-ecdh-by-setting-ecdhcurve-to-false" aria-label="Permalink to “DEP0083：通过将 ecdhCurve 设置为 false 来禁用 ECDH”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>寿命终止。</td></tr><tr><td>v9.2.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：寿命终止。</p><p><code>tls.createSecureContext()</code> 和 <code>tls.TLSSocket</code> 的 <code>ecdhCurve</code> 选项可以设置为 <code>false</code>，仅在服务器上完全禁用 ECDH。 为了迁移到 OpenSSL 1.1.0 并与客户端保持一致，此模式已被弃用，现在不受支持。 请改用 <code>ciphers</code> 参数。</p><h3 id="dep0084-requiring-bundled-internal-dependencies" tabindex="-1">DEP0084：要求捆绑的内部依赖项 <a class="header-anchor" href="#dep0084-requiring-bundled-internal-dependencies" aria-label="Permalink to “DEP0084：要求捆绑的内部依赖项”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>此功能已被移除。</td></tr><tr><td>v10.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：寿命终止</p><p>自 Node.js 4.4.0 和 5.2.0 版本以来，一些仅供内部使用的模块通过 <code>require()</code> 错误地暴露给用户代码。 这些模块是：</p><ul><li><code>v8/tools/codemap</code></li><li><code>v8/tools/consarray</code></li><li><code>v8/tools/csvparser</code></li><li><code>v8/tools/logreader</code></li><li><code>v8/tools/profile_view</code></li><li><code>v8/tools/profile</code></li><li><code>v8/tools/SourceMap</code></li><li><code>v8/tools/splaytree</code></li><li><code>v8/tools/tickprocessor-driver</code></li><li><code>v8/tools/tickprocessor</code></li><li><code>node-inspect/lib/_inspect</code> (从 7.6.0 开始)</li><li><code>node-inspect/lib/internal/inspect_client</code> (从 7.6.0 开始)</li><li><code>node-inspect/lib/internal/inspect_repl</code> (从 7.6.0 开始)</li></ul><p><code>v8/*</code> 模块没有任何导出，如果未以特定顺序导入，实际上会抛出错误。 因此，通过 <code>require()</code> 导入它们几乎没有合法的用例。</p><p>另一方面，<code>node-inspect</code> 可以通过包管理器在本地安装，因为它以相同的名称发布在 npm 注册表上。 如果这样做，则无需修改源代码。</p><h3 id="dep0085-asynchooks-sensitive-api" tabindex="-1">DEP0085：AsyncHooks 敏感 API <a class="header-anchor" href="#dep0085-asynchooks-sensitive-api" aria-label="Permalink to “DEP0085：AsyncHooks 敏感 API”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>寿命终止。</td></tr><tr><td>v9.4.0, v8.10.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：寿命终止</p><p>AsyncHooks 敏感 API 从未被记录，并且存在各种小问题。 请改用 <code>AsyncResource</code> API。 参见 <a href="https://github.com/nodejs/node/issues/15572" target="_blank" rel="noreferrer">https://github.com/nodejs/node/issues/15572</a>。</p><h3 id="dep0086-remove-runinasyncidscope" tabindex="-1">DEP0086: 移除 <code>runInAsyncIdScope</code> <a class="header-anchor" href="#dep0086-remove-runinasyncidscope" aria-label="Permalink to “DEP0086: 移除 runInAsyncIdScope”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>已停止使用。</td></tr><tr><td>v9.4.0, v8.10.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p><code>runInAsyncIdScope</code> 不会触发 <code>&#39;before&#39;</code> 或 <code>&#39;after&#39;</code> 事件，因此可能导致很多问题。 请参阅 <a href="https://github.com/nodejs/node/issues/14328" target="_blank" rel="noreferrer">https://github.com/nodejs/node/issues/14328</a>。</p><h3 id="dep0089-requirenodeassert" tabindex="-1">DEP0089: <code>require(&#39;node:assert&#39;)</code> <a class="header-anchor" href="#dep0089-requirenodeassert" aria-label="Permalink to “DEP0089: require(&#39;node:assert&#39;)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.8.0</td><td>撤销弃用。</td></tr><tr><td>v9.9.0, v8.13.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：撤销弃用</p><p>不建议直接导入 assert，因为公开的函数使用宽松的相等性检查。 该弃用已被撤销，因为不鼓励使用 <code>node:assert</code> 模块，并且该弃用导致开发人员的困惑。</p><h3 id="dep0090-invalid-gcm-authentication-tag-lengths" tabindex="-1">DEP0090: 无效的 GCM 身份验证标记长度 <a class="header-anchor" href="#dep0090-invalid-gcm-authentication-tag-lengths" aria-label="Permalink to “DEP0090: 无效的 GCM 身份验证标记长度”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.0.0</td><td>已停止使用。</td></tr><tr><td>v10.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p>Node.js 过去支持 OpenSSL 在调用 <a href="/zh/nodejs/api/crypto#deciphersetauthtagbuffer-encoding"><code>decipher.setAuthTag()</code></a> 时接受的所有 GCM 身份验证标记长度。 从 Node.js v11.0.0 开始，仅允许 128、120、112、104、96、64 和 32 位的身份验证标记长度。 根据 <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf" target="_blank" rel="noreferrer">NIST SP 800-38D</a>，其他长度的身份验证标记无效。</p><h3 id="dep0091-cryptodefault_encoding" tabindex="-1">DEP0091: <code>crypto.DEFAULT_ENCODING</code> <a class="header-anchor" href="#dep0091-cryptodefault_encoding" aria-label="Permalink to “DEP0091: crypto.DEFAULT_ENCODING”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.0.0</td><td>已停止使用。</td></tr><tr><td>v10.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p><code>crypto.DEFAULT_ENCODING</code> 属性仅存在于与 0.9.3 之前的 Node.js 版本的兼容性，并且已被删除。</p><h3 id="dep0092-top-level-this-bound-to-moduleexports" tabindex="-1">DEP0092: 绑定到 <code>module.exports</code> 的顶层 <code>this</code> <a class="header-anchor" href="#dep0092-top-level-this-bound-to-moduleexports" aria-label="Permalink to “DEP0092: 绑定到 module.exports 的顶层 this”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p>不推荐将属性分配给顶层 <code>this</code> 作为 <code>module.exports</code> 的替代方法。 开发人员应使用 <code>exports</code> 或 <code>module.exports</code>。</p><h3 id="dep0093-cryptofips-is-deprecated-and-replaced" tabindex="-1">DEP0093: <code>crypto.fips</code> 已弃用，并被替换 <a class="header-anchor" href="#dep0093-cryptofips-is-deprecated-and-replaced" aria-label="Permalink to “DEP0093: crypto.fips 已弃用，并被替换”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>运行时弃用。</td></tr><tr><td>v10.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p><a href="/zh/nodejs/api/crypto#cryptofips"><code>crypto.fips</code></a> 属性已弃用。请改用 <code>crypto.setFips()</code> 和 <code>crypto.getFips()</code>。</p><h3 id="dep0094-using-assertfail-with-more-than-one-argument" tabindex="-1">DEP0094: 使用带有多个参数的 <code>assert.fail()</code> <a class="header-anchor" href="#dep0094-using-assertfail-with-more-than-one-argument" aria-label="Permalink to “DEP0094: 使用带有多个参数的 assert.fail()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p>使用带有多个参数的 <code>assert.fail()</code> 已弃用。请使用只有一个参数的 <code>assert.fail()</code> 或使用不同的 <code>node:assert</code> 模块方法。</p><h3 id="dep0095-timersenroll" tabindex="-1">DEP0095: <code>timers.enroll()</code> <a class="header-anchor" href="#dep0095-timersenroll" aria-label="Permalink to “DEP0095: timers.enroll()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p><code>timers.enroll()</code> 已弃用。请改用公开文档化的 <a href="/zh/nodejs/api/timers#settimeoutcallback-delay-args"><code>setTimeout()</code></a> 或 <a href="/zh/nodejs/api/timers#setintervalcallback-delay-args"><code>setInterval()</code></a>。</p><h3 id="dep0096-timersunenroll" tabindex="-1">DEP0096: <code>timers.unenroll()</code> <a class="header-anchor" href="#dep0096-timersunenroll" aria-label="Permalink to “DEP0096: timers.unenroll()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p><code>timers.unenroll()</code> 已弃用。请改用公开文档化的 <a href="/zh/nodejs/api/timers#cleartimeouttimeout"><code>clearTimeout()</code></a> 或 <a href="/zh/nodejs/api/timers#clearintervaltimeout"><code>clearInterval()</code></a>。</p><h3 id="dep0097-makecallback-with-domain-property" tabindex="-1">DEP0097: 带有 <code>domain</code> 属性的 <code>MakeCallback</code> <a class="header-anchor" href="#dep0097-makecallback-with-domain-property" aria-label="Permalink to “DEP0097: 带有 domain 属性的 MakeCallback”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p>将 <code>domain</code> 属性添加到 <code>MakeCallback</code> 以携带上下文的用户，应开始使用 <code>MakeCallback</code> 或 <code>CallbackScope</code> 的 <code>async_context</code> 变体，或高级 <code>AsyncResource</code> 类。</p><h3 id="dep0098-asynchooks-embedder-asyncresourceemitbefore-and-asyncresourceemitafter-apis" tabindex="-1">DEP0098: AsyncHooks 嵌入器 <code>AsyncResource.emitBefore</code> 和 <code>AsyncResource.emitAfter</code> API <a class="header-anchor" href="#dep0098-asynchooks-embedder-asyncresourceemitbefore-and-asyncresourceemitafter-apis" aria-label="Permalink to “DEP0098: AsyncHooks 嵌入器 AsyncResource.emitBefore 和 AsyncResource.emitAfter API”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已停止维护。</td></tr><tr><td>v10.0.0, v9.6.0, v8.12.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已停止维护</p><p>AsyncHooks 提供的嵌入式 API 公开了 <code>.emitBefore()</code> 和 <code>.emitAfter()</code> 方法，这些方法很容易被错误地使用，从而导致无法恢复的错误。</p><p>请改用 <a href="/zh/nodejs/api/async_context#asyncresourceruninasyncscopefn-thisarg-args"><code>asyncResource.runInAsyncScope()</code></a> API，它提供了一种更安全、更方便的替代方案。 请参阅 <a href="https://github.com/nodejs/node/pull/18513" target="_blank" rel="noreferrer">https://github.com/nodejs/node/pull/18513</a>。</p><h3 id="dep0099-async-context-unaware-nodemakecallback-c-apis" tabindex="-1">DEP0099: 异步上下文感知缺失的 <code>node::MakeCallback</code> C++ API <a class="header-anchor" href="#dep0099-async-context-unaware-nodemakecallback-c-apis" aria-label="Permalink to “DEP0099: 异步上下文感知缺失的 node::MakeCallback C++ API”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>编译时弃用。</td></tr></tbody></table></div><p>类型：编译时</p><p>提供给原生插件的某些版本的 <code>node::MakeCallback</code> API 已被弃用。请使用接受 <code>async_context</code> 参数的 API 版本。</p><h3 id="dep0100-processassert" tabindex="-1">DEP0100: <code>process.assert()</code> <a class="header-anchor" href="#dep0100-processassert" aria-label="Permalink to “DEP0100: process.assert()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>寿命终止。</td></tr><tr><td>v10.0.0</td><td>运行时弃用。</td></tr><tr><td>v0.3.7</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：寿命终止</p><p><code>process.assert()</code> 已弃用。请改用 <a href="/zh/nodejs/api/assert"><code>assert</code></a> 模块。</p><p>这从来都不是一个有文档记录的功能。</p><h3 id="dep0101---with-lttng" tabindex="-1">DEP0101: <code>--with-lttng</code> <a class="header-anchor" href="#dep0101---with-lttng" aria-label="Permalink to “DEP0101: --with-lttng”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>寿命终止。</td></tr></tbody></table></div><p>类型：寿命终止</p><p><code>--with-lttng</code> 编译时选项已被移除。</p><h3 id="dep0102-using-noassert-in-bufferread|write-operations" tabindex="-1">DEP0102: 在 <code>Buffer#(read|write)</code> 操作中使用 <code>noAssert</code> <a class="header-anchor" href="#dep0102-using-noassert-in-bufferread|write-operations" aria-label="Permalink to “DEP0102: 在 Buffer#(read|write) 操作中使用 noAssert”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>寿命终止。</td></tr></tbody></table></div><p>类型：寿命终止</p><p>使用 <code>noAssert</code> 参数不再具有任何功能。所有输入都会被验证，无论 <code>noAssert</code> 的值如何。跳过验证可能会导致难以发现的错误和崩溃。</p><h3 id="dep0103-processbindingutilis-typechecks" tabindex="-1">DEP0103: <code>process.binding(&#39;util&#39;).is[...]</code> 类型检查 <a class="header-anchor" href="#dep0103-processbindingutilis-typechecks" aria-label="Permalink to “DEP0103: process.binding(&#39;util&#39;).is[...] 类型检查”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.9.0</td><td>被 <a href="/zh/nodejs/api/deprecations#dep0111">DEP0111</a> 取代。</td></tr><tr><td>v10.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档（支持 <a href="/zh/nodejs/api/cli#pending-deprecation"><code>--pending-deprecation</code></a>）</p><p>通常应避免使用 <code>process.binding()</code>。特别是类型检查方法可以使用 <a href="/zh/nodejs/api/util#utiltypes"><code>util.types</code></a> 代替。</p><p>此弃用已被 <code>process.binding()</code> API 的弃用 (<a href="/zh/nodejs/api/deprecations#dep0111">DEP0111</a>) 取代。</p><h3 id="dep0104-processenv-string-coercion" tabindex="-1">DEP0104: <code>process.env</code> 字符串强制转换 <a class="header-anchor" href="#dep0104-processenv-string-coercion" aria-label="Permalink to “DEP0104: process.env 字符串强制转换”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档（支持 <a href="/zh/nodejs/api/cli#pending-deprecation"><code>--pending-deprecation</code></a>）</p><p>当将非字符串属性分配给 <a href="/zh/nodejs/api/process#processenv"><code>process.env</code></a> 时，分配的值会被隐式转换为字符串。如果分配的值不是字符串、布尔值或数字，则此行为已被弃用。将来，此类赋值可能会导致抛出错误。请在将属性分配给 <code>process.env</code> 之前将其转换为字符串。</p><h3 id="dep0105-decipherfinaltol" tabindex="-1">DEP0105: <code>decipher.finaltol</code> <a class="header-anchor" href="#dep0105-decipherfinaltol" aria-label="Permalink to “DEP0105: decipher.finaltol”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.0.0</td><td>寿命终止。</td></tr><tr><td>v10.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：寿命终止</p><p><code>decipher.finaltol()</code> 从未被记录，并且是 <a href="/zh/nodejs/api/crypto#decipherfinaloutputencoding"><code>decipher.final()</code></a> 的别名。 此 API 已被移除，建议改用 <a href="/zh/nodejs/api/crypto#decipherfinaloutputencoding"><code>decipher.final()</code></a>。</p><h3 id="dep0106-cryptocreatecipher-and-cryptocreatedecipher" tabindex="-1">DEP0106: <code>crypto.createCipher</code> 和 <code>crypto.createDecipher</code> <a class="header-anchor" href="#dep0106-cryptocreatecipher-and-cryptocreatedecipher" aria-label="Permalink to “DEP0106: crypto.createCipher 和 crypto.createDecipher”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v22.0.0</td><td>寿命终止。</td></tr><tr><td>v11.0.0</td><td>运行时弃用。</td></tr><tr><td>v10.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：寿命终止</p><p><code>crypto.createCipher()</code> 和 <code>crypto.createDecipher()</code> 已被移除，因为它们使用弱密钥派生函数（没有盐的 MD5）和静态初始化向量。 建议使用带有随机盐的 <a href="/zh/nodejs/api/crypto#cryptopbkdf2password-salt-iterations-keylen-digest-callback"><code>crypto.pbkdf2()</code></a> 或 <a href="/zh/nodejs/api/crypto#cryptoscryptpassword-salt-keylen-options-callback"><code>crypto.scrypt()</code></a> 派生密钥，并使用 <a href="/zh/nodejs/api/crypto#cryptocreatecipherivalgorithm-key-iv-options"><code>crypto.createCipheriv()</code></a> 和 <a href="/zh/nodejs/api/crypto#cryptocreatedecipherivalgorithm-key-iv-options"><code>crypto.createDecipheriv()</code></a> 来获取 <a href="/zh/nodejs/api/crypto#class-cipher"><code>Cipher</code></a> 和 <a href="/zh/nodejs/api/crypto#class-decipher"><code>Decipher</code></a> 对象。</p><h3 id="dep0107-tlsconvertnpnprotocols" tabindex="-1">DEP0107: <code>tls.convertNPNProtocols()</code> <a class="header-anchor" href="#dep0107-tlsconvertnpnprotocols" aria-label="Permalink to “DEP0107: tls.convertNPNProtocols()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.0.0</td><td>寿命终止。</td></tr><tr><td>v10.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：寿命终止</p><p>这是一个未记录的辅助函数，不打算在 Node.js 核心之外使用，并且已被移除的 NPN（下一代协议协商）支持所取代。</p><h3 id="dep0108-zlibbytesread" tabindex="-1">DEP0108: <code>zlib.bytesRead</code> <a class="header-anchor" href="#dep0108-zlibbytesread" aria-label="Permalink to “DEP0108: zlib.bytesRead”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>寿命终止。</td></tr><tr><td>v11.0.0</td><td>运行时弃用。</td></tr><tr><td>v10.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：寿命终止</p><p>已弃用的 <a href="/zh/nodejs/api/zlib#zlibbyteswritten"><code>zlib.bytesWritten</code></a> 别名。 最初选择这个名称是因为将该值解释为引擎读取的字节数也是有意义的，但这与 Node.js 中以这些名称公开值的其他流不一致。</p><h3 id="dep0109-http-https-and-tls-support-for-invalid-urls" tabindex="-1">DEP0109：<code>http</code>、<code>https</code> 和 <code>tls</code> 支持无效 URL <a class="header-anchor" href="#dep0109-http-https-and-tls-support-for-invalid-urls" aria-label="Permalink to “DEP0109：http、https 和 tls 支持无效 URL”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v16.0.0</td><td>终止生命周期。</td></tr><tr><td>v11.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：终止生命周期</p><p>一些先前支持的（但严格来说无效的）URL 通过 <a href="/zh/nodejs/api/http#httprequestoptions-callback"><code>http.request()</code></a>、<a href="/zh/nodejs/api/http#httpgetoptions-callback"><code>http.get()</code></a>、<a href="/zh/nodejs/api/https#httpsrequestoptions-callback"><code>https.request()</code></a>、<a href="/zh/nodejs/api/https#httpgetoptions-callback"><code>https.get()</code></a> 和 <a href="/zh/nodejs/api/tls#tlscheckserveridentityhostname-cert"><code>tls.checkServerIdentity()</code></a> API 接受，因为这些 API 被旧版 <code>url.parse()</code> API 接受。 上述 API 现在使用 WHATWG URL 解析器，该解析器要求 URL 必须严格有效。 传递无效 URL 已被弃用，并且未来将移除支持。</p><h3 id="dep0110-vmscript-cached-data" tabindex="-1">DEP0110：<code>vm.Script</code> 缓存数据 <a class="header-anchor" href="#dep0110-vmscript-cached-data" aria-label="Permalink to “DEP0110：vm.Script 缓存数据”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.6.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><code>produceCachedData</code> 选项已弃用。 请改用 <a href="/zh/nodejs/api/vm#scriptcreatecacheddata"><code>script.createCachedData()</code></a>。</p><h3 id="dep0111-processbinding" tabindex="-1">DEP0111：<code>process.binding()</code> <a class="header-anchor" href="#dep0111-processbinding" aria-label="Permalink to “DEP0111：process.binding()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.12.0</td><td>添加了对 <code>--pending-deprecation</code> 的支持。</td></tr><tr><td>v10.9.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档（支持 <a href="/zh/nodejs/api/cli#pending-deprecation"><code>--pending-deprecation</code></a>）</p><p><code>process.binding()</code> 仅供 Node.js 内部代码使用。</p><p>虽然 <code>process.binding()</code> 通常尚未达到终止生命周期状态，但在启用<a href="/zh/nodejs/api/permissions#permission-model">权限模型</a>时不可用。</p><h3 id="dep0112-dgram-private-apis" tabindex="-1">DEP0112：<code>dgram</code> 私有 API <a class="header-anchor" href="#dep0112-dgram-private-apis" aria-label="Permalink to “DEP0112：dgram 私有 API”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p><code>node:dgram</code> 模块以前包含几个 API，这些 API 从未打算在 Node.js 核心之外访问：<code>Socket.prototype._handle</code>、<code>Socket.prototype._receiving</code>、<code>Socket.prototype._bindState</code>、<code>Socket.prototype._queue</code>、<code>Socket.prototype._reuseAddr</code>、<code>Socket.prototype._healthCheck()</code>、<code>Socket.prototype._stopReceiving()</code> 和 <code>dgram._createSocketHandle()</code>。</p><h3 id="dep0113-ciphersetauthtag-deciphergetauthtag" tabindex="-1">DEP0113: <code>Cipher.setAuthTag()</code>, <code>Decipher.getAuthTag()</code> <a class="header-anchor" href="#dep0113-ciphersetauthtag-deciphergetauthtag" aria-label="Permalink to “DEP0113: Cipher.setAuthTag(), Decipher.getAuthTag()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已停止使用。</td></tr><tr><td>v11.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p><code>Cipher.setAuthTag()</code> 和 <code>Decipher.getAuthTag()</code> 不再可用。 它们从未被记录，并且在调用时会抛出错误。</p><h3 id="dep0114-crypto_tobuf" tabindex="-1">DEP0114: <code>crypto._toBuf()</code> <a class="header-anchor" href="#dep0114-crypto_tobuf" aria-label="Permalink to “DEP0114: crypto._toBuf()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已停止使用。</td></tr><tr><td>v11.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p><code>crypto._toBuf()</code> 函数并非设计为供 Node.js 核心之外的模块使用，因此已被删除。</p><h3 id="dep0115-cryptoprng-cryptopseudorandombytes-cryptorng" tabindex="-1">DEP0115: <code>crypto.prng()</code>, <code>crypto.pseudoRandomBytes()</code>, <code>crypto.rng()</code> <a class="header-anchor" href="#dep0115-cryptoprng-cryptopseudorandombytes-cryptorng" aria-label="Permalink to “DEP0115: crypto.prng(), crypto.pseudoRandomBytes(), crypto.rng()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.0.0</td><td>添加了仅文档弃用，并支持 <code>--pending-deprecation</code>。</td></tr></tbody></table></div><p>类型：仅文档（支持 <a href="/zh/nodejs/api/cli#pending-deprecation"><code>--pending-deprecation</code></a>）</p><p>在 Node.js 的最新版本中，<a href="/zh/nodejs/api/crypto#cryptorandombytessize-callback"><code>crypto.randomBytes()</code></a> 和 <code>crypto.pseudoRandomBytes()</code> 之间没有区别。 后者已弃用，同时弃用的还有未记录的别名 <code>crypto.prng()</code> 和 <code>crypto.rng()</code>，建议使用 <a href="/zh/nodejs/api/crypto#cryptorandombytessize-callback"><code>crypto.randomBytes()</code></a>，并可能在未来的版本中删除。</p><h3 id="dep0116-legacy-url-api" tabindex="-1">DEP0116: 遗留 URL API <a class="header-anchor" href="#dep0116-legacy-url-api" aria-label="Permalink to “DEP0116: 遗留 URL API”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v19.0.0, v18.13.0</td><td><code>url.parse()</code> 在 DEP0169 中再次被弃用。</td></tr><tr><td>v15.13.0, v14.17.0</td><td>撤销弃用。 状态更改为“遗留”。</td></tr><tr><td>v11.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：撤销弃用</p><p><a href="/zh/nodejs/api/url#legacy-url-api">遗留 URL API</a> 已弃用。 这包括 <a href="/zh/nodejs/api/url#urlformaturlobject"><code>url.format()</code></a>, <a href="/zh/nodejs/api/url#urlparseurlstring-parsequerystring-slashesdenotehost"><code>url.parse()</code></a>, <a href="/zh/nodejs/api/url#urlresolvefrom-to"><code>url.resolve()</code></a>, 和 <a href="/zh/nodejs/api/url#legacy-urlobject">遗留 <code>urlObject</code></a>。 请改用 <a href="/zh/nodejs/api/url#the-whatwg-url-api">WHATWG URL API</a>。</p><h3 id="dep0117-native-crypto-handles" tabindex="-1">DEP0117: Native crypto handles <a class="header-anchor" href="#dep0117-native-crypto-handles" aria-label="Permalink to “DEP0117: Native crypto handles”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已终止。</td></tr><tr><td>v11.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已终止</p><p>之前版本的 Node.js 通过 <code>Cipher</code>、<code>Decipher</code>、<code>DiffieHellman</code>、<code>DiffieHellmanGroup</code>、<code>ECDH</code>、<code>Hash</code>、<code>Hmac</code>、<code>Sign</code> 和 <code>Verify</code> 类的 <code>_handle</code> 属性暴露了内部原生对象的句柄。 <code>_handle</code> 属性已被删除，因为不正确地使用原生对象可能会导致应用程序崩溃。</p><h3 id="dep0118-dnslookup-support-for-a-falsy-host-name" tabindex="-1">DEP0118: 对虚值主机名支持 <code>dns.lookup()</code> <a class="header-anchor" href="#dep0118-dnslookup-support-for-a-falsy-host-name" aria-label="Permalink to “DEP0118: 对虚值主机名支持 dns.lookup()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p>由于向后兼容性，以前版本的 Node.js 支持带有虚值主机名的 <code>dns.lookup()</code>，例如 <code>dns.lookup(false)</code>。 此行为未记录，并且被认为在真实世界的应用程序中未使用。 在未来版本的 Node.js 中，这将变成一个错误。</p><h3 id="dep0119-processbindinguverrname-private-api" tabindex="-1">DEP0119: <code>process.binding(&#39;uv&#39;).errname()</code> 私有 API <a class="header-anchor" href="#dep0119-processbindinguverrname-private-api" aria-label="Permalink to “DEP0119: process.binding(&#39;uv&#39;).errname() 私有 API”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 仅文档（支持 <a href="/zh/nodejs/api/cli#pending-deprecation"><code>--pending-deprecation</code></a>）</p><p><code>process.binding(&#39;uv&#39;).errname()</code> 已弃用。 请改用 <a href="/zh/nodejs/api/util#utilgetsystemerrornameerr"><code>util.getSystemErrorName()</code></a>。</p><h3 id="dep0120-windows-performance-counter-support" tabindex="-1">DEP0120: Windows 性能计数器支持 <a class="header-anchor" href="#dep0120-windows-performance-counter-support" aria-label="Permalink to “DEP0120: Windows 性能计数器支持”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>已终止。</td></tr><tr><td>v11.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 已终止</p><p>Windows 性能计数器支持已从 Node.js 中删除。 未记录的 <code>COUNTER_NET_SERVER_CONNECTION()</code>、<code>COUNTER_NET_SERVER_CONNECTION_CLOSE()</code>、<code>COUNTER_HTTP_SERVER_REQUEST()</code>、<code>COUNTER_HTTP_SERVER_RESPONSE()</code>、<code>COUNTER_HTTP_CLIENT_REQUEST()</code> 和 <code>COUNTER_HTTP_CLIENT_RESPONSE()</code> 函数已被弃用。</p><h3 id="dep0121-net_setsimultaneousaccepts" tabindex="-1">DEP0121: <code>net._setSimultaneousAccepts()</code> <a class="header-anchor" href="#dep0121-net_setsimultaneousaccepts" aria-label="Permalink to “DEP0121: net._setSimultaneousAccepts()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p>未记录的 <code>net._setSimultaneousAccepts()</code> 函数最初用于在使用 Windows 上的 <code>node:child_process</code> 和 <code>node:cluster</code> 模块时进行调试和性能调整。 该函数通常没有用，将被删除。 参见此处的讨论：<a href="https://github.com/nodejs/node/issues/18391" target="_blank" rel="noreferrer">https://github.com/nodejs/node/issues/18391</a></p><h3 id="dep0122-tls-serverprototypesetoptions" tabindex="-1">DEP0122: <code>tls</code> <code>Server.prototype.setOptions()</code> <a class="header-anchor" href="#dep0122-tls-serverprototypesetoptions" aria-label="Permalink to “DEP0122: tls Server.prototype.setOptions()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p>请使用 <code>Server.prototype.setSecureContext()</code> 代替。</p><h3 id="dep0123-setting-the-tls-servername-to-an-ip-address" tabindex="-1">DEP0123: 将 TLS ServerName 设置为 IP 地址 <a class="header-anchor" href="#dep0123-setting-the-tls-servername-to-an-ip-address" aria-label="Permalink to “DEP0123: 将 TLS ServerName 设置为 IP 地址”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p><a href="https://tools.ietf.org/html/rfc6066#section-3" target="_blank" rel="noreferrer">RFC 6066</a> 不允许将 TLS ServerName 设置为 IP 地址。 这将在未来的版本中被忽略。</p><h3 id="dep0124-using-replserverrli" tabindex="-1">DEP0124: 使用 <code>REPLServer.rli</code> <a class="header-anchor" href="#dep0124-using-replserverrli" aria-label="Permalink to “DEP0124: 使用 REPLServer.rli”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.0.0</td><td>已停止使用。</td></tr><tr><td>v12.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p>此属性是对实例本身的引用。</p><h3 id="dep0125-requirenode_stream_wrap" tabindex="-1">DEP0125: <code>require(&#39;node:_stream_wrap&#39;)</code> <a class="header-anchor" href="#dep0125-requirenode_stream_wrap" aria-label="Permalink to “DEP0125: require(&#39;node:_stream_wrap&#39;)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p><code>node:_stream_wrap</code> 模块已弃用。</p><h3 id="dep0126-timersactive" tabindex="-1">DEP0126: <code>timers.active()</code> <a class="header-anchor" href="#dep0126-timersactive" aria-label="Permalink to “DEP0126: timers.active()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.14.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p>先前未公开的 <code>timers.active()</code> 已弃用。 请改用公开文档的 <a href="/zh/nodejs/api/timers#timeoutrefresh"><code>timeout.refresh()</code></a>。 如果需要重新引用超时，则可以使用 <a href="/zh/nodejs/api/timers#timeoutref"><code>timeout.ref()</code></a>，自 Node.js 10 以来不会影响性能。</p><h3 id="dep0127-timers_unrefactive" tabindex="-1">DEP0127: <code>timers._unrefActive()</code> <a class="header-anchor" href="#dep0127-timers_unrefactive" aria-label="Permalink to “DEP0127: timers._unrefActive()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.14.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p>先前未公开且“私有”的 <code>timers._unrefActive()</code> 已弃用。 请改用公开文档的 <a href="/zh/nodejs/api/timers#timeoutrefresh"><code>timeout.refresh()</code></a>。 如果需要取消引用超时，则可以使用 <a href="/zh/nodejs/api/timers#timeoutunref"><code>timeout.unref()</code></a>，自 Node.js 10 以来不会影响性能。</p><h3 id="dep0128-modules-with-an-invalid-main-entry-and-an-indexjs-file" tabindex="-1">DEP0128: 具有无效 <code>main</code> 条目和 <code>index.js</code> 文件的模块 <a class="header-anchor" href="#dep0128-modules-with-an-invalid-main-entry-and-an-indexjs-file" aria-label="Permalink to “DEP0128: 具有无效 main 条目和 index.js 文件的模块”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v16.0.0</td><td>运行时弃用。</td></tr><tr><td>v12.0.0</td><td>仅文档。</td></tr></tbody></table></div><p>类型：运行时</p><p>具有无效 <code>main</code> 条目（例如，<code>./does-not-exist.js</code>）并且在顶层目录中也有 <code>index.js</code> 文件的模块将解析 <code>index.js</code> 文件。 这已被弃用，并且将在未来的 Node.js 版本中抛出错误。</p><h3 id="dep0129-childprocess_channel" tabindex="-1">DEP0129: <code>ChildProcess._channel</code> <a class="header-anchor" href="#dep0129-childprocess_channel" aria-label="Permalink to “DEP0129: ChildProcess._channel”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v13.0.0</td><td>运行时弃用。</td></tr><tr><td>v11.14.0</td><td>仅文档。</td></tr></tbody></table></div><p>类型: 运行时</p><p><code>spawn()</code> 和类似函数返回的子进程对象的 <code>_channel</code> 属性不供公共使用。请改用 <code>ChildProcess.channel</code>。</p><h3 id="dep0130-modulecreaterequirefrompath" tabindex="-1">DEP0130: <code>Module.createRequireFromPath()</code> <a class="header-anchor" href="#dep0130-modulecreaterequirefrompath" aria-label="Permalink to “DEP0130: Module.createRequireFromPath()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v16.0.0</td><td>已停止使用。</td></tr><tr><td>v13.0.0</td><td>运行时弃用。</td></tr><tr><td>v12.2.0</td><td>仅文档。</td></tr></tbody></table></div><p>类型: 已停止使用</p><p>请改用 <a href="/zh/nodejs/api/module#modulecreaterequirefilename"><code>module.createRequire()</code></a>。</p><h3 id="dep0131-legacy-http-parser" tabindex="-1">DEP0131: 遗留 HTTP 解析器 <a class="header-anchor" href="#dep0131-legacy-http-parser" aria-label="Permalink to “DEP0131: 遗留 HTTP 解析器”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v13.0.0</td><td>此功能已被移除。</td></tr><tr><td>v12.22.0</td><td>运行时弃用。</td></tr><tr><td>v12.3.0</td><td>仅文档。</td></tr></tbody></table></div><p>类型: 已停止使用</p><p>Node.js 12.0.0 之前的版本默认使用的遗留 HTTP 解析器已被弃用，并在 v13.0.0 中被移除。 在 v13.0.0 之前，可以使用 <code>--http-parser=legacy</code> 命令行标志恢复为使用遗留解析器。</p><h3 id="dep0132-workerterminate-with-callback" tabindex="-1">DEP0132: 带有回调的 <code>worker.terminate()</code> <a class="header-anchor" href="#dep0132-workerterminate-with-callback" aria-label="Permalink to “DEP0132: 带有回调的 worker.terminate()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.5.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p>将回调传递给 <a href="/zh/nodejs/api/worker_threads#workerterminate"><code>worker.terminate()</code></a> 已被弃用。 请改用返回的 <code>Promise</code>，或 worker 的 <code>&#39;exit&#39;</code> 事件的监听器。</p><h3 id="dep0133-http-connection" tabindex="-1">DEP0133: <code>http</code> <code>connection</code> <a class="header-anchor" href="#dep0133-http-connection" aria-label="Permalink to “DEP0133: http connection”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.12.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 仅文档</p><p>优先使用 <a href="/zh/nodejs/api/http#responsesocket"><code>response.socket</code></a> 而不是 <a href="/zh/nodejs/api/http#responseconnection"><code>response.connection</code></a>，以及 <a href="/zh/nodejs/api/http#requestsocket"><code>request.socket</code></a> 而不是 <a href="/zh/nodejs/api/http#requestconnection"><code>request.connection</code></a>。</p><h3 id="dep0134-process_tickcallback" tabindex="-1">DEP0134: <code>process._tickCallback</code> <a class="header-anchor" href="#dep0134-process_tickcallback" aria-label="Permalink to “DEP0134: process._tickCallback”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.12.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 仅文档（支持 <a href="/zh/nodejs/api/cli#pending-deprecation"><code>--pending-deprecation</code></a>）</p><p><code>process._tickCallback</code> 属性从未作为正式支持的 API 记录在案。</p><h3 id="dep0135-writestreamopen-and-readstreamopen-are-internal" tabindex="-1">DEP0135: <code>WriteStream.open()</code> 和 <code>ReadStream.open()</code> 是内部 API <a class="header-anchor" href="#dep0135-writestreamopen-and-readstreamopen-are-internal" aria-label="Permalink to “DEP0135: WriteStream.open() 和 ReadStream.open() 是内部 API”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v13.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p><a href="/zh/nodejs/api/fs#class-fswritestream"><code>WriteStream.open()</code></a> 和 <a href="/zh/nodejs/api/fs#class-fsreadstream"><code>ReadStream.open()</code></a> 是未文档化的内部 API，在用户空间中使用没有意义。文件流应始终通过其对应的工厂方法 <a href="/zh/nodejs/api/fs#fscreatewritestreampath-options"><code>fs.createWriteStream()</code></a> 和 <a href="/zh/nodejs/api/fs#fscreatereadstreampath-options"><code>fs.createReadStream()</code></a>) 或通过在选项中传递文件描述符来打开。</p><h3 id="dep0136-http-finished" tabindex="-1">DEP0136: <code>http</code> <code>finished</code> <a class="header-anchor" href="#dep0136-http-finished" aria-label="Permalink to “DEP0136: http finished”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v13.4.0, v12.16.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/http#responsefinished"><code>response.finished</code></a> 指示是否已调用 <a href="/zh/nodejs/api/http#responseenddata-encoding-callback"><code>response.end()</code></a>，而不是是否已发出 <code>&#39;finish&#39;</code> 并且底层数据已刷新。</p><p>请相应地使用 <a href="/zh/nodejs/api/http#responsewritablefinished"><code>response.writableFinished</code></a> 或 <a href="/zh/nodejs/api/http#responsewritableended"><code>response.writableEnded</code></a> 以避免歧义。</p><p>为了保持现有行为，<code>response.finished</code> 应替换为 <code>response.writableEnded</code>。</p><h3 id="dep0137-closing-fsfilehandle-on-garbage-collection" tabindex="-1">DEP0137: 在垃圾回收时关闭 fs.FileHandle <a class="header-anchor" href="#dep0137-closing-fsfilehandle-on-garbage-collection" aria-label="Permalink to “DEP0137: 在垃圾回收时关闭 fs.FileHandle”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p>允许在垃圾回收时关闭 <a href="/zh/nodejs/api/fs#class-filehandle"><code>fs.FileHandle</code></a> 对象已被弃用。将来，这样做可能会导致抛出一个错误，该错误将终止该进程。</p><p>请确保在不再需要 <code>fs.FileHandle</code> 时，使用 <code>FileHandle.prototype.close()</code> 显式关闭所有 <code>fs.FileHandle</code> 对象：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fsPromises</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).promises;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> openAndClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filehandle;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filehandle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fsPromises.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;thefile.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;r&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (filehandle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filehandle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="dep0138-processmainmodule" tabindex="-1">DEP0138: <code>process.mainModule</code> <a class="header-anchor" href="#dep0138-processmainmodule" aria-label="Permalink to “DEP0138: process.mainModule”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 仅文档</p><p><a href="/zh/nodejs/api/process#processmainmodule"><code>process.mainModule</code></a> 是一个仅 CommonJS 的特性，而 <code>process</code> 全局对象与非 CommonJS 环境共享。不支持在 ECMAScript 模块中使用它。</p><p>建议使用 <a href="/zh/nodejs/api/modules#accessing-the-main-module"><code>require.main</code></a> 代替它，因为它具有相同的作用并且仅在 CommonJS 环境中可用。</p><h3 id="dep0139-processumask-with-no-arguments" tabindex="-1">DEP0139: 无参数的 <code>process.umask()</code> <a class="header-anchor" href="#dep0139-processumask-with-no-arguments" aria-label="Permalink to “DEP0139: 无参数的 process.umask()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.0.0, v12.19.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 仅文档</p><p>不带参数调用 <code>process.umask()</code> 会导致进程范围内的 umask 被写入两次。 这会在线程之间引入竞争条件，并且存在潜在的安全漏洞。 没有安全的、跨平台的替代 API。</p><h3 id="dep0140-use-requestdestroy-instead-of-requestabort" tabindex="-1">DEP0140: 使用 <code>request.destroy()</code> 代替 <code>request.abort()</code> <a class="header-anchor" href="#dep0140-use-requestdestroy-instead-of-requestabort" aria-label="Permalink to “DEP0140: 使用 request.destroy() 代替 request.abort()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.1.0, v13.14.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 仅文档</p><p>使用 <a href="/zh/nodejs/api/http#requestdestroyerror"><code>request.destroy()</code></a> 代替 <a href="/zh/nodejs/api/http#requestabort"><code>request.abort()</code></a>。</p><h3 id="dep0141-replinputstream-and-reploutputstream" tabindex="-1">DEP0141: <code>repl.inputStream</code> 和 <code>repl.outputStream</code> <a class="header-anchor" href="#dep0141-replinputstream-and-reploutputstream" aria-label="Permalink to “DEP0141: repl.inputStream 和 repl.outputStream”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.3.0</td><td>仅文档（支持 [<code>--pending-deprecation</code>][]）。</td></tr></tbody></table></div><p>类型: 仅文档（支持 <a href="/zh/nodejs/api/cli#pending-deprecation"><code>--pending-deprecation</code></a>）</p><p><code>node:repl</code> 模块导出了输入和输出流两次。 使用 <code>.input</code> 代替 <code>.inputStream</code>，使用 <code>.output</code> 代替 <code>.outputStream</code>。</p><h3 id="dep0142-repl_builtinlibs" tabindex="-1">DEP0142: <code>repl._builtinLibs</code> <a class="header-anchor" href="#dep0142-repl_builtinlibs" aria-label="Permalink to “DEP0142: repl._builtinLibs”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.3.0</td><td>仅文档。</td></tr></tbody></table></div><p>类型: 仅文档</p><p><code>node:repl</code> 模块导出一个 <code>_builtinLibs</code> 属性，其中包含一个内置模块的数组。 到目前为止，它是不完整的，最好依赖 <code>require(&#39;node:module&#39;).builtinModules</code>。</p><h3 id="dep0143-transform_transformstate" tabindex="-1">DEP0143: <code>Transform._transformState</code> <a class="header-anchor" href="#dep0143-transform_transformstate" aria-label="Permalink to “DEP0143: Transform._transformState”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.5.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时 <code>Transform._transformState</code> 将在未来的版本中移除，因为它不再需要，这是由于实现的简化。</p><h3 id="dep0144-moduleparent" tabindex="-1">DEP0144: <code>module.parent</code> <a class="header-anchor" href="#dep0144-moduleparent" aria-label="Permalink to “DEP0144: module.parent”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.6.0, v12.19.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档（支持 <a href="/zh/nodejs/api/cli#pending-deprecation"><code>--pending-deprecation</code></a>）</p><p>CommonJS 模块可以使用 <code>module.parent</code> 访问第一个需要它的模块。此功能已弃用，因为它在存在 ECMAScript 模块时无法一致地工作，并且因为它给出了 CommonJS 模块图的不准确表示。</p><p>一些模块使用它来检查它们是否是当前进程的入口点。相反，建议比较 <code>require.main</code> 和 <code>module</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (require.main </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 仅当当前文件是入口点时才运行的代码段。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当查找需要当前 CommonJS 模块的模块时，可以使用 <code>require.cache</code> 和 <code>module.children</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> moduleParents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(require.cache)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m.children.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="dep0145-socketbuffersize" tabindex="-1">DEP0145: <code>socket.bufferSize</code> <a class="header-anchor" href="#dep0145-socketbuffersize" aria-label="Permalink to “DEP0145: socket.bufferSize”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.6.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/net#socketbuffersize"><code>socket.bufferSize</code></a> 只是 <a href="/zh/nodejs/api/stream#writablewritablelength"><code>writable.writableLength</code></a> 的别名。</p><h3 id="dep0146-new-cryptocertificate" tabindex="-1">DEP0146: <code>new crypto.Certificate()</code> <a class="header-anchor" href="#dep0146-new-cryptocertificate" aria-label="Permalink to “DEP0146: new crypto.Certificate()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.9.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/crypto#legacy-api"><code>crypto.Certificate()</code> 构造函数</a> 已弃用。请改用 <a href="/zh/nodejs/api/crypto#class-certificate"><code>crypto.Certificate()</code> 的静态方法</a>。</p><h3 id="dep0147-fs-rmdir-path-recursive-true-dep0147-fsrmdirpath-recursive-true" tabindex="-1">DEP0147: <code>fs.rmdir(path, { recursive: true })</code> {#dep0147-fsrmdirpath-{-recursive-true-}} <a class="header-anchor" href="#dep0147-fs-rmdir-path-recursive-true-dep0147-fsrmdirpath-recursive-true" aria-label="Permalink to “DEP0147: fs.rmdir(path, { recursive: true }) {#dep0147-fsrmdirpath-{-recursive-true-}}”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v16.0.0</td><td>运行时弃用。</td></tr><tr><td>v15.0.0</td><td>运行时弃用宽松行为。</td></tr><tr><td>v14.14.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p>在未来版本的 Node.js 中，<code>recursive</code> 选项将被 <code>fs.rmdir</code>、<code>fs.rmdirSync</code> 和 <code>fs.promises.rmdir</code> 忽略。</p><p>请改用 <code>fs.rm(path, { recursive: true, force: true })</code>、<code>fs.rmSync(path, { recursive: true, force: true })</code> 或 <code>fs.promises.rm(path, { recursive: true, force: true })</code>。</p><h3 id="dep0148-folder-mappings-in-&quot;exports&quot;-trailing-&quot;/&quot;" tabindex="-1">DEP0148: <code>&quot;exports&quot;</code> 中的文件夹映射（尾部的 <code>&quot;/&quot;</code>） <a class="header-anchor" href="#dep0148-folder-mappings-in-&quot;exports&quot;-trailing-&quot;/&quot;" aria-label="Permalink to “DEP0148: &quot;exports&quot; 中的文件夹映射（尾部的 &quot;/&quot;）”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v17.0.0</td><td>寿命终止。</td></tr><tr><td>v16.0.0</td><td>运行时弃用。</td></tr><tr><td>v15.1.0</td><td>运行时弃用自引用导入。</td></tr><tr><td>v14.13.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p>在<a href="/zh/nodejs/api/packages#subpath-exports">子路径导出</a>或<a href="/zh/nodejs/api/packages#subpath-imports">子路径导入</a>字段中使用尾部的 <code>&quot;/&quot;</code> 定义子路径文件夹映射已被弃用。 请改用<a href="/zh/nodejs/api/packages#subpath-patterns">子路径模式</a>。</p><h3 id="dep0149-httpincomingmessageconnection" tabindex="-1">DEP0149: <code>http.IncomingMessage#connection</code> <a class="header-anchor" href="#dep0149-httpincomingmessageconnection" aria-label="Permalink to “DEP0149: http.IncomingMessage#connection”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v16.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档。</p><p>建议使用 <a href="/zh/nodejs/api/http#messagesocket"><code>message.socket</code></a> 代替 <a href="/zh/nodejs/api/http#messageconnection"><code>message.connection</code></a>。</p><h3 id="dep0150-changing-the-value-of-processconfig" tabindex="-1">DEP0150: 更改 <code>process.config</code> 的值 <a class="header-anchor" href="#dep0150-changing-the-value-of-processconfig" aria-label="Permalink to “DEP0150: 更改 process.config 的值”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v19.0.0</td><td>寿命终止。</td></tr><tr><td>v16.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：寿命终止</p><p><code>process.config</code> 属性提供对 Node.js 编译时设置的访问。 但是，该属性是可变的，因此容易被篡改。 在未来的 Node.js 版本中，更改该值的能力将被移除。</p><h3 id="dep0151-main-index-lookup-and-extension-searching" tabindex="-1">DEP0151: 主索引查找和扩展搜索 <a class="header-anchor" href="#dep0151-main-index-lookup-and-extension-searching" aria-label="Permalink to “DEP0151: 主索引查找和扩展搜索”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v16.0.0</td><td>运行时弃用。</td></tr><tr><td>v15.8.0, v14.18.0</td><td>带有 <code>--pending-deprecation</code> 支持的仅文档弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p>以前，<code>index.js</code> 和扩展名搜索查找适用于 <code>import &#39;pkg&#39;</code> 主入口点解析，即使在解析 ES 模块时也是如此。</p><p>在此弃用之后，所有 ES 模块主入口点解析都需要一个明确的<a href="/zh/nodejs/api/packages#main-entry-point-export"><code>&quot;exports&quot;</code> 或 <code>&quot;main&quot;</code> 条目</a>，并带有确切的文件扩展名。</p><h3 id="dep0152-extension-performanceentry-properties" tabindex="-1">DEP0152: 扩展 PerformanceEntry 属性 <a class="header-anchor" href="#dep0152-extension-performanceentry-properties" aria-label="Permalink to “DEP0152: 扩展 PerformanceEntry 属性”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v16.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p><code>&#39;gc&#39;</code>、<code>&#39;http2&#39;</code> 和 <code>&#39;http&#39;</code> <a href="/zh/nodejs/api/perf_hooks#class-performanceentry">&lt;PerformanceEntry&gt;</a> 对象类型具有分配给它们的附加属性，这些属性提供附加信息。 这些属性现在可以在 <code>PerformanceEntry</code> 对象的标准 <code>detail</code> 属性中找到。 现有的访问器已被弃用，不应再使用。</p><h3 id="dep0153-dnslookup-and-dnspromiseslookup-options-type-coercion" tabindex="-1">DEP0153: <code>dns.lookup</code> 和 <code>dnsPromises.lookup</code> 选项类型强制转换 <a class="header-anchor" href="#dep0153-dnslookup-and-dnspromiseslookup-options-type-coercion" aria-label="Permalink to “DEP0153: dns.lookup 和 dnsPromises.lookup 选项类型强制转换”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v18.0.0</td><td>寿命终止。</td></tr><tr><td>v17.0.0</td><td>运行时弃用。</td></tr><tr><td>v16.8.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 寿命终止</p><p>在 <a href="/zh/nodejs/api/dns#dnslookuphostname-options-callback"><code>dns.lookup()</code></a> 和 <a href="/zh/nodejs/api/dns#dnspromiseslookuphostname-options"><code>dnsPromises.lookup()</code></a> 中，对 <code>family</code> 选项使用非 nullish 的非整数值，对 <code>hints</code> 选项使用非 nullish 的非数值，对 <code>all</code> 选项使用非 nullish 的非布尔值，或对 <code>verbatim</code> 选项使用非 nullish 的非布尔值，会抛出 <code>ERR_INVALID_ARG_TYPE</code> 错误。</p><h3 id="dep0154-rsa-pss-generate-key-pair-options" tabindex="-1">DEP0154: RSA-PSS 生成密钥对选项 <a class="header-anchor" href="#dep0154-rsa-pss-generate-key-pair-options" aria-label="Permalink to “DEP0154: RSA-PSS 生成密钥对选项”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.0.0</td><td>运行时弃用。</td></tr><tr><td>v16.10.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p><code>&#39;hash&#39;</code> 和 <code>&#39;mgf1Hash&#39;</code> 选项已替换为 <code>&#39;hashAlgorithm&#39;</code> 和 <code>&#39;mgf1HashAlgorithm&#39;</code>。</p><h3 id="dep0155-trailing-slashes-in-pattern-specifier-resolutions" tabindex="-1">DEP0155: 模式说明符解析中的尾部斜杠 <a class="header-anchor" href="#dep0155-trailing-slashes-in-pattern-specifier-resolutions" aria-label="Permalink to “DEP0155: 模式说明符解析中的尾部斜杠”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v17.0.0</td><td>运行时弃用。</td></tr><tr><td>v16.10.0</td><td>仅文档弃用，支持 <code>--pending-deprecation</code>。</td></tr></tbody></table></div><p>类型: 运行时</p><p>对于包 <code>&quot;exports&quot;</code> 和 <code>&quot;imports&quot;</code> 模式解析，以 <code>&quot;/&quot;</code> 结尾的说明符（如 <code>import &#39;pkg/x/&#39;</code>）的重新映射已被弃用。</p><h3 id="dep0156-aborted-property-and-abort-aborted-event-in-http" tabindex="-1">DEP0156: <code>http</code> 中的 <code>.aborted</code> 属性和 <code>&#39;abort&#39;</code>、<code>&#39;aborted&#39;</code> 事件 <a class="header-anchor" href="#dep0156-aborted-property-and-abort-aborted-event-in-http" aria-label="Permalink to “DEP0156: http 中的 .aborted 属性和 &#39;abort&#39;、&#39;aborted&#39; 事件”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v17.0.0, v16.12.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 仅文档</p><p>改用 <a href="/zh/nodejs/api/stream#stream">&lt;Stream&gt;</a> API，因为 <a href="/zh/nodejs/api/http#class-httpclientrequest"><code>http.ClientRequest</code></a>、<a href="/zh/nodejs/api/http#class-httpserverresponse"><code>http.ServerResponse</code></a> 和 <a href="/zh/nodejs/api/http#class-httpincomingmessage"><code>http.IncomingMessage</code></a> 都是基于流的。 检查 <code>stream.destroyed</code> 而不是 <code>.aborted</code> 属性，并监听 <code>&#39;close&#39;</code> 而不是 <code>&#39;abort&#39;</code>、<code>&#39;aborted&#39;</code> 事件。</p><p><code>.aborted</code> 属性和 <code>&#39;abort&#39;</code> 事件仅用于检测 <code>.abort()</code> 调用。 对于提前关闭请求，使用 Stream <code>.destroy([error])</code>，然后检查 <code>.destroyed</code> 属性和 <code>&#39;close&#39;</code> 事件应具有相同的效果。 接收端还应检查 <a href="/zh/nodejs/api/http#class-httpincomingmessage"><code>http.IncomingMessage</code></a> 上的 <a href="/zh/nodejs/api/stream#readablereadableended"><code>readable.readableEnded</code></a> 值，以了解它是中止还是正常销毁。</p><h3 id="dep0157-thenable-support-in-streams" tabindex="-1">DEP0157: 流中的 Thenable 支持 <a class="header-anchor" href="#dep0157-thenable-support-in-streams" aria-label="Permalink to “DEP0157: 流中的 Thenable 支持”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v18.0.0</td><td>已停止使用。</td></tr><tr><td>v17.2.0, v16.14.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p>Node.js 流的一个未公开的特性是支持在实现方法中使用 thenable。 这现在已被弃用，请改用回调，并避免将异步函数用于流实现方法。</p><p>此特性导致用户遇到意外问题，即用户以回调方式实现函数，但使用例如 async 方法，这将导致错误，因为混合 promise 和回调语义是无效的。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Writable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someOp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="dep0158-bufferslicestart-end" tabindex="-1">DEP0158: <code>buffer.slice(start, end)</code> <a class="header-anchor" href="#dep0158-bufferslicestart-end" aria-label="Permalink to “DEP0158: buffer.slice(start, end)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v17.5.0, v16.15.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p>此方法已被弃用，因为它与 <code>Uint8Array.prototype.slice()</code> 不兼容，而后者是 <code>Buffer</code> 的超类。</p><p>请改用 <a href="/zh/nodejs/api/buffer#bufsubarraystart-end"><code>buffer.subarray</code></a>，它的作用相同。</p><h3 id="dep0159-err_invalid_callback" tabindex="-1">DEP0159: <code>ERR_INVALID_CALLBACK</code> <a class="header-anchor" href="#dep0159-err_invalid_callback" aria-label="Permalink to “DEP0159: ERR_INVALID_CALLBACK”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v18.0.0</td><td>已停止使用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p>由于为值类型验证添加了更多混淆，因此已删除此错误代码。</p><h3 id="dep0160-processonmultipleresolves-handler" tabindex="-1">DEP0160: <code>process.on(&#39;multipleResolves&#39;, handler)</code> <a class="header-anchor" href="#dep0160-processonmultipleresolves-handler" aria-label="Permalink to “DEP0160: process.on(&#39;multipleResolves&#39;, handler)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v18.0.0</td><td>运行时弃用。</td></tr><tr><td>v17.6.0, v16.15.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：运行时。</p><p>此事件已被弃用，因为它不适用于 V8 promise 组合器，这降低了它的实用性。</p><h3 id="dep0161-process_getactiverequests-and-process_getactivehandles" tabindex="-1">DEP0161: <code>process._getActiveRequests()</code> 和 <code>process._getActiveHandles()</code> <a class="header-anchor" href="#dep0161-process_getactiverequests-and-process_getactivehandles" aria-label="Permalink to “DEP0161: process._getActiveRequests() 和 process._getActiveHandles()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v17.6.0, v16.15.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><code>process._getActiveHandles()</code> 和 <code>process._getActiveRequests()</code> 函数并非供公共使用，可能会在未来的版本中删除。</p><p>使用 <a href="/zh/nodejs/api/process#processgetactiveresourcesinfo"><code>process.getActiveResourcesInfo()</code></a> 获取活动资源类型的列表，而不是实际的引用。</p><h3 id="dep0162-fswrite-fswritefilesync-coercion-to-string" tabindex="-1">DEP0162: <code>fs.write()</code>, <code>fs.writeFileSync()</code> 强制转换为字符串 <a class="header-anchor" href="#dep0162-fswrite-fswritefilesync-coercion-to-string" aria-label="Permalink to “DEP0162: fs.write(), fs.writeFileSync() 强制转换为字符串”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v19.0.0</td><td>生命周期结束。</td></tr><tr><td>v18.0.0</td><td>运行时弃用。</td></tr><tr><td>v17.8.0, v16.15.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：生命周期结束</p><p>将具有自有 <code>toString</code> 属性的对象隐式强制转换为字符串，并作为第二个参数传递给 <a href="/zh/nodejs/api/fs#fswritefd-buffer-offset-length-position-callback"><code>fs.write()</code></a>，<a href="/zh/nodejs/api/fs#fswritefilefile-data-options-callback"><code>fs.writeFile()</code></a>，<a href="/zh/nodejs/api/fs#fsappendfilepath-data-options-callback"><code>fs.appendFile()</code></a>，<a href="/zh/nodejs/api/fs#fswritefilesyncfile-data-options"><code>fs.writeFileSync()</code></a> 和 <a href="/zh/nodejs/api/fs#fsappendfilesyncpath-data-options"><code>fs.appendFileSync()</code></a> 已弃用。 将它们转换为原始字符串。</p><h3 id="dep0163-channelsubscribeonmessage-channelunsubscribeonmessage" tabindex="-1">DEP0163: <code>channel.subscribe(onMessage)</code>, <code>channel.unsubscribe(onMessage)</code> <a class="header-anchor" href="#dep0163-channelsubscribeonmessage-channelunsubscribeonmessage" aria-label="Permalink to “DEP0163: channel.subscribe(onMessage), channel.unsubscribe(onMessage)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v18.7.0, v16.17.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p>这些方法已被弃用，因为它们可以以一种无法保持通道引用足够长的时间来接收事件的方式使用。</p><p>请改用 <a href="/zh/nodejs/api/diagnostics_channel#diagnostics-channelsubscribename-onmessage"><code>diagnostics_channel.subscribe(name, onMessage)</code></a> 或 <a href="/zh/nodejs/api/diagnostics_channel#diagnostics-channelunsubscribename-onmessage"><code>diagnostics_channel.unsubscribe(name, onMessage)</code></a>，它们的功能相同。</p><h3 id="dep0164-processexitcode-processexitcode-coercion-to-integer" tabindex="-1">DEP0164: <code>process.exit(code)</code>, <code>process.exitCode</code> 强制转换为整数 <a class="header-anchor" href="#dep0164-processexitcode-processexitcode-coercion-to-integer" aria-label="Permalink to “DEP0164: process.exit(code), process.exitCode 强制转换为整数”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.0.0</td><td>生命周期结束。</td></tr><tr><td>v19.0.0</td><td>运行时弃用。</td></tr><tr><td>v18.10.0, v16.18.0</td><td><code>process.exitCode</code> 整数强制转换的仅文档弃用。</td></tr><tr><td>v18.7.0, v16.17.0</td><td><code>process.exit(code)</code> 整数强制转换的仅文档弃用。</td></tr></tbody></table></div><p>类型：生命周期结束</p><p>除 <code>undefined</code>、<code>null</code>、整数数字和整数字符串（例如，<code>&#39;1&#39;</code>）之外的值，不建议用作 <a href="/zh/nodejs/api/process#processexitcode"><code>process.exit()</code></a> 中 <code>code</code> 参数的值和赋值给 <a href="/zh/nodejs/api/process#processexitcode-1"><code>process.exitCode</code></a> 的值。</p><h3 id="dep0165---trace-atomics-wait" tabindex="-1">DEP0165: <code>--trace-atomics-wait</code> <a class="header-anchor" href="#dep0165---trace-atomics-wait" aria-label="Permalink to “DEP0165: --trace-atomics-wait”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>已停止使用。</td></tr><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v18.8.0, v16.18.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：已停止使用</p><p><code>--trace-atomics-wait</code> 标志已被移除，因为它使用了 V8 钩子 <code>SetAtomicsWaitCallback</code>，该钩子将在未来的 V8 版本中被移除。</p><h3 id="dep0166-double-slashes-in-imports-and-exports-targets" tabindex="-1">DEP0166: imports 和 exports 目标中的双斜杠 <a class="header-anchor" href="#dep0166-double-slashes-in-imports-and-exports-targets" aria-label="Permalink to “DEP0166: imports 和 exports 目标中的双斜杠”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v19.0.0</td><td>运行时弃用。</td></tr><tr><td>v18.10.0</td><td>仅文档弃用，支持 <code>--pending-deprecation</code>。</td></tr></tbody></table></div><p>类型：运行时</p><p>包 imports 和 exports 目标映射到包含双斜杠（<em>&quot;/&quot;</em> 或 <em>&quot;&quot;</em>）的路径已被弃用，并且在未来的版本中将会因解析验证错误而失败。同样的弃用也适用于以斜杠开头或结尾的模式匹配。</p><h3 id="dep0167-weak-diffiehellmangroup-instances-modp1-modp2-modp5" tabindex="-1">DEP0167: 弱 <code>DiffieHellmanGroup</code> 实例 (<code>modp1</code>, <code>modp2</code>, <code>modp5</code>) <a class="header-anchor" href="#dep0167-weak-diffiehellmangroup-instances-modp1-modp2-modp5" aria-label="Permalink to “DEP0167: 弱 DiffieHellmanGroup 实例 (modp1, modp2, modp5)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v18.10.0, v16.18.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p>众所周知的 MODP 组 <code>modp1</code>、<code>modp2</code> 和 <code>modp5</code> 已被弃用，因为它们对于实际攻击来说并不安全。 有关详细信息，请参见 <a href="https://www.rfc-editor.org/rfc/rfc8247#section-2.4" target="_blank" rel="noreferrer">RFC 8247 Section 2.4</a>。</p><p>这些组可能会在 Node.js 的未来版本中被移除。 依赖于这些组的应用程序应该评估使用更强的 MODP 组来代替。</p><h3 id="dep0168-unhandled-exception-in-node-api-callbacks" tabindex="-1">DEP0168: Node-API 回调中未处理的异常 <a class="header-anchor" href="#dep0168-unhandled-exception-in-node-api-callbacks" aria-label="Permalink to “DEP0168: Node-API 回调中未处理的异常”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v18.3.0, v16.17.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p>现在不推荐隐式抑制 Node-API 回调中未捕获的异常。</p><p>设置标志 <a href="/zh/nodejs/api/cli#force-node-api-uncaught-exceptions-policy"><code>--force-node-api-uncaught-exceptions-policy</code></a> 以强制 Node.js 在异常未在 Node-API 回调中处理时发出 <a href="/zh/nodejs/api/process#event-uncaughtexception"><code>&#39;uncaughtException&#39;</code></a> 事件。</p><h3 id="dep0169-insecure-urlparse" tabindex="-1">DEP0169: 不安全的 url.parse() <a class="header-anchor" href="#dep0169-insecure-urlparse" aria-label="Permalink to “DEP0169: 不安全的 url.parse()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v19.9.0, v18.17.0</td><td>增加了对 <code>--pending-deprecation</code> 的支持。</td></tr><tr><td>v19.0.0, v18.13.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档（支持 <a href="/zh/nodejs/api/cli#pending-deprecation"><code>--pending-deprecation</code></a>）</p><p><a href="/zh/nodejs/api/url#urlparseurlstring-parsequerystring-slashesdenotehost"><code>url.parse()</code></a> 的行为未标准化，并且容易出错，这些错误具有安全隐患。 请改用 <a href="/zh/nodejs/api/url#the-whatwg-url-api">WHATWG URL API</a>。 CVE 不会针对 <code>url.parse()</code> 漏洞发布。</p><h3 id="dep0170-invalid-port-when-using-urlparse" tabindex="-1">DEP0170: 使用 <code>url.parse()</code> 时的无效端口 <a class="header-anchor" href="#dep0170-invalid-port-when-using-urlparse" aria-label="Permalink to “DEP0170: 使用 url.parse() 时的无效端口”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.0.0</td><td>运行时弃用。</td></tr><tr><td>v19.2.0, v18.13.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p><a href="/zh/nodejs/api/url#urlparseurlstring-parsequerystring-slashesdenotehost"><code>url.parse()</code></a> 接受带有非数字端口的 URL。 此行为可能会导致使用意外输入进行主机名欺骗。 这些 URL 将在 Node.js 的未来版本中抛出错误，因为 <a href="/zh/nodejs/api/url#the-whatwg-url-api">WHATWG URL API</a> 已经这样做了。</p><h3 id="dep0171-setters-for-httpincomingmessage-headers-and-trailers" tabindex="-1">DEP0171: <code>http.IncomingMessage</code> 标头和尾部的设置器 <a class="header-anchor" href="#dep0171-setters-for-httpincomingmessage-headers-and-trailers" aria-label="Permalink to “DEP0171: http.IncomingMessage 标头和尾部的设置器”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v19.3.0, v18.13.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p>在 Node.js 的未来版本中，<a href="/zh/nodejs/api/http#messageheaders"><code>message.headers</code></a>、<a href="/zh/nodejs/api/http#messageheadersdistinct"><code>message.headersDistinct</code></a>、<a href="/zh/nodejs/api/http#messagetrailers"><code>message.trailers</code></a> 和 <a href="/zh/nodejs/api/http#messagetrailersdistinct"><code>message.trailersDistinct</code></a> 将为只读。</p><h3 id="dep0172-the-asyncresource-property-of-asyncresource-bound-functions" tabindex="-1">DEP0172: 绑定到 <code>AsyncResource</code> 函数的 <code>asyncResource</code> 属性 <a class="header-anchor" href="#dep0172-the-asyncresource-property-of-asyncresource-bound-functions" aria-label="Permalink to “DEP0172: 绑定到 AsyncResource 函数的 asyncResource 属性”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.0.0</td><td>运行时弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p>在 Node.js 的未来版本中，当函数绑定到 <code>AsyncResource</code> 时，将不再添加 <code>asyncResource</code> 属性。</p><h3 id="dep0173-the-assertcalltracker-class" tabindex="-1">DEP0173: <code>assert.CallTracker</code> 类 <a class="header-anchor" href="#dep0173-the-assertcalltracker-class" aria-label="Permalink to “DEP0173: assert.CallTracker 类”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.1.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p>在 Node.js 的未来版本中，<a href="/zh/nodejs/api/assert#class-assertcalltracker"><code>assert.CallTracker</code></a> 将被删除。 考虑使用替代方案，例如 <a href="/zh/nodejs/api/test#mocking"><code>mock</code></a> 辅助函数。</p><h3 id="dep0174-calling-promisify-on-a-function-that-returns-a-promise" tabindex="-1">DEP0174：在返回 <code>Promise</code> 的函数上调用 <code>promisify</code> <a class="header-anchor" href="#dep0174-calling-promisify-on-a-function-that-returns-a-promise" aria-label="Permalink to “DEP0174：在返回 Promise 的函数上调用 promisify”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v21.0.0</td><td>运行时弃用。</td></tr><tr><td>v20.8.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p>在返回一个函数的 <a href="/zh/nodejs/api/util#utilpromisifyoriginal"><code>util.promisify</code></a> 上调用</p><h3 id="dep0175-utiltousvstring" tabindex="-1">DEP0175: <code>util.toUSVString</code> <a class="header-anchor" href="#dep0175-utiltousvstring" aria-label="Permalink to “DEP0175: util.toUSVString”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.8.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><a href="/zh/nodejs/api/util#utiltousvstringstring"><code>util.toUSVString()</code></a> API 已弃用。 请改用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed" target="_blank" rel="noreferrer"><code>String.prototype.toWellFormed</code></a>。</p><h3 id="dep0176-fsf_ok-fsr_ok-fsw_ok-fsx_ok" tabindex="-1">DEP0176: <code>fs.F_OK</code>、<code>fs.R_OK</code>、<code>fs.W_OK</code>、<code>fs.X_OK</code> <a class="header-anchor" href="#dep0176-fsf_ok-fsr_ok-fsw_ok-fsx_ok" aria-label="Permalink to “DEP0176: fs.F_OK、fs.R_OK、fs.W_OK、fs.X_OK”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.8.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p>直接在 <code>node:fs</code> 上公开的 <code>F_OK</code>、<code>R_OK</code>、<code>W_OK</code> 和 <code>X_OK</code> getter 已弃用。 请从 <code>fs.constants</code> 或 <code>fs.promises.constants</code> 中获取它们。</p><h3 id="dep0177-utiltypesiswebassemblycompiledmodule" tabindex="-1">DEP0177: <code>util.types.isWebAssemblyCompiledModule</code> <a class="header-anchor" href="#dep0177-utiltypesiswebassemblycompiledmodule" aria-label="Permalink to “DEP0177: util.types.isWebAssemblyCompiledModule”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v21.7.0, v20.12.0</td><td>已终止使用。</td></tr><tr><td>v21.3.0, v20.11.0</td><td>已分配弃用代码。</td></tr><tr><td>v14.0.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：已终止使用</p><p><code>util.types.isWebAssemblyCompiledModule</code> API 已被移除。 请改用 <code>value instanceof WebAssembly.Module</code>。</p><h3 id="dep0178-direntpath" tabindex="-1">DEP0178: <code>dirent.path</code> <a class="header-anchor" href="#dep0178-direntpath" aria-label="Permalink to “DEP0178: dirent.path”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>运行时弃用。</td></tr><tr><td>v21.5.0, v20.12.0, v18.20.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p><a href="/zh/nodejs/api/fs#direntpath"><code>dirent.path</code></a> 因其在发布线中缺乏一致性而被弃用。 请改用 <a href="/zh/nodejs/api/fs#direntparentpath"><code>dirent.parentPath</code></a>。</p><h3 id="dep0179-hash-constructor" tabindex="-1">DEP0179: <code>Hash</code> 构造函数 <a class="header-anchor" href="#dep0179-hash-constructor" aria-label="Permalink to “DEP0179: Hash 构造函数”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v21.5.0, v20.12.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：运行时</p><p>由于 <code>Hash</code> 类是内部类，不打算公开使用，因此直接使用 <code>Hash()</code> 或 <code>new Hash()</code> 调用 <code>Hash</code> 类已被弃用。 请使用 <a href="/zh/nodejs/api/crypto#cryptocreatehashalgorithm-options"><code>crypto.createHash()</code></a> 方法创建 Hash 实例。</p><h3 id="dep0180-fsstats-constructor" tabindex="-1">DEP0180: <code>fs.Stats</code> 构造函数 <a class="header-anchor" href="#dep0180-fsstats-constructor" aria-label="Permalink to “DEP0180: fs.Stats 构造函数”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v20.13.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p>直接使用 <code>Stats()</code> 或 <code>new Stats()</code> 调用 <code>fs.Stats</code> 类已被弃用，因为它是一个内部实现，不适合公开使用。</p><h3 id="dep0181-hmac-constructor" tabindex="-1">DEP0181: <code>Hmac</code> 构造函数 <a class="header-anchor" href="#dep0181-hmac-constructor" aria-label="Permalink to “DEP0181: Hmac 构造函数”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v22.0.0</td><td>运行时弃用。</td></tr><tr><td>v20.13.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p>直接使用 <code>Hmac()</code> 或 <code>new Hmac()</code> 调用 <code>Hmac</code> 类已被弃用，因为它是一个内部实现，不适合公开使用。 请使用 <a href="/zh/nodejs/api/crypto#cryptocreatehmacalgorithm-key-options"><code>crypto.createHmac()</code></a> 方法来创建 Hmac 实例。</p><h3 id="dep0182-short-gcm-authentication-tags-without-explicit-authtaglength" tabindex="-1">DEP0182: 没有显式 <code>authTagLength</code> 的短 GCM 身份验证标签 <a class="header-anchor" href="#dep0182-short-gcm-authentication-tags-without-explicit-authtaglength" aria-label="Permalink to “DEP0182: 没有显式 authTagLength 的短 GCM 身份验证标签”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>运行时弃用。</td></tr><tr><td>v20.13.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 运行时</p><p>打算使用比默认身份验证标签长度短的身份验证标签的应用程序必须将 <a href="/zh/nodejs/api/crypto#cryptocreatedecipherivalgorithm-key-iv-options"><code>crypto.createDecipheriv()</code></a> 函数的 <code>authTagLength</code> 选项设置为适当的长度。</p><p>对于 GCM 模式下的密码，<a href="/zh/nodejs/api/crypto#deciphersetauthtagbuffer-encoding"><code>decipher.setAuthTag()</code></a> 函数接受任何有效长度的身份验证标签（参见 <a href="/zh/nodejs/api/deprecations#dep0090">DEP0090</a>）。 为了更好地与 <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf" target="_blank" rel="noreferrer">NIST SP 800-38D</a> 的建议保持一致，此行为已被弃用。</p><h3 id="dep0183-openssl-engine-based-apis" tabindex="-1">DEP0183: 基于 OpenSSL 引擎的 API <a class="header-anchor" href="#dep0183-openssl-engine-based-apis" aria-label="Permalink to “DEP0183: 基于 OpenSSL 引擎的 API”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v22.4.0, v20.16.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型: 仅文档</p><p>OpenSSL 3 已经弃用了对自定义引擎的支持，并建议切换到其新的提供程序模型。 <code>https.request()</code> 的 <code>clientCertEngine</code> 选项、<a href="/zh/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> 和 <a href="/zh/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a>；<a href="/zh/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> 的 <code>privateKeyEngine</code> 和 <code>privateKeyIdentifier</code>；以及 <a href="/zh/nodejs/api/crypto#cryptosetengineengine-flags"><code>crypto.setEngine()</code></a> 都依赖于 OpenSSL 的此功能。</p><h3 id="dep0184-instantiating-nodezlib-classes-without-new" tabindex="-1">DEP0184: 不使用 <code>new</code> 实例化 <code>node:zlib</code> 类 <a class="header-anchor" href="#dep0184-instantiating-nodezlib-classes-without-new" aria-label="Permalink to “DEP0184: 不使用 new 实例化 node:zlib 类”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v22.9.0, v20.18.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p>不使用 <code>new</code> 限定符实例化由 <code>node:zlib</code> 模块导出的类已被弃用。建议使用 <code>new</code> 限定符。这适用于所有 Zlib 类，例如 <code>Deflate</code>、<code>DeflateRaw</code>、<code>Gunzip</code>、<code>Inflate</code>、<code>InflateRaw</code>、<code>Unzip</code> 和 <code>Zlib</code>。</p><h3 id="dep0185-instantiating-noderepl-classes-without-new" tabindex="-1">DEP0185: 不使用 <code>new</code> 实例化 <code>node:repl</code> 类 <a class="header-anchor" href="#dep0185-instantiating-noderepl-classes-without-new" aria-label="Permalink to “DEP0185: 不使用 new 实例化 node:repl 类”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v22.9.0, v20.18.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p>不使用 <code>new</code> 限定符实例化由 <code>node:repl</code> 模块导出的类已被弃用。建议使用 <code>new</code> 限定符。这适用于所有 REPL 类，包括 <code>REPLServer</code> 和 <code>Recoverable</code>。</p><h3 id="dep0187-passing-invalid-argument-types-to-fsexistssync" tabindex="-1">DEP0187: 将无效的参数类型传递给 <code>fs.existsSync</code> <a class="header-anchor" href="#dep0187-passing-invalid-argument-types-to-fsexistssync" aria-label="Permalink to “DEP0187: 将无效的参数类型传递给 fs.existsSync”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.4.0</td><td>仅文档。</td></tr></tbody></table></div><p>类型：仅文档</p><p>传递不支持的参数类型已被弃用，并且在未来的版本中，将抛出一个错误，而不是返回 <code>false</code>。</p><h3 id="dep0188-processfeaturesipv6-and-processfeaturesuv" tabindex="-1">DEP0188: <code>process.features.ipv6</code> 和 <code>process.features.uv</code> <a class="header-anchor" href="#dep0188-processfeaturesipv6-and-processfeaturesuv" aria-label="Permalink to “DEP0188: process.features.ipv6 和 process.features.uv”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.4.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p>这些属性始终为 <code>true</code>。任何基于这些属性的检查都是多余的。</p><h3 id="dep0189-processfeaturestls_*" tabindex="-1">DEP0189: <code>process.features.tls_*</code> <a class="header-anchor" href="#dep0189-processfeaturestls_*" aria-label="Permalink to “DEP0189: process.features.tls_*”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.4.0</td><td>仅文档弃用。</td></tr></tbody></table></div><p>类型：仅文档</p><p><code>process.features.tls_alpn</code>、<code>process.features.tls_ocsp</code> 和 <code>process.features.tls_sni</code> 已被弃用，因为它们的值保证与 <code>process.features.tls</code> 的值相同。</p>`,800)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};