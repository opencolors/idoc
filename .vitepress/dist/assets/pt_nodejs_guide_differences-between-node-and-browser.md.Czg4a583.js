import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Diferenças entre Node.js e o navegador","description":"Descubra as principais diferenças entre a criação de aplicativos em Node.js e o navegador, incluindo o ecossistema, o controle do ambiente e os sistemas de módulos.","frontmatter":{"title":"Diferenças entre Node.js e o navegador","description":"Descubra as principais diferenças entre a criação de aplicativos em Node.js e o navegador, incluindo o ecossistema, o controle do ambiente e os sistemas de módulos.","head":[["meta",{"name":"og:title","content":"Diferenças entre Node.js e o navegador | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Descubra as principais diferenças entre a criação de aplicativos em Node.js e o navegador, incluindo o ecossistema, o controle do ambiente e os sistemas de módulos."}],["meta",{"name":"twitter:title","content":"Diferenças entre Node.js e o navegador | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Descubra as principais diferenças entre a criação de aplicativos em Node.js e o navegador, incluindo o ecossistema, o controle do ambiente e os sistemas de módulos."}],["link",{"rel":"canonical","href":"https://idoc.dev/pt/nodejs/guide/differences-between-node-and-browser"}],["meta",{"property":"og:url","content":"https://idoc.dev/pt/nodejs/guide/differences-between-node-and-browser"}]]},"headers":[],"relativePath":"pt/nodejs/guide/differences-between-node-and-browser.md","filePath":"pt/nodejs/guide/differences-between-node-and-browser.md","lastUpdated":null}`),a={name:`pt/nodejs/guide/differences-between-node-and-browser.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="diferencas-entre-node-js-e-o-navegador" tabindex="-1">Diferenças entre Node.js e o Navegador <a class="header-anchor" href="#diferencas-entre-node-js-e-o-navegador" aria-label="Permalink to “Diferenças entre Node.js e o Navegador”">​</a></h1><p>Tanto o navegador quanto o Node.js usam JavaScript como sua linguagem de programação. Construir aplicativos que rodam no navegador é completamente diferente de construir um aplicativo Node.js. Apesar do fato de que é sempre JavaScript, existem algumas diferenças importantes que tornam a experiência radicalmente diferente.</p><p>Da perspectiva de um desenvolvedor frontend que usa extensivamente JavaScript, os aplicativos Node.js trazem uma enorme vantagem: o conforto de programar tudo - o frontend e o backend - em uma única linguagem.</p><p>Você tem uma grande oportunidade porque sabemos o quão difícil é aprender completa e profundamente uma linguagem de programação, e ao usar a mesma linguagem para realizar todo o seu trabalho na web - tanto no cliente quanto no servidor, você está em uma posição única de vantagem.</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>O que muda é o ecossistema.</p></div><p>No navegador, na maioria das vezes o que você está fazendo é interagir com o DOM, ou outras APIs da Plataforma Web como Cookies. Eles não existem no Node.js, é claro. Você não tem o <code>document</code>, <code>window</code> e todos os outros objetos que são fornecidos pelo navegador.</p><p>E no navegador, não temos todas as APIs agradáveis que o Node.js fornece através de seus módulos, como a funcionalidade de acesso ao sistema de arquivos.</p><p>Outra grande diferença é que no Node.js você controla o ambiente. A menos que você esteja construindo um aplicativo de código aberto que qualquer pessoa pode implantar em qualquer lugar, você sabe qual versão do Node.js executará o aplicativo. Comparado com o ambiente do navegador, onde você não tem o luxo de escolher qual navegador seus visitantes usarão, isso é muito conveniente.</p><p>Isso significa que você pode escrever todo o JavaScript moderno ES2015+ que sua versão do Node.js suporta. Como o JavaScript se move tão rápido, mas os navegadores podem ser um pouco lentos para atualizar, às vezes na web você fica preso a usar versões mais antigas de JavaScript / ECMAScript. Você pode usar o Babel para transformar seu código para ser compatível com ES5 antes de enviá-lo para o navegador, mas no Node.js, você não precisará disso.</p><p>Outra diferença é que o Node.js suporta os sistemas de módulos CommonJS e ES (desde o Node.js v12), enquanto no navegador, estamos começando a ver o padrão ES Modules sendo implementado.</p><p>Na prática, isso significa que você pode usar tanto <code>require()</code> quanto <code>import</code> no Node.js, enquanto você está limitado a <code>import</code> no navegador.</p>`,11)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};