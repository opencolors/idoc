import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 与 TypeScript","description":"了解如何在 Node.js 中使用 TypeScript，包括其优点、安装和使用方法。发现如何编译和运行 TypeScript 代码，并探索其特性和工具。","frontmatter":{"title":"Node.js 与 TypeScript","description":"了解如何在 Node.js 中使用 TypeScript，包括其优点、安装和使用方法。发现如何编译和运行 TypeScript 代码，并探索其特性和工具。","head":[["meta",{"name":"og:title","content":"Node.js 与 TypeScript | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"了解如何在 Node.js 中使用 TypeScript，包括其优点、安装和使用方法。发现如何编译和运行 TypeScript 代码，并探索其特性和工具。"}],["meta",{"name":"twitter:title","content":"Node.js 与 TypeScript | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"了解如何在 Node.js 中使用 TypeScript，包括其优点、安装和使用方法。发现如何编译和运行 TypeScript 代码，并探索其特性和工具。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/guide/nodejs-with-typescript"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/guide/nodejs-with-typescript"}]]},"headers":[],"relativePath":"zh/nodejs/guide/nodejs-with-typescript.md","filePath":"zh/nodejs/guide/nodejs-with-typescript.md","lastUpdated":null}`),a={name:`zh/nodejs/guide/nodejs-with-typescript.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="使用-typescript-的-node-js" tabindex="-1">使用 TypeScript 的 Node.js <a class="header-anchor" href="#使用-typescript-的-node-js" aria-label="Permalink to “使用 TypeScript 的 Node.js”">​</a></h1><h2 id="什么是-typescript" tabindex="-1">什么是 TypeScript <a class="header-anchor" href="#什么是-typescript" aria-label="Permalink to “什么是 TypeScript”">​</a></h2><p><a href="https://www.typescriptlang.org" target="_blank" rel="noreferrer">TypeScript</a> 是一个由微软维护和开发的开源语言。它深受世界各地软件开发者的喜爱和使用。</p><p>从根本上说，它是 JavaScript 的一个超集，为该语言添加了新的功能。最值得注意的补充是静态类型定义，这是纯 JavaScript 中所没有的。有了类型，就可以声明我们期望什么样的参数，函数中返回的是什么，或者我们创建的对象的具体形状。TypeScript 是一个非常强大的工具，它为 JavaScript 项目开辟了一个充满可能性的新世界。通过在代码发布之前防止许多 bug，它使我们的代码更加安全和健壮——它在代码开发过程中捕获问题，并与 Visual Studio Code 等代码编辑器完美集成。</p><p>我们稍后可以讨论 TypeScript 的其他优点，现在让我们看一些例子！</p><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to “例子”">​</a></h3><p>看看这段代码片段，然后我们可以一起解开它：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> justine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Justine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isJustineAnAdult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(justine)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>第一部分（带有 <code>type</code> 关键字）负责声明表示用户的自定义对象类型。稍后，我们利用这个新创建的类型来创建函数 <code>isAdult</code>，该函数接受一个 <code>User</code> 类型的参数并返回 <code>boolean</code>。在此之后，我们创建了 <code>justine</code>，我们的示例数据，可用于调用先前定义的函数。最后，我们创建一个新变量，其中包含有关 <code>justine</code> 是否成年人的信息。</p><p>关于这个例子，您还应该知道一些其他的事情。首先，如果我们不遵守声明的类型，TypeScript 会警告我们有些地方不对劲并防止滥用。其次，并非所有内容都必须显式类型化 - TypeScript 非常聪明，可以为我们推断类型。例如，即使我们没有显式类型化变量 <code>isJustineAnAdult</code>，它的类型也会是 boolean，即使我们没有将 <code>justine</code> 声明为 <code>User</code> 类型，它对于我们的函数来说也是有效的参数。</p><p>好的，我们有一些 TypeScript 代码。现在我们如何运行它呢？</p><p><strong>首先要做的是在我们的项目中安装 TypeScript：</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>现在我们可以使用终端中的 <code>tsc</code> 命令将其编译为 JavaScript。让我们开始吧！</p><p><strong>假设我们的文件名为 <code>example.ts</code>，则命令如下所示：</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong>这里的 <a href="https://www.npmjs.com/package/npx" target="_blank" rel="noreferrer">npx</a> 代表 Node Package Execute。此工具允许我们运行 TypeScript 的编译器而无需全局安装它。</strong></p></div><p><code>tsc</code> 是 TypeScript 编译器，它会将我们的 TypeScript 代码编译为 JavaScript。此命令将生成一个名为 <code>example.js</code> 的新文件，我们可以使用 Node.js 运行该文件。现在我们知道了如何编译和运行 TypeScript 代码，让我们看看 TypeScript 的 bug 预防能力吧！</p><p><strong>这是我们将如何修改我们的代码：</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> justine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Justine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Secret!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isJustineAnAdult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(justine, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I shouldn&#39;t be here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>这是 TypeScript 对此的看法：</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">example.ts:12:5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TS2322:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assignable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     age:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Secret!&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  example.ts:3:5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     age:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          ~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> expected</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> comes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> property</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;age&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> declared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> here</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;User&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">example.ts:15:7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TS2322:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;boolean&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assignable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">15</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isJustineAnAdult:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">justine,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I shouldn&#39;t be here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         ~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">example.ts:15:51</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TS2554:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Expected</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arguments,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> but</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> got</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">15</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isJustineAnAdult:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">justine,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I shouldn&#39;t be here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                                                     ~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Found</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> errors</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> same</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts:12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>如您所见，TypeScript 成功地阻止了我们发布可能意外工作的代码。太棒了！</p><h2 id="更多关于-typescript-的内容" tabindex="-1">更多关于 TypeScript 的内容 <a class="header-anchor" href="#更多关于-typescript-的内容" aria-label="Permalink to “更多关于 TypeScript 的内容”">​</a></h2><p>TypeScript 提供了很多其他出色的机制，例如接口、类、实用工具类型等等。此外，在更大的项目中，您可以在一个单独的文件中声明 TypeScript 编译器配置，并细粒度地调整它的工作方式、严格程度以及存储已编译文件的位置等等。您可以在<a href="https://www.typescriptlang.org/docs" target="_blank" rel="noreferrer">官方 TypeScript 文档</a>中阅读更多关于这些精彩内容。</p><p>TypeScript 的其他一些值得一提的优点是，它可以逐步采用，有助于使代码更具可读性和可理解性，并且允许开发人员使用现代语言特性，同时发布用于旧版 Node.js 的代码。</p><h2 id="在-node-js-中运行-typescript-代码" tabindex="-1">在 Node.js 中运行 TypeScript 代码 <a class="header-anchor" href="#在-node-js-中运行-typescript-代码" aria-label="Permalink to “在 Node.js 中运行 TypeScript 代码”">​</a></h2><p>Node.js 无法原生运行 TypeScript。您不能直接从命令行调用 <code>node example.ts</code>。但是，有三种方法可以解决这个问题：</p><h3 id="将-typescript-编译为-javascript" tabindex="-1">将 TypeScript 编译为 JavaScript <a class="header-anchor" href="#将-typescript-编译为-javascript" aria-label="Permalink to “将 TypeScript 编译为 JavaScript”">​</a></h3><p>如果您想在 Node.js 中运行 TypeScript 代码，您需要首先将其编译为 JavaScript。您可以使用 TypeScript 编译器 <code>tsc</code> 来做到这一点，如前所示。</p><p>这是一个小例子：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="使用-ts-node-运行-typescript-代码" tabindex="-1">使用 <code>ts-node</code> 运行 TypeScript 代码 <a class="header-anchor" href="#使用-ts-node-运行-typescript-代码" aria-label="Permalink to “使用 ts-node 运行 TypeScript 代码”">​</a></h3><p>您可以使用 <a href="https://www.npmjs.com/package/ts-node" target="_blank" rel="noreferrer">ts-node</a> 在 Node.js 中直接运行 TypeScript 代码，而无需先编译它。但它不会对您的代码进行类型检查。因此，我们建议您首先使用 <code>tsc</code> 检查您的代码类型，然后在发布之前使用 <code>ts-node</code> 运行它。</p><p>要使用 <code>ts-node</code>，您需要先安装它：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后您可以这样运行您的 TypeScript 代码：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用-tsx-运行-typescript-代码" tabindex="-1">使用 <code>tsx</code> 运行 TypeScript 代码 <a class="header-anchor" href="#使用-tsx-运行-typescript-代码" aria-label="Permalink to “使用 tsx 运行 TypeScript 代码”">​</a></h3><p>您可以使用 <a href="https://www.npmjs.com/package/tsx" target="_blank" rel="noreferrer">tsx</a> 在 Node.js 中直接运行 TypeScript 代码，而无需先编译它。但它不会对您的代码进行类型检查。因此，我们建议您首先使用 <code>tsc</code> 检查您的代码类型，然后在发布之前使用 <code>tsx</code> 运行它。</p><p>要使用 tsx，您需要先安装它：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后您可以这样运行您的 TypeScript 代码：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果您想通过 <code>node</code> 使用 <code>tsx</code>，您可以通过 <code>--import</code> 注册 <code>tsx</code>：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --import=tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="node-js-世界中的-typescript" tabindex="-1">Node.js 世界中的 TypeScript <a class="header-anchor" href="#node-js-世界中的-typescript" aria-label="Permalink to “Node.js 世界中的 TypeScript”">​</a></h2><p>TypeScript 在 Node.js 世界中已经站稳脚跟，并被许多公司、开源项目、工具和框架使用。 一些使用 TypeScript 的著名开源项目示例包括：</p><ul><li><a href="https://nestjs.com" target="_blank" rel="noreferrer">NestJS</a> - 强大且功能齐全的框架，使创建可扩展且架构良好的系统变得简单而愉快</li><li><a href="https://typeorm.io" target="_blank" rel="noreferrer">TypeORM</a> - 受其他语言（如 Hibernate、Doctrine 或 Entity Framework）中其他著名工具影响的出色 ORM</li><li><a href="https://prisma.io" target="_blank" rel="noreferrer">Prisma</a> - 新一代 ORM，具有声明式数据模型、生成的迁移和完全类型安全的数据库查询</li><li><a href="https://rxjs.dev" target="_blank" rel="noreferrer">RxJS</a> - 广泛使用的响应式编程库</li><li><a href="https://adonisjs.com" target="_blank" rel="noreferrer">AdonisJS</a> - 具有 Node.js 的功能齐全的 Web 框架</li><li><a href="https://foal.dev" target="_blank" rel="noreferrer">FoalTs</a> - 优雅的 Nodejs 框架</li></ul><p>还有更多，更多伟大的项目... 也许甚至是你的下一个！</p>`,50)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};