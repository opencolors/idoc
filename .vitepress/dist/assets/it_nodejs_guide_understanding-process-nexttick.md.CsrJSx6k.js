import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Capire process.nextTick() in Node.js","description":"Scopri come funziona process.nextTick() in Node.js e come si differenzia da setImmediate() e setTimeout(). Comprendi il ciclo degli eventi e come utilizzare nextTick() per eseguire codice in modo asincrono.","frontmatter":{"title":"Capire process.nextTick() in Node.js","description":"Scopri come funziona process.nextTick() in Node.js e come si differenzia da setImmediate() e setTimeout(). Comprendi il ciclo degli eventi e come utilizzare nextTick() per eseguire codice in modo asincrono.","head":[["meta",{"name":"og:title","content":"Capire process.nextTick() in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Scopri come funziona process.nextTick() in Node.js e come si differenzia da setImmediate() e setTimeout(). Comprendi il ciclo degli eventi e come utilizzare nextTick() per eseguire codice in modo asincrono."}],["meta",{"name":"twitter:title","content":"Capire process.nextTick() in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Scopri come funziona process.nextTick() in Node.js e come si differenzia da setImmediate() e setTimeout(). Comprendi il ciclo degli eventi e come utilizzare nextTick() per eseguire codice in modo asincrono."}],["link",{"rel":"canonical","href":"https://idoc.dev/it/nodejs/guide/understanding-process-nexttick"}],["meta",{"property":"og:url","content":"https://idoc.dev/it/nodejs/guide/understanding-process-nexttick"}]]},"headers":[],"relativePath":"it/nodejs/guide/understanding-process-nexttick.md","filePath":"it/nodejs/guide/understanding-process-nexttick.md","lastUpdated":null}`),a={name:`it/nodejs/guide/understanding-process-nexttick.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="comprendere-process-nexttick" tabindex="-1">Comprendere <code>process.nextTick()</code> <a class="header-anchor" href="#comprendere-process-nexttick" aria-label="Permalink to “Comprendere process.nextTick()”">​</a></h1><p>Mentre cerchi di comprendere l&#39;event loop di Node.js, una parte importante di esso è <code>process.nextTick()</code>. Ogni volta che l&#39;event loop fa un giro completo, lo chiamiamo tick.</p><p>Quando passiamo una funzione a process.nextTick(), istruiamo l&#39;engine a invocare questa funzione alla fine dell&#39;operazione corrente, prima che inizi il prossimo tick dell&#39;event loop:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // fai qualcosa</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>L&#39;event loop è occupato a elaborare il codice della funzione corrente. Quando questa operazione termina, l&#39;engine JS esegue tutte le funzioni passate alle chiamate <code>nextTick</code> durante quell&#39;operazione.</p><p>È il modo in cui possiamo dire all&#39;engine JS di elaborare una funzione in modo asincrono (dopo la funzione corrente), ma il prima possibile, senza metterla in coda.</p><p>Chiamare <code>setTimeout(() =&gt; {}, 0)</code> eseguirà la funzione alla fine del prossimo tick, molto più tardi rispetto a quando si usa <code>nextTick()</code> che dà priorità alla chiamata e la esegue appena prima dell&#39;inizio del prossimo tick.</p><p>Usa <code>nextTick()</code> quando vuoi assicurarti che nella prossima iterazione dell&#39;event loop quel codice sia già stato eseguito.</p><h2 id="un-esempio-dell-ordine-degli-eventi" tabindex="-1">Un esempio dell&#39;ordine degli eventi: <a class="header-anchor" href="#un-esempio-dell-ordine-degli-eventi" aria-label="Permalink to “Un esempio dell&#39;ordine degli eventi:”">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ciao =&gt; numero 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Esecuzione prima del timeout =&gt; numero 3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Il timeout in esecuzione per ultimo =&gt; numero 4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Esecuzione al prossimo tick =&gt; numero 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="output-di-esempio" tabindex="-1">Output di esempio: <a class="header-anchor" href="#output-di-esempio" aria-label="Permalink to “Output di esempio:”">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Ciao</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> numero</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Esecuzione</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> al</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prossimo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> numero</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Esecuzione</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prima</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> del</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> numero</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Il</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> esecuzione</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> per</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ultimo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> numero</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>L&#39;output esatto potrebbe differire da un&#39;esecuzione all&#39;altra.</p>`,13)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};