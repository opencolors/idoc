import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js TTY Documentation","description":"The Node.js TTY module provides an interface for interacting with TTY (teletypewriter) devices, including methods to check if a stream is a TTY, get window size, and handle terminal events.","frontmatter":{"title":"Node.js TTY Documentation","description":"The Node.js TTY module provides an interface for interacting with TTY (teletypewriter) devices, including methods to check if a stream is a TTY, get window size, and handle terminal events.","head":[["meta",{"name":"og:title","content":"Node.js TTY Documentation | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"The Node.js TTY module provides an interface for interacting with TTY (teletypewriter) devices, including methods to check if a stream is a TTY, get window size, and handle terminal events."}],["meta",{"name":"twitter:title","content":"Node.js TTY Documentation | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"The Node.js TTY module provides an interface for interacting with TTY (teletypewriter) devices, including methods to check if a stream is a TTY, get window size, and handle terminal events."}],["link",{"rel":"canonical","href":"https://idoc.dev/nodejs/api/tty"}],["meta",{"property":"og:url","content":"https://idoc.dev/nodejs/api/tty"}]]},"headers":[],"relativePath":"nodejs/api/tty.md","filePath":"en/nodejs/api/tty.md","lastUpdated":1749464498000}`),a={name:`nodejs/api/tty.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="tty" tabindex="-1">TTY <a class="header-anchor" href="#tty" aria-label="Permalink to “TTY”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/nodejs/api/documentation#stability-index">Stability: 2</a> - Stable</p></div><p><strong>Source Code:</strong> <a href="https://github.com/nodejs/node/blob/v23.8.0/lib/tty.js" target="_blank" rel="noreferrer">lib/tty.js</a></p><p>The <code>node:tty</code> module provides the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes. In most cases, it will not be necessary or possible to use this module directly. However, it can be accessed using:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:tty&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>When Node.js detects that it is being run with a text terminal (&quot;TTY&quot;) attached, <a href="/nodejs/api/process#processstdin"><code>process.stdin</code></a> will, by default, be initialized as an instance of <code>tty.ReadStream</code> and both <a href="/nodejs/api/process#processstdout"><code>process.stdout</code></a> and <a href="/nodejs/api/process#processstderr"><code>process.stderr</code></a> will, by default, be instances of <code>tty.WriteStream</code>. The preferred method of determining whether Node.js is being run within a TTY context is to check that the value of the <code>process.stdout.isTTY</code> property is <code>true</code>:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Boolean(process.stdout.isTTY)&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Boolean(process.stdout.isTTY)&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cat</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>In most cases, there should be little to no reason for an application to manually create instances of the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.</p><h2 id="class-ttyreadstream" tabindex="-1">Class: <code>tty.ReadStream</code> <a class="header-anchor" href="#class-ttyreadstream" aria-label="Permalink to “Class: tty.ReadStream”">​</a></h2><p><strong>Added in: v0.5.8</strong></p><ul><li>Extends: <a href="/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>Represents the readable side of a TTY. In normal circumstances <a href="/nodejs/api/process#processstdin"><code>process.stdin</code></a> will be the only <code>tty.ReadStream</code> instance in a Node.js process and there should be no reason to create additional instances.</p><h3 id="readstreamisraw" tabindex="-1"><code>readStream.isRaw</code> <a class="header-anchor" href="#readstreamisraw" aria-label="Permalink to “readStream.isRaw”">​</a></h3><p><strong>Added in: v0.7.7</strong></p><p>A <code>boolean</code> that is <code>true</code> if the TTY is currently configured to operate as a raw device.</p><p>This flag is always <code>false</code> when a process starts, even if the terminal is operating in raw mode. Its value will change with subsequent calls to <code>setRawMode</code>.</p><h3 id="readstreamistty" tabindex="-1"><code>readStream.isTTY</code> <a class="header-anchor" href="#readstreamistty" aria-label="Permalink to “readStream.isTTY”">​</a></h3><p><strong>Added in: v0.5.8</strong></p><p>A <code>boolean</code> that is always <code>true</code> for <code>tty.ReadStream</code> instances.</p><h3 id="readstreamsetrawmodemode" tabindex="-1"><code>readStream.setRawMode(mode)</code> <a class="header-anchor" href="#readstreamsetrawmodemode" aria-label="Permalink to “readStream.setRawMode(mode)”">​</a></h3><p><strong>Added in: v0.7.7</strong></p><ul><li><code>mode</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> If <code>true</code>, configures the <code>tty.ReadStream</code> to operate as a raw device. If <code>false</code>, configures the <code>tty.ReadStream</code> to operate in its default mode. The <code>readStream.isRaw</code> property will be set to the resulting mode.</li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a> The read stream instance.</li></ul><p>Allows configuration of <code>tty.ReadStream</code> so that it operates as a raw device.</p><p>When in raw mode, input is always available character-by-character, not including modifiers. Additionally, all special processing of characters by the terminal is disabled, including echoing input characters. + will no longer cause a <code>SIGINT</code> when in this mode.</p><h2 id="class-ttywritestream" tabindex="-1">Class: <code>tty.WriteStream</code> <a class="header-anchor" href="#class-ttywritestream" aria-label="Permalink to “Class: tty.WriteStream”">​</a></h2><p><strong>Added in: v0.5.8</strong></p><ul><li>Extends: <a href="/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>Represents the writable side of a TTY. In normal circumstances, <a href="/nodejs/api/process#processstdout"><code>process.stdout</code></a> and <a href="/nodejs/api/process#processstderr"><code>process.stderr</code></a> will be the only <code>tty.WriteStream</code> instances created for a Node.js process and there should be no reason to create additional instances.</p><h3 id="new-ttyreadstreamfd-options" tabindex="-1"><code>new tty.ReadStream(fd[, options])</code> <a class="header-anchor" href="#new-ttyreadstreamfd-options" aria-label="Permalink to “new tty.ReadStream(fd[, options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v0.9.4</td><td>The <code>options</code> argument is supported.</td></tr><tr><td>v0.5.8</td><td>Added in: v0.5.8</td></tr></tbody></table></div><ul><li><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> A file descriptor associated with a TTY.</li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> Options passed to parent <code>net.Socket</code>, see <code>options</code> of <a href="/nodejs/api/net#new-netsocketoptions"><code>net.Socket</code> constructor</a>.</li><li>Returns <a href="/nodejs/api/tty#class-ttyreadstream">&lt;tty.ReadStream&gt;</a></li></ul><p>Creates a <code>ReadStream</code> for <code>fd</code> associated with a TTY.</p><h3 id="new-ttywritestreamfd" tabindex="-1"><code>new tty.WriteStream(fd)</code> <a class="header-anchor" href="#new-ttywritestreamfd" aria-label="Permalink to “new tty.WriteStream(fd)”">​</a></h3><p><strong>Added in: v0.5.8</strong></p><ul><li><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> A file descriptor associated with a TTY.</li><li>Returns <a href="/nodejs/api/tty#class-ttywritestream">&lt;tty.WriteStream&gt;</a></li></ul><p>Creates a <code>WriteStream</code> for <code>fd</code> associated with a TTY.</p><h3 id="event-resize" tabindex="-1">Event: <code>&#39;resize&#39;</code> <a class="header-anchor" href="#event-resize" aria-label="Permalink to “Event: &#39;resize&#39;”">​</a></h3><p><strong>Added in: v0.7.7</strong></p><p>The <code>&#39;resize&#39;</code> event is emitted whenever either of the <code>writeStream.columns</code> or <code>writeStream.rows</code> properties have changed. No arguments are passed to the listener callback when called.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;screen size has changed!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">columns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}x\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rows</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="writestreamclearlinedir-callback" tabindex="-1"><code>writeStream.clearLine(dir[, callback])</code> <a class="header-anchor" href="#writestreamclearlinedir-callback" aria-label="Permalink to “writeStream.clearLine(dir[, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v12.7.0</td><td>The stream&#39;s write() callback and return value are exposed.</td></tr><tr><td>v0.7.7</td><td>Added in: v0.7.7</td></tr></tbody></table></div><ul><li><p><code>dir</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></p><ul><li><code>-1</code>: to the left from cursor</li><li><code>1</code>: to the right from cursor</li><li><code>0</code>: the entire line</li></ul></li><li><p><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> Invoked once the operation completes.</p></li><li><p>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>false</code> if the stream wishes for the calling code to wait for the <code>&#39;drain&#39;</code> event to be emitted before continuing to write additional data; otherwise <code>true</code>.</p></li></ul><p><code>writeStream.clearLine()</code> clears the current line of this <code>WriteStream</code> in a direction identified by <code>dir</code>.</p><h3 id="writestreamclearscreendowncallback" tabindex="-1"><code>writeStream.clearScreenDown([callback])</code> <a class="header-anchor" href="#writestreamclearscreendowncallback" aria-label="Permalink to “writeStream.clearScreenDown([callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v12.7.0</td><td>The stream&#39;s write() callback and return value are exposed.</td></tr><tr><td>v0.7.7</td><td>Added in: v0.7.7</td></tr></tbody></table></div><ul><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> Invoked once the operation completes.</li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>false</code> if the stream wishes for the calling code to wait for the <code>&#39;drain&#39;</code> event to be emitted before continuing to write additional data; otherwise <code>true</code>.</li></ul><p><code>writeStream.clearScreenDown()</code> clears this <code>WriteStream</code> from the current cursor down.</p><h3 id="writestreamcolumns" tabindex="-1"><code>writeStream.columns</code> <a class="header-anchor" href="#writestreamcolumns" aria-label="Permalink to “writeStream.columns”">​</a></h3><p><strong>Added in: v0.7.7</strong></p><p>A <code>number</code> specifying the number of columns the TTY currently has. This property is updated whenever the <code>&#39;resize&#39;</code> event is emitted.</p><h3 id="writestreamcursortox-y-callback" tabindex="-1"><code>writeStream.cursorTo(x[, y][, callback])</code> <a class="header-anchor" href="#writestreamcursortox-y-callback" aria-label="Permalink to “writeStream.cursorTo(x[, y][, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v12.7.0</td><td>The stream&#39;s write() callback and return value are exposed.</td></tr><tr><td>v0.7.7</td><td>Added in: v0.7.7</td></tr></tbody></table></div><ul><li><code>x</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>y</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> Invoked once the operation completes.</li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>false</code> if the stream wishes for the calling code to wait for the <code>&#39;drain&#39;</code> event to be emitted before continuing to write additional data; otherwise <code>true</code>.</li></ul><p><code>writeStream.cursorTo()</code> moves this <code>WriteStream</code>&#39;s cursor to the specified position.</p><h3 id="writestreamgetcolordepthenv" tabindex="-1"><code>writeStream.getColorDepth([env])</code> <a class="header-anchor" href="#writestreamgetcolordepthenv" aria-label="Permalink to “writeStream.getColorDepth([env])”">​</a></h3><p><strong>Added in: v9.9.0</strong></p><ul><li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> An object containing the environment variables to check. This enables simulating the usage of a specific terminal. <strong>Default:</strong> <code>process.env</code>.</li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>Returns:</p><ul><li><code>1</code> for 2,</li><li><code>4</code> for 16,</li><li><code>8</code> for 256,</li><li><code>24</code> for 16,777,216 colors supported.</li></ul><p>Use this to determine what colors the terminal supports. Due to the nature of colors in terminals it is possible to either have false positives or false negatives. It depends on process information and the environment variables that may lie about what terminal is used. It is possible to pass in an <code>env</code> object to simulate the usage of a specific terminal. This can be useful to check how specific environment settings behave.</p><p>To enforce a specific color support, use one of the below environment settings.</p><ul><li>2 colors: <code>FORCE_COLOR = 0</code> (Disables colors)</li><li>16 colors: <code>FORCE_COLOR = 1</code></li><li>256 colors: <code>FORCE_COLOR = 2</code></li><li>16,777,216 colors: <code>FORCE_COLOR = 3</code></li></ul><p>Disabling color support is also possible by using the <code>NO_COLOR</code> and <code>NODE_DISABLE_COLORS</code> environment variables.</p><h3 id="writestreamgetwindowsize" tabindex="-1"><code>writeStream.getWindowSize()</code> <a class="header-anchor" href="#writestreamgetwindowsize" aria-label="Permalink to “writeStream.getWindowSize()”">​</a></h3><p><strong>Added in: v0.7.7</strong></p><ul><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number[]&gt;</a></li></ul><p><code>writeStream.getWindowSize()</code> returns the size of the TTY corresponding to this <code>WriteStream</code>. The array is of the type <code>[numColumns, numRows]</code> where <code>numColumns</code> and <code>numRows</code> represent the number of columns and rows in the corresponding TTY.</p><h3 id="writestreamhascolorscount-env" tabindex="-1"><code>writeStream.hasColors([count][, env])</code> <a class="header-anchor" href="#writestreamhascolorscount-env" aria-label="Permalink to “writeStream.hasColors([count][, env])”">​</a></h3><p><strong>Added in: v11.13.0, v10.16.0</strong></p><ul><li><code>count</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> The number of colors that are requested (minimum 2). <strong>Default:</strong> 16.</li><li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> An object containing the environment variables to check. This enables simulating the usage of a specific terminal. <strong>Default:</strong> <code>process.env</code>.</li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>Returns <code>true</code> if the <code>writeStream</code> supports at least as many colors as provided in <code>count</code>. Minimum support is 2 (black and white).</p><p>This has the same false positives and negatives as described in <a href="/nodejs/api/tty#writestreamgetcolordepthenv"><code>writeStream.getColorDepth()</code></a>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns true or false depending on if \`stdout\` supports at least 16 colors.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns true or false depending on if \`stdout\` supports at least 256 colors.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ TMUX: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns true.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { TMUX: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns false (the environment setting pretends to support 2 ** 8 colors).</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="writestreamistty" tabindex="-1"><code>writeStream.isTTY</code> <a class="header-anchor" href="#writestreamistty" aria-label="Permalink to “writeStream.isTTY”">​</a></h3><p><strong>Added in: v0.5.8</strong></p><p>A <code>boolean</code> that is always <code>true</code>.</p><h3 id="writestreammovecursordx-dy-callback" tabindex="-1"><code>writeStream.moveCursor(dx, dy[, callback])</code> <a class="header-anchor" href="#writestreammovecursordx-dy-callback" aria-label="Permalink to “writeStream.moveCursor(dx, dy[, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v12.7.0</td><td>The stream&#39;s write() callback and return value are exposed.</td></tr><tr><td>v0.7.7</td><td>Added in: v0.7.7</td></tr></tbody></table></div><ul><li><code>dx</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>dy</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> Invoked once the operation completes.</li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>false</code> if the stream wishes for the calling code to wait for the <code>&#39;drain&#39;</code> event to be emitted before continuing to write additional data; otherwise <code>true</code>.</li></ul><p><code>writeStream.moveCursor()</code> moves this <code>WriteStream</code>&#39;s cursor <em>relative</em> to its current position.</p><h3 id="writestreamrows" tabindex="-1"><code>writeStream.rows</code> <a class="header-anchor" href="#writestreamrows" aria-label="Permalink to “writeStream.rows”">​</a></h3><p><strong>Added in: v0.7.7</strong></p><p>A <code>number</code> specifying the number of rows the TTY currently has. This property is updated whenever the <code>&#39;resize&#39;</code> event is emitted.</p><h2 id="ttyisattyfd" tabindex="-1"><code>tty.isatty(fd)</code> <a class="header-anchor" href="#ttyisattyfd" aria-label="Permalink to “tty.isatty(fd)”">​</a></h2><p><strong>Added in: v0.5.8</strong></p><ul><li><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> A numeric file descriptor</li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>The <code>tty.isatty()</code> method returns <code>true</code> if the given <code>fd</code> is associated with a TTY and <code>false</code> if it is not, including whenever <code>fd</code> is not a non-negative integer.</p>`,88)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};