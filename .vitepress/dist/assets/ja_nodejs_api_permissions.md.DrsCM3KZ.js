import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js パーミッションAPI","description":"Node.js パーミッションAPIのドキュメントは、Node.jsアプリケーション内でのさまざまな操作の権限管理と制御方法を説明し、システムリソースへの安全で制御されたアクセスを保証します。","frontmatter":{"title":"Node.js パーミッションAPI","description":"Node.js パーミッションAPIのドキュメントは、Node.jsアプリケーション内でのさまざまな操作の権限管理と制御方法を説明し、システムリソースへの安全で制御されたアクセスを保証します。","head":[["meta",{"name":"og:title","content":"Node.js パーミッションAPI | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js パーミッションAPIのドキュメントは、Node.jsアプリケーション内でのさまざまな操作の権限管理と制御方法を説明し、システムリソースへの安全で制御されたアクセスを保証します。"}],["meta",{"name":"twitter:title","content":"Node.js パーミッションAPI | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js パーミッションAPIのドキュメントは、Node.jsアプリケーション内でのさまざまな操作の権限管理と制御方法を説明し、システムリソースへの安全で制御されたアクセスを保証します。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/permissions"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/permissions"}]]},"headers":[],"relativePath":"ja/nodejs/api/permissions.md","filePath":"ja/nodejs/api/permissions.md","lastUpdated":null}`),a={name:`ja/nodejs/api/permissions.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="permissions" tabindex="-1">許可 <a class="header-anchor" href="#permissions" aria-label="Permalink to “許可”">​</a></h1><p>許可を使用すると、Node.jsプロセスがアクセスできるシステムリソースや、プロセスがそれらのリソースに対して実行できるアクションを制御できます。</p><ul><li><a href="/ja/nodejs/api/permissions#process-based-permissions">プロセスベースの許可</a> は、Node.jsプロセスのリソースへのアクセスを制御します。リソースは完全に許可または拒否されるか、それに関連するアクションを制御できます。たとえば、ファイルシステムの読み取りは許可しながら、書き込みは拒否できます。この機能は、悪意のあるコードから保護するものではありません。Node.jsの<a href="https://github.com/nodejs/node/blob/main/SECURITY.md" target="_blank" rel="noreferrer">セキュリティポリシー</a>によると、Node.jsは実行を要求されたコードを信頼します。</li></ul><p>許可モデルは、「シートベルト」アプローチを実装しており、信頼されたコードが意図せずにファイルを変更したり、アクセスが明示的に許可されていないリソースを使用したりすることを防ぎます。悪意のあるコードが存在する場合、セキュリティを保証するものではありません。悪意のあるコードは、許可モデルをバイパスし、許可モデルによって課せられた制限なしに任意のコードを実行できます。</p><p>潜在的なセキュリティの脆弱性を見つけた場合は、<a href="https://github.com/nodejs/node/blob/main/SECURITY.md" target="_blank" rel="noreferrer">セキュリティポリシー</a>を参照してください。</p><h2 id="process-based-permissions" tabindex="-1">プロセスベースの許可 <a class="header-anchor" href="#process-based-permissions" aria-label="Permalink to “プロセスベースの許可”">​</a></h2><h3 id="permission-model" tabindex="-1">許可モデル <a class="header-anchor" href="#permission-model" aria-label="Permalink to “許可モデル”">​</a></h3><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定版]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 2</a> - 安定版。</p></div><p>Node.jsの許可モデルは、実行中に特定のリソースへのアクセスを制限するメカニズムです。APIは<a href="/ja/nodejs/api/cli#permission"><code>--permission</code></a>フラグの背後に存在し、有効にすると、利用可能なすべての許可へのアクセスを制限します。</p><p>利用可能な許可は、<a href="/ja/nodejs/api/cli#permission"><code>--permission</code></a>フラグによって文書化されています。</p><p><code>--permission</code>を指定してNode.jsを起動すると、<code>fs</code>モジュールを介したファイルシステムへのアクセス、プロセスの生成、<code>node:worker_threads</code>の使用、ネイティブアドオンの使用、WASIの使用、およびランタイムインスペクターの有効化が制限されます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permission</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Access</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> has</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restricted</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:internal/main/run_main_module:23:47</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  code:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_ACCESS_DENIED&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  permission:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;FileSystemRead&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resource:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/home/user/index.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>プロセスの生成とワーカースレッドの作成へのアクセスを許可するには、それぞれ<a href="/ja/nodejs/api/cli#allow-child-process"><code>--allow-child-process</code></a>および<a href="/ja/nodejs/api/cli#allow-worker"><code>--allow-worker</code></a>を使用します。</p><p>許可モデルを使用する場合にネイティブアドオンを許可するには、<a href="/ja/nodejs/api/cli#allow-addons"><code>--allow-addons</code></a>フラグを使用します。WASIの場合は、<a href="/ja/nodejs/api/cli#allow-wasi"><code>--allow-wasi</code></a>フラグを使用します。</p><h4 id="runtime-api" tabindex="-1">ランタイム API <a class="header-anchor" href="#runtime-api" aria-label="Permalink to “ランタイム API”">​</a></h4><p><a href="/ja/nodejs/api/cli#permission"><code>--permission</code></a> フラグを通じて Permission Model を有効にすると、新しいプロパティ <code>permission</code> が <code>process</code> オブジェクトに追加されます。このプロパティには、1 つの関数が含まれています。</p><h5 id="permissionhasscope-reference" tabindex="-1"><code>permission.has(scope[, reference])</code> <a class="header-anchor" href="#permissionhasscope-reference" aria-label="Permalink to “permission.has(scope[, reference])”">​</a></h5><p>ランタイムで権限をチェックするための API 呼び出し (<a href="/ja/nodejs/api/process#processpermissionhasscope-reference"><code>permission.has()</code></a>)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.permission.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.write&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.permission.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.write&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/home/rafaelgss/protected-folder&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.permission.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.read&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.permission.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.read&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/home/rafaelgss/protected-folder&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="file-system-permissions" tabindex="-1">ファイルシステム権限 <a class="header-anchor" href="#file-system-permissions" aria-label="Permalink to “ファイルシステム権限”">​</a></h4><p>Permission Model は、デフォルトで <code>node:fs</code> モジュールを通じてファイルシステムへのアクセスを制限します。<code>node:sqlite</code> モジュールなど、他の手段でユーザーがファイルシステムにアクセスできないことを保証するものではありません。</p><p>ファイルシステムへのアクセスを許可するには、<a href="/ja/nodejs/api/cli#allow-fs-read"><code>--allow-fs-read</code></a> および <a href="/ja/nodejs/api/cli#allow-fs-write"><code>--allow-fs-write</code></a> フラグを使用します。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permission</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-fs-read=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-fs-write=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>両方のフラグの有効な引数は次のとおりです。</p><ul><li><code>*</code> - すべての <code>FileSystemRead</code> または <code>FileSystemWrite</code> 操作をそれぞれ許可します。</li><li>カンマ (<code>,</code>) で区切られたパス。一致する <code>FileSystemRead</code> または <code>FileSystemWrite</code> 操作のみをそれぞれ許可します。</li></ul><p>例:</p><ul><li><code>--allow-fs-read=*</code> - すべての <code>FileSystemRead</code> 操作を許可します。</li><li><code>--allow-fs-write=*</code> - すべての <code>FileSystemWrite</code> 操作を許可します。</li><li><code>--allow-fs-write=/tmp/</code> - <code>/tmp/</code> フォルダへの <code>FileSystemWrite</code> アクセスを許可します。</li><li><code>--allow-fs-read=/tmp/ --allow-fs-read=/home/.gitignore</code> - <code>/tmp/</code> フォルダ <strong>および</strong> <code>/home/.gitignore</code> パスへの <code>FileSystemRead</code> アクセスを許可します。</li></ul><p>ワイルドカードもサポートされています。</p><ul><li><code>--allow-fs-read=/home/test*</code> は、ワイルドカードに一致するすべてのものへの読み取りアクセスを許可します。例: <code>/home/test/file1</code> または <code>/home/test2</code></li></ul><p>ワイルドカード文字 (<code>*</code>) を渡すと、後続の文字はすべて無視されます。たとえば、<code>/home/*.js</code> は <code>/home/*</code> と同様に機能します。</p><p>Permission Model が初期化されると、指定されたディレクトリが存在する場合、自動的にワイルドカード (*) が追加されます。たとえば、<code>/home/test/files</code> が存在する場合、<code>/home/test/files/*</code> として扱われます。ただし、ディレクトリが存在しない場合、ワイルドカードは追加されず、アクセスは <code>/home/test/files</code> に制限されます。まだ存在しないフォルダへのアクセスを許可する場合は、ワイルドカードを明示的に含めるようにしてください: <code>/my-path/folder-do-not-exist/*</code>.</p><h4 id="permission-model-constraints" tabindex="-1">パーミッションモデルの制約 <a class="header-anchor" href="#permission-model-constraints" aria-label="Permalink to “パーミッションモデルの制約”">​</a></h4><p>このシステムを使用する前に知っておくべき制約があります。</p><ul><li><p>モデルは子ノードプロセスまたはワーカースレッドに継承されません。</p></li><li><p>パーミッションモデルを使用する場合、以下の機能が制限されます。</p><ul><li>ネイティブモジュール</li><li>子プロセス</li><li>ワーカースレッド</li><li>インスペクタープロトコル</li><li>ファイルシステムアクセス</li><li>WASI</li></ul></li><li><p>パーミッションモデルは、Node.js環境がセットアップされた後に初期化されます。ただし、<code>--env-file</code>や<code>--openssl-config</code>などの特定のフラグは、環境初期化前にファイルを読み込むように設計されています。結果として、これらのフラグはパーミッションモデルの規則に従いません。 <code>v8.setFlagsFromString</code>を介してランタイムで設定できるV8フラグについても同様です。</p></li><li><p>OpenSSLエンジンは、パーミッションモデルが有効になっている場合、ランタイム時に要求できません。これは、組み込みのcrypto、https、およびtlsモジュールに影響します。</p></li><li><p>ランタイムロード可能な拡張機能は、パーミッションモデルが有効になっている場合、ロードできません。これは、sqliteモジュールに影響します。</p></li><li><p><code>node:fs</code>モジュールを介して既存のファイル記述子を使用すると、パーミッションモデルがバイパスされます。</p></li></ul><h4 id="limitations-and-known-issues" tabindex="-1">制限事項と既知の問題 <a class="header-anchor" href="#limitations-and-known-issues" aria-label="Permalink to “制限事項と既知の問題”">​</a></h4><ul><li>シンボリックリンクは、アクセスが許可されているパスのセット外の場所であっても、たどられます。相対シンボリックリンクを使用すると、任意のファイルやディレクトリにアクセスできる可能性があります。パーミッションモデルを有効にしてアプリケーションを起動する場合は、アクセスが許可されているパスに相対シンボリックリンクが含まれていないことを確認する必要があります。</li></ul>`,36)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};