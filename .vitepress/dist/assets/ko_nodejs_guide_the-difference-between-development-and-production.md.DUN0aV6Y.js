import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js의 개발 환경과 프로덕션 환경의 차이","description":"Node.js의 NODE_ENV의 역할과 개발 환경 및 프로덕션 환경에 대한 영향에 대해 이해합니다.","frontmatter":{"title":"Node.js의 개발 환경과 프로덕션 환경의 차이","description":"Node.js의 NODE_ENV의 역할과 개발 환경 및 프로덕션 환경에 대한 영향에 대해 이해합니다.","head":[["meta",{"name":"og:title","content":"Node.js의 개발 환경과 프로덕션 환경의 차이 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js의 NODE_ENV의 역할과 개발 환경 및 프로덕션 환경에 대한 영향에 대해 이해합니다."}],["meta",{"name":"twitter:title","content":"Node.js의 개발 환경과 프로덕션 환경의 차이 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js의 NODE_ENV의 역할과 개발 환경 및 프로덕션 환경에 대한 영향에 대해 이해합니다."}],["link",{"rel":"canonical","href":"https://idoc.dev/ko/nodejs/guide/the-difference-between-development-and-production"}],["meta",{"property":"og:url","content":"https://idoc.dev/ko/nodejs/guide/the-difference-between-development-and-production"}]]},"headers":[],"relativePath":"ko/nodejs/guide/the-difference-between-development-and-production.md","filePath":"ko/nodejs/guide/the-difference-between-development-and-production.md","lastUpdated":1749464498000}`),a={name:`ko/nodejs/guide/the-difference-between-development-and-production.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-개발-환경과-프로덕션-환경의-차이점" tabindex="-1">Node.js, 개발 환경과 프로덕션 환경의 차이점 <a class="header-anchor" href="#node-js-개발-환경과-프로덕션-환경의-차이점" aria-label="Permalink to “Node.js, 개발 환경과 프로덕션 환경의 차이점”">​</a></h1><p><code>Node.js에서는 개발 환경과 프로덕션 환경 간에 차이가 없습니다</code>. 즉, Node.js가 프로덕션 구성에서 작동하도록 적용해야 하는 특정 설정이 없습니다. 그러나 npm 레지스트리의 일부 라이브러리는 <code>NODE_ENV</code> 변수를 사용하는 것을 인식하고 기본적으로 <code>development</code> 설정으로 지정합니다. 항상 <code>NODE_ENV=production</code>을 설정하여 Node.js를 실행하십시오.</p><p>애플리케이션을 구성하는 일반적인 방법은 <a href="https://12factor.net" target="_blank" rel="noreferrer">12 요인 방법론</a>을 사용하는 것입니다.</p><h2 id="express에서의-node-env" tabindex="-1">Express에서의 NODE_ENV <a class="header-anchor" href="#express에서의-node-env" aria-label="Permalink to “Express에서의 NODE_ENV”">​</a></h2><p>매우 인기있는 <a href="https://expressjs.com" target="_blank" rel="noreferrer">express</a> 프레임워크에서 NODE_ENV를 production으로 설정하면 일반적으로 다음이 보장됩니다.</p><ul><li>로깅은 최소 필수 수준으로 유지됩니다.</li><li>성능을 최적화하기 위해 더 많은 캐싱 수준이 적용됩니다.</li></ul><p>이것은 일반적으로 다음 명령을 실행하여 수행됩니다.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">production</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>쉘에서 실행되지만 시스템 재시작시 설정이 유지되지 않으므로 쉘 구성 파일(예: Bash 쉘의 <code>.bash_profile</code>)에 넣는 것이 좋습니다.</p><p>애플리케이션 초기화 명령 앞에 환경 변수를 추가하여 적용할 수도 있습니다.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>예를 들어 Express 앱에서 이를 사용하여 환경별로 다른 오류 처리기를 설정할 수 있습니다.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ dumpExceptions: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, showStack: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>예를 들어 <a href="https://expressjs.com" target="_blank" rel="noreferrer">Express.js</a>에서 사용하는 템플릿 라이브러리인 <a href="https://pugjs.org" target="_blank" rel="noreferrer">Pug</a>는 <code>NODE_ENV</code>가 <code>production</code>으로 설정되지 않은 경우 디버그 모드에서 컴파일됩니다. Express 뷰는 개발 모드에서 모든 요청에서 컴파일되는 반면, 프로덕션 환경에서는 캐시됩니다. 더 많은 예가 있습니다.</p><p><code>이 환경 변수는 외부 라이브러리에서 널리 사용되는 규칙이지만 Node.js 자체에서는 사용되지 않습니다.</code></p><h2 id="node-env가-안티-패턴으로-간주되는-이유는-무엇입니까" tabindex="-1">NODE_ENV가 안티 패턴으로 간주되는 이유는 무엇입니까? <a class="header-anchor" href="#node-env가-안티-패턴으로-간주되는-이유는-무엇입니까" aria-label="Permalink to “NODE_ENV가 안티 패턴으로 간주되는 이유는 무엇입니까?”">​</a></h2><p>환경은 엔지니어가 소프트웨어 제품을 빌드, 테스트, 배포 및 관리할 수 있는 디지털 플랫폼 또는 시스템입니다. 일반적으로 애플리케이션이 실행되는 환경에는 다음 네 가지 단계 또는 유형이 있습니다.</p><ul><li>개발</li><li>스테이징</li><li>프로덕션</li><li>테스트</li></ul><p><code>NODE_ENV</code>의 근본적인 문제는 개발자가 소프트웨어 최적화 및 동작을 소프트웨어가 실행되는 환경과 결합하는 데서 비롯됩니다. 그 결과 다음과 같은 코드가 생성됩니다.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;staging&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;testing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>이것이 무해해 보일 수 있지만 프로덕션 및 스테이징 환경을 다르게 만들어 신뢰할 수있는 테스트를 불가능하게 만듭니다. 예를 들어 <code>NODE_ENV</code>가 <code>development</code>로 설정되면 테스트와 제품 기능이 통과될 수 있지만 <code>NODE_ENV</code>를 <code>production</code>으로 설정하면 실패할 수 있습니다. 따라서 <code>NODE_ENV</code>를 <code>production</code> 이외의 다른 것으로 설정하는 것은 안티 패턴으로 간주됩니다.</p>`,21)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};