import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Suporte ao TypeScript no Node.js","description":"Saiba como usar TypeScript com Node.js, incluindo instalação, configuração e melhores práticas para integrar TypeScript em seus projetos Node.js.","frontmatter":{"title":"Suporte ao TypeScript no Node.js","description":"Saiba como usar TypeScript com Node.js, incluindo instalação, configuração e melhores práticas para integrar TypeScript em seus projetos Node.js.","head":[["meta",{"name":"og:title","content":"Suporte ao TypeScript no Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Saiba como usar TypeScript com Node.js, incluindo instalação, configuração e melhores práticas para integrar TypeScript em seus projetos Node.js."}],["meta",{"name":"twitter:title","content":"Suporte ao TypeScript no Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Saiba como usar TypeScript com Node.js, incluindo instalação, configuração e melhores práticas para integrar TypeScript em seus projetos Node.js."}],["link",{"rel":"canonical","href":"https://idoc.dev/pt/nodejs/api/typescript"}],["meta",{"property":"og:url","content":"https://idoc.dev/pt/nodejs/api/typescript"}]]},"headers":[],"relativePath":"pt/nodejs/api/typescript.md","filePath":"pt/nodejs/api/typescript.md","lastUpdated":1749464498000}`),a={name:`pt/nodejs/api/typescript.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="modules-typescript" tabindex="-1">Módulos: TypeScript <a class="header-anchor" href="#modules-typescript" aria-label="Permalink to “Módulos: TypeScript”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[Histórico]</p><table tabindex="0"><thead><tr><th>Versão</th><th>Mudanças</th></tr></thead><tbody><tr><td>v22.7.0</td><td>Adicionada a flag <code>--experimental-transform-types</code>.</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[Estável: 1 - Experimental]</p><p><a href="/pt/nodejs/api/documentation#stability-index">Estável: 1</a> <a href="/pt/nodejs/api/documentation#stability-index">Estabilidade: 1</a>.1 - Desenvolvimento ativo</p></div><h2 id="enabling" tabindex="-1">Habilitando <a class="header-anchor" href="#enabling" aria-label="Permalink to “Habilitando”">​</a></h2><p>Existem duas maneiras de habilitar o suporte em tempo de execução para TypeScript no Node.js:</p><h2 id="full-typescript-support" tabindex="-1">Suporte completo ao TypeScript <a class="header-anchor" href="#full-typescript-support" aria-label="Permalink to “Suporte completo ao TypeScript”">​</a></h2><p>Para usar o TypeScript com suporte completo a todos os recursos do TypeScript, incluindo <code>tsconfig.json</code>, você pode usar um pacote de terceiros. Estas instruções usam <a href="https://tsx.is/" target="_blank" rel="noreferrer"><code>tsx</code></a> como um exemplo, mas existem muitas outras bibliotecas similares disponíveis.</p><h2 id="type-stripping" tabindex="-1">Remoção de tipos <a class="header-anchor" href="#type-stripping" aria-label="Permalink to “Remoção de tipos”">​</a></h2><p><strong>Adicionado em: v22.6.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Estável: 1 - Experimental]</p><p><a href="/pt/nodejs/api/documentation#stability-index">Estável: 1</a> <a href="/pt/nodejs/api/documentation#stability-index">Estabilidade: 1</a>.1 - Desenvolvimento ativo</p></div><p>A flag <a href="/pt/nodejs/api/cli#experimental-strip-types"><code>--experimental-strip-types</code></a> permite que o Node.js execute arquivos TypeScript. Por padrão, o Node.js executará apenas arquivos que não contenham recursos do TypeScript que exijam transformação, como enums ou namespaces. O Node.js substituirá anotações de tipo inline por espaços em branco, e nenhuma verificação de tipo é realizada. Para habilitar a transformação de tais recursos, use a flag <a href="/pt/nodejs/api/cli#experimental-transform-types"><code>--experimental-transform-types</code></a>. Recursos do TypeScript que dependem de configurações dentro de <code>tsconfig.json</code>, como paths ou converter sintaxe JavaScript mais recente para padrões mais antigos, não são intencionalmente suportados. Para obter suporte completo ao TypeScript, veja <a href="/pt/nodejs/api/typescript#full-typescript-support">Suporte completo ao TypeScript</a>.</p><p>O recurso de remoção de tipo foi projetado para ser leve. Ao intencionalmente não suportar sintaxes que exigem geração de código JavaScript e ao substituir tipos inline por espaços em branco, o Node.js pode executar código TypeScript sem a necessidade de source maps.</p><p>A remoção de tipo funciona com a maioria das versões do TypeScript, mas recomendamos a versão 5.7 ou mais recente com as seguintes configurações de <code>tsconfig.json</code>:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esnext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nodenext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;allowImportingTsExtensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;rewriteRelativeImportExtensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;verbatimModuleSyntax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="determining-module-system" tabindex="-1">Determinando o sistema de módulos <a class="header-anchor" href="#determining-module-system" aria-label="Permalink to “Determinando o sistema de módulos”">​</a></h3><p>O Node.js suporta tanto a sintaxe <a href="/pt/nodejs/api/modules">CommonJS</a> quanto <a href="/pt/nodejs/api/esm">ES Modules</a> em arquivos TypeScript. O Node.js não converterá de um sistema de módulos para outro; se você quiser que seu código seja executado como um ES module, você deve usar a sintaxe <code>import</code> e <code>export</code>, e se você quiser que seu código seja executado como CommonJS, você deve usar <code>require</code> e <code>module.exports</code>.</p><ul><li>Arquivos <code>.ts</code> terão seu sistema de módulos determinado <a href="/pt/nodejs/api/packages#determining-module-system">da mesma forma que arquivos <code>.js</code>.</a> Para usar a sintaxe <code>import</code> e <code>export</code>, adicione <code>&quot;type&quot;: &quot;module&quot;</code> ao <code>package.json</code> pai mais próximo.</li><li>Arquivos <code>.mts</code> sempre serão executados como ES modules, similar a arquivos <code>.mjs</code>.</li><li>Arquivos <code>.cts</code> sempre serão executados como CommonJS modules, similar a arquivos <code>.cjs</code>.</li><li>Arquivos <code>.tsx</code> não são suportados.</li></ul><p>Assim como em arquivos JavaScript, <a href="/pt/nodejs/api/esm#mandatory-file-extensions">extensões de arquivo são obrigatórias</a> em declarações <code>import</code> e expressões <code>import()</code>: <code>import &#39;./file.ts&#39;</code>, não <code>import &#39;./file&#39;</code>. Por causa da compatibilidade retroativa, extensões de arquivo também são obrigatórias em chamadas <code>require()</code>: <code>require(&#39;./file.ts&#39;)</code>, não <code>require(&#39;./file&#39;)</code>, similar a como a extensão <code>.cjs</code> é obrigatória em chamadas <code>require</code> em arquivos CommonJS.</p><p>A opção <code>tsconfig.json</code> <code>allowImportingTsExtensions</code> permitirá ao compilador TypeScript <code>tsc</code> verificar os tipos de arquivos com especificadores <code>import</code> que incluem a extensão <code>.ts</code>.</p><h3 id="typescript-features" tabindex="-1">Recursos do TypeScript <a class="header-anchor" href="#typescript-features" aria-label="Permalink to “Recursos do TypeScript”">​</a></h3><p>Como o Node.js está apenas removendo os tipos inline, quaisquer recursos do TypeScript que envolvam <em>substituir</em> a sintaxe do TypeScript por uma nova sintaxe JavaScript resultarão em erro, a menos que a flag <a href="/pt/nodejs/api/cli#experimental-transform-types"><code>--experimental-transform-types</code></a> seja passada.</p><p>Os recursos mais proeminentes que exigem transformação são:</p><ul><li><code>Enum</code></li><li><code>namespaces</code></li><li><code>legacy module</code></li><li>parameter properties</li></ul><p>Como os Decorators são atualmente uma <a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noreferrer">proposta TC39 Stage 3</a> e em breve serão suportados pelo engine JavaScript, eles não são transformados e resultarão em um erro de parser. Esta é uma limitação temporária e será resolvida no futuro.</p><p>Além disso, o Node.js não lê arquivos <code>tsconfig.json</code> e não suporta recursos que dependem de configurações dentro de <code>tsconfig.json</code>, como paths ou converter sintaxe JavaScript mais recente em padrões mais antigos.</p><h3 id="importing-types-without-type-keyword" tabindex="-1">Importando tipos sem a palavra-chave <code>type</code> <a class="header-anchor" href="#importing-types-without-type-keyword" aria-label="Permalink to “Importando tipos sem a palavra-chave type”">​</a></h3><p>Devido à natureza da remoção de tipos, a palavra-chave <code>type</code> é necessária para remover corretamente as importações de tipos. Sem a palavra-chave <code>type</code>, o Node.js tratará a importação como uma importação de valor, o que resultará em um erro de tempo de execução. A opção <code>tsconfig</code> <a href="https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax" target="_blank" rel="noreferrer"><code>verbatimModuleSyntax</code></a> pode ser usada para corresponder a esse comportamento.</p><p>Este exemplo funcionará corretamente:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Type1, Type2 } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fn, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FnParams } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./fn.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Isso resultará em um erro de tempo de execução:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Type1, Type2 } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fn, FnParams } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./fn.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="non-file-forms-of-input" tabindex="-1">Formas de entrada que não são arquivos <a class="header-anchor" href="#non-file-forms-of-input" aria-label="Permalink to “Formas de entrada que não são arquivos”">​</a></h3><p>A remoção de tipos pode ser ativada para <code>--eval</code>. O sistema de módulos será determinado por <code>--input-type</code>, como acontece com o JavaScript.</p><p>A sintaxe TypeScript não é suportada no REPL, na entrada STDIN, em <code>--print</code>, <code>--check</code> e <code>inspect</code>.</p><h3 id="source-maps" tabindex="-1">Mapas de origem <a class="header-anchor" href="#source-maps" aria-label="Permalink to “Mapas de origem”">​</a></h3><p>Como os tipos inline são substituídos por espaços em branco, os mapas de origem são desnecessários para números de linha corretos em rastreamentos de pilha; e o Node.js não os gera. Quando <a href="/pt/nodejs/api/cli#experimental-transform-types"><code>--experimental-transform-types</code></a> está habilitado, os mapas de origem são habilitados por padrão.</p><h3 id="type-stripping-in-dependencies" tabindex="-1">Remoção de tipos em dependências <a class="header-anchor" href="#type-stripping-in-dependencies" aria-label="Permalink to “Remoção de tipos em dependências”">​</a></h3><p>Para desencorajar os autores de pacotes de publicar pacotes escritos em TypeScript, o Node.js, por padrão, se recusará a lidar com arquivos TypeScript dentro de pastas sob um caminho <code>node_modules</code>.</p><h3 id="paths-aliases" tabindex="-1">Aliases de caminhos <a class="header-anchor" href="#paths-aliases" aria-label="Permalink to “Aliases de caminhos”">​</a></h3><p><a href="https://www.typescriptlang.org/tsconfig/#paths" target="_blank" rel="noreferrer"><code>tsconfig</code> &quot;paths&quot;</a> não serão transformados e, portanto, produzirão um erro. O recurso mais próximo disponível são as <a href="/pt/nodejs/api/packages#subpath-imports">importações de subpath</a> com a limitação de que elas precisam começar com <code>#</code>.</p>`,40)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};