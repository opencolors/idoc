import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js с WebAssembly","description":"WebAssembly — высокопроизводительный язык ассемблера, который можно компилировать из различных языков, включая C/C++, Rust и AssemblyScript. Node.js предоставляет необходимые API через глобальный объект WebAssembly для взаимодействия с WebAssembly.","frontmatter":{"title":"Node.js с WebAssembly","description":"WebAssembly — высокопроизводительный язык ассемблера, который можно компилировать из различных языков, включая C/C++, Rust и AssemblyScript. Node.js предоставляет необходимые API через глобальный объект WebAssembly для взаимодействия с WebAssembly.","head":[["meta",{"name":"og:title","content":"Node.js с WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"WebAssembly — высокопроизводительный язык ассемблера, который можно компилировать из различных языков, включая C/C++, Rust и AssemblyScript. Node.js предоставляет необходимые API через глобальный объект WebAssembly для взаимодействия с WebAssembly."}],["meta",{"name":"twitter:title","content":"Node.js с WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"WebAssembly — высокопроизводительный язык ассемблера, который можно компилировать из различных языков, включая C/C++, Rust и AssemblyScript. Node.js предоставляет необходимые API через глобальный объект WebAssembly для взаимодействия с WebAssembly."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/guide/nodejs-with-webassembly"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/guide/nodejs-with-webassembly"}]]},"headers":[],"relativePath":"ru/nodejs/guide/nodejs-with-webassembly.md","filePath":"ru/nodejs/guide/nodejs-with-webassembly.md","lastUpdated":1749464498000}`),a={name:`ru/nodejs/guide/nodejs-with-webassembly.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-и-webassembly" tabindex="-1">Node.js и WebAssembly <a class="header-anchor" href="#node-js-и-webassembly" aria-label="Permalink to “Node.js и WebAssembly”">​</a></h1><p><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> - это высокопроизводительный ассемблероподобный язык, который может быть скомпилирован из различных языков, включая C/C++, Rust и AssemblyScript. В настоящее время он поддерживается Chrome, Firefox, Safari, Edge и Node.js!</p><p>Спецификация WebAssembly детализирует два формата файлов: двоичный формат, называемый модулем WebAssembly с расширением <code>.wasm</code>, и соответствующее текстовое представление, называемое текстовым форматом WebAssembly с расширением <code>.wat</code>.</p><h2 id="ключевые-концепции" tabindex="-1">Ключевые концепции <a class="header-anchor" href="#ключевые-концепции" aria-label="Permalink to “Ключевые концепции”">​</a></h2><ul><li>Модуль - скомпилированный двоичный файл WebAssembly, т.е. файл <code>.wasm</code>.</li><li>Память - ArrayBuffer с изменяемым размером.</li><li>Таблица - типизированный массив ссылок с изменяемым размером, не хранящихся в Памяти.</li><li>Экземпляр - экземпляр Модуля с его Памятью, Таблицей и переменными.</li></ul><p>Чтобы использовать WebAssembly, вам нужен двоичный файл <code>.wasm</code> и набор API для взаимодействия с WebAssembly. Node.js предоставляет необходимые API через глобальный объект <code>WebAssembly</code>.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebAssembly)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Object [WebAssembly] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  compile: [Function: compile],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  validate: [Function: validate],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  instantiate: [Function: instantiate]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="генерация-модулеи-webassembly" tabindex="-1">Генерация модулей WebAssembly <a class="header-anchor" href="#генерация-модулеи-webassembly" aria-label="Permalink to “Генерация модулей WebAssembly”">​</a></h2><p>Существует несколько методов для генерации двоичных файлов WebAssembly, включая:</p><ul><li>Написание WebAssembly (<code>.wat</code>) вручную и преобразование в двоичный формат с использованием таких инструментов, как <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a>.</li><li>Использование <a href="https://github.com/emscripten-core/emscripten" target="_blank" rel="noreferrer">emscripten</a> с приложением C/C++</li><li>Использование <a href="https://github.com/rustwasm/wasm-pack" target="_blank" rel="noreferrer">wasm-pack</a> с приложением Rust</li><li>Использование <a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noreferrer">AssemblyScript</a>, если вы предпочитаете опыт, подобный TypeScript</li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong>Некоторые из этих инструментов генерируют не только двоичный файл, но и JavaScript &quot;glue&quot; код и соответствующие HTML-файлы для запуска в браузере.</strong></p></div><h2 id="как-это-использовать" tabindex="-1">Как это использовать <a class="header-anchor" href="#как-это-использовать" aria-label="Permalink to “Как это использовать”">​</a></h2><p>Как только у вас есть модуль WebAssembly, вы можете использовать объект <code>WebAssembly</code> Node.js для его создания экземпляра.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/add.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasmBuffer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wasmModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Экспортированная функция находится в instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmModule.instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Выводит: 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="взаимодеиствие-с-ос" tabindex="-1">Взаимодействие с ОС <a class="header-anchor" href="#взаимодеиствие-с-ос" aria-label="Permalink to “Взаимодействие с ОС”">​</a></h2><p>Модули WebAssembly не могут напрямую получать доступ к функциям ОС самостоятельно. Для доступа к этим функциям можно использовать сторонний инструмент <a href="https://github.com/bytecodealliance/wasmtime" target="_blank" rel="noreferrer">Wasmtime</a>. <code>Wasmtime</code> использует API <a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a> для доступа к функциям ОС.</p><h2 id="ресурсы" tabindex="-1">Ресурсы <a class="header-anchor" href="#ресурсы" aria-label="Permalink to “Ресурсы”">​</a></h2><ul><li><a href="https://webassembly.org/" target="_blank" rel="noreferrer">Общая информация о WebAssembly</a></li><li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noreferrer">Документация MDN</a></li><li><a href="https://webassembly.github.io/spec/core/text/index.html" target="_blank" rel="noreferrer">Написание WebAssembly вручную</a></li></ul>`,18)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};