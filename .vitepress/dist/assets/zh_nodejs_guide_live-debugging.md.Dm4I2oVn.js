import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 实时调试","description":"学习如何实时调试 Node.js 进程，以识别和解决应用逻辑和正确性问题。","frontmatter":{"title":"Node.js 实时调试","description":"学习如何实时调试 Node.js 进程，以识别和解决应用逻辑和正确性问题。","head":[["meta",{"name":"og:title","content":"Node.js 实时调试 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"学习如何实时调试 Node.js 进程，以识别和解决应用逻辑和正确性问题。"}],["meta",{"name":"twitter:title","content":"Node.js 实时调试 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"学习如何实时调试 Node.js 进程，以识别和解决应用逻辑和正确性问题。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/guide/live-debugging"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/guide/live-debugging"}]]},"headers":[],"relativePath":"zh/nodejs/guide/live-debugging.md","filePath":"zh/nodejs/guide/live-debugging.md","lastUpdated":null}`),a={name:`zh/nodejs/guide/live-debugging.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="实时调试" tabindex="-1">实时调试 <a class="header-anchor" href="#实时调试" aria-label="Permalink to “实时调试”">​</a></h1><p>本文档将介绍如何实时调试 Node.js 进程。</p><h2 id="我的应用程序行为异常" tabindex="-1">我的应用程序行为异常 <a class="header-anchor" href="#我的应用程序行为异常" aria-label="Permalink to “我的应用程序行为异常”">​</a></h2><h3 id="症状" tabindex="-1">症状 <a class="header-anchor" href="#症状" aria-label="Permalink to “症状”">​</a></h3><p>用户可能会观察到应用程序对于某些输入没有提供预期的输出，例如，一个 HTTP 服务器返回的 JSON 响应中某些字段为空。在这个过程中可能会出现各种问题，但在这个用例中，我们主要关注应用程序的逻辑及其正确性。</p><h3 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to “调试”">​</a></h3><p>在这种情况下，用户想要了解我们的应用程序对于某个触发器（例如传入的 HTTP 请求）执行的代码路径。他们可能还想逐步执行代码并控制执行过程，以及检查变量在内存中保存的值。为此，我们可以在启动应用程序时使用 <code>--inspect</code> 标志。调试文档可以在<a href="/zh/nodejs/guide/debugging-nodejs">这里</a>找到。</p>`,7)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};