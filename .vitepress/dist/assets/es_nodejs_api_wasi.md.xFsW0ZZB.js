import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Documentación de WASI de Node.js","description":"Explora la documentación de Node.js para la Interfaz de Sistema WebAssembly (WASI), detallando cómo usar WASI en entornos Node.js, incluyendo APIs para operaciones de sistema de archivos, variables de entorno y más.","frontmatter":{"title":"Documentación de WASI de Node.js","description":"Explora la documentación de Node.js para la Interfaz de Sistema WebAssembly (WASI), detallando cómo usar WASI en entornos Node.js, incluyendo APIs para operaciones de sistema de archivos, variables de entorno y más.","head":[["meta",{"name":"og:title","content":"Documentación de WASI de Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Explora la documentación de Node.js para la Interfaz de Sistema WebAssembly (WASI), detallando cómo usar WASI en entornos Node.js, incluyendo APIs para operaciones de sistema de archivos, variables de entorno y más."}],["meta",{"name":"twitter:title","content":"Documentación de WASI de Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Explora la documentación de Node.js para la Interfaz de Sistema WebAssembly (WASI), detallando cómo usar WASI en entornos Node.js, incluyendo APIs para operaciones de sistema de archivos, variables de entorno y más."}],["link",{"rel":"canonical","href":"https://idoc.dev/es/nodejs/api/wasi"}],["meta",{"property":"og:url","content":"https://idoc.dev/es/nodejs/api/wasi"}]]},"headers":[],"relativePath":"es/nodejs/api/wasi.md","filePath":"es/nodejs/api/wasi.md","lastUpdated":1749464498000}`),a={name:`es/nodejs/api/wasi.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="webassembly-system-interface-wasi" tabindex="-1">Interfaz del sistema WebAssembly (WASI) <a class="header-anchor" href="#webassembly-system-interface-wasi" aria-label="Permalink to “Interfaz del sistema WebAssembly (WASI)”">​</a></h1><div class="warning custom-block"><p class="custom-block-title">[Estable: 1 - Experimental]</p><p><a href="/es/nodejs/api/documentation#stability-index">Estable: 1</a> <a href="/es/nodejs/api/documentation#stability-index">Estabilidad: 1</a> - Experimental</p></div><p><strong>El módulo <code>node:wasi</code> no proporciona actualmente las propiedades de seguridad integrales del sistema de archivos proporcionadas por algunos tiempos de ejecución de WASI. El soporte completo para el aislamiento seguro del sistema de archivos puede o no implementarse en el futuro. Mientras tanto, no confíe en él para ejecutar código que no sea de confianza.</strong></p><p><strong>Código fuente:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/wasi.js" target="_blank" rel="noreferrer">lib/wasi.js</a></p><p>La API WASI proporciona una implementación de la especificación de la <a href="https://wasi.dev/" target="_blank" rel="noreferrer">Interfaz del sistema WebAssembly</a>. WASI brinda a las aplicaciones WebAssembly acceso al sistema operativo subyacente a través de una colección de funciones similares a POSIX.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-17" id="tab-18" checked><label data-title="ESM" for="tab-18">ESM</label><input type="radio" name="group-17" id="tab-19"><label data-title="CJS" for="tab-19">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFile } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { WASI } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:wasi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { argv, env } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preview1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args: argv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preopens: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/some/real/path/that/wasm/can/access&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./demo.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasm, wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImportObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:wasi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preview1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args: argv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preopens: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/some/real/path/that/wasm/can/access&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;demo.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasm, wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImportObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></div></div><p>Para ejecutar el ejemplo anterior, cree un nuevo archivo de formato de texto WebAssembly llamado <code>demo.wat</code>:</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>(module</span></span>
<span class="line"><span>    ;; Importa la función fd_write de WASI requerida que escribirá los vectores io dados en stdout</span></span>
<span class="line"><span>    ;; La firma de la función para fd_write es:</span></span>
<span class="line"><span>    ;; (Descriptor de archivo, *iovs, iovs_len, nwritten) -&gt; Devuelve el número de bytes escritos</span></span>
<span class="line"><span>    (import &quot;wasi_snapshot_preview1&quot; &quot;fd_write&quot; (func $fd_write (param i32 i32 i32 i32) (result i32)))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    (memory 1)</span></span>
<span class="line"><span>    (export &quot;memory&quot; (memory 0))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ;; Escribe &#39;hola mundo\\n&#39; en la memoria con un desplazamiento de 8 bytes</span></span>
<span class="line"><span>    ;; Tenga en cuenta la nueva línea final que se requiere para que aparezca el texto</span></span>
<span class="line"><span>    (data (i32.const 8) &quot;hola mundo\\n&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    (func $main (export &quot;_start&quot;)</span></span>
<span class="line"><span>        ;; Creando un nuevo vector io dentro de la memoria lineal</span></span>
<span class="line"><span>        (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - Este es un puntero al inicio de la cadena &#39;hola mundo\\n&#39;</span></span>
<span class="line"><span>        (i32.store (i32.const 4) (i32.const 12))  ;; iov.iov_len - La longitud de la cadena &#39;hola mundo\\n&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        (call $fd_write</span></span>
<span class="line"><span>            (i32.const 1) ;; file_descriptor - 1 para stdout</span></span>
<span class="line"><span>            (i32.const 0) ;; *iovs - El puntero a la matriz iov, que se almacena en la ubicación de memoria 0</span></span>
<span class="line"><span>            (i32.const 1) ;; iovs_len - Estamos imprimiendo 1 cadena almacenada en un iov - así que uno.</span></span>
<span class="line"><span>            (i32.const 20) ;; nwritten - Un lugar en la memoria para almacenar el número de bytes escritos</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>        drop ;; Descarta el número de bytes escritos de la parte superior de la pila</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>Utilice <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a> para compilar <code>.wat</code> a <code>.wasm</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wat2wasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo.wat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="security" tabindex="-1">Seguridad <a class="header-anchor" href="#security" aria-label="Permalink to “Seguridad”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[Historial]</p><table tabindex="0"><thead><tr><th>Versión</th><th>Cambios</th></tr></thead><tbody><tr><td>v21.2.0, v20.11.0</td><td>Aclarar las propiedades de seguridad de WASI.</td></tr><tr><td>v21.2.0, v20.11.0</td><td>Agregado en: v21.2.0, v20.11.0</td></tr></tbody></table></div><p>WASI proporciona un modelo basado en capacidades a través del cual las aplicaciones reciben sus propias capacidades personalizadas <code>env</code>, <code>preopens</code>, <code>stdin</code>, <code>stdout</code>, <code>stderr</code> y <code>exit</code>.</p><p><strong>El modelo de amenazas actual de Node.js no proporciona un sandboxing seguro como el que está presente en algunos runtimes de WASI.</strong></p><p>Si bien las características de capacidad son compatibles, no forman un modelo de seguridad en Node.js. Por ejemplo, el sandboxing del sistema de archivos se puede eludir con varias técnicas. El proyecto está explorando si estas garantías de seguridad podrían agregarse en el futuro.</p><h2 id="class-wasi" tabindex="-1">Clase: <code>WASI</code> <a class="header-anchor" href="#class-wasi" aria-label="Permalink to “Clase: WASI”">​</a></h2><p><strong>Agregado en: v13.3.0, v12.16.0</strong></p><p>La clase <code>WASI</code> proporciona la API de llamada al sistema WASI y métodos de conveniencia adicionales para trabajar con aplicaciones basadas en WASI. Cada instancia de <code>WASI</code> representa un entorno distinto.</p><h3 id="new-wasioptions" tabindex="-1"><code>new WASI([options])</code> <a class="header-anchor" href="#new-wasioptions" aria-label="Permalink to “new WASI([options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[Historial]</p><table tabindex="0"><thead><tr><th>Versión</th><th>Cambios</th></tr></thead><tbody><tr><td>v20.1.0</td><td>El valor predeterminado de returnOnExit cambió a true.</td></tr><tr><td>v20.0.0</td><td>La opción de versión ahora es obligatoria y no tiene un valor predeterminado.</td></tr><tr><td>v19.8.0</td><td>Se agregó el campo de versión a las opciones.</td></tr><tr><td>v13.3.0, v12.16.0</td><td>Agregado en: v13.3.0, v12.16.0</td></tr></tbody></table></div><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>args</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">&lt;Array&gt;</a> Un array de strings que la aplicación WebAssembly verá como argumentos de línea de comandos. El primer argumento es la ruta virtual al comando WASI en sí. <strong>Predeterminado:</strong> <code>[]</code>.</li><li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> Un objeto similar a <code>process.env</code> que la aplicación WebAssembly verá como su entorno. <strong>Predeterminado:</strong> <code>{}</code>.</li><li><code>preopens</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> Este objeto representa la estructura de directorios local de la aplicación WebAssembly. Las claves string de <code>preopens</code> se tratan como directorios dentro del sistema de archivos. Los valores correspondientes en <code>preopens</code> son las rutas reales a esos directorios en la máquina host.</li><li><code>returnOnExit</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> De forma predeterminada, cuando las aplicaciones WASI llaman a <code>__wasi_proc_exit()</code>, <code>wasi.start()</code> regresará con el código de salida especificado en lugar de terminar el proceso. Configurar esta opción en <code>false</code> hará que el proceso de Node.js salga con el código de salida especificado en su lugar. <strong>Predeterminado:</strong> <code>true</code>.</li><li><code>stdin</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> El descriptor de archivo utilizado como entrada estándar en la aplicación WebAssembly. <strong>Predeterminado:</strong> <code>0</code>.</li><li><code>stdout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> El descriptor de archivo utilizado como salida estándar en la aplicación WebAssembly. <strong>Predeterminado:</strong> <code>1</code>.</li><li><code>stderr</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> El descriptor de archivo utilizado como error estándar en la aplicación WebAssembly. <strong>Predeterminado:</strong> <code>2</code>.</li><li><code>version</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> La versión de WASI solicitada. Actualmente, las únicas versiones admitidas son <code>unstable</code> y <code>preview1</code>. Esta opción es obligatoria.</li></ul></li></ul><h3 id="wasigetimportobject" tabindex="-1"><code>wasi.getImportObject()</code> <a class="header-anchor" href="#wasigetimportobject" aria-label="Permalink to “wasi.getImportObject()”">​</a></h3><p><strong>Añadido en: v19.8.0</strong></p><p>Devuelve un objeto de importación que se puede pasar a <code>WebAssembly.instantiate()</code> si no se necesitan otras importaciones WASM más allá de las proporcionadas por WASI.</p><p>Si la versión <code>unstable</code> se pasó al constructor, devolverá:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi_unstable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi.wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Si la versión <code>preview1</code> se pasó al constructor o no se especificó ninguna versión, devolverá:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi_snapshot_preview1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi.wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="wasistartinstance" tabindex="-1"><code>wasi.start(instance)</code> <a class="header-anchor" href="#wasistartinstance" aria-label="Permalink to “wasi.start(instance)”">​</a></h3><p><strong>Añadido en: v13.3.0, v12.16.0</strong></p><ul><li><code>instance</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer">&lt;WebAssembly.Instance&gt;</a></li></ul><p>Intenta comenzar la ejecución de <code>instance</code> como un comando WASI invocando su exportación <code>_start()</code>. Si <code>instance</code> no contiene una exportación <code>_start()</code>, o si <code>instance</code> contiene una exportación <code>_initialize()</code>, entonces se lanza una excepción.</p><p><code>start()</code> requiere que <code>instance</code> exporte una <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory" target="_blank" rel="noreferrer"><code>WebAssembly.Memory</code></a> llamada <code>memory</code>. Si <code>instance</code> no tiene una exportación <code>memory</code>, se lanza una excepción.</p><p>Si se llama a <code>start()</code> más de una vez, se lanza una excepción.</p><h3 id="wasiinitializeinstance" tabindex="-1"><code>wasi.initialize(instance)</code> <a class="header-anchor" href="#wasiinitializeinstance" aria-label="Permalink to “wasi.initialize(instance)”">​</a></h3><p><strong>Añadido en: v14.6.0, v12.19.0</strong></p><ul><li><code>instance</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer">&lt;WebAssembly.Instance&gt;</a></li></ul><p>Intenta inicializar <code>instance</code> como un reactor WASI invocando su exportación <code>_initialize()</code>, si está presente. Si <code>instance</code> contiene una exportación <code>_start()</code>, entonces se lanza una excepción.</p><p><code>initialize()</code> requiere que <code>instance</code> exporte una <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory" target="_blank" rel="noreferrer"><code>WebAssembly.Memory</code></a> llamada <code>memory</code>. Si <code>instance</code> no tiene una exportación <code>memory</code>, se lanza una excepción.</p><p>Si se llama a <code>initialize()</code> más de una vez, se lanza una excepción.</p><h3 id="wasiwasiimport" tabindex="-1"><code>wasi.wasiImport</code> <a class="header-anchor" href="#wasiwasiimport" aria-label="Permalink to “wasi.wasiImport”">​</a></h3><p><strong>Añadido en: v13.3.0, v12.16.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><code>wasiImport</code> es un objeto que implementa la API de llamada al sistema WASI. Este objeto debe pasarse como la importación <code>wasi_snapshot_preview1</code> durante la instanciación de un <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer"><code>WebAssembly.Instance</code></a>.</p>`,44)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};