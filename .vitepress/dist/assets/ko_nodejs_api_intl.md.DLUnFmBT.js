import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 문서 - 국제화","description":"이 Node.js 문서 섹션에서는 국제화(Intl) 모듈을 다룹니다. 이 모듈은 정렬, 숫자 형식, 날짜 및 시간 형식 등 다양한 국제화 및 현지화 기능에 대한 접근을 제공합니다.","frontmatter":{"title":"Node.js 문서 - 국제화","description":"이 Node.js 문서 섹션에서는 국제화(Intl) 모듈을 다룹니다. 이 모듈은 정렬, 숫자 형식, 날짜 및 시간 형식 등 다양한 국제화 및 현지화 기능에 대한 접근을 제공합니다.","head":[["meta",{"name":"og:title","content":"Node.js 문서 - 국제화 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"이 Node.js 문서 섹션에서는 국제화(Intl) 모듈을 다룹니다. 이 모듈은 정렬, 숫자 형식, 날짜 및 시간 형식 등 다양한 국제화 및 현지화 기능에 대한 접근을 제공합니다."}],["meta",{"name":"twitter:title","content":"Node.js 문서 - 국제화 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"이 Node.js 문서 섹션에서는 국제화(Intl) 모듈을 다룹니다. 이 모듈은 정렬, 숫자 형식, 날짜 및 시간 형식 등 다양한 국제화 및 현지화 기능에 대한 접근을 제공합니다."}],["link",{"rel":"canonical","href":"https://idoc.dev/ko/nodejs/api/intl"}],["meta",{"property":"og:url","content":"https://idoc.dev/ko/nodejs/api/intl"}]]},"headers":[],"relativePath":"ko/nodejs/api/intl.md","filePath":"ko/nodejs/api/intl.md","lastUpdated":null}`),a={name:`ko/nodejs/api/intl.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="internationalization-support" tabindex="-1">국제화 지원 <a class="header-anchor" href="#internationalization-support" aria-label="Permalink to “국제화 지원”">​</a></h1><p>Node.js에는 국제화된 프로그램을 더 쉽게 작성할 수 있도록 하는 많은 기능이 있습니다. 그중 일부는 다음과 같습니다.</p><ul><li><p><a href="https://tc39.github.io/ecma262/" target="_blank" rel="noreferrer">ECMAScript 언어 사양</a>의 로캘에 민감하거나 유니코드를 인식하는 기능:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer"><code>String.prototype.normalize()</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase" target="_blank" rel="noreferrer"><code>String.prototype.toLowerCase()</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase" target="_blank" rel="noreferrer"><code>String.prototype.toUpperCase()</code></a></li></ul></li><li><p><a href="https://tc39.github.io/ecma402/" target="_blank" rel="noreferrer">ECMAScript 국제화 API 사양</a>(일명 ECMA-402)에 설명된 모든 기능:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noreferrer"><code>Intl</code></a> 객체</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noreferrer"><code>String.prototype.localeCompare()</code></a> 및 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString" target="_blank" rel="noreferrer"><code>Date.prototype.toLocaleString()</code></a>과 같은 로캘에 민감한 메서드</li></ul></li><li><p><a href="/ko/nodejs/api/url#the-whatwg-url-api">WHATWG URL 파서</a>의 <a href="https://en.wikipedia.org/wiki/Internationalized_domain_name" target="_blank" rel="noreferrer">국제화된 도메인 이름</a>(IDN) 지원</p></li><li><p><a href="/ko/nodejs/api/buffer#buffertranscodesource-fromenc-toenc"><code>require(&#39;node:buffer&#39;).transcode()</code></a></p></li><li><p>더 정확한 <a href="/ko/nodejs/api/repl#repl">REPL</a> 라인 편집</p></li><li><p><a href="/ko/nodejs/api/util#class-utiltextdecoder"><code>require(&#39;node:util&#39;).TextDecoder</code></a></p></li><li><p><a href="https://github.com/tc39/proposal-regexp-unicode-property-escapes" target="_blank" rel="noreferrer"><code>RegExp</code> 유니코드 속성 이스케이프</a></p></li></ul><p>Node.js와 기본 V8 엔진은 <a href="http://site.icu-project.org/" target="_blank" rel="noreferrer">ICU(International Components for Unicode)</a>를 사용하여 이러한 기능을 기본 C/C++ 코드로 구현합니다. 전체 ICU 데이터 세트는 기본적으로 Node.js에서 제공됩니다. 그러나 ICU 데이터 파일의 크기로 인해 Node.js를 빌드하거나 실행할 때 ICU 데이터 세트를 사용자 정의하기 위한 여러 옵션이 제공됩니다.</p><h2 id="options-for-building-nodejs" tabindex="-1">Node.js 빌드 옵션 <a class="header-anchor" href="#options-for-building-nodejs" aria-label="Permalink to “Node.js 빌드 옵션”">​</a></h2><p>Node.js에서 ICU 사용 방식을 제어하기 위해 컴파일 시 네 가지 <code>configure</code> 옵션을 사용할 수 있습니다. Node.js 컴파일 방법에 대한 자세한 내용은 <a href="https://github.com/nodejs/node/blob/HEAD/BUILDING.md" target="_blank" rel="noreferrer">BUILDING.md</a>에 문서화되어 있습니다.</p><ul><li><code>--with-intl=none</code>/<code>--without-intl</code></li><li><code>--with-intl=system-icu</code></li><li><code>--with-intl=small-icu</code></li><li><code>--with-intl=full-icu</code> (기본값)</li></ul><p>각 <code>configure</code> 옵션에 대한 사용 가능한 Node.js 및 JavaScript 기능 개요:</p><table tabindex="0"><thead><tr><th>기능</th><th><code>none</code></th><th><code>system-icu</code></th><th><code>small-icu</code></th><th><code>full-icu</code></th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer"><code>String.prototype.normalize()</code></a></td><td>없음 (함수가 작동하지 않음)</td><td>전체</td><td>전체</td><td>전체</td></tr><tr><td><code>String.prototype.to*Case()</code></td><td>전체</td><td>전체</td><td>전체</td><td>전체</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noreferrer"><code>Intl</code></a></td><td>없음 (객체가 존재하지 않음)</td><td>부분/전체 (OS에 따라 다름)</td><td>부분 (영어 전용)</td><td>전체</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noreferrer"><code>String.prototype.localeCompare()</code></a></td><td>부분 (로케일 인식 안 함)</td><td>전체</td><td>전체</td><td>전체</td></tr><tr><td><code>String.prototype.toLocale*Case()</code></td><td>부분 (로케일 인식 안 함)</td><td>전체</td><td>전체</td><td>전체</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString" target="_blank" rel="noreferrer"><code>Number.prototype.toLocaleString()</code></a></td><td>부분 (로케일 인식 안 함)</td><td>부분/전체 (OS에 따라 다름)</td><td>부분 (영어 전용)</td><td>전체</td></tr><tr><td><code>Date.prototype.toLocale*String()</code></td><td>부분 (로케일 인식 안 함)</td><td>부분/전체 (OS에 따라 다름)</td><td>부분 (영어 전용)</td><td>전체</td></tr><tr><td><a href="/ko/nodejs/api/url#legacy-url-api">레거시 URL 파서</a></td><td>부분 (IDN 지원 없음)</td><td>전체</td><td>전체</td><td>전체</td></tr><tr><td><a href="/ko/nodejs/api/url#the-whatwg-url-api">WHATWG URL 파서</a></td><td>부분 (IDN 지원 없음)</td><td>전체</td><td>전체</td><td>전체</td></tr><tr><td><a href="/ko/nodejs/api/buffer#buffertranscodesource-fromenc-toenc"><code>require(&#39;node:buffer&#39;).transcode()</code></a></td><td>없음 (함수가 존재하지 않음)</td><td>전체</td><td>전체</td><td>전체</td></tr><tr><td><a href="/ko/nodejs/api/repl#repl">REPL</a></td><td>부분 (부정확한 줄 편집)</td><td>전체</td><td>전체</td><td>전체</td></tr><tr><td><a href="/ko/nodejs/api/util#class-utiltextdecoder"><code>require(&#39;node:util&#39;).TextDecoder</code></a></td><td>부분 (기본 인코딩 지원)</td><td>부분/전체 (OS에 따라 다름)</td><td>부분 (유니코드 전용)</td><td>전체</td></tr><tr><td><a href="https://github.com/tc39/proposal-regexp-unicode-property-escapes" target="_blank" rel="noreferrer"><code>RegExp</code> 유니코드 속성 이스케이프</a></td><td>없음 (잘못된 <code>RegExp</code> 오류)</td><td>전체</td><td>전체</td><td>전체</td></tr></tbody></table><p>&quot;(로케일 인식 안 함)&quot; 표시는 해당 함수가 존재하는 경우 함수의 비 <code>Locale</code> 버전과 동일하게 작업을 수행함을 나타냅니다. 예를 들어 <code>none</code> 모드에서 <code>Date.prototype.toLocaleString()</code>의 작동은 <code>Date.prototype.toString()</code>의 작동과 동일합니다.</p><h3 id="disable-all-internationalization-features-none" tabindex="-1">모든 국제화 기능 비활성화 (<code>none</code>) <a class="header-anchor" href="#disable-all-internationalization-features-none" aria-label="Permalink to “모든 국제화 기능 비활성화 (none)”">​</a></h3><p>이 옵션을 선택하면 ICU가 비활성화되고 결과 <code>node</code> 바이너리에서 위에 언급된 대부분의 국제화 기능을 <strong>사용할 수 없습니다</strong>.</p><h3 id="build-with-a-pre-installed-icu-system-icu" tabindex="-1">미리 설치된 ICU로 빌드 (<code>system-icu</code>) <a class="header-anchor" href="#build-with-a-pre-installed-icu-system-icu" aria-label="Permalink to “미리 설치된 ICU로 빌드 (system-icu)”">​</a></h3><p>Node.js는 시스템에 이미 설치된 ICU 빌드에 연결할 수 있습니다. 실제로 대부분의 Linux 배포판에는 이미 ICU가 설치되어 있으며 이 옵션을 사용하면 OS의 다른 구성 요소에서 사용하는 것과 동일한 데이터 세트를 재사용할 수 있습니다.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer"><code>String.prototype.normalize()</code></a> 및 <a href="/ko/nodejs/api/url#the-whatwg-url-api">WHATWG URL 파서</a>와 같이 ICU 라이브러리 자체만 필요한 기능은 <code>system-icu</code>에서 완전히 지원됩니다. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" target="_blank" rel="noreferrer"><code>Intl.DateTimeFormat</code></a>와 같이 ICU 로캘 데이터가 추가로 필요한 기능은 시스템에 설치된 ICU 데이터의 완전성에 따라 완전히 또는 부분적으로 지원될 <em>수</em> 있습니다.</p><h3 id="embed-a-limited-set-of-icu-data-small-icu" tabindex="-1">제한된 ICU 데이터 세트 포함 (<code>small-icu</code>) <a class="header-anchor" href="#embed-a-limited-set-of-icu-data-small-icu" aria-label="Permalink to “제한된 ICU 데이터 세트 포함 (small-icu)”">​</a></h3><p>이 옵션을 사용하면 결과 바이너리가 ICU 라이브러리에 정적으로 연결되고 <code>node</code> 실행 파일 내에 ICU 데이터의 하위 집합 (일반적으로 영어 로캘만 해당)이 포함됩니다.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer"><code>String.prototype.normalize()</code></a> 및 <a href="/ko/nodejs/api/url#the-whatwg-url-api">WHATWG URL 파서</a>와 같이 ICU 라이브러리 자체만 필요한 기능은 <code>small-icu</code>에서 완전히 지원됩니다. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" target="_blank" rel="noreferrer"><code>Intl.DateTimeFormat</code></a>와 같이 ICU 로캘 데이터가 추가로 필요한 기능은 일반적으로 영어 로캘에서만 작동합니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> january</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9e8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> english</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTimeFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;en&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { month: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;long&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> spanish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTimeFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { month: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;long&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(english.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(january));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;January&quot; 출력</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spanish.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(january));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// small-icu에서 사용자의 기본 로캘에 따라 &quot;M01&quot; 또는 &quot;January&quot;를 출력합니다.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;enero&quot;를 출력해야 합니다.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>이 모드는 기능과 바이너리 크기 간의 균형을 제공합니다.</p><h4 id="providing-icu-data-at-runtime" tabindex="-1">런타임에 ICU 데이터 제공하기 <a class="header-anchor" href="#providing-icu-data-at-runtime" aria-label="Permalink to “런타임에 ICU 데이터 제공하기”">​</a></h4><p><code>small-icu</code> 옵션을 사용하는 경우, 런타임에 추가 로캘 데이터를 제공하여 JS 메서드가 모든 ICU 로캘에 대해 작동하도록 할 수 있습니다. 데이터 파일이 <code>/runtime/directory/with/dat/file</code>에 저장되어 있다고 가정하면, 다음 중 하나를 통해 ICU에서 사용할 수 있습니다.</p><ul><li><code>--with-icu-default-data-dir</code> 구성 옵션: 이 옵션은 기본 데이터 디렉터리 경로만 바이너리에 포함합니다. 실제 데이터 파일은 이 디렉터리 경로에서 런타임에 로드됩니다.</li><li><a href="/ko/nodejs/api/cli#node-icu-datafile"><code>NODE_ICU_DATA</code></a> 환경 변수:</li><li><a href="/ko/nodejs/api/cli#icu-data-dirfile"><code>--icu-data-dir</code></a> CLI 매개변수:</li></ul><p>둘 이상의 옵션이 지정된 경우, <code>--icu-data-dir</code> CLI 매개변수가 가장 높은 우선 순위를 가지며, 그 다음은 <code>NODE_ICU_DATA</code> 환경 변수, 그리고 <code>--with-icu-default-data-dir</code> 구성 옵션입니다.</p><p>ICU는 다양한 데이터 형식을 자동으로 찾아서 로드할 수 있지만, 데이터는 ICU 버전에 적합해야 하며 파일 이름이 올바르게 지정되어야 합니다. 데이터 파일의 가장 일반적인 이름은 <code>icudtX[bl].dat</code>이며, 여기서 <code>X</code>는 대상 ICU 버전을 나타내고, <code>b</code> 또는 <code>l</code>은 시스템의 엔디안을 나타냅니다. 예상되는 데이터 파일을 지정된 디렉터리에서 읽을 수 없으면 Node.js는 로드에 실패합니다. 현재 Node.js 버전에 해당하는 데이터 파일의 이름은 다음을 사용하여 계산할 수 있습니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`icudt\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">versions</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">icu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endianness</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.dat\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>일반적으로 지원되는 다른 형식 및 ICU 데이터에 대한 자세한 내용은 ICU 사용자 가이드의 <a href="http://userguide.icu-project.org/icudata" target="_blank" rel="noreferrer">&quot;ICU 데이터&quot;</a> 기사를 확인하십시오.</p><p><a href="https://www.npmjs.com/package/full-icu" target="_blank" rel="noreferrer">full-icu</a> npm 모듈은 실행 중인 <code>node</code> 실행 파일의 ICU 버전을 감지하고 적절한 데이터 파일을 다운로드하여 ICU 데이터 설치를 크게 단순화할 수 있습니다. <code>npm i full-icu</code>를 통해 모듈을 설치한 후 데이터 파일을 <code>./node_modules/full-icu</code>에서 사용할 수 있습니다. 그런 다음 이 경로를 위에서 표시된 대로 <code>NODE_ICU_DATA</code> 또는 <code>--icu-data-dir</code>에 전달하여 완전한 <code>Intl</code> 지원을 활성화할 수 있습니다.</p><h3 id="embed-the-entire-icu-full-icu" tabindex="-1">전체 ICU 포함 (<code>full-icu</code>) <a class="header-anchor" href="#embed-the-entire-icu-full-icu" aria-label="Permalink to “전체 ICU 포함 (full-icu)”">​</a></h3><p>이 옵션을 사용하면 결과 바이너리가 ICU에 정적으로 연결되고 전체 ICU 데이터 세트를 포함합니다. 이러한 방식으로 생성된 바이너리는 더 이상 외부 종속성이 없으며 모든 로케일을 지원하지만 크기가 상당히 클 수 있습니다. <code>--with-intl</code> 플래그가 전달되지 않으면 이것이 기본 동작입니다. 공식 바이너리도 이 모드로 빌드됩니다.</p><h2 id="detecting-internationalization-support" tabindex="-1">국제화 지원 감지 <a class="header-anchor" href="#detecting-internationalization-support" aria-label="Permalink to “국제화 지원 감지”">​</a></h2><p>ICU가 활성화되었는지 ( <code>system-icu</code>, <code>small-icu</code> 또는 <code>full-icu</code>) 확인하려면 <code>Intl</code>의 존재 여부를 확인하는 것으로 충분합니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasICU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>또는 ICU가 활성화된 경우에만 정의되는 속성인 <code>process.versions.icu</code>를 확인하는 것도 작동합니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasICU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.versions.icu </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>영어가 아닌 로케일 (예 : <code>full-icu</code> 또는 <code>system-icu</code>)에 대한 지원을 확인하려면 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" target="_blank" rel="noreferrer"><code>Intl.DateTimeFormat</code></a>이 좋은 구별 요소가 될 수 있습니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasFullICU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> january</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9e8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> spanish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTimeFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { month: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;long&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> spanish.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(january) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;enero&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>Intl</code> 지원에 대한 더 자세한 테스트를 위해 다음 리소스가 유용할 수 있습니다.</p><ul><li><a href="https://github.com/srl295/btest402" target="_blank" rel="noreferrer">btest402</a>: 일반적으로 <code>Intl</code> 지원이 있는 Node.js가 올바르게 빌드되었는지 확인하는 데 사용됩니다.</li><li><a href="https://github.com/tc39/test262/tree/HEAD/test/intl402" target="_blank" rel="noreferrer">Test262</a>: ECMAScript의 공식 적합성 테스트 스위트에는 ECMA-402 전용 섹션이 포함되어 있습니다.</li></ul>`,39)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};