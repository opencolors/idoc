import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js REPLの使用方法","description":"Node.js REPLを使用して、簡単なJavaScriptコードを迅速にテストし、その機能を探索する方法を学びます。マルチラインモード、特殊変数、ドットコマンドなどを含みます。","frontmatter":{"title":"Node.js REPLの使用方法","description":"Node.js REPLを使用して、簡単なJavaScriptコードを迅速にテストし、その機能を探索する方法を学びます。マルチラインモード、特殊変数、ドットコマンドなどを含みます。","head":[["meta",{"name":"og:title","content":"Node.js REPLの使用方法 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js REPLを使用して、簡単なJavaScriptコードを迅速にテストし、その機能を探索する方法を学びます。マルチラインモード、特殊変数、ドットコマンドなどを含みます。"}],["meta",{"name":"twitter:title","content":"Node.js REPLの使用方法 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js REPLを使用して、簡単なJavaScriptコードを迅速にテストし、その機能を探索する方法を学びます。マルチラインモード、特殊変数、ドットコマンドなどを含みます。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/guide/how-to-use-the-nodejs-repl"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/guide/how-to-use-the-nodejs-repl"}]]},"headers":[],"relativePath":"ja/nodejs/guide/how-to-use-the-nodejs-repl.md","filePath":"ja/nodejs/guide/how-to-use-the-nodejs-repl.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/guide/how-to-use-the-nodejs-repl.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-repl-の使い方" tabindex="-1">Node.js REPL の使い方 <a class="header-anchor" href="#node-js-repl-の使い方" aria-label="Permalink to “Node.js REPL の使い方”">​</a></h1><p><code>node</code> コマンドは Node.js スクリプトを実行するために使用するコマンドです。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>実行するスクリプトや引数なしに <code>node</code> コマンドを実行すると、REPL セッションが開始されます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">注</p><p>REPL は Read Evaluate Print Loop (読み取り、評価、出力の繰り返し) の略で、プログラミング言語の環境 (基本的にはコンソールウィンドウ) であり、ユーザー入力を単一の式として受け取り、実行後に結果をコンソールに出力します。REPL セッションは、簡単な JavaScript コードをすばやくテストするのに便利な方法を提供します。</p></div><p>ターミナルで試してみると、次のようになります。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>コマンドはアイドルモードになり、何らかの入力があるまで待機します。</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>ターミナルの開き方がわからない場合は、「your-operating-system でターミナルを開く方法」をググってください。</p></div><p>REPL は、より正確には、JavaScript コードの入力を待機しています。</p><p>まず、簡単な例を入力してみましょう。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.log(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>最初の値 <code>test</code> は、コンソールに出力するように指示した出力です。次に、<code>console.log()</code> を実行した戻り値である <code>undefined</code> が返されます。Node はこのコード行を読み込み、評価し、結果を出力し、さらにコード行の入力を待機する状態に戻ります。Node は、セッションを終了するまで、REPL で実行するコードごとにこの 3 つのステップを繰り返します。これが REPL の名前の由来です。</p><p>Node は、JavaScript コードの任意の行の結果を、指示しなくても自動的に出力します。たとえば、次の行を入力して Enter キーを押します。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上記の 2 行の出力の違いに注目してください。Node REPL は <code>console.log()</code> の実行後には <code>undefined</code> を出力しましたが、他方では <code>5== &#39;5&#39;</code> の結果を出力しただけです。前者は JavaScript の単なるステートメントであり、後者は式であることに注意する必要があります。</p><p>場合によっては、テストしたいコードが複数行にわたる場合があります。たとえば、乱数を生成する関数を定義したいとします。REPL セッションで次の行を入力して Enter キーを押します。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateRandom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Node REPL は、コードの記述がまだ完了していないことを賢く判断し、コードを入力するための複数行モードに移行します。ここで、関数の定義を完了して Enter キーを押します。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateRandom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="特殊変数" tabindex="-1">特殊変数: <a class="header-anchor" href="#特殊変数" aria-label="Permalink to “特殊変数:”">​</a></h3><p>コードを入力した後で <code>_</code> と入力すると、直前の操作の結果が出力されます。</p><h3 id="上矢印キー" tabindex="-1">上矢印キー: <a class="header-anchor" href="#上矢印キー" aria-label="Permalink to “上矢印キー:”">​</a></h3><p>上矢印キーを押すと、現在の、さらには以前の REPL セッションで実行されたコードの履歴にアクセスできます。</p><h2 id="ドットコマンド" tabindex="-1">ドットコマンド <a class="header-anchor" href="#ドットコマンド" aria-label="Permalink to “ドットコマンド”">​</a></h2><p>REPL にはいくつかの特別なコマンドがあり、すべてドット <code>.</code> で始まります。それらは次のとおりです。</p><ul><li><code>.help</code>: ドットコマンドのヘルプを表示します。</li><li><code>.editor</code>: エディタモードを有効にし、複数行の JavaScript コードを簡単に記述できます。このモードに入ったら、<code>ctrl-D</code> を入力して記述したコードを実行します。</li><li><code>.break</code>: 複数行の式を入力しているときに、<code>.break</code> コマンドを入力すると、それ以上の入力を中止します。<code>ctrl-C</code> を押すのと同じです。</li><li><code>.clear</code>: REPL コンテキストを空のオブジェクトにリセットし、現在入力中の複数行の式をすべてクリアします。</li><li><code>.1oad</code>: 現在の作業ディレクトリを基準にして、JavaScript ファイルをロードします。</li><li><code>.save</code>: REPL セッションで入力したすべてをファイルに保存します (ファイル名を指定してください)。</li><li><code>.exit</code>: REPL を終了します (<code>ctrl-C</code> を 2 回押すのと同じです)。</li></ul><p>REPL は、<code>.editor</code> を呼び出す必要なく、複数行のステートメントを入力していることを認識します。たとえば、次のような反復処理の入力を開始した場合:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foxEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Enter キーを押すと、REPL は 3 つのドットで始まる新しい行に移動し、そのブロックでの作業を続行できることを示します。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.. console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (num)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">..}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>行末に <code>.break</code> を入力すると、複数行モードは停止し、ステートメントは実行されません。</p><h2 id="javascript-ファイルから-repl-を実行する" tabindex="-1">JavaScript ファイルから REPL を実行する <a class="header-anchor" href="#javascript-ファイルから-repl-を実行する" aria-label="Permalink to “JavaScript ファイルから REPL を実行する”">​</a></h2><p><code>repl</code> を使用して JavaScript ファイルに REPL をインポートできます。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> repl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:repl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>repl</code> 変数を使用して、さまざまな操作を実行できます。REPL コマンドプロンプトを開始するには、次の行を入力します。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">repl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>コマンドラインでファイルを実行します。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repl.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>REPL の開始時に表示される文字列を渡すことができます。デフォルトは &#39;&gt;&#39; (末尾にスペース付き) ですが、カスタムプロンプトを定義できます。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Unix スタイルのプロンプト</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$ &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>REPL の終了時にメッセージを表示できます。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;exit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;exiting repl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>REPL モジュールの詳細については、<a href="/ja/nodejs/api/repl">repl ドキュメント</a>を参照してください。</p>`,45)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};