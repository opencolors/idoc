import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js TTY ドキュメント","description":"Node.jsのTTYモジュールは、TTY（テレタイプライター）デバイスとのインタラクションのためのインターフェースを提供し、ストリームがTTYかどうかを確認する方法、ウィンドウサイズの取得、ターミナルイベントの処理を含む。","frontmatter":{"title":"Node.js TTY ドキュメント","description":"Node.jsのTTYモジュールは、TTY（テレタイプライター）デバイスとのインタラクションのためのインターフェースを提供し、ストリームがTTYかどうかを確認する方法、ウィンドウサイズの取得、ターミナルイベントの処理を含む。","head":[["meta",{"name":"og:title","content":"Node.js TTY ドキュメント | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.jsのTTYモジュールは、TTY（テレタイプライター）デバイスとのインタラクションのためのインターフェースを提供し、ストリームがTTYかどうかを確認する方法、ウィンドウサイズの取得、ターミナルイベントの処理を含む。"}],["meta",{"name":"twitter:title","content":"Node.js TTY ドキュメント | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.jsのTTYモジュールは、TTY（テレタイプライター）デバイスとのインタラクションのためのインターフェースを提供し、ストリームがTTYかどうかを確認する方法、ウィンドウサイズの取得、ターミナルイベントの処理を含む。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/tty"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/tty"}]]},"headers":[],"relativePath":"ja/nodejs/api/tty.md","filePath":"ja/nodejs/api/tty.md","lastUpdated":null}`),a={name:`ja/nodejs/api/tty.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="tty" tabindex="-1">TTY <a class="header-anchor" href="#tty" aria-label="Permalink to “TTY”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 2</a> - 安定</p></div><p><strong>ソースコード:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/tty.js" target="_blank" rel="noreferrer">lib/tty.js</a></p><p><code>node:tty</code> モジュールは、<code>tty.ReadStream</code> と <code>tty.WriteStream</code> クラスを提供します。ほとんどの場合、このモジュールを直接使用する必要も可能性もありません。ただし、以下を使用してアクセスできます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:tty&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Node.js がテキスト端末 (&quot;TTY&quot;) が接続された状態で実行されていることを検出すると、デフォルトで <a href="/ja/nodejs/api/process#processstdin"><code>process.stdin</code></a> が <code>tty.ReadStream</code> のインスタンスとして初期化され、<a href="/ja/nodejs/api/process#processstdout"><code>process.stdout</code></a> と <a href="/ja/nodejs/api/process#processstderr"><code>process.stderr</code></a> の両方が、デフォルトで <code>tty.WriteStream</code> のインスタンスとして初期化されます。Node.js が TTY コンテキスト内で実行されているかどうかを判断する推奨される方法は、<code>process.stdout.isTTY</code> プロパティの値が <code>true</code> であることを確認することです。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Boolean(process.stdout.isTTY)&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Boolean(process.stdout.isTTY)&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cat</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>ほとんどの場合、アプリケーションが <code>tty.ReadStream</code> および <code>tty.WriteStream</code> クラスのインスタンスを手動で作成する理由はありません。</p><h2 id="class-ttyreadstream" tabindex="-1">クラス: <code>tty.ReadStream</code> <a class="header-anchor" href="#class-ttyreadstream" aria-label="Permalink to “クラス: tty.ReadStream”">​</a></h2><p><strong>追加:</strong> v0.5.8</p><ul><li>拡張: <a href="/ja/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>TTY の読み取り可能な側を表します。通常の場合、<a href="/ja/nodejs/api/process#processstdin"><code>process.stdin</code></a> は Node.js プロセス内で唯一の <code>tty.ReadStream</code> インスタンスであり、追加のインスタンスを作成する理由はありません。</p><h3 id="readstreamisraw" tabindex="-1"><code>readStream.isRaw</code> <a class="header-anchor" href="#readstreamisraw" aria-label="Permalink to “readStream.isRaw”">​</a></h3><p><strong>追加:</strong> v0.7.7</p><p>TTY が現在、生のデバイスとして動作するように構成されている場合は <code>true</code> である <code>boolean</code>。</p><p>ターミナルが生モードで動作している場合でも、プロセスが開始されるとこのフラグは常に <code>false</code> になります。その値は、その後の <code>setRawMode</code> の呼び出しによって変化します。</p><h3 id="readstreamistty" tabindex="-1"><code>readStream.isTTY</code> <a class="header-anchor" href="#readstreamistty" aria-label="Permalink to “readStream.isTTY”">​</a></h3><p><strong>追加:</strong> v0.5.8</p><p><code>tty.ReadStream</code> インスタンスの場合、常に <code>true</code> である <code>boolean</code>。</p><h3 id="readstreamsetrawmodemode" tabindex="-1"><code>readStream.setRawMode(mode)</code> <a class="header-anchor" href="#readstreamsetrawmodemode" aria-label="Permalink to “readStream.setRawMode(mode)”">​</a></h3><p><strong>Added in: v0.7.7</strong></p><ul><li><code>mode</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>true</code> の場合、<code>tty.ReadStream</code> を raw デバイスとして動作するように設定します。<code>false</code> の場合、<code>tty.ReadStream</code> をデフォルトモードで動作するように設定します。<code>readStream.isRaw</code> プロパティは、結果のモードに設定されます。</li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a> リードストリームのインスタンス。</li></ul><p><code>tty.ReadStream</code> を設定して、raw デバイスとして動作させることができます。</p><p>raw モードの場合、入力は常に文字単位で利用可能であり、修飾子は含まれません。さらに、端末による文字の特殊な処理はすべて無効になり、入力文字のエコーも無効になります。このモードでは、+ を押しても <code>SIGINT</code> は発生しません。</p><h2 id="class-ttywritestream" tabindex="-1">Class: <code>tty.WriteStream</code> <a class="header-anchor" href="#class-ttywritestream" aria-label="Permalink to “Class: tty.WriteStream”">​</a></h2><p><strong>Added in: v0.5.8</strong></p><ul><li>継承元: <a href="/ja/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>TTY の書き込み可能な側を表します。通常、<a href="/ja/nodejs/api/process#processstdout"><code>process.stdout</code></a> と <a href="/ja/nodejs/api/process#processstderr"><code>process.stderr</code></a> は、Node.js プロセスで作成される唯一の <code>tty.WriteStream</code> インスタンスであり、追加のインスタンスを作成する理由はありません。</p><h3 id="new-ttyreadstreamfd-options" tabindex="-1"><code>new tty.ReadStream(fd[, options])</code> <a class="header-anchor" href="#new-ttyreadstreamfd-options" aria-label="Permalink to “new tty.ReadStream(fd[, options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v0.9.4</td><td><code>options</code> 引数がサポートされています。</td></tr><tr><td>v0.5.8</td><td>Added in: v0.5.8</td></tr></tbody></table></div><ul><li><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> TTY に関連付けられたファイル記述子。</li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 親の <code>net.Socket</code> に渡されるオプション。<a href="/ja/nodejs/api/net#new-netsocketoptions"><code>net.Socket</code> コンストラクター</a> の <code>options</code> を参照してください。</li><li>戻り値 <a href="/ja/nodejs/api/tty#class-ttyreadstream">&lt;tty.ReadStream&gt;</a></li></ul><p>TTY に関連付けられた <code>fd</code> の <code>ReadStream</code> を作成します。</p><h3 id="new-ttywritestreamfd" tabindex="-1"><code>new tty.WriteStream(fd)</code> <a class="header-anchor" href="#new-ttywritestreamfd" aria-label="Permalink to “new tty.WriteStream(fd)”">​</a></h3><p><strong>Added in: v0.5.8</strong></p><ul><li><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> TTY に関連付けられたファイル記述子。</li><li>戻り値 <a href="/ja/nodejs/api/tty#class-ttywritestream">&lt;tty.WriteStream&gt;</a></li></ul><p>TTY に関連付けられた <code>fd</code> の <code>WriteStream</code> を作成します。</p><h3 id="event-resize" tabindex="-1">イベント: <code>&#39;resize&#39;</code> <a class="header-anchor" href="#event-resize" aria-label="Permalink to “イベント: &#39;resize&#39;”">​</a></h3><p><strong>追加: v0.7.7</strong></p><p><code>&#39;resize&#39;</code> イベントは、<code>writeStream.columns</code> または <code>writeStream.rows</code> プロパティのいずれかが変更されるたびに発生します。呼び出される際、リスナーコールバックに引数は渡されません。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;screen size has changed!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">columns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}x\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rows</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="writestreamclearlinedir-callback" tabindex="-1"><code>writeStream.clearLine(dir[, callback])</code> <a class="header-anchor" href="#writestreamclearlinedir-callback" aria-label="Permalink to “writeStream.clearLine(dir[, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v12.7.0</td><td>ストリームの write() コールバックと戻り値が公開されました。</td></tr><tr><td>v0.7.7</td><td>追加: v0.7.7</td></tr></tbody></table></div><ul><li><p><code>dir</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></p><ul><li><code>-1</code>: カーソルから左</li><li><code>1</code>: カーソルから右</li><li><code>0</code>: 行全体</li></ul></li><li><p><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 操作が完了すると呼び出されます。</p></li><li><p>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> ストリームが、追加のデータを書き込む前に <code>&#39;drain&#39;</code> イベントが発行されるのを呼び出し元のコードに待機させたい場合は <code>false</code>。それ以外の場合は <code>true</code>。</p></li></ul><p><code>writeStream.clearLine()</code> は、<code>dir</code> で指定された方向にこの <code>WriteStream</code> の現在の行をクリアします。</p><h3 id="writestreamclearscreendowncallback" tabindex="-1"><code>writeStream.clearScreenDown([callback])</code> <a class="header-anchor" href="#writestreamclearscreendowncallback" aria-label="Permalink to “writeStream.clearScreenDown([callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v12.7.0</td><td>ストリームの write() コールバックと戻り値が公開されました。</td></tr><tr><td>v0.7.7</td><td>追加: v0.7.7</td></tr></tbody></table></div><ul><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 操作が完了すると呼び出されます。</li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> ストリームが、追加のデータを書き込む前に <code>&#39;drain&#39;</code> イベントが発行されるのを呼び出し元のコードに待機させたい場合は <code>false</code>。それ以外の場合は <code>true</code>。</li></ul><p><code>writeStream.clearScreenDown()</code> は、この <code>WriteStream</code> を現在のカーソル位置から下方向にクリアします。</p><h3 id="writestreamcolumns" tabindex="-1"><code>writeStream.columns</code> <a class="header-anchor" href="#writestreamcolumns" aria-label="Permalink to “writeStream.columns”">​</a></h3><p><strong>追加:</strong> v0.7.7</p><p>TTYが現在持っているカラム数を指定する<code>number</code>。このプロパティは、<code>&#39;resize&#39;</code>イベントが発生するたびに更新されます。</p><h3 id="writestreamcursortox-y-callback" tabindex="-1"><code>writeStream.cursorTo(x[, y][, callback])</code> <a class="header-anchor" href="#writestreamcursortox-y-callback" aria-label="Permalink to “writeStream.cursorTo(x[, y][, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v12.7.0</td><td>ストリームのwrite()コールバックと戻り値が公開されました。</td></tr><tr><td>v0.7.7</td><td>追加: v0.7.7</td></tr></tbody></table></div><ul><li><code>x</code> <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>y</code> <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 操作が完了すると呼び出されます。</li><li>戻り値: <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> ストリームが、追加のデータを書き込む前に <code>&#39;drain&#39;</code> イベントが発行されるのを呼び出し元のコードが待機することを望む場合は <code>false</code>、それ以外の場合は <code>true</code>。</li></ul><p><code>writeStream.cursorTo()</code> は、この <code>WriteStream</code> のカーソルを指定された位置に移動します。</p><h3 id="writestreamgetcolordepthenv" tabindex="-1"><code>writeStream.getColorDepth([env])</code> <a class="header-anchor" href="#writestreamgetcolordepthenv" aria-label="Permalink to “writeStream.getColorDepth([env])”">​</a></h3><p><strong>追加:</strong> v9.9.0</p><ul><li><code>env</code> <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> チェックする環境変数を含むオブジェクト。 これにより、特定のターミナルの使用をシミュレートできます。 <strong>デフォルト:</strong> <code>process.env</code>。</li><li>戻り値: <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>戻り値:</p><ul><li>2色の場合 <code>1</code></li><li>16色の場合 <code>4</code></li><li>256色の場合 <code>8</code></li><li>16,777,216色サポートの場合 <code>24</code></li></ul><p>これをターミナルがサポートする色を判断するために使用します。 ターミナルの色の性質上、偽陽性または偽陰性が発生する可能性があります。 プロセス情報と、使用されているターミナルについて嘘をつく可能性のある環境変数によって異なります。 特定のターミナルの使用をシミュレートするために <code>env</code> オブジェクトを渡すことが可能です。 これは、特定の環境設定がどのように動作するかを確認するのに役立ちます。</p><p>特定の色サポートを強制するには、以下の環境設定のいずれかを使用します。</p><ul><li>2色: <code>FORCE_COLOR = 0</code> (色を無効にします)</li><li>16色: <code>FORCE_COLOR = 1</code></li><li>256色: <code>FORCE_COLOR = 2</code></li><li>16,777,216色: <code>FORCE_COLOR = 3</code></li></ul><p>色サポートの無効化は、<code>NO_COLOR</code> および <code>NODE_DISABLE_COLORS</code> 環境変数を使用しても可能です。</p><h3 id="writestreamgetwindowsize" tabindex="-1"><code>writeStream.getWindowSize()</code> <a class="header-anchor" href="#writestreamgetwindowsize" aria-label="Permalink to “writeStream.getWindowSize()”">​</a></h3><p><strong>Added in: v0.7.7</strong></p><ul><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number[]&gt;</a></li></ul><p><code>writeStream.getWindowSize()</code> は、この <code>WriteStream</code> に対応する TTY のサイズを返します。配列は <code>[numColumns, numRows]</code> の型で、<code>numColumns</code> と <code>numRows</code> は対応する TTY の列数と行数を表します。</p><h3 id="writestreamhascolorscount-env" tabindex="-1"><code>writeStream.hasColors([count][, env])</code> <a class="header-anchor" href="#writestreamhascolorscount-env" aria-label="Permalink to “writeStream.hasColors([count][, env])”">​</a></h3><p><strong>Added in: v11.13.0, v10.16.0</strong></p><ul><li><code>count</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> 要求される色の数（最低2）。<strong>デフォルト:</strong> 16。</li><li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> チェックする環境変数を含むオブジェクト。これにより、特定のターミナルの使用をシミュレートできます。<strong>デフォルト:</strong> <code>process.env</code>。</li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p><code>writeStream</code> が <code>count</code> で指定された数以上の色をサポートしている場合は <code>true</code> を返します。最小サポートは 2 色（白黒）です。</p><p>これは、<a href="/ja/nodejs/api/tty#writestreamgetcolordepthenv"><code>writeStream.getColorDepth()</code></a> で説明されているのと同じ誤検出と誤陰性があります。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`stdout\` が少なくとも 16 色をサポートしている場合は true または false を返します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`stdout\` が少なくとも 256 色をサポートしている場合は true または false を返します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ TMUX: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true を返します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { TMUX: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false を返します（環境設定は 2 ** 8 色をサポートしているふりをします）。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="writestreamistty" tabindex="-1"><code>writeStream.isTTY</code> <a class="header-anchor" href="#writestreamistty" aria-label="Permalink to “writeStream.isTTY”">​</a></h3><p><strong>Added in: v0.5.8</strong></p><p>常に <code>true</code> である <code>boolean</code>。</p><h3 id="writestreammovecursordx-dy-callback" tabindex="-1"><code>writeStream.moveCursor(dx, dy[, callback])</code> <a class="header-anchor" href="#writestreammovecursordx-dy-callback" aria-label="Permalink to “writeStream.moveCursor(dx, dy[, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v12.7.0</td><td>ストリームの write() コールバックと戻り値が公開されました。</td></tr><tr><td>v0.7.7</td><td>Added in: v0.7.7</td></tr></tbody></table></div><ul><li><code>dx</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>dy</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 操作が完了すると呼び出されます。</li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> ストリームが追加のデータを書き込む前に、呼び出し元のコードに <code>&#39;drain&#39;</code> イベントが発行されるのを待つように要求する場合は <code>false</code>、そうでない場合は <code>true</code>。</li></ul><p><code>writeStream.moveCursor()</code> は、この <code>WriteStream</code> のカーソルを現在の位置から<em>相対的に</em>移動します。</p><h3 id="writestreamrows" tabindex="-1"><code>writeStream.rows</code> <a class="header-anchor" href="#writestreamrows" aria-label="Permalink to “writeStream.rows”">​</a></h3><p><strong>追加:</strong> v0.7.7</p><p>TTY が現在持つ行数を指定する <code>number</code>。このプロパティは、<code>&#39;resize&#39;</code> イベントが発行されるたびに更新されます。</p><h2 id="ttyisattyfd" tabindex="-1"><code>tty.isatty(fd)</code> <a class="header-anchor" href="#ttyisattyfd" aria-label="Permalink to “tty.isatty(fd)”">​</a></h2><p><strong>追加:</strong> v0.5.8</p><ul><li><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 数値ファイル記述子</li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p><code>tty.isatty()</code> メソッドは、与えられた <code>fd</code> が TTY に関連付けられている場合は <code>true</code> を、そうでない場合は <code>false</code> を返します。これには、<code>fd</code> が非負の整数でない場合も含まれます。</p>`,88)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};