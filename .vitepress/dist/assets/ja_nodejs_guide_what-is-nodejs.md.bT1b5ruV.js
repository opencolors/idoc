import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js の概要","description":"Node.js はオープンソースのクロスプラットフォーム JavaScript ランタイム環境で、開発者がサーバーサイドで JavaScript を実行することを可能にし、高パフォーマンスとスケーラビリティを提供します。","frontmatter":{"title":"Node.js の概要","description":"Node.js はオープンソースのクロスプラットフォーム JavaScript ランタイム環境で、開発者がサーバーサイドで JavaScript を実行することを可能にし、高パフォーマンスとスケーラビリティを提供します。","head":[["meta",{"name":"og:title","content":"Node.js の概要 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js はオープンソースのクロスプラットフォーム JavaScript ランタイム環境で、開発者がサーバーサイドで JavaScript を実行することを可能にし、高パフォーマンスとスケーラビリティを提供します。"}],["meta",{"name":"twitter:title","content":"Node.js の概要 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js はオープンソースのクロスプラットフォーム JavaScript ランタイム環境で、開発者がサーバーサイドで JavaScript を実行することを可能にし、高パフォーマンスとスケーラビリティを提供します。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/guide/what-is-nodejs"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/guide/what-is-nodejs"}]]},"headers":[],"relativePath":"ja/nodejs/guide/what-is-nodejs.md","filePath":"ja/nodejs/guide/what-is-nodejs.md","lastUpdated":null}`),a={name:`ja/nodejs/guide/what-is-nodejs.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js入門" tabindex="-1">Node.js入門 <a class="header-anchor" href="#node-js入門" aria-label="Permalink to “Node.js入門”">​</a></h1><p>Node.jsは、オープンソースでクロスプラットフォームのJavaScriptランタイム環境です。ほぼすべての種類のプロジェクトで人気のあるツールです！</p><p>Node.jsは、Google ChromeのコアであるV8 JavaScriptエンジンをブラウザの外で実行します。これにより、Node.jsは非常に高いパフォーマンスを発揮します。</p><p>Node.jsアプリは、リクエストごとに新しいスレッドを作成することなく、単一のプロセスで実行されます。Node.jsは、JavaScriptコードがブロックされるのを防ぐための非同期I/Oプリミティブのセットを標準ライブラリで提供しており、一般的に、Node.jsのライブラリはノンブロッキングパラダイムを使用して記述されているため、ブロッキング動作は例外であり、normではありません。</p><p>Node.jsがネットワークからの読み取り、データベースへのアクセス、ファイルシステムへのアクセスなどのI/O操作を実行する場合、スレッドをブロックしてCPUサイクルを無駄に待つ代わりに、Node.jsは応答が返ってきたときに操作を再開します。</p><p>これにより、Node.jsは、スレッドの同時実行性の管理という負担を導入することなく、単一のサーバーで数千の同時接続を処理できます。これはバグの重要な原因となる可能性があります。</p><p>Node.jsには独自の利点があります。ブラウザ用にJavaScriptを記述する数百万人のフロントエンド開発者が、完全に異なる言語を学ぶ必要なく、クライアント側のコードに加えてサーバー側のコードを記述できるようになったためです。</p><p>Node.jsでは、すべてのユーザーがブラウザを更新するのを待つ必要がないため、新しいECMAScript標準を問題なく使用できます。Node.jsのバージョンを変更することで、使用するECMAScriptバージョンを決定できます。また、フラグを指定してNode.jsを実行することで、特定の実験的な機能を有効にすることもできます。</p><h2 id="node-jsアプリケーションの例" tabindex="-1">Node.jsアプリケーションの例 <a class="header-anchor" href="#node-jsアプリケーションの例" aria-label="Permalink to “Node.jsアプリケーションの例”">​</a></h2><p>Node.jsの最も一般的なHello Worldの例は、Webサーバーです。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createServer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hostname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;127.0.0.1&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port, hostname, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Server running at http://\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hostname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>このスニペットを実行するには、<code>server.js</code>ファイルとして保存し、ターミナルで<code>node server.js</code>を実行します。コードのmjsバージョンを使用する場合は、<code>server.mjs</code>ファイルとして保存し、ターミナルで<code>node server.mjs</code>を実行する必要があります。</p><p>このコードは、最初にNode.jsの<a href="/ja/nodejs/api/http">httpモジュール</a>を含みます。</p><p>Node.jsには、ネットワーキングのファーストクラスのサポートを含む、素晴らしい<a href="/ja/nodejs/api/synopsis">標準ライブラリ</a>があります。</p><p><code>http</code>の<code>createServer()</code>メソッドは、新しいHTTPサーバーを作成して返します。</p><p>サーバーは、指定されたポートとホスト名でリッスンするように設定されています。サーバーの準備が整うと、コールバック関数が呼び出されます。この場合、サーバーが実行されていることを通知します。</p><p>新しいリクエストが受信されるたびに、<a href="/ja/nodejs/api/http">requestイベント</a>が呼び出され、2つのオブジェクト、リクエスト（<code>http.IncomingMessage</code>オブジェクト）とレスポンス（<code>http.ServerResponse</code>オブジェクト）が提供されます。</p><p>これらの2つのオブジェクトは、HTTP呼び出しを処理するために不可欠です。</p><p>最初のオブジェクトは、リクエストの詳細を提供します。この簡単な例では、これは使用されていませんが、リクエストヘッダーとリクエストデータにアクセスできます。</p><p>2番目のオブジェクトは、データを呼び出し元に返すために使用されます。</p><p>この場合：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>statusCodeプロパティを200に設定して、成功した応答を示します。</p><p>Content-Typeヘッダーを設定します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>そして、コンテンツを引数として<code>end()</code>に追加して、レスポンスを閉じます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>これにより、レスポンスがクライアントに送信されます。</p>`,28)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};