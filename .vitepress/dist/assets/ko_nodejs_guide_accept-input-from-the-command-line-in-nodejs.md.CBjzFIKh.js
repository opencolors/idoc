import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 에서 사용자 입력 받기","description":"readline 모듈과 Inquirer.js 패키지를 사용하여 Node.js CLI 프로그램을 인터랙티브하게 만드는 방법을 배우십시오.","frontmatter":{"title":"Node.js 에서 사용자 입력 받기","description":"readline 모듈과 Inquirer.js 패키지를 사용하여 Node.js CLI 프로그램을 인터랙티브하게 만드는 방법을 배우십시오.","head":[["meta",{"name":"og:title","content":"Node.js 에서 사용자 입력 받기 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"readline 모듈과 Inquirer.js 패키지를 사용하여 Node.js CLI 프로그램을 인터랙티브하게 만드는 방법을 배우십시오."}],["meta",{"name":"twitter:title","content":"Node.js 에서 사용자 입력 받기 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"readline 모듈과 Inquirer.js 패키지를 사용하여 Node.js CLI 프로그램을 인터랙티브하게 만드는 방법을 배우십시오."}],["link",{"rel":"canonical","href":"https://idoc.dev/ko/nodejs/guide/accept-input-from-the-command-line-in-nodejs"}],["meta",{"property":"og:url","content":"https://idoc.dev/ko/nodejs/guide/accept-input-from-the-command-line-in-nodejs"}]]},"headers":[],"relativePath":"ko/nodejs/guide/accept-input-from-the-command-line-in-nodejs.md","filePath":"ko/nodejs/guide/accept-input-from-the-command-line-in-nodejs.md","lastUpdated":1749464498000}`),a={name:`ko/nodejs/guide/accept-input-from-the-command-line-in-nodejs.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js에서-명령줄로부터-입력-받기" tabindex="-1">Node.js에서 명령줄로부터 입력 받기 <a class="header-anchor" href="#node-js에서-명령줄로부터-입력-받기" aria-label="Permalink to “Node.js에서 명령줄로부터 입력 받기”">​</a></h1><p>Node.js CLI 프로그램을 상호 작용적으로 만드는 방법은 무엇일까요?</p><p>Node.js는 7 버전부터 이 작업을 수행하기 위해 <code>readline</code> 모듈을 제공합니다. 이는 <code>process.stdin</code> 스트림과 같은 읽기 가능한 스트림으로부터 입력을 한 번에 한 줄씩 가져오는 역할을 합니다. Node.js 프로그램 실행 중에는 터미널 입력이 됩니다.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:readline&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> readline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input: process.stdin,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output: process.stdout</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">question</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;이름이 무엇인가요?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;안녕하세요 &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;님!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>이 코드는 사용자의 이름을 묻고, 텍스트를 입력하고 사용자가 Enter 키를 누르면 인사말을 보냅니다.</p><p><code>question()</code> 메서드는 첫 번째 매개변수(질문)를 표시하고 사용자 입력을 기다립니다. Enter 키를 누르면 콜백 함수를 호출합니다.</p><p>이 콜백 함수에서 readline 인터페이스를 닫습니다.</p><p><code>readline</code>은 여러 가지 다른 메서드를 제공합니다. 위에 연결된 패키지 설명서를 확인하십시오.</p><p>비밀번호를 요구해야 하는 경우 비밀번호를 다시 에코하지 않고 * 기호를 표시하는 것이 가장 좋습니다.</p><p>가장 간단한 방법은 API 측면에서 매우 유사하고 바로 사용할 수 있는 readline-sync 패키지를 사용하는 것입니다. 더 완전하고 추상적인 솔루션은 Inquirer.js 패키지에서 제공합니다.</p><p><code>npm install inquirer</code>를 사용하여 설치한 다음 다음과 같이 위의 코드를 복제할 수 있습니다.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inquirer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;inquirer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> questions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;이름이 무엇인가요?&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inquirer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(questions).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">answers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;안녕하세요 &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> answers.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;님!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>Inquirer.js</code>를 사용하면 여러 선택지를 묻거나, 라디오 버튼을 사용하거나, 확인 등을 수행하는 등 다양한 작업을 수행할 수 있습니다.</p><p>특히 Node.js에서 제공하는 내장된 대안을 모두 아는 것이 중요하지만 CLI 입력을 다음 단계로 끌어올릴 계획이라면 <code>Inquirer.js</code>가 최적의 선택입니다.</p>`,14)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};