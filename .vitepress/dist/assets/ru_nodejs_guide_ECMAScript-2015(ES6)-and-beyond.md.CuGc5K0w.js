import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"ECMAScript 2015 (ES6) и дальше в Node.js","description":"Node.js поддерживает современные функции ECMAScript через движок V8, с новыми функциями и улучшениями, которые вводятся своевременно.","frontmatter":{"title":"ECMAScript 2015 (ES6) и дальше в Node.js","description":"Node.js поддерживает современные функции ECMAScript через движок V8, с новыми функциями и улучшениями, которые вводятся своевременно.","head":[["meta",{"name":"og:title","content":"ECMAScript 2015 (ES6) и дальше в Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js поддерживает современные функции ECMAScript через движок V8, с новыми функциями и улучшениями, которые вводятся своевременно."}],["meta",{"name":"twitter:title","content":"ECMAScript 2015 (ES6) и дальше в Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js поддерживает современные функции ECMAScript через движок V8, с новыми функциями и улучшениями, которые вводятся своевременно."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/guide/ECMAScript-2015(ES6)-and-beyond"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/guide/ECMAScript-2015(ES6)-and-beyond"}]]},"headers":[],"relativePath":"ru/nodejs/guide/ECMAScript-2015(ES6)-and-beyond.md","filePath":"ru/nodejs/guide/ECMAScript-2015(ES6)-and-beyond.md","lastUpdated":1749464498000}`),a={name:`ru/nodejs/guide/ECMAScript-2015(ES6)-and-beyond.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="ecmascript-2015-es6-и-далее" tabindex="-1">ECMAScript 2015 (ES6) и далее <a class="header-anchor" href="#ecmascript-2015-es6-и-далее" aria-label="Permalink to “ECMAScript 2015 (ES6) и далее”">​</a></h1><p>Node.js построен на базе современных версий <a href="https://v8.dev/" target="_blank" rel="noreferrer">V8</a>. Поддерживая актуальность последних версий этого движка, мы обеспечиваем своевременное предоставление разработчикам Node.js новых возможностей из <a href="https://tc39.es/ecma262/" target="_blank" rel="noreferrer">спецификации JavaScript ECMA-262</a>, а также постоянное повышение производительности и стабильности.</p><p>Все возможности ECMAScript 2015 (ES6) разделены на три группы: <code>shipping</code> (поставляемые), <code>staged</code> (находящиеся на стадии подготовки) и <code>in progress</code> (в разработке):</p><ul><li>Все <code>shipping</code> возможности, которые V8 считает стабильными, <code>включены по умолчанию в Node.js</code> и <code>НЕ</code> требуют каких-либо флагов времени выполнения.</li><li><code>Staged</code> возможности, которые являются почти завершенными возможностями, но не считаются стабильными командой V8, требуют флаг времени выполнения: <code>--harmony</code>.</li><li><code>In progress</code> возможности могут быть активированы индивидуально соответствующим harmony-флагом, хотя это крайне не рекомендуется, за исключением случаев тестирования. Примечание: эти флаги предоставляются V8 и потенциально могут измениться без предварительного уведомления об устаревании.</li></ul><h2 id="какие-возможности-поставляются-по-умолчанию-с-какои-версиеи-node-js" tabindex="-1">Какие возможности поставляются по умолчанию с какой версией Node.js? <a class="header-anchor" href="#какие-возможности-поставляются-по-умолчанию-с-какои-версиеи-node-js" aria-label="Permalink to “Какие возможности поставляются по умолчанию с какой версией Node.js?”">​</a></h2><p>Веб-сайт <a href="https://node.green" target="_blank" rel="noreferrer">node.green</a> предоставляет отличный обзор поддерживаемых возможностей ECMAScript в различных версиях Node.js, основанный на таблице совместимости kangax.</p><h2 id="какие-возможности-находятся-в-разработке" tabindex="-1">Какие возможности находятся в разработке? <a class="header-anchor" href="#какие-возможности-находятся-в-разработке" aria-label="Permalink to “Какие возможности находятся в разработке?”">​</a></h2><p>Новые возможности постоянно добавляются в движок V8. Как правило, ожидайте, что они появятся в будущем выпуске Node.js, хотя сроки неизвестны.</p><p>Вы можете перечислить все возможности в разработке, доступные в каждом выпуске Node.js, путем поиска по аргументу <code>--v8-options</code>. Обратите внимание, что это неполные и, возможно, сломанные возможности V8, поэтому используйте их на свой страх и риск:</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --v8-options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;in progress&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="моя-инфраструктура-настроена-на-использование-флага-harmony-следует-ли-мне-его-удалить" tabindex="-1">Моя инфраструктура настроена на использование флага --harmony. Следует ли мне его удалить? <a class="header-anchor" href="#моя-инфраструктура-настроена-на-использование-флага-harmony-следует-ли-мне-его-удалить" aria-label="Permalink to “Моя инфраструктура настроена на использование флага --harmony. Следует ли мне его удалить?”">​</a></h2><p>В настоящее время флаг <code>--harmony</code> в Node.js включает только <code>staged</code> возможности. В конце концов, теперь это синоним <code>--es_staging</code>. Как упоминалось выше, это завершенные возможности, которые еще не считаются стабильными. Если вы хотите подстраховаться, особенно в производственных средах, подумайте об удалении этого флага времени выполнения до тех пор, пока он не будет поставляться по умолчанию в V8 и, следовательно, в Node.js. Если вы оставите его включенным, вы должны быть готовы к тому, что дальнейшие обновления Node.js сломают ваш код, если V8 изменит свою семантику, чтобы более точно соответствовать стандарту.</p><h2 id="как-узнать-какая-версия-v8-поставляется-с-конкретнои-версиеи-node-js" tabindex="-1">Как узнать, какая версия V8 поставляется с конкретной версией Node.js? <a class="header-anchor" href="#как-узнать-какая-версия-v8-поставляется-с-конкретнои-версиеи-node-js" aria-label="Permalink to “Как узнать, какая версия V8 поставляется с конкретной версией Node.js?”">​</a></h2><p>Node.js предоставляет простой способ перечислить все зависимости и соответствующие версии, поставляемые с конкретным бинарным файлом, через глобальный объект <code>process</code>. В случае с движком V8, введите следующее в вашем терминале, чтобы получить его версию:</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> process.versions.v8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,15)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};