import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 中开发和生产环境的区别","description":"了解 Node.js 中 NODE_ENV 的作用及其对开发和生产环境的影响。","frontmatter":{"title":"Node.js 中开发和生产环境的区别","description":"了解 Node.js 中 NODE_ENV 的作用及其对开发和生产环境的影响。","head":[["meta",{"name":"og:title","content":"Node.js 中开发和生产环境的区别 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"了解 Node.js 中 NODE_ENV 的作用及其对开发和生产环境的影响。"}],["meta",{"name":"twitter:title","content":"Node.js 中开发和生产环境的区别 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"了解 Node.js 中 NODE_ENV 的作用及其对开发和生产环境的影响。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/guide/the-difference-between-development-and-production"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/guide/the-difference-between-development-and-production"}]]},"headers":[],"relativePath":"zh/nodejs/guide/the-difference-between-development-and-production.md","filePath":"zh/nodejs/guide/the-difference-between-development-and-production.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/guide/the-difference-between-development-and-production.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-开发环境和生产环境的区别" tabindex="-1">Node.js，开发环境和生产环境的区别 <a class="header-anchor" href="#node-js-开发环境和生产环境的区别" aria-label="Permalink to “Node.js，开发环境和生产环境的区别”">​</a></h1><p><code>在 Node.js 中，开发环境和生产环境之间没有区别</code>，也就是说，你不需要应用任何特定的设置来使 Node.js 在生产配置中工作。然而，npm 注册表中的一些库会识别 <code>NODE_ENV</code> 变量，并将其默认设置为 <code>development</code> 设置。 始终使用 <code>NODE_ENV=production</code> 设置运行你的 Node.js。</p><p>一种流行的配置应用程序的方法是使用 <a href="https://12factor.net" target="_blank" rel="noreferrer">十二要素方法</a>。</p><h2 id="express-中的-node-env" tabindex="-1">Express 中的 NODE_ENV <a class="header-anchor" href="#express-中的-node-env" aria-label="Permalink to “Express 中的 NODE_ENV”">​</a></h2><p>在非常流行的 <a href="https://expressjs.com" target="_blank" rel="noreferrer">express</a> 框架中，将 NODE_ENV 设置为 production 通常可以确保：</p><ul><li>日志记录保持在最低限度的必要级别</li><li>采用更多的缓存级别来优化性能</li></ul><p>这通常通过在 shell 中执行命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">production</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>来完成，但最好将其放入你的 shell 配置文件（例如，使用 Bash shell 的 <code>.bash_profile</code>）中，否则，如果系统重新启动，该设置将不会保留。</p><p>你还可以通过将环境变量添加到你的应用程序初始化命令前面来应用它：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如，在 Express 应用程序中，你可以使用它来为每个环境设置不同的错误处理程序：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ dumpExceptions: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, showStack: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>例如，<a href="https://pugjs.org" target="_blank" rel="noreferrer">Pug</a>，[Express.js](<a href="https://expressjs.com" target="_blank" rel="noreferrer">https://expressjs.com</a>] 使用的模板库，如果 <code>NODE_ENV</code> 未设置为 <code>production</code>，则会在调试模式下编译。 Express 视图在开发模式下的每次请求中都会被编译，而在生产模式下则会被缓存。 还有更多例子。</p><p><code>此环境变量是在外部库中广泛使用的约定，但不是在 Node.js 本身中使用。</code></p><h2 id="为什么-node-env-被认为是一种反模式" tabindex="-1">为什么 NODE_ENV 被认为是一种反模式？ <a class="header-anchor" href="#为什么-node-env-被认为是一种反模式" aria-label="Permalink to “为什么 NODE_ENV 被认为是一种反模式？”">​</a></h2><p>环境是一个数字平台或系统，工程师可以在其中构建、测试、部署和管理软件产品。 按照惯例，我们的应用程序运行在四个阶段或类型的环境中：</p><ul><li>开发</li><li>暂存</li><li>生产</li><li>测试</li></ul><p><code>NODE_ENV</code> 的根本问题源于开发人员将优化和软件行为与软件运行的环境结合起来。 结果是如下代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;staging&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;testing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>虽然这看起来可能无害，但它使生产环境和暂存环境不同，从而使可靠的测试成为不可能。 例如，当 <code>NODE_ENV</code> 设置为 <code>development</code> 时，测试以及你的产品的功能可能会通过，但在将 <code>NODE_ENV</code> 设置为 <code>production</code> 时会失败。 因此，将 <code>NODE_ENV</code> 设置为 <code>production</code> 以外的任何值都被认为是一种反模式。</p>`,21)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};