import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 调试","description":"Node.js 调试选项，包括 --inspect、--inspect-brk 和 --debug，以及远程调试场景和旧版调试器信息。","frontmatter":{"title":"Node.js 调试","description":"Node.js 调试选项，包括 --inspect、--inspect-brk 和 --debug，以及远程调试场景和旧版调试器信息。","head":[["meta",{"name":"og:title","content":"Node.js 调试 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js 调试选项，包括 --inspect、--inspect-brk 和 --debug，以及远程调试场景和旧版调试器信息。"}],["meta",{"name":"twitter:title","content":"Node.js 调试 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js 调试选项，包括 --inspect、--inspect-brk 和 --debug，以及远程调试场景和旧版调试器信息。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/guide/debugging-nodejs"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/guide/debugging-nodejs"}]]},"headers":[],"relativePath":"zh/nodejs/guide/debugging-nodejs.md","filePath":"zh/nodejs/guide/debugging-nodejs.md","lastUpdated":null}`),a={name:`zh/nodejs/guide/debugging-nodejs.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="调试-node-js" tabindex="-1">调试 Node.js <a class="header-anchor" href="#调试-node-js" aria-label="Permalink to “调试 Node.js”">​</a></h1><p>本指南将帮助您开始调试 Node.js 应用程序和脚本。</p><h2 id="启用-inspector" tabindex="-1">启用 Inspector <a class="header-anchor" href="#启用-inspector" aria-label="Permalink to “启用 Inspector”">​</a></h2><p>使用 <code>--inspect</code> 开关启动时，Node.js 进程会监听调试客户端。默认情况下，它将在主机和端口 <code>127.0.0.1:9229</code> 上监听。每个进程也被分配一个唯一的 UUID。</p><p>Inspector 客户端必须知道并指定主机地址、端口和 UUID 才能连接。完整的 URL 看起来类似于 <code>ws://127.0.0.1:9229/0f2c936f-b1cd-4ac9-aab3-f63b0f33d55e</code>。</p><p>如果 Node.js 收到 <code>SIGUSR1</code> 信号，它也会开始监听调试消息。（Windows 上没有 <code>SIGUSR1</code>。）在 Node.js 7 及更早版本中，这会激活旧版 Debugger API。在 Node.js 8 及更高版本中，它将激活 Inspector API。</p><h2 id="安全隐患" tabindex="-1">安全隐患 <a class="header-anchor" href="#安全隐患" aria-label="Permalink to “安全隐患”">​</a></h2><p>由于调试器可以完全访问 Node.js 执行环境，因此能够连接到此端口的恶意行为者可能能够代表 Node.js 进程执行任意代码。了解在公共和私有网络上暴露调试器端口的安全隐患非常重要。</p><h3 id="公开暴露调试端口是不安全的" tabindex="-1">公开暴露调试端口是不安全的 <a class="header-anchor" href="#公开暴露调试端口是不安全的" aria-label="Permalink to “公开暴露调试端口是不安全的”">​</a></h3><p>如果调试器绑定到公共 IP 地址或 0.0.0.0，任何可以访问您的 IP 地址的客户端都将能够毫无限制地连接到调试器，并且能够运行任意代码。</p><p>默认情况下，<code>node --inspect</code> 绑定到 127.0.0.1。如果您打算允许外部连接到调试器，则需要明确提供公共 IP 地址或 0.0.0.0 等。这样做可能会使您面临潜在的重大安全威胁。我们建议您确保安装适当的防火墙和访问控制，以防止安全漏洞。</p><p>请参阅“<a href="/zh/nodejs/guide/debugging-nodejs#enabling-remote-debugging-scenarios">启用远程调试场景</a>”部分，了解有关如何安全地允许远程调试器客户端连接的一些建议。</p><h3 id="本地应用程序可以完全访问-inspector" tabindex="-1">本地应用程序可以完全访问 inspector <a class="header-anchor" href="#本地应用程序可以完全访问-inspector" aria-label="Permalink to “本地应用程序可以完全访问 inspector”">​</a></h3><p>即使您将 inspector 端口绑定到 127.0.0.1（默认值），本地计算机上运行的任何应用程序也将具有不受限制的访问权限。这是设计使然，以便本地调试器能够方便地附加。</p><h3 id="浏览器、websocket-和同源策略" tabindex="-1">浏览器、WebSocket 和同源策略 <a class="header-anchor" href="#浏览器、websocket-和同源策略" aria-label="Permalink to “浏览器、WebSocket 和同源策略”">​</a></h3><p>在 Web 浏览器中打开的网站可以根据浏览器安全模型发出 WebSocket 和 HTTP 请求。需要初始 HTTP 连接才能获得唯一的调试器会话 ID。同源策略阻止网站建立此 HTTP 连接。为了进一步防止 <a href="https://en.wikipedia.org/wiki/DNS_rebinding" target="_blank" rel="noreferrer">DNS 重绑定攻击</a>，Node.js 验证连接的“Host”标头是否精确地指定了 IP 地址或 <code>localhost</code>。</p><p>这些安全策略禁止通过指定主机名来连接到远程调试服务器。您可以通过指定 IP 地址或使用如下所述的 ssh 隧道来解决此限制。</p><h2 id="inspector-客户端" tabindex="-1">Inspector 客户端 <a class="header-anchor" href="#inspector-客户端" aria-label="Permalink to “Inspector 客户端”">​</a></h2><p>Node.js 提供了一个最小的 CLI 调试器，可以通过 <code>node inspect myscript.js</code> 使用。一些商业和开源工具也可以连接到 Node.js Inspector。</p><h3 id="chrome-devtools-55-microsoft-edge" tabindex="-1">Chrome DevTools 55+，Microsoft Edge <a class="header-anchor" href="#chrome-devtools-55-microsoft-edge" aria-label="Permalink to “Chrome DevTools 55+，Microsoft Edge”">​</a></h3><ul><li><strong>选项 1</strong>: 在基于 Chromium 的浏览器中打开 <code>chrome://inspect</code> 或在 Edge 中打开 <code>edge://inspect</code>。单击“配置”按钮，并确保已列出目标主机和端口。</li><li><strong>选项 2</strong>: 从 <code>/json/list</code> 的输出（见上文）或 <code>--inspect</code> 提示文本中复制 <code>devtoolsFrontendUrl</code> 并粘贴到 Chrome 中。</li></ul><p>更多信息请参阅 <a href="https://github.com/ChromeDevTools/devtools-frontend" target="_blank" rel="noreferrer">https://github.com/ChromeDevTools/devtools-frontend</a>, <a href="https://www.microsoftedgeinsider.com" target="_blank" rel="noreferrer">https://www.microsoftedgeinsider.com</a>。</p><h3 id="visual-studio-code-1-10" tabindex="-1">Visual Studio Code 1.10+ <a class="header-anchor" href="#visual-studio-code-1-10" aria-label="Permalink to “Visual Studio Code 1.10+”">​</a></h3><ul><li>在“调试”面板中，单击设置图标以打开 <code>.vscode/launch.json</code>。选择“Node.js”进行初始设置。</li></ul><p>更多信息请参阅 <a href="https://github.com/microsoft/vscode" target="_blank" rel="noreferrer">https://github.com/microsoft/vscode</a>。</p><h3 id="jetbrains-webstorm-和其他-jetbrains-ide" tabindex="-1">JetBrains WebStorm 和其他 JetBrains IDE <a class="header-anchor" href="#jetbrains-webstorm-和其他-jetbrains-ide" aria-label="Permalink to “JetBrains WebStorm 和其他 JetBrains IDE”">​</a></h3><ul><li>创建一个新的 Node.js 调试配置并点击“调试”。默认情况下，Node.js 7+ 将使用 <code>--inspect</code>。要禁用，请在 IDE 注册表中取消选中 <code>js.debugger.node.use.inspect</code>。要了解有关在 WebStorm 和其他 JetBrains IDE 中运行和调试 Node.js 的更多信息，请查看 <a href="https://www.jetbrains.com/help/webstorm/running-and-debugging-node-js.html" target="_blank" rel="noreferrer">WebStorm 在线帮助</a>。</li></ul><h3 id="chrome-remote-interface" tabindex="-1">chrome-remote-interface <a class="header-anchor" href="#chrome-remote-interface" aria-label="Permalink to “chrome-remote-interface”">​</a></h3><ul><li>用于简化与 <a href="https://chromedevtools.github.io/debugger-protocol-viewer/v8/" target="_blank" rel="noreferrer">Inspector Protocol</a> 端点连接的库。 更多信息请参考 <a href="https://github.com/cyrus-and/chrome-remote-interface" target="_blank" rel="noreferrer">https://github.com/cyrus-and/chrome-remote-interface</a>。</li></ul><h3 id="gitpod" tabindex="-1">Gitpod <a class="header-anchor" href="#gitpod" aria-label="Permalink to “Gitpod”">​</a></h3><ul><li><p>从 <code>Debug</code> 视图启动 Node.js 调试配置，或者按下 <code>F5</code>。详细说明</p><p>更多信息请参考 <a href="https://www.gitpod.io" target="_blank" rel="noreferrer">https://www.gitpod.io</a>。</p></li></ul><h3 id="eclipse-ide-with-eclipse-wild-web-developer-extension" tabindex="-1">Eclipse IDE with Eclipse Wild Web Developer extension <a class="header-anchor" href="#eclipse-ide-with-eclipse-wild-web-developer-extension" aria-label="Permalink to “Eclipse IDE with Eclipse Wild Web Developer extension”">​</a></h3><ul><li><p>从 <code>.js</code> 文件中，选择 <code>Debug As... &gt; Node program</code>，或者创建一个调试配置，将调试器附加到正在运行的 Node.js 应用程序 (已经使用 <code>--inspect</code> 启动)。</p><p>更多信息请参考 <a href="https://eclipse.org/eclipseide" target="_blank" rel="noreferrer">https://eclipse.org/eclipseide</a>。</p></li></ul><h2 id="命令行选项" tabindex="-1">命令行选项 <a class="header-anchor" href="#命令行选项" aria-label="Permalink to “命令行选项”">​</a></h2><p>下表列出了各种运行时标志对调试的影响：</p><table tabindex="0"><thead><tr><th>Flag</th><th>Meaning</th></tr></thead><tbody><tr><td><code>--inspect</code></td><td>启用带有 Node.js Inspector 的调试。监听默认地址和端口 (127.0.0.1:9229)</td></tr><tr><td><code>--inspect-brk</code></td><td>启用带有 Node.js Inspector 的调试。监听默认地址和端口 (127.0.0.1:9229)；在用户代码开始之前中断</td></tr><tr><td><code>--inspect=[host:port]</code></td><td>启用 inspector 代理；绑定到地址或主机名 host (默认值: 127.0.0.1)；监听端口 port (默认值: 9229)</td></tr><tr><td><code>--inspect-brk=[host:port]</code></td><td>启用 inspector 代理；绑定到地址或主机名 host (默认值: 127.0.0.1)；监听端口 port (默认值: 9229)；在用户代码开始之前中断</td></tr><tr><td><code>--inspect-wait</code></td><td>启用 inspector 代理；监听默认地址和端口 (127.0.0.1:9229)；等待调试器附加。</td></tr><tr><td><code>--inspect-wait=[host:port]</code></td><td>启用 inspector 代理；绑定到地址或主机名 host (默认值: 127.0.0.1)；监听端口 port (默认值: 9229)；等待调试器附加。</td></tr><tr><td><code>node inspect script.js</code></td><td>生成子进程以在 --inspect 标志下运行用户的脚本；并使用主进程运行 CLI 调试器。</td></tr><tr><td><code>node inspect --port=xxxx script.js</code></td><td>生成子进程以在 --inspect 标志下运行用户的脚本；并使用主进程运行 CLI 调试器。监听端口 port (默认值: 9229)</td></tr></tbody></table><h2 id="启用远程调试场景" tabindex="-1">启用远程调试场景 <a class="header-anchor" href="#启用远程调试场景" aria-label="Permalink to “启用远程调试场景”">​</a></h2><p>我们建议您永远不要让调试器监听公共 IP 地址。如果您需要允许远程调试连接，我们建议使用 ssh 隧道代替。我们提供以下示例仅用于说明目的。在继续之前，请了解允许远程访问特权服务的安全风险。</p><p>假设您正在远程计算机 remote.example.com 上运行 Node.js，并且希望能够对其进行调试。在该计算机上，您应该启动仅监听 localhost（默认）的检查器的 Node.js 进程。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>现在，在您要从中启动调试器客户端连接的本地计算机上，您可以设置一个 ssh 隧道：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9225:localhost:9229</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote.example.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这将启动一个 ssh 隧道会话，其中到本地计算机上的端口 9221 的连接将被转发到 remote.example.com 上的端口 9229。您现在可以将调试器（例如 Chrome DevTools 或 Visual Studio Code）附加到 localhost:9221，它应该能够像 Node.js 应用程序在本地运行一样进行调试。</p><h2 id="旧版调试器" tabindex="-1">旧版调试器 <a class="header-anchor" href="#旧版调试器" aria-label="Permalink to “旧版调试器”">​</a></h2><p><strong>自 Node.js 7.7.0 起，旧版调试器已被弃用。请改用 --inspect 和 Inspector。</strong></p><p>当在版本 7 及更早版本中使用 <code>--debug</code> 或 <code>--debug-brk</code> 开关启动时，Node.js 会在一个 TCP 端口上监听已停止维护的 V8 调试协议定义的调试命令，默认端口为 <code>5858</code>。任何使用此协议的调试器客户端都可以连接到并调试正在运行的进程；下面列出了几个常用的调试器。</p><p>V8 调试协议不再维护或记录。</p><h3 id="内置调试器" tabindex="-1">内置调试器 <a class="header-anchor" href="#内置调试器" aria-label="Permalink to “内置调试器”">​</a></h3><p>启动 <code>node debug script_name.js</code> 以在内置命令行调试器下启动您的脚本。 您的脚本在另一个使用 <code>--debug-brk</code> 选项启动的 Node.js 进程中启动，并且初始 Node.js 进程运行 <code>_debugger.js</code> 脚本并连接到您的目标。 有关更多信息，请参见 <a href="/zh/nodejs/api/debugger">docs</a>。</p><h3 id="node-inspector" tabindex="-1">node-inspector <a class="header-anchor" href="#node-inspector" aria-label="Permalink to “node-inspector”">​</a></h3><p>通过使用一个中间进程，该进程将 Chromium 中使用的 <a href="https://chromedevtools.github.io/debugger-protocol-viewer/v8/" target="_blank" rel="noreferrer">Inspector 协议</a> 转换为 Node.js 中使用的 V8 调试器协议，从而使用 Chrome DevTools 调试您的 Node.js 应用程序。有关更多信息，请参见 <a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="noreferrer">https://github.com/node-inspector/node-inspector</a>。</p>`,51)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};