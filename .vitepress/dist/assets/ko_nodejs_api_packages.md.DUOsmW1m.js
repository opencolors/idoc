import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 패키지 문서","description":"Node.js의 공식 패키지 문서를 탐색하여 패키지 관리, 생성, 게시 방법과 package.json, 의존성, 패키지 관리 도구에 대한 세부 정보를 알아보세요.","frontmatter":{"title":"Node.js 패키지 문서","description":"Node.js의 공식 패키지 문서를 탐색하여 패키지 관리, 생성, 게시 방법과 package.json, 의존성, 패키지 관리 도구에 대한 세부 정보를 알아보세요.","head":[["meta",{"name":"og:title","content":"Node.js 패키지 문서 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js의 공식 패키지 문서를 탐색하여 패키지 관리, 생성, 게시 방법과 package.json, 의존성, 패키지 관리 도구에 대한 세부 정보를 알아보세요."}],["meta",{"name":"twitter:title","content":"Node.js 패키지 문서 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js의 공식 패키지 문서를 탐색하여 패키지 관리, 생성, 게시 방법과 package.json, 의존성, 패키지 관리 도구에 대한 세부 정보를 알아보세요."}],["link",{"rel":"canonical","href":"https://idoc.dev/ko/nodejs/api/packages"}],["meta",{"property":"og:url","content":"https://idoc.dev/ko/nodejs/api/packages"}]]},"headers":[],"relativePath":"ko/nodejs/api/packages.md","filePath":"ko/nodejs/api/packages.md","lastUpdated":null}`),a={name:`ko/nodejs/api/packages.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="modules-packages" tabindex="-1">모듈: 패키지 <a class="header-anchor" href="#modules-packages" aria-label="Permalink to “모듈: 패키지”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[연혁]</p><table tabindex="0"><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v14.13.0, v12.20.0</td><td><code>&quot;exports&quot;</code> 패턴에 대한 지원 추가.</td></tr><tr><td>v14.6.0, v12.19.0</td><td>패키지 <code>&quot;imports&quot;</code> 필드 추가.</td></tr><tr><td>v13.7.0, v12.17.0</td><td>조건부 내보내기 플래그 해제.</td></tr><tr><td>v13.7.0, v12.16.0</td><td><code>--experimental-conditional-exports</code> 옵션 제거. 12.16.0에서 조건부 내보내기는 여전히 <code>--experimental-modules</code> 뒤에 숨겨져 있습니다.</td></tr><tr><td>v13.6.0, v12.16.0</td><td>해당 이름을 사용하여 패키지를 자체 참조하는 플래그 해제.</td></tr><tr><td>v12.7.0</td><td>클래식 <code>&quot;main&quot;</code> 필드에 대한 보다 강력한 대안으로 <code>&quot;exports&quot;</code> <code>package.json</code> 필드 도입.</td></tr><tr><td>v12.0.0</td><td><code>package.json</code> <code>&quot;type&quot;</code> 필드를 통해 <code>.js</code> 파일 확장자를 사용하는 ES 모듈 지원 추가.</td></tr></tbody></table></div><h2 id="introduction" tabindex="-1">소개 <a class="header-anchor" href="#introduction" aria-label="Permalink to “소개”">​</a></h2><p>패키지는 <code>package.json</code> 파일로 설명되는 폴더 트리입니다. 패키지는 <code>package.json</code> 파일을 포함하는 폴더와 다른 <code>package.json</code> 파일을 포함하는 다음 폴더 또는 <code>node_modules</code>라는 폴더까지의 모든 하위 폴더로 구성됩니다.</p><p>이 페이지는 Node.js에서 정의한 <a href="/ko/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> 필드에 대한 참조와 함께 <code>package.json</code> 파일을 작성하는 패키지 작성자를 위한 지침을 제공합니다.</p><h2 id="determining-module-system" tabindex="-1">모듈 시스템 결정 <a class="header-anchor" href="#determining-module-system" aria-label="Permalink to “모듈 시스템 결정”">​</a></h2><h3 id="introduction_1" tabindex="-1">소개 <a class="header-anchor" href="#introduction_1" aria-label="Permalink to “소개”">​</a></h3><p>Node.js는 다음을 <a href="/ko/nodejs/api/esm">ES 모듈</a>로 처리합니다. <code>node</code>에 초기 입력으로 전달되거나 <code>import</code> 문 또는 <code>import()</code> 표현식으로 참조될 때:</p><ul><li><code>.mjs</code> 확장자를 가진 파일.</li><li>가장 가까운 상위 <code>package.json</code> 파일에 최상위 <a href="/ko/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> 필드가 <code>&quot;module&quot;</code> 값으로 포함된 경우 <code>.js</code> 확장자를 가진 파일.</li><li><code>--eval</code>에 대한 인수로 전달되거나 <code>--input-type=module</code> 플래그와 함께 <code>STDIN</code>을 통해 <code>node</code>로 파이프된 문자열.</li><li><a href="/ko/nodejs/api/esm">ES 모듈</a>로 성공적으로 구문 분석된 구문 (예: <code>import</code> 또는 <code>export</code> 문 또는 <code>import.meta</code>)을 포함하는 코드. 해석 방법을 명시적으로 표시하지 않습니다. 명시적 표시는 <code>.mjs</code> 또는 <code>.cjs</code> 확장자, <code>&quot;module&quot;</code> 또는 <code>&quot;commonjs&quot;</code> 값을 가진 <code>package.json</code> <code>&quot;type&quot;</code> 필드 또는 <code>--input-type</code> 플래그입니다. 동적 <code>import()</code> 표현식은 CommonJS 또는 ES 모듈에서 지원되며 파일을 ES 모듈로 처리하도록 강제하지 않습니다. <a href="/ko/nodejs/api/packages#syntax-detection">구문 감지</a>를 참조하십시오.</li></ul><p>Node.js는 다음을 <a href="/ko/nodejs/api/modules">CommonJS</a>로 처리합니다. <code>node</code>에 초기 입력으로 전달되거나 <code>import</code> 문 또는 <code>import()</code> 표현식으로 참조될 때:</p><ul><li><code>.cjs</code> 확장자를 가진 파일.</li><li>가장 가까운 상위 <code>package.json</code> 파일에 <code>&quot;commonjs&quot;</code> 값이 있는 최상위 필드 <a href="/ko/nodejs/api/packages#type"><code>&quot;type&quot;</code></a>가 포함된 경우 <code>.js</code> 확장자를 가진 파일.</li><li><code>--eval</code> 또는 <code>--print</code>에 대한 인수로 전달되거나 <code>--input-type=commonjs</code> 플래그와 함께 <code>STDIN</code>을 통해 파이프된 문자열.</li><li>상위 <code>package.json</code> 파일이 없거나 가장 가까운 상위 <code>package.json</code> 파일에 <code>type</code> 필드가 없고 코드가 CommonJS로 성공적으로 평가될 수 있는 <code>.js</code> 확장자를 가진 파일. 즉, Node.js는 먼저 이러한 &quot;모호한&quot; 파일을 CommonJS로 실행하려고 시도하고 파서가 ES 모듈 구문을 찾았기 때문에 CommonJS로 평가가 실패하면 ES 모듈로 다시 평가합니다.</li></ul><p>&quot;모호한&quot; 파일에 ES 모듈 구문을 작성하면 성능 비용이 발생하므로 작성자는 가능한 한 명시적으로 작성하는 것이 좋습니다. 특히 패키지 작성자는 모든 소스가 CommonJS인 패키지에서도 항상 <code>package.json</code> 파일에 <a href="/ko/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> 필드를 포함해야 합니다. 패키지 유형에 대해 명시적으로 지정하면 Node.js의 기본 유형이 변경될 경우 패키지를 미래에도 사용할 수 있으며 빌드 도구와 로더가 패키지의 파일을 해석하는 방법을 결정하는 데 더 쉽게 사용할 수 있습니다.</p><h3 id="syntax-detection" tabindex="-1">구문 감지 <a class="header-anchor" href="#syntax-detection" aria-label="Permalink to “구문 감지”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[기록]</p><table tabindex="0"><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v22.7.0</td><td>구문 감지가 기본적으로 활성화되었습니다.</td></tr><tr><td>v21.1.0, v20.10.0</td><td>다음에서 추가됨: v21.1.0, v20.10.0</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[안정성: 1 - 실험적]</p><p><a href="/ko/nodejs/api/documentation#stability-index">안정성: 1</a> <a href="/ko/nodejs/api/documentation#stability-index">안정성: 1</a>.2 - 릴리스 후보</p></div><p>Node.js는 모호한 입력의 소스 코드를 검사하여 ES 모듈 구문이 포함되어 있는지 확인합니다. 해당 구문이 감지되면 입력은 ES 모듈로 처리됩니다.</p><p>모호한 입력은 다음과 같이 정의됩니다.</p><ul><li><code>.js</code> 확장자 또는 확장자가 없는 파일, 제어하는 <code>package.json</code> 파일이 없거나 <code>type</code> 필드가 없는 파일.</li><li><code>--input-type</code>이 지정되지 않은 경우 문자열 입력 (<code>--eval</code> 또는 <code>STDIN</code>).</li></ul><p>ES 모듈 구문은 CommonJS로 평가할 때 오류를 발생시키는 구문으로 정의됩니다. 여기에는 다음이 포함됩니다.</p><ul><li><code>import</code> 문 (단, CommonJS에서 유효한 <code>import()</code> 식은 <em>제외</em>).</li><li><code>export</code> 문.</li><li><code>import.meta</code> 참조.</li><li>모듈 최상위 수준의 <code>await</code>.</li><li>CommonJS 래퍼 변수 (<code>require</code>, <code>module</code>, <code>exports</code>, <code>__dirname</code>, <code>__filename</code>)의 어휘적 재선언.</li></ul><h3 id="modules-loaders" tabindex="-1">모듈 로더 <a class="header-anchor" href="#modules-loaders" aria-label="Permalink to “모듈 로더”">​</a></h3><p>Node.js에는 지정자를 확인하고 모듈을 로드하는 두 가지 시스템이 있습니다.</p><p>CommonJS 모듈 로더가 있습니다.</p><ul><li>완전히 동기적입니다.</li><li><code>require()</code> 호출을 처리합니다.</li><li>몽키 패치 가능합니다.</li><li><a href="/ko/nodejs/api/modules#folders-as-modules">폴더를 모듈로 지원합니다</a>.</li><li>지정자를 확인할 때 정확한 일치 항목이 없으면 확장자 (<code>.js</code>, <code>.json</code>, 마지막으로 <code>.node</code>)를 추가한 다음 <a href="/ko/nodejs/api/modules#folders-as-modules">폴더를 모듈로</a> 확인하려고 시도합니다.</li><li><code>.json</code>을 JSON 텍스트 파일로 처리합니다.</li><li><code>.node</code> 파일은 <code>process.dlopen()</code>으로 로드된 컴파일된 애드온 모듈로 해석됩니다.</li><li><code>.json</code> 또는 <code>.node</code> 확장자가 없는 모든 파일을 JavaScript 텍스트 파일로 처리합니다.</li><li>모듈 그래프가 동기적인 경우 (최상위 <code>await</code>를 포함하지 않음) <a href="/ko/nodejs/api/modules#loading-ecmascript-modules-using-require">CommonJS 모듈에서 ECMAScript 모듈을 로드</a>하는 데만 사용할 수 있습니다. ECMAScript 모듈이 아닌 JavaScript 텍스트 파일을 로드하는 데 사용되는 경우 파일은 CommonJS 모듈로 로드됩니다.</li></ul><p>ECMAScript 모듈 로더가 있습니다.</p><ul><li><code>require()</code>에 사용할 모듈을 로드하는 경우가 아니면 비동기적입니다.</li><li><code>import</code> 문 및 <code>import()</code> 식을 처리합니다.</li><li>몽키 패치 가능하지 않으며 <a href="/ko/nodejs/api/esm#loaders">로더 후크</a>를 사용하여 사용자 정의할 수 있습니다.</li><li>폴더를 모듈로 지원하지 않으며 디렉토리 인덱스 (예: <code>&#39;./startup/index.js&#39;</code>)를 완전히 지정해야 합니다.</li><li>확장자 검색을 수행하지 않습니다. 지정자가 상대적 또는 절대 파일 URL인 경우 파일 확장자를 제공해야 합니다.</li><li>JSON 모듈을 로드할 수 있지만 import 유형 속성이 필요합니다.</li><li>JavaScript 텍스트 파일의 경우 <code>.js</code>, <code>.mjs</code> 및 <code>.cjs</code> 확장자만 허용합니다.</li><li>JavaScript CommonJS 모듈을 로드하는 데 사용할 수 있습니다. 해당 모듈은 <code>cjs-module-lexer</code>를 통해 전달되어 명명된 내보내기를 식별하려고 시도하며, 정적 분석을 통해 결정할 수 있는 경우 사용할 수 있습니다. 가져온 CommonJS 모듈은 URL이 절대 경로로 변환된 다음 CommonJS 모듈 로더를 통해 로드됩니다.</li></ul><h3 id="packagejson-and-file-extensions" tabindex="-1"><code>package.json</code> 및 파일 확장자 <a class="header-anchor" href="#packagejson-and-file-extensions" aria-label="Permalink to “package.json 및 파일 확장자”">​</a></h3><p>패키지 내에서 <a href="/ko/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> <a href="/ko/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> 필드는 Node.js가 <code>.js</code> 파일을 해석하는 방법을 정의합니다. <code>package.json</code> 파일에 <code>&quot;type&quot;</code> 필드가 없으면 <code>.js</code> 파일은 <a href="/ko/nodejs/api/modules">CommonJS</a>로 처리됩니다.</p><p><code>package.json</code>의 <code>&quot;type&quot;</code> 값이 <code>&quot;module&quot;</code>이면 Node.js는 해당 패키지 내의 <code>.js</code> 파일을 <a href="/ko/nodejs/api/esm">ES 모듈</a> 구문을 사용하는 것으로 해석합니다.</p><p><code>&quot;type&quot;</code> 필드는 초기 진입점(<code>node my-app.js</code>)뿐만 아니라 <code>import</code> 문과 <code>import()</code> 표현식으로 참조되는 파일에도 적용됩니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// my-app.js, 동일한 폴더에 &quot;type&quot;: &quot;module&quot;이 있는 package.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 파일이 있으므로 ES 모듈로 처리됩니다.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./startup/init.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./startup에 package.json 파일이 없으므로 ES 모듈로 로드됩니다.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 따라서 한 단계 위의 &quot;type&quot; 값을 상속합니다.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;commonjs-package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/commonjs-package/package.json에</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;type&quot; 필드가 없거나 &quot;type&quot;: &quot;commonjs&quot;가 포함되어 있으므로 CommonJS로 로드됩니다.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./node_modules/commonjs-package/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/commonjs-package/package.json에</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;type&quot; 필드가 없거나 &quot;type&quot;: &quot;commonjs&quot;가 포함되어 있으므로 CommonJS로 로드됩니다.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>.mjs</code>로 끝나는 파일은 가장 가까운 상위 <code>package.json</code>에 관계없이 항상 <a href="/ko/nodejs/api/esm">ES 모듈</a>로 로드됩니다.</p><p><code>.cjs</code>로 끝나는 파일은 가장 가까운 상위 <code>package.json</code>에 관계없이 항상 <a href="/ko/nodejs/api/modules">CommonJS</a>로 로드됩니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./legacy-file.cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .cjs는 항상 CommonJS로 로드되므로 CommonJS로 로드됩니다.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;commonjs-package/src/index.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .mjs는 항상 ES 모듈로 로드되므로 ES 모듈로 로드됩니다.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>.mjs</code> 및 <code>.cjs</code> 확장자를 사용하여 동일한 패키지 내에서 유형을 혼합할 수 있습니다.</p><ul><li><code>&quot;type&quot;: &quot;module&quot;</code> 패키지 내에서 Node.js는 특정 파일을 <code>.cjs</code> 확장자로 이름을 지정하여 <a href="/ko/nodejs/api/modules">CommonJS</a>로 해석하도록 지시할 수 있습니다(<code>.js</code> 및 <code>.mjs</code> 파일은 모두 <code>&quot;module&quot;</code> 패키지 내에서 ES 모듈로 처리되기 때문입니다).</li><li><code>&quot;type&quot;: &quot;commonjs&quot;</code> 패키지 내에서 Node.js는 특정 파일을 <code>.mjs</code> 확장자로 이름을 지정하여 <a href="/ko/nodejs/api/esm">ES 모듈</a>로 해석하도록 지시할 수 있습니다(<code>.js</code> 및 <code>.cjs</code> 파일은 모두 <code>&quot;commonjs&quot;</code> 패키지 내에서 CommonJS로 처리되기 때문입니다).</li></ul><h3 id="--input-type-flag" tabindex="-1"><code>--input-type</code> 플래그 <a class="header-anchor" href="#--input-type-flag" aria-label="Permalink to “--input-type 플래그”">​</a></h3><p><strong>추가된 버전: v12.0.0</strong></p><p><code>--eval</code> (또는 <code>-e</code>)에 인수로 전달되거나 <code>STDIN</code>을 통해 <code>node</code>로 파이프되는 문자열은 <code>--input-type=module</code> 플래그가 설정되면 <a href="/ko/nodejs/api/esm">ES 모듈</a>로 처리됩니다.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --input-type=module</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;import { sep } from &#39;node:path&#39;; console.log(sep);&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;import { sep } from &#39;node:path&#39;; console.log(sep);&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --input-type=module</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>완전성을 위해 문자열 입력을 CommonJS로 명시적으로 실행하기 위한 <code>--input-type=commonjs</code>도 있습니다. 이는 <code>--input-type</code>이 지정되지 않은 경우의 기본 동작입니다.</p><h2 id="determining-package-manager" tabindex="-1">패키지 관리자 결정 <a class="header-anchor" href="#determining-package-manager" aria-label="Permalink to “패키지 관리자 결정”">​</a></h2><div class="warning custom-block"><p class="custom-block-title">[안정성: 1 - 실험적]</p><p><a href="/ko/nodejs/api/documentation#stability-index">안정성: 1</a> <a href="/ko/nodejs/api/documentation#stability-index">안정성: 1</a> - 실험적</p></div><p>모든 Node.js 프로젝트는 게시되면 모든 패키지 관리자로 설치할 수 있을 것으로 예상되지만, 개발 팀은 종종 하나의 특정 패키지 관리자를 사용해야 합니다. 이 프로세스를 더 쉽게 만들기 위해 Node.js는 환경에서 모든 패키지 관리자를 투명하게 사용할 수 있도록 하는 것을 목표로 하는 <a href="/ko/nodejs/api/corepack">Corepack</a>이라는 도구를 제공합니다. 단, Node.js가 설치되어 있어야 합니다.</p><p>기본적으로 Corepack은 특정 패키지 관리자를 강제하지 않으며 각 Node.js 릴리스와 연결된 일반적인 &quot;마지막으로 알려진 양호한&quot; 버전을 사용하지만 프로젝트의 <code>package.json</code>에서 <a href="/ko/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> 필드를 설정하여 이 경험을 개선할 수 있습니다.</p><h2 id="package-entry-points" tabindex="-1">패키지 진입점 <a class="header-anchor" href="#package-entry-points" aria-label="Permalink to “패키지 진입점”">​</a></h2><p>패키지의 <code>package.json</code> 파일에서 두 개의 필드가 패키지의 진입점을 정의할 수 있습니다. <a href="/ko/nodejs/api/packages#main"><code>&quot;main&quot;</code></a>과 <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>입니다. 두 필드 모두 ES 모듈 및 CommonJS 모듈 진입점에 적용됩니다.</p><p><a href="/ko/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> 필드는 모든 버전의 Node.js에서 지원되지만 기능은 제한적입니다. 패키지의 기본 진입점만 정의합니다.</p><p><a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>는 <a href="/ko/nodejs/api/packages#main"><code>&quot;main&quot;</code></a>에 대한 최신 대안을 제공하여 여러 진입점을 정의하고 환경 간의 조건부 진입점 해결을 지원하며 <strong><a href="#exports"><code>&quot;exports&quot;</code></a>에 정의된 진입점 외에 다른 진입점을 방지합니다</strong>. 이 캡슐화를 통해 모듈 작성자는 패키지의 공용 인터페이스를 명확하게 정의할 수 있습니다.</p><p>현재 지원되는 Node.js 버전을 대상으로 하는 새 패키지의 경우 <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 필드를 권장합니다. Node.js 10 이하를 지원하는 패키지의 경우 <a href="/ko/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> 필드가 필요합니다. <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>와 <a href="/ko/nodejs/api/packages#main"><code>&quot;main&quot;</code></a>이 모두 정의된 경우 지원되는 Node.js 버전에서는 <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 필드가 <a href="/ko/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> 필드보다 우선합니다.</p><p><a href="/ko/nodejs/api/packages#conditional-exports">조건부 내보내기</a>는 <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 내에서 사용하여 패키지가 <code>require</code> 또는 <code>import</code>를 통해 참조되는지 여부를 포함하여 환경별로 다른 패키지 진입점을 정의할 수 있습니다. 단일 패키지에서 CommonJS와 ES 모듈을 모두 지원하는 방법에 대한 자세한 내용은 <a href="/ko/nodejs/api/packages#dual-commonjses-module-packages">이중 CommonJS/ES 모듈 패키지 섹션</a>을 참조하십시오.</p><p><a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 필드를 도입하는 기존 패키지는 패키지의 소비자가 정의되지 않은 진입점(예: <a href="/ko/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a>(예: <code>require(&#39;your-package/package.json&#39;)</code>))을 사용하는 것을 방지합니다. <strong>이는 파괴적인 변경일 가능성이 높습니다.</strong></p><p><a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>의 도입을 파괴적이지 않게 만들려면 이전에 지원되었던 모든 진입점이 내보내지도록 하십시오. 패키지의 공용 API가 잘 정의되도록 진입점을 명시적으로 지정하는 것이 가장 좋습니다. 예를 들어 이전에 <code>main</code>, <code>lib</code>, <code>feature</code> 및 <code>package.json</code>을 내보낸 프로젝트는 다음 <code>package.exports</code>를 사용할 수 있습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./package.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>또는 프로젝트는 내보내기 패턴을 사용하여 확장된 하위 경로를 사용하거나 사용하지 않고 전체 폴더를 내보내도록 선택할 수 있습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./package.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>위의 코드는 모든 마이너 패키지 버전에 대한 이전 버전과의 호환성을 제공하므로 패키지에 대한 향후 주요 변경 사항은 내보내기를 노출된 특정 기능 내보내기로 적절하게 제한할 수 있습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/internal/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="main-entry-point-export" tabindex="-1">주요 진입점 내보내기 <a class="header-anchor" href="#main-entry-point-export" aria-label="Permalink to “주요 진입점 내보내기”">​</a></h3><p>새 패키지를 작성할 때 <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 필드를 사용하는 것이 좋습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 필드가 정의되면 패키지의 모든 하위 경로는 캡슐화되어 더 이상 임포터에서 사용할 수 없습니다. 예를 들어, <code>require(&#39;pkg/subpath.js&#39;)</code>는 <a href="/ko/nodejs/api/errors#err-package-path-not-exported"><code>ERR_PACKAGE_PATH_NOT_EXPORTED</code></a> 오류를 발생시킵니다.</p><p>이러한 내보내기 캡슐화는 도구에 대한 패키지 인터페이스와 패키지에 대한 semver 업그레이드를 처리할 때 더 안정적인 보장을 제공합니다. <code>require(&#39;/path/to/node_modules/pkg/subpath.js&#39;)</code>와 같은 패키지의 절대 하위 경로를 직접 요구하면 <code>subpath.js</code>가 여전히 로드되므로 강력한 캡슐화는 아닙니다.</p><p>현재 지원되는 모든 Node.js 버전과 최신 빌드 도구는 <code>&quot;exports&quot;</code> 필드를 지원합니다. 이전 버전의 Node.js 또는 관련 빌드 도구를 사용하는 프로젝트의 경우 <code>&quot;main&quot;</code> 필드를 <code>&quot;exports&quot;</code>와 함께 포함하여 동일한 모듈을 가리키도록 하여 호환성을 확보할 수 있습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="subpath-exports" tabindex="-1">하위 경로 내보내기 <a class="header-anchor" href="#subpath-exports" aria-label="Permalink to “하위 경로 내보내기”">​</a></h3><p><strong>추가됨: v12.7.0</strong></p><p><a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 필드를 사용할 때 주요 진입점을 <code>&quot;.&quot;</code> 하위 경로로 취급하여 주요 진입점과 함께 사용자 지정 하위 경로를 정의할 수 있습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./submodule.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/submodule.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>이제 <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>에 정의된 하위 경로만 소비자가 가져올 수 있습니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> submodule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/submodule.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/src/submodule.js를 로드합니다.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>다른 하위 경로는 오류가 발생합니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> submodule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/private-module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ERR_PACKAGE_PATH_NOT_EXPORTED 오류를 발생시킵니다.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="extensions-in-subpaths" tabindex="-1">하위 경로의 확장자 <a class="header-anchor" href="#extensions-in-subpaths" aria-label="Permalink to “하위 경로의 확장자”">​</a></h4><p>패키지 작성자는 내보내기에서 확장자가 있는 하위 경로(<code>import &#39;pkg/subpath.js&#39;</code>) 또는 확장자가 없는 하위 경로(<code>import &#39;pkg/subpath&#39;</code>)를 제공해야 합니다. 이를 통해 내보낸 각 모듈에 대해 하나의 하위 경로만 존재하므로 모든 종속 항목이 동일한 일관된 지정자를 가져와 소비자에 대한 패키지 계약을 명확하게 유지하고 패키지 하위 경로 완료를 단순화합니다.</p><p>전통적으로 패키지는 확장자가 없는 스타일을 사용하는 경향이 있었는데, 이는 가독성이 뛰어나고 패키지 내 파일의 실제 경로를 숨기는 데 도움이 됩니다.</p><p>이제 <a href="https://github.com/WICG/import-maps" target="_blank" rel="noreferrer">import maps</a>가 브라우저 및 기타 JavaScript 런타임에서 패키지 해결을 위한 표준을 제공함에 따라 확장자가 없는 스타일을 사용하면 import map 정의가 부풀려질 수 있습니다. 명시적 파일 확장자를 사용하면 <a href="https://github.com/WICG/import-maps#packages-via-trailing-slashes" target="_blank" rel="noreferrer">패키지 폴더 매핑</a>을 활용하여 가능한 경우 패키지 하위 경로 내보내기당 별도의 맵 항목 대신 여러 하위 경로를 매핑할 수 있습니다. 이는 상대 및 절대 가져오기 지정자에서 <a href="/ko/nodejs/api/esm#mandatory-file-extensions">전체 지정자 경로</a>를 사용해야 하는 요구 사항도 반영합니다.</p><h3 id="exports-sugar" tabindex="-1">내보내기 단순화 <a class="header-anchor" href="#exports-sugar" aria-label="Permalink to “내보내기 단순화”">​</a></h3><p><strong>Added in: v12.11.0</strong></p><p><code>&quot;.&quot;</code> 내보내기가 유일한 내보내기인 경우, <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 필드는 이 경우를 위한 간단한 방법으로 직접 <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 필드 값을 제공합니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>다음과 같이 작성할 수 있습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="subpath-imports" tabindex="-1">서브 경로 가져오기 <a class="header-anchor" href="#subpath-imports" aria-label="Permalink to “서브 경로 가져오기”">​</a></h3><p><strong>Added in: v14.6.0, v12.19.0</strong></p><p><a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 필드 외에도 패키지 자체 내에서 가져오기 지정자에만 적용되는 개인 매핑을 만드는 패키지 <code>&quot;imports&quot;</code> 필드가 있습니다.</p><p><code>&quot;imports&quot;</code> 필드의 항목은 외부 패키지 지정자와 구별되도록 항상 <code>#</code>으로 시작해야 합니다.</p><p>예를 들어, imports 필드를 사용하여 내부 모듈에 대한 조건부 내보내기의 이점을 얻을 수 있습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#dep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dep-polyfill.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>여기서 <code>import &#39;#dep&#39;</code>은 외부 패키지 <code>dep-node-native</code>의 해결(결과적으로 해당 내보내기 포함)을 얻지 않고, 대신 다른 환경에서 패키지를 기준으로 로컬 파일 <code>./dep-polyfill.js</code>를 가져옵니다.</p><p><code>&quot;exports&quot;</code> 필드와 달리 <code>&quot;imports&quot;</code> 필드는 외부 패키지로의 매핑을 허용합니다.</p><p>imports 필드에 대한 해결 규칙은 exports 필드와 유사합니다.</p><h3 id="subpath-patterns" tabindex="-1">서브 경로 패턴 <a class="header-anchor" href="#subpath-patterns" aria-label="Permalink to “서브 경로 패턴”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v16.10.0, v14.19.0</td><td>&quot;imports&quot; 필드에서 패턴 트레일러를 지원합니다.</td></tr><tr><td>v16.9.0, v14.19.0</td><td>패턴 트레일러를 지원합니다.</td></tr><tr><td>v14.13.0, v12.20.0</td><td>Added in: v14.13.0, v12.20.0</td></tr></tbody></table></div><p>내보내기 또는 가져오기가 적은 패키지의 경우 각 내보내기 서브 경로 항목을 명시적으로 나열하는 것이 좋습니다. 그러나 서브 경로가 많은 패키지의 경우 <code>package.json</code>이 비대해지고 유지 관리 문제가 발생할 수 있습니다.</p><p>이러한 사용 사례에서는 서브 경로 내보내기 패턴을 대신 사용할 수 있습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/features/*.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#internal/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/internal/*.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong><code>*</code> 맵은 문자열 대체 구문일 뿐이므로 중첩된 서브 경로를 노출합니다.</strong></p><p>오른쪽의 <code>*</code>의 모든 인스턴스는 <code>/</code> 구분 기호를 포함하는 경우를 포함하여 이 값으로 대체됩니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/x.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/src/features/x.js를 로드합니다.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/y/y.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/src/features/y/y.js를 로드합니다.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> internalZ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#internal/z.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/src/internal/z.js를 로드합니다.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>이는 파일 확장자에 대한 특별한 처리 없이 직접적인 정적 일치 및 대체입니다. 매핑의 양쪽에 <code>&quot;*.js&quot;</code>를 포함하면 노출된 패키지 내보내기가 JS 파일로만 제한됩니다.</p><p>패키지에 대한 개별 내보내기를 패키지 내 파일 목록에 대해 오른쪽 대상 패턴을 <code>**</code> glob으로 처리하여 결정할 수 있으므로 내보내기가 정적으로 열거 가능하다는 속성이 내보내기 패턴으로 유지됩니다. <code>node_modules</code> 경로가 내보내기 대상에서 금지되어 있으므로 이 확장은 패키지 자체의 파일에만 의존합니다.</p><p>개인 하위 폴더를 패턴에서 제외하려면 <code>null</code> 대상을 사용할 수 있습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/private-internal/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureInternal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/private-internal/m.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 오류 발생: ERR_PACKAGE_PATH_NOT_EXPORTED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/x.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/src/features/x.js를 로드합니다.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="conditional-exports" tabindex="-1">조건부 내보내기 <a class="header-anchor" href="#conditional-exports" aria-label="Permalink to “조건부 내보내기”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[기록]</p><table tabindex="0"><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v13.7.0, v12.16.0</td><td>조건부 내보내기의 플래그를 해제합니다.</td></tr><tr><td>v13.2.0, v12.16.0</td><td>다음에서 추가됨: v13.2.0, v12.16.0</td></tr></tbody></table></div><p>조건부 내보내기는 특정 조건에 따라 다른 경로에 매핑하는 방법을 제공합니다. CommonJS 및 ES 모듈 가져오기 모두에서 지원됩니다.</p><p>예를 들어, <code>require()</code> 및 <code>import</code>에 대해 서로 다른 ES 모듈 내보내기를 제공하려는 패키지는 다음과 같이 작성할 수 있습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index-module.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index-require.cjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Node.js는 조건을 정의할 때 가장 구체적인 것부터 가장 덜 구체적인 것 순으로 나열된 다음 조건을 구현합니다.</p><ul><li><code>&quot;node-addons&quot;</code> - <code>&quot;node&quot;</code>와 유사하며 모든 Node.js 환경에 대해 일치합니다. 이 조건은 기본 C++ 애드온을 사용하는 진입점을, 보다 보편적이고 기본 애드온에 의존하지 않는 진입점과 대조적으로 제공하는 데 사용할 수 있습니다. 이 조건은 <a href="/ko/nodejs/api/cli#no-addons"><code>--no-addons</code> 플래그</a>를 통해 비활성화할 수 있습니다.</li><li><code>&quot;node&quot;</code> - 모든 Node.js 환경에 대해 일치합니다. CommonJS 또는 ES 모듈 파일일 수 있습니다. <em>대부분의 경우 Node.js 플랫폼을 명시적으로 호출하는 것은 필요하지 않습니다.</em></li><li><code>&quot;import&quot;</code> - 패키지가 <code>import</code> 또는 <code>import()</code>를 통해 로드되거나 ECMAScript 모듈 로더에 의한 최상위 가져오기 또는 확인 작업을 통해 로드될 때 일치합니다. 대상 파일의 모듈 형식에 관계없이 적용됩니다. <em>항상 <code>&quot;require&quot;</code>와 상호 배타적입니다.</em></li><li><code>&quot;require&quot;</code> - 패키지가 <code>require()</code>를 통해 로드될 때 일치합니다. 조건이 대상 파일의 모듈 형식에 관계없이 일치하더라도 참조된 파일은 <code>require()</code>로 로드할 수 있어야 합니다. 예상되는 형식에는 CommonJS, JSON, 기본 애드온 및 ES 모듈이 포함됩니다. <em>항상 <code>&quot;import&quot;</code>와 상호 배타적입니다.</em></li><li><code>&quot;module-sync&quot;</code> - 패키지가 <code>import</code>, <code>import()</code> 또는 <code>require()</code>를 통해 로드되든 상관없이 일치합니다. 형식은 모듈 그래프에 최상위 await가 포함되지 않은 ES 모듈일 것으로 예상됩니다. 포함된 경우 모듈이 <code>require()</code>로 처리될 때 <code>ERR_REQUIRE_ASYNC_MODULE</code>이 발생합니다.</li><li><code>&quot;default&quot;</code> - 항상 일치하는 일반적인 폴백입니다. CommonJS 또는 ES 모듈 파일일 수 있습니다. <em>이 조건은 항상 마지막에 와야 합니다.</em></li></ul><p><a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 객체 내에서 키 순서는 중요합니다. 조건 일치 중에 이전 항목이 우선 순위가 높고 나중 항목보다 우선합니다. <em>일반적인 규칙은 조건이 객체 순서에서 가장 구체적인 것부터 가장 덜 구체적인 것 순이어야 한다는 것입니다</em>.</p><p><code>&quot;import&quot;</code> 및 <code>&quot;require&quot;</code> 조건을 사용하면 몇 가지 위험이 발생할 수 있으며 이에 대한 자세한 내용은 <a href="/ko/nodejs/api/packages#dual-commonjses-module-packages">이중 CommonJS/ES 모듈 패키지 섹션</a>에 설명되어 있습니다.</p><p><code>&quot;node-addons&quot;</code> 조건은 기본 C++ 애드온을 사용하는 진입점을 제공하는 데 사용할 수 있습니다. 그러나 이 조건은 <a href="/ko/nodejs/api/cli#no-addons"><code>--no-addons</code> 플래그</a>를 통해 비활성화할 수 있습니다. <code>&quot;node-addons&quot;</code>를 사용하는 경우 <code>&quot;default&quot;</code>를 기본 애드온 대신 WebAssembly를 사용하여 보다 보편적인 진입점을 제공하는 개선 사항으로 취급하는 것이 좋습니다.</p><p>조건부 내보내기를 내보내기 하위 경로로 확장할 수도 있습니다. 예를 들어 다음과 같습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>require(&#39;pkg/feature.js&#39;)</code> 및 <code>import &#39;pkg/feature.js&#39;)</code>가 Node.js와 다른 JS 환경 간에 다른 구현을 제공할 수 있는 패키지를 정의합니다.</p><p>환경 분기를 사용하는 경우 가능하면 항상 <code>&quot;default&quot;</code> 조건을 포함하십시오. <code>&quot;default&quot;</code> 조건을 제공하면 알 수 없는 모든 JS 환경에서 이 범용 구현을 사용할 수 있으므로 이러한 JS 환경이 조건부 내보내기가 있는 패키지를 지원하기 위해 기존 환경인 척할 필요가 없습니다. 이러한 이유로 <code>&quot;node&quot;</code> 및 <code>&quot;default&quot;</code> 조건 분기를 사용하는 것이 일반적으로 <code>&quot;node&quot;</code> 및 <code>&quot;browser&quot;</code> 조건 분기를 사용하는 것보다 좋습니다.</p><h3 id="nested-conditions" tabindex="-1">중첩 조건 <a class="header-anchor" href="#nested-conditions" aria-label="Permalink to “중첩 조건”">​</a></h3><p>Node.js는 직접 매핑 외에도 중첩 조건 객체를 지원합니다.</p><p>예를 들어 Node.js에서만 이중 모드 진입점을 사용하고 브라우저에서는 사용하지 않는 패키지를 정의하려면 다음과 같습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.cjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature.mjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>조건은 평면 조건과 마찬가지로 순서대로 계속 일치됩니다. 중첩 조건에 매핑이 없으면 상위 조건의 나머지 조건을 계속 확인합니다. 이러한 방식으로 중첩 조건은 중첩된 JavaScript <code>if</code> 문과 유사하게 동작합니다.</p><h3 id="resolving-user-conditions" tabindex="-1">사용자 조건 해결 <a class="header-anchor" href="#resolving-user-conditions" aria-label="Permalink to “사용자 조건 해결”">​</a></h3><p><strong>다음 버전에서 추가됨: v14.9.0, v12.19.0</strong></p><p>Node.js를 실행할 때 <code>--conditions</code> 플래그를 사용하여 사용자 지정 사용자 조건을 추가할 수 있습니다.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --conditions=development</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>이렇게 하면 패키지 가져오기 및 내보내기에서 <code>&quot;development&quot;</code> 조건이 해결되고 기존 <code>&quot;node&quot;</code>, <code>&quot;node-addons&quot;</code>, <code>&quot;default&quot;</code>, <code>&quot;import&quot;</code> 및 <code>&quot;require&quot;</code> 조건이 적절하게 해결됩니다.</p><p>반복 플래그를 사용하여 사용자 지정 조건을 원하는 만큼 설정할 수 있습니다.</p><p>일반적인 조건에는 영숫자 문자만 포함되어야 하며 필요한 경우 &quot;:&quot; &quot;-&quot;, 또는 &quot;=&quot;를 구분 기호로 사용해야 합니다. 다른 모든 것은 노드 외부에서 호환성 문제가 발생할 수 있습니다.</p><p>노드에서는 조건에 제한이 거의 없지만 특히 다음이 포함됩니다.</p><h3 id="community-conditions-definitions" tabindex="-1">커뮤니티 조건 정의 <a class="header-anchor" href="#community-conditions-definitions" aria-label="Permalink to “커뮤니티 조건 정의”">​</a></h3><p>Node.js 코어에 구현된 <a href="/ko/nodejs/api/packages#conditional-exports"><code>&quot;import&quot;</code>, <code>&quot;require&quot;</code>, <code>&quot;node&quot;</code>, <code>&quot;module-sync&quot;</code>, <code>&quot;node-addons&quot;</code> 및 <code>&quot;default&quot;</code> 조건을 제외한 조건 문자열은 기본적으로 무시됩니다.</a></p><p>다른 플랫폼은 다른 조건을 구현할 수 있으며 Node.js에서 사용자 조건은 <a href="/ko/nodejs/api/packages#resolving-user-conditions"><code>--conditions</code> / <code>-C</code> 플래그</a>를 통해 활성화할 수 있습니다.</p><p>사용자 지정 패키지 조건은 올바른 사용을 보장하기 위해 명확한 정의가 필요하므로 일반적인 알려진 패키지 조건 목록과 엄격한 정의가 아래에 제공되어 에코시스템 조정을 지원합니다.</p><ul><li><code>&quot;types&quot;</code> - 주어진 내보내기에 대한 타이핑 파일을 해결하기 위해 타이핑 시스템에서 사용할 수 있습니다. <em>이 조건은 항상 먼저 포함되어야 합니다.</em></li><li><code>&quot;browser&quot;</code> - 모든 웹 브라우저 환경.</li><li><code>&quot;development&quot;</code> - 개발 전용 환경 진입점을 정의하는 데 사용할 수 있습니다. 예를 들어 개발 모드에서 실행할 때 더 나은 오류 메시지와 같은 추가 디버깅 컨텍스트를 제공합니다. <em>항상 <code>&quot;production&quot;</code>과 상호 배타적이어야 합니다.</em></li><li><code>&quot;production&quot;</code> - 프로덕션 환경 진입점을 정의하는 데 사용할 수 있습니다. <em>항상 <code>&quot;development&quot;</code>과 상호 배타적이어야 합니다.</em></li></ul><p>다른 런타임의 경우 플랫폼별 조건 키 정의는 <a href="https://wintercg.org/" target="_blank" rel="noreferrer">WinterCG</a>에서 <a href="https://runtime-keys.proposal.wintercg.org/" target="_blank" rel="noreferrer">런타임 키</a> 제안 사양으로 유지 관리됩니다.</p><p>새로운 조건 정의는 <a href="https://github.com/nodejs/node/blob/HEAD/doc/api/packages.md#conditions-definitions" target="_blank" rel="noreferrer">이 섹션에 대한 Node.js 문서</a>에 풀 요청을 생성하여 이 목록에 추가할 수 있습니다. 여기에 새로운 조건 정의를 나열하기 위한 요구 사항은 다음과 같습니다.</p><ul><li>정의는 모든 구현자에게 명확하고 모호하지 않아야 합니다.</li><li>조건이 필요한 이유에 대한 사용 사례가 명확하게 정당화되어야 합니다.</li><li>충분한 기존 구현 사용이 있어야 합니다.</li><li>조건 이름은 다른 조건 정의 또는 널리 사용되는 조건과 충돌해서는 안 됩니다.</li><li>조건 정의 목록은 다른 방법으로는 불가능한 에코시스템에 조정 이점을 제공해야 합니다. 예를 들어 회사별 또는 애플리케이션별 조건에는 반드시 해당되지 않습니다.</li><li>조건은 Node.js 사용자가 Node.js 코어 문서에 있을 것으로 예상하는 조건이어야 합니다. <code>&quot;types&quot;</code> 조건이 좋은 예입니다. 실제로 <a href="https://runtime-keys.proposal.wintercg.org/" target="_blank" rel="noreferrer">런타임 키</a> 제안에 속하지 않지만 여기 Node.js 문서에 적합합니다.</li></ul><p>위의 정의는 적절한 시기에 전용 조건 레지스트리로 이동될 수 있습니다.</p><h3 id="self-referencing-a-package-using-its-name" tabindex="-1">패키지 이름을 사용하여 패키지 자체 참조 <a class="header-anchor" href="#self-referencing-a-package-using-its-name" aria-label="Permalink to “패키지 이름을 사용하여 패키지 자체 참조”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v13.6.0, v12.16.0</td><td>패키지 이름을 사용하여 패키지 자체를 참조하는 것을 플래그 해제합니다.</td></tr><tr><td>v13.1.0, v12.16.0</td><td>다음 버전에서 추가됨: v13.1.0, v12.16.0</td></tr></tbody></table></div><p>패키지 내에서 패키지의 <code>package.json</code> <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 필드에 정의된 값은 패키지 이름을 통해 참조할 수 있습니다. 예를 들어, <code>package.json</code>이 다음과 같다고 가정합니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./foo.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>그러면 <em>해당 패키지</em>의 모든 모듈은 패키지 자체의 내보내기를 참조할 수 있습니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./a-module.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { something } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a-package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./index.mjs에서 &quot;something&quot;을 가져옵니다.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>자체 참조는 <code>package.json</code>에 <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>가 있는 경우에만 사용할 수 있으며, 해당 <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>(<code>package.json</code>에 있음)가 허용하는 항목만 가져올 수 있습니다. 따라서 이전 패키지가 주어진 경우 아래 코드는 런타임 오류를 생성합니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./another-module.mjs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./m.mjs에서 &quot;another&quot;를 가져옵니다. &quot;package.json&quot; &quot;exports&quot; 필드가</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;./m.mjs&quot;라는 내보내기를 제공하지 않으므로 실패합니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { another } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a-package/m.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>자체 참조는 ES 모듈과 CommonJS 모듈 모두에서 <code>require</code>를 사용할 때도 사용할 수 있습니다. 예를 들어, 이 코드도 작동합니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./a-module.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">something</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a-package/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./foo.js에서 로드합니다.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>마지막으로 자체 참조는 범위가 지정된 패키지에서도 작동합니다. 예를 들어, 이 코드도 작동합니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@my/package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./index.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./other.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@my/package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> other.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="dual-commonjs/es-module-packages" tabindex="-1">이중 CommonJS/ES 모듈 패키지 <a class="header-anchor" href="#dual-commonjs/es-module-packages" aria-label="Permalink to “이중 CommonJS/ES 모듈 패키지”">​</a></h2><p>자세한 내용은 <a href="https://github.com/nodejs/package-examples" target="_blank" rel="noreferrer">패키지 예제 저장소</a>를 참조하십시오.</p><h2 id="nodejs-packagejson-field-definitions" tabindex="-1">Node.js <code>package.json</code> 필드 정의 <a class="header-anchor" href="#nodejs-packagejson-field-definitions" aria-label="Permalink to “Node.js package.json 필드 정의”">​</a></h2><p>이 섹션에서는 Node.js 런타임에서 사용되는 필드를 설명합니다. 다른 도구(<a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json" target="_blank" rel="noreferrer">npm</a>과 같은)는 Node.js에서 무시되고 여기에 문서화되지 않은 추가 필드를 사용합니다.</p><p><code>package.json</code> 파일의 다음 필드는 Node.js에서 사용됩니다.</p><ul><li><a href="/ko/nodejs/api/packages#name"><code>&quot;name&quot;</code></a> - 패키지 내에서 명명된 가져오기를 사용할 때 관련됩니다. 패키지 관리자에서도 패키지 이름으로 사용됩니다.</li><li><a href="/ko/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> - 내보내기가 지정되지 않은 경우, 그리고 내보내기 도입 이전의 Node.js 버전에서 패키지를 로드할 때의 기본 모듈입니다.</li><li><a href="/ko/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> - 패키지에 기여할 때 권장되는 패키지 관리자입니다. <a href="/ko/nodejs/api/corepack">Corepack</a> 심에서 활용됩니다.</li><li><a href="/ko/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> - <code>.js</code> 파일을 CommonJS 또는 ES 모듈로 로드할지 여부를 결정하는 패키지 유형입니다.</li><li><a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> - 패키지 내보내기 및 조건부 내보내기입니다. 있는 경우 패키지 내에서 로드할 수 있는 하위 모듈을 제한합니다.</li><li><a href="/ko/nodejs/api/packages#imports"><code>&quot;imports&quot;</code></a> - 패키지 자체 내의 모듈에서 사용할 수 있는 패키지 가져오기입니다.</li></ul><h3 id="name" tabindex="-1"><code>&quot;name&quot;</code> <a class="header-anchor" href="#name" aria-label="Permalink to “&quot;name&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v13.6.0, v12.16.0</td><td><code>--experimental-resolve-self</code> 옵션 제거.</td></tr><tr><td>v13.1.0, v12.16.0</td><td>추가됨: v13.1.0, v12.16.0</td></tr></tbody></table></div><ul><li>유형: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;package-name&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&quot;name&quot;</code> 필드는 패키지의 이름을 정의합니다. <em>npm</em> 레지스트리에 게시하려면 <a href="https://docs.npmjs.com/files/package.json#name" target="_blank" rel="noreferrer">특정 요구 사항</a>을 충족하는 이름이 필요합니다.</p><p><code>&quot;name&quot;</code> 필드는 <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 필드와 함께 패키지 이름을 사용하여 패키지를 <a href="/ko/nodejs/api/packages#self-referencing-a-package-using-its-name">자체 참조</a>하는 데 사용할 수 있습니다.</p><h3 id="main" tabindex="-1"><code>&quot;main&quot;</code> <a class="header-anchor" href="#main" aria-label="Permalink to “&quot;main&quot;”">​</a></h3><p><strong>추가됨: v0.4.0</strong></p><ul><li>유형: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&quot;main&quot;</code> 필드는 <code>node_modules</code> 조회를 통해 이름으로 가져올 때 패키지의 진입점을 정의합니다. 값은 경로입니다.</p><p>패키지에 <a href="/ko/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 필드가 있는 경우 이름을 통해 패키지를 가져올 때 <code>&quot;main&quot;</code> 필드보다 우선합니다.</p><p>또한 <a href="/ko/nodejs/api/modules#folders-as-modules">패키지 디렉토리가 <code>require()</code>를 통해 로드될 때</a> 사용되는 스크립트를 정의합니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./path/to/directory/index.js로 해석됩니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./path/to/directory&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="packagemanager" tabindex="-1"><code>&quot;packageManager&quot;</code> <a class="header-anchor" href="#packagemanager" aria-label="Permalink to “&quot;packageManager&quot;”">​</a></h3><p><strong>추가됨: v16.9.0, v14.19.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[안정성: 1 - 실험적]</p><p><a href="/ko/nodejs/api/documentation#stability-index">안정성: 1</a> <a href="/ko/nodejs/api/documentation#stability-index">안정성: 1</a> - 실험적</p></div><ul><li>유형: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;packageManager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;패키지 관리자 이름&gt;@&lt;버전&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&quot;packageManager&quot;</code> 필드는 현재 프로젝트에서 작업할 때 사용할 패키지 관리자를 정의합니다. <a href="/ko/nodejs/api/corepack#supported-package-managers">지원되는 패키지 관리자</a> 중 하나로 설정할 수 있으며, Node.js 외에 다른 것을 설치하지 않고도 팀이 정확히 동일한 패키지 관리자 버전을 사용하도록 보장합니다.</p><p>이 필드는 현재 실험적이며 옵트인이 필요합니다. 자세한 내용은 <a href="/ko/nodejs/api/corepack">Corepack</a> 페이지를 확인하십시오.</p><h3 id="type" tabindex="-1"><code>&quot;type&quot;</code> <a class="header-anchor" href="#type" aria-label="Permalink to “&quot;type&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[기록]</p><table tabindex="0"><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v13.2.0, v12.17.0</td><td><code>--experimental-modules</code> 플래그를 제거했습니다.</td></tr><tr><td>v12.0.0</td><td>추가됨: v12.0.0</td></tr></tbody></table></div><ul><li>유형: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>&quot;type&quot;</code> 필드는 해당 <code>package.json</code> 파일을 가장 가까운 부모로 갖는 모든 <code>.js</code> 파일에 대해 Node.js가 사용하는 모듈 형식을 정의합니다.</p><p>가장 가까운 부모 <code>package.json</code> 파일에 최상위 필드 <code>&quot;type&quot;</code>이 있고 값이 <code>&quot;module&quot;</code>인 경우 <code>.js</code>로 끝나는 파일은 ES 모듈로 로드됩니다.</p><p>가장 가까운 부모 <code>package.json</code>은 현재 폴더, 해당 폴더의 부모 등 node_modules 폴더 또는 볼륨 루트에 도달할 때까지 검색할 때 발견되는 첫 번째 <code>package.json</code>으로 정의됩니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 이전 package.json과 동일한 폴더에 있음 {#in-same-folder-as-preceding-packagejson}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ES 모듈로 실행</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>가장 가까운 부모 <code>package.json</code>에 <code>&quot;type&quot;</code> 필드가 없거나 <code>&quot;type&quot;: &quot;commonjs&quot;</code>가 포함된 경우 <code>.js</code> 파일은 <a href="/ko/nodejs/api/modules">CommonJS</a>로 처리됩니다. 볼륨 루트에 도달하고 <code>package.json</code>이 발견되지 않으면 <code>.js</code> 파일은 <a href="/ko/nodejs/api/modules">CommonJS</a>로 처리됩니다.</p><p>가장 가까운 부모 <code>package.json</code>에 <code>&quot;type&quot;: &quot;module&quot;</code>이 포함된 경우 <code>.js</code> 파일의 <code>import</code> 문은 ES 모듈로 처리됩니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// my-app.js, 위의 예와 동일한 부분</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./startup.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json 때문에 ES 모듈로 로드됨</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>&quot;type&quot;</code> 필드의 값에 관계없이 <code>.mjs</code> 파일은 항상 ES 모듈로 처리되고 <code>.cjs</code> 파일은 항상 CommonJS로 처리됩니다.</p><h3 id="exports" tabindex="-1"><code>&quot;exports&quot;</code> <a class="header-anchor" href="#exports" aria-label="Permalink to “&quot;exports&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[기록]</p><table tabindex="0"><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v14.13.0, v12.20.0</td><td><code>&quot;exports&quot;</code> 패턴에 대한 지원을 추가했습니다.</td></tr><tr><td>v13.7.0, v12.17.0</td><td>조건부 내보내기 플래그를 제거했습니다.</td></tr><tr><td>v13.7.0, v12.16.0</td><td>논리적 조건부 내보내기 순서를 구현합니다.</td></tr><tr><td>v13.7.0, v12.16.0</td><td><code>--experimental-conditional-exports</code> 옵션을 제거합니다. 12.16.0에서 조건부 내보내기는 여전히 <code>--experimental-modules</code> 뒤에 있습니다.</td></tr><tr><td>v13.2.0, v12.16.0</td><td>조건부 내보내기를 구현합니다.</td></tr><tr><td>v12.7.0</td><td>추가됨: v12.7.0</td></tr></tbody></table></div><ul><li>유형: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&quot;exports&quot;</code> 필드를 사용하면 <code>node_modules</code> 검색 또는 자체 이름에 대한 <a href="/ko/nodejs/api/packages#self-referencing-a-package-using-its-name">자체 참조</a>를 통해 로드된 이름으로 가져올 때 패키지의 <a href="/ko/nodejs/api/packages#package-entry-points">진입점</a>을 정의할 수 있습니다. Node.js 12+에서 <a href="/ko/nodejs/api/packages#subpath-exports">서브 경로 내보내기</a> 및 <a href="/ko/nodejs/api/packages#conditional-exports">조건부 내보내기</a>를 지원하면서 내부 내보내지 않은 모듈을 캡슐화할 수 있는 <a href="/ko/nodejs/api/packages#main"><code>&quot;main&quot;</code></a>의 대안으로 지원됩니다.</p><p><a href="/ko/nodejs/api/packages#conditional-exports">조건부 내보내기</a>는 <code>&quot;exports&quot;</code> 내에서 사용하여 패키지가 <code>require</code>를 통해 참조되는지 또는 <code>import</code>를 통해 참조되는지 여부를 포함하여 환경별로 다른 패키지 진입점을 정의할 수도 있습니다.</p><p><code>&quot;exports&quot;</code>에 정의된 모든 경로는 <code>./</code>로 시작하는 상대 파일 URL이어야 합니다.</p><h3 id="imports" tabindex="-1"><code>&quot;imports&quot;</code> <a class="header-anchor" href="#imports" aria-label="Permalink to “&quot;imports&quot;”">​</a></h3><p><strong>추가된 버전: v14.6.0, v12.19.0</strong></p><ul><li>유형: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#dep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dep-polyfill.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>imports 필드의 항목은 <code>#</code>로 시작하는 문자열이어야 합니다.</p><p>패키지 imports는 외부 패키지에 매핑을 허용합니다.</p><p>이 필드는 현재 패키지에 대한 <a href="/ko/nodejs/api/packages#subpath-imports">서브 경로 imports</a>를 정의합니다.</p>`,209)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};