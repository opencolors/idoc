import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node-API 패키지发布","description":"Node-API 버전의 패키지를 비-Node-API 버전과 함께 출시하는 방법과 패키지에 Node-API 버전의 의존성을 도입하는 방법에 대해 알아보십시오.","frontmatter":{"title":"Node-API 패키지发布","description":"Node-API 버전의 패키지를 비-Node-API 버전과 함께 출시하는 방법과 패키지에 Node-API 버전의 의존성을 도입하는 방법에 대해 알아보십시오.","head":[["meta",{"name":"og:title","content":"Node-API 패키지发布 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node-API 버전의 패키지를 비-Node-API 버전과 함께 출시하는 방법과 패키지에 Node-API 버전의 의존성을 도입하는 방법에 대해 알아보십시오."}],["meta",{"name":"twitter:title","content":"Node-API 패키지发布 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node-API 버전의 패키지를 비-Node-API 버전과 함께 출시하는 방법과 패키지에 Node-API 버전의 의존성을 도입하는 방법에 대해 알아보십시오."}],["link",{"rel":"canonical","href":"https://idoc.dev/ko/nodejs/guide/how-to-publish-a-nodejs-package"}],["meta",{"property":"og:url","content":"https://idoc.dev/ko/nodejs/guide/how-to-publish-a-nodejs-package"}]]},"headers":[],"relativePath":"ko/nodejs/guide/how-to-publish-a-nodejs-package.md","filePath":"ko/nodejs/guide/how-to-publish-a-nodejs-package.md","lastUpdated":1749464498000}`),a={name:`ko/nodejs/guide/how-to-publish-a-nodejs-package.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-api-패키지를-게시하는-방법" tabindex="-1">Node-API 패키지를 게시하는 방법 <a class="header-anchor" href="#node-api-패키지를-게시하는-방법" aria-label="Permalink to “Node-API 패키지를 게시하는 방법”">​</a></h1><h2 id="node-api-버전이-아닌-패키지와-함께-node-api-버전을-게시하는-방법" tabindex="-1">Node-API 버전이 아닌 패키지와 함께 Node-API 버전을 게시하는 방법 <a class="header-anchor" href="#node-api-버전이-아닌-패키지와-함께-node-api-버전을-게시하는-방법" aria-label="Permalink to “Node-API 버전이 아닌 패키지와 함께 Node-API 버전을 게시하는 방법”">​</a></h2><p>다음 단계는 <code>iotivity-node</code> 패키지를 사용하여 설명됩니다.</p><ul><li><p>먼저 Node-API 버전이 아닌 버전을 게시합니다.</p><ul><li><code>package.json</code>에서 버전을 업데이트합니다. <code>iotivity-node</code>의 경우 버전이 1.2.0-2가 됩니다.</li><li>릴리스 체크리스트를 확인합니다(테스트/데모/문서가 OK인지 확인).</li><li><code>npm publish</code>.</li></ul></li><li><p>그런 다음 Node-API 버전을 게시합니다.</p><ul><li><code>package.json</code>에서 버전을 업데이트합니다. <code>iotivity-node</code>의 경우 버전이 1.2.0-3이 됩니다. 버전 관리의 경우 <a href="https://semver.org" target="_blank" rel="noreferrer">semver.org</a>에서 설명하는 대로 미리 릴리스 버전 체계를 따르는 것이 좋습니다(예: 1.2.0-napi).</li><li>릴리스 체크리스트를 확인합니다(테스트/데모/문서가 OK인지 확인).</li><li><code>npm publish --tag n-api</code>.</li></ul></li></ul><p>이 예에서 <code>n-api</code>로 릴리스를 태깅하면 버전 1.2.0-3이 게시된 Node-API 버전이 아닌 버전(1.2.0-2)보다 늦더라도 누군가가 <code>npm install iotivity-node</code>를 실행하여 <code>iotivity-node</code>를 설치하도록 선택하는 경우 설치되지 않습니다. 이렇게 하면 기본적으로 Node-API 버전이 아닌 버전이 설치됩니다. 사용자는 Node-API 버전을 받으려면 <code>npm install iotivity-node@n api</code>를 실행해야 합니다. npm으로 태그를 사용하는 방법에 대한 자세한 내용은 &quot;dist-tags 사용&quot;을 확인하십시오.</p><h2 id="패키지의-node-api-버전에-대한-종속성을-도입하는-방법" tabindex="-1">패키지의 Node-API 버전에 대한 종속성을 도입하는 방법 <a class="header-anchor" href="#패키지의-node-api-버전에-대한-종속성을-도입하는-방법" aria-label="Permalink to “패키지의 Node-API 버전에 대한 종속성을 도입하는 방법”">​</a></h2><p><code>iotivity-node</code>의 Node-API 버전을 종속성으로 추가하려면 <code>package.json</code>은 다음과 같습니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;iotivity-node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;n-api&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>&quot;dist-tags 사용&quot;에서 설명한 대로 일반 버전과 달리 태그가 지정된 버전은 <code>package.json</code> 내에서 <code>&quot;^2.0.0&quot;</code>과 같은 버전 범위로 처리할 수 없습니다. 그 이유는 태그가 정확히 하나의 버전을 나타내기 때문입니다. 따라서 패키지 유지 관리자가 동일한 태그를 사용하여 패키지의 최신 버전을 태그하도록 선택하면 <code>npm update</code>는 최신 버전을 받게 됩니다. 이것은 허용 가능한 버전이어야 합니다. 게시된 최신 버전이 아닌 다른 버전인 경우 <code>package.json</code> 종속성은 다음과 같이 정확한 버전을 참조해야 합니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;iotivity-node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.2.0-3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,10)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};