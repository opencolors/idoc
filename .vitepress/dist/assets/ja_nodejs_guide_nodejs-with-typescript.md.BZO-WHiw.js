import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js と TypeScript","description":"Node.js で TypeScript を使用する方法を学びます。TypeScript の利点、インストール、使用方法を紹介します。また、TypeScript コードをコンパイルして実行する方法や、機能、ツールについても紹介します。","frontmatter":{"title":"Node.js と TypeScript","description":"Node.js で TypeScript を使用する方法を学びます。TypeScript の利点、インストール、使用方法を紹介します。また、TypeScript コードをコンパイルして実行する方法や、機能、ツールについても紹介します。","head":[["meta",{"name":"og:title","content":"Node.js と TypeScript | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js で TypeScript を使用する方法を学びます。TypeScript の利点、インストール、使用方法を紹介します。また、TypeScript コードをコンパイルして実行する方法や、機能、ツールについても紹介します。"}],["meta",{"name":"twitter:title","content":"Node.js と TypeScript | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js で TypeScript を使用する方法を学びます。TypeScript の利点、インストール、使用方法を紹介します。また、TypeScript コードをコンパイルして実行する方法や、機能、ツールについても紹介します。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/guide/nodejs-with-typescript"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/guide/nodejs-with-typescript"}]]},"headers":[],"relativePath":"ja/nodejs/guide/nodejs-with-typescript.md","filePath":"ja/nodejs/guide/nodejs-with-typescript.md","lastUpdated":null}`),a={name:`ja/nodejs/guide/nodejs-with-typescript.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="typescript-を使用した-node-js" tabindex="-1">TypeScript を使用した Node.js <a class="header-anchor" href="#typescript-を使用した-node-js" aria-label="Permalink to “TypeScript を使用した Node.js”">​</a></h1><h2 id="typescript-とは" tabindex="-1">TypeScript とは <a class="header-anchor" href="#typescript-とは" aria-label="Permalink to “TypeScript とは”">​</a></h2><p><a href="https://www.typescriptlang.org" target="_blank" rel="noreferrer">TypeScript</a> は、Microsoft によって維持および開発されているオープンソースの言語です。世界中の多くのソフトウェア開発者に愛され、使用されています。</p><p>基本的には、JavaScript のスーパーセットであり、言語に新しい機能を追加します。最も注目すべき追加機能は静的型定義であり、これはプレーンな JavaScript には存在しません。型のおかげで、たとえば、関数でどのような引数を期待しているか、正確に何が返されるか、または作成しているオブジェクトの正確な形状を宣言することができます。TypeScript は非常に強力なツールであり、JavaScript プロジェクトに新しい可能性の世界を開きます。コードをより安全かつ堅牢にし、コードが出荷される前に多くのバグを防ぎます。コード開発中に問題を検出し、Visual Studio Code などのコードエディタと素晴らしく統合されます。</p><p>TypeScript のその他の利点については後で説明しますが、いくつかの例を見てみましょう。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to “例”">​</a></h3><p>このコードスニペットを見てから、一緒に分解しましょう。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> justine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Justine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isJustineAnAdult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(justine)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>最初の部分 (<code>type</code> キーワードを使用) は、ユーザーを表すカスタムオブジェクト型を宣言する役割を担っています。後で、この新しく作成された型を利用して、<code>User</code> 型の引数を 1 つ受け取り、<code>boolean</code> を返す関数 <code>isAdult</code> を作成します。この後、以前に定義した関数を呼び出すために使用できるサンプルデータ <code>justine</code> を作成します。最後に、<code>justine</code> が成人であるかどうかに関する情報を持つ新しい変数を作成します。</p><p>この例について知っておくべき追加事項があります。まず、宣言された型に従わない場合、TypeScript は何かがおかしいことを警告し、誤用を防ぎます。次に、すべてを明示的に型指定する必要はありません。TypeScript は非常に賢く、型を推測できます。たとえば、<code>isJustineAnAdult</code> 変数は、明示的に型指定しなくても boolean 型になり、<code>justine</code> 変数は、<code>User</code> 型として宣言していなくても、関数に対して有効な引数になります。</p><p>さて、TypeScript のコードがあります。これをどのように実行しますか？</p><p><strong>まず、TypeScript をプロジェクトにインストールします。</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>次に、ターミナルで <code>tsc</code> コマンドを使用して JavaScript にコンパイルできます。やってみましょう。</p><p><strong>ファイル名が <code>example.ts</code> であると仮定すると、コマンドは次のようになります。</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong><a href="https://www.npmjs.com/package/npx" target="_blank" rel="noreferrer">npx</a> は、Node Package Execute の略です。このツールを使用すると、TypeScript のコンパイラをグローバルにインストールせずに実行できます。</strong></p></div><p><code>tsc</code> は TypeScript コンパイラであり、TypeScript コードを取得して JavaScript にコンパイルします。このコマンドにより、Node.js を使用して実行できる <code>example.js</code> という名前の新しいファイルが生成されます。TypeScript コードをコンパイルして実行する方法がわかったので、TypeScript のバグ防止機能を実際に見てみましょう。</p><p><strong>コードを次のように変更します。</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> justine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Justine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Secret!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isJustineAnAdult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(justine, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I shouldn&#39;t be here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>そして、TypeScript がこれについて述べていることは次のとおりです。</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">example.ts:12:5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TS2322:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assignable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     age:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Secret!&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  example.ts:3:5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     age:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          ~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> expected</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> comes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> property</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;age&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> declared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> here</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;User&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">example.ts:15:7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TS2322:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;boolean&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assignable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">15</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isJustineAnAdult:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">justine,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I shouldn&#39;t be here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         ~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">example.ts:15:51</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TS2554:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Expected</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arguments,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> but</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> got</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">15</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isJustineAnAdult:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">justine,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I shouldn&#39;t be here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                                                     ~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Found</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> errors</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> same</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts:12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>ご覧のとおり、TypeScript は予期しない動作をする可能性のあるコードの出荷を正常に防ぎます。それは素晴らしいことです！</p><h2 id="typescript-についてもっと詳しく" tabindex="-1">TypeScript についてもっと詳しく <a class="header-anchor" href="#typescript-についてもっと詳しく" aria-label="Permalink to “TypeScript についてもっと詳しく”">​</a></h2><p>TypeScript は、インターフェース、クラス、ユーティリティ型など、他にも多くの優れたメカニズムを提供します。また、大規模なプロジェクトでは、TypeScript コンパイラの設定を別のファイルで宣言し、その動作、厳密さ、コンパイルされたファイルの保存場所などを細かく調整できます。これらの素晴らしい機能の詳細については、<a href="https://www.typescriptlang.org/docs" target="_blank" rel="noreferrer">公式の TypeScript ドキュメント</a> を参照してください。</p><p>TypeScript のその他の利点として、段階的に導入できること、コードをより読みやすく理解しやすくできること、開発者が最新の言語機能を使用しながら、古いバージョンの Node.js 用にコードを出荷できることなどが挙げられます。</p><h2 id="node-js-での-typescript-コードの実行" tabindex="-1">Node.js での TypeScript コードの実行 <a class="header-anchor" href="#node-js-での-typescript-コードの実行" aria-label="Permalink to “Node.js での TypeScript コードの実行”">​</a></h2><p>Node.js は TypeScript をネイティブに実行できません。コマンドラインから直接 <code>node example.ts</code> を呼び出すことはできません。しかし、この問題には 3 つの解決策があります。</p><h3 id="typescript-から-javascript-へのコンパイル" tabindex="-1">TypeScript から JavaScript へのコンパイル <a class="header-anchor" href="#typescript-から-javascript-へのコンパイル" aria-label="Permalink to “TypeScript から JavaScript へのコンパイル”">​</a></h3><p>Node.js で TypeScript コードを実行する場合は、最初に JavaScript にコンパイルする必要があります。これは、前述のように TypeScript コンパイラ <code>tsc</code> を使用して実行できます。</p><p>簡単な例を次に示します。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="ts-node-を使用した-typescript-コードの実行" tabindex="-1"><code>ts-node</code> を使用した TypeScript コードの実行 <a class="header-anchor" href="#ts-node-を使用した-typescript-コードの実行" aria-label="Permalink to “ts-node を使用した TypeScript コードの実行”">​</a></h3><p><a href="https://www.npmjs.com/package/ts-node" target="_blank" rel="noreferrer">ts-node</a> を使用すると、TypeScript コードを最初にコンパイルせずに Node.js で直接実行できます。ただし、コードの型チェックは行いません。そのため、コードを出荷する前に、最初に <code>tsc</code> でコードの型チェックを行い、次に <code>ts-node</code> で実行することをお勧めします。</p><p><code>ts-node</code> を使用するには、最初にインストールする必要があります。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">次に、次のようにして</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TypeScript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> コードを実行できます。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node example.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="tsx-を使用した-typescript-コードの実行" tabindex="-1"><code>tsx</code> を使用した TypeScript コードの実行 <a class="header-anchor" href="#tsx-を使用した-typescript-コードの実行" aria-label="Permalink to “tsx を使用した TypeScript コードの実行”">​</a></h3><p><a href="https://www.npmjs.com/package/tsx" target="_blank" rel="noreferrer">tsx</a> を使用すると、TypeScript コードを最初にコンパイルせずに Node.js で直接実行できます。ただし、コードの型チェックは行いません。そのため、コードを出荷する前に、最初に <code>tsc</code> でコードの型チェックを行い、次に <code>tsx</code> で実行することをお勧めします。</p><p>tsx を使用するには、最初にインストールする必要があります。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>次に、次のようにして TypeScript コードを実行できます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>node</code> 経由で <code>tsx</code> を使用する場合は、<code>--import</code> を介して <code>tsx</code> を登録できます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --import=tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="node-jsの世界におけるtypescript" tabindex="-1">Node.jsの世界におけるTypeScript <a class="header-anchor" href="#node-jsの世界におけるtypescript" aria-label="Permalink to “Node.jsの世界におけるTypeScript”">​</a></h2><p>TypeScriptはNode.jsの世界で確立されており、多くの企業、オープンソースプロジェクト、ツール、フレームワークで使用されています。TypeScriptを使用している著名なオープンソースプロジェクトの例をいくつか挙げます。</p><ul><li><a href="https://nestjs.com" target="_blank" rel="noreferrer">NestJS</a> - スケーラブルで適切に設計されたシステムを簡単かつ快適に作成できる、堅牢でフル機能を備えたフレームワーク</li><li><a href="https://typeorm.io" target="_blank" rel="noreferrer">TypeORM</a> - Hibernate、Doctrine、Entity Frameworkなど、他の言語の有名なツールに影響を受けた優れたORM</li><li><a href="https://prisma.io" target="_blank" rel="noreferrer">Prisma</a> - 宣言的なデータモデル、生成されたマイグレーション、および完全にタイプセーフなデータベースクエリを備えた次世代ORM</li><li><a href="https://rxjs.dev" target="_blank" rel="noreferrer">RxJS</a> - リアクティブプログラミングのための広く使用されているライブラリ</li><li><a href="https://adonisjs.com" target="_blank" rel="noreferrer">AdonisJS</a> - Node.jsを使用したフル機能のWebフレームワーク</li><li><a href="https://foal.dev" target="_blank" rel="noreferrer">FoalTs</a> - エレガントなNodejsフレームワーク</li></ul><p>そして、他にもたくさんの素晴らしいプロジェクトがあります... もしかしたら、あなたの次のプロジェクトもそうかもしれません！</p>`,48)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};