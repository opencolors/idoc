import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 与 WebAssembly","description":"WebAssembly 是一种高性能的类汇编语言，可以从各种语言编译，包括 C/C++、Rust 和 AssemblyScript。Node.js 通过全局 WebAssembly 对象提供必要的 API 与 WebAssembly 通信。","frontmatter":{"title":"Node.js 与 WebAssembly","description":"WebAssembly 是一种高性能的类汇编语言，可以从各种语言编译，包括 C/C++、Rust 和 AssemblyScript。Node.js 通过全局 WebAssembly 对象提供必要的 API 与 WebAssembly 通信。","head":[["meta",{"name":"og:title","content":"Node.js 与 WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"WebAssembly 是一种高性能的类汇编语言，可以从各种语言编译，包括 C/C++、Rust 和 AssemblyScript。Node.js 通过全局 WebAssembly 对象提供必要的 API 与 WebAssembly 通信。"}],["meta",{"name":"twitter:title","content":"Node.js 与 WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"WebAssembly 是一种高性能的类汇编语言，可以从各种语言编译，包括 C/C++、Rust 和 AssemblyScript。Node.js 通过全局 WebAssembly 对象提供必要的 API 与 WebAssembly 通信。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/guide/nodejs-with-webassembly"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/guide/nodejs-with-webassembly"}]]},"headers":[],"relativePath":"zh/nodejs/guide/nodejs-with-webassembly.md","filePath":"zh/nodejs/guide/nodejs-with-webassembly.md","lastUpdated":null}`),a={name:`zh/nodejs/guide/nodejs-with-webassembly.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-与-webassembly" tabindex="-1">Node.js 与 WebAssembly <a class="header-anchor" href="#node-js-与-webassembly" aria-label="Permalink to “Node.js 与 WebAssembly”">​</a></h1><p><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> 是一种高性能的、类似汇编的语言，可以从各种语言编译而来，包括 C/C++、Rust 和 AssemblyScript。目前，它已被 Chrome、Firefox、Safari、Edge 和 Node.js 所支持！</p><p>WebAssembly 规范详细说明了两种文件格式：一种是二进制格式，称为 WebAssembly 模块，带有 <code>.wasm</code> 扩展名；另一种是相应的文本表示形式，称为 WebAssembly 文本格式，带有 <code>.wat</code> 扩展名。</p><h2 id="关键概念" tabindex="-1">关键概念 <a class="header-anchor" href="#关键概念" aria-label="Permalink to “关键概念”">​</a></h2><ul><li>Module（模块）- 一个已编译的 WebAssembly 二进制文件，即一个 <code>.wasm</code> 文件。</li><li>Memory（内存）- 一个可调整大小的 ArrayBuffer。</li><li>Table（表）- 一个可调整大小的类型化引用数组，不存储在 Memory 中。</li><li>Instance（实例）- 一个 Module 的实例化，包含其 Memory、Table 和变量。</li></ul><p>为了使用 WebAssembly，你需要一个 <code>.wasm</code> 二进制文件和一组用于与 WebAssembly 通信的 API。Node.js 通过全局 <code>WebAssembly</code> 对象提供了必要的 API。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebAssembly)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Object [WebAssembly] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  compile: [Function: compile],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  validate: [Function: validate],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  instantiate: [Function: instantiate]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="生成-webassembly-模块" tabindex="-1">生成 WebAssembly 模块 <a class="header-anchor" href="#生成-webassembly-模块" aria-label="Permalink to “生成 WebAssembly 模块”">​</a></h2><p>有多种方法可以生成 WebAssembly 二进制文件，包括：</p><ul><li>手动编写 WebAssembly (<code>.wat</code>) 并使用 <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a> 等工具将其转换为二进制格式。</li><li>将 <a href="https://github.com/emscripten-core/emscripten" target="_blank" rel="noreferrer">emscripten</a> 与 C/C++ 应用程序一起使用</li><li>将 <a href="https://github.com/rustwasm/wasm-pack" target="_blank" rel="noreferrer">wasm-pack</a> 与 Rust 应用程序一起使用</li><li>如果你更喜欢类似 TypeScript 的体验，可以使用 <a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noreferrer">AssemblyScript</a></li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong>其中一些工具不仅生成二进制文件，还生成 JavaScript &quot;胶水&quot; 代码和相应的 HTML 文件，以便在浏览器中运行。</strong></p></div><h2 id="如何使用它" tabindex="-1">如何使用它 <a class="header-anchor" href="#如何使用它" aria-label="Permalink to “如何使用它”">​</a></h2><p>一旦你拥有了一个 WebAssembly 模块，你就可以使用 Node.js 的 <code>WebAssembly</code> 对象来实例化它。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/add.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasmBuffer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wasmModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 导出的函数存在于 instance.exports 下</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmModule.instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="与操作系统交互" tabindex="-1">与操作系统交互 <a class="header-anchor" href="#与操作系统交互" aria-label="Permalink to “与操作系统交互”">​</a></h2><p>WebAssembly 模块本身无法直接访问操作系统功能。第三方工具 <a href="https://github.com/bytecodealliance/wasmtime" target="_blank" rel="noreferrer">Wasmtime</a> 可用于访问此功能。<code>Wasmtime</code> 利用 <a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a> API 来访问操作系统功能。</p><h2 id="资源" tabindex="-1">资源 <a class="header-anchor" href="#资源" aria-label="Permalink to “资源”">​</a></h2><ul><li><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly 通用信息</a></li><li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noreferrer">MDN 文档</a></li><li><a href="https://webassembly.github.io/spec/core/text/index.html" target="_blank" rel="noreferrer">手动编写 WebAssembly</a></li></ul>`,18)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};