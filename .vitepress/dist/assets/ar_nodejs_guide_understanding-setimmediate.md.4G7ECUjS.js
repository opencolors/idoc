import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"فهم setImmediate() في Node.js","description":"تعلم كيفية عمل setImmediate() في Node.js، واختلافاته عن setTimeout() و process.nextTick() و Promise.then()، وكيفية تفاعله مع حلقة الأحداث والطوابير.","frontmatter":{"title":"فهم setImmediate() في Node.js","description":"تعلم كيفية عمل setImmediate() في Node.js، واختلافاته عن setTimeout() و process.nextTick() و Promise.then()، وكيفية تفاعله مع حلقة الأحداث والطوابير.","head":[["meta",{"name":"og:title","content":"فهم setImmediate() في Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"تعلم كيفية عمل setImmediate() في Node.js، واختلافاته عن setTimeout() و process.nextTick() و Promise.then()، وكيفية تفاعله مع حلقة الأحداث والطوابير."}],["meta",{"name":"twitter:title","content":"فهم setImmediate() في Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"تعلم كيفية عمل setImmediate() في Node.js، واختلافاته عن setTimeout() و process.nextTick() و Promise.then()، وكيفية تفاعله مع حلقة الأحداث والطوابير."}],["link",{"rel":"canonical","href":"https://idoc.dev/ar/nodejs/guide/understanding-setimmediate"}],["meta",{"property":"og:url","content":"https://idoc.dev/ar/nodejs/guide/understanding-setimmediate"}]]},"headers":[],"relativePath":"ar/nodejs/guide/understanding-setimmediate.md","filePath":"ar/nodejs/guide/understanding-setimmediate.md","lastUpdated":null}`),a={name:`ar/nodejs/guide/understanding-setimmediate.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="فهم-setimmediate" tabindex="-1">فهم <code>setImmediate()</code> <a class="header-anchor" href="#فهم-setimmediate" aria-label="Permalink to “فهم setImmediate()”">​</a></h1><p>عندما تريد تنفيذ جزء من التعليمات البرمجية بشكل غير متزامن، ولكن في أقرب وقت ممكن، فإن أحد الخيارات هو استخدام الدالة <code>setImmediate()</code> التي توفرها Node.js:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // قم بعمل ما</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>أي دالة يتم تمريرها كوسيطة <code>setImmediate()</code> هي دالة رد نداء يتم تنفيذها في التكرار التالي لحلقة الأحداث.</p><p>كيف تختلف <code>setImmediate()</code> عن <code>setTimeout(() =&gt; {}, 0)</code> (تمرير مهلة 0 مللي ثانية)، وعن <code>process.nextTick()</code> و <code>Promise.then()</code>؟</p><p>سيتم تنفيذ الدالة التي تم تمريرها إلى <code>process.nextTick()</code> في التكرار الحالي لحلقة الأحداث، بعد انتهاء العملية الحالية. هذا يعني أنها ستنفذ دائمًا قبل <code>setTimeout</code> و <code>setImmediate</code>.</p><p>يشبه رد نداء <code>setTimeout()</code> مع تأخير 0 مللي ثانية <code>setImmediate()</code> تمامًا. سيعتمد ترتيب التنفيذ على عوامل مختلفة، ولكن سيتم تشغيلهما في التكرار التالي لحلقة الأحداث.</p><p>تتم إضافة رد نداء <code>process.nextTick</code> إلى <strong>قائمة انتظار process.nextTick</strong>. تتم إضافة رد نداء <code>Promise.then()</code> إلى <strong>قائمة انتظار المهام الصغيرة للوعود</strong>. تتم إضافة رد نداء <code>setTimeout</code> و <code>setImmediate</code> إلى <strong>قائمة انتظار المهام الكبيرة</strong>.</p><p>تقوم حلقة الأحداث بتنفيذ المهام في <strong>قائمة انتظار process.nextTick</strong> أولاً، ثم تنفذ <strong>قائمة انتظار المهام الصغيرة للوعود</strong>، ثم تنفذ <code>setTimeout</code> أو <code>setImmediate</code> <strong>قائمة انتظار المهام الكبيرة</strong>.</p><p>فيما يلي مثال لإظهار الترتيب بين <code>setImmediate()</code> و <code>process.nextTick()</code> و <code>Promise.then()</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> zoo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zoo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baz);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(zoo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start foo bar zoo baz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>سيستدعي هذا الرمز أولاً <code>start()</code>، ثم يستدعي <code>foo()</code> في <strong>قائمة انتظار process.nextTick</strong>. بعد ذلك، سيتعامل مع <strong>قائمة انتظار المهام الصغيرة للوعود</strong>، والتي تطبع bar وتضيف <code>zoo()</code> في <strong>قائمة انتظار process.nextTick</strong> في نفس الوقت. ثم سيستدعي <code>zoo()</code> التي تمت إضافتها للتو. في النهاية، يتم استدعاء <code>baz()</code> في <strong>قائمة انتظار المهام الكبيرة</strong>.</p><p>المبدأ المذكور أعلاه صحيح في حالات CommonJS، ولكن ضع في اعتبارك في وحدات ES، على سبيل المثال، ملفات <code>mjs</code>، سيكون ترتيب التنفيذ مختلفًا:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start bar foo zoo baz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>وذلك لأن وحدة ES التي يتم تحميلها يتم تغليفها كعملية غير متزامنة، وبالتالي فإن البرنامج النصي بأكمله موجود بالفعل في <code>قائمة انتظار المهام الصغيرة للوعود</code>. لذلك عندما يتم حل الوعد على الفور، يتم إلحاق رد النداء الخاص به بـ <code>قائمة انتظار المهام الصغيرة</code>. ستحاول Node.js مسح قائمة الانتظار حتى تنتقل إلى أي قائمة انتظار أخرى، وبالتالي سترى أنها تطبع bar أولاً.</p>`,15)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};