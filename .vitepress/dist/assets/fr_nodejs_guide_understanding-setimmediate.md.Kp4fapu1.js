import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Comprendre setImmediate() dans Node.js","description":"Découvrez comment fonctionne setImmediate() dans Node.js, ses différences avec setTimeout(), process.nextTick() et Promise.then(), ainsi que son interaction avec la boucle d'événements et les files d'attente.","frontmatter":{"title":"Comprendre setImmediate() dans Node.js","description":"Découvrez comment fonctionne setImmediate() dans Node.js, ses différences avec setTimeout(), process.nextTick() et Promise.then(), ainsi que son interaction avec la boucle d'événements et les files d'attente.","head":[["meta",{"name":"og:title","content":"Comprendre setImmediate() dans Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Découvrez comment fonctionne setImmediate() dans Node.js, ses différences avec setTimeout(), process.nextTick() et Promise.then(), ainsi que son interaction avec la boucle d'événements et les files d'attente."}],["meta",{"name":"twitter:title","content":"Comprendre setImmediate() dans Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Découvrez comment fonctionne setImmediate() dans Node.js, ses différences avec setTimeout(), process.nextTick() et Promise.then(), ainsi que son interaction avec la boucle d'événements et les files d'attente."}],["link",{"rel":"canonical","href":"https://idoc.dev/fr/nodejs/guide/understanding-setimmediate"}],["meta",{"property":"og:url","content":"https://idoc.dev/fr/nodejs/guide/understanding-setimmediate"}]]},"headers":[],"relativePath":"fr/nodejs/guide/understanding-setimmediate.md","filePath":"fr/nodejs/guide/understanding-setimmediate.md","lastUpdated":1749464498000}`),a={name:`fr/nodejs/guide/understanding-setimmediate.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="comprendre-setimmediate" tabindex="-1">Comprendre <code>setImmediate()</code> <a class="header-anchor" href="#comprendre-setimmediate" aria-label="Permalink to “Comprendre setImmediate()”">​</a></h1><p>Quand vous voulez exécuter un morceau de code de manière asynchrone, mais le plus tôt possible, une option est d&#39;utiliser la fonction <code>setImmediate()</code> fournie par Node.js\xA0:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Toute fonction passée en argument à <code>setImmediate()</code> est un rappel qui est exécuté lors de la prochaine itération de la boucle d&#39;événement.</p><p>Quelle est la différence entre <code>setImmediate()</code> et <code>setTimeout(() =&gt; {}, 0)</code> (en passant un délai d&#39;attente de 0\xA0ms), et entre <code>process.nextTick()</code> et <code>Promise.then()</code>\xA0?</p><p>Une fonction passée à <code>process.nextTick()</code> va être exécutée lors de l&#39;itération actuelle de la boucle d&#39;événement, après la fin de l&#39;opération en cours. Cela signifie qu&#39;elle s&#39;exécutera toujours avant <code>setTimeout</code> et <code>setImmediate</code>.</p><p>Un rappel <code>setTimeout()</code> avec un délai de 0\xA0ms est très similaire à <code>setImmediate()</code>. L&#39;ordre d&#39;exécution dépendra de divers facteurs, mais ils seront tous deux exécutés lors de la prochaine itération de la boucle d&#39;événement.</p><p>Un rappel <code>process.nextTick</code> est ajouté à la <strong>file d&#39;attente process.nextTick</strong>. Un rappel <code>Promise.then()</code> est ajouté à la <strong>file d&#39;attente de microtâches</strong> des promesses. Un rappel <code>setTimeout</code>, <code>setImmediate</code> est ajouté à la <strong>file d&#39;attente de macrotâches</strong>.</p><p>La boucle d&#39;événement exécute d&#39;abord les tâches dans la <strong>file d&#39;attente process.nextTick</strong>, puis exécute la <strong>file d&#39;attente de microtâches</strong> des promesses, puis exécute la <strong>file d&#39;attente de macrotâches</strong> <code>setTimeout</code> ou <code>setImmediate</code>.</p><p>Voici un exemple pour montrer l&#39;ordre entre <code>setImmediate()</code>, <code>process.nextTick()</code> et <code>Promise.then()</code>\xA0:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> zoo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zoo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baz);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(zoo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start foo bar zoo baz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Ce code appellera d&#39;abord <code>start()</code>, puis appellera <code>foo()</code> dans la <strong>file d&#39;attente process.nextTick</strong>. Après cela, il gérera la <strong>file d&#39;attente de microtâches</strong> des promesses, qui affichera bar et ajoutera <code>zoo()</code> dans la <strong>file d&#39;attente process.nextTick</strong> en même temps. Ensuite, il appellera <code>zoo() </code> qui vient d&#39;être ajouté. À la fin, <code>baz()</code> dans la <strong>file d&#39;attente de macrotâches</strong> est appelé.</p><p>Le principe susmentionné est vrai dans les cas CommonJS, mais gardez à l&#39;esprit que dans les modules ES, par exemple les fichiers <code>mjs</code>, l&#39;ordre d&#39;exécution sera différent\xA0:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start bar foo zoo baz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>En effet, le module ES en cours de chargement est encapsulé en tant qu&#39;opération asynchrone, et donc l&#39;ensemble du script se trouve déjà dans la <code>file d&#39;attente de microtâches</code> des promesses. Ainsi, lorsque la promesse est immédiatement résolue, son rappel est ajouté à la <code>file d&#39;attente de microtâches</code>. Node.js tentera d&#39;effacer la file d&#39;attente avant de passer à une autre file d&#39;attente, et vous verrez donc qu&#39;elle affiche bar en premier.</p>`,15)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};