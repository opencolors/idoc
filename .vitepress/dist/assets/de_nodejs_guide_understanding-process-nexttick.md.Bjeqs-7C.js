import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Verstehen von process.nextTick() in Node.js","description":"Erfahren Sie, wie process.nextTick() in Node.js funktioniert und wie es sich von setImmediate() und setTimeout() unterscheidet. Verstehen Sie den Ereignisschleifen und wie Sie nextTick() verwenden können, um Code asynchron auszuführen.","frontmatter":{"title":"Verstehen von process.nextTick() in Node.js","description":"Erfahren Sie, wie process.nextTick() in Node.js funktioniert und wie es sich von setImmediate() und setTimeout() unterscheidet. Verstehen Sie den Ereignisschleifen und wie Sie nextTick() verwenden können, um Code asynchron auszuführen.","head":[["meta",{"name":"og:title","content":"Verstehen von process.nextTick() in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Erfahren Sie, wie process.nextTick() in Node.js funktioniert und wie es sich von setImmediate() und setTimeout() unterscheidet. Verstehen Sie den Ereignisschleifen und wie Sie nextTick() verwenden können, um Code asynchron auszuführen."}],["meta",{"name":"twitter:title","content":"Verstehen von process.nextTick() in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Erfahren Sie, wie process.nextTick() in Node.js funktioniert und wie es sich von setImmediate() und setTimeout() unterscheidet. Verstehen Sie den Ereignisschleifen und wie Sie nextTick() verwenden können, um Code asynchron auszuführen."}],["link",{"rel":"canonical","href":"https://idoc.dev/de/nodejs/guide/understanding-process-nexttick"}],["meta",{"property":"og:url","content":"https://idoc.dev/de/nodejs/guide/understanding-process-nexttick"}]]},"headers":[],"relativePath":"de/nodejs/guide/understanding-process-nexttick.md","filePath":"de/nodejs/guide/understanding-process-nexttick.md","lastUpdated":1749464498000}`),a={name:`de/nodejs/guide/understanding-process-nexttick.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="process-nexttick-verstehen" tabindex="-1"><code>process.nextTick()</code> verstehen <a class="header-anchor" href="#process-nexttick-verstehen" aria-label="Permalink to “process.nextTick() verstehen”">​</a></h1><p>Beim Verständnis der Node.js Event Loop ist <code>process.nextTick()</code> ein wichtiger Bestandteil. Jedes Mal, wenn die Event Loop eine vollständige Runde macht, nennen wir das einen Tick.</p><p>Wenn wir eine Funktion an process.nextTick() übergeben, weisen wir die Engine an, diese Funktion am Ende der aktuellen Operation aufzurufen, bevor der nächste Event Loop Tick beginnt:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // etwas tun</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Die Event Loop ist damit beschäftigt, den aktuellen Funktionscode zu verarbeiten. Wenn diese Operation endet, führt die JS-Engine alle Funktionen aus, die während dieser Operation an <code>nextTick</code>-Aufrufe übergeben wurden.</p><p>Es ist die Art, wie wir der JS-Engine mitteilen können, eine Funktion asynchron (nach der aktuellen Funktion) zu verarbeiten, aber so schnell wie möglich und nicht in die Warteschlange zu stellen.</p><p>Der Aufruf von <code>setTimeout(() =&gt; {}, 0)</code> führt die Funktion am Ende des nächsten Ticks aus, viel später als bei der Verwendung von <code>nextTick()</code>, was den Aufruf priorisiert und ihn kurz vor Beginn des nächsten Ticks ausführt.</p><p>Verwenden Sie <code>nextTick()</code>, wenn Sie sicherstellen möchten, dass der Code in der nächsten Event Loop-Iteration bereits ausgeführt wird.</p><h2 id="ein-beispiel-fur-die-reihenfolge-der-ereignisse" tabindex="-1">Ein Beispiel für die Reihenfolge der Ereignisse: <a class="header-anchor" href="#ein-beispiel-fur-die-reihenfolge-der-ereignisse" aria-label="Permalink to “Ein Beispiel für die Reihenfolge der Ereignisse:”">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hallo =&gt; Nummer 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Läuft vor dem Timeout =&gt; Nummer 3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Der Timeout läuft zuletzt =&gt; Nummer 4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Läuft beim nächsten Tick =&gt; Nummer 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="beispielausgabe" tabindex="-1">Beispielausgabe: <a class="header-anchor" href="#beispielausgabe" aria-label="Permalink to “Beispielausgabe:”">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hallo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Nummer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Läuft</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> beim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nächsten</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Tick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Nummer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Läuft</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Nummer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Der</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Timeout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> läuft</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zuletzt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Nummer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Die genaue Ausgabe kann von Lauf zu Lauf unterschiedlich sein.</p>`,13)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};