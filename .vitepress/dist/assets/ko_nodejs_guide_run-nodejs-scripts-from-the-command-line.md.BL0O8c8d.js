import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"명령줄에서 Node.js 스크립트 실행","description":"명령줄에서 Node.js 프로그램을 실행하는 방법을 알아보세요. node 명령어 사용법, shebang 행, 실행 권한, 문자열을 인수로 전달하는 방법, 자동으로 애플리케이션을 재시작하는 방법 등이 포함됩니다.","frontmatter":{"title":"명령줄에서 Node.js 스크립트 실행","description":"명령줄에서 Node.js 프로그램을 실행하는 방법을 알아보세요. node 명령어 사용법, shebang 행, 실행 권한, 문자열을 인수로 전달하는 방법, 자동으로 애플리케이션을 재시작하는 방법 등이 포함됩니다.","head":[["meta",{"name":"og:title","content":"명령줄에서 Node.js 스크립트 실행 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"명령줄에서 Node.js 프로그램을 실행하는 방법을 알아보세요. node 명령어 사용법, shebang 행, 실행 권한, 문자열을 인수로 전달하는 방법, 자동으로 애플리케이션을 재시작하는 방법 등이 포함됩니다."}],["meta",{"name":"twitter:title","content":"명령줄에서 Node.js 스크립트 실행 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"명령줄에서 Node.js 프로그램을 실행하는 방법을 알아보세요. node 명령어 사용법, shebang 행, 실행 권한, 문자열을 인수로 전달하는 방법, 자동으로 애플리케이션을 재시작하는 방법 등이 포함됩니다."}],["link",{"rel":"canonical","href":"https://idoc.dev/ko/nodejs/guide/run-nodejs-scripts-from-the-command-line"}],["meta",{"property":"og:url","content":"https://idoc.dev/ko/nodejs/guide/run-nodejs-scripts-from-the-command-line"}]]},"headers":[],"relativePath":"ko/nodejs/guide/run-nodejs-scripts-from-the-command-line.md","filePath":"ko/nodejs/guide/run-nodejs-scripts-from-the-command-line.md","lastUpdated":1749464498000}`),a={name:`ko/nodejs/guide/run-nodejs-scripts-from-the-command-line.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="명령줄에서-node-js-스크립트-실행하기" tabindex="-1">명령줄에서 Node.js 스크립트 실행하기 <a class="header-anchor" href="#명령줄에서-node-js-스크립트-실행하기" aria-label="Permalink to “명령줄에서 Node.js 스크립트 실행하기”">​</a></h1><p>일반적으로 Node.js 프로그램을 실행하는 방법은 (Node.js를 설치한 후) 전역적으로 사용 가능한 <code>node</code> 명령어를 실행하고 실행하려는 파일의 이름을 전달하는 것입니다.</p><p>주 Node.js 애플리케이션 파일이 <code>app.js</code>인 경우 다음과 같이 입력하여 호출할 수 있습니다.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>위에서 셸에 <code>node</code>를 사용하여 스크립트를 실행하도록 명시적으로 지시하고 있습니다. &quot;Shebang&quot; 라인을 사용하여 이 정보를 JavaScript 파일에 포함할 수도 있습니다. &quot;Shebang&quot;은 파일의 첫 번째 줄이며, OS에 스크립트를 실행하는 데 사용할 인터프리터를 알려줍니다. 다음은 JavaScript의 첫 번째 줄입니다.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>위에서 인터프리터의 절대 경로를 명시적으로 제공하고 있습니다. 모든 운영체제가 <code>bin</code> 폴더에 <code>node</code>를 가지고 있는 것은 아니지만, 모든 운영체제가 <code>env</code>를 가지고 있어야 합니다. OS에 <code>node</code>를 매개변수로 사용하여 <code>env</code>를 실행하도록 지시할 수 있습니다.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env node</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// your javascript code</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="shebang을-사용하려면-파일에-실행-권한이-있어야-합니다" tabindex="-1">Shebang을 사용하려면 파일에 실행 권한이 있어야 합니다. <a class="header-anchor" href="#shebang을-사용하려면-파일에-실행-권한이-있어야-합니다" aria-label="Permalink to “Shebang을 사용하려면 파일에 실행 권한이 있어야 합니다.”">​</a></h2><p>다음 명령을 실행하여 <code>app.js</code>에 실행 권한을 부여할 수 있습니다.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> u+x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>명령을 실행하는 동안 <code>app.js</code> 파일이 포함된 동일한 디렉토리에 있는지 확인하십시오.</p><h2 id="파일-경로-대신-문자열을-노드에-인수로-전달하기" tabindex="-1">파일 경로 대신 문자열을 노드에 인수로 전달하기 <a class="header-anchor" href="#파일-경로-대신-문자열을-노드에-인수로-전달하기" aria-label="Permalink to “파일 경로 대신 문자열을 노드에 인수로 전달하기”">​</a></h2><p>문자열을 인수로 실행하려면 <code>-e</code>, <code>--eval &quot;script&quot;</code>를 사용할 수 있습니다. 다음 인수를 JavaScript로 평가합니다. REPL에서 미리 정의된 모듈도 스크립트에서 사용할 수 있습니다. Windows에서 <code>cmd.exe</code>를 사용하는 경우 작은따옴표는 따옴표로 묶는 데 큰따옴표 <code>&quot;</code>만 인식하므로 제대로 작동하지 않습니다. Powershell 또는 Git bash에서는 <code>&quot;</code>와 <code>&#39;&#39;</code>를 모두 사용할 수 있습니다.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;console.log(123)&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="애플리케이션을-자동으로-다시-시작하기" tabindex="-1">애플리케이션을 자동으로 다시 시작하기 <a class="header-anchor" href="#애플리케이션을-자동으로-다시-시작하기" aria-label="Permalink to “애플리케이션을 자동으로 다시 시작하기”">​</a></h2><p>nodejs V 16부터 파일이 변경될 때 애플리케이션을 자동으로 다시 시작하는 기본 제공 옵션이 있습니다. 이는 개발 목적으로 유용합니다. 이 기능을 사용하려면 <code>watch</code> 플래그를 nodejs에 전달해야 합니다.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>따라서 파일을 변경하면 애플리케이션이 자동으로 다시 시작됩니다. --watch <a href="/ko/nodejs/api/cli#watch">플래그 설명서</a>를 읽으십시오.</p>`,19)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};