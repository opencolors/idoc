import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js パッケージドキュメント","description":"Node.jsの公式パッケージに関するドキュメントを探求し、パッケージの管理、作成、公開方法、package.json、依存関係、パッケージ管理ツールに関する詳細を学びます。","frontmatter":{"title":"Node.js パッケージドキュメント","description":"Node.jsの公式パッケージに関するドキュメントを探求し、パッケージの管理、作成、公開方法、package.json、依存関係、パッケージ管理ツールに関する詳細を学びます。","head":[["meta",{"name":"og:title","content":"Node.js パッケージドキュメント | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.jsの公式パッケージに関するドキュメントを探求し、パッケージの管理、作成、公開方法、package.json、依存関係、パッケージ管理ツールに関する詳細を学びます。"}],["meta",{"name":"twitter:title","content":"Node.js パッケージドキュメント | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.jsの公式パッケージに関するドキュメントを探求し、パッケージの管理、作成、公開方法、package.json、依存関係、パッケージ管理ツールに関する詳細を学びます。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/packages"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/packages"}]]},"headers":[],"relativePath":"ja/nodejs/api/packages.md","filePath":"ja/nodejs/api/packages.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/api/packages.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="modules-packages" tabindex="-1">モジュール: パッケージ <a class="header-anchor" href="#modules-packages" aria-label="Permalink to “モジュール: パッケージ”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v14.13.0, v12.20.0</td><td><code>&quot;exports&quot;</code> パターンのサポートを追加。</td></tr><tr><td>v14.6.0, v12.19.0</td><td>パッケージ <code>&quot;imports&quot;</code> フィールドを追加。</td></tr><tr><td>v13.7.0, v12.17.0</td><td>条件付きエクスポートのフラグを解除。</td></tr><tr><td>v13.7.0, v12.16.0</td><td><code>--experimental-conditional-exports</code> オプションを削除。12.16.0 では、条件付きエクスポートはまだ <code>--experimental-modules</code> の背後にあります。</td></tr><tr><td>v13.6.0, v12.16.0</td><td>パッケージの名前を使用した自己参照のフラグを解除。</td></tr><tr><td>v12.7.0</td><td>古典的な <code>&quot;main&quot;</code> フィールドよりも強力な代替手段として、<code>&quot;exports&quot;</code> <code>package.json</code> フィールドを導入。</td></tr><tr><td>v12.0.0</td><td><code>package.json</code> <code>&quot;type&quot;</code> フィールドを介して、<code>.js</code> ファイル拡張子を使用した ES モジュールのサポートを追加。</td></tr></tbody></table></div><h2 id="introduction" tabindex="-1">導入 <a class="header-anchor" href="#introduction" aria-label="Permalink to “導入”">​</a></h2><p>パッケージは、<code>package.json</code> ファイルで記述されたフォルダツリーです。パッケージは、<code>package.json</code> ファイルを含むフォルダと、別の <code>package.json</code> ファイルを含む次のフォルダ、または <code>node_modules</code> という名前のフォルダまでのすべてのサブフォルダで構成されます。</p><p>このページでは、<code>package.json</code> ファイルを作成するパッケージ作成者向けに、Node.js によって定義された <a href="/ja/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> フィールドのリファレンスとともにガイダンスを提供します。</p><h2 id="determining-module-system" tabindex="-1">モジュールシステムの決定 <a class="header-anchor" href="#determining-module-system" aria-label="Permalink to “モジュールシステムの決定”">​</a></h2><h3 id="introduction_1" tabindex="-1">導入 <a class="header-anchor" href="#introduction_1" aria-label="Permalink to “導入”">​</a></h3><p>Node.js は、<code>node</code> に最初の入力として渡された場合、または <code>import</code> ステートメントまたは <code>import()</code> 式によって参照された場合、以下を <a href="/ja/nodejs/api/esm">ES モジュール</a> として扱います。</p><ul><li><code>.mjs</code> 拡張子を持つファイル。</li><li>最も近い親 <code>package.json</code> ファイルに、値が <code>&quot;module&quot;</code> のトップレベルの <a href="/ja/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> フィールドが含まれている場合、<code>.js</code> 拡張子を持つファイル。</li><li><code>--eval</code> の引数として渡された文字列、または <code>--input-type=module</code> フラグを使用して <code>STDIN</code> 経由で <code>node</code> にパイプされた文字列。</li><li><a href="/ja/nodejs/api/esm">ES モジュール</a> として正常に解析された構文を含むコード（<code>import</code> または <code>export</code> ステートメント、または <code>import.meta</code> など）。解釈方法の明示的なマーカーはありません。明示的なマーカーは、<code>.mjs</code> または <code>.cjs</code> 拡張子、<code>package.json</code> <code>&quot;type&quot;</code> フィールド（<code>&quot;module&quot;</code> または <code>&quot;commonjs&quot;</code> のいずれかの値）、または <code>--input-type</code> フラグです。動的な <code>import()</code> 式は、CommonJS または ES モジュールのいずれかでサポートされており、ファイルが ES モジュールとして扱われることを強制しません。<a href="/ja/nodejs/api/packages#syntax-detection">構文検出</a> を参照してください。</li></ul><p>Node.js は、<code>node</code> に最初の入力として渡された場合、または <code>import</code> ステートメントまたは <code>import()</code> 式によって参照された場合、以下を <a href="/ja/nodejs/api/modules">CommonJS</a> として扱います。</p><ul><li><code>.cjs</code> 拡張子を持つファイル。</li><li>最も近い親 <code>package.json</code> ファイルに、値が <code>&quot;commonjs&quot;</code> のトップレベルフィールド <a href="/ja/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> が含まれている場合、<code>.js</code> 拡張子を持つファイル。</li><li><code>--eval</code> または <code>--print</code> の引数として渡された文字列、または <code>--input-type=commonjs</code> フラグを使用して <code>STDIN</code> 経由で <code>node</code> にパイプされた文字列。</li><li>親 <code>package.json</code> ファイルがない、または最も近い親 <code>package.json</code> ファイルに <code>type</code> フィールドがなく、コードが CommonJS として正常に評価できる <code>.js</code> 拡張子を持つファイル。つまり、Node.js は、そのような「あいまいな」ファイルを最初に CommonJS として実行しようとし、パーサーが ES モジュールの構文を検出したために CommonJS としての評価が失敗した場合、ES モジュールとして再評価します。</li></ul><p>「あいまいな」ファイルに ES モジュールの構文を記述すると、パフォーマンスコストが発生するため、可能な限り明示的に記述することをお勧めします。特に、パッケージ作成者は、すべてのソースが CommonJS であるパッケージであっても、常に <code>package.json</code> ファイルに <a href="/ja/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> フィールドを含める必要があります。パッケージの <code>type</code> を明示的に記述すると、Node.js のデフォルトのタイプが変更された場合にパッケージを将来にわたって保護できます。また、ビルドツールやローダーがパッケージ内のファイルをどのように解釈する必要があるかを判断するのも簡単になります。</p><h3 id="syntax-detection" tabindex="-1">構文検出 <a class="header-anchor" href="#syntax-detection" aria-label="Permalink to “構文検出”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.7.0</td><td>構文検出がデフォルトで有効になりました。</td></tr><tr><td>v21.1.0, v20.10.0</td><td>追加: v21.1.0, v20.10.0</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a>.2 - リリース候補</p></div><p>Node.js は曖昧な入力のソースコードを検査し、それが ES モジュールの構文を含んでいるかどうかを判断します。もしそのような構文が検出された場合、その入力は ES モジュールとして扱われます。</p><p>曖昧な入力は以下のように定義されます:</p><ul><li>拡張子 <code>.js</code> を持つファイル、または拡張子がないファイル。そして、制御する <code>package.json</code> ファイルがないか、<code>type</code> フィールドがないもの。</li><li><code>--input-type</code> が指定されていない場合の文字列入力 (<code>--eval</code> または <code>STDIN</code>)。</li></ul><p>ES モジュールの構文は、CommonJS として評価された場合に例外をスローする構文として定義されます。これには以下が含まれます:</p><ul><li><code>import</code> ステートメント (ただし、CommonJS で有効な <code>import()</code> 式は<em>含まれません</em>)。</li><li><code>export</code> ステートメント。</li><li><code>import.meta</code> 参照。</li><li>モジュールのトップレベルでの <code>await</code>。</li><li>CommonJS ラッパー変数の字句再宣言 (<code>require</code>, <code>module</code>, <code>exports</code>, <code>__dirname</code>, <code>__filename</code>)。</li></ul><h3 id="modules-loaders" tabindex="-1">モジュールローダー <a class="header-anchor" href="#modules-loaders" aria-label="Permalink to “モジュールローダー”">​</a></h3><p>Node.js には、指定子を解決してモジュールをロードする 2 つのシステムがあります。</p><p>CommonJS モジュールローダーがあります:</p><ul><li>完全に同期です。</li><li><code>require()</code> 呼び出しの処理を担当します。</li><li>モンキーパッチ可能です。</li><li><a href="/ja/nodejs/api/modules#folders-as-modules">フォルダーをモジュールとして</a>サポートします。</li><li>指定子を解決する際、完全一致が見つからない場合、拡張子 (<code>.js</code>、<code>.json</code>、最後に <code>.node</code>) を追加し、<a href="/ja/nodejs/api/modules#folders-as-modules">フォルダーをモジュールとして</a>解決しようとします。</li><li><code>.json</code> を JSON テキストファイルとして扱います。</li><li><code>.node</code> ファイルは、<code>process.dlopen()</code> でロードされるコンパイル済みアドオンモジュールとして解釈されます。</li><li><code>.json</code> または <code>.node</code> 拡張子がないすべてのファイルを JavaScript テキストファイルとして扱います。</li><li>モジュールグラフが同期である場合 (トップレベルの <code>await</code> を含まない)、<a href="/ja/nodejs/api/modules#loading-ecmascript-modules-using-require">CommonJS モジュールから ECMAScript モジュールをロード</a>するためにのみ使用できます。ECMAScript モジュールではない JavaScript テキストファイルをロードするために使用される場合、そのファイルは CommonJS モジュールとしてロードされます。</li></ul><p>ECMAScript モジュールローダーがあります:</p><ul><li><code>require()</code> のためにモジュールをロードするために使用されている場合を除き、非同期です。</li><li><code>import</code> ステートメントと <code>import()</code> 式の処理を担当します。</li><li>モンキーパッチ不可能で、<a href="/ja/nodejs/api/esm#loaders">ローダーフック</a>を使用してカスタマイズできます。</li><li>フォルダーをモジュールとしてサポートせず、ディレクトリインデックス (例: <code>&#39;./startup/index.js&#39;</code>) は完全に指定する必要があります。</li><li>拡張子検索は行いません。指定子が相対または絶対ファイル URL である場合は、ファイル拡張子を指定する必要があります。</li><li>JSON モジュールをロードできますが、import type 属性が必要です。</li><li>JavaScript テキストファイルの場合は、<code>.js</code>、<code>.mjs</code>、<code>.cjs</code> 拡張子のみを受け入れます。</li><li>JavaScript CommonJS モジュールをロードするために使用できます。そのようなモジュールは <code>cjs-module-lexer</code> を介して渡され、名前付きエクスポートを識別しようとします。名前付きエクスポートは静的分析を通じて決定できる場合に利用できます。インポートされた CommonJS モジュールは、URL が絶対パスに変換され、CommonJS モジュールローダーを介してロードされます。</li></ul><h3 id="packagejson-and-file-extensions" tabindex="-1"><code>package.json</code> とファイルの拡張子 <a class="header-anchor" href="#packagejson-and-file-extensions" aria-label="Permalink to “package.json とファイルの拡張子”">​</a></h3><p>パッケージ内では、<a href="/ja/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> の <a href="/ja/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> フィールドは、Node.js が <code>.js</code> ファイルをどのように解釈するかを定義します。<code>package.json</code> ファイルに <code>&quot;type&quot;</code> フィールドがない場合、<code>.js</code> ファイルは <a href="/ja/nodejs/api/modules">CommonJS</a> として扱われます。</p><p><code>package.json</code> の <code>&quot;type&quot;</code> の値が <code>&quot;module&quot;</code> の場合、Node.js はそのパッケージ内の <code>.js</code> ファイルを <a href="/ja/nodejs/api/esm">ES モジュール</a> 構文を使用しているものとして解釈します。</p><p><code>&quot;type&quot;</code> フィールドは、最初のエントリーポイント (<code>node my-app.js</code>) だけでなく、<code>import</code> ステートメントや <code>import()</code> 式で参照されるファイルにも適用されます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// my-app.js, パッケージ.json ファイルが同じフォルダにあり、&quot;type&quot;: &quot;module&quot; であるため、ES モジュールとして扱われます。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./startup/init.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./startup に package.json ファイルが含まれていないため、ES モジュールとしてロードされます。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// そのため、1 つ上のレベルから &quot;type&quot; の値を継承します。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;commonjs-package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/commonjs-package/package.json に</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;type&quot; フィールドがないか、&quot;type&quot;: &quot;commonjs&quot; が含まれているため、CommonJS としてロードされます。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./node_modules/commonjs-package/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/commonjs-package/package.json に</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;type&quot; フィールドがないか、&quot;type&quot;: &quot;commonjs&quot; が含まれているため、CommonJS としてロードされます。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>.mjs</code> で終わるファイルは、最も近い親の <code>package.json</code> に関係なく、常に <a href="/ja/nodejs/api/esm">ES モジュール</a> としてロードされます。</p><p><code>.cjs</code> で終わるファイルは、最も近い親の <code>package.json</code> に関係なく、常に <a href="/ja/nodejs/api/modules">CommonJS</a> としてロードされます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./legacy-file.cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .cjs は常に CommonJS としてロードされるため、CommonJS としてロードされます。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;commonjs-package/src/index.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .mjs は常に ES モジュールとしてロードされるため、ES モジュールとしてロードされます。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>.mjs</code> および <code>.cjs</code> 拡張子は、同じパッケージ内で型を混在させるために使用できます。</p><ul><li><code>&quot;type&quot;: &quot;module&quot;</code> パッケージ内では、<code>.cjs</code> 拡張子で名前を付けることによって、特定のファイルを <a href="/ja/nodejs/api/modules">CommonJS</a> として解釈するように Node.js に指示できます（<code>.js</code> と <code>.mjs</code> の両方のファイルが <code>&quot;module&quot;</code> パッケージ内で ES モジュールとして扱われるため）。</li><li><code>&quot;type&quot;: &quot;commonjs&quot;</code> パッケージ内では、<code>.mjs</code> 拡張子で名前を付けることによって、特定のファイルを <a href="/ja/nodejs/api/esm">ES モジュール</a> として解釈するように Node.js に指示できます（<code>.js</code> と <code>.cjs</code> の両方のファイルが <code>&quot;commonjs&quot;</code> パッケージ内で CommonJS として扱われるため）。</li></ul><h3 id="--input-type-flag" tabindex="-1"><code>--input-type</code> フラグ <a class="header-anchor" href="#--input-type-flag" aria-label="Permalink to “--input-type フラグ”">​</a></h3><p><strong>追加: v12.0.0</strong></p><p><code>--eval</code>（または <code>-e</code>）への引数として渡された文字列、または <code>STDIN</code> 経由で <code>node</code> にパイプされた文字列は、<code>--input-type=module</code> フラグが設定されている場合、<a href="/ja/nodejs/api/esm">ES モジュール</a>として扱われます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --input-type=module</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;import { sep } from &#39;node:path&#39;; console.log(sep);&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;import { sep } from &#39;node:path&#39;; console.log(sep);&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --input-type=module</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>完全を期すために、文字列入力を明示的に CommonJS として実行するための <code>--input-type=commonjs</code> もあります。 <code>--input-type</code> が指定されていない場合、これがデフォルトの動作です。</p><h2 id="determining-package-manager" tabindex="-1">パッケージマネージャーの決定 <a class="header-anchor" href="#determining-package-manager" aria-label="Permalink to “パッケージマネージャーの決定”">​</a></h2><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 実験的</p></div><p>すべての Node.js プロジェクトは、公開されるとすべてのパッケージマネージャーでインストール可能になることが期待されていますが、開発チームは多くの場合、特定のパッケージマネージャーを使用する必要があります。 このプロセスを容易にするために、Node.js には <a href="/ja/nodejs/api/corepack">Corepack</a> と呼ばれるツールが付属しており、Node.js がインストールされていれば、すべてのパッケージマネージャーを環境内で透過的に利用できるようにすることを目指しています。</p><p>デフォルトでは、Corepack は特定のパッケージマネージャーを強制せず、各 Node.js リリースに関連付けられた一般的な &quot;Last Known Good&quot; バージョンを使用しますが、プロジェクトの <code>package.json</code> で <a href="/ja/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> フィールドを設定することで、このエクスペリエンスを向上させることができます。</p><h2 id="package-entry-points" tabindex="-1">パッケージのエントリーポイント <a class="header-anchor" href="#package-entry-points" aria-label="Permalink to “パッケージのエントリーポイント”">​</a></h2><p>パッケージの <code>package.json</code> ファイルには、<a href="/ja/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> と <a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> の 2 つのフィールドがあり、パッケージのエントリーポイントを定義できます。 どちらのフィールドも、ES モジュールと CommonJS モジュールの両方のエントリーポイントに適用されます。</p><p><a href="/ja/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> フィールドはすべてのバージョンの Node.js でサポートされていますが、その機能は限定的です。パッケージのメインエントリーポイントのみを定義します。</p><p><a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> は、<a href="/ja/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> の最新の代替手段を提供し、複数のエントリーポイントを定義したり、環境間の条件付きエントリー解決をサポートしたり、<strong><a href="#exports"><code>&quot;exports&quot;</code></a> で定義されたエントリーポイント以外の他のエントリーポイントを防ぎます</strong>。 このカプセル化により、モジュールの作成者はパッケージのパブリックインターフェースを明確に定義できます。</p><p>現在サポートされているバージョンの Node.js を対象とする新しいパッケージには、<a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドが推奨されます。 Node.js 10 以前をサポートするパッケージには、<a href="/ja/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> フィールドが必要です。 <a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> と <a href="/ja/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> の両方が定義されている場合、サポートされているバージョンの Node.js では、<a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドが <a href="/ja/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> よりも優先されます。</p><p><a href="/ja/nodejs/api/packages#conditional-exports">条件付きエクスポート</a> を <a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 内で使用して、パッケージが <code>require</code> 経由で参照されるか <code>import</code> 経由で参照されるかなど、環境ごとに異なるパッケージのエントリーポイントを定義できます。 単一のパッケージで CommonJS と ES モジュールの両方をサポートする方法の詳細については、<a href="/ja/nodejs/api/packages#dual-commonjses-module-packages">デュアル CommonJS/ES モジュールパッケージのセクション</a> を参照してください。</p><p><a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドを導入する既存のパッケージは、パッケージのコンシューマーが定義されていないエントリーポイント（<a href="/ja/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a>（例：<code>require(&#39;your-package/package.json&#39;)</code>）を含む）を使用することを防ぎます。 <strong>これは、破壊的な変更になる可能性があります。</strong></p><p><a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> の導入を破壊的でないようにするには、以前にサポートされていたすべてのエントリーポイントがエクスポートされていることを確認してください。 パッケージのパブリック API が明確に定義されるように、エントリーポイントを明示的に指定するのが最善です。 たとえば、以前に <code>main</code>、<code>lib</code>、<code>feature</code>、および <code>package.json</code> をエクスポートしていたプロジェクトでは、次の <code>package.exports</code> を使用できます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./package.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>または、プロジェクトは、エクスポートパターンを使用して、拡張サブパスの有無にかかわらず、フォルダー全体をエクスポートすることもできます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./package.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>上記は、マイナーパッケージバージョンの下位互換性を提供し、パッケージの将来のメジャー変更では、エクスポートを公開されている特定の機能のエクスポートのみに適切に制限できます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/internal/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="main-entry-point-export" tabindex="-1">メインのエントリーポイントのエクスポート <a class="header-anchor" href="#main-entry-point-export" aria-label="Permalink to “メインのエントリーポイントのエクスポート”">​</a></h3><p>新しいパッケージを作成するときは、<a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドを使用することをお勧めします。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドが定義されている場合、パッケージのすべてのサブパスはカプセル化され、インポーターは使用できなくなります。たとえば、<code>require(&#39;pkg/subpath.js&#39;)</code> は <a href="/ja/nodejs/api/errors#err-package-path-not-exported"><code>ERR_PACKAGE_PATH_NOT_EXPORTED</code></a> エラーをスローします。</p><p>このエクスポートのカプセル化は、ツールに対して、またパッケージのセマンティックバージョンのアップグレードを処理する際に、パッケージインターフェースに関するより信頼性の高い保証を提供します。<code>require(&#39;/path/to/node_modules/pkg/subpath.js&#39;)</code> のようなパッケージの任意の絶対サブパスを直接 <code>require</code> すると <code>subpath.js</code> がロードされるため、強力なカプセル化ではありません。</p><p>現在サポートされているすべてのバージョンの Node.js と最新のビルドツールは、<code>&quot;exports&quot;</code> フィールドをサポートしています。古いバージョンの Node.js または関連するビルドツールを使用しているプロジェクトでは、同じモジュールを指す <code>&quot;main&quot;</code> フィールドを <code>&quot;exports&quot;</code> と一緒に含めることで互換性を実現できます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="subpath-exports" tabindex="-1">サブパスのエクスポート <a class="header-anchor" href="#subpath-exports" aria-label="Permalink to “サブパスのエクスポート”">​</a></h3><p><strong>追加: v12.7.0</strong></p><p><a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドを使用する場合、メインのエントリーポイントを <code>&quot;.&quot;</code> サブパスとして扱うことで、メインのエントリーポイントとともにカスタムサブパスを定義できます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./submodule.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/submodule.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>これで、<a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> で定義されたサブパスのみをコンシューマーがインポートできます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> submodule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/submodule.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/src/submodule.js をロードします</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>他のサブパスはエラーになります。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> submodule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/private-module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ERR_PACKAGE_PATH_NOT_EXPORTED をスローします</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="extensions-in-subpaths" tabindex="-1">サブパスの拡張子 <a class="header-anchor" href="#extensions-in-subpaths" aria-label="Permalink to “サブパスの拡張子”">​</a></h4><p>パッケージの作成者は、拡張子付き (<code>import &#39;pkg/subpath.js&#39;</code>) または拡張子なし (<code>import &#39;pkg/subpath&#39;</code>) のサブパスをエクスポートで提供する必要があります。これにより、エクスポートされたモジュールごとに 1 つのサブパスのみが存在することが保証されるため、すべての依存関係者が同じ一貫した指定子をインポートし、パッケージコントラクトをコンシューマーに明確にし、パッケージサブパスの補完を簡素化します。</p><p>従来、パッケージは拡張子なしのスタイルを使用する傾向があり、読みやすさと、パッケージ内のファイルの実際のパスをマスクできるという利点があります。</p><p><a href="https://github.com/WICG/import-maps" target="_blank" rel="noreferrer">インポートマップ</a> がブラウザーやその他の JavaScript ランタイムでのパッケージ解決の標準を提供するようになったため、拡張子なしのスタイルを使用すると、インポートマップの定義が肥大化する可能性があります。明示的なファイル拡張子を使用すると、パッケージサブパスのエクスポートごとに個別のマップエントリを作成する代わりに、<a href="https://github.com/WICG/import-maps#packages-via-trailing-slashes" target="_blank" rel="noreferrer">パッケージフォルダーマッピング</a> を利用して、可能な限り複数のサブパスをマップできるため、この問題を回避できます。これは、相対インポートと絶対インポートの指定子で <a href="/ja/nodejs/api/esm#mandatory-file-extensions">完全な指定子パス</a> を使用する必要性も反映しています。</p><h3 id="exports-sugar" tabindex="-1">エクスポートの糖衣構文 <a class="header-anchor" href="#exports-sugar" aria-label="Permalink to “エクスポートの糖衣構文”">​</a></h3><p><strong>追加:</strong> v12.11.0</p><p><code>&quot;.&quot;</code> エクスポートが唯一のエクスポートである場合、<a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドは、このケースが直接的な <a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドの値であるという糖衣構文を提供します。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>これは以下のように書けます:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="subpath-imports" tabindex="-1">サブパスインポート <a class="header-anchor" href="#subpath-imports" aria-label="Permalink to “サブパスインポート”">​</a></h3><p><strong>追加:</strong> v14.6.0, v12.19.0</p><p><a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドに加えて、パッケージ自体からのインポート指定子にのみ適用されるプライベートなマッピングを作成するためのパッケージ <code>&quot;imports&quot;</code> フィールドがあります。</p><p><code>&quot;imports&quot;</code> フィールドのエントリは、外部パッケージ指定子と区別するために、常に <code>#</code> で始まる必要があります。</p><p>たとえば、<code>imports</code> フィールドを使用して、内部モジュールの条件付きエクスポートの利点を得ることができます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#dep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dep-polyfill.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>ここで、<code>import &#39;#dep&#39;</code> は、外部パッケージ <code>dep-node-native</code> (そのエクスポートを含む) の解決を取得せず、代わりに他の環境ではパッケージに対してローカルファイル <code>./dep-polyfill.js</code> を取得します。</p><p><code>&quot;exports&quot;</code> フィールドとは異なり、<code>&quot;imports&quot;</code> フィールドは外部パッケージへのマッピングを許可します。</p><p>imports フィールドの解決ルールは、それ以外の場合、exports フィールドと同様です。</p><h3 id="subpath-patterns" tabindex="-1">サブパスパターン <a class="header-anchor" href="#subpath-patterns" aria-label="Permalink to “サブパスパターン”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v16.10.0, v14.19.0</td><td>&quot;imports&quot; フィールドでのパターントレーラーのサポート。</td></tr><tr><td>v16.9.0, v14.19.0</td><td>パターントレーラーのサポート。</td></tr><tr><td>v14.13.0, v12.20.0</td><td>追加: v14.13.0, v12.20.0</td></tr></tbody></table></div><p>エクスポートまたはインポートの数が少ないパッケージの場合は、各エクスポートサブパスエントリを明示的にリストすることをお勧めします。 ただし、多数のサブパスを持つパッケージの場合、これは <code>package.json</code> の肥大化およびメンテナンスの問題を引き起こす可能性があります。</p><p>これらのユースケースでは、代わりにサブパスエクスポートパターンを使用できます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/features/*.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#internal/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/internal/*.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong><code>*</code> マップは、文字列置換構文であるため、ネストされたサブパスを公開します。</strong></p><p>右側のすべての <code>*</code> インスタンスは、<code>/</code> セパレーターが含まれている場合を含め、この値に置き換えられます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/x.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/src/features/x.js をロードします</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/y/y.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/src/features/y/y.js をロードします</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> internalZ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#internal/z.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/src/internal/z.js をロードします</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>これは、ファイル拡張子に対する特別な処理を行わない直接的な静的マッチングと置換です。 マッピングの両側に <code>&quot;*.js&quot;</code> を含めると、公開されるパッケージのエクスポートが JS ファイルのみに制限されます。</p><p>パッケージの個々のエクスポートは、右側のターゲットパターンをパッケージ内のファイルリストに対する <code>**</code> glob として扱うことによって判別できるため、エクスポートの静的に列挙可能であるというプロパティは、エクスポートパターンで維持されます。 <code>node_modules</code> パスはエクスポートターゲットでは禁止されているため、この展開はパッケージ自体のファイルのみに依存します。</p><p>プライベートなサブフォルダーをパターンから除外するには、<code>null</code> ターゲットを使用できます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/private-internal/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureInternal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/private-internal/m.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// スロー: ERR_PACKAGE_PATH_NOT_EXPORTED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/x.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/src/features/x.js をロードします</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="conditional-exports" tabindex="-1">条件付きエクスポート <a class="header-anchor" href="#conditional-exports" aria-label="Permalink to “条件付きエクスポート”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v13.7.0, v12.16.0</td><td>条件付きエクスポートのフラグを解除しました。</td></tr><tr><td>v13.2.0, v12.16.0</td><td>追加: v13.2.0, v12.16.0</td></tr></tbody></table></div><p>条件付きエクスポートは、特定の条件に応じて異なるパスにマッピングする方法を提供します。CommonJS と ES モジュールのインポートの両方でサポートされています。</p><p>たとえば、<code>require()</code> と <code>import</code> に対して異なる ES モジュールエクスポートを提供したいパッケージは、次のように記述できます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index-module.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index-require.cjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Node.js は、条件を定義する必要がある最も具体的なものから最も具体的でないものの順に、次の条件を実装します。</p><ul><li><code>&quot;node-addons&quot;</code> - <code>&quot;node&quot;</code> と同様に、任意の Node.js 環境に一致します。この条件は、ネイティブアドオンに依存しない、より普遍的なエントリーポイントとは対照的に、ネイティブ C++ アドオンを使用するエントリーポイントを提供するために使用できます。この条件は、<a href="/ja/nodejs/api/cli#no-addons"><code>--no-addons</code> フラグ</a> を使用して無効にできます。</li><li><code>&quot;node&quot;</code> - 任意の Node.js 環境に一致します。CommonJS または ES モジュールファイルにすることができます。<em>ほとんどの場合、Node.js プラットフォームを明示的に呼び出す必要はありません。</em></li><li><code>&quot;import&quot;</code> - <code>import</code> または <code>import()</code> 経由で、あるいは ECMAScript モジュールローダーによるトップレベルのインポートまたは解決操作経由でパッケージがロードされる場合に一致します。ターゲットファイルのモジュール形式に関係なく適用されます。<em>常に <code>&quot;require&quot;</code> と相互に排他的です。</em></li><li><code>&quot;require&quot;</code> - <code>require()</code> 経由でパッケージがロードされる場合に一致します。参照されるファイルは <code>require()</code> でロード可能である必要がありますが、条件はターゲットファイルのモジュール形式に関係なく一致します。予想される形式には、CommonJS、JSON、ネイティブアドオン、および ES モジュールが含まれます。<em>常に <code>&quot;import&quot;</code> と相互に排他的です。</em></li><li><code>&quot;module-sync&quot;</code> - パッケージが <code>import</code>、<code>import()</code>、または <code>require()</code> 経由でロードされるかどうかにかかわらず一致します。形式は、モジュールグラフにトップレベルの await を含まない ES モジュールであると予想されます。含まれている場合、モジュールが <code>require()</code> されると <code>ERR_REQUIRE_ASYNC_MODULE</code> がスローされます。</li><li><code>&quot;default&quot;</code> - 常に一致する一般的なフォールバック。CommonJS または ES モジュールファイルにすることができます。<em>この条件は常に最後に記述する必要があります。</em></li></ul><p><a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> オブジェクト内では、キーの順序が重要です。条件照合中、前のエントリは優先度が高く、後のエントリよりも優先されます。<em>一般的なルールは、条件をオブジェクトの順序で最も具体的なものから最も具体的でないものにする必要があるということです。</em></p><p><code>&quot;import&quot;</code> および <code>&quot;require&quot;</code> 条件を使用すると、いくつかの危険が生じる可能性があります。これについては、<a href="/ja/nodejs/api/packages#dual-commonjses-module-packages">デュアル CommonJS/ES モジュールパッケージセクション</a> で詳しく説明します。</p><p><code>&quot;node-addons&quot;</code> 条件は、ネイティブ C++ アドオンを使用するエントリーポイントを提供するために使用できます。ただし、この条件は <a href="/ja/nodejs/api/cli#no-addons"><code>--no-addons</code> フラグ</a> を使用して無効にできます。<code>&quot;node-addons&quot;</code> を使用する場合、<code>&quot;default&quot;</code> を、ネイティブアドオンの代わりに WebAssembly を使用するなど、より普遍的なエントリーポイントを提供する拡張機能として扱うことをお勧めします。</p><p>条件付きエクスポートは、エクスポートサブパスにも拡張できます。例：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>require(&#39;pkg/feature.js&#39;)</code> および <code>import &#39;pkg/feature.js&#39;</code> が Node.js とその他の JS 環境で異なる実装を提供できるパッケージを定義します。</p><p>環境ブランチを使用する場合は、可能な限り <code>&quot;default&quot;</code> 条件を常に含めてください。<code>&quot;default&quot;</code> 条件を提供することで、不明な JS 環境がこの普遍的な実装を使用できるようになり、これらの JS 環境が条件付きエクスポートを持つパッケージをサポートするために既存の環境であるふりをする必要がなくなります。このため、<code>&quot;node&quot;</code> および <code>&quot;default&quot;</code> 条件ブランチを使用する方が、通常 <code>&quot;node&quot;</code> および <code>&quot;browser&quot;</code> 条件ブランチを使用するよりも好ましいです。</p><h3 id="nested-conditions" tabindex="-1">ネストされた条件 <a class="header-anchor" href="#nested-conditions" aria-label="Permalink to “ネストされた条件”">​</a></h3><p>Node.jsは、直接的なマッピングに加えて、ネストされた条件オブジェクトもサポートしています。</p><p>例えば、Node.jsでのみデュアルモードのエントリーポイントを持ち、ブラウザでは使用しないパッケージを定義するには：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.cjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature.mjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>条件は、フラットな条件と同様に、順番にマッチングされます。ネストされた条件にマッピングがない場合、親条件の残りの条件のチェックを続けます。このように、ネストされた条件はネストされたJavaScriptの<code>if</code>文と同様に動作します。</p><h3 id="resolving-user-conditions" tabindex="-1">ユーザー条件の解決 <a class="header-anchor" href="#resolving-user-conditions" aria-label="Permalink to “ユーザー条件の解決”">​</a></h3><p><strong>追加: v14.9.0, v12.19.0</strong></p><p>Node.jsの実行時に、カスタムユーザー条件は<code>--conditions</code>フラグで追加できます：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --conditions=development</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>これにより、パッケージのインポートとエクスポートで<code>&quot;development&quot;</code>条件が解決され、既存の<code>&quot;node&quot;</code>, <code>&quot;node-addons&quot;</code>, <code>&quot;default&quot;</code>, <code>&quot;import&quot;</code>, <code>&quot;require&quot;</code>条件も適切に解決されます。</p><p>カスタム条件は、リピートフラグを使用していくつでも設定できます。</p><p>一般的な条件には、英数字のみを含める必要があり、必要に応じて&quot;:&quot;, &quot;-&quot;, または &quot;=&quot; を区切り文字として使用します。それ以外のものを使用すると、Node.js以外で互換性の問題が発生する可能性があります。</p><p>Node.jsでは、条件には制限がほとんどありませんが、具体的には次のものが含まれます。</p><h3 id="community-conditions-definitions" tabindex="-1">コミュニティ条件の定義 <a class="header-anchor" href="#community-conditions-definitions" aria-label="Permalink to “コミュニティ条件の定義”">​</a></h3><p><code>&quot;import&quot;</code>, <code>&quot;require&quot;</code>, <code>&quot;node&quot;</code>, <code>&quot;module-sync&quot;</code>, <code>&quot;node-addons&quot;</code> および <code>&quot;default&quot;</code> の条件 (<a href="/ja/nodejs/api/packages#conditional-exports">Node.jsコアで実装</a>) 以外の条件文字列は、デフォルトで無視されます。</p><p>他のプラットフォームは他の条件を実装する可能性があり、Node.jsでは、<a href="/ja/nodejs/api/packages#resolving-user-conditions"><code>--conditions</code> / <code>-C</code> フラグ</a> を介してユーザー条件を有効にできます。</p><p>カスタムパッケージ条件は、正しい使用法を保証するために明確な定義を必要とするため、一般的な既知のパッケージ条件とその厳密な定義のリストを以下に提供し、エコシステムの調整を支援します。</p><ul><li><code>&quot;types&quot;</code> - 型システムはこれを使用して、指定されたエクスポートの型定義ファイルを解決できます。<em>この条件は常に最初に含める必要があります。</em></li><li><code>&quot;browser&quot;</code> - すべてのWebブラウザ環境。</li><li><code>&quot;development&quot;</code> - 開発専用の環境エントリーポイントを定義するために使用できます。たとえば、開発モードで実行する場合、より良いエラーメッセージなどの追加のデバッグコンテキストを提供します。<em>常に<code>&quot;production&quot;</code>と相互に排他的である必要があります。</em></li><li><code>&quot;production&quot;</code> - 本番環境のエントリーポイントを定義するために使用できます。<em>常に<code>&quot;development&quot;</code>と相互に排他的である必要があります。</em></li></ul><p>他のランタイムの場合、プラットフォーム固有の条件キー定義は、<a href="https://wintercg.org/" target="_blank" rel="noreferrer">WinterCG</a> によって <a href="https://runtime-keys.proposal.wintercg.org/" target="_blank" rel="noreferrer">Runtime Keys</a> の提案仕様で管理されています。</p><p>新しい条件定義は、<a href="https://github.com/nodejs/node/blob/HEAD/doc/api/packages.md#conditions-definitions" target="_blank" rel="noreferrer">このセクションのNode.jsドキュメント</a> へのプルリクエストを作成することにより、このリストに追加できます。ここに新しい条件定義をリストする要件は次のとおりです。</p><ul><li>定義は、すべての実装者にとって明確かつ曖昧さがない必要があります。</li><li>条件が必要な理由に関するユースケースは、明確に正当化される必要があります。</li><li>既存の実装の使用法が十分に存在する必要があります。</li><li>条件名は、別の条件定義または広く使用されている条件と競合しないようにする必要があります。</li><li>条件定義のリストは、他の方法では不可能なエコシステムへの調整上のメリットを提供する必要があります。たとえば、会社固有またはアプリケーション固有の条件には必ずしも当てはまりません。</li><li>条件は、Node.jsユーザーがNode.jsコアドキュメントに含めることを期待するようなものである必要があります。<code>&quot;types&quot;</code> 条件が良い例です。<a href="https://runtime-keys.proposal.wintercg.org/" target="_blank" rel="noreferrer">Runtime Keys</a> の提案には実際には属していませんが、Node.jsドキュメントでは適切です。</li></ul><p>上記の定義は、適切な時期に専用の条件レジストリに移動される可能性があります。</p><h3 id="self-referencing-a-package-using-its-name" tabindex="-1">パッケージ名を使った自己参照 <a class="header-anchor" href="#self-referencing-a-package-using-its-name" aria-label="Permalink to “パッケージ名を使った自己参照”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v13.6.0, v12.16.0</td><td>パッケージ名を使った自己参照のフラグを解除。</td></tr><tr><td>v13.1.0, v12.16.0</td><td>追加: v13.1.0, v12.16.0</td></tr></tbody></table></div><p>パッケージ内では、パッケージの <code>package.json</code> の <a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドで定義された値は、パッケージの名前を使って参照できます。たとえば、<code>package.json</code> が次のようになっていると仮定します。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./foo.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>すると、<em>そのパッケージ内の</em> どのモジュールも、パッケージ自体でエクスポートを参照できます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./a-module.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { something } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a-package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./index.mjs から &quot;something&quot; をインポートします。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>自己参照は、<code>package.json</code> に <a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> がある場合にのみ利用でき、その <a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> (<code>package.json</code> 内) が許可するもののみインポートできます。したがって、前のパッケージが与えられた場合、次のコードはランタイムエラーを生成します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./another-module.mjs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./m.mjs から &quot;another&quot; をインポートします。&quot;package.json&quot; の &quot;exports&quot; フィールドが</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;./m.mjs&quot; という名前のエクスポートを提供していないため、失敗します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { another } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a-package/m.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>自己参照は、ESモジュールとCommonJSモジュールの両方で、<code>require</code> を使用する場合にも利用できます。たとえば、次のコードも動作します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./a-module.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">something</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a-package/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./foo.js からロードします。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>最後に、自己参照はスコープ付きパッケージでも機能します。たとえば、次のコードも動作します。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@my/package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./index.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./other.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@my/package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> other.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="dual-commonjs/es-module-packages" tabindex="-1">デュアル CommonJS/ES モジュールパッケージ <a class="header-anchor" href="#dual-commonjs/es-module-packages" aria-label="Permalink to “デュアル CommonJS/ES モジュールパッケージ”">​</a></h2><p>詳細については、<a href="https://github.com/nodejs/package-examples" target="_blank" rel="noreferrer">パッケージの例のリポジトリ</a>を参照してください。</p><h2 id="nodejs-packagejson-field-definitions" tabindex="-1">Node.js <code>package.json</code> フィールド定義 <a class="header-anchor" href="#nodejs-packagejson-field-definitions" aria-label="Permalink to “Node.js package.json フィールド定義”">​</a></h2><p>このセクションでは、Node.js ランタイムで使用されるフィールドについて説明します。その他のツール (<a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json" target="_blank" rel="noreferrer">npm</a> など) は、Node.js で無視され、ここではドキュメント化されていない追加のフィールドを使用します。</p><p><code>package.json</code> ファイルの次のフィールドが Node.js で使用されます。</p><ul><li><a href="/ja/nodejs/api/packages#name"><code>&quot;name&quot;</code></a> - パッケージ内で名前付きインポートを使用する場合に関連します。パッケージマネージャーでもパッケージ名として使用されます。</li><li><a href="/ja/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> - エクスポートが指定されていない場合、およびエクスポートが導入される前の Node.js のバージョンで、パッケージをロードする際のデフォルトモジュール。</li><li><a href="/ja/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> - パッケージへの貢献時に推奨されるパッケージマネージャー。<a href="/ja/nodejs/api/corepack">Corepack</a> シムによって活用されます。</li><li><a href="/ja/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> - <code>.js</code> ファイルを CommonJS としてロードするか、ES モジュールとしてロードかを決定するパッケージタイプ。</li><li><a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> - パッケージのエクスポートと条件付きエクスポート。存在する場合、パッケージ内からロードできるサブモジュールを制限します。</li><li><a href="/ja/nodejs/api/packages#imports"><code>&quot;imports&quot;</code></a> - パッケージのインポート。パッケージ内のモジュール自体で使用されます。</li></ul><h3 id="name" tabindex="-1"><code>&quot;name&quot;</code> <a class="header-anchor" href="#name" aria-label="Permalink to “&quot;name&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v13.6.0, v12.16.0</td><td><code>--experimental-resolve-self</code> オプションを削除しました。</td></tr><tr><td>v13.1.0, v12.16.0</td><td>追加: v13.1.0, v12.16.0</td></tr></tbody></table></div><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;package-name&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&quot;name&quot;</code> フィールドは、パッケージの名前を定義します。<em>npm</em> レジストリへの公開には、<a href="https://docs.npmjs.com/files/package.json#name" target="_blank" rel="noreferrer">特定の要件</a>を満たす名前が必要です。</p><p><code>&quot;name&quot;</code> フィールドは、<a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドに加えて、名前を使用してパッケージを<a href="/ja/nodejs/api/packages#self-referencing-a-package-using-its-name">自己参照</a>するために使用できます。</p><h3 id="main" tabindex="-1"><code>&quot;main&quot;</code> <a class="header-anchor" href="#main" aria-label="Permalink to “&quot;main&quot;”">​</a></h3><p><strong>追加: v0.4.0</strong></p><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&quot;main&quot;</code> フィールドは、<code>node_modules</code> 検索によって名前でインポートされた場合のパッケージのエントリーポイントを定義します。値はパスです。</p><p>パッケージに <a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドがある場合、名前でパッケージをインポートするときに、<code>&quot;main&quot;</code> フィールドよりも優先されます。</p><p>また、<a href="/ja/nodejs/api/modules#folders-as-modules">パッケージディレクトリが <code>require()</code> でロードされる</a>ときに使用されるスクリプトも定義します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// これは ./path/to/directory/index.js に解決されます。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./path/to/directory&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="packagemanager" tabindex="-1"><code>&quot;packageManager&quot;</code> <a class="header-anchor" href="#packagemanager" aria-label="Permalink to “&quot;packageManager&quot;”">​</a></h3><p><strong>追加: v16.9.0, v14.19.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;packageManager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;パッケージマネージャー名&gt;@&lt;バージョン&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&quot;packageManager&quot;</code> フィールドは、現在のプロジェクトで作業する際に使用することが期待されるパッケージマネージャーを定義します。これは、<a href="/ja/nodejs/api/corepack#supported-package-managers">サポートされているパッケージマネージャー</a>のいずれかに設定でき、Node.js以外のものをインストールしなくても、チームがまったく同じバージョンのパッケージマネージャーを使用することを保証します。</p><p>このフィールドは現在試験的であり、オプトインする必要があります。手順の詳細については、<a href="/ja/nodejs/api/corepack">Corepack</a>ページを確認してください。</p><h3 id="type" tabindex="-1"><code>&quot;type&quot;</code> <a class="header-anchor" href="#type" aria-label="Permalink to “&quot;type&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v13.2.0, v12.17.0</td><td><code>--experimental-modules</code> フラグを解除。</td></tr><tr><td>v12.0.0</td><td>追加: v12.0.0</td></tr></tbody></table></div><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>&quot;type&quot;</code> フィールドは、Node.js が、その <code>package.json</code> ファイルを最も近い親として持つすべての <code>.js</code> ファイルに使用するモジュール形式を定義します。</p><p><code>.js</code> で終わるファイルは、最も近い親の <code>package.json</code> ファイルに <code>&quot;type&quot;</code> というトップレベルのフィールドがあり、その値が <code>&quot;module&quot;</code> の場合に ES モジュールとして読み込まれます。</p><p>最も近い親の <code>package.json</code> は、現在のフォルダー、そのフォルダーの親、などと node_modules フォルダーまたはボリュームルートに到達するまで検索したときに最初に見つかる <code>package.json</code> として定義されます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 前の package.json と同じフォルダー内 {#in-same-folder-as-preceding-packagejson}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ES モジュールとして実行</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>最も近い親の <code>package.json</code> に <code>&quot;type&quot;</code> フィールドがない場合、または <code>&quot;type&quot;: &quot;commonjs&quot;</code> が含まれている場合、<code>.js</code> ファイルは <a href="/ja/nodejs/api/modules">CommonJS</a> として扱われます。 ボリュームルートに到達し、<code>package.json</code> が見つからない場合、<code>.js</code> ファイルは <a href="/ja/nodejs/api/modules">CommonJS</a> として扱われます。</p><p><code>.js</code> ファイルの <code>import</code> ステートメントは、最も近い親の <code>package.json</code> に <code>&quot;type&quot;: &quot;module&quot;</code> が含まれている場合、ES モジュールとして扱われます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// my-app.js, 上記の例の一部</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./startup.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json のために ES モジュールとして読み込まれます</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>&quot;type&quot;</code> フィールドの値に関係なく、<code>.mjs</code> ファイルは常に ES モジュールとして扱われ、<code>.cjs</code> ファイルは常に CommonJS として扱われます。</p><h3 id="exports" tabindex="-1"><code>&quot;exports&quot;</code> <a class="header-anchor" href="#exports" aria-label="Permalink to “&quot;exports&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v14.13.0, v12.20.0</td><td><code>&quot;exports&quot;</code> パターンのサポートを追加。</td></tr><tr><td>v13.7.0, v12.17.0</td><td>条件付きエクスポートのフラグを解除。</td></tr><tr><td>v13.7.0, v12.16.0</td><td>論理的な条件付きエクスポートの順序を実装。</td></tr><tr><td>v13.7.0, v12.16.0</td><td><code>--experimental-conditional-exports</code> オプションを削除。 12.16.0 では、条件付きエクスポートはまだ <code>--experimental-modules</code> の背後にあります。</td></tr><tr><td>v13.2.0, v12.16.0</td><td>条件付きエクスポートを実装。</td></tr><tr><td>v12.7.0</td><td>追加: v12.7.0</td></tr></tbody></table></div><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&quot;exports&quot;</code> フィールドを使用すると、<code>node_modules</code> 検索または独自の名前への <a href="/ja/nodejs/api/packages#self-referencing-a-package-using-its-name">自己参照</a> を介して読み込まれた名前でインポートされたときに、パッケージの <a href="/ja/nodejs/api/packages#package-entry-points">エントリーポイント</a> を定義できます。 これは、<a href="/ja/nodejs/api/packages#subpath-exports">サブパスのエクスポート</a> と <a href="/ja/nodejs/api/packages#conditional-exports">条件付きエクスポート</a> の定義をサポートし、内部の未エクスポートモジュールをカプセル化できる <a href="/ja/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> の代替として Node.js 12 以降でサポートされています。</p><p><a href="/ja/nodejs/api/packages#conditional-exports">条件付きエクスポート</a> は <code>&quot;exports&quot;</code> 内で使用して、パッケージが <code>require</code> または <code>import</code> のどちらで参照されるかなど、環境ごとに異なるパッケージのエントリーポイントを定義することもできます。</p><p><code>&quot;exports&quot;</code> で定義されているすべてのパスは、<code>./</code> で始まる相対ファイル URL である必要があります。</p><h3 id="imports" tabindex="-1"><code>&quot;imports&quot;</code> <a class="header-anchor" href="#imports" aria-label="Permalink to “&quot;imports&quot;”">​</a></h3><p><strong>追加:</strong> v14.6.0, v12.19.0</p><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#dep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dep-polyfill.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>importsフィールドのエントリは、<code>#</code>で始まる文字列でなければなりません。</p><p>パッケージインポートは、外部パッケージへのマッピングを許可します。</p><p>このフィールドは、現在のパッケージの<a href="/ja/nodejs/api/packages#subpath-imports">サブパスインポート</a>を定義します。</p>`,209)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};