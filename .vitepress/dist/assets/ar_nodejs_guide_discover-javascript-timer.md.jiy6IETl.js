import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"مؤقتات JavaScript - setTimeout و setInterval","description":"تعلم كيفية استخدام مؤقتات JavaScript لتأخير تنفيذ الدوال وجدولة المهام باستخدام setTimeout و setInterval.","frontmatter":{"title":"مؤقتات JavaScript - setTimeout و setInterval","description":"تعلم كيفية استخدام مؤقتات JavaScript لتأخير تنفيذ الدوال وجدولة المهام باستخدام setTimeout و setInterval.","head":[["meta",{"name":"og:title","content":"مؤقتات JavaScript - setTimeout و setInterval | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"تعلم كيفية استخدام مؤقتات JavaScript لتأخير تنفيذ الدوال وجدولة المهام باستخدام setTimeout و setInterval."}],["meta",{"name":"twitter:title","content":"مؤقتات JavaScript - setTimeout و setInterval | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"تعلم كيفية استخدام مؤقتات JavaScript لتأخير تنفيذ الدوال وجدولة المهام باستخدام setTimeout و setInterval."}],["link",{"rel":"canonical","href":"https://idoc.dev/ar/nodejs/guide/discover-javascript-timer"}],["meta",{"property":"og:url","content":"https://idoc.dev/ar/nodejs/guide/discover-javascript-timer"}]]},"headers":[],"relativePath":"ar/nodejs/guide/discover-javascript-timer.md","filePath":"ar/nodejs/guide/discover-javascript-timer.md","lastUpdated":1749464498000}`),a={name:`ar/nodejs/guide/discover-javascript-timer.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="اكتشف-مؤقتات-javascript" tabindex="-1">اكتشف مؤقتات JavaScript <a class="header-anchor" href="#اكتشف-مؤقتات-javascript" aria-label="Permalink to “اكتشف مؤقتات JavaScript”">​</a></h1><h3 id="settimeout" tabindex="-1"><code>setTimeout()</code> <a class="header-anchor" href="#settimeout" aria-label="Permalink to “setTimeout()”">​</a></h3><p>عند كتابة كود JavaScript ، قد ترغب في تأخير تنفيذ وظيفة ما.</p><p>هذه هي وظيفة <code>setTimeout</code>. يمكنك تحديد وظيفة رد نداء ليتم تنفيذها لاحقًا ، وقيمة تعبر عن المدة التي تريد تشغيلها لاحقًا بالمللي ثانية:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // يتم التشغيل بعد ثانيتين</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // يتم التشغيل بعد 50 مللي ثانية</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>يحدد هذا التركيب وظيفة جديدة. يمكنك استدعاء أي وظيفة أخرى تريدها هناك ، أو يمكنك تمرير اسم وظيفة موجودة ، ومجموعة من المعلمات:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">firstParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">secondParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // قم بشيء ما</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// يتم التشغيل بعد ثانيتين</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myFunction, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, firstParam, secondParam);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>ترجع <code>setTimeout</code> معرف المؤقت. لا يتم استخدام هذا بشكل عام ، ولكن يمكنك تخزين هذا المعرف ومسحه إذا كنت تريد حذف تنفيذ الوظيفة المجدولة:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // يجب أن يتم التشغيل بعد ثانيتين</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// لقد غيرت رأيي</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="تأخير-صفري" tabindex="-1">تأخير صفري <a class="header-anchor" href="#تأخير-صفري" aria-label="Permalink to “تأخير صفري”">​</a></h2><p>إذا قمت بتحديد تأخير المهلة إلى 0 ، فسيتم تنفيذ وظيفة رد النداء في أقرب وقت ممكن ، ولكن بعد تنفيذ الوظيفة الحالية:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;بعد &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; قبل &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>سيقوم هذا الكود بطباعة</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">قبل</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">بعد</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>هذا مفيد بشكل خاص لتجنب حظر وحدة المعالجة المركزية على المهام المكثفة والسماح بتنفيذ وظائف أخرى أثناء إجراء حساب ثقيل ، عن طريق وضع وظائف في قائمة الانتظار في المجدول.</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>تقوم بعض المتصفحات (IE و Edge) بتنفيذ طريقة <code>setImmediate ()</code> التي تقوم بنفس الوظيفة تمامًا ، ولكنها ليست قياسية و <a href="https://caniuse.com/#feat=setimmediate" target="_blank" rel="noreferrer">غير متوفرة في المتصفحات الأخرى</a>. لكنها وظيفة قياسية في Node.js.</p></div><h3 id="setinterval" tabindex="-1"><code>setInterval()</code> <a class="header-anchor" href="#setinterval" aria-label="Permalink to “setInterval()”">​</a></h3><p><code>setInterval</code> هي دالة مشابهة لـ <code>setTimeout</code> ، مع اختلاف: بدلاً من تشغيل وظيفة رد النداء مرة واحدة ، سيتم تشغيلها إلى الأبد ، في الفترة الزمنية المحددة التي تحددها (بالمللي ثانية):</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // يتم التشغيل كل ثانيتين</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>تعمل الوظيفة أعلاه كل ثانيتين ما لم تخبرها بالتوقف ، باستخدام <code>clearInterval</code> ، وتمرير معرف الفاصل الزمني الذي أرجعته <code>setInterval</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // يتم التشغيل كل ثانيتين</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// لقد غيرت رأيي</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>من الشائع استدعاء <code>clearInterval</code> داخل وظيفة رد نداء <code>setInterval</code> ، لتمكينها من تحديد ما إذا كان يجب تشغيلها مرة أخرى أو التوقف تلقائيًا. على سبيل المثال ، يقوم هذا الكود بتشغيل شيء ما ما لم تكن قيمة App.somethingIWait قد وصلت:</p><h2 id="settimeout-متكرر" tabindex="-1">setTimeout متكرر <a class="header-anchor" href="#settimeout-متكرر" aria-label="Permalink to “setTimeout متكرر”">​</a></h2><p>يبدأ <code>setInterval</code> دالة كل ن ملي ثانية، دون أي اعتبار لموعد انتهاء الدالة من تنفيذها.</p><p>إذا كانت الدالة تستغرق دائمًا نفس القدر من الوقت، فالأمر على ما يرام.</p><p>ربما تستغرق الدالة أوقات تنفيذ مختلفة، اعتمادًا على ظروف الشبكة.</p><p>وربما يتداخل تنفيذ طويل مع التنفيذ التالي.</p><p>لتجنب ذلك، يمكنك جدولة setTimeout متكرر ليتم استدعاؤه عند انتهاء دالة الاستدعاء:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // فعل شيء ما</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myFunction, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myFunction, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>يتوفر <code>setTimeout</code> و <code>setInterval</code> في Node.js، من خلال <a href="/ar/nodejs/api/timers">وحدة المؤقتات</a>.</p><p>يوفر Node.js أيضًا <code>setImmediate()</code>، وهو ما يعادل استخدام <code>setTimeout(() =&gt; {}, 0)</code>، ويستخدم في الغالب للعمل مع حلقة أحداث Node.js.</p>`,31)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};