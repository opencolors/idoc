import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js Documentation - TLS (Transport Layer Security)","description":"This section of the Node.js documentation covers the TLS (Transport Layer Security) module, which provides an implementation of the TLS and SSL protocols. It includes details on creating secure connections, managing certificates, handling secure communication, and various options for configuring TLS/SSL in Node.js applications.","frontmatter":{"title":"Node.js Documentation - TLS (Transport Layer Security)","description":"This section of the Node.js documentation covers the TLS (Transport Layer Security) module, which provides an implementation of the TLS and SSL protocols. It includes details on creating secure connections, managing certificates, handling secure communication, and various options for configuring TLS/SSL in Node.js applications.","head":[["meta",{"name":"og:title","content":"Node.js Documentation - TLS (Transport Layer Security) | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"This section of the Node.js documentation covers the TLS (Transport Layer Security) module, which provides an implementation of the TLS and SSL protocols. It includes details on creating secure connections, managing certificates, handling secure communication, and various options for configuring TLS/SSL in Node.js applications."}],["meta",{"name":"twitter:title","content":"Node.js Documentation - TLS (Transport Layer Security) | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"This section of the Node.js documentation covers the TLS (Transport Layer Security) module, which provides an implementation of the TLS and SSL protocols. It includes details on creating secure connections, managing certificates, handling secure communication, and various options for configuring TLS/SSL in Node.js applications."}],["link",{"rel":"canonical","href":"https://idoc.dev/nodejs/api/tls"}],["meta",{"property":"og:url","content":"https://idoc.dev/nodejs/api/tls"}]]},"headers":[],"relativePath":"nodejs/api/tls.md","filePath":"en/nodejs/api/tls.md","lastUpdated":null}`),a={name:`nodejs/api/tls.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="tls-ssl" tabindex="-1">TLS (SSL) <a class="header-anchor" href="#tls-ssl" aria-label="Permalink to “TLS (SSL)”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/nodejs/api/documentation#stability-index">Stability: 2</a> - Stable</p></div><p><strong>Source Code:</strong> <a href="https://github.com/nodejs/node/blob/v23.8.0/lib/tls.js" target="_blank" rel="noreferrer">lib/tls.js</a></p><p>The <code>node:tls</code> module provides an implementation of the Transport Layer Security (TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL. The module can be accessed using:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-14" id="tab-15" checked><label data-title="ESM" for="tab-15">ESM</label><input type="radio" name="group-14" id="tab-16"><label data-title="CJS" for="tab-16">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:tls&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:tls&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><h2 id="determining-if-crypto-support-is-unavailable" tabindex="-1">Determining if crypto support is unavailable <a class="header-anchor" href="#determining-if-crypto-support-is-unavailable" aria-label="Permalink to “Determining if crypto support is unavailable”">​</a></h2><p>It is possible for Node.js to be built without including support for the <code>node:crypto</code> module. In such cases, attempting to <code>import</code> from <code>tls</code> or calling <code>require(&#39;node:tls&#39;)</code> will result in an error being thrown.</p><p>When using CommonJS, the error thrown can be caught using try/catch:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tls;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:tls&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tls support is disabled!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>When using the lexical ESM <code>import</code> keyword, the error can only be caught if a handler for <code>process.on(&#39;uncaughtException&#39;)</code> is registered <em>before</em> any attempt to load the module is made (using, for instance, a preload module).</p><p>When using ESM, if there is a chance that the code may be run on a build of Node.js where crypto support is not enabled, consider using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import" target="_blank" rel="noreferrer"><code>import()</code></a> function instead of the lexical <code>import</code> keyword:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tls;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:tls&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tls support is disabled!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="tls/ssl-concepts" tabindex="-1">TLS/SSL concepts <a class="header-anchor" href="#tls/ssl-concepts" aria-label="Permalink to “TLS/SSL concepts”">​</a></h2><p>TLS/SSL is a set of protocols that rely on a public key infrastructure (PKI) to enable secure communication between a client and a server. For most common cases, each server must have a private key.</p><p>Private keys can be generated in multiple ways. The example below illustrates use of the OpenSSL command-line interface to generate a 2048-bit RSA private key:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> genrsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ryans-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2048</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>With TLS/SSL, all servers (and some clients) must have a <em>certificate</em>. Certificates are <em>public keys</em> that correspond to a private key, and that are digitally signed either by a Certificate Authority or by the owner of the private key (such certificates are referred to as &quot;self-signed&quot;). The first step to obtaining a certificate is to create a <em>Certificate Signing Request</em> (CSR) file.</p><p>The OpenSSL command-line interface can be used to generate a CSR for a private key:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sha256</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ryans-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ryans-csr.pem</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Once the CSR file is generated, it can either be sent to a Certificate Authority for signing or used to generate a self-signed certificate.</p><p>Creating a self-signed certificate using the OpenSSL command-line interface is illustrated in the example below:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ryans-csr.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -signkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ryans-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ryans-cert.pem</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Once the certificate is generated, it can be used to generate a <code>.pfx</code> or <code>.p12</code> file:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkcs12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ryans-cert.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -inkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ryans-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      -certfile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca-cert.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ryans.pfx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Where:</p><ul><li><code>in</code>: is the signed certificate</li><li><code>inkey</code>: is the associated private key</li><li><code>certfile</code>: is a concatenation of all Certificate Authority (CA) certs into a single file, e.g. <code>cat ca1-cert.pem ca2-cert.pem \\&gt; ca-cert.pem</code></li></ul><h3 id="perfect-forward-secrecy" tabindex="-1">Perfect forward secrecy <a class="header-anchor" href="#perfect-forward-secrecy" aria-label="Permalink to “Perfect forward secrecy”">​</a></h3><p>The term <em><a href="https://en.wikipedia.org/wiki/Perfect_forward_secrecy">forward secrecy</a></em> or <em>perfect forward secrecy</em> describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server&#39;s private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session.</p><p>Perfect forward secrecy is achieved by randomly generating a key pair for key-agreement on every TLS/SSL handshake (in contrast to using the same key for all sessions). Methods implementing this technique are called &quot;ephemeral&quot;.</p><p>Currently two methods are commonly used to achieve perfect forward secrecy (note the character &quot;E&quot; appended to the traditional abbreviations):</p><ul><li><a href="https://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman" target="_blank" rel="noreferrer">ECDHE</a>: An ephemeral version of the Elliptic Curve Diffie-Hellman key-agreement protocol.</li><li><a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange" target="_blank" rel="noreferrer">DHE</a>: An ephemeral version of the Diffie-Hellman key-agreement protocol.</li></ul><p>Perfect forward secrecy using ECDHE is enabled by default. The <code>ecdhCurve</code> option can be used when creating a TLS server to customize the list of supported ECDH curves to use. See <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a> for more info.</p><p>DHE is disabled by default but can be enabled alongside ECDHE by setting the <code>dhparam</code> option to <code>&#39;auto&#39;</code>. Custom DHE parameters are also supported but discouraged in favor of automatically selected, well-known parameters.</p><p>Perfect forward secrecy was optional up to TLSv1.2. As of TLSv1.3, (EC)DHE is always used (with the exception of PSK-only connections).</p><h3 id="alpn-and-sni" tabindex="-1">ALPN and SNI <a class="header-anchor" href="#alpn-and-sni" aria-label="Permalink to “ALPN and SNI”">​</a></h3><p>ALPN (Application-Layer Protocol Negotiation Extension) and SNI (Server Name Indication) are TLS handshake extensions:</p><ul><li>ALPN: Allows the use of one TLS server for multiple protocols (HTTP, HTTP/2)</li><li>SNI: Allows the use of one TLS server for multiple hostnames with different certificates.</li></ul><h3 id="pre-shared-keys" tabindex="-1">Pre-shared keys <a class="header-anchor" href="#pre-shared-keys" aria-label="Permalink to “Pre-shared keys”">​</a></h3><p>TLS-PSK support is available as an alternative to normal certificate-based authentication. It uses a pre-shared key instead of certificates to authenticate a TLS connection, providing mutual authentication. TLS-PSK and public key infrastructure are not mutually exclusive. Clients and servers can accommodate both, choosing either of them during the normal cipher negotiation step.</p><p>TLS-PSK is only a good choice where means exist to securely share a key with every connecting machine, so it does not replace the public key infrastructure (PKI) for the majority of TLS uses. The TLS-PSK implementation in OpenSSL has seen many security flaws in recent years, mostly because it is used only by a minority of applications. Please consider all alternative solutions before switching to PSK ciphers. Upon generating PSK it is of critical importance to use sufficient entropy as discussed in <a href="https://tools.ietf.org/html/rfc4086" target="_blank" rel="noreferrer">RFC 4086</a>. Deriving a shared secret from a password or other low-entropy sources is not secure.</p><p>PSK ciphers are disabled by default, and using TLS-PSK thus requires explicitly specifying a cipher suite with the <code>ciphers</code> option. The list of available ciphers can be retrieved via <code>openssl ciphers -v &#39;PSK&#39;</code>. All TLS 1.3 ciphers are eligible for PSK and can be retrieved via <code>openssl ciphers -v -s -tls1_3 -psk</code>. On the client connection, a custom <code>checkServerIdentity</code> should be passed because the default one will fail in the absence of a certificate.</p><p>According to the <a href="https://tools.ietf.org/html/rfc4279" target="_blank" rel="noreferrer">RFC 4279</a>, PSK identities up to 128 bytes in length and PSKs up to 64 bytes in length must be supported. As of OpenSSL 1.1.0 maximum identity size is 128 bytes, and maximum PSK length is 256 bytes.</p><p>The current implementation doesn&#39;t support asynchronous PSK callbacks due to the limitations of the underlying OpenSSL API.</p><p>To use TLS-PSK, client and server must specify the <code>pskCallback</code> option, a function that returns the PSK to use (which must be compatible with the selected cipher&#39;s digest).</p><p>It will be called first on the client:</p><ul><li>hint: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> optional message sent from the server to help the client decide which identity to use during negotiation. Always <code>null</code> if TLS 1.3 is used.</li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> in the form <code>{ psk: \\&lt;Buffer|TypedArray|DataView\\&gt;, identity: \\&lt;string\\&gt; }</code> or <code>null</code>.</li></ul><p>Then on the server:</p><ul><li>socket: <a href="/nodejs/api/tls#class-tlstlssocket">&lt;tls.TLSSocket&gt;</a> the server socket instance, equivalent to <code>this</code>.</li><li>identity: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> identity parameter sent from the client.</li><li>Returns: <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> the PSK (or <code>null</code>).</li></ul><p>A return value of <code>null</code> stops the negotiation process and sends an <code>unknown_psk_identity</code> alert message to the other party. If the server wishes to hide the fact that the PSK identity was not known, the callback must provide some random data as <code>psk</code> to make the connection fail with <code>decrypt_error</code> before negotiation is finished.</p><h3 id="client-initiated-renegotiation-attack-mitigation" tabindex="-1">Client-initiated renegotiation attack mitigation <a class="header-anchor" href="#client-initiated-renegotiation-attack-mitigation" aria-label="Permalink to “Client-initiated renegotiation attack mitigation”">​</a></h3><p>The TLS protocol allows clients to renegotiate certain aspects of the TLS session. Unfortunately, session renegotiation requires a disproportionate amount of server-side resources, making it a potential vector for denial-of-service attacks.</p><p>To mitigate the risk, renegotiation is limited to three times every ten minutes. An <code>&#39;error&#39;</code> event is emitted on the <a href="/nodejs/api/tls#class-tlstlssocket"><code>tls.TLSSocket</code></a> instance when this threshold is exceeded. The limits are configurable:</p><ul><li><code>tls.CLIENT_RENEG_LIMIT</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> Specifies the number of renegotiation requests. <strong>Default:</strong> <code>3</code>.</li><li><code>tls.CLIENT_RENEG_WINDOW</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> Specifies the time renegotiation window in seconds. <strong>Default:</strong> <code>600</code> (10 minutes).</li></ul><p>The default renegotiation limits should not be modified without a full understanding of the implications and risks.</p><p>TLSv1.3 does not support renegotiation.</p><h3 id="session-resumption" tabindex="-1">Session resumption <a class="header-anchor" href="#session-resumption" aria-label="Permalink to “Session resumption”">​</a></h3><p>Establishing a TLS session can be relatively slow. The process can be sped up by saving and later reusing the session state. There are several mechanisms to do so, discussed here from oldest to newest (and preferred).</p><h4 id="session-identifiers" tabindex="-1">Session identifiers <a class="header-anchor" href="#session-identifiers" aria-label="Permalink to “Session identifiers”">​</a></h4><p>Servers generate a unique ID for new connections and send it to the client. Clients and servers save the session state. When reconnecting, clients send the ID of their saved session state and if the server also has the state for that ID, it can agree to use it. Otherwise, the server will create a new session. See <a href="https://www.ietf.org/rfc/rfc2246.txt" target="_blank" rel="noreferrer">RFC 2246</a> for more information, page 23 and 30.</p><p>Resumption using session identifiers is supported by most web browsers when making HTTPS requests.</p><p>For Node.js, clients wait for the <a href="/nodejs/api/tls#event-session"><code>&#39;session&#39;</code></a> event to get the session data, and provide the data to the <code>session</code> option of a subsequent <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a> to reuse the session. Servers must implement handlers for the <a href="/nodejs/api/tls#event-newsession"><code>&#39;newSession&#39;</code></a> and <a href="/nodejs/api/tls#event-resumesession"><code>&#39;resumeSession&#39;</code></a> events to save and restore the session data using the session ID as the lookup key to reuse sessions. To reuse sessions across load balancers or cluster workers, servers must use a shared session cache (such as Redis) in their session handlers.</p><h4 id="session-tickets" tabindex="-1">Session tickets <a class="header-anchor" href="#session-tickets" aria-label="Permalink to “Session tickets”">​</a></h4><p>The servers encrypt the entire session state and send it to the client as a &quot;ticket&quot;. When reconnecting, the state is sent to the server in the initial connection. This mechanism avoids the need for a server-side session cache. If the server doesn&#39;t use the ticket, for any reason (failure to decrypt it, it&#39;s too old, etc.), it will create a new session and send a new ticket. See <a href="https://tools.ietf.org/html/rfc5077" target="_blank" rel="noreferrer">RFC 5077</a> for more information.</p><p>Resumption using session tickets is becoming commonly supported by many web browsers when making HTTPS requests.</p><p>For Node.js, clients use the same APIs for resumption with session identifiers as for resumption with session tickets. For debugging, if <a href="/nodejs/api/tls#tlssocketgettlsticket"><code>tls.TLSSocket.getTLSTicket()</code></a> returns a value, the session data contains a ticket, otherwise it contains client-side session state.</p><p>With TLSv1.3, be aware that multiple tickets may be sent by the server, resulting in multiple <code>&#39;session&#39;</code> events, see <a href="/nodejs/api/tls#event-session"><code>&#39;session&#39;</code></a> for more information.</p><p>Single process servers need no specific implementation to use session tickets. To use session tickets across server restarts or load balancers, servers must all have the same ticket keys. There are three 16-byte keys internally, but the tls API exposes them as a single 48-byte buffer for convenience.</p><p>It&#39;s possible to get the ticket keys by calling <a href="/nodejs/api/tls#servergetticketkeys"><code>server.getTicketKeys()</code></a> on one server instance and then distribute them, but it is more reasonable to securely generate 48 bytes of secure random data and set them with the <code>ticketKeys</code> option of <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a>. The keys should be regularly regenerated and server&#39;s keys can be reset with <a href="/nodejs/api/tls#serversetticketkeyskeys"><code>server.setTicketKeys()</code></a>.</p><p>Session ticket keys are cryptographic keys, and they <em><strong>must be stored securely</strong></em>. With TLS 1.2 and below, if they are compromised all sessions that used tickets encrypted with them can be decrypted. They should not be stored on disk, and they should be regenerated regularly.</p><p>If clients advertise support for tickets, the server will send them. The server can disable tickets by supplying <code>require(&#39;node:constants&#39;).SSL_OP_NO_TICKET</code> in <code>secureOptions</code>.</p><p>Both session identifiers and session tickets timeout, causing the server to create new sessions. The timeout can be configured with the <code>sessionTimeout</code> option of <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a>.</p><p>For all the mechanisms, when resumption fails, servers will create new sessions. Since failing to resume the session does not cause TLS/HTTPS connection failures, it is easy to not notice unnecessarily poor TLS performance. The OpenSSL CLI can be used to verify that servers are resuming sessions. Use the <code>-reconnect</code> option to <code>openssl s_client</code>, for example:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s_client</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -connect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:443</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -reconnect</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Read through the debug output. The first connection should say &quot;New&quot;, for example:</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>New, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Subsequent connections should say &quot;Reused&quot;, for example:</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>Reused, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="modifying-the-default-tls-cipher-suite" tabindex="-1">Modifying the default TLS cipher suite <a class="header-anchor" href="#modifying-the-default-tls-cipher-suite" aria-label="Permalink to “Modifying the default TLS cipher suite”">​</a></h2><p>Node.js is built with a default suite of enabled and disabled TLS ciphers. This default cipher list can be configured when building Node.js to allow distributions to provide their own default list.</p><p>The following command can be used to show the default cipher suite:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crypto.constants.defaultCoreCipherList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;:&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\n&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TLS_AES_256_GCM_SHA384</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TLS_CHACHA20_POLY1305_SHA256</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TLS_AES_128_GCM_SHA256</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ECDHE-RSA-AES128-GCM-SHA256</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ECDHE-ECDSA-AES128-GCM-SHA256</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ECDHE-RSA-AES256-GCM-SHA384</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ECDHE-ECDSA-AES256-GCM-SHA384</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DHE-RSA-AES128-GCM-SHA256</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ECDHE-RSA-AES128-SHA256</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DHE-RSA-AES128-SHA256</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ECDHE-RSA-AES256-SHA384</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DHE-RSA-AES256-SHA384</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ECDHE-RSA-AES256-SHA256</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DHE-RSA-AES256-SHA256</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HIGH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aNULL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eNULL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXPORT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DES</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RC4</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MD5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PSK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SRP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CAMELLIA</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>This default can be replaced entirely using the <a href="/nodejs/api/cli#tls-cipher-listlist"><code>--tls-cipher-list</code></a> command-line switch (directly, or via the <a href="/nodejs/api/cli#node-optionsoptions"><code>NODE_OPTIONS</code></a> environment variable). For instance, the following makes <code>ECDHE-RSA-AES128-GCM-SHA256:!RC4</code> the default TLS cipher suite:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tls-cipher-list=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ECDHE-RSA-AES128-GCM-SHA256:!RC4&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NODE_OPTIONS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--tls-cipher-list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ECDHE-RSA-AES128-GCM-SHA256:!RC4&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>To verify, use the following command to show the set cipher list, note the difference between <code>defaultCoreCipherList</code> and <code>defaultCipherList</code>:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tls-cipher-list=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ECDHE-RSA-AES128-GCM-SHA256:!RC4&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crypto.constants.defaultCipherList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;:&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\n&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ECDHE-RSA-AES128-GCM-SHA256</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RC4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>i.e. the <code>defaultCoreCipherList</code> list is set at compilation time and the <code>defaultCipherList</code> is set at runtime.</p><p>To modify the default cipher suites from within the runtime, modify the <code>tls.DEFAULT_CIPHERS</code> variable, this must be performed before listening on any sockets, it will not affect sockets already opened. For example:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Remove Obsolete CBC Ciphers and RSA Key Exchange based Ciphers as they don&#39;t provide Forward Secrecy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tls.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DEFAULT_CIPHERS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +=</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;:!ECDHE-RSA-AES128-SHA:!ECDHE-RSA-AES128-SHA256:!ECDHE-RSA-AES256-SHA:!ECDHE-RSA-AES256-SHA384&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;:!ECDHE-ECDSA-AES128-SHA:!ECDHE-ECDSA-AES128-SHA256:!ECDHE-ECDSA-AES256-SHA:!ECDHE-ECDSA-AES256-SHA384&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;:!kRSA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The default can also be replaced on a per client or server basis using the <code>ciphers</code> option from <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a>, which is also available in <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a>, <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a>, and when creating new <a href="/nodejs/api/tls#class-tlstlssocket"><code>tls.TLSSocket</code></a>s.</p><p>The ciphers list can contain a mixture of TLSv1.3 cipher suite names, the ones that start with <code>&#39;TLS_&#39;</code>, and specifications for TLSv1.2 and below cipher suites. The TLSv1.2 ciphers support a legacy specification format, consult the OpenSSL <a href="https://www.openssl.org/docs/man1.1.1/man1/ciphers#CIPHER-LIST-FORMAT" target="_blank" rel="noreferrer">cipher list format</a> documentation for details, but those specifications do <em>not</em> apply to TLSv1.3 ciphers. The TLSv1.3 suites can only be enabled by including their full name in the cipher list. They cannot, for example, be enabled or disabled by using the legacy TLSv1.2 <code>&#39;EECDH&#39;</code> or <code>&#39;!EECDH&#39;</code> specification.</p><p>Despite the relative order of TLSv1.3 and TLSv1.2 cipher suites, the TLSv1.3 protocol is significantly more secure than TLSv1.2, and will always be chosen over TLSv1.2 if the handshake indicates it is supported, and if any TLSv1.3 cipher suites are enabled.</p><p>The default cipher suite included within Node.js has been carefully selected to reflect current security best practices and risk mitigation. Changing the default cipher suite can have a significant impact on the security of an application. The <code>--tls-cipher-list</code> switch and <code>ciphers</code> option should by used only if absolutely necessary.</p><p>The default cipher suite prefers GCM ciphers for <a href="https://www.chromium.org/Home/chromium-security/education/tls#TOC-Cipher-Suites" target="_blank" rel="noreferrer">Chrome&#39;s &#39;modern cryptography&#39; setting</a> and also prefers ECDHE and DHE ciphers for perfect forward secrecy, while offering <em>some</em> backward compatibility.</p><p>Old clients that rely on insecure and deprecated RC4 or DES-based ciphers (like Internet Explorer 6) cannot complete the handshaking process with the default configuration. If these clients <em>must</em> be supported, the <a href="https://wiki.mozilla.org/Security/Server_Side_TLS" target="_blank" rel="noreferrer">TLS recommendations</a> may offer a compatible cipher suite. For more details on the format, see the OpenSSL <a href="https://www.openssl.org/docs/man1.1.1/man1/ciphers#CIPHER-LIST-FORMAT" target="_blank" rel="noreferrer">cipher list format</a> documentation.</p><p>There are only five TLSv1.3 cipher suites:</p><ul><li><code>&#39;TLS_AES_256_GCM_SHA384&#39;</code></li><li><code>&#39;TLS_CHACHA20_POLY1305_SHA256&#39;</code></li><li><code>&#39;TLS_AES_128_GCM_SHA256&#39;</code></li><li><code>&#39;TLS_AES_128_CCM_SHA256&#39;</code></li><li><code>&#39;TLS_AES_128_CCM_8_SHA256&#39;</code></li></ul><p>The first three are enabled by default. The two <code>CCM</code>-based suites are supported by TLSv1.3 because they may be more performant on constrained systems, but they are not enabled by default since they offer less security.</p><h2 id="openssl-security-level" tabindex="-1">OpenSSL security level <a class="header-anchor" href="#openssl-security-level" aria-label="Permalink to “OpenSSL security level”">​</a></h2><p>The OpenSSL library enforces security levels to control the minimum acceptable level of security for cryptographic operations. OpenSSL&#39;s security levels range from 0 to 5, with each level imposing stricter security requirements. The default security level is 1, which is generally suitable for most modern applications. However, some legacy features and protocols, such as TLSv1, require a lower security level (<code>SECLEVEL=0</code>) to function properly. For more detailed information, please refer to the <a href="https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_security_level#DEFAULT-CALLBACK-BEHAVIOUR" target="_blank" rel="noreferrer">OpenSSL documentation on security levels</a>.</p><h3 id="setting-security-levels" tabindex="-1">Setting security levels <a class="header-anchor" href="#setting-security-levels" aria-label="Permalink to “Setting security levels”">​</a></h3><p>To adjust the security level in your Node.js application, you can include <code>@SECLEVEL=X</code> within a cipher string, where <code>X</code> is the desired security level. For example, to set the security level to 0 while using the default OpenSSL cipher list, you could use:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-368" id="tab-369" checked><label data-title="ESM" for="tab-369">ESM</label><input type="radio" name="group-368" id="tab-370"><label data-title="CJS" for="tab-370">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createServer, connect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:tls&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ ciphers: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DEFAULT@SECLEVEL=0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, minVersion: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;TLSv1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Client connected with protocol:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port, { ciphers: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DEFAULT@SECLEVEL=0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, maxVersion: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;TLSv1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:tls&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ ciphers: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DEFAULT@SECLEVEL=0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, minVersion: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;TLSv1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Client connected with protocol:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port, { ciphers: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DEFAULT@SECLEVEL=0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, maxVersion: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;TLSv1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div></div><p>This approach sets the security level to 0, allowing the use of legacy features while still leveraging the default OpenSSL ciphers.</p><h3 id="using" tabindex="-1">Using <a class="header-anchor" href="#using" aria-label="Permalink to “Using”">​</a></h3><p>You can also set the security level and ciphers from the command line using the <code>--tls-cipher-list=DEFAULT@SECLEVEL=X</code> as described in <a href="/nodejs/api/tls#modifying-the-default-tls-cipher-suite">Modifying the default TLS cipher suite</a>. However, it is generally discouraged to use the command line option for setting ciphers and it is preferable to configure the ciphers for individual contexts within your application code, as this approach provides finer control and reduces the risk of globally downgrading the security level.</p><h2 id="x509-certificate-error-codes" tabindex="-1">X509 certificate error codes <a class="header-anchor" href="#x509-certificate-error-codes" aria-label="Permalink to “X509 certificate error codes”">​</a></h2><p>Multiple functions can fail due to certificate errors that are reported by OpenSSL. In such a case, the function provides an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a> via its callback that has the property <code>code</code> which can take one of the following values:</p><ul><li><code>&#39;UNABLE_TO_GET_ISSUER_CERT&#39;</code>: Unable to get issuer certificate.</li><li><code>&#39;UNABLE_TO_GET_CRL&#39;</code>: Unable to get certificate CRL.</li><li><code>&#39;UNABLE_TO_DECRYPT_CERT_SIGNATURE&#39;</code>: Unable to decrypt certificate&#39;s signature.</li><li><code>&#39;UNABLE_TO_DECRYPT_CRL_SIGNATURE&#39;</code>: Unable to decrypt CRL&#39;s signature.</li><li><code>&#39;UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY&#39;</code>: Unable to decode issuer public key.</li><li><code>&#39;CERT_SIGNATURE_FAILURE&#39;</code>: Certificate signature failure.</li><li><code>&#39;CRL_SIGNATURE_FAILURE&#39;</code>: CRL signature failure.</li><li><code>&#39;CERT_NOT_YET_VALID&#39;</code>: Certificate is not yet valid.</li><li><code>&#39;CERT_HAS_EXPIRED&#39;</code>: Certificate has expired.</li><li><code>&#39;CRL_NOT_YET_VALID&#39;</code>: CRL is not yet valid.</li><li><code>&#39;CRL_HAS_EXPIRED&#39;</code>: CRL has expired.</li><li><code>&#39;ERROR_IN_CERT_NOT_BEFORE_FIELD&#39;</code>: Format error in certificate&#39;s notBefore field.</li><li><code>&#39;ERROR_IN_CERT_NOT_AFTER_FIELD&#39;</code>: Format error in certificate&#39;s notAfter field.</li><li><code>&#39;ERROR_IN_CRL_LAST_UPDATE_FIELD&#39;</code>: Format error in CRL&#39;s lastUpdate field.</li><li><code>&#39;ERROR_IN_CRL_NEXT_UPDATE_FIELD&#39;</code>: Format error in CRL&#39;s nextUpdate field.</li><li><code>&#39;OUT_OF_MEM&#39;</code>: Out of memory.</li><li><code>&#39;DEPTH_ZERO_SELF_SIGNED_CERT&#39;</code>: Self signed certificate.</li><li><code>&#39;SELF_SIGNED_CERT_IN_CHAIN&#39;</code>: Self signed certificate in certificate chain.</li><li><code>&#39;UNABLE_TO_GET_ISSUER_CERT_LOCALLY&#39;</code>: Unable to get local issuer certificate.</li><li><code>&#39;UNABLE_TO_VERIFY_LEAF_SIGNATURE&#39;</code>: Unable to verify the first certificate.</li><li><code>&#39;CERT_CHAIN_TOO_LONG&#39;</code>: Certificate chain too long.</li><li><code>&#39;CERT_REVOKED&#39;</code>: Certificate revoked.</li><li><code>&#39;INVALID_CA&#39;</code>: Invalid CA certificate.</li><li><code>&#39;PATH_LENGTH_EXCEEDED&#39;</code>: Path length constraint exceeded.</li><li><code>&#39;INVALID_PURPOSE&#39;</code>: Unsupported certificate purpose.</li><li><code>&#39;CERT_UNTRUSTED&#39;</code>: Certificate not trusted.</li><li><code>&#39;CERT_REJECTED&#39;</code>: Certificate rejected.</li><li><code>&#39;HOSTNAME_MISMATCH&#39;</code>: Hostname mismatch.</li></ul><h2 id="class-tlscryptostream" tabindex="-1">Class: <code>tls.CryptoStream</code> <a class="header-anchor" href="#class-tlscryptostream" aria-label="Permalink to “Class: tls.CryptoStream”">​</a></h2><p><strong>Added in: v0.3.4</strong></p><p><strong>Deprecated since: v0.11.3</strong></p><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/nodejs/api/documentation#stability-index">Stability: 0</a> - Deprecated: Use <a href="/nodejs/api/tls#class-tlstlssocket"><code>tls.TLSSocket</code></a> instead.</p></div><p>The <code>tls.CryptoStream</code> class represents a stream of encrypted data. This class is deprecated and should no longer be used.</p><h3 id="cryptostreambyteswritten" tabindex="-1"><code>cryptoStream.bytesWritten</code> <a class="header-anchor" href="#cryptostreambyteswritten" aria-label="Permalink to “cryptoStream.bytesWritten”">​</a></h3><p><strong>Added in: v0.3.4</strong></p><p><strong>Deprecated since: v0.11.3</strong></p><p>The <code>cryptoStream.bytesWritten</code> property returns the total number of bytes written to the underlying socket <em>including</em> the bytes required for the implementation of the TLS protocol.</p><h2 id="class-tlssecurepair" tabindex="-1">Class: <code>tls.SecurePair</code> <a class="header-anchor" href="#class-tlssecurepair" aria-label="Permalink to “Class: tls.SecurePair”">​</a></h2><p><strong>Added in: v0.3.2</strong></p><p><strong>Deprecated since: v0.11.3</strong></p><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/nodejs/api/documentation#stability-index">Stability: 0</a> - Deprecated: Use <a href="/nodejs/api/tls#class-tlstlssocket"><code>tls.TLSSocket</code></a> instead.</p></div><p>Returned by <a href="/nodejs/api/tls#tlscreatesecurepaircontext-isserver-requestcert-rejectunauthorized-options"><code>tls.createSecurePair()</code></a>.</p><h3 id="event-secure" tabindex="-1">Event: <code>&#39;secure&#39;</code> <a class="header-anchor" href="#event-secure" aria-label="Permalink to “Event: &#39;secure&#39;”">​</a></h3><p><strong>Added in: v0.3.2</strong></p><p><strong>Deprecated since: v0.11.3</strong></p><p>The <code>&#39;secure&#39;</code> event is emitted by the <code>SecurePair</code> object once a secure connection has been established.</p><p>As with checking for the server <a href="/nodejs/api/tls#event-secureconnection"><code>&#39;secureConnection&#39;</code></a> event, <code>pair.cleartext.authorized</code> should be inspected to confirm whether the certificate used is properly authorized.</p><h2 id="class-tlsserver" tabindex="-1">Class: <code>tls.Server</code> <a class="header-anchor" href="#class-tlsserver" aria-label="Permalink to “Class: tls.Server”">​</a></h2><p><strong>Added in: v0.3.2</strong></p><ul><li>Extends: <a href="/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a></li></ul><p>Accepts encrypted connections using TLS or SSL.</p><h3 id="event-connection" tabindex="-1">Event: <code>&#39;connection&#39;</code> <a class="header-anchor" href="#event-connection" aria-label="Permalink to “Event: &#39;connection&#39;”">​</a></h3><p><strong>Added in: v0.3.2</strong></p><ul><li><code>socket</code> <a href="/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>This event is emitted when a new TCP stream is established, before the TLS handshake begins. <code>socket</code> is typically an object of type <a href="/nodejs/api/net#class-netsocket"><code>net.Socket</code></a> but will not receive events unlike the socket created from the <a href="/nodejs/api/net#class-netserver"><code>net.Server</code></a> <code>&#39;connection&#39;</code> event. Usually users will not want to access this event.</p><p>This event can also be explicitly emitted by users to inject connections into the TLS server. In that case, any <a href="/nodejs/api/stream#class-streamduplex"><code>Duplex</code></a> stream can be passed.</p><h3 id="event-keylog" tabindex="-1">Event: <code>&#39;keylog&#39;</code> <a class="header-anchor" href="#event-keylog" aria-label="Permalink to “Event: &#39;keylog&#39;”">​</a></h3><p><strong>Added in: v12.3.0, v10.20.0</strong></p><ul><li><code>line</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> Line of ASCII text, in NSS <code>SSLKEYLOGFILE</code> format.</li><li><code>tlsSocket</code> <a href="/nodejs/api/tls#class-tlstlssocket">&lt;tls.TLSSocket&gt;</a> The <code>tls.TLSSocket</code> instance on which it was generated.</li></ul><p>The <code>keylog</code> event is emitted when key material is generated or received by a connection to this server (typically before handshake has completed, but not necessarily). This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times for each socket.</p><p>A typical use case is to append received lines to a common text file, which is later used by software (such as Wireshark) to decrypt the traffic:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> logFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWriteStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/tmp/ssl-keys.log&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { flags: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;keylog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tlsSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tlsSocket.remoteAddress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Only log keys for a particular IP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  logFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="event-newsession" tabindex="-1">Event: <code>&#39;newSession&#39;</code> <a class="header-anchor" href="#event-newsession" aria-label="Permalink to “Event: &#39;newSession&#39;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v0.11.12</td><td>The <code>callback</code> argument is now supported.</td></tr><tr><td>v0.9.2</td><td>Added in: v0.9.2</td></tr></tbody></table></div><p>The <code>&#39;newSession&#39;</code> event is emitted upon creation of a new TLS session. This may be used to store sessions in external storage. The data should be provided to the <a href="/nodejs/api/tls#event-resumesession"><code>&#39;resumeSession&#39;</code></a> callback.</p><p>The listener callback is passed three arguments when called:</p><ul><li><code>sessionId</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> The TLS session identifier</li><li><code>sessionData</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> The TLS session data</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> A callback function taking no arguments that must be invoked in order for data to be sent or received over the secure connection.</li></ul><p>Listening for this event will have an effect only on connections established after the addition of the event listener.</p><h3 id="event-ocsprequest" tabindex="-1">Event: <code>&#39;OCSPRequest&#39;</code> <a class="header-anchor" href="#event-ocsprequest" aria-label="Permalink to “Event: &#39;OCSPRequest&#39;”">​</a></h3><p><strong>Added in: v0.11.13</strong></p><p>The <code>&#39;OCSPRequest&#39;</code> event is emitted when the client sends a certificate status request. The listener callback is passed three arguments when called:</p><ul><li><code>certificate</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> The server certificate</li><li><code>issuer</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> The issuer&#39;s certificate</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> A callback function that must be invoked to provide the results of the OCSP request.</li></ul><p>The server&#39;s current certificate can be parsed to obtain the OCSP URL and certificate ID; after obtaining an OCSP response, <code>callback(null, resp)</code> is then invoked, where <code>resp</code> is a <code>Buffer</code> instance containing the OCSP response. Both <code>certificate</code> and <code>issuer</code> are <code>Buffer</code> DER-representations of the primary and issuer&#39;s certificates. These can be used to obtain the OCSP certificate ID and OCSP endpoint URL.</p><p>Alternatively, <code>callback(null, null)</code> may be called, indicating that there was no OCSP response.</p><p>Calling <code>callback(err)</code> will result in a <code>socket.destroy(err)</code> call.</p><p>The typical flow of an OCSP request is as follows:</p><p>The <code>issuer</code> can be <code>null</code> if the certificate is either self-signed or the issuer is not in the root certificates list. (An issuer may be provided via the <code>ca</code> option when establishing the TLS connection.)</p><p>Listening for this event will have an effect only on connections established after the addition of the event listener.</p><p>An npm module like <a href="https://www.npmjs.com/package/asn1.js" target="_blank" rel="noreferrer">asn1.js</a> may be used to parse the certificates.</p><h3 id="event-resumesession" tabindex="-1">Event: <code>&#39;resumeSession&#39;</code> <a class="header-anchor" href="#event-resumesession" aria-label="Permalink to “Event: &#39;resumeSession&#39;”">​</a></h3><p><strong>Added in: v0.9.2</strong></p><p>The <code>&#39;resumeSession&#39;</code> event is emitted when the client requests to resume a previous TLS session. The listener callback is passed two arguments when called:</p><ul><li><code>sessionId</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> The TLS session identifier</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> A callback function to be called when the prior session has been recovered: <code>callback([err[, sessionData]])</code><ul><li><code>err</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a></li><li><code>sessionData</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul></li></ul><p>The event listener should perform a lookup in external storage for the <code>sessionData</code> saved by the <a href="/nodejs/api/tls#event-newsession"><code>&#39;newSession&#39;</code></a> event handler using the given <code>sessionId</code>. If found, call <code>callback(null, sessionData)</code> to resume the session. If not found, the session cannot be resumed. <code>callback()</code> must be called without <code>sessionData</code> so that the handshake can continue and a new session can be created. It is possible to call <code>callback(err)</code> to terminate the incoming connection and destroy the socket.</p><p>Listening for this event will have an effect only on connections established after the addition of the event listener.</p><p>The following illustrates resuming a TLS session:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tlsSessionStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;newSession&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tlsSessionStore[id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resumeSession&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tlsSessionStore[id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="event-secureconnection" tabindex="-1">Event: <code>&#39;secureConnection&#39;</code> <a class="header-anchor" href="#event-secureconnection" aria-label="Permalink to “Event: &#39;secureConnection&#39;”">​</a></h3><p><strong>Added in: v0.3.2</strong></p><p>The <code>&#39;secureConnection&#39;</code> event is emitted after the handshaking process for a new connection has successfully completed. The listener callback is passed a single argument when called:</p><ul><li><code>tlsSocket</code> <a href="/nodejs/api/tls#class-tlstlssocket">&lt;tls.TLSSocket&gt;</a> The established TLS socket.</li></ul><p>The <code>tlsSocket.authorized</code> property is a <code>boolean</code> indicating whether the client has been verified by one of the supplied Certificate Authorities for the server. If <code>tlsSocket.authorized</code> is <code>false</code>, then <code>socket.authorizationError</code> is set to describe how authorization failed. Depending on the settings of the TLS server, unauthorized connections may still be accepted.</p><p>The <code>tlsSocket.alpnProtocol</code> property is a string that contains the selected ALPN protocol. When ALPN has no selected protocol because the client or the server did not send an ALPN extension, <code>tlsSocket.alpnProtocol</code> equals <code>false</code>.</p><p>The <code>tlsSocket.servername</code> property is a string containing the server name requested via SNI.</p><h3 id="event-tlsclienterror" tabindex="-1">Event: <code>&#39;tlsClientError&#39;</code> <a class="header-anchor" href="#event-tlsclienterror" aria-label="Permalink to “Event: &#39;tlsClientError&#39;”">​</a></h3><p><strong>Added in: v6.0.0</strong></p><p>The <code>&#39;tlsClientError&#39;</code> event is emitted when an error occurs before a secure connection is established. The listener callback is passed two arguments when called:</p><ul><li><code>exception</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a> The <code>Error</code> object describing the error</li><li><code>tlsSocket</code> <a href="/nodejs/api/tls#class-tlstlssocket">&lt;tls.TLSSocket&gt;</a> The <code>tls.TLSSocket</code> instance from which the error originated.</li></ul><h3 id="serveraddcontexthostname-context" tabindex="-1"><code>server.addContext(hostname, context)</code> <a class="header-anchor" href="#serveraddcontexthostname-context" aria-label="Permalink to “server.addContext(hostname, context)”">​</a></h3><p><strong>Added in: v0.5.3</strong></p><ul><li><code>hostname</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> A SNI host name or wildcard (e.g. <code>&#39;*&#39;</code>)</li><li><code>context</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> | <a href="/nodejs/api/tls#tlscreatesecurecontextoptions">&lt;tls.SecureContext&gt;</a> An object containing any of the possible properties from the <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> <code>options</code> arguments (e.g. <code>key</code>, <code>cert</code>, <code>ca</code>, etc), or a TLS context object created with <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> itself.</li></ul><p>The <code>server.addContext()</code> method adds a secure context that will be used if the client request&#39;s SNI name matches the supplied <code>hostname</code> (or wildcard).</p><p>When there are multiple matching contexts, the most recently added one is used.</p><h3 id="serveraddress" tabindex="-1"><code>server.address()</code> <a class="header-anchor" href="#serveraddress" aria-label="Permalink to “server.address()”">​</a></h3><p><strong>Added in: v0.6.0</strong></p><ul><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>Returns the bound address, the address family name, and port of the server as reported by the operating system. See <a href="/nodejs/api/net#serveraddress"><code>net.Server.address()</code></a> for more information.</p><h3 id="serverclosecallback" tabindex="-1"><code>server.close([callback])</code> <a class="header-anchor" href="#serverclosecallback" aria-label="Permalink to “server.close([callback])”">​</a></h3><p><strong>Added in: v0.3.2</strong></p><ul><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> A listener callback that will be registered to listen for the server instance&#39;s <code>&#39;close&#39;</code> event.</li><li>Returns: <a href="/nodejs/api/tls#class-tlsserver">&lt;tls.Server&gt;</a></li></ul><p>The <code>server.close()</code> method stops the server from accepting new connections.</p><p>This function operates asynchronously. The <code>&#39;close&#39;</code> event will be emitted when the server has no more open connections.</p><h3 id="servergetticketkeys" tabindex="-1"><code>server.getTicketKeys()</code> <a class="header-anchor" href="#servergetticketkeys" aria-label="Permalink to “server.getTicketKeys()”">​</a></h3><p><strong>Added in: v3.0.0</strong></p><ul><li>Returns: <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> A 48-byte buffer containing the session ticket keys.</li></ul><p>Returns the session ticket keys.</p><p>See <a href="/nodejs/api/tls#session-resumption">Session Resumption</a> for more information.</p><h3 id="serverlisten" tabindex="-1"><code>server.listen()</code> <a class="header-anchor" href="#serverlisten" aria-label="Permalink to “server.listen()”">​</a></h3><p>Starts the server listening for encrypted connections. This method is identical to <a href="/nodejs/api/net#serverlisten"><code>server.listen()</code></a> from <a href="/nodejs/api/net#class-netserver"><code>net.Server</code></a>.</p><h3 id="serversetsecurecontextoptions" tabindex="-1"><code>server.setSecureContext(options)</code> <a class="header-anchor" href="#serversetsecurecontextoptions" aria-label="Permalink to “server.setSecureContext(options)”">​</a></h3><p><strong>Added in: v11.0.0</strong></p><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> An object containing any of the possible properties from the <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> <code>options</code> arguments (e.g. <code>key</code>, <code>cert</code>, <code>ca</code>, etc).</li></ul><p>The <code>server.setSecureContext()</code> method replaces the secure context of an existing server. Existing connections to the server are not interrupted.</p><h3 id="serversetticketkeyskeys" tabindex="-1"><code>server.setTicketKeys(keys)</code> <a class="header-anchor" href="#serversetticketkeyskeys" aria-label="Permalink to “server.setTicketKeys(keys)”">​</a></h3><p><strong>Added in: v3.0.0</strong></p><ul><li><code>keys</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> A 48-byte buffer containing the session ticket keys.</li></ul><p>Sets the session ticket keys.</p><p>Changes to the ticket keys are effective only for future server connections. Existing or currently pending server connections will use the previous keys.</p><p>See <a href="/nodejs/api/tls#session-resumption">Session Resumption</a> for more information.</p><h2 id="class-tlstlssocket" tabindex="-1">Class: <code>tls.TLSSocket</code> <a class="header-anchor" href="#class-tlstlssocket" aria-label="Permalink to “Class: tls.TLSSocket”">​</a></h2><p><strong>Added in: v0.11.4</strong></p><ul><li>Extends: <a href="/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>Performs transparent encryption of written data and all required TLS negotiation.</p><p>Instances of <code>tls.TLSSocket</code> implement the duplex <a href="/nodejs/api/stream#stream">Stream</a> interface.</p><p>Methods that return TLS connection metadata (e.g. <a href="/nodejs/api/tls#tlssocketgetpeercertificatedetailed"><code>tls.TLSSocket.getPeerCertificate()</code></a>) will only return data while the connection is open.</p><h3 id="new-tlstlssocketsocket-options" tabindex="-1"><code>new tls.TLSSocket(socket[, options])</code> <a class="header-anchor" href="#new-tlstlssocketsocket-options" aria-label="Permalink to “new tls.TLSSocket(socket[, options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v12.2.0</td><td>The <code>enableTrace</code> option is now supported.</td></tr><tr><td>v5.0.0</td><td>ALPN options are supported now.</td></tr><tr><td>v0.11.4</td><td>Added in: v0.11.4</td></tr></tbody></table></div><ul><li><code>socket</code> <a href="/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> | <a href="/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> On the server side, any <code>Duplex</code> stream. On the client side, any instance of <a href="/nodejs/api/net#class-netsocket"><code>net.Socket</code></a> (for generic <code>Duplex</code> stream support on the client side, <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a> must be used).</li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>enableTrace</code>: See <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a></li><li><code>isServer</code>: The SSL/TLS protocol is asymmetrical, TLSSockets must know if they are to behave as a server or a client. If <code>true</code> the TLS socket will be instantiated as a server. <strong>Default:</strong> <code>false</code>.</li><li><code>server</code> <a href="/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a> A <a href="/nodejs/api/net#class-netserver"><code>net.Server</code></a> instance.</li><li><code>requestCert</code>: Whether to authenticate the remote peer by requesting a certificate. Clients always request a server certificate. Servers (<code>isServer</code> is true) may set <code>requestCert</code> to true to request a client certificate.</li><li><code>rejectUnauthorized</code>: See <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a></li><li><code>ALPNProtocols</code>: See <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a></li><li><code>SNICallback</code>: See <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a></li><li><code>session</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> A <code>Buffer</code> instance containing a TLS session.</li><li><code>requestOCSP</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> If <code>true</code>, specifies that the OCSP status request extension will be added to the client hello and an <code>&#39;OCSPResponse&#39;</code> event will be emitted on the socket before establishing a secure communication</li><li><code>secureContext</code>: TLS context object created with <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a>. If a <code>secureContext</code> is <em>not</em> provided, one will be created by passing the entire <code>options</code> object to <code>tls.createSecureContext()</code>.</li><li>...: <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> options that are used if the <code>secureContext</code> option is missing. Otherwise, they are ignored.</li></ul></li></ul><p>Construct a new <code>tls.TLSSocket</code> object from an existing TCP socket.</p><h3 id="event-keylog_1" tabindex="-1">Event: <code>&#39;keylog&#39;</code> <a class="header-anchor" href="#event-keylog_1" aria-label="Permalink to “Event: &#39;keylog&#39;”">​</a></h3><p><strong>Added in: v12.3.0, v10.20.0</strong></p><ul><li><code>line</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> Line of ASCII text, in NSS <code>SSLKEYLOGFILE</code> format.</li></ul><p>The <code>keylog</code> event is emitted on a <code>tls.TLSSocket</code> when key material is generated or received by the socket. This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times, before or after the handshake completes.</p><p>A typical use case is to append received lines to a common text file, which is later used by software (such as Wireshark) to decrypt the traffic:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> logFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWriteStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/tmp/ssl-keys.log&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { flags: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tlsSocket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;keylog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="event-ocspresponse" tabindex="-1">Event: <code>&#39;OCSPResponse&#39;</code> <a class="header-anchor" href="#event-ocspresponse" aria-label="Permalink to “Event: &#39;OCSPResponse&#39;”">​</a></h3><p><strong>Added in: v0.11.13</strong></p><p>The <code>&#39;OCSPResponse&#39;</code> event is emitted if the <code>requestOCSP</code> option was set when the <code>tls.TLSSocket</code> was created and an OCSP response has been received. The listener callback is passed a single argument when called:</p><ul><li><code>response</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> The server&#39;s OCSP response</li></ul><p>Typically, the <code>response</code> is a digitally signed object from the server&#39;s CA that contains information about server&#39;s certificate revocation status.</p><h3 id="event-secureconnect" tabindex="-1">Event: <code>&#39;secureConnect&#39;</code> <a class="header-anchor" href="#event-secureconnect" aria-label="Permalink to “Event: &#39;secureConnect&#39;”">​</a></h3><p><strong>Added in: v0.11.4</strong></p><p>The <code>&#39;secureConnect&#39;</code> event is emitted after the handshaking process for a new connection has successfully completed. The listener callback will be called regardless of whether or not the server&#39;s certificate has been authorized. It is the client&#39;s responsibility to check the <code>tlsSocket.authorized</code> property to determine if the server certificate was signed by one of the specified CAs. If <code>tlsSocket.authorized === false</code>, then the error can be found by examining the <code>tlsSocket.authorizationError</code> property. If ALPN was used, the <code>tlsSocket.alpnProtocol</code> property can be checked to determine the negotiated protocol.</p><p>The <code>&#39;secureConnect&#39;</code> event is not emitted when a <a href="/nodejs/api/tls#class-tlstlssocket">&lt;tls.TLSSocket&gt;</a> is created using the <code>new tls.TLSSocket()</code> constructor.</p><h3 id="event-session" tabindex="-1">Event: <code>&#39;session&#39;</code> <a class="header-anchor" href="#event-session" aria-label="Permalink to “Event: &#39;session&#39;”">​</a></h3><p><strong>Added in: v11.10.0</strong></p><ul><li><code>session</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul><p>The <code>&#39;session&#39;</code> event is emitted on a client <code>tls.TLSSocket</code> when a new session or TLS ticket is available. This may or may not be before the handshake is complete, depending on the TLS protocol version that was negotiated. The event is not emitted on the server, or if a new session was not created, for example, when the connection was resumed. For some TLS protocol versions the event may be emitted multiple times, in which case all the sessions can be used for resumption.</p><p>On the client, the <code>session</code> can be provided to the <code>session</code> option of <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a> to resume the connection.</p><p>See <a href="/nodejs/api/tls#session-resumption">Session Resumption</a> for more information.</p><p>For TLSv1.2 and below, <a href="/nodejs/api/tls#tlssocketgetsession"><code>tls.TLSSocket.getSession()</code></a> can be called once the handshake is complete. For TLSv1.3, only ticket-based resumption is allowed by the protocol, multiple tickets are sent, and the tickets aren&#39;t sent until after the handshake completes. So it is necessary to wait for the <code>&#39;session&#39;</code> event to get a resumable session. Applications should use the <code>&#39;session&#39;</code> event instead of <code>getSession()</code> to ensure they will work for all TLS versions. Applications that only expect to get or use one session should listen for this event only once:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tlsSocket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">once</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;session&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // The session can be used immediately or later.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tls.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    session: session,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Other connect options...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="tlssocketaddress" tabindex="-1"><code>tlsSocket.address()</code> <a class="header-anchor" href="#tlssocketaddress" aria-label="Permalink to “tlsSocket.address()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v18.4.0</td><td>The <code>family</code> property now returns a string instead of a number.</td></tr><tr><td>v18.0.0</td><td>The <code>family</code> property now returns a number instead of a string.</td></tr><tr><td>v0.11.4</td><td>Added in: v0.11.4</td></tr></tbody></table></div><ul><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>Returns the bound <code>address</code>, the address <code>family</code> name, and <code>port</code> of the underlying socket as reported by the operating system: <code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code>.</p><h3 id="tlssocketauthorizationerror" tabindex="-1"><code>tlsSocket.authorizationError</code> <a class="header-anchor" href="#tlssocketauthorizationerror" aria-label="Permalink to “tlsSocket.authorizationError”">​</a></h3><p><strong>Added in: v0.11.4</strong></p><p>Returns the reason why the peer&#39;s certificate was not been verified. This property is set only when <code>tlsSocket.authorized === false</code>.</p><h3 id="tlssocketauthorized" tabindex="-1"><code>tlsSocket.authorized</code> <a class="header-anchor" href="#tlssocketauthorized" aria-label="Permalink to “tlsSocket.authorized”">​</a></h3><p><strong>Added in: v0.11.4</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>This property is <code>true</code> if the peer certificate was signed by one of the CAs specified when creating the <code>tls.TLSSocket</code> instance, otherwise <code>false</code>.</p><h3 id="tlssocketdisablerenegotiation" tabindex="-1"><code>tlsSocket.disableRenegotiation()</code> <a class="header-anchor" href="#tlssocketdisablerenegotiation" aria-label="Permalink to “tlsSocket.disableRenegotiation()”">​</a></h3><p><strong>Added in: v8.4.0</strong></p><p>Disables TLS renegotiation for this <code>TLSSocket</code> instance. Once called, attempts to renegotiate will trigger an <code>&#39;error&#39;</code> event on the <code>TLSSocket</code>.</p><h3 id="tlssocketenabletrace" tabindex="-1"><code>tlsSocket.enableTrace()</code> <a class="header-anchor" href="#tlssocketenabletrace" aria-label="Permalink to “tlsSocket.enableTrace()”">​</a></h3><p><strong>Added in: v12.2.0</strong></p><p>When enabled, TLS packet trace information is written to <code>stderr</code>. This can be used to debug TLS connection problems.</p><p>The format of the output is identical to the output of <code>openssl s_client -trace</code> or <code>openssl s_server -trace</code>. While it is produced by OpenSSL&#39;s <code>SSL_trace()</code> function, the format is undocumented, can change without notice, and should not be relied on.</p><h3 id="tlssocketencrypted" tabindex="-1"><code>tlsSocket.encrypted</code> <a class="header-anchor" href="#tlssocketencrypted" aria-label="Permalink to “tlsSocket.encrypted”">​</a></h3><p><strong>Added in: v0.11.4</strong></p><p>Always returns <code>true</code>. This may be used to distinguish TLS sockets from regular <code>net.Socket</code> instances.</p><h3 id="tlssocketexportkeyingmateriallength-label-context" tabindex="-1"><code>tlsSocket.exportKeyingMaterial(length, label[, context])</code> <a class="header-anchor" href="#tlssocketexportkeyingmateriallength-label-context" aria-label="Permalink to “tlsSocket.exportKeyingMaterial(length, label[, context])”">​</a></h3><p><strong>Added in: v13.10.0, v12.17.0</strong></p><ul><li><code>length</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> number of bytes to retrieve from keying material</li><li><code>label</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> an application specific label, typically this will be a value from the <a href="https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#exporter-labels" target="_blank" rel="noreferrer">IANA Exporter Label Registry</a>.</li><li><code>context</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> Optionally provide a context.</li><li>Returns: <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> requested bytes of the keying material</li></ul><p>Keying material is used for validations to prevent different kind of attacks in network protocols, for example in the specifications of IEEE 802.1X.</p><p>Example</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> keyingMaterial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tlsSocket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exportKeyingMaterial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;client finished&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> Example return value of keyingMaterial:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> &lt;Buffer 76 26 af 99 c5 56 8e 42 09 91 ef 9f 93 cb ad 6c 7b 65 f8 53 f1 d8 d9</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    12 5a 33 b8 b5 25 df 7b 37 9f e0 e2 4f b8 67 83 a3 2f cd 5d 41 42 4c 91</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    74 ef 2c ... 78 more bytes&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>See the OpenSSL <a href="https://www.openssl.org/docs/man1.1.1/man3/SSL_export_keying_material" target="_blank" rel="noreferrer"><code>SSL_export_keying_material</code></a> documentation for more information.</p><h3 id="tlssocketgetcertificate" tabindex="-1"><code>tlsSocket.getCertificate()</code> <a class="header-anchor" href="#tlssocketgetcertificate" aria-label="Permalink to “tlsSocket.getCertificate()”">​</a></h3><p><strong>Added in: v11.2.0</strong></p><ul><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>Returns an object representing the local certificate. The returned object has some properties corresponding to the fields of the certificate.</p><p>See <a href="/nodejs/api/tls#tlssocketgetpeercertificatedetailed"><code>tls.TLSSocket.getPeerCertificate()</code></a> for an example of the certificate structure.</p><p>If there is no local certificate, an empty object will be returned. If the socket has been destroyed, <code>null</code> will be returned.</p><h3 id="tlssocketgetcipher" tabindex="-1"><code>tlsSocket.getCipher()</code> <a class="header-anchor" href="#tlssocketgetcipher" aria-label="Permalink to “tlsSocket.getCipher()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v13.4.0, v12.16.0</td><td>Return the IETF cipher name as <code>standardName</code>.</td></tr><tr><td>v12.0.0</td><td>Return the minimum cipher version, instead of a fixed string (<code>&#39;TLSv1/SSLv3&#39;</code>).</td></tr><tr><td>v0.11.4</td><td>Added in: v0.11.4</td></tr></tbody></table></div><ul><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> OpenSSL name for the cipher suite.</li><li><code>standardName</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> IETF name for the cipher suite.</li><li><code>version</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The minimum TLS protocol version supported by this cipher suite. For the actual negotiated protocol, see <a href="/nodejs/api/tls#tlssocketgetprotocol"><code>tls.TLSSocket.getProtocol()</code></a>.</li></ul></li></ul><p>Returns an object containing information on the negotiated cipher suite.</p><p>For example, a TLSv1.2 protocol with AES256-SHA cipher:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AES256-SHA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;standardName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TLS_RSA_WITH_AES_256_CBC_SHA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SSLv3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>See <a href="https://www.openssl.org/docs/man1.1.1/man3/SSL_CIPHER_get_name" target="_blank" rel="noreferrer">SSL_CIPHER_get_name</a> for more information.</p><h3 id="tlssocketgetephemeralkeyinfo" tabindex="-1"><code>tlsSocket.getEphemeralKeyInfo()</code> <a class="header-anchor" href="#tlssocketgetephemeralkeyinfo" aria-label="Permalink to “tlsSocket.getEphemeralKeyInfo()”">​</a></h3><p><strong>Added in: v5.0.0</strong></p><ul><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>Returns an object representing the type, name, and size of parameter of an ephemeral key exchange in <a href="/nodejs/api/tls#perfect-forward-secrecy">perfect forward secrecy</a> on a client connection. It returns an empty object when the key exchange is not ephemeral. As this is only supported on a client socket; <code>null</code> is returned if called on a server socket. The supported types are <code>&#39;DH&#39;</code> and <code>&#39;ECDH&#39;</code>. The <code>name</code> property is available only when type is <code>&#39;ECDH&#39;</code>.</p><p>For example: <code>{ type: &#39;ECDH&#39;, name: &#39;prime256v1&#39;, size: 256 }</code>.</p><h3 id="tlssocketgetfinished" tabindex="-1"><code>tlsSocket.getFinished()</code> <a class="header-anchor" href="#tlssocketgetfinished" aria-label="Permalink to “tlsSocket.getFinished()”">​</a></h3><p><strong>Added in: v9.9.0</strong></p><ul><li>Returns: <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a> The latest <code>Finished</code> message that has been sent to the socket as part of a SSL/TLS handshake, or <code>undefined</code> if no <code>Finished</code> message has been sent yet.</li></ul><p>As the <code>Finished</code> messages are message digests of the complete handshake (with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can be used for external authentication procedures when the authentication provided by SSL/TLS is not desired or is not enough.</p><p>Corresponds to the <code>SSL_get_finished</code> routine in OpenSSL and may be used to implement the <code>tls-unique</code> channel binding from <a href="https://tools.ietf.org/html/rfc5929" target="_blank" rel="noreferrer">RFC 5929</a>.</p><h3 id="tlssocketgetpeercertificatedetailed" tabindex="-1"><code>tlsSocket.getPeerCertificate([detailed])</code> <a class="header-anchor" href="#tlssocketgetpeercertificatedetailed" aria-label="Permalink to “tlsSocket.getPeerCertificate([detailed])”">​</a></h3><p><strong>Added in: v0.11.4</strong></p><ul><li><code>detailed</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> Include the full certificate chain if <code>true</code>, otherwise include just the peer&#39;s certificate.</li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> A certificate object.</li></ul><p>Returns an object representing the peer&#39;s certificate. If the peer does not provide a certificate, an empty object will be returned. If the socket has been destroyed, <code>null</code> will be returned.</p><p>If the full certificate chain was requested, each certificate will include an <code>issuerCertificate</code> property containing an object representing its issuer&#39;s certificate.</p><h4 id="certificate-object" tabindex="-1">Certificate object <a class="header-anchor" href="#certificate-object" aria-label="Permalink to “Certificate object”">​</a></h4><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v19.1.0, v18.13.0</td><td>Add &quot;ca&quot; property.</td></tr><tr><td>v17.2.0, v16.14.0</td><td>Add fingerprint512.</td></tr><tr><td>v11.4.0</td><td>Support Elliptic Curve public key info.</td></tr></tbody></table></div><p>A certificate object has properties corresponding to the fields of the certificate.</p><ul><li><code>ca</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>true</code> if a Certificate Authority (CA), <code>false</code> otherwise.</li><li><code>raw</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> The DER encoded X.509 certificate data.</li><li><code>subject</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> The certificate subject, described in terms of Country (<code>C</code>), StateOrProvince (<code>ST</code>), Locality (<code>L</code>), Organization (<code>O</code>), OrganizationalUnit (<code>OU</code>), and CommonName (<code>CN</code>). The CommonName is typically a DNS name with TLS certificates. Example: <code>{C: &#39;UK&#39;, ST: &#39;BC&#39;, L: &#39;Metro&#39;, O: &#39;Node Fans&#39;, OU: &#39;Docs&#39;, CN: &#39;example.com&#39;}</code>.</li><li><code>issuer</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> The certificate issuer, described in the same terms as the <code>subject</code>.</li><li><code>valid_from</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The date-time the certificate is valid from.</li><li><code>valid_to</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The date-time the certificate is valid to.</li><li><code>serialNumber</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The certificate serial number, as a hex string. Example: <code>&#39;B9B0D332A1AA5635&#39;</code>.</li><li><code>fingerprint</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The SHA-1 digest of the DER encoded certificate. It is returned as a <code>:</code> separated hexadecimal string. Example: <code>&#39;2A:7A:C2:DD:...&#39;</code>.</li><li><code>fingerprint256</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The SHA-256 digest of the DER encoded certificate. It is returned as a <code>:</code> separated hexadecimal string. Example: <code>&#39;2A:7A:C2:DD:...&#39;</code>.</li><li><code>fingerprint512</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The SHA-512 digest of the DER encoded certificate. It is returned as a <code>:</code> separated hexadecimal string. Example: <code>&#39;2A:7A:C2:DD:...&#39;</code>.</li><li><code>ext_key_usage</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">&lt;Array&gt;</a> (Optional) The extended key usage, a set of OIDs.</li><li><code>subjectaltname</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> (Optional) A string containing concatenated names for the subject, an alternative to the <code>subject</code> names.</li><li><code>infoAccess</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">&lt;Array&gt;</a> (Optional) An array describing the AuthorityInfoAccess, used with OCSP.</li><li><code>issuerCertificate</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> (Optional) The issuer certificate object. For self-signed certificates, this may be a circular reference.</li></ul><p>The certificate may contain information about the public key, depending on the key type.</p><p>For RSA keys, the following properties may be defined:</p><ul><li><code>bits</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> The RSA bit size. Example: <code>1024</code>.</li><li><code>exponent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The RSA exponent, as a string in hexadecimal number notation. Example: <code>&#39;0x010001&#39;</code>.</li><li><code>modulus</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The RSA modulus, as a hexadecimal string. Example: <code>&#39;B56CE45CB7...&#39;</code>.</li><li><code>pubkey</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> The public key.</li></ul><p>For EC keys, the following properties may be defined:</p><ul><li><code>pubkey</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> The public key.</li><li><code>bits</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> The key size in bits. Example: <code>256</code>.</li><li><code>asn1Curve</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> (Optional) The ASN.1 name of the OID of the elliptic curve. Well-known curves are identified by an OID. While it is unusual, it is possible that the curve is identified by its mathematical properties, in which case it will not have an OID. Example: <code>&#39;prime256v1&#39;</code>.</li><li><code>nistCurve</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> (Optional) The NIST name for the elliptic curve, if it has one (not all well-known curves have been assigned names by NIST). Example: <code>&#39;P-256&#39;</code>.</li></ul><p>Example certificate:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OU</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Domain Control Validated&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;PositiveSSL Wildcard&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     CN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*.nodejs.org&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  issuer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     ST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Greater Manchester&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Salford&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     O</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;COMODO CA Limited&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     CN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;COMODO RSA Domain Validation Secure Server CA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  subjectaltname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DNS:*.nodejs.org, DNS:nodejs.org&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  infoAccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;CA Issuers - URI&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://crt.comodoca.com/COMODORSADomainValidationSecureServerCA.crt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &#39;OCSP - URI&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://ocsp.comodoca.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  modulus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;B56CE45CB740B09A13F64AC543B712FF9EE8E4C284B542A1708A27E82A8D151CA178153E12E6DDA15BF70FFD96CB8A88618641BDFCCA03527E665B70D779C8A349A6F88FD4EF6557180BD4C98192872BCFE3AF56E863C09DDD8BC1EC58DF9D94F914F0369102B2870BECFA1348A0838C9C49BD1C20124B442477572347047506B1FCD658A80D0C44BCC16BC5C5496CFE6E4A8428EF654CD3D8972BF6E5BFAD59C93006830B5EB1056BBB38B53D1464FA6E02BFDF2FF66CD949486F0775EC43034EC2602AEFBF1703AD221DAA2A88353C3B6A688EFE8387811F645CEED7B3FE46E1F8B9F59FAD028F349B9BC14211D5830994D055EEA3D547911E07A0ADDEB8A82B9188E58720D95CD478EEC9AF1F17BE8141BE80906F1A339445A7EB5B285F68039B0F294598A7D1C0005FC22B5271B0752F58CCDEF8C8FD856FB7AE21C80B8A2CE983AE94046E53EDE4CB89F42502D31B5360771C01C80155918637490550E3F555E2EE75CC8C636DDE3633CFEDD62E91BF0F7688273694EEEBA20C2FC9F14A2A435517BC1D7373922463409AB603295CEB0BB53787A334C9CA3CA8B30005C5A62FC0715083462E00719A8FA3ED0A9828C3871360A73F8B04A4FC1E71302844E9BB9940B77E745C9D91F226D71AFCAD4B113AAF68D92B24DDB4A2136B55A1CD1ADF39605B63CB639038ED0F4C987689866743A68769CC55847E4A06D6E2E3F1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  exponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0x10001&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pubkey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Buffer</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  valid_from: &#39;Aug 14 00:00:00 2017 GMT&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  valid_to: &#39;Nov 20 23:59:59 2019 GMT&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fingerprint: &#39;01:02:59:D9:C3:D2:0D:08:F7:82:4E:44:A4:B4:53:C5:E2:3A:87:4D&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fingerprint256: &#39;69:AE:1A:6A:D4:3D:C6:C1:1B:EA:C6:23:DE:BA:2A:14:62:62:93:5C:7A:EA:06:41:9B:0B:BC:87:CE:48:4E:02&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fingerprint512: &#39;19:2B:3E:C3:B3:5B:32:E8:AE:BB:78:97:27:E4:BA:6C:39:C9:92:79:4F:31:46:39:E2:70:E5:5F:89:42:17:C9:E8:64:CA:FF:BB:72:56:73:6E:28:8A:92:7E:A3:2A:15:8B:C2:E0:45:CA:C3:BC:EA:40:52:EC:CA:A2:68:CB:32&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ext_key_usage: [ &#39;1.3.6.1.5.5.7.3.1&#39;, &#39;1.3.6.1.5.5.7.3.2&#39; ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  serialNumber: &#39;66593D57F20CBC573E433381B5FEC280&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  raw: &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Buffer</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="tlssocketgetpeerfinished" tabindex="-1"><code>tlsSocket.getPeerFinished()</code> <a class="header-anchor" href="#tlssocketgetpeerfinished" aria-label="Permalink to “tlsSocket.getPeerFinished()”">​</a></h3><p><strong>Added in: v9.9.0</strong></p><ul><li>Returns: <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a> The latest <code>Finished</code> message that is expected or has actually been received from the socket as part of a SSL/TLS handshake, or <code>undefined</code> if there is no <code>Finished</code> message so far.</li></ul><p>As the <code>Finished</code> messages are message digests of the complete handshake (with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can be used for external authentication procedures when the authentication provided by SSL/TLS is not desired or is not enough.</p><p>Corresponds to the <code>SSL_get_peer_finished</code> routine in OpenSSL and may be used to implement the <code>tls-unique</code> channel binding from <a href="https://tools.ietf.org/html/rfc5929" target="_blank" rel="noreferrer">RFC 5929</a>.</p><h3 id="tlssocketgetpeerx509certificate" tabindex="-1"><code>tlsSocket.getPeerX509Certificate()</code> <a class="header-anchor" href="#tlssocketgetpeerx509certificate" aria-label="Permalink to “tlsSocket.getPeerX509Certificate()”">​</a></h3><p><strong>Added in: v15.9.0</strong></p><ul><li>Returns: <a href="/nodejs/api/crypto#class-x509certificate">&lt;X509Certificate&gt;</a></li></ul><p>Returns the peer certificate as an <a href="/nodejs/api/crypto#class-x509certificate">&lt;X509Certificate&gt;</a> object.</p><p>If there is no peer certificate, or the socket has been destroyed, <code>undefined</code> will be returned.</p><h3 id="tlssocketgetprotocol" tabindex="-1"><code>tlsSocket.getProtocol()</code> <a class="header-anchor" href="#tlssocketgetprotocol" aria-label="Permalink to “tlsSocket.getProtocol()”">​</a></h3><p><strong>Added in: v5.7.0</strong></p><ul><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" target="_blank" rel="noreferrer">&lt;null&gt;</a></li></ul><p>Returns a string containing the negotiated SSL/TLS protocol version of the current connection. The value <code>&#39;unknown&#39;</code> will be returned for connected sockets that have not completed the handshaking process. The value <code>null</code> will be returned for server sockets or disconnected client sockets.</p><p>Protocol versions are:</p><ul><li><code>&#39;SSLv3&#39;</code></li><li><code>&#39;TLSv1&#39;</code></li><li><code>&#39;TLSv1.1&#39;</code></li><li><code>&#39;TLSv1.2&#39;</code></li><li><code>&#39;TLSv1.3&#39;</code></li></ul><p>See the OpenSSL <a href="https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version" target="_blank" rel="noreferrer"><code>SSL_get_version</code></a> documentation for more information.</p><h3 id="tlssocketgetsession" tabindex="-1"><code>tlsSocket.getSession()</code> <a class="header-anchor" href="#tlssocketgetsession" aria-label="Permalink to “tlsSocket.getSession()”">​</a></h3><p><strong>Added in: v0.11.4</strong></p><ul><li><a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul><p>Returns the TLS session data or <code>undefined</code> if no session was negotiated. On the client, the data can be provided to the <code>session</code> option of <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a> to resume the connection. On the server, it may be useful for debugging.</p><p>See <a href="/nodejs/api/tls#session-resumption">Session Resumption</a> for more information.</p><p>Note: <code>getSession()</code> works only for TLSv1.2 and below. For TLSv1.3, applications must use the <a href="/nodejs/api/tls#event-session"><code>&#39;session&#39;</code></a> event (it also works for TLSv1.2 and below).</p><h3 id="tlssocketgetsharedsigalgs" tabindex="-1"><code>tlsSocket.getSharedSigalgs()</code> <a class="header-anchor" href="#tlssocketgetsharedsigalgs" aria-label="Permalink to “tlsSocket.getSharedSigalgs()”">​</a></h3><p><strong>Added in: v12.11.0</strong></p><ul><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">&lt;Array&gt;</a> List of signature algorithms shared between the server and the client in the order of decreasing preference.</li></ul><p>See <a href="https://www.openssl.org/docs/man1.1.1/man3/SSL_get_shared_sigalgs" target="_blank" rel="noreferrer">SSL_get_shared_sigalgs</a> for more information.</p><h3 id="tlssocketgettlsticket" tabindex="-1"><code>tlsSocket.getTLSTicket()</code> <a class="header-anchor" href="#tlssocketgettlsticket" aria-label="Permalink to “tlsSocket.getTLSTicket()”">​</a></h3><p><strong>Added in: v0.11.4</strong></p><ul><li><a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul><p>For a client, returns the TLS session ticket if one is available, or <code>undefined</code>. For a server, always returns <code>undefined</code>.</p><p>It may be useful for debugging.</p><p>See <a href="/nodejs/api/tls#session-resumption">Session Resumption</a> for more information.</p><h3 id="tlssocketgetx509certificate" tabindex="-1"><code>tlsSocket.getX509Certificate()</code> <a class="header-anchor" href="#tlssocketgetx509certificate" aria-label="Permalink to “tlsSocket.getX509Certificate()”">​</a></h3><p><strong>Added in: v15.9.0</strong></p><ul><li>Returns: <a href="/nodejs/api/crypto#class-x509certificate">&lt;X509Certificate&gt;</a></li></ul><p>Returns the local certificate as an <a href="/nodejs/api/crypto#class-x509certificate">&lt;X509Certificate&gt;</a> object.</p><p>If there is no local certificate, or the socket has been destroyed, <code>undefined</code> will be returned.</p><h3 id="tlssocketissessionreused" tabindex="-1"><code>tlsSocket.isSessionReused()</code> <a class="header-anchor" href="#tlssocketissessionreused" aria-label="Permalink to “tlsSocket.isSessionReused()”">​</a></h3><p><strong>Added in: v0.5.6</strong></p><ul><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>true</code> if the session was reused, <code>false</code> otherwise.</li></ul><p>See <a href="/nodejs/api/tls#session-resumption">Session Resumption</a> for more information.</p><h3 id="tlssocketlocaladdress" tabindex="-1"><code>tlsSocket.localAddress</code> <a class="header-anchor" href="#tlssocketlocaladdress" aria-label="Permalink to “tlsSocket.localAddress”">​</a></h3><p><strong>Added in: v0.11.4</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>Returns the string representation of the local IP address.</p><h3 id="tlssocketlocalport" tabindex="-1"><code>tlsSocket.localPort</code> <a class="header-anchor" href="#tlssocketlocalport" aria-label="Permalink to “tlsSocket.localPort”">​</a></h3><p><strong>Added in: v0.11.4</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a></li></ul><p>Returns the numeric representation of the local port.</p><h3 id="tlssocketremoteaddress" tabindex="-1"><code>tlsSocket.remoteAddress</code> <a class="header-anchor" href="#tlssocketremoteaddress" aria-label="Permalink to “tlsSocket.remoteAddress”">​</a></h3><p><strong>Added in: v0.11.4</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>Returns the string representation of the remote IP address. For example, <code>&#39;74.125.127.100&#39;</code> or <code>&#39;2001:4860:a005::68&#39;</code>.</p><h3 id="tlssocketremotefamily" tabindex="-1"><code>tlsSocket.remoteFamily</code> <a class="header-anchor" href="#tlssocketremotefamily" aria-label="Permalink to “tlsSocket.remoteFamily”">​</a></h3><p><strong>Added in: v0.11.4</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>Returns the string representation of the remote IP family. <code>&#39;IPv4&#39;</code> or <code>&#39;IPv6&#39;</code>.</p><h3 id="tlssocketremoteport" tabindex="-1"><code>tlsSocket.remotePort</code> <a class="header-anchor" href="#tlssocketremoteport" aria-label="Permalink to “tlsSocket.remotePort”">​</a></h3><p><strong>Added in: v0.11.4</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a></li></ul><p>Returns the numeric representation of the remote port. For example, <code>443</code>.</p><h3 id="tlssocketrenegotiateoptions-callback" tabindex="-1"><code>tlsSocket.renegotiate(options, callback)</code> <a class="header-anchor" href="#tlssocketrenegotiateoptions-callback" aria-label="Permalink to “tlsSocket.renegotiate(options, callback)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v18.0.0</td><td>Passing an invalid callback to the <code>callback</code> argument now throws <code>ERR_INVALID_ARG_TYPE</code> instead of <code>ERR_INVALID_CALLBACK</code>.</td></tr><tr><td>v0.11.8</td><td>Added in: v0.11.8</td></tr></tbody></table></div><ul><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></p><ul><li><code>rejectUnauthorized</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> If not <code>false</code>, the server certificate is verified against the list of supplied CAs. An <code>&#39;error&#39;</code> event is emitted if verification fails; <code>err.code</code> contains the OpenSSL error code. <strong>Default:</strong> <code>true</code>.</li><li><code>requestCert</code></li></ul></li><li><p><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> If <code>renegotiate()</code> returned <code>true</code>, callback is attached once to the <code>&#39;secure&#39;</code> event. If <code>renegotiate()</code> returned <code>false</code>, <code>callback</code> will be called in the next tick with an error, unless the <code>tlsSocket</code> has been destroyed, in which case <code>callback</code> will not be called at all.</p></li><li><p>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>true</code> if renegotiation was initiated, <code>false</code> otherwise.</p></li></ul><p>The <code>tlsSocket.renegotiate()</code> method initiates a TLS renegotiation process. Upon completion, the <code>callback</code> function will be passed a single argument that is either an <code>Error</code> (if the request failed) or <code>null</code>.</p><p>This method can be used to request a peer&#39;s certificate after the secure connection has been established.</p><p>When running as the server, the socket will be destroyed with an error after <code>handshakeTimeout</code> timeout.</p><p>For TLSv1.3, renegotiation cannot be initiated, it is not supported by the protocol.</p><h3 id="tlssocketsetkeycertcontext" tabindex="-1"><code>tlsSocket.setKeyCert(context)</code> <a class="header-anchor" href="#tlssocketsetkeycertcontext" aria-label="Permalink to “tlsSocket.setKeyCert(context)”">​</a></h3><p><strong>Added in: v22.5.0, v20.17.0</strong></p><ul><li><code>context</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> | <a href="/nodejs/api/tls#tlscreatesecurecontextoptions">&lt;tls.SecureContext&gt;</a> An object containing at least <code>key</code> and <code>cert</code> properties from the <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> <code>options</code>, or a TLS context object created with <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> itself.</li></ul><p>The <code>tlsSocket.setKeyCert()</code> method sets the private key and certificate to use for the socket. This is mainly useful if you wish to select a server certificate from a TLS server&#39;s <code>ALPNCallback</code>.</p><h3 id="tlssocketsetmaxsendfragmentsize" tabindex="-1"><code>tlsSocket.setMaxSendFragment(size)</code> <a class="header-anchor" href="#tlssocketsetmaxsendfragmentsize" aria-label="Permalink to “tlsSocket.setMaxSendFragment(size)”">​</a></h3><p><strong>Added in: v0.11.11</strong></p><ul><li><code>size</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> The maximum TLS fragment size. The maximum value is <code>16384</code>. <strong>Default:</strong> <code>16384</code>.</li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>The <code>tlsSocket.setMaxSendFragment()</code> method sets the maximum TLS fragment size. Returns <code>true</code> if setting the limit succeeded; <code>false</code> otherwise.</p><p>Smaller fragment sizes decrease the buffering latency on the client: larger fragments are buffered by the TLS layer until the entire fragment is received and its integrity is verified; large fragments can span multiple roundtrips and their processing can be delayed due to packet loss or reordering. However, smaller fragments add extra TLS framing bytes and CPU overhead, which may decrease overall server throughput.</p><h2 id="tlscheckserveridentityhostname-cert" tabindex="-1"><code>tls.checkServerIdentity(hostname, cert)</code> <a class="header-anchor" href="#tlscheckserveridentityhostname-cert" aria-label="Permalink to “tls.checkServerIdentity(hostname, cert)”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v17.3.1, v16.13.2, v14.18.3, v12.22.9</td><td>Support for <code>uniformResourceIdentifier</code> subject alternative names has been disabled in response to CVE-2021-44531.</td></tr><tr><td>v0.8.4</td><td>Added in: v0.8.4</td></tr></tbody></table></div><ul><li><code>hostname</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The host name or IP address to verify the certificate against.</li><li><code>cert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> A <a href="/nodejs/api/tls#certificate-object">certificate object</a> representing the peer&#39;s certificate.</li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a></li></ul><p>Verifies the certificate <code>cert</code> is issued to <code>hostname</code>.</p><p>Returns <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a> object, populating it with <code>reason</code>, <code>host</code>, and <code>cert</code> on failure. On success, returns <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a>.</p><p>This function is intended to be used in combination with the <code>checkServerIdentity</code> option that can be passed to <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a> and as such operates on a <a href="/nodejs/api/tls#certificate-object">certificate object</a>. For other purposes, consider using <a href="/nodejs/api/crypto#x509checkhostname-options"><code>x509.checkHost()</code></a> instead.</p><p>This function can be overwritten by providing an alternative function as the <code>options.checkServerIdentity</code> option that is passed to <code>tls.connect()</code>. The overwriting function can call <code>tls.checkServerIdentity()</code> of course, to augment the checks done with additional verification.</p><p>This function is only called if the certificate passed all other checks, such as being issued by trusted CA (<code>options.ca</code>).</p><p>Earlier versions of Node.js incorrectly accepted certificates for a given <code>hostname</code> if a matching <code>uniformResourceIdentifier</code> subject alternative name was present (see <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44531" target="_blank" rel="noreferrer">CVE-2021-44531</a>). Applications that wish to accept <code>uniformResourceIdentifier</code> subject alternative names can use a custom <code>options.checkServerIdentity</code> function that implements the desired behavior.</p><h2 id="tlsconnectoptions-callback" tabindex="-1"><code>tls.connect(options[, callback])</code> <a class="header-anchor" href="#tlsconnectoptions-callback" aria-label="Permalink to “tls.connect(options[, callback])”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v15.1.0, v14.18.0</td><td>Added <code>onread</code> option.</td></tr><tr><td>v14.1.0, v13.14.0</td><td>The <code>highWaterMark</code> option is accepted now.</td></tr><tr><td>v13.6.0, v12.16.0</td><td>The <code>pskCallback</code> option is now supported.</td></tr><tr><td>v12.9.0</td><td>Support the <code>allowHalfOpen</code> option.</td></tr><tr><td>v12.4.0</td><td>The <code>hints</code> option is now supported.</td></tr><tr><td>v12.2.0</td><td>The <code>enableTrace</code> option is now supported.</td></tr><tr><td>v11.8.0, v10.16.0</td><td>The <code>timeout</code> option is supported now.</td></tr><tr><td>v8.0.0</td><td>The <code>lookup</code> option is supported now.</td></tr><tr><td>v8.0.0</td><td>The <code>ALPNProtocols</code> option can be a <code>TypedArray</code> or <code>DataView</code> now.</td></tr><tr><td>v5.0.0</td><td>ALPN options are supported now.</td></tr><tr><td>v5.3.0, v4.7.0</td><td>The <code>secureContext</code> option is supported now.</td></tr><tr><td>v0.11.3</td><td>Added in: v0.11.3</td></tr></tbody></table></div><ul><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></p><ul><li><code>enableTrace</code>: See <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a></li><li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Host the client should connect to. <strong>Default:</strong> <code>&#39;localhost&#39;</code>.</li><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> Port the client should connect to.</li><li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Creates Unix socket connection to path. If this option is specified, <code>host</code> and <code>port</code> are ignored.</li><li><code>socket</code> <a href="/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> Establish secure connection on a given socket rather than creating a new socket. Typically, this is an instance of <a href="/nodejs/api/net#class-netsocket"><code>net.Socket</code></a>, but any <code>Duplex</code> stream is allowed. If this option is specified, <code>path</code>, <code>host</code>, and <code>port</code> are ignored, except for certificate validation. Usually, a socket is already connected when passed to <code>tls.connect()</code>, but it can be connected later. Connection/disconnection/destruction of <code>socket</code> is the user&#39;s responsibility; calling <code>tls.connect()</code> will not cause <code>net.connect()</code> to be called.</li><li><code>allowHalfOpen</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> If set to <code>false</code>, then the socket will automatically end the writable side when the readable side ends. If the <code>socket</code> option is set, this option has no effect. See the <code>allowHalfOpen</code> option of <a href="/nodejs/api/net#class-netsocket"><code>net.Socket</code></a> for details. <strong>Default:</strong> <code>false</code>.</li><li><code>rejectUnauthorized</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> If not <code>false</code>, the server certificate is verified against the list of supplied CAs. An <code>&#39;error&#39;</code> event is emitted if verification fails; <code>err.code</code> contains the OpenSSL error code. <strong>Default:</strong> <code>true</code>.</li><li><code>pskCallback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> For TLS-PSK negotiation, see <a href="/nodejs/api/tls#pre-shared-keys">Pre-shared keys</a>.</li><li><code>ALPNProtocols</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView[]&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> An array of strings, <code>Buffer</code>s, <code>TypedArray</code>s, or <code>DataView</code>s, or a single <code>Buffer</code>, <code>TypedArray</code>, or <code>DataView</code> containing the supported ALPN protocols. <code>Buffer</code>s should have the format <code>[len][name][len][name]...</code> e.g. <code>&#39;\\x08http/1.1\\x08http/1.0&#39;</code>, where the <code>len</code> byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. <code>[&#39;http/1.1&#39;, &#39;http/1.0&#39;]</code>. Protocols earlier in the list have higher preference than those later.</li><li><code>servername</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Server name for the SNI (Server Name Indication) TLS extension. It is the name of the host being connected to, and must be a host name, and not an IP address. It can be used by a multi-homed server to choose the correct certificate to present to the client, see the <code>SNICallback</code> option to <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a>.</li><li><code>checkServerIdentity(servername, cert)</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> A callback function to be used (instead of the builtin <code>tls.checkServerIdentity()</code> function) when checking the server&#39;s host name (or the provided <code>servername</code> when explicitly set) against the certificate. This should return an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a> if verification fails. The method should return <code>undefined</code> if the <code>servername</code> and <code>cert</code> are verified.</li><li><code>session</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> A <code>Buffer</code> instance, containing TLS session.</li><li><code>minDHSize</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> Minimum size of the DH parameter in bits to accept a TLS connection. When a server offers a DH parameter with a size less than <code>minDHSize</code>, the TLS connection is destroyed and an error is thrown. <strong>Default:</strong> <code>1024</code>.</li><li><code>highWaterMark</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> Consistent with the readable stream <code>highWaterMark</code> parameter. <strong>Default:</strong> <code>16 * 1024</code>.</li><li><code>secureContext</code>: TLS context object created with <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a>. If a <code>secureContext</code> is <em>not</em> provided, one will be created by passing the entire <code>options</code> object to <code>tls.createSecureContext()</code>.</li><li><code>onread</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> If the <code>socket</code> option is missing, incoming data is stored in a single <code>buffer</code> and passed to the supplied <code>callback</code> when data arrives on the socket, otherwise the option is ignored. See the <code>onread</code> option of <a href="/nodejs/api/net#class-netsocket"><code>net.Socket</code></a> for details.</li><li>...: <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> options that are used if the <code>secureContext</code> option is missing, otherwise they are ignored.</li><li>...: Any <a href="/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect()</code></a> option not already listed.</li></ul></li><li><p><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></p></li><li><p>Returns: <a href="/nodejs/api/tls#class-tlstlssocket">&lt;tls.TLSSocket&gt;</a></p></li></ul><p>The <code>callback</code> function, if specified, will be added as a listener for the <a href="/nodejs/api/tls#event-secureconnect"><code>&#39;secureConnect&#39;</code></a> event.</p><p><code>tls.connect()</code> returns a <a href="/nodejs/api/tls#class-tlstlssocket"><code>tls.TLSSocket</code></a> object.</p><p>Unlike the <code>https</code> API, <code>tls.connect()</code> does not enable the SNI (Server Name Indication) extension by default, which may cause some servers to return an incorrect certificate or reject the connection altogether. To enable SNI, set the <code>servername</code> option in addition to <code>host</code>.</p><p>The following illustrates a client for the echo server example from <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a>:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-2354" id="tab-2355" checked><label data-title="ESM" for="tab-2355">ESM</label><input type="radio" name="group-2354" id="tab-2356"><label data-title="CJS" for="tab-2356">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assumes an echo server that is listening on port 8000.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { connect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:tls&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFileSync } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { stdin } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Necessary only if the server requires client certificate authentication.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  key: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client-key.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cert: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client-cert.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Necessary only if the server uses a self-signed certificate.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ca: [ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server-cert.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Necessary only if the server&#39;s cert isn&#39;t for &quot;localhost&quot;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  checkServerIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client connected&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              socket.authorized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;authorized&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;unauthorized&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  stdin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(socket);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  stdin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server ends connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assumes an echo server that is listening on port 8000.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:tls&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Necessary only if the server requires client certificate authentication.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  key: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client-key.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cert: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client-cert.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Necessary only if the server uses a self-signed certificate.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ca: [ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server-cert.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Necessary only if the server&#39;s cert isn&#39;t for &quot;localhost&quot;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  checkServerIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client connected&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              socket.authorized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;authorized&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;unauthorized&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.stdin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(socket);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.stdin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server ends connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div></div></div><p>To generate the certificate and key for this example, run:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -newkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa:2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sha256</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -subj</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/CN=localhost&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -keyout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client-cert.pem</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Then, to generate the <code>server-cert.pem</code> certificate for this example, run:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkcs12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -certpbe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AES-256-CBC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server-cert.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -inkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client-cert.pem</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="tlsconnectpath-options-callback" tabindex="-1"><code>tls.connect(path[, options][, callback])</code> <a class="header-anchor" href="#tlsconnectpath-options-callback" aria-label="Permalink to “tls.connect(path[, options][, callback])”">​</a></h2><p><strong>Added in: v0.11.3</strong></p><ul><li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Default value for <code>options.path</code>.</li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> See <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a>.</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> See <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a>.</li><li>Returns: <a href="/nodejs/api/tls#class-tlstlssocket">&lt;tls.TLSSocket&gt;</a></li></ul><p>Same as <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a> except that <code>path</code> can be provided as an argument instead of an option.</p><p>A path option, if specified, will take precedence over the path argument.</p><h2 id="tlsconnectport-host-options-callback" tabindex="-1"><code>tls.connect(port[, host][, options][, callback])</code> <a class="header-anchor" href="#tlsconnectport-host-options-callback" aria-label="Permalink to “tls.connect(port[, host][, options][, callback])”">​</a></h2><p><strong>Added in: v0.11.3</strong></p><ul><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> Default value for <code>options.port</code>.</li><li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Default value for <code>options.host</code>.</li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> See <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a>.</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> See <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a>.</li><li>Returns: <a href="/nodejs/api/tls#class-tlstlssocket">&lt;tls.TLSSocket&gt;</a></li></ul><p>Same as <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a> except that <code>port</code> and <code>host</code> can be provided as arguments instead of options.</p><p>A port or host option, if specified, will take precedence over any port or host argument.</p><h2 id="tlscreatesecurecontextoptions" tabindex="-1"><code>tls.createSecureContext([options])</code> <a class="header-anchor" href="#tlscreatesecurecontextoptions" aria-label="Permalink to “tls.createSecureContext([options])”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v22.9.0, v20.18.0</td><td>The <code>allowPartialTrustChain</code> option has been added.</td></tr><tr><td>v22.4.0, v20.16.0</td><td>The <code>clientCertEngine</code>, <code>privateKeyEngine</code> and <code>privateKeyIdentifier</code> options depend on custom engine support in OpenSSL which is deprecated in OpenSSL 3.</td></tr><tr><td>v19.8.0, v18.16.0</td><td>The <code>dhparam</code> option can now be set to <code>&#39;auto&#39;</code> to enable DHE with appropriate well-known parameters.</td></tr><tr><td>v12.12.0</td><td>Added <code>privateKeyIdentifier</code> and <code>privateKeyEngine</code> options to get private key from an OpenSSL engine.</td></tr><tr><td>v12.11.0</td><td>Added <code>sigalgs</code> option to override supported signature algorithms.</td></tr><tr><td>v12.0.0</td><td>TLSv1.3 support added.</td></tr><tr><td>v11.5.0</td><td>The <code>ca:</code> option now supports <code>BEGIN TRUSTED CERTIFICATE</code>.</td></tr><tr><td>v11.4.0, v10.16.0</td><td>The <code>minVersion</code> and <code>maxVersion</code> can be used to restrict the allowed TLS protocol versions.</td></tr><tr><td>v10.0.0</td><td>The <code>ecdhCurve</code> cannot be set to <code>false</code> anymore due to a change in OpenSSL.</td></tr><tr><td>v9.3.0</td><td>The <code>options</code> parameter can now include <code>clientCertEngine</code>.</td></tr><tr><td>v9.0.0</td><td>The <code>ecdhCurve</code> option can now be multiple <code>&#39;:&#39;</code> separated curve names or <code>&#39;auto&#39;</code>.</td></tr><tr><td>v7.3.0</td><td>If the <code>key</code> option is an array, individual entries do not need a <code>passphrase</code> property anymore. <code>Array</code> entries can also just be <code>string</code>s or <code>Buffer</code>s now.</td></tr><tr><td>v5.2.0</td><td>The <code>ca</code> option can now be a single string containing multiple CA certificates.</td></tr><tr><td>v0.11.13</td><td>Added in: v0.11.13</td></tr></tbody></table></div><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>allowPartialTrustChain</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> Treat intermediate (non-self-signed) certificates in the trust CA certificate list as trusted.</li><li><code>ca</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer[]&gt;</a> Optionally override the trusted CA certificates. Default is to trust the well-known CAs curated by Mozilla. Mozilla&#39;s CAs are completely replaced when CAs are explicitly specified using this option. The value can be a string or <code>Buffer</code>, or an <code>Array</code> of strings and/or <code>Buffer</code>s. Any string or <code>Buffer</code> can contain multiple PEM CAs concatenated together. The peer&#39;s certificate must be chainable to a CA trusted by the server for the connection to be authenticated. When using certificates that are not chainable to a well-known CA, the certificate&#39;s CA must be explicitly specified as a trusted or the connection will fail to authenticate. If the peer uses a certificate that doesn&#39;t match or chain to one of the default CAs, use the <code>ca</code> option to provide a CA certificate that the peer&#39;s certificate can match or chain to. For self-signed certificates, the certificate is its own CA, and must be provided. For PEM encoded certificates, supported types are &quot;TRUSTED CERTIFICATE&quot;, &quot;X509 CERTIFICATE&quot;, and &quot;CERTIFICATE&quot;. See also <a href="/nodejs/api/tls#tlsrootcertificates"><code>tls.rootCertificates</code></a>.</li><li><code>cert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer[]&gt;</a> Cert chains in PEM format. One cert chain should be provided per private key. Each cert chain should consist of the PEM formatted certificate for a provided private <code>key</code>, followed by the PEM formatted intermediate certificates (if any), in order, and not including the root CA (the root CA must be pre-known to the peer, see <code>ca</code>). When providing multiple cert chains, they do not have to be in the same order as their private keys in <code>key</code>. If the intermediate certificates are not provided, the peer will not be able to validate the certificate, and the handshake will fail.</li><li><code>sigalgs</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Colon-separated list of supported signature algorithms. The list can contain digest algorithms (<code>SHA256</code>, <code>MD5</code> etc.), public key algorithms (<code>RSA-PSS</code>, <code>ECDSA</code> etc.), combination of both (e.g &#39;RSA+SHA384&#39;) or TLS v1.3 scheme names (e.g. <code>rsa_pss_pss_sha512</code>). See <a href="https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set1_sigalgs_list" target="_blank" rel="noreferrer">OpenSSL man pages</a> for more info.</li><li><code>ciphers</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Cipher suite specification, replacing the default. For more information, see <a href="/nodejs/api/tls#modifying-the-default-tls-cipher-suite">Modifying the default TLS cipher suite</a>. Permitted ciphers can be obtained via <a href="/nodejs/api/tls#tlsgetciphers"><code>tls.getCiphers()</code></a>. Cipher names must be uppercased in order for OpenSSL to accept them.</li><li><code>clientCertEngine</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Name of an OpenSSL engine which can provide the client certificate. <strong>Deprecated.</strong></li><li><code>crl</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer[]&gt;</a> PEM formatted CRLs (Certificate Revocation Lists).</li><li><code>dhparam</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> <code>&#39;auto&#39;</code> or custom Diffie-Hellman parameters, required for non-ECDHE <a href="/nodejs/api/tls#perfect-forward-secrecy">perfect forward secrecy</a>. If omitted or invalid, the parameters are silently discarded and DHE ciphers will not be available. <a href="https://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman" target="_blank" rel="noreferrer">ECDHE</a>-based <a href="/nodejs/api/tls#perfect-forward-secrecy">perfect forward secrecy</a> will still be available.</li><li><code>ecdhCurve</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> A string describing a named curve or a colon separated list of curve NIDs or names, for example <code>P-521:P-384:P-256</code>, to use for ECDH key agreement. Set to <code>auto</code> to select the curve automatically. Use <a href="/nodejs/api/crypto#cryptogetcurves"><code>crypto.getCurves()</code></a> to obtain a list of available curve names. On recent releases, <code>openssl ecparam -list_curves</code> will also display the name and description of each available elliptic curve. <strong>Default:</strong> <a href="/nodejs/api/tls#tlsdefault-ecdh-curve"><code>tls.DEFAULT_ECDH_CURVE</code></a>.</li><li><code>honorCipherOrder</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> Attempt to use the server&#39;s cipher suite preferences instead of the client&#39;s. When <code>true</code>, causes <code>SSL_OP_CIPHER_SERVER_PREFERENCE</code> to be set in <code>secureOptions</code>, see <a href="/nodejs/api/crypto#openssl-options">OpenSSL Options</a> for more information.</li><li><code>key</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object[]&gt;</a> Private keys in PEM format. PEM allows the option of private keys being encrypted. Encrypted keys will be decrypted with <code>options.passphrase</code>. Multiple keys using different algorithms can be provided either as an array of unencrypted key strings or buffers, or an array of objects in the form <code>{pem: \\&lt;string|buffer\\&gt;[, passphrase: \\&lt;string\\&gt;]}</code>. The object form can only occur in an array. <code>object.passphrase</code> is optional. Encrypted keys will be decrypted with <code>object.passphrase</code> if provided, or <code>options.passphrase</code> if it is not.</li><li><code>privateKeyEngine</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Name of an OpenSSL engine to get private key from. Should be used together with <code>privateKeyIdentifier</code>. <strong>Deprecated.</strong></li><li><code>privateKeyIdentifier</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Identifier of a private key managed by an OpenSSL engine. Should be used together with <code>privateKeyEngine</code>. Should not be set together with <code>key</code>, because both options define a private key in different ways. <strong>Deprecated.</strong></li><li><code>maxVersion</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Optionally set the maximum TLS version to allow. One of <code>&#39;TLSv1.3&#39;</code>, <code>&#39;TLSv1.2&#39;</code>, <code>&#39;TLSv1.1&#39;</code>, or <code>&#39;TLSv1&#39;</code>. Cannot be specified along with the <code>secureProtocol</code> option; use one or the other. <strong>Default:</strong> <a href="/nodejs/api/tls#tlsdefault-max-version"><code>tls.DEFAULT_MAX_VERSION</code></a>.</li><li><code>minVersion</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Optionally set the minimum TLS version to allow. One of <code>&#39;TLSv1.3&#39;</code>, <code>&#39;TLSv1.2&#39;</code>, <code>&#39;TLSv1.1&#39;</code>, or <code>&#39;TLSv1&#39;</code>. Cannot be specified along with the <code>secureProtocol</code> option; use one or the other. Avoid setting to less than TLSv1.2, but it may be required for interoperability. Versions before TLSv1.2 may require downgrading the <a href="/nodejs/api/tls#openssl-security-level">OpenSSL Security Level</a>. <strong>Default:</strong> <a href="/nodejs/api/tls#tlsdefault-min-version"><code>tls.DEFAULT_MIN_VERSION</code></a>.</li><li><code>passphrase</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Shared passphrase used for a single private key and/or a PFX.</li><li><code>pfx</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object[]&gt;</a> PFX or PKCS12 encoded private key and certificate chain. <code>pfx</code> is an alternative to providing <code>key</code> and <code>cert</code> individually. PFX is usually encrypted, if it is, <code>passphrase</code> will be used to decrypt it. Multiple PFX can be provided either as an array of unencrypted PFX buffers, or an array of objects in the form <code>{buf: \\&lt;string|buffer\\&gt;[, passphrase: \\&lt;string\\&gt;]}</code>. The object form can only occur in an array. <code>object.passphrase</code> is optional. Encrypted PFX will be decrypted with <code>object.passphrase</code> if provided, or <code>options.passphrase</code> if it is not.</li><li><code>secureOptions</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> Optionally affect the OpenSSL protocol behavior, which is not usually necessary. This should be used carefully if at all! Value is a numeric bitmask of the <code>SSL_OP_*</code> options from <a href="/nodejs/api/crypto#openssl-options">OpenSSL Options</a>.</li><li><code>secureProtocol</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Legacy mechanism to select the TLS protocol version to use, it does not support independent control of the minimum and maximum version, and does not support limiting the protocol to TLSv1.3. Use <code>minVersion</code> and <code>maxVersion</code> instead. The possible values are listed as <a href="https://www.openssl.org/docs/man1.1.1/man7/ssl#Dealing-with-Protocol-Methods" target="_blank" rel="noreferrer">SSL_METHODS</a>, use the function names as strings. For example, use <code>&#39;TLSv1_1_method&#39;</code> to force TLS version 1.1, or <code>&#39;TLS_method&#39;</code> to allow any TLS protocol version up to TLSv1.3. It is not recommended to use TLS versions less than 1.2, but it may be required for interoperability. <strong>Default:</strong> none, see <code>minVersion</code>.</li><li><code>sessionIdContext</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Opaque identifier used by servers to ensure session state is not shared between applications. Unused by clients.</li><li><code>ticketKeys</code>: <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> 48-bytes of cryptographically strong pseudorandom data. See <a href="/nodejs/api/tls#session-resumption">Session Resumption</a> for more information.</li><li><code>sessionTimeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> The number of seconds after which a TLS session created by the server will no longer be resumable. See <a href="/nodejs/api/tls#session-resumption">Session Resumption</a> for more information. <strong>Default:</strong> <code>300</code>.</li></ul></li></ul><p><a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a> sets the default value of the <code>honorCipherOrder</code> option to <code>true</code>, other APIs that create secure contexts leave it unset.</p><p><a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a> uses a 128 bit truncated SHA1 hash value generated from <code>process.argv</code> as the default value of the <code>sessionIdContext</code> option, other APIs that create secure contexts have no default value.</p><p>The <code>tls.createSecureContext()</code> method creates a <code>SecureContext</code> object. It is usable as an argument to several <code>tls</code> APIs, such as <a href="/nodejs/api/tls#serveraddcontexthostname-context"><code>server.addContext()</code></a>, but has no public methods. The <a href="/nodejs/api/tls#class-tlsserver"><code>tls.Server</code></a> constructor and the <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a> method do not support the <code>secureContext</code> option.</p><p>A key is <em>required</em> for ciphers that use certificates. Either <code>key</code> or <code>pfx</code> can be used to provide it.</p><p>If the <code>ca</code> option is not given, then Node.js will default to using <a href="https://hg.mozilla.org/mozilla-central/raw-file/tip/security/nss/lib/ckfw/builtins/certdata.txt" target="_blank" rel="noreferrer">Mozilla&#39;s publicly trusted list of CAs</a>.</p><p>Custom DHE parameters are discouraged in favor of the new <code>dhparam: &#39;auto&#39;</code> option. When set to <code>&#39;auto&#39;</code>, well-known DHE parameters of sufficient strength will be selected automatically. Otherwise, if necessary, <code>openssl dhparam</code> can be used to create custom parameters. The key length must be greater than or equal to 1024 bits or else an error will be thrown. Although 1024 bits is permissible, use 2048 bits or larger for stronger security.</p><h2 id="tlscreatesecurepaircontext-isserver-requestcert-rejectunauthorized-options" tabindex="-1"><code>tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])</code> <a class="header-anchor" href="#tlscreatesecurepaircontext-isserver-requestcert-rejectunauthorized-options" aria-label="Permalink to “tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v5.0.0</td><td>ALPN options are supported now.</td></tr><tr><td>v0.11.3</td><td>Deprecated since: v0.11.3</td></tr><tr><td>v0.3.2</td><td>Added in: v0.3.2</td></tr></tbody></table></div><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/nodejs/api/documentation#stability-index">Stability: 0</a> - Deprecated: Use <a href="/nodejs/api/tls#class-tlstlssocket"><code>tls.TLSSocket</code></a> instead.</p></div><ul><li><code>context</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> A secure context object as returned by <code>tls.createSecureContext()</code></li><li><code>isServer</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>true</code> to specify that this TLS connection should be opened as a server.</li><li><code>requestCert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>true</code> to specify whether a server should request a certificate from a connecting client. Only applies when <code>isServer</code> is <code>true</code>.</li><li><code>rejectUnauthorized</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> If not <code>false</code> a server automatically reject clients with invalid certificates. Only applies when <code>isServer</code> is <code>true</code>.</li><li><code>options</code><ul><li><code>enableTrace</code>: See <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a></li><li><code>secureContext</code>: A TLS context object from <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a></li><li><code>isServer</code>: If <code>true</code> the TLS socket will be instantiated in server-mode. <strong>Default:</strong> <code>false</code>.</li><li><code>server</code> <a href="/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a> A <a href="/nodejs/api/net#class-netserver"><code>net.Server</code></a> instance</li><li><code>requestCert</code>: See <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a></li><li><code>rejectUnauthorized</code>: See <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a></li><li><code>ALPNProtocols</code>: See <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a></li><li><code>SNICallback</code>: See <a href="/nodejs/api/tls#tlscreateserveroptions-secureconnectionlistener"><code>tls.createServer()</code></a></li><li><code>session</code> <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> A <code>Buffer</code> instance containing a TLS session.</li><li><code>requestOCSP</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> If <code>true</code>, specifies that the OCSP status request extension will be added to the client hello and an <code>&#39;OCSPResponse&#39;</code> event will be emitted on the socket before establishing a secure communication.</li></ul></li></ul><p>Creates a new secure pair object with two streams, one of which reads and writes the encrypted data and the other of which reads and writes the cleartext data. Generally, the encrypted stream is piped to/from an incoming encrypted data stream and the cleartext one is used as a replacement for the initial encrypted stream.</p><p><code>tls.createSecurePair()</code> returns a <code>tls.SecurePair</code> object with <code>cleartext</code> and <code>encrypted</code> stream properties.</p><p>Using <code>cleartext</code> has the same API as <a href="/nodejs/api/tls#class-tlstlssocket"><code>tls.TLSSocket</code></a>.</p><p>The <code>tls.createSecurePair()</code> method is now deprecated in favor of <code>tls.TLSSocket()</code>. For example, the code:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pair </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tls.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createSecurePair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pair.encrypted.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(socket);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pair.encrypted);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>can be replaced by:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">secureSocket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tls.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TLSSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(socket, options);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>where <code>secureSocket</code> has the same API as <code>pair.cleartext</code>.</p><h2 id="tlscreateserveroptions-secureconnectionlistener" tabindex="-1"><code>tls.createServer([options][, secureConnectionListener])</code> <a class="header-anchor" href="#tlscreateserveroptions-secureconnectionlistener" aria-label="Permalink to “tls.createServer([options][, secureConnectionListener])”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v22.4.0, v20.16.0</td><td>The <code>clientCertEngine</code> option depends on custom engine support in OpenSSL which is deprecated in OpenSSL 3.</td></tr><tr><td>v19.0.0</td><td>If <code>ALPNProtocols</code> is set, incoming connections that send an ALPN extension with no supported protocols are terminated with a fatal <code>no_application_protocol</code> alert.</td></tr><tr><td>v20.4.0, v18.19.0</td><td>The <code>options</code> parameter can now include <code>ALPNCallback</code>.</td></tr><tr><td>v12.3.0</td><td>The <code>options</code> parameter now supports <code>net.createServer()</code> options.</td></tr><tr><td>v9.3.0</td><td>The <code>options</code> parameter can now include <code>clientCertEngine</code>.</td></tr><tr><td>v8.0.0</td><td>The <code>ALPNProtocols</code> option can be a <code>TypedArray</code> or <code>DataView</code> now.</td></tr><tr><td>v5.0.0</td><td>ALPN options are supported now.</td></tr><tr><td>v0.3.2</td><td>Added in: v0.3.2</td></tr></tbody></table></div><ul><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></p><ul><li><code>ALPNProtocols</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView[]&gt;</a> | <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> An array of strings, <code>Buffer</code>s, <code>TypedArray</code>s, or <code>DataView</code>s, or a single <code>Buffer</code>, <code>TypedArray</code>, or <code>DataView</code> containing the supported ALPN protocols. <code>Buffer</code>s should have the format <code>[len][name][len][name]...</code> e.g. <code>0x05hello0x05world</code>, where the first byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. <code>[&#39;hello&#39;, &#39;world&#39;]</code>. (Protocols should be ordered by their priority.)</li><li><code>ALPNCallback</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> If set, this will be called when a client opens a connection using the ALPN extension. One argument will be passed to the callback: an object containing <code>servername</code> and <code>protocols</code> fields, respectively containing the server name from the SNI extension (if any) and an array of ALPN protocol name strings. The callback must return either one of the strings listed in <code>protocols</code>, which will be returned to the client as the selected ALPN protocol, or <code>undefined</code>, to reject the connection with a fatal alert. If a string is returned that does not match one of the client&#39;s ALPN protocols, an error will be thrown. This option cannot be used with the <code>ALPNProtocols</code> option, and setting both options will throw an error.</li><li><code>clientCertEngine</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Name of an OpenSSL engine which can provide the client certificate. <strong>Deprecated.</strong></li><li><code>enableTrace</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> If <code>true</code>, <a href="/nodejs/api/tls#tlssocketenabletrace"><code>tls.TLSSocket.enableTrace()</code></a> will be called on new connections. Tracing can be enabled after the secure connection is established, but this option must be used to trace the secure connection setup. <strong>Default:</strong> <code>false</code>.</li><li><code>handshakeTimeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> Abort the connection if the SSL/TLS handshake does not finish in the specified number of milliseconds. A <code>&#39;tlsClientError&#39;</code> is emitted on the <code>tls.Server</code> object whenever a handshake times out. <strong>Default:</strong> <code>120000</code> (120 seconds).</li><li><code>rejectUnauthorized</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> If not <code>false</code> the server will reject any connection which is not authorized with the list of supplied CAs. This option only has an effect if <code>requestCert</code> is <code>true</code>. <strong>Default:</strong> <code>true</code>.</li><li><code>requestCert</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> If <code>true</code> the server will request a certificate from clients that connect and attempt to verify that certificate. <strong>Default:</strong> <code>false</code>.</li><li><code>sessionTimeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> The number of seconds after which a TLS session created by the server will no longer be resumable. See <a href="/nodejs/api/tls#session-resumption">Session Resumption</a> for more information. <strong>Default:</strong> <code>300</code>.</li><li><code>SNICallback(servername, callback)</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> A function that will be called if the client supports SNI TLS extension. Two arguments will be passed when called: <code>servername</code> and <code>callback</code>. <code>callback</code> is an error-first callback that takes two optional arguments: <code>error</code> and <code>ctx</code>. <code>ctx</code>, if provided, is a <code>SecureContext</code> instance. <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> can be used to get a proper <code>SecureContext</code>. If <code>callback</code> is called with a falsy <code>ctx</code> argument, the default secure context of the server will be used. If <code>SNICallback</code> wasn&#39;t provided the default callback with high-level API will be used (see below).</li><li><code>ticketKeys</code>: <a href="/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> 48-bytes of cryptographically strong pseudorandom data. See <a href="/nodejs/api/tls#session-resumption">Session Resumption</a> for more information.</li><li><code>pskCallback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> For TLS-PSK negotiation, see <a href="/nodejs/api/tls#pre-shared-keys">Pre-shared keys</a>.</li><li><code>pskIdentityHint</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> optional hint to send to a client to help with selecting the identity during TLS-PSK negotiation. Will be ignored in TLS 1.3. Upon failing to set pskIdentityHint <code>&#39;tlsClientError&#39;</code> will be emitted with <code>&#39;ERR_TLS_PSK_SET_IDENTITY_HINT_FAILED&#39;</code> code.</li><li>...: Any <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> option can be provided. For servers, the identity options (<code>pfx</code>, <code>key</code>/<code>cert</code>, or <code>pskCallback</code>) are usually required.</li><li>...: Any <a href="/nodejs/api/net#netcreateserveroptions-connectionlistener"><code>net.createServer()</code></a> option can be provided.</li></ul></li><li><p><code>secureConnectionListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></p></li><li><p>Returns: <a href="/nodejs/api/tls#class-tlsserver">&lt;tls.Server&gt;</a></p></li></ul><p>Creates a new <a href="/nodejs/api/tls#class-tlsserver"><code>tls.Server</code></a>. The <code>secureConnectionListener</code>, if provided, is automatically set as a listener for the <a href="/nodejs/api/tls#event-secureconnection"><code>&#39;secureConnection&#39;</code></a> event.</p><p>The <code>ticketKeys</code> options is automatically shared between <code>node:cluster</code> module workers.</p><p>The following illustrates a simple echo server:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-3035" id="tab-3036" checked><label data-title="ESM" for="tab-3036">ESM</label><input type="radio" name="group-3035" id="tab-3037"><label data-title="CJS" for="tab-3037">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createServer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:tls&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFileSync } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  key: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server-key.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cert: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server-cert.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // This is necessary only if using client certificate authentication.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  requestCert: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // This is necessary only if the client uses a self-signed certificate.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ca: [ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client-cert.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server connected&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              socket.authorized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;authorized&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;unauthorized&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;welcome!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(socket);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server bound&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:tls&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  key: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server-key.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cert: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server-cert.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // This is necessary only if using client certificate authentication.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  requestCert: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // This is necessary only if the client uses a self-signed certificate.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ca: [ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client-cert.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server connected&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              socket.authorized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;authorized&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;unauthorized&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;welcome!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(socket);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server bound&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></div></div><p>To generate the certificate and key for this example, run:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -newkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa:2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sha256</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -subj</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/CN=localhost&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -keyout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server-cert.pem</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Then, to generate the <code>client-cert.pem</code> certificate for this example, run:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkcs12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -certpbe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AES-256-CBC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client-cert.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -inkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server-cert.pem</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>The server can be tested by connecting to it using the example client from <a href="/nodejs/api/tls#tlsconnectoptions-callback"><code>tls.connect()</code></a>.</p><h2 id="tlsgetciphers" tabindex="-1"><code>tls.getCiphers()</code> <a class="header-anchor" href="#tlsgetciphers" aria-label="Permalink to “tls.getCiphers()”">​</a></h2><p><strong>Added in: v0.10.2</strong></p><ul><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>Returns an array with the names of the supported TLS ciphers. The names are lower-case for historical reasons, but must be uppercased to be used in the <code>ciphers</code> option of <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a>.</p><p>Not all supported ciphers are enabled by default. See <a href="/nodejs/api/tls#modifying-the-default-tls-cipher-suite">Modifying the default TLS cipher suite</a>.</p><p>Cipher names that start with <code>&#39;tls_&#39;</code> are for TLSv1.3, all the others are for TLSv1.2 and below.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tls.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCiphers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;aes128-gcm-sha256&#39;, &#39;aes128-sha&#39;, ...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="tlsrootcertificates" tabindex="-1"><code>tls.rootCertificates</code> <a class="header-anchor" href="#tlsrootcertificates" aria-label="Permalink to “tls.rootCertificates”">​</a></h2><p><strong>Added in: v12.3.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>An immutable array of strings representing the root certificates (in PEM format) from the bundled Mozilla CA store as supplied by the current Node.js version.</p><p>The bundled CA store, as supplied by Node.js, is a snapshot of Mozilla CA store that is fixed at release time. It is identical on all supported platforms.</p><p>On macOS if <code>--use-system-ca</code> is passed then trusted certificates from the user and system keychains are also included.</p><h2 id="tlsdefault_ecdh_curve" tabindex="-1"><code>tls.DEFAULT_ECDH_CURVE</code> <a class="header-anchor" href="#tlsdefault_ecdh_curve" aria-label="Permalink to “tls.DEFAULT_ECDH_CURVE”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v10.0.0</td><td>Default value changed to <code>&#39;auto&#39;</code>.</td></tr><tr><td>v0.11.13</td><td>Added in: v0.11.13</td></tr></tbody></table></div><p>The default curve name to use for ECDH key agreement in a tls server. The default value is <code>&#39;auto&#39;</code>. See <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a> for further information.</p><h2 id="tlsdefault_max_version" tabindex="-1"><code>tls.DEFAULT_MAX_VERSION</code> <a class="header-anchor" href="#tlsdefault_max_version" aria-label="Permalink to “tls.DEFAULT_MAX_VERSION”">​</a></h2><p><strong>Added in: v11.4.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The default value of the <code>maxVersion</code> option of <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a>. It can be assigned any of the supported TLS protocol versions, <code>&#39;TLSv1.3&#39;</code>, <code>&#39;TLSv1.2&#39;</code>, <code>&#39;TLSv1.1&#39;</code>, or <code>&#39;TLSv1&#39;</code>. <strong>Default:</strong> <code>&#39;TLSv1.3&#39;</code>, unless changed using CLI options. Using <code>--tls-max-v1.2</code> sets the default to <code>&#39;TLSv1.2&#39;</code>. Using <code>--tls-max-v1.3</code> sets the default to <code>&#39;TLSv1.3&#39;</code>. If multiple of the options are provided, the highest maximum is used.</li></ul><h2 id="tlsdefault_min_version" tabindex="-1"><code>tls.DEFAULT_MIN_VERSION</code> <a class="header-anchor" href="#tlsdefault_min_version" aria-label="Permalink to “tls.DEFAULT_MIN_VERSION”">​</a></h2><p><strong>Added in: v11.4.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The default value of the <code>minVersion</code> option of <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a>. It can be assigned any of the supported TLS protocol versions, <code>&#39;TLSv1.3&#39;</code>, <code>&#39;TLSv1.2&#39;</code>, <code>&#39;TLSv1.1&#39;</code>, or <code>&#39;TLSv1&#39;</code>. Versions before TLSv1.2 may require downgrading the <a href="/nodejs/api/tls#openssl-security-level">OpenSSL Security Level</a>. <strong>Default:</strong> <code>&#39;TLSv1.2&#39;</code>, unless changed using CLI options. Using <code>--tls-min-v1.0</code> sets the default to <code>&#39;TLSv1&#39;</code>. Using <code>--tls-min-v1.1</code> sets the default to <code>&#39;TLSv1.1&#39;</code>. Using <code>--tls-min-v1.3</code> sets the default to <code>&#39;TLSv1.3&#39;</code>. If multiple of the options are provided, the lowest minimum is used.</li></ul><h2 id="tlsdefault_ciphers" tabindex="-1"><code>tls.DEFAULT_CIPHERS</code> <a class="header-anchor" href="#tlsdefault_ciphers" aria-label="Permalink to “tls.DEFAULT_CIPHERS”">​</a></h2><p><strong>Added in: v19.8.0, v18.16.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> The default value of the <code>ciphers</code> option of <a href="/nodejs/api/tls#tlscreatesecurecontextoptions"><code>tls.createSecureContext()</code></a>. It can be assigned any of the supported OpenSSL ciphers. Defaults to the content of <code>crypto.constants.defaultCoreCipherList</code>, unless changed using CLI options using <code>--tls-default-ciphers</code>.</li></ul>`,476)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};