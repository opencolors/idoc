import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js with WebAssembly","description":"WebAssembly is a high-performance assembly-like language that can be compiled from various languages, including C/C++, Rust, and AssemblyScript. Node.js provides the necessary APIs via the global WebAssembly object to communicate with WebAssembly.","frontmatter":{"title":"Node.js with WebAssembly","description":"WebAssembly is a high-performance assembly-like language that can be compiled from various languages, including C/C++, Rust, and AssemblyScript. Node.js provides the necessary APIs via the global WebAssembly object to communicate with WebAssembly.","head":[["meta",{"name":"og:title","content":"Node.js with WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"WebAssembly is a high-performance assembly-like language that can be compiled from various languages, including C/C++, Rust, and AssemblyScript. Node.js provides the necessary APIs via the global WebAssembly object to communicate with WebAssembly."}],["meta",{"name":"twitter:title","content":"Node.js with WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"WebAssembly is a high-performance assembly-like language that can be compiled from various languages, including C/C++, Rust, and AssemblyScript. Node.js provides the necessary APIs via the global WebAssembly object to communicate with WebAssembly."}],["link",{"rel":"canonical","href":"https://idoc.dev/nodejs/guide/nodejs-with-webassembly"}],["meta",{"property":"og:url","content":"https://idoc.dev/nodejs/guide/nodejs-with-webassembly"}]]},"headers":[],"relativePath":"nodejs/guide/nodejs-with-webassembly.md","filePath":"en/nodejs/guide/nodejs-with-webassembly.md","lastUpdated":1749464498000}`),a={name:`nodejs/guide/nodejs-with-webassembly.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-with-webassembly" tabindex="-1">Node.js with WebAssembly <a class="header-anchor" href="#node-js-with-webassembly" aria-label="Permalink to “Node.js with WebAssembly”">​</a></h1><p><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> is a high-performance assembly-like language that can be compiled from various languages, including C/C++, Rust, and AssemblyScript. Currently, it is supported by Chrome, Firefox, Safari, Edge, and Node.js!</p><p>The WebAssembly specification details two file formats, a binary format called a WebAssembly Module with a <code>.wasm </code>extension and corresponding text representation called WebAssembly Text format with a <code>.wat</code> extension.</p><h2 id="key-concepts" tabindex="-1">Key Concepts <a class="header-anchor" href="#key-concepts" aria-label="Permalink to “Key Concepts”">​</a></h2><ul><li>Module - A compiled WebAssembly binary, ie a <code>.wasm</code> file.</li><li>Memory - A resizable ArrayBuffer.</li><li>Table - A resizable typed array of references not stored in Memory.</li><li>Instance - An instantiation of a Module with its Memory, Table, and variables.</li></ul><p>In order to use WebAssembly, you need a <code>.wasm </code>binary file and a set of APIs to communicate with WebAssembly. Node.js provides the necessary APIs via the global <code>WebAssembly</code> object.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebAssembly)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Object [WebAssembly] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  compile: [Function: compile],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  validate: [Function: validate],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  instantiate: [Function: instantiate]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="generating-webassembly-modules" tabindex="-1">Generating WebAssembly Modules <a class="header-anchor" href="#generating-webassembly-modules" aria-label="Permalink to “Generating WebAssembly Modules”">​</a></h2><p>There are multiple methods available to generate WebAssembly binary files including:</p><ul><li>Writing WebAssembly (<code>.wat</code>) by hand and converting to binary format using tools such as <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a>.</li><li>Using <a href="https://github.com/emscripten-core/emscripten" target="_blank" rel="noreferrer">emscripten</a> with a C/C++ application</li><li>Using <a href="https://github.com/rustwasm/wasm-pack" target="_blank" rel="noreferrer">wasm-pack</a> with a Rust application</li><li>Using <a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noreferrer">AssemblyScript</a> if you prefer a TypeScript-like experience</li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong>Some of these tools generate not only the binary file, but the JavaScript &quot;glue&quot; code and corresponding HTML files to run in the browser.</strong></p></div><h2 id="how-to-use-it" tabindex="-1">How to use it <a class="header-anchor" href="#how-to-use-it" aria-label="Permalink to “How to use it”">​</a></h2><p>Once you have a WebAssembly module, you can use the Node.js <code>WebAssembly</code> object to instantiate it.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/add.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasmBuffer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wasmModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Exported function live under instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmModule.instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Outputs: 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="interacting-with-the-os" tabindex="-1">Interacting with the OS <a class="header-anchor" href="#interacting-with-the-os" aria-label="Permalink to “Interacting with the OS”">​</a></h2><p>WebAssembly modules cannot directly access OS functionality on its own. A third-party tool <a href="https://github.com/bytecodealliance/wasmtime" target="_blank" rel="noreferrer">Wasmtime</a> can be used to access this functionality. <code>Wasmtime</code> utilizes the <a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a> API to access the OS functionality.</p><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to “Resources”">​</a></h2><ul><li><a href="https://webassembly.org/" target="_blank" rel="noreferrer">General WebAssembly Information</a></li><li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noreferrer">MDN Docs</a></li><li><a href="https://webassembly.github.io/spec/core/text/index.html" target="_blank" rel="noreferrer">Write WebAssembly by hand</a></li></ul>`,18)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};