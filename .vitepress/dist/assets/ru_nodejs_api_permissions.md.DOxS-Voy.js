import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"API разрешений Node.js","description":"Документация API разрешений Node.js описывает, как управлять и контролировать разрешения для различных операций в приложениях Node.js, обеспечивая безопасный и контролируемый доступ к системным ресурсам.","frontmatter":{"title":"API разрешений Node.js","description":"Документация API разрешений Node.js описывает, как управлять и контролировать разрешения для различных операций в приложениях Node.js, обеспечивая безопасный и контролируемый доступ к системным ресурсам.","head":[["meta",{"name":"og:title","content":"API разрешений Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Документация API разрешений Node.js описывает, как управлять и контролировать разрешения для различных операций в приложениях Node.js, обеспечивая безопасный и контролируемый доступ к системным ресурсам."}],["meta",{"name":"twitter:title","content":"API разрешений Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Документация API разрешений Node.js описывает, как управлять и контролировать разрешения для различных операций в приложениях Node.js, обеспечивая безопасный и контролируемый доступ к системным ресурсам."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/api/permissions"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/api/permissions"}]]},"headers":[],"relativePath":"ru/nodejs/api/permissions.md","filePath":"ru/nodejs/api/permissions.md","lastUpdated":1749464498000}`),a={name:`ru/nodejs/api/permissions.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="permissions" tabindex="-1">Разрешения <a class="header-anchor" href="#permissions" aria-label="Permalink to “Разрешения”">​</a></h1><p>Разрешения можно использовать для контроля доступа процесса Node.js к системным ресурсам или действий, которые процесс может выполнять с этими ресурсами.</p><ul><li><a href="/ru/nodejs/api/permissions#process-based-permissions">Разрешения на основе процесса</a> контролируют доступ процесса Node.js к ресурсам. Доступ к ресурсу может быть полностью разрешен или запрещен, или действия, связанные с ним, могут контролироваться. Например, чтение файлов может быть разрешено при запрете записи. Эта функция не защищает от вредоносного кода. Согласно <a href="https://github.com/nodejs/node/blob/main/SECURITY.md" target="_blank" rel="noreferrer">Политике безопасности</a> Node.js, Node.js доверяет любому коду, который ему предлагается запустить.</li></ul><p>Модель разрешений реализует подход &quot;ремня безопасности&quot;, который предотвращает непреднамеренное изменение файлов доверенным кодом или использование ресурсов, доступ к которым не был явно предоставлен. Она не предоставляет гарантий безопасности при наличии вредоносного кода. Вредоносный код может обойти модель разрешений и выполнить произвольный код без ограничений, налагаемых моделью разрешений.</p><p>Если вы обнаружите потенциальную уязвимость безопасности, обратитесь к нашей <a href="https://github.com/nodejs/node/blob/main/SECURITY.md" target="_blank" rel="noreferrer">Политике безопасности</a>.</p><h2 id="process-based-permissions" tabindex="-1">Разрешения на основе процесса <a class="header-anchor" href="#process-based-permissions" aria-label="Permalink to “Разрешения на основе процесса”">​</a></h2><h3 id="permission-model" tabindex="-1">Модель разрешений <a class="header-anchor" href="#permission-model" aria-label="Permalink to “Модель разрешений”">​</a></h3><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/ru/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 2</a> - Стабильно.</p></div><p>Модель разрешений Node.js - это механизм ограничения доступа к определенным ресурсам во время выполнения. API доступен за флагом <a href="/ru/nodejs/api/cli#permission"><code>--permission</code></a>, который, если он включен, ограничит доступ ко всем доступным разрешениям.</p><p>Доступные разрешения документированы флагом <a href="/ru/nodejs/api/cli#permission"><code>--permission</code></a>.</p><p>При запуске Node.js с <code>--permission</code> возможность доступа к файловой системе через модуль <code>fs</code>, порождать процессы, использовать <code>node:worker_threads</code>, использовать собственные дополнения, использовать WASI и включать инспектор времени выполнения будет ограничена.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permission</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Access</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> has</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restricted</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:internal/main/run_main_module:23:47</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  code:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_ACCESS_DENIED&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  permission:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;FileSystemRead&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resource:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/home/user/index.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Разрешение доступа к порождению процесса и созданию рабочих потоков можно выполнить с помощью <a href="/ru/nodejs/api/cli#allow-child-process"><code>--allow-child-process</code></a> и <a href="/ru/nodejs/api/cli#allow-worker"><code>--allow-worker</code></a> соответственно.</p><p>Чтобы разрешить собственные дополнения при использовании модели разрешений, используйте флаг <a href="/ru/nodejs/api/cli#allow-addons"><code>--allow-addons</code></a>. Для WASI используйте флаг <a href="/ru/nodejs/api/cli#allow-wasi"><code>--allow-wasi</code></a>.</p><h4 id="runtime-api" tabindex="-1">Runtime API <a class="header-anchor" href="#runtime-api" aria-label="Permalink to “Runtime API”">​</a></h4><p>При включении модели разрешений с помощью флага <a href="/ru/nodejs/api/cli#permission"><code>--permission</code></a> в объект <code>process</code> добавляется новое свойство <code>permission</code>. Это свойство содержит одну функцию:</p><h5 id="permissionhasscope-reference" tabindex="-1"><code>permission.has(scope[, reference])</code> <a class="header-anchor" href="#permissionhasscope-reference" aria-label="Permalink to “permission.has(scope[, reference])”">​</a></h5><p>API вызов для проверки разрешений во время выполнения (<a href="/ru/nodejs/api/process#processpermissionhasscope-reference"><code>permission.has()</code></a>)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.permission.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.write&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.permission.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.write&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/home/rafaelgss/protected-folder&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.permission.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.read&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.permission.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.read&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/home/rafaelgss/protected-folder&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="file-system-permissions" tabindex="-1">File System Permissions <a class="header-anchor" href="#file-system-permissions" aria-label="Permalink to “File System Permissions”">​</a></h4><p>Модель разрешений по умолчанию ограничивает доступ к файловой системе через модуль <code>node:fs</code>. Она не гарантирует, что пользователи не смогут получить доступ к файловой системе другими способами, например, через модуль <code>node:sqlite</code>.</p><p>Чтобы разрешить доступ к файловой системе, используйте флаги <a href="/ru/nodejs/api/cli#allow-fs-read"><code>--allow-fs-read</code></a> и <a href="/ru/nodejs/api/cli#allow-fs-write"><code>--allow-fs-write</code></a>:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permission</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-fs-read=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-fs-write=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Допустимые аргументы для обоих флагов:</p><ul><li><code>*</code> - Разрешить все операции <code>FileSystemRead</code> или <code>FileSystemWrite</code> соответственно.</li><li>Пути, разделенные запятыми (<code>,</code>), чтобы разрешить только соответствующие операции <code>FileSystemRead</code> или <code>FileSystemWrite</code> соответственно.</li></ul><p>Пример:</p><ul><li><code>--allow-fs-read=*</code> - Разрешит все операции <code>FileSystemRead</code>.</li><li><code>--allow-fs-write=*</code> - Разрешит все операции <code>FileSystemWrite</code>.</li><li><code>--allow-fs-write=/tmp/</code> - Разрешит доступ <code>FileSystemWrite</code> к папке <code>/tmp/</code>.</li><li><code>--allow-fs-read=/tmp/ --allow-fs-read=/home/.gitignore</code> - Разрешает доступ <code>FileSystemRead</code> к папке <code>/tmp/</code> <strong>и</strong> пути <code>/home/.gitignore</code>.</li></ul><p>Также поддерживаются подстановочные знаки:</p><ul><li><code>--allow-fs-read=/home/test*</code> разрешит доступ на чтение ко всему, что соответствует подстановочному знаку. Например: <code>/home/test/file1</code> или <code>/home/test2</code></li></ul><p>После передачи символа подстановочного знака (<code>*</code>) все последующие символы будут игнорироваться. Например: <code>/home/*.js</code> будет работать аналогично <code>/home/*</code>.</p><p>При инициализации модели разрешений она автоматически добавляет подстановочный знак (*), если указанный каталог существует. Например, если <code>/home/test/files</code> существует, он будет рассматриваться как <code>/home/test/files/*</code>. Однако, если каталог не существует, подстановочный знак не будет добавлен, и доступ будет ограничен <code>/home/test/files</code>. Если вы хотите разрешить доступ к папке, которая еще не существует, обязательно явно включите подстановочный знак: <code>/my-path/folder-do-not-exist/*</code>.</p><h4 id="permission-model-constraints" tabindex="-1">Ограничения модели разрешений <a class="header-anchor" href="#permission-model-constraints" aria-label="Permalink to “Ограничения модели разрешений”">​</a></h4><p>Перед использованием этой системы необходимо знать следующие ограничения:</p><ul><li><p>Модель не наследуется дочерним процессом узла или рабочим потоком.</p></li><li><p>При использовании модели разрешений следующие функции будут ограничены:</p><ul><li>Native modules</li><li>Child process</li><li>Worker Threads</li><li>Inspector protocol</li><li>File system access</li><li>WASI</li></ul></li><li><p>Модель разрешений инициализируется после настройки среды Node.js. Однако некоторые флаги, такие как <code>--env-file</code> или <code>--openssl-config</code>, предназначены для чтения файлов до инициализации среды. В результате такие флаги не подпадают под действие правил модели разрешений. То же самое относится и к флагам V8, которые можно установить во время выполнения через <code>v8.setFlagsFromString</code>.</p></li><li><p>OpenSSL engines нельзя запросить во время выполнения, когда включена модель разрешений, что влияет на встроенные модули crypto, https и tls.</p></li><li><p>Расширения, загружаемые во время выполнения, не могут быть загружены, когда включена модель разрешений, что влияет на модуль sqlite.</p></li><li><p>Использование существующих дескрипторов файлов через модуль <code>node:fs</code> обходит модель разрешений.</p></li></ul><h4 id="limitations-and-known-issues" tabindex="-1">Ограничения и известные проблемы <a class="header-anchor" href="#limitations-and-known-issues" aria-label="Permalink to “Ограничения и известные проблемы”">​</a></h4><ul><li>Символические ссылки будут отслеживаться даже в местоположения за пределами набора путей, к которым был предоставлен доступ. Относительные символические ссылки могут разрешить доступ к произвольным файлам и каталогам. При запуске приложений с включенной моделью разрешений необходимо убедиться, что никакие пути, к которым был предоставлен доступ, не содержат относительных символических ссылок.</li></ul>`,36)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};