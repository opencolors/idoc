import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js の開発環境と本番環境の違い","description":"Node.js の NODE_ENV の役割と開発環境および本番環境への影響について理解する。","frontmatter":{"title":"Node.js の開発環境と本番環境の違い","description":"Node.js の NODE_ENV の役割と開発環境および本番環境への影響について理解する。","head":[["meta",{"name":"og:title","content":"Node.js の開発環境と本番環境の違い | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js の NODE_ENV の役割と開発環境および本番環境への影響について理解する。"}],["meta",{"name":"twitter:title","content":"Node.js の開発環境と本番環境の違い | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js の NODE_ENV の役割と開発環境および本番環境への影響について理解する。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/guide/the-difference-between-development-and-production"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/guide/the-difference-between-development-and-production"}]]},"headers":[],"relativePath":"ja/nodejs/guide/the-difference-between-development-and-production.md","filePath":"ja/nodejs/guide/the-difference-between-development-and-production.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/guide/the-difference-between-development-and-production.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js、開発環境と本番環境の違い" tabindex="-1">Node.js、開発環境と本番環境の違い <a class="header-anchor" href="#node-js、開発環境と本番環境の違い" aria-label="Permalink to “Node.js、開発環境と本番環境の違い”">​</a></h1><p><code>Node.jsでは、開発環境と本番環境に違いはありません</code>。つまり、Node.jsを本番構成で動作させるために適用する必要がある特定の設定はありません。ただし、npmレジストリの一部のライブラリは、<code>NODE_ENV</code>変数を使用することを認識し、デフォルトで<code>development</code>設定になります。Node.jsを実行するときは、常に<code>NODE_ENV=production</code>を設定してください。</p><p>アプリケーションを構成する一般的な方法として、<a href="https://12factor.net" target="_blank" rel="noreferrer">12 Factor App</a>の原則があります。</p><h2 id="expressにおけるnode-env" tabindex="-1">ExpressにおけるNODE_ENV <a class="header-anchor" href="#expressにおけるnode-env" aria-label="Permalink to “ExpressにおけるNODE_ENV”">​</a></h2><p>非常に人気のある<a href="https://expressjs.com" target="_blank" rel="noreferrer">express</a>フレームワークでは、NODE_ENVをproductionに設定すると、一般的に次のことが保証されます。</p><ul><li>ロギングは最小限の必須レベルに抑えられます</li><li>パフォーマンスを最適化するために、より多くのキャッシュレベルが実行されます</li></ul><p>これは通常、シェルで次のコマンドを実行することによって行われます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">production</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ただし、システム再起動の場合に設定が保持されないため、シェル構成ファイル（例：Bashシェルの場合は<code>.bash_profile</code>）に記述することをお勧めします。</p><p>環境変数をアプリケーションの初期化コマンドに付加することで適用することもできます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>たとえば、Expressアプリでは、これを使用して環境ごとに異なるエラーハンドラーを設定できます。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ dumpExceptions: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, showStack: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>たとえば、<a href="https://expressjs.com" target="_blank" rel="noreferrer">Express.js</a>で使用されるテンプレートライブラリである<a href="https://pugjs.org" target="_blank" rel="noreferrer">Pug</a>は、<code>NODE_ENV</code>が<code>production</code>に設定されていない場合、デバッグモードでコンパイルされます。Expressビューは、開発モードではリクエストごとにコンパイルされますが、本番環境ではキャッシュされます。他にも多くの例があります。</p><p><code>この環境変数は、外部ライブラリで広く使用されている慣例ですが、Node.js自体では使用されていません。</code></p><h2 id="なぜnode-envはアンチパターンと見なされるのか" tabindex="-1">なぜNODE_ENVはアンチパターンと見なされるのか？ <a class="header-anchor" href="#なぜnode-envはアンチパターンと見なされるのか" aria-label="Permalink to “なぜNODE_ENVはアンチパターンと見なされるのか？”">​</a></h2><p>環境とは、エンジニアがソフトウェア製品を構築、テスト、デプロイ、および管理できるデジタルプラットフォームまたはシステムです。通常、アプリケーションが実行される環境には、次の4つの段階または種類があります。</p><ul><li>開発</li><li>ステージング</li><li>本番</li><li>テスト</li></ul><p><code>NODE_ENV</code>の根本的な問題は、開発者が最適化とソフトウェアの動作を実行中の環境と組み合わせていることに起因します。その結果、次のようなコードになります。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;staging&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;testing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>これは無害に見えるかもしれませんが、本番環境とステージング環境を異なるものにし、信頼性の高いテストを不可能にします。たとえば、テストと、したがって製品の機能は、<code>NODE_ENV</code>が<code>development</code>に設定されている場合は合格する可能性がありますが、<code>NODE_ENV</code>を<code>production</code>に設定すると失敗する可能性があります。したがって、<code>NODE_ENV</code>を<code>production</code>以外に設定することはアンチパターンと見なされます。</p>`,21)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};