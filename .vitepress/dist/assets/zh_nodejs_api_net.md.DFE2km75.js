import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 文档 - 网络","description":"Node.js 中的 'net' 模块提供了一个异步网络 API，用于创建基于流的 TCP 或 IPC 服务器和客户端。它包括创建连接、服务器以及处理套接字操作的方法。","frontmatter":{"title":"Node.js 文档 - 网络","description":"Node.js 中的 'net' 模块提供了一个异步网络 API，用于创建基于流的 TCP 或 IPC 服务器和客户端。它包括创建连接、服务器以及处理套接字操作的方法。","head":[["meta",{"name":"og:title","content":"Node.js 文档 - 网络 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js 中的 'net' 模块提供了一个异步网络 API，用于创建基于流的 TCP 或 IPC 服务器和客户端。它包括创建连接、服务器以及处理套接字操作的方法。"}],["meta",{"name":"twitter:title","content":"Node.js 文档 - 网络 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js 中的 'net' 模块提供了一个异步网络 API，用于创建基于流的 TCP 或 IPC 服务器和客户端。它包括创建连接、服务器以及处理套接字操作的方法。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/net"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/net"}]]},"headers":[],"relativePath":"zh/nodejs/api/net.md","filePath":"zh/nodejs/api/net.md","lastUpdated":null}`),a={name:`zh/nodejs/api/net.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="net" tabindex="-1">Net <a class="header-anchor" href="#net" aria-label="Permalink to “Net”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[稳定度: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定</p></div><p><strong>源码:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/net.js" target="_blank" rel="noreferrer">lib/net.js</a></p><p><code>node:net</code> 模块提供了一个异步网络 API，用于创建基于流的 TCP 或 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 服务器（<a href="/zh/nodejs/api/net#netcreateserveroptions-connectionlistener"><code>net.createServer()</code></a>）和客户端（<a href="/zh/nodejs/api/net#netcreateconnection"><code>net.createConnection()</code></a>）。</p><p>可以通过以下方式访问它：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-17" id="tab-18" checked><label data-title="ESM" for="tab-18">ESM</label><input type="radio" name="group-17" id="tab-19"><label data-title="CJS" for="tab-19">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> net</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><h2 id="ipc-support" tabindex="-1">IPC 支持 <a class="header-anchor" href="#ipc-support" aria-label="Permalink to “IPC 支持”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.8.0</td><td>支持绑定到抽象 Unix 域套接字路径，例如 <code>\\0abstract</code>。 我们可以为 Node.js <code>\\&lt; v20.4.0</code> 绑定 &#39;\\0&#39;。</td></tr></tbody></table></div><p><code>node:net</code> 模块支持 Windows 上使用命名管道的 IPC，以及其他操作系统上使用 Unix 域套接字的 IPC。</p><h3 id="identifying-paths-for-ipc-connections" tabindex="-1">识别 IPC 连接的路径 <a class="header-anchor" href="#identifying-paths-for-ipc-connections" aria-label="Permalink to “识别 IPC 连接的路径”">​</a></h3><p><a href="/zh/nodejs/api/net#netconnect"><code>net.connect()</code></a>、<a href="/zh/nodejs/api/net#netcreateconnection"><code>net.createConnection()</code></a>、<a href="/zh/nodejs/api/net#serverlisten"><code>server.listen()</code></a> 和 <a href="/zh/nodejs/api/net#socketconnect"><code>socket.connect()</code></a> 接受一个 <code>path</code> 参数来标识 IPC 端点。</p><p>在 Unix 上，本地域也称为 Unix 域。 路径是文件系统路径名。 当路径名的长度大于 <code>sizeof(sockaddr_un.sun_path)</code> 的长度时，它将抛出一个错误。 典型值在 Linux 上是 107 字节，在 macOS 上是 103 字节。 如果 Node.js API 抽象创建了 Unix 域套接字，它也会取消链接 Unix 域套接字。 例如，<a href="/zh/nodejs/api/net#netcreateserveroptions-connectionlistener"><code>net.createServer()</code></a> 可能会创建一个 Unix 域套接字，并且 <a href="/zh/nodejs/api/net#serverclosecallback"><code>server.close()</code></a> 将取消链接它。 但是，如果用户在这些抽象之外创建了 Unix 域套接字，则用户需要将其删除。 当 Node.js API 创建一个 Unix 域套接字但程序随后崩溃时，情况也是如此。 简而言之，Unix 域套接字将在文件系统中可见，并将持续存在直到取消链接。 在 Linux 上，可以通过在路径开头添加 <code>\\0</code> 来使用 Unix 抽象套接字，例如 <code>\\0abstract</code>。 Unix 抽象套接字的路径在文件系统中不可见，并且当所有打开的对套接字的引用都关闭时，它将自动消失。</p><p>在 Windows 上，本地域是使用命名管道实现的。 该路径<em>必须</em>引用 <code>\\\\?\\pipe\\</code> 或 <code>\\\\.\\pipe\\</code> 中的条目。 允许使用任何字符，但后者可能会对管道名称进行一些处理，例如解析 <code>..</code> 序列。 尽管它看起来可能是这样，但管道命名空间是扁平的。 管道将<em>不会持久存在</em>。 当对它们的最后一个引用关闭时，它们将被删除。 与 Unix 域套接字不同，Windows 将在拥有进程退出时关闭并删除管道。</p><p>JavaScript 字符串转义要求使用额外的反斜杠转义来指定路径，例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pipe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myctl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="class-netblocklist" tabindex="-1">类：<code>net.BlockList</code> <a class="header-anchor" href="#class-netblocklist" aria-label="Permalink to “类：net.BlockList”">​</a></h2><p><strong>加入于: v15.0.0, v14.18.0</strong></p><p><code>BlockList</code> 对象可以与某些网络 API 一起使用，以指定禁用对特定 IP 地址、IP 范围或 IP 子网的入站或出站访问的规则。</p><h3 id="blocklistaddaddressaddress-type" tabindex="-1"><code>blockList.addAddress(address[, type])</code> <a class="header-anchor" href="#blocklistaddaddressaddress-type" aria-label="Permalink to “blockList.addAddress(address[, type])”">​</a></h3><p><strong>加入于: v15.0.0, v14.18.0</strong></p><ul><li><code>address</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/net#class-netsocketaddress">&lt;net.SocketAddress&gt;</a> 一个 IPv4 或 IPv6 地址。</li><li><code>type</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;ipv4&#39;</code> 或 <code>&#39;ipv6&#39;</code>。<strong>默认:</strong> <code>&#39;ipv4&#39;</code>。</li></ul><p>添加一条规则以阻止给定的 IP 地址。</p><h3 id="blocklistaddrangestart-end-type" tabindex="-1"><code>blockList.addRange(start, end[, type])</code> <a class="header-anchor" href="#blocklistaddrangestart-end-type" aria-label="Permalink to “blockList.addRange(start, end[, type])”">​</a></h3><p><strong>加入于: v15.0.0, v14.18.0</strong></p><ul><li><code>start</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/net#class-netsocketaddress">&lt;net.SocketAddress&gt;</a> 范围内的起始 IPv4 或 IPv6 地址。</li><li><code>end</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/net#class-netsocketaddress">&lt;net.SocketAddress&gt;</a> 范围内的结束 IPv4 或 IPv6 地址。</li><li><code>type</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;ipv4&#39;</code> 或 <code>&#39;ipv6&#39;</code>。<strong>默认:</strong> <code>&#39;ipv4&#39;</code>。</li></ul><p>添加一条规则以阻止从 <code>start</code>（包括）到 <code>end</code>（包括）的 IP 地址范围。</p><h3 id="blocklistaddsubnetnet-prefix-type" tabindex="-1"><code>blockList.addSubnet(net, prefix[, type])</code> <a class="header-anchor" href="#blocklistaddsubnetnet-prefix-type" aria-label="Permalink to “blockList.addSubnet(net, prefix[, type])”">​</a></h3><p><strong>加入于: v15.0.0, v14.18.0</strong></p><ul><li><code>net</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/net#class-netsocketaddress">&lt;net.SocketAddress&gt;</a> 网络 IPv4 或 IPv6 地址。</li><li><code>prefix</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> CIDR 前缀位数。对于 IPv4，该值必须介于 <code>0</code> 和 <code>32</code> 之间。对于 IPv6，该值必须介于 <code>0</code> 和 <code>128</code> 之间。</li><li><code>type</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;ipv4&#39;</code> 或 <code>&#39;ipv6&#39;</code>。<strong>默认:</strong> <code>&#39;ipv4&#39;</code>。</li></ul><p>添加一条规则以阻止指定为子网掩码的 IP 地址范围。</p><h3 id="blocklistcheckaddress-type" tabindex="-1"><code>blockList.check(address[, type])</code> <a class="header-anchor" href="#blocklistcheckaddress-type" aria-label="Permalink to “blockList.check(address[, type])”">​</a></h3><p><strong>新增于: v15.0.0, v14.18.0</strong></p><ul><li><code>address</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/net#class-netsocketaddress">&lt;net.SocketAddress&gt;</a> 要检查的 IP 地址</li><li><code>type</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;ipv4&#39;</code> 或 <code>&#39;ipv6&#39;</code>。 <strong>默认:</strong> <code>&#39;ipv4&#39;</code>。</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果给定的 IP 地址匹配添加到 <code>BlockList</code> 的任何规则，则返回 <code>true</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blockList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BlockList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">blockList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123.123.123.123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">blockList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10.0.0.10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">blockList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addSubnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;8592:757c:efae:4e45::&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ipv6&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blockList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123.123.123.123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印: true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blockList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10.0.0.3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印: true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blockList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;222.111.111.222&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印: false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// IPv4 地址的 IPv6 表示法有效：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blockList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;::ffff:7b7b:7b7b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ipv6&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印: true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blockList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;::ffff:123.123.123.123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ipv6&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印: true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="blocklistrules" tabindex="-1"><code>blockList.rules</code> <a class="header-anchor" href="#blocklistrules" aria-label="Permalink to “blockList.rules”">​</a></h3><p><strong>新增于: v15.0.0, v14.18.0</strong></p><ul><li>类型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>添加到黑名单的规则列表。</p><h3 id="blocklistisblocklistvalue" tabindex="-1"><code>BlockList.isBlockList(value)</code> <a class="header-anchor" href="#blocklistisblocklistvalue" aria-label="Permalink to “BlockList.isBlockList(value)”">​</a></h3><p><strong>新增于: v23.4.0</strong></p><ul><li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a> 任何 JS 值</li><li>如果 <code>value</code> 是一个 <code>net.BlockList</code>，则返回 <code>true</code>。</li></ul><h2 id="class-netsocketaddress" tabindex="-1">类: <code>net.SocketAddress</code> <a class="header-anchor" href="#class-netsocketaddress" aria-label="Permalink to “类: net.SocketAddress”">​</a></h2><p><strong>新增于: v15.14.0, v14.18.0</strong></p><h3 id="new-netsocketaddressoptions" tabindex="-1"><code>new net.SocketAddress([options])</code> <a class="header-anchor" href="#new-netsocketaddressoptions" aria-label="Permalink to “new net.SocketAddress([options])”">​</a></h3><p><strong>新增于: v15.14.0, v14.18.0</strong></p><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>address</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 网络地址，可以是 IPv4 或 IPv6 字符串。 <strong>默认</strong>: 如果 <code>family</code> 是 <code>&#39;ipv4&#39;</code>，则为 <code>&#39;127.0.0.1&#39;</code>；如果 <code>family</code> 是 <code>&#39;ipv6&#39;</code>，则为 <code>&#39;::&#39;</code>。</li><li><code>family</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;ipv4&#39;</code> 或 <code>&#39;ipv6&#39;</code> 之一。 <strong>默认</strong>: <code>&#39;ipv4&#39;</code>。</li><li><code>flowlabel</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> IPv6 流标签，仅当 <code>family</code> 为 <code>&#39;ipv6&#39;</code> 时使用。</li><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> IP 端口。</li></ul></li></ul><h3 id="socketaddressaddress" tabindex="-1"><code>socketaddress.address</code> <a class="header-anchor" href="#socketaddressaddress" aria-label="Permalink to “socketaddress.address”">​</a></h3><p><strong>新增于: v15.14.0, v14.18.0</strong></p><ul><li>类型 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><h3 id="socketaddressfamily" tabindex="-1"><code>socketaddress.family</code> <a class="header-anchor" href="#socketaddressfamily" aria-label="Permalink to “socketaddress.family”">​</a></h3><p><strong>新增于: v15.14.0, v14.18.0</strong></p><ul><li>类型 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;ipv4&#39;</code> 或 <code>&#39;ipv6&#39;</code>。</li></ul><h3 id="socketaddressflowlabel" tabindex="-1"><code>socketaddress.flowlabel</code> <a class="header-anchor" href="#socketaddressflowlabel" aria-label="Permalink to “socketaddress.flowlabel”">​</a></h3><p><strong>新增于: v15.14.0, v14.18.0</strong></p><ul><li>类型 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><h3 id="socketaddressport" tabindex="-1"><code>socketaddress.port</code> <a class="header-anchor" href="#socketaddressport" aria-label="Permalink to “socketaddress.port”">​</a></h3><p><strong>新增于: v15.14.0, v14.18.0</strong></p><ul><li>类型 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><h3 id="socketaddressparseinput" tabindex="-1"><code>SocketAddress.parse(input)</code> <a class="header-anchor" href="#socketaddressparseinput" aria-label="Permalink to “SocketAddress.parse(input)”">​</a></h3><p><strong>新增于: v23.4.0</strong></p><ul><li><code>input</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 一个包含 IP 地址和可选端口的输入字符串，例如 <code>123.1.2.3:1234</code> 或 <code>[1::1]:1234</code>。</li><li>返回: <a href="/zh/nodejs/api/net#class-netsocketaddress">&lt;net.SocketAddress&gt;</a> 如果解析成功，则返回 <code>SocketAddress</code>。 否则返回 <code>undefined</code>。</li></ul><h2 id="class-netserver" tabindex="-1">类: <code>net.Server</code> <a class="header-anchor" href="#class-netserver" aria-label="Permalink to “类: net.Server”">​</a></h2><p><strong>新增于: v0.1.90</strong></p><ul><li>继承自: <a href="/zh/nodejs/api/events#class-eventemitter">&lt;EventEmitter&gt;</a></li></ul><p>此类用于创建 TCP 或 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 服务器。</p><h3 id="new-netserveroptions-connectionlistener" tabindex="-1"><code>new net.Server([options][, connectionListener])</code> <a class="header-anchor" href="#new-netserveroptions-connectionlistener" aria-label="Permalink to “new net.Server([options][, connectionListener])”">​</a></h3><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 参见 <a href="/zh/nodejs/api/net#netcreateserveroptions-connectionlistener"><code>net.createServer([options][, connectionListener])</code></a>。</li><li><code>connectionListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 自动设置为 <a href="/zh/nodejs/api/net#event-connection"><code>&#39;connection&#39;</code></a> 事件的监听器。</li><li>返回: <a href="/zh/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a></li></ul><p><code>net.Server</code> 是一个带有以下事件的 <a href="/zh/nodejs/api/events#class-eventemitter"><code>EventEmitter</code></a>：</p><h3 id="event-close" tabindex="-1">事件: <code>&#39;close&#39;</code> <a class="header-anchor" href="#event-close" aria-label="Permalink to “事件: &#39;close&#39;”">​</a></h3><p><strong>新增于: v0.5.0</strong></p><p>当服务器关闭时触发。 如果存在连接，则直到所有连接都结束后才会触发此事件。</p><h3 id="event-connection" tabindex="-1">事件: <code>&#39;connection&#39;</code> <a class="header-anchor" href="#event-connection" aria-label="Permalink to “事件: &#39;connection&#39;”">​</a></h3><p><strong>加入于: v0.1.90</strong></p><ul><li><a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 连接对象</li></ul><p>当建立新连接时触发。<code>socket</code> 是 <code>net.Socket</code> 的一个实例。</p><h3 id="event-error" tabindex="-1">事件: <code>&#39;error&#39;</code> <a class="header-anchor" href="#event-error" aria-label="Permalink to “事件: &#39;error&#39;”">​</a></h3><p><strong>加入于: v0.1.90</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a></li></ul><p>当发生错误时触发。与 <a href="/zh/nodejs/api/net#class-netsocket"><code>net.Socket</code></a> 不同，如果没有手动调用 <a href="/zh/nodejs/api/net#serverclosecallback"><code>server.close()</code></a>，则 <strong>不会</strong>在此事件之后立即触发 <a href="/zh/nodejs/api/net#event-close"><code>&#39;close&#39;</code></a> 事件。 请参见关于 <a href="/zh/nodejs/api/net#serverlisten"><code>server.listen()</code></a> 的讨论中的示例。</p><h3 id="event-listening" tabindex="-1">事件: <code>&#39;listening&#39;</code> <a class="header-anchor" href="#event-listening" aria-label="Permalink to “事件: &#39;listening&#39;”">​</a></h3><p><strong>加入于: v0.1.90</strong></p><p>在调用 <a href="/zh/nodejs/api/net#serverlisten"><code>server.listen()</code></a> 之后服务器已绑定时触发。</p><h3 id="event-drop" tabindex="-1">事件: <code>&#39;drop&#39;</code> <a class="header-anchor" href="#event-drop" aria-label="Permalink to “事件: &#39;drop&#39;”">​</a></h3><p><strong>加入于: v18.6.0, v16.17.0</strong></p><p>当连接数达到 <code>server.maxConnections</code> 的阈值时，服务器将丢弃新连接并触发 <code>&#39;drop&#39;</code> 事件。 如果是 TCP 服务器，则参数如下，否则参数为 <code>undefined</code>。</p><ul><li><code>data</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 传递给事件监听器的参数。 <ul><li><code>localAddress</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 本地地址。</li><li><code>localPort</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 本地端口。</li><li><code>localFamily</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 本地族。</li><li><code>remoteAddress</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 远程地址。</li><li><code>remotePort</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 远程端口。</li><li><code>remoteFamily</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 远程 IP 族。 <code>&#39;IPv4&#39;</code> 或 <code>&#39;IPv6&#39;</code>。</li></ul></li></ul><h3 id="serveraddress" tabindex="-1"><code>server.address()</code> <a class="header-anchor" href="#serveraddress" aria-label="Permalink to “server.address()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v18.4.0</td><td><code>family</code> 属性现在返回字符串而不是数字。</td></tr><tr><td>v18.0.0</td><td><code>family</code> 属性现在返回数字而不是字符串。</td></tr><tr><td>v0.1.90</td><td>添加于: v0.1.90</td></tr></tbody></table></div><ul><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" target="_blank" rel="noreferrer">&lt;null&gt;</a></li></ul><p>返回绑定的 <code>address</code>，地址 <code>family</code> 名称，以及服务器的 <code>port</code>，由操作系统报告（当获取操作系统分配的地址时，可用于查找分配了哪个端口）: <code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code>。</p><p>对于监听管道或 Unix 域套接字的服务器，该名称作为字符串返回。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;goodbye</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在此处理错误。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取任意未使用的端口。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;opened server on&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在发出 <code>&#39;listening&#39;</code> 事件之前或调用 <code>server.close()</code> 之后，<code>server.address()</code> 返回 <code>null</code>。</p><h3 id="serverclosecallback" tabindex="-1"><code>server.close([callback])</code> <a class="header-anchor" href="#serverclosecallback" aria-label="Permalink to “server.close([callback])”">​</a></h3><p><strong>添加于: v0.1.90</strong></p><ul><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 服务器关闭时调用。</li><li>返回: <a href="/zh/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a></li></ul><p>停止服务器接受新的连接并保持现有连接。 此函数是异步的，当所有连接都结束并且服务器发出 <a href="/zh/nodejs/api/net#event-close"><code>&#39;close&#39;</code></a> 事件时，服务器最终关闭。 一旦发生 <code>&#39;close&#39;</code> 事件，将调用可选的 <code>callback</code>。 与该事件不同，如果服务器在关闭时未打开，则将使用 <code>Error</code> 作为其唯一参数调用它。</p><h3 id="serversymbolasyncdispose" tabindex="-1"><code>server[Symbol.asyncDispose]()</code> <a class="header-anchor" href="#serversymbolasyncdispose" aria-label="Permalink to “server[Symbol.asyncDispose]()”">​</a></h3><p><strong>添加于: v20.5.0, v18.18.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性的</p></div><p>调用 <a href="/zh/nodejs/api/net#serverclosecallback"><code>server.close()</code></a> 并返回一个 promise，该 promise 在服务器关闭时兑现。</p><h3 id="servergetconnectionscallback" tabindex="-1"><code>server.getConnections(callback)</code> <a class="header-anchor" href="#servergetconnectionscallback" aria-label="Permalink to “server.getConnections(callback)”">​</a></h3><p><strong>添加于: v0.9.7</strong></p><ul><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="/zh/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a></li></ul><p>异步获取服务器上的并发连接数。当套接字被发送到 fork 时有效。</p><p>回调应该接受两个参数 <code>err</code> 和 <code>count</code>。</p><h3 id="serverlisten" tabindex="-1"><code>server.listen()</code> <a class="header-anchor" href="#serverlisten" aria-label="Permalink to “server.listen()”">​</a></h3><p>启动一个服务器来监听连接。一个 <code>net.Server</code> 可以是一个 TCP 或一个 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 服务器，具体取决于它监听的内容。</p><p>可能的签名：</p><ul><li><a href="/zh/nodejs/api/net#serverlistenhandle-backlog-callback"><code>server.listen(handle[, backlog][, callback])</code></a></li><li><a href="/zh/nodejs/api/net#serverlistenoptions-callback"><code>server.listen(options[, callback])</code></a></li><li><a href="/zh/nodejs/api/net#serverlistenpath-backlog-callback"><code>server.listen(path[, backlog][, callback])</code></a> 用于 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 服务器</li><li><a href="/zh/nodejs/api/net#serverlistenport-host-backlog-callback"><code>server.listen([port[, host[, backlog]]][, callback])</code></a> 用于 TCP 服务器</li></ul><p>此函数是异步的。当服务器开始监听时，将发出 <a href="/zh/nodejs/api/net#event-listening"><code>&#39;listening&#39;</code></a> 事件。最后一个参数 <code>callback</code> 将作为 <a href="/zh/nodejs/api/net#event-listening"><code>&#39;listening&#39;</code></a> 事件的监听器添加。</p><p>所有 <code>listen()</code> 方法都可以采用 <code>backlog</code> 参数来指定待处理连接队列的最大长度。实际长度将由操作系统通过 sysctl 设置（例如 Linux 上的 <code>tcp_max_syn_backlog</code> 和 <code>somaxconn</code>）确定。此参数的默认值为 511（不是 512）。</p><p>所有 <a href="/zh/nodejs/api/net#class-netsocket"><code>net.Socket</code></a> 都设置为 <code>SO_REUSEADDR</code>（有关详细信息，请参见 <a href="https://man7.org/linux/man-pages/man7/socket.7" target="_blank" rel="noreferrer"><code>socket(7)</code></a>）。</p><p>仅当第一次 <code>server.listen()</code> 调用期间发生错误或已调用 <code>server.close()</code> 时，才能再次调用 <code>server.listen()</code> 方法。 否则，将抛出 <code>ERR_SERVER_ALREADY_LISTEN</code> 错误。</p><p>监听时最常见的错误之一是 <code>EADDRINUSE</code>。当另一个服务器已经在请求的 <code>port</code>/<code>path</code>/<code>handle</code> 上监听时，会发生这种情况。 一种处理方法是在一定时间后重试：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;EADDRINUSE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Address in use, retrying...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="serverlistenhandle-backlog-callback" tabindex="-1"><code>server.listen(handle[, backlog][, callback])</code> <a class="header-anchor" href="#serverlistenhandle-backlog-callback" aria-label="Permalink to “server.listen(handle[, backlog][, callback])”">​</a></h4><p><strong>加入版本：v0.5.10</strong></p><ul><li><code>handle</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li><li><code>backlog</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <a href="/zh/nodejs/api/net#serverlisten"><code>server.listen()</code></a> 函数的通用参数</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="/zh/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a></li></ul><p>启动服务器监听给定 <code>handle</code> 上的连接，该 <code>handle</code> 已经绑定到端口、Unix 域套接字或 Windows 命名管道。</p><p><code>handle</code> 对象可以是服务器、套接字（任何具有底层 <code>_handle</code> 成员的对象）或具有 <code>fd</code> 成员的对象，该成员是有效的文件描述符。</p><p>Windows 上不支持监听文件描述符。</p><h4 id="serverlistenoptions-callback" tabindex="-1"><code>server.listen(options[, callback])</code> <a class="header-anchor" href="#serverlistenoptions-callback" aria-label="Permalink to “server.listen(options[, callback])”">​</a></h4><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.1.0</td><td>支持 <code>reusePort</code> 选项。</td></tr><tr><td>v15.6.0</td><td>添加了 AbortSignal 支持。</td></tr><tr><td>v11.4.0</td><td>支持 <code>ipv6Only</code> 选项。</td></tr><tr><td>v0.11.14</td><td>加入版本：v0.11.14</td></tr></tbody></table></div><ul><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 必需。 支持以下属性：</p><ul><li><code>backlog</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <a href="/zh/nodejs/api/net#serverlisten"><code>server.listen()</code></a> 函数的通用参数。</li><li><code>exclusive</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <strong>默认:</strong> <code>false</code></li><li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>ipv6Only</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 对于 TCP 服务器，将 <code>ipv6Only</code> 设置为 <code>true</code> 将禁用双栈支持，即绑定到主机 <code>::</code> 不会使 <code>0.0.0.0</code> 被绑定。 <strong>默认:</strong> <code>false</code>。</li><li><code>reusePort</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 对于 TCP 服务器，将 <code>reusePort</code> 设置为 <code>true</code> 允许同一主机上的多个套接字绑定到同一端口。 操作系统将传入的连接分配给监听套接字。 此选项仅在某些平台上可用，例如 Linux 3.9+、DragonFlyBSD 3.6+、FreeBSD 12.0+、Solaris 11.4 和 AIX 7.2.5+。 <strong>默认:</strong> <code>false</code>。</li><li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 如果指定了 <code>port</code>，则将被忽略。 请参阅 <a href="/zh/nodejs/api/net#identifying-paths-for-ipc-connections">识别 IPC 连接的路径</a>。</li><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>readableAll</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 对于 IPC 服务器，使管道对所有用户可读。 <strong>默认:</strong> <code>false</code>。</li><li><code>signal</code> <a href="/zh/nodejs/api/globals#class-abortsignal">&lt;AbortSignal&gt;</a> 可用于关闭监听服务器的 AbortSignal。</li><li><code>writableAll</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 对于 IPC 服务器，使管道对所有用户可写。 <strong>默认:</strong> <code>false</code>。</li></ul></li><li><p><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> functions.</p></li><li><p>返回: <a href="/zh/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a></p></li></ul><p>如果指定了 <code>port</code>，它的行为与 <a href="/zh/nodejs/api/net#serverlistenport-host-backlog-callback"><code>server.listen([port[, host[, backlog]]][, callback])</code></a> 相同。 否则，如果指定了 <code>path</code>，它的行为与 <a href="/zh/nodejs/api/net#serverlistenpath-backlog-callback"><code>server.listen(path[, backlog][, callback])</code></a> 相同。 如果两者都未指定，则会抛出错误。</p><p>如果 <code>exclusive</code> 为 <code>false</code>（默认），则集群工作进程将使用相同的底层句柄，从而允许共享连接处理职责。 当 <code>exclusive</code> 为 <code>true</code> 时，不共享句柄，并且尝试共享端口会导致错误。 下面显示了一个监听独占端口的示例。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  exclusive: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当 <code>exclusive</code> 为 <code>true</code> 并且共享底层句柄时，多个工作进程可能会使用不同的积压查询句柄。 在这种情况下，将使用传递给主进程的第一个 <code>backlog</code>。</p><p>以 root 身份启动 IPC 服务器可能会导致非特权用户无法访问服务器路径。 使用 <code>readableAll</code> 和 <code>writableAll</code> 将使服务器可供所有用户访问。</p><p>如果启用了 <code>signal</code> 选项，则在相应的 <code>AbortController</code> 上调用 <code>.abort()</code> 类似于在服务器上调用 <code>.close()</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> controller</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbortController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  signal: controller.signal,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 稍后，当您要关闭服务器时。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">controller.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="serverlistenpath-backlog-callback" tabindex="-1"><code>server.listen(path[, backlog][, callback])</code> <a class="header-anchor" href="#serverlistenpath-backlog-callback" aria-label="Permalink to “server.listen(path[, backlog][, callback])”">​</a></h4><p><strong>新增于: v0.1.90</strong></p><ul><li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 服务器应监听的路径。参见 <a href="/zh/nodejs/api/net#identifying-paths-for-ipc-connections">识别 IPC 连接的路径</a>。</li><li><code>backlog</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <a href="/zh/nodejs/api/net#serverlisten"><code>server.listen()</code></a> 函数的常用参数。</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a>。</li><li>返回: <a href="/zh/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a></li></ul><p>启动一个 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 服务器，监听给定 <code>path</code> 上的连接。</p><h4 id="serverlistenport-host-backlog-callback" tabindex="-1"><code>server.listen([port[, host[, backlog]]][, callback])</code> <a class="header-anchor" href="#serverlistenport-host-backlog-callback" aria-label="Permalink to “server.listen([port[, host[, backlog]]][, callback])”">​</a></h4><p><strong>新增于: v0.1.90</strong></p><ul><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>backlog</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <a href="/zh/nodejs/api/net#serverlisten"><code>server.listen()</code></a> 函数的常用参数。</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a>。</li><li>返回: <a href="/zh/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a></li></ul><p>启动一个 TCP 服务器，监听给定 <code>port</code> 和 <code>host</code> 上的连接。</p><p>如果省略 <code>port</code> 或为 0，操作系统将分配一个任意未使用的端口，该端口可以在发出 <a href="/zh/nodejs/api/net#event-listening"><code>&#39;listening&#39;</code></a> 事件后使用 <code>server.address().port</code> 检索。</p><p>如果省略 <code>host</code>，则当 IPv6 可用时，服务器将接受 <a href="https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address" target="_blank" rel="noreferrer">未指定的 IPv6 地址</a> (<code>::</code>) 上的连接，否则接受 <a href="https://en.wikipedia.org/wiki/0.0.0.0" target="_blank" rel="noreferrer">未指定的 IPv4 地址</a> (<code>0.0.0.0</code>) 上的连接。</p><p>在大多数操作系统中，监听 <a href="https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address" target="_blank" rel="noreferrer">未指定的 IPv6 地址</a> (<code>::</code>) 可能会导致 <code>net.Server</code> 也监听 <a href="https://en.wikipedia.org/wiki/0.0.0.0" target="_blank" rel="noreferrer">未指定的 IPv4 地址</a> (<code>0.0.0.0</code>)。</p><h3 id="serverlistening" tabindex="-1"><code>server.listening</code> <a class="header-anchor" href="#serverlistening" aria-label="Permalink to “server.listening”">​</a></h3><p><strong>添加于: v5.7.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 表示服务器是否正在监听连接。</li></ul><h3 id="servermaxconnections" tabindex="-1"><code>server.maxConnections</code> <a class="header-anchor" href="#servermaxconnections" aria-label="Permalink to “server.maxConnections”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v21.0.0</td><td>将 <code>maxConnections</code> 设置为 <code>0</code> 将丢弃所有传入的连接。 之前，它被解释为 <code>Infinity</code>。</td></tr><tr><td>v0.2.0</td><td>添加于: v0.2.0</td></tr></tbody></table></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a></li></ul><p>当连接数达到 <code>server.maxConnections</code> 阈值时：</p><p>一旦 socket 被发送到带有 <a href="/zh/nodejs/api/child_process#child-processforkmodulepath-args-options"><code>child_process.fork()</code></a> 的子进程，就不建议使用此选项。</p><h3 id="serverdropmaxconnection" tabindex="-1"><code>server.dropMaxConnection</code> <a class="header-anchor" href="#serverdropmaxconnection" aria-label="Permalink to “server.dropMaxConnection”">​</a></h3><p><strong>添加于: v23.1.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>将此属性设置为 <code>true</code>，以便在连接数达到 [<code>server.maxConnections</code>][] 阈值时开始关闭连接。 此设置仅在集群模式下有效。</p><h3 id="serverref" tabindex="-1"><code>server.ref()</code> <a class="header-anchor" href="#serverref" aria-label="Permalink to “server.ref()”">​</a></h3><p><strong>添加于: v0.9.1</strong></p><ul><li>返回: <a href="/zh/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a></li></ul><p>与 <code>unref()</code> 相反，在一个先前 <code>unref</code> 过的服务器上调用 <code>ref()</code> 将 <em>不会</em> 让程序退出（如果它是剩余的唯一服务器）（默认行为）。 如果服务器已经 <code>ref</code> 过，再次调用 <code>ref()</code> 将不起作用。</p><h3 id="serverunref" tabindex="-1"><code>server.unref()</code> <a class="header-anchor" href="#serverunref" aria-label="Permalink to “server.unref()”">​</a></h3><p><strong>添加于: v0.9.1</strong></p><ul><li>返回: <a href="/zh/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a></li></ul><p>在一个服务器上调用 <code>unref()</code> 将允许程序退出，如果这是事件系统中唯一的活动服务器。 如果服务器已经 <code>unref</code> 过，再次调用 <code>unref()</code> 将不起作用。</p><h2 id="class-netsocket" tabindex="-1">类: <code>net.Socket</code> <a class="header-anchor" href="#class-netsocket" aria-label="Permalink to “类: net.Socket”">​</a></h2><p><strong>添加于: v0.3.4</strong></p><ul><li>继承自: <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>此类是 TCP socket 或流式 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 端点（在 Windows 上使用命名管道，否则使用 Unix 域 socket）的抽象。 它也是一个 <a href="/zh/nodejs/api/events#class-eventemitter"><code>EventEmitter</code></a>。</p><p><code>net.Socket</code> 可以由用户创建并直接用于与服务器交互。 例如，它由 <a href="/zh/nodejs/api/net#netcreateconnection"><code>net.createConnection()</code></a> 返回，因此用户可以使用它来与服务器通信。</p><p>它也可以由 Node.js 创建并在收到连接时传递给用户。 例如，它被传递给 <a href="/zh/nodejs/api/net#event-connection"><code>&#39;connection&#39;</code></a> 事件的监听器，该事件在 <a href="/zh/nodejs/api/net#class-netserver"><code>net.Server</code></a> 上发出，因此用户可以使用它来与客户端交互。</p><h3 id="new-netsocketoptions" tabindex="-1"><code>new net.Socket([options])</code> <a class="header-anchor" href="#new-netsocketoptions" aria-label="Permalink to “new net.Socket([options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.14.0</td><td>添加了 AbortSignal 支持。</td></tr><tr><td>v12.10.0</td><td>添加了 <code>onread</code> 选项。</td></tr><tr><td>v0.3.4</td><td>添加于：v0.3.4</td></tr></tbody></table></div><ul><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 可用选项如下：</p><ul><li><p><code>allowHalfOpen</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>false</code>，则当可读端结束时，套接字将自动结束可写端。 有关详细信息，请参阅 <a href="/zh/nodejs/api/net#netcreateserveroptions-connectionlistener"><code>net.createServer()</code></a> 和 <a href="/zh/nodejs/api/net#event-end"><code>&#39;end&#39;</code></a> 事件。 <strong>默认:</strong> <code>false</code>。</p></li><li><p><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 如果指定，则使用给定的文件描述符包装现有的套接字，否则将创建一个新的套接字。</p></li><li><p><code>onread</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 如果指定，则传入的数据存储在单个 <code>buffer</code> 中，并在数据到达套接字时传递给提供的 <code>callback</code>。 这将导致流式传输功能不提供任何数据。 套接字将像往常一样发出 <code>&#39;error&#39;</code>、<code>&#39;end&#39;</code> 和 <code>&#39;close&#39;</code> 等事件。 像 <code>pause()</code> 和 <code>resume()</code> 这样的方法也会按预期运行。</p></li><li><p><code>buffer</code> <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">&lt;Uint8Array&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 要用于存储传入数据的可重用内存块，或返回此类内存块的函数。</p></li><li><p><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 每次有传入数据块时都会调用此函数。 两个参数传递给它：写入 <code>buffer</code> 的字节数和对 <code>buffer</code> 的引用。 从此函数返回 <code>false</code> 以隐式 <code>pause()</code> 套接字。 此函数将在全局上下文中执行。</p></li><li><p><code>readable</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 当传递 <code>fd</code> 时允许在套接字上进行读取，否则将被忽略。 <strong>默认:</strong> <code>false</code>。</p></li><li><p><code>signal</code> <a href="/zh/nodejs/api/globals#class-abortsignal">&lt;AbortSignal&gt;</a> 可用于销毁套接字的 Abort 信号。</p></li><li><p><code>writable</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 当传递 <code>fd</code> 时允许在套接字上进行写入，否则将被忽略。 <strong>默认:</strong> <code>false</code>。</p></li></ul></li><li><p>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></p></li></ul><p>创建一个新的套接字对象。</p><p>新创建的套接字可以是 TCP 套接字或流式 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 端点，具体取决于它 <a href="/zh/nodejs/api/net#socketconnect"><code>connect()</code></a> 到什么。</p><h3 id="event-close_1" tabindex="-1">事件: <code>&#39;close&#39;</code> <a class="header-anchor" href="#event-close_1" aria-label="Permalink to “事件: &#39;close&#39;”">​</a></h3><p><strong>新增于: v0.1.90</strong></p><ul><li><code>hadError</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果套接字存在传输错误，则为 <code>true</code>。</li></ul><p>套接字完全关闭时触发一次。 参数 <code>hadError</code> 是一个布尔值，表示套接字是否由于传输错误而关闭。</p><h3 id="event-connect" tabindex="-1">事件: <code>&#39;connect&#39;</code> <a class="header-anchor" href="#event-connect" aria-label="Permalink to “事件: &#39;connect&#39;”">​</a></h3><p><strong>新增于: v0.1.90</strong></p><p>当成功建立套接字连接时触发。 参见 <a href="/zh/nodejs/api/net#netcreateconnection"><code>net.createConnection()</code></a>。</p><h3 id="event-connectionattempt" tabindex="-1">事件: <code>&#39;connectionAttempt&#39;</code> <a class="header-anchor" href="#event-connectionattempt" aria-label="Permalink to “事件: &#39;connectionAttempt&#39;”">​</a></h3><p><strong>新增于: v21.6.0, v20.12.0</strong></p><ul><li><code>ip</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 套接字尝试连接的 IP。</li><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 套接字尝试连接的端口。</li><li><code>family</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> IP 的族。 对于 IPv6，它可以是 <code>6</code>，对于 IPv4，它可以是 <code>4</code>。</li></ul><p>当启动新的连接尝试时触发。 如果在 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options)</code></a> 中启用了族自动选择算法，则可能会多次触发。</p><h3 id="event-connectionattemptfailed" tabindex="-1">事件: <code>&#39;connectionAttemptFailed&#39;</code> <a class="header-anchor" href="#event-connectionattemptfailed" aria-label="Permalink to “事件: &#39;connectionAttemptFailed&#39;”">​</a></h3><p><strong>新增于: v21.6.0, v20.12.0</strong></p><ul><li><code>ip</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 套接字尝试连接的 IP。</li><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 套接字尝试连接的端口。</li><li><code>family</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> IP 的族。 对于 IPv6，它可以是 <code>6</code>，对于 IPv4，它可以是 <code>4</code>。</li><li><code>error</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a> 与失败关联的错误。</li></ul><p>当连接尝试失败时触发。 如果在 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options)</code></a> 中启用了族自动选择算法，则可能会多次触发。</p><h3 id="event-connectionattempttimeout" tabindex="-1">事件：<code>&#39;connectionAttemptTimeout&#39;</code> <a class="header-anchor" href="#event-connectionattempttimeout" aria-label="Permalink to “事件：&#39;connectionAttemptTimeout&#39;”">​</a></h3><p><strong>新增于：v21.6.0，v20.12.0</strong></p><ul><li><code>ip</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 套接字尝试连接的 IP。</li><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 套接字尝试连接的端口。</li><li><code>family</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> IP 的族。 IPv6 为 <code>6</code>，IPv4 为 <code>4</code>。</li></ul><p>当连接尝试超时时触发。 仅当在 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options)</code></a> 中启用族自动选择算法时，才会触发此事件（并且可能会多次触发）。</p><h3 id="event-data" tabindex="-1">事件：<code>&#39;data&#39;</code> <a class="header-anchor" href="#event-data" aria-label="Permalink to “事件：&#39;data&#39;”">​</a></h3><p><strong>新增于：v0.1.90</strong></p><ul><li><a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>当接收到数据时触发。 参数 <code>data</code> 将是 <code>Buffer</code> 或 <code>String</code>。 数据的编码由 <a href="/zh/nodejs/api/net#socketsetencodingencoding"><code>socket.setEncoding()</code></a> 设置。</p><p>如果没有监听器，当 <code>Socket</code> 触发 <code>&#39;data&#39;</code> 事件时，数据将会丢失。</p><h3 id="event-drain" tabindex="-1">事件：<code>&#39;drain&#39;</code> <a class="header-anchor" href="#event-drain" aria-label="Permalink to “事件：&#39;drain&#39;”">​</a></h3><p><strong>新增于：v0.1.90</strong></p><p>当写入缓冲区为空时触发。 可用于限制上传。</p><p>另见：<code>socket.write()</code> 的返回值。</p><h3 id="event-end" tabindex="-1">事件：<code>&#39;end&#39;</code> <a class="header-anchor" href="#event-end" aria-label="Permalink to “事件：&#39;end&#39;”">​</a></h3><p><strong>新增于：v0.1.90</strong></p><p>当套接字的另一端发出传输结束的信号时触发，从而结束套接字的可读端。</p><p>默认情况下（<code>allowHalfOpen</code> 为 <code>false</code>），套接字将发回一个传输结束数据包，并在写出其待处理的写入队列后销毁其文件描述符。 但是，如果 <code>allowHalfOpen</code> 设置为 <code>true</code>，则套接字不会自动 <a href="/zh/nodejs/api/net#socketenddata-encoding-callback"><code>end()</code></a> 其可写端，从而允许用户写入任意数量的数据。 用户必须显式调用 <a href="/zh/nodejs/api/net#socketenddata-encoding-callback"><code>end()</code></a> 以关闭连接（即发回一个 FIN 数据包）。</p><h3 id="event-error_1" tabindex="-1">Event: <code>&#39;error&#39;</code> <a class="header-anchor" href="#event-error_1" aria-label="Permalink to “Event: &#39;error&#39;”">​</a></h3><p><strong>Added in: v0.1.90</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a></li></ul><p>当发生错误时触发。 <code>&#39;close&#39;</code> 事件将在此事件之后直接被调用。</p><h3 id="event-lookup" tabindex="-1">Event: <code>&#39;lookup&#39;</code> <a class="header-anchor" href="#event-lookup" aria-label="Permalink to “Event: &#39;lookup&#39;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v5.10.0</td><td>现在支持 <code>host</code> 参数。</td></tr><tr><td>v0.11.3</td><td>添加于: v0.11.3</td></tr></tbody></table></div><p>在解析主机名之后、连接之前触发。 不适用于 Unix 套接字。</p><ul><li><code>err</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" target="_blank" rel="noreferrer">&lt;null&gt;</a> 错误对象。 参见 <a href="/zh/nodejs/api/dns#dnslookuphostname-options-callback"><code>dns.lookup()</code></a>。</li><li><code>address</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> IP 地址。</li><li><code>family</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" target="_blank" rel="noreferrer">&lt;null&gt;</a> 地址类型。 参见 <a href="/zh/nodejs/api/dns#dnslookuphostname-options-callback"><code>dns.lookup()</code></a>。</li><li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 主机名。</li></ul><h3 id="event-ready" tabindex="-1">Event: <code>&#39;ready&#39;</code> <a class="header-anchor" href="#event-ready" aria-label="Permalink to “Event: &#39;ready&#39;”">​</a></h3><p><strong>Added in: v9.11.0</strong></p><p>当套接字准备好使用时触发。</p><p>在 <code>&#39;connect&#39;</code> 之后立即触发。</p><h3 id="event-timeout" tabindex="-1">Event: <code>&#39;timeout&#39;</code> <a class="header-anchor" href="#event-timeout" aria-label="Permalink to “Event: &#39;timeout&#39;”">​</a></h3><p><strong>Added in: v0.1.90</strong></p><p>如果套接字因不活动而超时，则触发。 这只是为了通知套接字已空闲。 用户必须手动关闭连接。</p><p>另见：<a href="/zh/nodejs/api/net#socketsettimeouttimeout-callback"><code>socket.setTimeout()</code></a>。</p><h3 id="socketaddress" tabindex="-1"><code>socket.address()</code> <a class="header-anchor" href="#socketaddress" aria-label="Permalink to “socket.address()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v18.4.0</td><td><code>family</code> 属性现在返回一个字符串而不是一个数字。</td></tr><tr><td>v18.0.0</td><td><code>family</code> 属性现在返回一个数字而不是一个字符串。</td></tr><tr><td>v0.1.90</td><td>添加于: v0.1.90</td></tr></tbody></table></div><ul><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>返回绑定的 <code>address</code>、地址 <code>family</code> 名称和套接字的 <code>port</code>，由操作系统报告：<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code></p><h3 id="socketautoselectfamilyattemptedaddresses" tabindex="-1"><code>socket.autoSelectFamilyAttemptedAddresses</code> <a class="header-anchor" href="#socketautoselectfamilyattemptedaddresses" aria-label="Permalink to “socket.autoSelectFamilyAttemptedAddresses”">​</a></h3><p><strong>新增于: v19.4.0, v18.18.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>只有在 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options)</code></a> 中启用了族自动选择算法时，才会出现此属性，并且它是已尝试的地址数组。</p><p>每个地址都是 <code>$IP:$PORT</code> 形式的字符串。 如果连接成功，则最后一个地址是套接字当前连接到的地址。</p><h3 id="socketbuffersize" tabindex="-1"><code>socket.bufferSize</code> <a class="header-anchor" href="#socketbuffersize" aria-label="Permalink to “socket.bufferSize”">​</a></h3><p><strong>新增于: v0.3.8</strong></p><p><strong>自以下版本弃用: v14.6.0</strong></p><div class="danger custom-block"><p class="custom-block-title">[稳定: 0 - 已弃用]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 已弃用: 请改用 <a href="/zh/nodejs/api/stream#writablewritablelength"><code>writable.writableLength</code></a>。</p></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a></li></ul><p>此属性显示为写入而缓冲的字符数。 缓冲区可能包含编码后长度未知的字符串。 因此，这个数字只是缓冲区中字节数的近似值。</p><p><code>net.Socket</code> 具有 <code>socket.write()</code> 始终有效的属性。 这是为了帮助用户快速启动和运行。 计算机无法始终跟上写入套接字的数据量。 网络连接可能太慢。 Node.js 会在内部将写入套接字的数据排队，并在可能的情况下通过网络发送出去。</p><p>这种内部缓冲的后果是内存可能会增长。 遇到较大或增长的 <code>bufferSize</code> 的用户应尝试使用 <a href="/zh/nodejs/api/net#socketpause"><code>socket.pause()</code></a> 和 <a href="/zh/nodejs/api/net#socketresume"><code>socket.resume()</code></a> 来“限制”程序中的数据流。</p><h3 id="socketbytesread" tabindex="-1"><code>socket.bytesRead</code> <a class="header-anchor" href="#socketbytesread" aria-label="Permalink to “socket.bytesRead”">​</a></h3><p><strong>新增于: v0.5.3</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a></li></ul><p>接收到的字节数。</p><h3 id="socketbyteswritten" tabindex="-1"><code>socket.bytesWritten</code> <a class="header-anchor" href="#socketbyteswritten" aria-label="Permalink to “socket.bytesWritten”">​</a></h3><p><strong>新增于: v0.5.3</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a></li></ul><p>已发送的字节数。</p><h3 id="socketconnect" tabindex="-1"><code>socket.connect()</code> <a class="header-anchor" href="#socketconnect" aria-label="Permalink to “socket.connect()”">​</a></h3><p>在给定的套接字上发起连接。</p><p>可能的签名：</p><ul><li><a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options[, connectListener])</code></a></li><li><a href="/zh/nodejs/api/net#socketconnectpath-connectlistener"><code>socket.connect(path[, connectListener])</code></a> 用于 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 连接。</li><li><a href="/zh/nodejs/api/net#socketconnectport-host-connectlistener"><code>socket.connect(port[, host][, connectListener])</code></a> 用于 TCP 连接。</li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 套接字本身。</li></ul><p>此函数是异步的。当连接建立时，将触发 <a href="/zh/nodejs/api/net#event-connect"><code>&#39;connect&#39;</code></a> 事件。如果连接时出现问题，不会触发 <a href="/zh/nodejs/api/net#event-connect"><code>&#39;connect&#39;</code></a> 事件，而是触发 <a href="/zh/nodejs/api/net#event-error-1"><code>&#39;error&#39;</code></a> 事件，并将错误传递给 <a href="/zh/nodejs/api/net#event-error-1"><code>&#39;error&#39;</code></a> 监听器。如果提供了最后一个参数 <code>connectListener</code>，则会将其添加为 <a href="/zh/nodejs/api/net#event-connect"><code>&#39;connect&#39;</code></a> 事件的监听器<strong>一次</strong>。</p><p>此函数应仅用于在 <code>&#39;close&#39;</code> 事件触发后重新连接套接字，否则可能导致未定义的行为。</p><h4 id="socketconnectoptions-connectlistener" tabindex="-1"><code>socket.connect(options[, connectListener])</code> <a class="header-anchor" href="#socketconnectoptions-connectlistener" aria-label="Permalink to “socket.connect(options[, connectListener])”">​</a></h4><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v19.4.0</td><td>可以使用 <code>setDefaultAutoSelectFamily</code> 在运行时更改 autoSelectFamily 选项的默认值，也可以通过命令行选项 <code>--enable-network-family-autoselection</code> 进行更改。</td></tr><tr><td>v20.0.0, v18.18.0</td><td>autoSelectFamily 选项的默认值现在为 true。<code>--enable-network-family-autoselection</code> CLI 标志已重命名为 <code>--network-family-autoselection</code>。旧名称现在是一个别名，但不建议使用。</td></tr><tr><td>v19.3.0, v18.13.0</td><td>添加了 <code>autoSelectFamily</code> 选项。</td></tr><tr><td>v17.7.0, v16.15.0</td><td>现在支持 <code>noDelay</code>、<code>keepAlive</code> 和 <code>keepAliveInitialDelay</code> 选项。</td></tr><tr><td>v6.0.0</td><td>现在 <code>hints</code> 选项在所有情况下都默认为 <code>0</code>。 之前，在没有 <code>family</code> 选项的情况下，它将默认为 \`dns.ADDRCONFIG</td></tr><tr><td>v5.11.0</td><td>现在支持 <code>hints</code> 选项。</td></tr><tr><td>v0.1.90</td><td>新增于：v0.1.90</td></tr></tbody></table></div><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li><li><code>connectListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> <a href="/zh/nodejs/api/net#socketconnect"><code>socket.connect()</code></a> 方法的通用参数。 将作为 <a href="/zh/nodejs/api/net#event-connect"><code>&#39;connect&#39;</code></a> 事件的监听器添加一次。</li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 套接字本身。</li></ul><p>在给定的套接字上发起连接。 通常不需要此方法，套接字应该使用 <a href="/zh/nodejs/api/net#netcreateconnection"><code>net.createConnection()</code></a> 创建和打开。 仅在实现自定义套接字时使用此方法。</p><p>对于 TCP 连接，可用的 <code>options</code> 有：</p><ul><li><code>autoSelectFamily</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a>: 如果设置为 <code>true</code>，它将启用一个族自动检测算法，该算法宽松地实现了 <a href="https://www.rfc-editor.org/rfc/rfc8305.txt" target="_blank" rel="noreferrer">RFC 8305</a> 的第 5 节。 传递给查找的 <code>all</code> 选项设置为 <code>true</code>，套接字尝试按顺序连接到所有获得的 IPv6 和 IPv4 地址，直到建立连接。 首先尝试返回的第一个 AAAA 地址，然后尝试返回的第一个 A 地址，然后是返回的第二个 AAAA 地址，依此类推。 每个连接尝试（但最后一个连接尝试）都会获得 <code>autoSelectFamilyAttemptTimeout</code> 选项指定的时间量，然后超时并尝试下一个地址。 如果 <code>family</code> 选项不是 <code>0</code> 或设置了 <code>localAddress</code>，则忽略。 如果至少一个连接成功，则不会触发连接错误。 如果所有连接尝试都失败，则会触发一个包含所有失败尝试的 <code>AggregateError</code>。 <strong>默认值:</strong> <a href="/zh/nodejs/api/net#netgetdefaultautoselectfamily"><code>net.getDefaultAutoSelectFamily()</code></a>。</li><li><code>autoSelectFamilyAttemptTimeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a>: 使用 <code>autoSelectFamily</code> 选项时，等待连接尝试完成再尝试下一个地址的毫秒数。 如果设置为小于 <code>10</code> 的正整数，则将改为使用值 <code>10</code>。 <strong>默认值:</strong> <a href="/zh/nodejs/api/net#netgetdefaultautoselectfamilyattempttimeout"><code>net.getDefaultAutoSelectFamilyAttemptTimeout()</code></a>。</li><li><code>family</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a>: IP 协议栈的版本。 必须为 <code>4</code>、<code>6</code> 或 <code>0</code>。 值 <code>0</code> 表示允许 IPv4 和 IPv6 地址。 <strong>默认值:</strong> <code>0</code>。</li><li><code>hints</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 可选的 <a href="/zh/nodejs/api/dns#supported-getaddrinfo-flags"><code>dns.lookup()</code> 提示</a>。</li><li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 套接字应连接到的主机。 <strong>默认值:</strong> <code>&#39;localhost&#39;</code>。</li><li><code>keepAlive</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>true</code>，它会在连接建立后立即在套接字上启用 keep-alive 功能，类似于在 <a href="/zh/nodejs/api/net#socketsetkeepaliveenable-initialdelay"><code>socket.setKeepAlive()</code></a> 中所做的事情。 <strong>默认值:</strong> <code>false</code>。</li><li><code>keepAliveInitialDelay</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 如果设置为正数，则它会设置在空闲套接字上发送第一个 keepalive 探测之前的初始延迟。 <strong>默认值:</strong> <code>0</code>。</li><li><code>localAddress</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 套接字应连接的本地地址。</li><li><code>localPort</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 套接字应连接的本地端口。</li><li><code>lookup</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 自定义查找函数。 <strong>默认值:</strong> <a href="/zh/nodejs/api/dns#dnslookuphostname-options-callback"><code>dns.lookup()</code></a>。</li><li><code>noDelay</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>true</code>，则在套接字建立后立即禁用 Nagle 算法的使用。 <strong>默认值:</strong> <code>false</code>。</li><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 必需。 套接字应连接到的端口。</li><li><code>blockList</code> <a href="/zh/nodejs/api/net#class-netblocklist">&lt;net.BlockList&gt;</a> <code>blockList</code> 可用于禁用对特定 IP 地址、IP 范围或 IP 子网的出站访问。</li></ul><p>对于 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 连接，可用的 <code>options</code> 有：</p><ul><li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 必需。 客户端应连接到的路径。 参见 <a href="/zh/nodejs/api/net#identifying-paths-for-ipc-connections">识别 IPC 连接的路径</a>。 如果提供，则忽略上面的 TCP 特定选项。</li></ul><h4 id="socketconnectpath-connectlistener" tabindex="-1"><code>socket.connect(path[, connectListener])</code> <a class="header-anchor" href="#socketconnectpath-connectlistener" aria-label="Permalink to “socket.connect(path[, connectListener])”">​</a></h4><ul><li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 客户端应该连接到的路径。参见 <a href="/zh/nodejs/api/net#identifying-paths-for-ipc-connections">识别 IPC 连接的路径</a>。</li><li><code>connectListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> <a href="/zh/nodejs/api/net#socketconnect"><code>socket.connect()</code></a> 方法的常用参数。将会被添加为 <a href="/zh/nodejs/api/net#event-connect"><code>&#39;connect&#39;</code></a> 事件的监听器一次。</li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> socket 本身。</li></ul><p>在给定的 socket 上启动一个 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 连接。</p><p>别名为调用时将 <code>{ path: path }</code> 作为 <code>options</code> 的 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options[, connectListener])</code></a>。</p><h4 id="socketconnectport-host-connectlistener" tabindex="-1"><code>socket.connect(port[, host][, connectListener])</code> <a class="header-anchor" href="#socketconnectport-host-connectlistener" aria-label="Permalink to “socket.connect(port[, host][, connectListener])”">​</a></h4><p><strong>添加于: v0.1.90</strong></p><ul><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 客户端应该连接到的端口。</li><li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 客户端应该连接到的主机。</li><li><code>connectListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> <a href="/zh/nodejs/api/net#socketconnect"><code>socket.connect()</code></a> 方法的常用参数。将会被添加为 <a href="/zh/nodejs/api/net#event-connect"><code>&#39;connect&#39;</code></a> 事件的监听器一次。</li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> socket 本身。</li></ul><p>在给定的 socket 上启动一个 TCP 连接。</p><p>别名为调用时将 <code>{port: port, host: host}</code> 作为 <code>options</code> 的 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options[, connectListener])</code></a>。</p><h3 id="socketconnecting" tabindex="-1"><code>socket.connecting</code> <a class="header-anchor" href="#socketconnecting" aria-label="Permalink to “socket.connecting”">​</a></h3><p><strong>添加于: v6.1.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果为 <code>true</code>，则说明已经调用了 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options[, connectListener])</code></a> 且尚未完成。 它将保持 <code>true</code> 直到 socket 变为已连接状态，然后设置为 <code>false</code> 并且发出 <code>&#39;connect&#39;</code> 事件。 请注意，<a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options[, connectListener])</code></a> 回调是 <code>&#39;connect&#39;</code> 事件的监听器。</p><h3 id="socketdestroyerror" tabindex="-1"><code>socket.destroy([error])</code> <a class="header-anchor" href="#socketdestroyerror" aria-label="Permalink to “socket.destroy([error])”">​</a></h3><p><strong>新增于: v0.1.90</strong></p><ul><li><code>error</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>确保此套接字上不再发生 I/O 活动。销毁流并关闭连接。</p><p>有关更多详细信息，请参阅 <a href="/zh/nodejs/api/stream#writabledestroyerror"><code>writable.destroy()</code></a>。</p><h3 id="socketdestroyed" tabindex="-1"><code>socket.destroyed</code> <a class="header-anchor" href="#socketdestroyed" aria-label="Permalink to “socket.destroyed”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 指示连接是否已销毁。 连接一旦被销毁，就不能再使用它传输任何数据。</li></ul><p>有关更多详细信息，请参阅 <a href="/zh/nodejs/api/stream#writabledestroyed"><code>writable.destroyed</code></a>。</p><h3 id="socketdestroysoon" tabindex="-1"><code>socket.destroySoon()</code> <a class="header-anchor" href="#socketdestroysoon" aria-label="Permalink to “socket.destroySoon()”">​</a></h3><p><strong>新增于: v0.3.4</strong></p><p>在所有数据写入后销毁套接字。 如果已发出 <code>&#39;finish&#39;</code> 事件，则会立即销毁套接字。 如果套接字仍然可写，它会隐式地调用 <code>socket.end()</code>。</p><h3 id="socketenddata-encoding-callback" tabindex="-1"><code>socket.end([data[, encoding]][, callback])</code> <a class="header-anchor" href="#socketenddata-encoding-callback" aria-label="Permalink to “socket.end([data[, encoding]][, callback])”">​</a></h3><p><strong>新增于: v0.1.90</strong></p><ul><li><code>data</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">&lt;Uint8Array&gt;</a></li><li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 仅当数据为 <code>string</code> 时使用。 <strong>默认值:</strong> <code>&#39;utf8&#39;</code>。</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 套接字完成时的可选回调函数。</li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 套接字本身。</li></ul><p>半关闭套接字。 即，它发送一个 FIN 包。 服务器仍有可能发送一些数据。</p><p>有关更多详细信息，请参阅 <a href="/zh/nodejs/api/stream#writableendchunk-encoding-callback"><code>writable.end()</code></a>。</p><h3 id="socketlocaladdress" tabindex="-1"><code>socket.localAddress</code> <a class="header-anchor" href="#socketlocaladdress" aria-label="Permalink to “socket.localAddress”">​</a></h3><p><strong>新增于: v0.9.6</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>远程客户端连接的本地 IP 地址的字符串表示形式。 例如，在侦听 <code>&#39;0.0.0.0&#39;</code> 的服务器中，如果客户端连接到 <code>&#39;192.168.1.1&#39;</code>，则 <code>socket.localAddress</code> 的值将为 <code>&#39;192.168.1.1&#39;</code>。</p><h3 id="socketlocalport" tabindex="-1"><code>socket.localPort</code> <a class="header-anchor" href="#socketlocalport" aria-label="Permalink to “socket.localPort”">​</a></h3><p><strong>新增于: v0.9.6</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a></li></ul><p>本地端口的数字表示。 例如，<code>80</code> 或 <code>21</code>。</p><h3 id="socketlocalfamily" tabindex="-1"><code>socket.localFamily</code> <a class="header-anchor" href="#socketlocalfamily" aria-label="Permalink to “socket.localFamily”">​</a></h3><p><strong>新增于: v18.8.0, v16.18.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>本地 IP 族的字符串表示。 <code>&#39;IPv4&#39;</code> 或 <code>&#39;IPv6&#39;</code>。</p><h3 id="socketpause" tabindex="-1"><code>socket.pause()</code> <a class="header-anchor" href="#socketpause" aria-label="Permalink to “socket.pause()”">​</a></h3><ul><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 套接字本身。</li></ul><p>暂停读取数据。 也就是说，不会触发 <a href="/zh/nodejs/api/net#event-data"><code>&#39;data&#39;</code></a> 事件。 有助于降低上传速度。</p><h3 id="socketpending" tabindex="-1"><code>socket.pending</code> <a class="header-anchor" href="#socketpending" aria-label="Permalink to “socket.pending”">​</a></h3><p><strong>新增于: v11.2.0, v10.16.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果套接字尚未连接，则为 <code>true</code>，原因可能是尚未调用 <code>.connect()</code>，或者仍在连接过程中（请参阅 <a href="/zh/nodejs/api/net#socketconnecting"><code>socket.connecting</code></a>）。</p><h3 id="socketref" tabindex="-1"><code>socket.ref()</code> <a class="header-anchor" href="#socketref" aria-label="Permalink to “socket.ref()”">​</a></h3><p><strong>新增于: v0.9.1</strong></p><ul><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 套接字本身。</li></ul><p>与 <code>unref()</code> 相反，在一个先前 <code>unref</code> 过的套接字上调用 <code>ref()</code> <em>不会</em> 让程序在它是剩余的唯一套接字时退出（默认行为）。 如果套接字是 <code>ref</code> 的，再次调用 <code>ref</code> 将不起作用。</p><h3 id="socketremoteaddress" tabindex="-1"><code>socket.remoteAddress</code> <a class="header-anchor" href="#socketremoteaddress" aria-label="Permalink to “socket.remoteAddress”">​</a></h3><p><strong>新增于: v0.5.10</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>远程 IP 地址的字符串表示。 例如，<code>&#39;74.125.127.100&#39;</code> 或 <code>&#39;2001:4860:a005::68&#39;</code>。 如果套接字被销毁（例如，如果客户端断开连接），则值可能为 <code>undefined</code>。</p><h3 id="socketremotefamily" tabindex="-1"><code>socket.remoteFamily</code> <a class="header-anchor" href="#socketremotefamily" aria-label="Permalink to “socket.remoteFamily”">​</a></h3><p><strong>新增于: v0.11.14</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>远程 IP 族的字符串表示。 <code>&#39;IPv4&#39;</code> 或 <code>&#39;IPv6&#39;</code>。 如果套接字被销毁（例如，如果客户端断开连接），则值可能为 <code>undefined</code>。</p><h3 id="socketremoteport" tabindex="-1"><code>socket.remotePort</code> <a class="header-anchor" href="#socketremoteport" aria-label="Permalink to “socket.remotePort”">​</a></h3><p><strong>Added in: v0.5.10</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a></li></ul><p>远程端口的数字表示。例如，<code>80</code> 或 <code>21</code>。如果 socket 被销毁（例如，如果客户端断开连接），则值可能为 <code>undefined</code>。</p><h3 id="socketresetanddestroy" tabindex="-1"><code>socket.resetAndDestroy()</code> <a class="header-anchor" href="#socketresetanddestroy" aria-label="Permalink to “socket.resetAndDestroy()”">​</a></h3><p><strong>Added in: v18.3.0, v16.17.0</strong></p><ul><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>通过发送 RST 数据包并销毁流来关闭 TCP 连接。 如果此 TCP socket 处于连接状态，它将在连接后发送 RST 数据包并销毁此 TCP socket。 否则，它将使用 <code>ERR_SOCKET_CLOSED</code> 错误调用 <code>socket.destroy</code>。 如果这不是 TCP socket（例如，管道），则调用此方法将立即抛出 <code>ERR_INVALID_HANDLE_TYPE</code> 错误。</p><h3 id="socketresume" tabindex="-1"><code>socket.resume()</code> <a class="header-anchor" href="#socketresume" aria-label="Permalink to “socket.resume()”">​</a></h3><ul><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> socket 本身。</li></ul><p>在调用 <a href="/zh/nodejs/api/net#socketpause"><code>socket.pause()</code></a> 后恢复读取。</p><h3 id="socketsetencodingencoding" tabindex="-1"><code>socket.setEncoding([encoding])</code> <a class="header-anchor" href="#socketsetencodingencoding" aria-label="Permalink to “socket.setEncoding([encoding])”">​</a></h3><p><strong>Added in: v0.1.90</strong></p><ul><li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> socket 本身。</li></ul><p>将 socket 的编码设置为 <a href="/zh/nodejs/api/stream#class-streamreadable">Readable Stream</a>。 更多信息请参阅 <a href="/zh/nodejs/api/stream#readablesetencodingencoding"><code>readable.setEncoding()</code></a>。</p><h3 id="socketsetkeepaliveenable-initialdelay" tabindex="-1"><code>socket.setKeepAlive([enable][, initialDelay])</code> <a class="header-anchor" href="#socketsetkeepaliveenable-initialdelay" aria-label="Permalink to “socket.setKeepAlive([enable][, initialDelay])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v13.12.0, v12.17.0</td><td>添加了 <code>TCP_KEEPCNT</code> 和 <code>TCP_KEEPINTVL</code> socket 选项的新默认值。</td></tr><tr><td>v0.1.92</td><td>添加于: v0.1.92</td></tr></tbody></table></div><ul><li><code>enable</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <strong>默认值:</strong> <code>false</code></li><li><code>initialDelay</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <strong>默认值:</strong> <code>0</code></li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> socket 本身。</li></ul><p>启用/禁用 keep-alive 功能，并可选择设置在空闲 socket 上发送第一个 keepalive 探测之前的初始延迟。</p><p>设置 <code>initialDelay</code>（以毫秒为单位）以设置接收到的最后一个数据包与第一个 keepalive 探测之间的延迟。 将 <code>initialDelay</code> 设置为 <code>0</code> 将使该值与默认值（或先前）设置保持不变。</p><p>启用 keep-alive 功能将设置以下 socket 选项：</p><ul><li><code>SO_KEEPALIVE=1</code></li><li><code>TCP_KEEPIDLE=initialDelay</code></li><li><code>TCP_KEEPCNT=10</code></li><li><code>TCP_KEEPINTVL=1</code></li></ul><h3 id="socketsetnodelaynodelay" tabindex="-1"><code>socket.setNoDelay([noDelay])</code> <a class="header-anchor" href="#socketsetnodelaynodelay" aria-label="Permalink to “socket.setNoDelay([noDelay])”">​</a></h3><p><strong>Added in: v0.1.90</strong></p><ul><li><code>noDelay</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <strong>Default:</strong> <code>true</code></li><li>Returns: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> The socket itself.</li></ul><p>启用/禁用 Nagle 算法的使用。</p><p>当创建 TCP 连接时，默认会启用 Nagle 算法。</p><p>Nagle 算法会在数据通过网络发送之前延迟数据。 它试图以牺牲延迟为代价来优化吞吐量。</p><p>为 <code>noDelay</code> 传递 <code>true</code> 或不传递参数将禁用套接字的 Nagle 算法。 为 <code>noDelay</code> 传递 <code>false</code> 将启用 Nagle 算法。</p><h3 id="socketsettimeouttimeout-callback" tabindex="-1"><code>socket.setTimeout(timeout[, callback])</code> <a class="header-anchor" href="#socketsettimeouttimeout-callback" aria-label="Permalink to “socket.setTimeout(timeout[, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v18.0.0</td><td>Passing an invalid callback to the <code>callback</code> argument now throws <code>ERR_INVALID_ARG_TYPE</code> instead of <code>ERR_INVALID_CALLBACK</code>.</td></tr><tr><td>v0.1.90</td><td>Added in: v0.1.90</td></tr></tbody></table></div><ul><li><code>timeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>Returns: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> The socket itself.</li></ul><p>设置套接字在套接字上不活动 <code>timeout</code> 毫秒后超时。 默认情况下，<code>net.Socket</code> 没有超时。</p><p>当触发空闲超时时，套接字将收到一个 <a href="/zh/nodejs/api/net#event-timeout"><code>&#39;timeout&#39;</code></a> 事件，但连接不会断开。 用户必须手动调用 <a href="/zh/nodejs/api/net#socketenddata-encoding-callback"><code>socket.end()</code></a> 或 <a href="/zh/nodejs/api/net#socketdestroyerror"><code>socket.destroy()</code></a> 来结束连接。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;socket timeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果 <code>timeout</code> 为 0，则现有的空闲超时将被禁用。</p><p>可选的 <code>callback</code> 参数将作为 <a href="/zh/nodejs/api/net#event-timeout"><code>&#39;timeout&#39;</code></a> 事件的一次性监听器添加。</p><h3 id="sockettimeout" tabindex="-1"><code>socket.timeout</code> <a class="header-anchor" href="#sockettimeout" aria-label="Permalink to “socket.timeout”">​</a></h3><p><strong>Added in: v10.7.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a></li></ul><p>套接字的超时时间，以毫秒为单位，由 <a href="/zh/nodejs/api/net#socketsettimeouttimeout-callback"><code>socket.setTimeout()</code></a> 设置。 如果未设置超时，则为 <code>undefined</code>。</p><h3 id="socketunref" tabindex="-1"><code>socket.unref()</code> <a class="header-anchor" href="#socketunref" aria-label="Permalink to “socket.unref()”">​</a></h3><p><strong>Added in: v0.9.1</strong></p><ul><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 套接字本身。</li></ul><p>在套接字上调用 <code>unref()</code> 将允许程序退出，如果这是事件系统中唯一活跃的套接字。 如果套接字已经被 <code>unref</code>，则再次调用 <code>unref()</code> 将不起作用。</p><h3 id="socketwritedata-encoding-callback" tabindex="-1"><code>socket.write(data[, encoding][, callback])</code> <a class="header-anchor" href="#socketwritedata-encoding-callback" aria-label="Permalink to “socket.write(data[, encoding][, callback])”">​</a></h3><p><strong>Added in: v0.1.90</strong></p><ul><li><code>data</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">&lt;Uint8Array&gt;</a></li><li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 仅当 data 是 <code>string</code> 时使用。 <strong>默认值:</strong> <code>utf8</code>。</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>在套接字上发送数据。 第二个参数指定字符串情况下的编码。 默认为 UTF8 编码。</p><p>如果整个数据已成功刷新到内核缓冲区，则返回 <code>true</code>。 如果全部或部分数据已在用户内存中排队，则返回 <code>false</code>。 当缓冲区再次空闲时，将发出 <a href="/zh/nodejs/api/net#event-drain"><code>&#39;drain&#39;</code></a>。</p><p>可选的 <code>callback</code> 参数将在数据最终写入时执行，这可能不会立即发生。</p><p>有关更多信息，请参见 <code>Writable</code> 流 <a href="/zh/nodejs/api/stream#writablewritechunk-encoding-callback"><code>write()</code></a> 方法。</p><h3 id="socketreadystate" tabindex="-1"><code>socket.readyState</code> <a class="header-anchor" href="#socketreadystate" aria-label="Permalink to “socket.readyState”">​</a></h3><p><strong>Added in: v0.5.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>此属性表示连接的状态，是一个字符串。</p><ul><li>如果流正在连接中，则 <code>socket.readyState</code> 为 <code>opening</code>。</li><li>如果流可读且可写，则为 <code>open</code>。</li><li>如果流可读但不可写，则为 <code>readOnly</code>。</li><li>如果流不可读且可写，则为 <code>writeOnly</code>。</li></ul><h2 id="netconnect" tabindex="-1"><code>net.connect()</code> <a class="header-anchor" href="#netconnect" aria-label="Permalink to “net.connect()”">​</a></h2><p>是 <a href="/zh/nodejs/api/net#netcreateconnection"><code>net.createConnection()</code></a> 的别名。</p><p>可能的签名：</p><ul><li><a href="/zh/nodejs/api/net#netconnectoptions-connectlistener"><code>net.connect(options[, connectListener])</code></a></li><li><a href="/zh/nodejs/api/net#netconnectpath-connectlistener"><code>net.connect(path[, connectListener])</code></a> 用于 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 连接。</li><li><a href="/zh/nodejs/api/net#netconnectport-host-connectlistener"><code>net.connect(port[, host][, connectListener])</code></a> 用于 TCP 连接。</li></ul><h3 id="netconnectoptions-connectlistener" tabindex="-1"><code>net.connect(options[, connectListener])</code> <a class="header-anchor" href="#netconnectoptions-connectlistener" aria-label="Permalink to “net.connect(options[, connectListener])”">​</a></h3><p><strong>Added in: v0.7.0</strong></p><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li><li><code>connectListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>是 <a href="/zh/nodejs/api/net#netcreateconnectionoptions-connectlistener"><code>net.createConnection(options[, connectListener])</code></a> 的别名。</p><h3 id="netconnectpath-connectlistener" tabindex="-1"><code>net.connect(path[, connectListener])</code> <a class="header-anchor" href="#netconnectpath-connectlistener" aria-label="Permalink to “net.connect(path[, connectListener])”">​</a></h3><p><strong>Added in: v0.1.90</strong></p><ul><li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>connectListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>是 <a href="/zh/nodejs/api/net#netcreateconnectionpath-connectlistener"><code>net.createConnection(path[, connectListener])</code></a> 的别名。</p><h3 id="netconnectport-host-connectlistener" tabindex="-1"><code>net.connect(port[, host][, connectListener])</code> <a class="header-anchor" href="#netconnectport-host-connectlistener" aria-label="Permalink to “net.connect(port[, host][, connectListener])”">​</a></h3><p><strong>Added in: v0.1.90</strong></p><ul><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>connectListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>是 <a href="/zh/nodejs/api/net#netcreateconnectionport-host-connectlistener"><code>net.createConnection(port[, host][, connectListener])</code></a> 的别名。</p><h2 id="netcreateconnection" tabindex="-1"><code>net.createConnection()</code> <a class="header-anchor" href="#netcreateconnection" aria-label="Permalink to “net.createConnection()”">​</a></h2><p>一个工厂函数，创建一个新的 <a href="/zh/nodejs/api/net#class-netsocket"><code>net.Socket</code></a>，立即使用 <a href="/zh/nodejs/api/net#socketconnect"><code>socket.connect()</code></a> 启动连接，然后返回启动连接的 <code>net.Socket</code>。</p><p>当连接建立时，将在返回的套接字上触发一个 <a href="/zh/nodejs/api/net#event-connect"><code>&#39;connect&#39;</code></a> 事件。 最后一个参数 <code>connectListener</code>，如果提供，将作为 <a href="/zh/nodejs/api/net#event-connect"><code>&#39;connect&#39;</code></a> 事件的监听器<strong>一次</strong>添加。</p><p>可能的签名：</p><ul><li><a href="/zh/nodejs/api/net#netcreateconnectionoptions-connectlistener"><code>net.createConnection(options[, connectListener])</code></a></li><li><a href="/zh/nodejs/api/net#netcreateconnectionpath-connectlistener"><code>net.createConnection(path[, connectListener])</code></a> 用于 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 连接。</li><li><a href="/zh/nodejs/api/net#netcreateconnectionport-host-connectlistener"><code>net.createConnection(port[, host][, connectListener])</code></a> 用于 TCP 连接。</li></ul><p><a href="/zh/nodejs/api/net#netconnect"><code>net.connect()</code></a> 函数是此函数的别名。</p><h3 id="netcreateconnectionoptions-connectlistener" tabindex="-1"><code>net.createConnection(options[, connectListener])</code> <a class="header-anchor" href="#netcreateconnectionoptions-connectlistener" aria-label="Permalink to “net.createConnection(options[, connectListener])”">​</a></h3><p><strong>新增于: v0.1.90</strong></p><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 必需。 将传递给 <a href="/zh/nodejs/api/net#new-netsocketoptions"><code>new net.Socket([options])</code></a> 调用和 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options[, connectListener])</code></a> 方法。</li><li><code>connectListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> <a href="/zh/nodejs/api/net#netcreateconnection"><code>net.createConnection()</code></a> 函数的通用参数。 如果提供，将作为返回的套接字上的 <a href="/zh/nodejs/api/net#event-connect"><code>&#39;connect&#39;</code></a> 事件的监听器添加一次。</li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 用于启动连接的新创建的套接字。</li></ul><p>对于可用的选项，请参阅 <a href="/zh/nodejs/api/net#new-netsocketoptions"><code>new net.Socket([options])</code></a> 和 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options[, connectListener])</code></a>。</p><p>附加选项：</p><ul><li><code>timeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 如果设置，将用于在创建套接字之后，但在启动连接之前调用 <a href="/zh/nodejs/api/net#socketsettimeouttimeout-callback"><code>socket.setTimeout(timeout)</code></a>。</li></ul><p>以下是 <a href="/zh/nodejs/api/net#netcreateserveroptions-connectionlistener"><code>net.createServer()</code></a> 部分中描述的回显服务器的客户端示例：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-2520" id="tab-2521" checked><label data-title="ESM" for="tab-2521">ESM</label><input type="radio" name="group-2520" id="tab-2522"><label data-title="CJS" for="tab-2522">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8124</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &#39;connect&#39; 监听器。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;连接到服务器！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;world!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;与服务器断开连接&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> net</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8124</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &#39;connect&#39; 监听器。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;连接到服务器！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;world!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;与服务器断开连接&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></div></div><p>要在套接字 <code>/tmp/echo.sock</code> 上连接：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/tmp/echo.sock&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以下是使用 <code>port</code> 和 <code>onread</code> 选项的客户端示例。 在这种情况下，<code>onread</code> 选项将仅用于调用 <code>new net.Socket([options])</code>，而 <code>port</code> 选项将用于调用 <code>socket.connect(options[, connectListener])</code>。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-2531" id="tab-2532" checked><label data-title="ESM" for="tab-2532">ESM</label><input type="radio" name="group-2531" id="tab-2533"><label data-title="CJS" for="tab-2533">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Buffer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:buffer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8124</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  onread: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 为每次从套接字读取重复使用一个 4KiB 的 Buffer。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    buffer: Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 收到的数据在 \`buf\` 中从 0 到 \`nread\` 可用。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, nread));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> net</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8124</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  onread: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 为每次从套接字读取重复使用一个 4KiB 的 Buffer。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    buffer: Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 收到的数据在 \`buf\` 中从 0 到 \`nread\` 可用。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, nread));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div></div><h3 id="netcreateconnectionpath-connectlistener" tabindex="-1"><code>net.createConnection(path[, connectListener])</code> <a class="header-anchor" href="#netcreateconnectionpath-connectlistener" aria-label="Permalink to “net.createConnection(path[, connectListener])”">​</a></h3><p><strong>Added in: v0.1.90</strong></p><ul><li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 套接字应连接到的路径。 将传递给 <a href="/zh/nodejs/api/net#socketconnectpath-connectlistener"><code>socket.connect(path[, connectListener])</code></a>。 参见 <a href="/zh/nodejs/api/net#identifying-paths-for-ipc-connections">识别 IPC 连接的路径</a>。</li><li><code>connectListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> <a href="/zh/nodejs/api/net#netcreateconnection"><code>net.createConnection()</code></a> 函数的通用参数，启动套接字上 <code>&#39;connect&#39;</code> 事件的 &quot;once&quot; 监听器。 将传递给 <a href="/zh/nodejs/api/net#socketconnectpath-connectlistener"><code>socket.connect(path[, connectListener])</code></a>。</li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 用于启动连接的新创建的套接字。</li></ul><p>启动 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 连接。</p><p>此函数创建一个新的 <a href="/zh/nodejs/api/net#class-netsocket"><code>net.Socket</code></a>，所有选项都设置为默认值，立即使用 <a href="/zh/nodejs/api/net#socketconnectpath-connectlistener"><code>socket.connect(path[, connectListener])</code></a> 启动连接，然后返回启动连接的 <code>net.Socket</code>。</p><h3 id="netcreateconnectionport-host-connectlistener" tabindex="-1"><code>net.createConnection(port[, host][, connectListener])</code> <a class="header-anchor" href="#netcreateconnectionport-host-connectlistener" aria-label="Permalink to “net.createConnection(port[, host][, connectListener])”">​</a></h3><p><strong>Added in: v0.1.90</strong></p><ul><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 套接字应连接到的端口。 将传递给 <a href="/zh/nodejs/api/net#socketconnectport-host-connectlistener"><code>socket.connect(port[, host][, connectListener])</code></a>。</li><li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 套接字应连接到的主机。 将传递给 <a href="/zh/nodejs/api/net#socketconnectport-host-connectlistener"><code>socket.connect(port[, host][, connectListener])</code></a>。 <strong>默认值:</strong> <code>&#39;localhost&#39;</code>。</li><li><code>connectListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> <a href="/zh/nodejs/api/net#netcreateconnection"><code>net.createConnection()</code></a> 函数的通用参数，启动套接字上 <code>&#39;connect&#39;</code> 事件的 &quot;once&quot; 监听器。 将传递给 <a href="/zh/nodejs/api/net#socketconnectport-host-connectlistener"><code>socket.connect(port[, host][, connectListener])</code></a>。</li><li>返回: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 用于启动连接的新创建的套接字。</li></ul><p>启动 TCP 连接。</p><p>此函数创建一个新的 <a href="/zh/nodejs/api/net#class-netsocket"><code>net.Socket</code></a>，所有选项都设置为默认值，立即使用 <a href="/zh/nodejs/api/net#socketconnectport-host-connectlistener"><code>socket.connect(port[, host][, connectListener])</code></a> 启动连接，然后返回启动连接的 <code>net.Socket</code>。</p><h2 id="netcreateserveroptions-connectionlistener" tabindex="-1"><code>net.createServer([options][, connectionListener])</code> <a class="header-anchor" href="#netcreateserveroptions-connectionlistener" aria-label="Permalink to “net.createServer([options][, connectionListener])”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.1.0, v18.17.0</td><td>现在支持 <code>highWaterMark</code> 选项。</td></tr><tr><td>v17.7.0, v16.15.0</td><td>现在支持 <code>noDelay</code>、<code>keepAlive</code> 和 <code>keepAliveInitialDelay</code> 选项。</td></tr><tr><td>v0.5.0</td><td>添加于: v0.5.0</td></tr></tbody></table></div><ul><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></p><ul><li><code>allowHalfOpen</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>false</code>，则当可读端结束时，套接字将自动结束可写端。 <strong>默认值:</strong> <code>false</code>。</li><li><code>highWaterMark</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 可选地覆盖所有 <a href="/zh/nodejs/api/net#class-netsocket"><code>net.Socket</code></a> 的 <code>readableHighWaterMark</code> 和 <code>writableHighWaterMark</code>。 <strong>默认值:</strong> 参见 <a href="/zh/nodejs/api/stream#streamgetdefaulthighwatermarkobjectmode"><code>stream.getDefaultHighWaterMark()</code></a>。</li><li><code>keepAlive</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>true</code>，则在收到新的传入连接后立即启用套接字上的保持活动功能，类似于在 <a href="/zh/nodejs/api/net#socketsetkeepaliveenable-initialdelay"><code>socket.setKeepAlive()</code></a> 中所做的操作。 <strong>默认值:</strong> <code>false</code>。</li><li><code>keepAliveInitialDelay</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 如果设置为正数，则设置在空闲套接字上发送第一个保持活动探测之前的初始延迟。 <strong>默认值:</strong> <code>0</code>。</li><li><code>noDelay</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>true</code>，则在收到新的传入连接后立即禁用 Nagle 算法的使用。 <strong>默认值:</strong> <code>false</code>。</li><li><code>pauseOnConnect</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 指示是否应在传入连接上暂停套接字。 <strong>默认值:</strong> <code>false</code>。</li><li><code>blockList</code> <a href="/zh/nodejs/api/net#class-netblocklist">&lt;net.BlockList&gt;</a> <code>blockList</code> 可用于禁用对特定 IP 地址、IP 范围或 IP 子网的入站访问。 如果服务器位于反向代理、NAT 等之后，则这不起作用，因为针对阻止列表检查的地址是代理的地址，或 NAT 指定的地址。</li></ul></li><li><p><code>connectionListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 自动设置为 <a href="/zh/nodejs/api/net#event-connection"><code>&#39;connection&#39;</code></a> 事件的监听器。</p></li><li><p>返回: <a href="/zh/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a></p></li></ul><p>创建一个新的 TCP 或 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 服务器。</p><p>如果 <code>allowHalfOpen</code> 设置为 <code>true</code>，当套接字的另一端发出传输结束信号时，服务器只有在显式调用 <a href="/zh/nodejs/api/net#socketenddata-encoding-callback"><code>socket.end()</code></a> 时才会发回传输结束信号。 例如，在 TCP 的上下文中，当收到 FIN 数据包时，只有在显式调用 <a href="/zh/nodejs/api/net#socketenddata-encoding-callback"><code>socket.end()</code></a> 时才会发回 FIN 数据包。 在此之前，连接是半关闭的（不可读但仍然可写）。 有关更多信息，请参阅 <a href="/zh/nodejs/api/net#event-end"><code>&#39;end&#39;</code></a> 事件和 <a href="https://tools.ietf.org/html/rfc1122" target="_blank" rel="noreferrer">RFC 1122</a>（第 4.2.2.13 节）。</p><p>如果 <code>pauseOnConnect</code> 设置为 <code>true</code>，则与每个传入连接关联的套接字将被暂停，并且不会从其句柄读取任何数据。 这允许在进程之间传递连接，而无需原始进程读取任何数据。 要开始从暂停的套接字读取数据，请调用 <a href="/zh/nodejs/api/net#socketresume"><code>socket.resume()</code></a>。</p><p>服务器可以是 TCP 服务器或 <a href="/zh/nodejs/api/net#ipc-support">IPC</a> 服务器，具体取决于它 <a href="/zh/nodejs/api/net#serverlisten"><code>listen()</code></a> 到什么。</p><p>这是一个 TCP 回显服务器的示例，它侦听端口 8124 上的连接：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-2710" id="tab-2711" checked><label data-title="ESM" for="tab-2711">ESM</label><input type="radio" name="group-2710" id="tab-2712"><label data-title="CJS" for="tab-2712">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &#39;connection&#39; 监听器。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client connected&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client disconnected&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8124</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server bound&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> net</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &#39;connection&#39; 监听器。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client connected&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;client disconnected&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8124</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server bound&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></div></div><p>使用 <code>telnet</code> 进行测试：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">telnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8124</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>要在套接字 <code>/tmp/echo.sock</code> 上监听：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/tmp/echo.sock&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server bound&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用 <code>nc</code> 连接到 Unix 域套接字服务器：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/echo.sock</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="netgetdefaultautoselectfamily" tabindex="-1"><code>net.getDefaultAutoSelectFamily()</code> <a class="header-anchor" href="#netgetdefaultautoselectfamily" aria-label="Permalink to “net.getDefaultAutoSelectFamily()”">​</a></h2><p><strong>新增于: v19.4.0</strong></p><p>获取 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options)</code></a> 的 <code>autoSelectFamily</code> 选项的当前默认值。 初始默认值为 <code>true</code>，除非提供了命令行选项 <code>--no-network-family-autoselection</code>。</p><ul><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>autoSelectFamily</code> 选项的当前默认值。</li></ul><h2 id="netsetdefaultautoselectfamilyvalue" tabindex="-1"><code>net.setDefaultAutoSelectFamily(value)</code> <a class="header-anchor" href="#netsetdefaultautoselectfamilyvalue" aria-label="Permalink to “net.setDefaultAutoSelectFamily(value)”">​</a></h2><p><strong>新增于: v19.4.0</strong></p><p>设置 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options)</code></a> 的 <code>autoSelectFamily</code> 选项的默认值。</p><ul><li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 新的默认值。 初始默认值为 <code>true</code>，除非提供了命令行选项 <code>--no-network-family-autoselection</code>。</li></ul><h2 id="netgetdefaultautoselectfamilyattempttimeout" tabindex="-1"><code>net.getDefaultAutoSelectFamilyAttemptTimeout()</code> <a class="header-anchor" href="#netgetdefaultautoselectfamilyattempttimeout" aria-label="Permalink to “net.getDefaultAutoSelectFamilyAttemptTimeout()”">​</a></h2><p><strong>新增于: v19.8.0, v18.18.0</strong></p><p>获取 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options)</code></a> 的 <code>autoSelectFamilyAttemptTimeout</code> 选项的当前默认值。 初始默认值为 <code>250</code> 或通过命令行选项 <code>--network-family-autoselection-attempt-timeout</code> 指定的值。</p><ul><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <code>autoSelectFamilyAttemptTimeout</code> 选项的当前默认值。</li></ul><h2 id="netsetdefaultautoselectfamilyattempttimeoutvalue" tabindex="-1"><code>net.setDefaultAutoSelectFamilyAttemptTimeout(value)</code> <a class="header-anchor" href="#netsetdefaultautoselectfamilyattempttimeoutvalue" aria-label="Permalink to “net.setDefaultAutoSelectFamilyAttemptTimeout(value)”">​</a></h2><p><strong>新增于: v19.8.0, v18.18.0</strong></p><p>设置 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect(options)</code></a> 的 <code>autoSelectFamilyAttemptTimeout</code> 选项的默认值。</p><ul><li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 新的默认值，必须为正数。 如果该数字小于 <code>10</code>，则改用值 <code>10</code>。 初始默认值为 <code>250</code> 或通过命令行选项 <code>--network-family-autoselection-attempt-timeout</code> 指定的值。</li></ul><h2 id="netisipinput" tabindex="-1"><code>net.isIP(input)</code> <a class="header-anchor" href="#netisipinput" aria-label="Permalink to “net.isIP(input)”">​</a></h2><p><strong>新增于: v0.3.0</strong></p><ul><li><code>input</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a></li></ul><p>如果 <code>input</code> 是 IPv6 地址，则返回 <code>6</code>。 如果 <code>input</code> 是没有前导零的 <a href="https://en.wikipedia.org/wiki/Dot-decimal_notation" target="_blank" rel="noreferrer">点分十进制表示法</a> 的 IPv4 地址，则返回 <code>4</code>。 否则，返回 <code>0</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;::1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.000.000.001&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1/24&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fhqwhgads&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="netisipv4input" tabindex="-1"><code>net.isIPv4(input)</code> <a class="header-anchor" href="#netisipv4input" aria-label="Permalink to “net.isIPv4(input)”">​</a></h2><p><strong>新增于: v0.3.0</strong></p><ul><li><code>input</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果 <code>input</code> 是没有前导零的 <a href="https://en.wikipedia.org/wiki/Dot-decimal_notation" target="_blank" rel="noreferrer">点分十进制表示法</a> 的 IPv4 地址，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIPv4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIPv4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.000.000.001&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIPv4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1/24&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIPv4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fhqwhgads&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="netisipv6input" tabindex="-1"><code>net.isIPv6(input)</code> <a class="header-anchor" href="#netisipv6input" aria-label="Permalink to “net.isIPv6(input)”">​</a></h2><p><strong>新增于: v0.3.0</strong></p><ul><li><code>input</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果 <code>input</code> 是 IPv6 地址，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIPv6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;::1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIPv6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fhqwhgads&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,469)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};