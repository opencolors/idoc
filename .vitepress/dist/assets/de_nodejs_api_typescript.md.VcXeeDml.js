import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"TypeScript-Unterstützung in Node.js","description":"Erfahren Sie, wie Sie TypeScript mit Node.js verwenden, einschließlich Installation, Konfiguration und Best Practices zur Integration von TypeScript in Ihre Node.js-Projekte.","frontmatter":{"title":"TypeScript-Unterstützung in Node.js","description":"Erfahren Sie, wie Sie TypeScript mit Node.js verwenden, einschließlich Installation, Konfiguration und Best Practices zur Integration von TypeScript in Ihre Node.js-Projekte.","head":[["meta",{"name":"og:title","content":"TypeScript-Unterstützung in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Erfahren Sie, wie Sie TypeScript mit Node.js verwenden, einschließlich Installation, Konfiguration und Best Practices zur Integration von TypeScript in Ihre Node.js-Projekte."}],["meta",{"name":"twitter:title","content":"TypeScript-Unterstützung in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Erfahren Sie, wie Sie TypeScript mit Node.js verwenden, einschließlich Installation, Konfiguration und Best Practices zur Integration von TypeScript in Ihre Node.js-Projekte."}],["link",{"rel":"canonical","href":"https://idoc.dev/de/nodejs/api/typescript"}],["meta",{"property":"og:url","content":"https://idoc.dev/de/nodejs/api/typescript"}]]},"headers":[],"relativePath":"de/nodejs/api/typescript.md","filePath":"de/nodejs/api/typescript.md","lastUpdated":1749464498000}`),a={name:`de/nodejs/api/typescript.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="modules-typescript" tabindex="-1">Module: TypeScript <a class="header-anchor" href="#modules-typescript" aria-label="Permalink to “Module: TypeScript”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[Historie]</p><table tabindex="0"><thead><tr><th>Version</th><th>Änderungen</th></tr></thead><tbody><tr><td>v22.7.0</td><td>Flag <code>--experimental-transform-types</code> hinzugefügt.</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[Stabil: 1 - Experimentell]</p><p><a href="/de/nodejs/api/documentation#stability-index">Stabil: 1</a> <a href="/de/nodejs/api/documentation#stability-index">Stabilität: 1</a>.1 - Aktive Entwicklung</p></div><h2 id="enabling" tabindex="-1">Aktivieren <a class="header-anchor" href="#enabling" aria-label="Permalink to “Aktivieren”">​</a></h2><p>Es gibt zwei Möglichkeiten, die TypeScript-Runtime-Unterstützung in Node.js zu aktivieren:</p><h2 id="full-typescript-support" tabindex="-1">Volle TypeScript-Unterstützung <a class="header-anchor" href="#full-typescript-support" aria-label="Permalink to “Volle TypeScript-Unterstützung”">​</a></h2><p>Um TypeScript mit voller Unterstützung für alle TypeScript-Funktionen, einschließlich <code>tsconfig.json</code>, zu verwenden, können Sie ein Paket von Drittanbietern verwenden. Diese Anweisungen verwenden <a href="https://tsx.is/" target="_blank" rel="noreferrer"><code>tsx</code></a> als Beispiel, aber es gibt viele andere ähnliche Bibliotheken.</p><h2 id="type-stripping" tabindex="-1">Typ-Stripping <a class="header-anchor" href="#type-stripping" aria-label="Permalink to “Typ-Stripping”">​</a></h2><p><strong>Hinzugefügt in: v22.6.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stabil: 1 - Experimentell]</p><p><a href="/de/nodejs/api/documentation#stability-index">Stabil: 1</a> <a href="/de/nodejs/api/documentation#stability-index">Stabilität: 1</a>.1 - Aktive Entwicklung</p></div><p>Das Flag <a href="/de/nodejs/api/cli#experimental-strip-types"><code>--experimental-strip-types</code></a> ermöglicht Node.js die Ausführung von TypeScript-Dateien. Standardmäßig führt Node.js nur Dateien aus, die keine TypeScript-Funktionen enthalten, die eine Transformation erfordern, wie z. B. Enums oder Namespaces. Node.js ersetzt Inline-Typannotationen durch Leerzeichen, und es wird keine Typüberprüfung durchgeführt. Um die Transformation solcher Funktionen zu aktivieren, verwenden Sie das Flag <a href="/de/nodejs/api/cli#experimental-transform-types"><code>--experimental-transform-types</code></a>. TypeScript-Funktionen, die von Einstellungen innerhalb von <code>tsconfig.json</code> abhängen, wie z. B. Pfade oder die Konvertierung neuerer JavaScript-Syntax in ältere Standards, werden absichtlich nicht unterstützt. Um vollständige TypeScript-Unterstützung zu erhalten, siehe <a href="/de/nodejs/api/typescript#full-typescript-support">Volle TypeScript-Unterstützung</a>.</p><p>Die Typ-Stripping-Funktion ist als schlank konzipiert. Indem absichtlich keine Syntaxen unterstützt werden, die JavaScript-Code-Generierung erfordern, und indem Inline-Typen durch Leerzeichen ersetzt werden, kann Node.js TypeScript-Code ausführen, ohne dass Quellzuordnungen erforderlich sind.</p><p>Typ-Stripping funktioniert mit den meisten Versionen von TypeScript, wir empfehlen jedoch Version 5.7 oder neuer mit den folgenden <code>tsconfig.json</code>-Einstellungen:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esnext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nodenext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;allowImportingTsExtensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;rewriteRelativeImportExtensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;verbatimModuleSyntax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="determining-module-system" tabindex="-1">Modulsystem bestimmen <a class="header-anchor" href="#determining-module-system" aria-label="Permalink to “Modulsystem bestimmen”">​</a></h3><p>Node.js unterstützt sowohl <a href="/de/nodejs/api/modules">CommonJS</a> als auch <a href="/de/nodejs/api/esm">ES Modules</a> Syntax in TypeScript-Dateien. Node.js konvertiert nicht von einem Modulsystem in ein anderes; wenn Ihr Code als ES-Modul ausgeführt werden soll, müssen Sie die <code>import</code>- und <code>export</code>-Syntax verwenden, und wenn Ihr Code als CommonJS ausgeführt werden soll, müssen Sie <code>require</code> und <code>module.exports</code> verwenden.</p><ul><li><code>.ts</code>-Dateien haben ihr Modulsystem <a href="/de/nodejs/api/packages#determining-module-system">auf die gleiche Weise bestimmt wie <code>.js</code>-Dateien.</a> Um die <code>import</code>- und <code>export</code>-Syntax zu verwenden, fügen Sie <code>„type&quot;: &quot;module&quot;</code> zum nächstgelegenen übergeordneten <code>package.json</code> hinzu.</li><li><code>.mts</code>-Dateien werden immer als ES-Module ausgeführt, ähnlich wie <code>.mjs</code>-Dateien.</li><li><code>.cts</code>-Dateien werden immer als CommonJS-Module ausgeführt, ähnlich wie <code>.cjs</code>-Dateien.</li><li><code>.tsx</code>-Dateien werden nicht unterstützt.</li></ul><p>Wie in JavaScript-Dateien sind <a href="/de/nodejs/api/esm#mandatory-file-extensions">Dateierweiterungen in <code>import</code>-Anweisungen und <code>import()</code>-Ausdrücken obligatorisch</a>: <code>import &#39;./file.ts&#39;</code>, nicht <code>import &#39;./file&#39;</code>. Aus Gründen der Abwärtskompatibilität sind Dateierweiterungen auch in <code>require()</code>-Aufrufen obligatorisch: <code>require(&#39;./file.ts&#39;)</code>, nicht <code>require(&#39;./file&#39;)</code>, ähnlich wie die <code>.cjs</code>-Erweiterung in <code>require</code>-Aufrufen in CommonJS-Dateien obligatorisch ist.</p><p>Die <code>tsconfig.json</code>-Option <code>allowImportingTsExtensions</code> ermöglicht es dem TypeScript-Compiler <code>tsc</code>, Dateien mit <code>import</code>-Spezifizierern zu typisieren, die die <code>.ts</code>-Erweiterung enthalten.</p><h3 id="typescript-features" tabindex="-1">TypeScript-Funktionen <a class="header-anchor" href="#typescript-features" aria-label="Permalink to “TypeScript-Funktionen”">​</a></h3><p>Da Node.js nur Inline-Typen entfernt, führen alle TypeScript-Funktionen, bei denen die TypeScript-Syntax <em>durch neue JavaScript-Syntax ersetzt</em> wird, zu einem Fehler, es sei denn, das Flag <a href="/de/nodejs/api/cli#experimental-transform-types"><code>--experimental-transform-types</code></a> wird übergeben.</p><p>Die wichtigsten Funktionen, die eine Transformation erfordern, sind:</p><ul><li><code>Enum</code></li><li><code>namespaces</code></li><li><code>legacy module</code></li><li>Parameter Properties</li></ul><p>Da Decorators derzeit ein <a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noreferrer">TC39 Stage 3 Proposal</a> sind und bald von der JavaScript-Engine unterstützt werden, werden sie nicht transformiert und führen zu einem Parserfehler. Dies ist eine vorübergehende Einschränkung und wird in Zukunft behoben.</p><p>Darüber hinaus liest Node.js keine <code>tsconfig.json</code>-Dateien und unterstützt keine Funktionen, die von Einstellungen innerhalb von <code>tsconfig.json</code> abhängen, wie z. B. Pfade oder das Konvertieren neuerer JavaScript-Syntax in ältere Standards.</p><h3 id="importing-types-without-type-keyword" tabindex="-1">Importieren von Typen ohne das Schlüsselwort <code>type</code> <a class="header-anchor" href="#importing-types-without-type-keyword" aria-label="Permalink to “Importieren von Typen ohne das Schlüsselwort type”">​</a></h3><p>Aufgrund der Natur des Typ-Strippings ist das Schlüsselwort <code>type</code> notwendig, um Typ-Importe korrekt zu entfernen. Ohne das Schlüsselwort <code>type</code> behandelt Node.js den Import als Wert-Import, was zu einem Laufzeitfehler führt. Die tsconfig-Option <a href="https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax" target="_blank" rel="noreferrer"><code>verbatimModuleSyntax</code></a> kann verwendet werden, um dieses Verhalten anzupassen.</p><p>Dieses Beispiel funktioniert korrekt:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Type1, Type2 } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fn, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FnParams } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./fn.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Dies führt zu einem Laufzeitfehler:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Type1, Type2 } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fn, FnParams } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./fn.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="non-file-forms-of-input" tabindex="-1">Nicht-Datei-Formen der Eingabe <a class="header-anchor" href="#non-file-forms-of-input" aria-label="Permalink to “Nicht-Datei-Formen der Eingabe”">​</a></h3><p>Type-Stripping kann für <code>--eval</code> aktiviert werden. Das Modulsystem wird durch <code>--input-type</code> bestimmt, wie es auch für JavaScript der Fall ist.</p><p>TypeScript-Syntax wird in REPL, STDIN-Eingabe, <code>--print</code>, <code>--check</code> und <code>inspect</code> nicht unterstützt.</p><h3 id="source-maps" tabindex="-1">Source Maps <a class="header-anchor" href="#source-maps" aria-label="Permalink to “Source Maps”">​</a></h3><p>Da Inline-Typen durch Leerzeichen ersetzt werden, sind Source Maps für korrekte Zeilennummern in Stacktraces unnötig; und Node.js generiert sie nicht. Wenn <a href="/de/nodejs/api/cli#experimental-transform-types"><code>--experimental-transform-types</code></a> aktiviert ist, sind Source-Maps standardmäßig aktiviert.</p><h3 id="type-stripping-in-dependencies" tabindex="-1">Type-Stripping in Abhängigkeiten <a class="header-anchor" href="#type-stripping-in-dependencies" aria-label="Permalink to “Type-Stripping in Abhängigkeiten”">​</a></h3><p>Um Paketautoren davon abzuhalten, in TypeScript geschriebene Pakete zu veröffentlichen, weigert sich Node.js standardmäßig, TypeScript-Dateien in Ordnern unter einem <code>node_modules</code>-Pfad zu verarbeiten.</p><h3 id="paths-aliases" tabindex="-1">Pfad-Aliase <a class="header-anchor" href="#paths-aliases" aria-label="Permalink to “Pfad-Aliase”">​</a></h3><p><a href="https://www.typescriptlang.org/tsconfig/#paths" target="_blank" rel="noreferrer"><code>tsconfig</code> &quot;paths&quot;</a> werden nicht transformiert und erzeugen daher einen Fehler. Das nächstgelegene verfügbare Feature sind <a href="/de/nodejs/api/packages#subpath-imports">Subpath-Importe</a> mit der Einschränkung, dass sie mit <code>#</code> beginnen müssen.</p>`,40)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};