import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js Packages Documentation","description":"Explore the official Node.js documentation on packages, including how to manage, create, and publish packages, along with details on package.json, dependencies, and package management tools.","frontmatter":{"title":"Node.js Packages Documentation","description":"Explore the official Node.js documentation on packages, including how to manage, create, and publish packages, along with details on package.json, dependencies, and package management tools.","head":[["meta",{"name":"og:title","content":"Node.js Packages Documentation | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Explore the official Node.js documentation on packages, including how to manage, create, and publish packages, along with details on package.json, dependencies, and package management tools."}],["meta",{"name":"twitter:title","content":"Node.js Packages Documentation | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Explore the official Node.js documentation on packages, including how to manage, create, and publish packages, along with details on package.json, dependencies, and package management tools."}],["link",{"rel":"canonical","href":"https://idoc.dev/nodejs/api/packages"}],["meta",{"property":"og:url","content":"https://idoc.dev/nodejs/api/packages"}]]},"headers":[],"relativePath":"nodejs/api/packages.md","filePath":"en/nodejs/api/packages.md","lastUpdated":null}`),a={name:`nodejs/api/packages.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="modules-packages" tabindex="-1">Modules: Packages <a class="header-anchor" href="#modules-packages" aria-label="Permalink to “Modules: Packages”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v14.13.0, v12.20.0</td><td>Add support for <code>&quot;exports&quot;</code> patterns.</td></tr><tr><td>v14.6.0, v12.19.0</td><td>Add package <code>&quot;imports&quot;</code> field.</td></tr><tr><td>v13.7.0, v12.17.0</td><td>Unflag conditional exports.</td></tr><tr><td>v13.7.0, v12.16.0</td><td>Remove the <code>--experimental-conditional-exports</code> option. In 12.16.0, conditional exports are still behind <code>--experimental-modules</code>.</td></tr><tr><td>v13.6.0, v12.16.0</td><td>Unflag self-referencing a package using its name.</td></tr><tr><td>v12.7.0</td><td>Introduce <code>&quot;exports&quot;</code> <code>package.json</code> field as a more powerful alternative to the classic <code>&quot;main&quot;</code> field.</td></tr><tr><td>v12.0.0</td><td>Add support for ES modules using <code>.js</code> file extension via <code>package.json</code> <code>&quot;type&quot;</code> field.</td></tr></tbody></table></div><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to “Introduction”">​</a></h2><p>A package is a folder tree described by a <code>package.json</code> file. The package consists of the folder containing the <code>package.json</code> file and all subfolders until the next folder containing another <code>package.json</code> file, or a folder named <code>node_modules</code>.</p><p>This page provides guidance for package authors writing <code>package.json</code> files along with a reference for the <a href="/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> fields defined by Node.js.</p><h2 id="determining-module-system" tabindex="-1">Determining module system <a class="header-anchor" href="#determining-module-system" aria-label="Permalink to “Determining module system”">​</a></h2><h3 id="introduction_1" tabindex="-1">Introduction <a class="header-anchor" href="#introduction_1" aria-label="Permalink to “Introduction”">​</a></h3><p>Node.js will treat the following as <a href="/nodejs/api/esm">ES modules</a> when passed to <code>node</code> as the initial input, or when referenced by <code>import</code> statements or <code>import()</code> expressions:</p><ul><li>Files with an <code>.mjs</code> extension.</li><li>Files with a <code>.js</code> extension when the nearest parent <code>package.json</code> file contains a top-level <a href="/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> field with a value of <code>&quot;module&quot;</code>.</li><li>Strings passed in as an argument to <code>--eval</code>, or piped to <code>node</code> via <code>STDIN</code>, with the flag <code>--input-type=module</code>.</li><li>Code containing syntax only successfully parsed as <a href="/nodejs/api/esm">ES modules</a>, such as <code>import</code> or <code>export</code> statements or <code>import.meta</code>, with no explicit marker of how it should be interpreted. Explicit markers are <code>.mjs</code> or <code>.cjs</code> extensions, <code>package.json</code> <code>&quot;type&quot;</code> fields with either <code>&quot;module&quot;</code> or <code>&quot;commonjs&quot;</code> values, or the <code>--input-type</code> flag. Dynamic <code>import()</code> expressions are supported in either CommonJS or ES modules and would not force a file to be treated as an ES module. See <a href="/nodejs/api/packages#syntax-detection">Syntax detection</a>.</li></ul><p>Node.js will treat the following as <a href="/nodejs/api/modules">CommonJS</a> when passed to <code>node</code> as the initial input, or when referenced by <code>import</code> statements or <code>import()</code> expressions:</p><ul><li>Files with a <code>.cjs</code> extension.</li><li>Files with a <code>.js</code> extension when the nearest parent <code>package.json</code> file contains a top-level field <a href="/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> with a value of <code>&quot;commonjs&quot;</code>.</li><li>Strings passed in as an argument to <code>--eval</code> or <code>--print</code>, or piped to <code>node</code> via <code>STDIN</code>, with the flag <code>--input-type=commonjs</code>.</li><li>Files with a <code>.js</code> extension with no parent <code>package.json</code> file or where the nearest parent <code>package.json</code> file lacks a <code>type</code> field, and where the code can evaluate successfully as CommonJS. In other words, Node.js tries to run such &quot;ambiguous&quot; files as CommonJS first, and will retry evaluating them as ES modules if the evaluation as CommonJS fails because the parser found ES module syntax.</li></ul><p>Writing ES module syntax in &quot;ambiguous&quot; files incurs a performance cost, and therefore it is encouraged that authors be explicit wherever possible. In particular, package authors should always include the <a href="/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> field in their <code>package.json</code> files, even in packages where all sources are CommonJS. Being explicit about the <code>type</code> of the package will future-proof the package in case the default type of Node.js ever changes, and it will also make things easier for build tools and loaders to determine how the files in the package should be interpreted.</p><h3 id="syntax-detection" tabindex="-1">Syntax detection <a class="header-anchor" href="#syntax-detection" aria-label="Permalink to “Syntax detection”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v22.7.0</td><td>Syntax detection is enabled by default.</td></tr><tr><td>v21.1.0, v20.10.0</td><td>Added in: v21.1.0, v20.10.0</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/nodejs/api/documentation#stability-index">Stability: 1</a>.2 - Release candidate</p></div><p>Node.js will inspect the source code of ambiguous input to determine whether it contains ES module syntax; if such syntax is detected, the input will be treated as an ES module.</p><p>Ambiguous input is defined as:</p><ul><li>Files with a <code>.js</code> extension or no extension; and either no controlling <code>package.json</code> file or one that lacks a <code>type</code> field.</li><li>String input (<code>--eval</code> or <code>STDIN</code>) when <code>--input-type</code>is not specified.</li></ul><p>ES module syntax is defined as syntax that would throw when evaluated as CommonJS. This includes the following:</p><ul><li><code>import</code> statements (but <em>not</em> <code>import()</code> expressions, which are valid in CommonJS).</li><li><code>export</code> statements.</li><li><code>import.meta</code> references.</li><li><code>await</code> at the top level of a module.</li><li>Lexical redeclarations of the CommonJS wrapper variables (<code>require</code>, <code>module</code>, <code>exports</code>, <code>__dirname</code>, <code>__filename</code>).</li></ul><h3 id="modules-loaders" tabindex="-1">Modules loaders <a class="header-anchor" href="#modules-loaders" aria-label="Permalink to “Modules loaders”">​</a></h3><p>Node.js has two systems for resolving a specifier and loading modules.</p><p>There is the CommonJS module loader:</p><ul><li>It is fully synchronous.</li><li>It is responsible for handling <code>require()</code> calls.</li><li>It is monkey patchable.</li><li>It supports <a href="/nodejs/api/modules#folders-as-modules">folders as modules</a>.</li><li>When resolving a specifier, if no exact match is found, it will try to add extensions (<code>.js</code>, <code>.json</code>, and finally <code>.node</code>) and then attempt to resolve <a href="/nodejs/api/modules#folders-as-modules">folders as modules</a>.</li><li>It treats <code>.json</code> as JSON text files.</li><li><code>.node</code> files are interpreted as compiled addon modules loaded with <code>process.dlopen()</code>.</li><li>It treats all files that lack <code>.json</code> or <code>.node</code> extensions as JavaScript text files.</li><li>It can only be used to <a href="/nodejs/api/modules#loading-ecmascript-modules-using-require">load ECMAScript modules from CommonJS modules</a> if the module graph is synchronous (that contains no top-level <code>await</code>). When used to load a JavaScript text file that is not an ECMAScript module, the file will be loaded as a CommonJS module.</li></ul><p>There is the ECMAScript module loader:</p><ul><li>It is asynchronous, unless it&#39;s being used to load modules for <code>require()</code>.</li><li>It is responsible for handling <code>import</code> statements and <code>import()</code> expressions.</li><li>It is not monkey patchable, can be customized using <a href="/nodejs/api/esm#loaders">loader hooks</a>.</li><li>It does not support folders as modules, directory indexes (e.g. <code>&#39;./startup/index.js&#39;</code>) must be fully specified.</li><li>It does no extension searching. A file extension must be provided when the specifier is a relative or absolute file URL.</li><li>It can load JSON modules, but an import type attribute is required.</li><li>It accepts only <code>.js</code>, <code>.mjs</code>, and <code>.cjs</code> extensions for JavaScript text files.</li><li>It can be used to load JavaScript CommonJS modules. Such modules are passed through the <code>cjs-module-lexer</code> to try to identify named exports, which are available if they can be determined through static analysis. Imported CommonJS modules have their URLs converted to absolute paths and are then loaded via the CommonJS module loader.</li></ul><h3 id="packagejson-and-file-extensions" tabindex="-1"><code>package.json</code> and file extensions <a class="header-anchor" href="#packagejson-and-file-extensions" aria-label="Permalink to “package.json and file extensions”">​</a></h3><p>Within a package, the <a href="/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> <a href="/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> field defines how Node.js should interpret <code>.js</code> files. If a <code>package.json</code> file does not have a <code>&quot;type&quot;</code> field, <code>.js</code> files are treated as <a href="/nodejs/api/modules">CommonJS</a>.</p><p>A <code>package.json</code> <code>&quot;type&quot;</code> value of <code>&quot;module&quot;</code> tells Node.js to interpret <code>.js</code> files within that package as using <a href="/nodejs/api/esm">ES module</a> syntax.</p><p>The <code>&quot;type&quot;</code> field applies not only to initial entry points (<code>node my-app.js</code>) but also to files referenced by <code>import</code> statements and <code>import()</code> expressions.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// my-app.js, treated as an ES module because there is a package.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file in the same folder with &quot;type&quot;: &quot;module&quot;.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./startup/init.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Loaded as ES module since ./startup contains no package.json file,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// and therefore inherits the &quot;type&quot; value from one level up.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;commonjs-package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Loaded as CommonJS since ./node_modules/commonjs-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lacks a &quot;type&quot; field or contains &quot;type&quot;: &quot;commonjs&quot;.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./node_modules/commonjs-package/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Loaded as CommonJS since ./node_modules/commonjs-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lacks a &quot;type&quot; field or contains &quot;type&quot;: &quot;commonjs&quot;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Files ending with <code>.mjs</code> are always loaded as <a href="/nodejs/api/esm">ES modules</a> regardless of the nearest parent <code>package.json</code>.</p><p>Files ending with <code>.cjs</code> are always loaded as <a href="/nodejs/api/modules">CommonJS</a> regardless of the nearest parent <code>package.json</code>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./legacy-file.cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Loaded as CommonJS since .cjs is always loaded as CommonJS.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;commonjs-package/src/index.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Loaded as ES module since .mjs is always loaded as ES module.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The <code>.mjs</code> and <code>.cjs</code> extensions can be used to mix types within the same package:</p><ul><li>Within a <code>&quot;type&quot;: &quot;module&quot;</code> package, Node.js can be instructed to interpret a particular file as <a href="/nodejs/api/modules">CommonJS</a> by naming it with a <code>.cjs</code> extension (since both <code>.js</code> and <code>.mjs</code> files are treated as ES modules within a <code>&quot;module&quot;</code> package).</li><li>Within a <code>&quot;type&quot;: &quot;commonjs&quot;</code> package, Node.js can be instructed to interpret a particular file as an <a href="/nodejs/api/esm">ES module</a> by naming it with an <code>.mjs</code> extension (since both <code>.js</code> and <code>.cjs</code> files are treated as CommonJS within a <code>&quot;commonjs&quot;</code> package).</li></ul><h3 id="--input-type-flag" tabindex="-1"><code>--input-type</code> flag <a class="header-anchor" href="#--input-type-flag" aria-label="Permalink to “--input-type flag”">​</a></h3><p><strong>Added in: v12.0.0</strong></p><p>Strings passed in as an argument to <code>--eval</code> (or <code>-e</code>), or piped to <code>node</code> via <code>STDIN</code>, are treated as <a href="/nodejs/api/esm">ES modules</a> when the <code>--input-type=module</code> flag is set.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --input-type=module</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;import { sep } from &#39;node:path&#39;; console.log(sep);&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;import { sep } from &#39;node:path&#39;; console.log(sep);&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --input-type=module</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>For completeness there is also <code>--input-type=commonjs</code>, for explicitly running string input as CommonJS. This is the default behavior if <code>--input-type</code> is unspecified.</p><h2 id="determining-package-manager" tabindex="-1">Determining package manager <a class="header-anchor" href="#determining-package-manager" aria-label="Permalink to “Determining package manager”">​</a></h2><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/nodejs/api/documentation#stability-index">Stability: 1</a> - Experimental</p></div><p>While all Node.js projects are expected to be installable by all package managers once published, their development teams are often required to use one specific package manager. To make this process easier, Node.js ships with a tool called <a href="/nodejs/api/corepack">Corepack</a> that aims to make all package managers transparently available in your environment - provided you have Node.js installed.</p><p>By default Corepack won&#39;t enforce any specific package manager and will use the generic &quot;Last Known Good&quot; versions associated with each Node.js release, but you can improve this experience by setting the <a href="/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> field in your project&#39;s <code>package.json</code>.</p><h2 id="package-entry-points" tabindex="-1">Package entry points <a class="header-anchor" href="#package-entry-points" aria-label="Permalink to “Package entry points”">​</a></h2><p>In a package&#39;s <code>package.json</code> file, two fields can define entry points for a package: <a href="/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> and <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>. Both fields apply to both ES module and CommonJS module entry points.</p><p>The <a href="/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> field is supported in all versions of Node.js, but its capabilities are limited: it only defines the main entry point of the package.</p><p>The <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> provides a modern alternative to <a href="/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> allowing multiple entry points to be defined, conditional entry resolution support between environments, and <strong>preventing any other entry points besides those defined in <a href="#exports"><code>&quot;exports&quot;</code></a></strong>. This encapsulation allows module authors to clearly define the public interface for their package.</p><p>For new packages targeting the currently supported versions of Node.js, the <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> field is recommended. For packages supporting Node.js 10 and below, the <a href="/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> field is required. If both <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> and <a href="/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> are defined, the <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> field takes precedence over <a href="/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> in supported versions of Node.js.</p><p><a href="/nodejs/api/packages#conditional-exports">Conditional exports</a> can be used within <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> to define different package entry points per environment, including whether the package is referenced via <code>require</code> or via <code>import</code>. For more information about supporting both CommonJS and ES modules in a single package please consult <a href="/nodejs/api/packages#dual-commonjses-module-packages">the dual CommonJS/ES module packages section</a>.</p><p>Existing packages introducing the <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> field will prevent consumers of the package from using any entry points that are not defined, including the <a href="/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> (e.g. <code>require(&#39;your-package/package.json&#39;)</code>). <strong>This will likely be a breaking change.</strong></p><p>To make the introduction of <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> non-breaking, ensure that every previously supported entry point is exported. It is best to explicitly specify entry points so that the package&#39;s public API is well-defined. For example, a project that previously exported <code>main</code>, <code>lib</code>, <code>feature</code>, and the <code>package.json</code> could use the following <code>package.exports</code>:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./package.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Alternatively a project could choose to export entire folders both with and without extensioned subpaths using export patterns:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./package.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>With the above providing backwards-compatibility for any minor package versions, a future major change for the package can then properly restrict the exports to only the specific feature exports exposed:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/internal/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="main-entry-point-export" tabindex="-1">Main entry point export <a class="header-anchor" href="#main-entry-point-export" aria-label="Permalink to “Main entry point export”">​</a></h3><p>When writing a new package, it is recommended to use the <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> field:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>When the <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> field is defined, all subpaths of the package are encapsulated and no longer available to importers. For example, <code>require(&#39;pkg/subpath.js&#39;)</code> throws an <a href="/nodejs/api/errors#err-package-path-not-exported"><code>ERR_PACKAGE_PATH_NOT_EXPORTED</code></a> error.</p><p>This encapsulation of exports provides more reliable guarantees about package interfaces for tools and when handling semver upgrades for a package. It is not a strong encapsulation since a direct require of any absolute subpath of the package such as <code>require(&#39;/path/to/node_modules/pkg/subpath.js&#39;)</code> will still load <code>subpath.js</code>.</p><p>All currently supported versions of Node.js and modern build tools support the <code>&quot;exports&quot;</code> field. For projects using an older version of Node.js or a related build tool, compatibility can be achieved by including the <code>&quot;main&quot;</code> field alongside <code>&quot;exports&quot;</code> pointing to the same module:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="subpath-exports" tabindex="-1">Subpath exports <a class="header-anchor" href="#subpath-exports" aria-label="Permalink to “Subpath exports”">​</a></h3><p><strong>Added in: v12.7.0</strong></p><p>When using the <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> field, custom subpaths can be defined along with the main entry point by treating the main entry point as the <code>&quot;.&quot;</code> subpath:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./submodule.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/submodule.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Now only the defined subpath in <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> can be imported by a consumer:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> submodule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/submodule.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Loads ./node_modules/es-module-package/src/submodule.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>While other subpaths will error:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> submodule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/private-module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Throws ERR_PACKAGE_PATH_NOT_EXPORTED</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="extensions-in-subpaths" tabindex="-1">Extensions in subpaths <a class="header-anchor" href="#extensions-in-subpaths" aria-label="Permalink to “Extensions in subpaths”">​</a></h4><p>Package authors should provide either extensioned (<code>import &#39;pkg/subpath.js&#39;</code>) or extensionless (<code>import &#39;pkg/subpath&#39;</code>) subpaths in their exports. This ensures that there is only one subpath for each exported module so that all dependents import the same consistent specifier, keeping the package contract clear for consumers and simplifying package subpath completions.</p><p>Traditionally, packages tended to use the extensionless style, which has the benefits of readability and of masking the true path of the file within the package.</p><p>With <a href="https://github.com/WICG/import-maps" target="_blank" rel="noreferrer">import maps</a> now providing a standard for package resolution in browsers and other JavaScript runtimes, using the extensionless style can result in bloated import map definitions. Explicit file extensions can avoid this issue by enabling the import map to utilize a <a href="https://github.com/WICG/import-maps#packages-via-trailing-slashes" target="_blank" rel="noreferrer">packages folder mapping</a> to map multiple subpaths where possible instead of a separate map entry per package subpath export. This also mirrors the requirement of using <a href="/nodejs/api/esm#mandatory-file-extensions">the full specifier path</a> in relative and absolute import specifiers.</p><h3 id="exports-sugar" tabindex="-1">Exports sugar <a class="header-anchor" href="#exports-sugar" aria-label="Permalink to “Exports sugar”">​</a></h3><p><strong>Added in: v12.11.0</strong></p><p>If the <code>&quot;.&quot;</code> export is the only export, the <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> field provides sugar for this case being the direct <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> field value.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>can be written:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="subpath-imports" tabindex="-1">Subpath imports <a class="header-anchor" href="#subpath-imports" aria-label="Permalink to “Subpath imports”">​</a></h3><p><strong>Added in: v14.6.0, v12.19.0</strong></p><p>In addition to the <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> field, there is a package <code>&quot;imports&quot;</code> field to create private mappings that only apply to import specifiers from within the package itself.</p><p>Entries in the <code>&quot;imports&quot;</code> field must always start with <code>#</code> to ensure they are disambiguated from external package specifiers.</p><p>For example, the imports field can be used to gain the benefits of conditional exports for internal modules:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#dep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dep-polyfill.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>where <code>import &#39;#dep&#39;</code> does not get the resolution of the external package <code>dep-node-native</code> (including its exports in turn), and instead gets the local file <code>./dep-polyfill.js</code> relative to the package in other environments.</p><p>Unlike the <code>&quot;exports&quot;</code> field, the <code>&quot;imports&quot;</code> field permits mapping to external packages.</p><p>The resolution rules for the imports field are otherwise analogous to the exports field.</p><h3 id="subpath-patterns" tabindex="-1">Subpath patterns <a class="header-anchor" href="#subpath-patterns" aria-label="Permalink to “Subpath patterns”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v16.10.0, v14.19.0</td><td>Support pattern trailers in &quot;imports&quot; field.</td></tr><tr><td>v16.9.0, v14.19.0</td><td>Support pattern trailers.</td></tr><tr><td>v14.13.0, v12.20.0</td><td>Added in: v14.13.0, v12.20.0</td></tr></tbody></table></div><p>For packages with a small number of exports or imports, we recommend explicitly listing each exports subpath entry. But for packages that have large numbers of subpaths, this might cause <code>package.json</code> bloat and maintenance issues.</p><p>For these use cases, subpath export patterns can be used instead:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/features/*.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#internal/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/internal/*.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong><code>*</code> maps expose nested subpaths as it is a string replacement syntax only.</strong></p><p>All instances of <code>*</code> on the right hand side will then be replaced with this value, including if it contains any <code>/</code> separators.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/x.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Loads ./node_modules/es-module-package/src/features/x.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/y/y.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Loads ./node_modules/es-module-package/src/features/y/y.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> internalZ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#internal/z.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Loads ./node_modules/es-module-package/src/internal/z.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>This is a direct static matching and replacement without any special handling for file extensions. Including the <code>&quot;*.js&quot;</code> on both sides of the mapping restricts the exposed package exports to only JS files.</p><p>The property of exports being statically enumerable is maintained with exports patterns since the individual exports for a package can be determined by treating the right hand side target pattern as a <code>**</code> glob against the list of files within the package. Because <code>node_modules</code> paths are forbidden in exports targets, this expansion is dependent on only the files of the package itself.</p><p>To exclude private subfolders from patterns, <code>null</code> targets can be used:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/private-internal/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureInternal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/private-internal/m.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Throws: ERR_PACKAGE_PATH_NOT_EXPORTED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/x.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Loads ./node_modules/es-module-package/src/features/x.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="conditional-exports" tabindex="-1">Conditional exports <a class="header-anchor" href="#conditional-exports" aria-label="Permalink to “Conditional exports”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v13.7.0, v12.16.0</td><td>Unflag conditional exports.</td></tr><tr><td>v13.2.0, v12.16.0</td><td>Added in: v13.2.0, v12.16.0</td></tr></tbody></table></div><p>Conditional exports provide a way to map to different paths depending on certain conditions. They are supported for both CommonJS and ES module imports.</p><p>For example, a package that wants to provide different ES module exports for <code>require()</code> and <code>import</code> can be written:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index-module.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index-require.cjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Node.js implements the following conditions, listed in order from most specific to least specific as conditions should be defined:</p><ul><li><code>&quot;node-addons&quot;</code> - similar to <code>&quot;node&quot;</code> and matches for any Node.js environment. This condition can be used to provide an entry point which uses native C++ addons as opposed to an entry point which is more universal and doesn&#39;t rely on native addons. This condition can be disabled via the <a href="/nodejs/api/cli#no-addons"><code>--no-addons</code> flag</a>.</li><li><code>&quot;node&quot;</code> - matches for any Node.js environment. Can be a CommonJS or ES module file. <em>In most cases explicitly calling out the Node.js platform is not necessary.</em></li><li><code>&quot;import&quot;</code> - matches when the package is loaded via <code>import</code> or <code>import()</code>, or via any top-level import or resolve operation by the ECMAScript module loader. Applies regardless of the module format of the target file. <em>Always mutually exclusive with <code>&quot;require&quot;</code>.</em></li><li><code>&quot;require&quot;</code> - matches when the package is loaded via <code>require()</code>. The referenced file should be loadable with <code>require()</code> although the condition matches regardless of the module format of the target file. Expected formats include CommonJS, JSON, native addons, and ES modules. <em>Always mutually exclusive with <code>&quot;import&quot;</code>.</em></li><li><code>&quot;module-sync&quot;</code> - matches no matter the package is loaded via <code>import</code>, <code>import()</code> or <code>require()</code>. The format is expected to be ES modules that does not contain top-level await in its module graph - if it does, <code>ERR_REQUIRE_ASYNC_MODULE</code> will be thrown when the module is <code>require()</code>-ed.</li><li><code>&quot;default&quot;</code> - the generic fallback that always matches. Can be a CommonJS or ES module file. <em>This condition should always come last.</em></li></ul><p>Within the <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> object, key order is significant. During condition matching, earlier entries have higher priority and take precedence over later entries. <em>The general rule is that conditions should be from most specific to least specific in object order</em>.</p><p>Using the <code>&quot;import&quot;</code> and <code>&quot;require&quot;</code> conditions can lead to some hazards, which are further explained in <a href="/nodejs/api/packages#dual-commonjses-module-packages">the dual CommonJS/ES module packages section</a>.</p><p>The <code>&quot;node-addons&quot;</code> condition can be used to provide an entry point which uses native C++ addons. However, this condition can be disabled via the <a href="/nodejs/api/cli#no-addons"><code>--no-addons</code> flag</a>. When using <code>&quot;node-addons&quot;</code>, it&#39;s recommended to treat <code>&quot;default&quot;</code> as an enhancement that provides a more universal entry point, e.g. using WebAssembly instead of a native addon.</p><p>Conditional exports can also be extended to exports subpaths, for example:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Defines a package where <code>require(&#39;pkg/feature.js&#39;)</code> and <code>import &#39;pkg/feature.js&#39;</code> could provide different implementations between Node.js and other JS environments.</p><p>When using environment branches, always include a <code>&quot;default&quot;</code> condition where possible. Providing a <code>&quot;default&quot;</code> condition ensures that any unknown JS environments are able to use this universal implementation, which helps avoid these JS environments from having to pretend to be existing environments in order to support packages with conditional exports. For this reason, using <code>&quot;node&quot;</code> and <code>&quot;default&quot;</code> condition branches is usually preferable to using <code>&quot;node&quot;</code> and <code>&quot;browser&quot;</code> condition branches.</p><h3 id="nested-conditions" tabindex="-1">Nested conditions <a class="header-anchor" href="#nested-conditions" aria-label="Permalink to “Nested conditions”">​</a></h3><p>In addition to direct mappings, Node.js also supports nested condition objects.</p><p>For example, to define a package that only has dual mode entry points for use in Node.js but not the browser:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.cjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature.mjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Conditions continue to be matched in order as with flat conditions. If a nested condition does not have any mapping it will continue checking the remaining conditions of the parent condition. In this way nested conditions behave analogously to nested JavaScript <code>if</code> statements.</p><h3 id="resolving-user-conditions" tabindex="-1">Resolving user conditions <a class="header-anchor" href="#resolving-user-conditions" aria-label="Permalink to “Resolving user conditions”">​</a></h3><p><strong>Added in: v14.9.0, v12.19.0</strong></p><p>When running Node.js, custom user conditions can be added with the <code>--conditions</code> flag:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --conditions=development</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>which would then resolve the <code>&quot;development&quot;</code> condition in package imports and exports, while resolving the existing <code>&quot;node&quot;</code>, <code>&quot;node-addons&quot;</code>, <code>&quot;default&quot;</code>, <code>&quot;import&quot;</code>, and <code>&quot;require&quot;</code> conditions as appropriate.</p><p>Any number of custom conditions can be set with repeat flags.</p><p>Typical conditions should only contain alphanumerical characters, using &quot;:&quot;, &quot;-&quot;, or &quot;=&quot; as separators if necessary. Anything else may run into compability issues outside of node.</p><p>In node, conditions have very few restrictions, but specifically these include:</p><h3 id="community-conditions-definitions" tabindex="-1">Community Conditions Definitions <a class="header-anchor" href="#community-conditions-definitions" aria-label="Permalink to “Community Conditions Definitions”">​</a></h3><p>Condition strings other than the <code>&quot;import&quot;</code>, <code>&quot;require&quot;</code>, <code>&quot;node&quot;</code>, <code>&quot;module-sync&quot;</code>, <code>&quot;node-addons&quot;</code> and <code>&quot;default&quot;</code> conditions <a href="/nodejs/api/packages#conditional-exports">implemented in Node.js core</a> are ignored by default.</p><p>Other platforms may implement other conditions and user conditions can be enabled in Node.js via the <a href="/nodejs/api/packages#resolving-user-conditions"><code>--conditions</code> / <code>-C</code> flag</a>.</p><p>Since custom package conditions require clear definitions to ensure correct usage, a list of common known package conditions and their strict definitions is provided below to assist with ecosystem coordination.</p><ul><li><code>&quot;types&quot;</code> - can be used by typing systems to resolve the typing file for the given export. <em>This condition should always be included first.</em></li><li><code>&quot;browser&quot;</code> - any web browser environment.</li><li><code>&quot;development&quot;</code> - can be used to define a development-only environment entry point, for example to provide additional debugging context such as better error messages when running in a development mode. <em>Must always be mutually exclusive with <code>&quot;production&quot;</code>.</em></li><li><code>&quot;production&quot;</code> - can be used to define a production environment entry point. <em>Must always be mutually exclusive with <code>&quot;development&quot;</code>.</em></li></ul><p>For other runtimes, platform-specific condition key definitions are maintained by the <a href="https://wintercg.org/" target="_blank" rel="noreferrer">WinterCG</a> in the <a href="https://runtime-keys.proposal.wintercg.org/" target="_blank" rel="noreferrer">Runtime Keys</a> proposal specification.</p><p>New conditions definitions may be added to this list by creating a pull request to the <a href="https://github.com/nodejs/node/blob/HEAD/doc/nodejs/api/packages.md#conditions-definitions" target="_blank" rel="noreferrer">Node.js documentation for this section</a>. The requirements for listing a new condition definition here are that:</p><ul><li>The definition should be clear and unambiguous for all implementers.</li><li>The use case for why the condition is needed should be clearly justified.</li><li>There should exist sufficient existing implementation usage.</li><li>The condition name should not conflict with another condition definition or condition in wide usage.</li><li>The listing of the condition definition should provide a coordination benefit to the ecosystem that wouldn&#39;t otherwise be possible. For example, this would not necessarily be the case for company-specific or application-specific conditions.</li><li>The condition should be such that a Node.js user would expect it to be in Node.js core documentation. The <code>&quot;types&quot;</code> condition is a good example: It doesn&#39;t really belong in the <a href="https://runtime-keys.proposal.wintercg.org/" target="_blank" rel="noreferrer">Runtime Keys</a> proposal but is a good fit here in the Node.js docs.</li></ul><p>The above definitions may be moved to a dedicated conditions registry in due course.</p><h3 id="self-referencing-a-package-using-its-name" tabindex="-1">Self-referencing a package using its name <a class="header-anchor" href="#self-referencing-a-package-using-its-name" aria-label="Permalink to “Self-referencing a package using its name”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v13.6.0, v12.16.0</td><td>Unflag self-referencing a package using its name.</td></tr><tr><td>v13.1.0, v12.16.0</td><td>Added in: v13.1.0, v12.16.0</td></tr></tbody></table></div><p>Within a package, the values defined in the package&#39;s <code>package.json</code> <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> field can be referenced via the package&#39;s name. For example, assuming the <code>package.json</code> is:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./foo.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Then any module <em>in that package</em> can reference an export in the package itself:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./a-module.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { something } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a-package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Imports &quot;something&quot; from ./index.mjs.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Self-referencing is available only if <code>package.json</code> has <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>, and will allow importing only what that <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> (in the <code>package.json</code>) allows. So the code below, given the previous package, will generate a runtime error:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./another-module.mjs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Imports &quot;another&quot; from ./m.mjs. Fails because</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// the &quot;package.json&quot; &quot;exports&quot; field</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// does not provide an export named &quot;./m.mjs&quot;.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { another } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a-package/m.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Self-referencing is also available when using <code>require</code>, both in an ES module, and in a CommonJS one. For example, this code will also work:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./a-module.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">something</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a-package/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Loads from ./foo.js.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Finally, self-referencing also works with scoped packages. For example, this code will also work:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@my/package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./index.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./other.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@my/package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> other.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="dual-commonjs/es-module-packages" tabindex="-1">Dual CommonJS/ES module packages <a class="header-anchor" href="#dual-commonjs/es-module-packages" aria-label="Permalink to “Dual CommonJS/ES module packages”">​</a></h2><p>See <a href="https://github.com/nodejs/package-examples" target="_blank" rel="noreferrer">the package examples repository</a> for details.</p><h2 id="nodejs-packagejson-field-definitions" tabindex="-1">Node.js <code>package.json</code> field definitions <a class="header-anchor" href="#nodejs-packagejson-field-definitions" aria-label="Permalink to “Node.js package.json field definitions”">​</a></h2><p>This section describes the fields used by the Node.js runtime. Other tools (such as <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json" target="_blank" rel="noreferrer">npm</a>) use additional fields which are ignored by Node.js and not documented here.</p><p>The following fields in <code>package.json</code> files are used in Node.js:</p><ul><li><a href="/nodejs/api/packages#name"><code>&quot;name&quot;</code></a> - Relevant when using named imports within a package. Also used by package managers as the name of the package.</li><li><a href="/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> - The default module when loading the package, if exports is not specified, and in versions of Node.js prior to the introduction of exports.</li><li><a href="/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> - The package manager recommended when contributing to the package. Leveraged by the <a href="/nodejs/api/corepack">Corepack</a> shims.</li><li><a href="/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> - The package type determining whether to load <code>.js</code> files as CommonJS or ES modules.</li><li><a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> - Package exports and conditional exports. When present, limits which submodules can be loaded from within the package.</li><li><a href="/nodejs/api/packages#imports"><code>&quot;imports&quot;</code></a> - Package imports, for use by modules within the package itself.</li></ul><h3 id="name" tabindex="-1"><code>&quot;name&quot;</code> <a class="header-anchor" href="#name" aria-label="Permalink to “&quot;name&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v13.6.0, v12.16.0</td><td>Remove the <code>--experimental-resolve-self</code> option.</td></tr><tr><td>v13.1.0, v12.16.0</td><td>Added in: v13.1.0, v12.16.0</td></tr></tbody></table></div><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;package-name&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The <code>&quot;name&quot;</code> field defines your package&#39;s name. Publishing to the <em>npm</em> registry requires a name that satisfies <a href="https://docs.npmjs.com/files/package.json#name" target="_blank" rel="noreferrer">certain requirements</a>.</p><p>The <code>&quot;name&quot;</code> field can be used in addition to the <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> field to <a href="/nodejs/api/packages#self-referencing-a-package-using-its-name">self-reference</a> a package using its name.</p><h3 id="main" tabindex="-1"><code>&quot;main&quot;</code> <a class="header-anchor" href="#main" aria-label="Permalink to “&quot;main&quot;”">​</a></h3><p><strong>Added in: v0.4.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The <code>&quot;main&quot;</code> field defines the entry point of a package when imported by name via a <code>node_modules</code> lookup. Its value is a path.</p><p>When a package has an <a href="/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> field, this will take precedence over the <code>&quot;main&quot;</code> field when importing the package by name.</p><p>It also defines the script that is used when the <a href="/nodejs/api/modules#folders-as-modules">package directory is loaded via <code>require()</code></a>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This resolves to ./path/to/directory/index.js.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./path/to/directory&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="packagemanager" tabindex="-1"><code>&quot;packageManager&quot;</code> <a class="header-anchor" href="#packagemanager" aria-label="Permalink to “&quot;packageManager&quot;”">​</a></h3><p><strong>Added in: v16.9.0, v14.19.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/nodejs/api/documentation#stability-index">Stability: 1</a> - Experimental</p></div><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;packageManager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;package manager name&gt;@&lt;version&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The <code>&quot;packageManager&quot;</code> field defines which package manager is expected to be used when working on the current project. It can be set to any of the <a href="/nodejs/api/corepack#supported-package-managers">supported package managers</a>, and will ensure that your teams use the exact same package manager versions without having to install anything else other than Node.js.</p><p>This field is currently experimental and needs to be opted-in; check the <a href="/nodejs/api/corepack">Corepack</a> page for details about the procedure.</p><h3 id="type" tabindex="-1"><code>&quot;type&quot;</code> <a class="header-anchor" href="#type" aria-label="Permalink to “&quot;type&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v13.2.0, v12.17.0</td><td>Unflag <code>--experimental-modules</code>.</td></tr><tr><td>v12.0.0</td><td>Added in: v12.0.0</td></tr></tbody></table></div><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>The <code>&quot;type&quot;</code> field defines the module format that Node.js uses for all <code>.js</code> files that have that <code>package.json</code> file as their nearest parent.</p><p>Files ending with <code>.js</code> are loaded as ES modules when the nearest parent <code>package.json</code> file contains a top-level field <code>&quot;type&quot;</code> with a value of <code>&quot;module&quot;</code>.</p><p>The nearest parent <code>package.json</code> is defined as the first <code>package.json</code> found when searching in the current folder, that folder&#39;s parent, and so on up until a node_modules folder or the volume root is reached.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In same folder as preceding package.json {#in-same-folder-as-preceding-packagejson}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Runs as ES module</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>If the nearest parent <code>package.json</code> lacks a <code>&quot;type&quot;</code> field, or contains <code>&quot;type&quot;: &quot;commonjs&quot;</code>, <code>.js</code> files are treated as <a href="/nodejs/api/modules">CommonJS</a>. If the volume root is reached and no <code>package.json</code> is found, <code>.js</code> files are treated as <a href="/nodejs/api/modules">CommonJS</a>.</p><p><code>import</code> statements of <code>.js</code> files are treated as ES modules if the nearest parent <code>package.json</code> contains <code>&quot;type&quot;: &quot;module&quot;</code>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// my-app.js, part of the same example as above</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./startup.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Loaded as ES module because of package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Regardless of the value of the <code>&quot;type&quot;</code> field, <code>.mjs</code> files are always treated as ES modules and <code>.cjs</code> files are always treated as CommonJS.</p><h3 id="exports" tabindex="-1"><code>&quot;exports&quot;</code> <a class="header-anchor" href="#exports" aria-label="Permalink to “&quot;exports&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v14.13.0, v12.20.0</td><td>Add support for <code>&quot;exports&quot;</code> patterns.</td></tr><tr><td>v13.7.0, v12.17.0</td><td>Unflag conditional exports.</td></tr><tr><td>v13.7.0, v12.16.0</td><td>Implement logical conditional exports ordering.</td></tr><tr><td>v13.7.0, v12.16.0</td><td>Remove the <code>--experimental-conditional-exports</code> option. In 12.16.0, conditional exports are still behind <code>--experimental-modules</code>.</td></tr><tr><td>v13.2.0, v12.16.0</td><td>Implement conditional exports.</td></tr><tr><td>v12.7.0</td><td>Added in: v12.7.0</td></tr></tbody></table></div><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The <code>&quot;exports&quot;</code> field allows defining the <a href="/nodejs/api/packages#package-entry-points">entry points</a> of a package when imported by name loaded either via a <code>node_modules</code> lookup or a <a href="/nodejs/api/packages#self-referencing-a-package-using-its-name">self-reference</a> to its own name. It is supported in Node.js 12+ as an alternative to the <a href="/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> that can support defining <a href="/nodejs/api/packages#subpath-exports">subpath exports</a> and <a href="/nodejs/api/packages#conditional-exports">conditional exports</a> while encapsulating internal unexported modules.</p><p><a href="/nodejs/api/packages#conditional-exports">Conditional Exports</a> can also be used within <code>&quot;exports&quot;</code> to define different package entry points per environment, including whether the package is referenced via <code>require</code> or via <code>import</code>.</p><p>All paths defined in the <code>&quot;exports&quot;</code> must be relative file URLs starting with <code>./</code>.</p><h3 id="imports" tabindex="-1"><code>&quot;imports&quot;</code> <a class="header-anchor" href="#imports" aria-label="Permalink to “&quot;imports&quot;”">​</a></h3><p><strong>Added in: v14.6.0, v12.19.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#dep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dep-polyfill.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Entries in the imports field must be strings starting with <code>#</code>.</p><p>Package imports permit mapping to external packages.</p><p>This field defines <a href="/nodejs/api/packages#subpath-imports">subpath imports</a> for the current package.</p>`,209)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};