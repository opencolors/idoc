import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Разница между разработкой и производством в Node.js","description":"Понимание роли NODE_ENV в Node.js и его влияние на среды разработки и производства.","frontmatter":{"title":"Разница между разработкой и производством в Node.js","description":"Понимание роли NODE_ENV в Node.js и его влияние на среды разработки и производства.","head":[["meta",{"name":"og:title","content":"Разница между разработкой и производством в Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Понимание роли NODE_ENV в Node.js и его влияние на среды разработки и производства."}],["meta",{"name":"twitter:title","content":"Разница между разработкой и производством в Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Понимание роли NODE_ENV в Node.js и его влияние на среды разработки и производства."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/guide/the-difference-between-development-and-production"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/guide/the-difference-between-development-and-production"}]]},"headers":[],"relativePath":"ru/nodejs/guide/the-difference-between-development-and-production.md","filePath":"ru/nodejs/guide/the-difference-between-development-and-production.md","lastUpdated":null}`),a={name:`ru/nodejs/guide/the-difference-between-development-and-production.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-разница-между-разработкои-и-продакшеном" tabindex="-1">Node.js, разница между разработкой и продакшеном <a class="header-anchor" href="#node-js-разница-между-разработкои-и-продакшеном" aria-label="Permalink to “Node.js, разница между разработкой и продакшеном”">​</a></h1><p><code>В Node.js нет разницы между разработкой и продакшеном</code>, то есть нет никаких специальных настроек, которые нужно применить, чтобы заставить Node.js работать в продакшн-конфигурации. Однако, некоторые библиотеки в реестре npm распознают использование переменной <code>NODE_ENV</code> и по умолчанию устанавливают ее в значение <code>development</code>. Всегда запускайте свой Node.js с установленным <code>NODE_ENV=production</code>.</p><p>Популярным способом конфигурации вашего приложения является использование <a href="https://12factor.net" target="_blank" rel="noreferrer">методологии двенадцати факторов</a>.</p><h2 id="node-env-в-express" tabindex="-1">NODE_ENV в Express <a class="header-anchor" href="#node-env-в-express" aria-label="Permalink to “NODE_ENV в Express”">​</a></h2><p>Во всемирно популярном фреймворке <a href="https://expressjs.com" target="_blank" rel="noreferrer">express</a> установка NODE_ENV в production обычно гарантирует, что:</p><ul><li>ведение журнала сведено к минимуму, до необходимого уровня</li><li>используется больше уровней кэширования для оптимизации производительности</li></ul><p>Обычно это делается путем выполнения команды</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">production</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>в оболочке, но лучше поместить ее в файл конфигурации вашей оболочки (например, <code>.bash_profile</code> с оболочкой Bash), потому что в противном случае настройка не сохраняется в случае перезагрузки системы.</p><p>Вы также можете применить переменную окружения, добавив ее перед командой инициализации вашего приложения:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Например, в приложении Express вы можете использовать это для установки различных обработчиков ошибок для каждой среды:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ dumpExceptions: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, showStack: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Например, [Pug](<a href="https://pugjs.org" target="_blank" rel="noreferrer">https://pugjs.org</a>], библиотека шаблонов, используемая [Express.js](<a href="https://expressjs.com" target="_blank" rel="noreferrer">https://expressjs.com</a>], компилируется в режиме отладки, если <code>NODE_ENV</code> не установлено в <code>production</code>. Представления Express компилируются при каждом запросе в режиме разработки, а в продакшене они кэшируются. Есть много других примеров.</p><p><code>Эта переменная окружения является соглашением, широко используемым во внешних библиотеках, но не в самом Node.js.</code></p><h2 id="почему-node-env-считается-антипаттерном" tabindex="-1">Почему NODE_ENV считается антипаттерном? <a class="header-anchor" href="#почему-node-env-считается-антипаттерном" aria-label="Permalink to “Почему NODE_ENV считается антипаттерном?”">​</a></h2><p>Среда — это цифровая платформа или система, где инженеры могут создавать, тестировать, развертывать и управлять программными продуктами. Обычно существует четыре этапа или типа сред, в которых запускается наше приложение:</p><ul><li>Разработка</li><li>Промежуточное тестирование</li><li>Продакшен</li><li>Тестирование</li></ul><p>Основная проблема <code>NODE_ENV</code> проистекает из того, что разработчики объединяют оптимизации и поведение программного обеспечения со средой, в которой работает их программное обеспечение. В результате получается код, подобный следующему:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;staging&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;testing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Хотя это может выглядеть безобидно, это делает среды продакшена и промежуточного тестирования разными, что делает надежное тестирование невозможным. Например, тест и, следовательно, функциональность вашего продукта могут пройти, когда <code>NODE_ENV</code> установлено в <code>development</code>, но потерпят неудачу при установке <code>NODE_ENV</code> в <code>production</code>. Поэтому установка <code>NODE_ENV</code> в любое значение, кроме <code>production</code>, считается антипаттерном.</p>`,21)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};