import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"La diferencia entre desarrollo y producción en Node.js","description":"Entender el papel de NODE_ENV en Node.js y su impacto en los entornos de desarrollo y producción.","frontmatter":{"title":"La diferencia entre desarrollo y producción en Node.js","description":"Entender el papel de NODE_ENV en Node.js y su impacto en los entornos de desarrollo y producción.","head":[["meta",{"name":"og:title","content":"La diferencia entre desarrollo y producción en Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Entender el papel de NODE_ENV en Node.js y su impacto en los entornos de desarrollo y producción."}],["meta",{"name":"twitter:title","content":"La diferencia entre desarrollo y producción en Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Entender el papel de NODE_ENV en Node.js y su impacto en los entornos de desarrollo y producción."}],["link",{"rel":"canonical","href":"https://idoc.dev/es/nodejs/guide/the-difference-between-development-and-production"}],["meta",{"property":"og:url","content":"https://idoc.dev/es/nodejs/guide/the-difference-between-development-and-production"}]]},"headers":[],"relativePath":"es/nodejs/guide/the-difference-between-development-and-production.md","filePath":"es/nodejs/guide/the-difference-between-development-and-production.md","lastUpdated":1749464498000}`),a={name:`es/nodejs/guide/the-difference-between-development-and-production.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-la-diferencia-entre-desarrollo-y-produccion" tabindex="-1">Node.js, la diferencia entre desarrollo y producción <a class="header-anchor" href="#node-js-la-diferencia-entre-desarrollo-y-produccion" aria-label="Permalink to “Node.js, la diferencia entre desarrollo y producción”">​</a></h1><p><code>No hay diferencia entre desarrollo y producción en Node.js</code>, es decir, no hay configuraciones específicas que debas aplicar para que Node.js funcione en una configuración de producción. Sin embargo, algunas bibliotecas en el registro npm reconocen el uso de la variable <code>NODE_ENV</code> y la establecen por defecto en una configuración de <code>development</code>. Siempre ejecuta tu Node.js con <code>NODE_ENV=production</code> configurado.</p><p>Una forma popular de configurar tu aplicación es utilizando la <a href="https://12factor.net" target="_blank" rel="noreferrer">metodología de los doce factores</a>.</p><h2 id="node-env-en-express" tabindex="-1">NODE_ENV en Express <a class="header-anchor" href="#node-env-en-express" aria-label="Permalink to “NODE_ENV en Express”">​</a></h2><p>En el inmensamente popular framework <a href="https://expressjs.com" target="_blank" rel="noreferrer">express</a>, configurar NODE_ENV a producción generalmente asegura que:</p><ul><li>el registro se mantenga al mínimo, a un nivel esencial</li><li>se apliquen más niveles de caché para optimizar el rendimiento</li></ul><p>Esto generalmente se hace ejecutando el comando</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">production</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>en la shell, pero es mejor colocarlo en tu archivo de configuración de la shell (por ejemplo, <code>.bash_profile</code> con la shell Bash) porque de lo contrario la configuración no persiste en caso de reinicio del sistema.</p><p>También puedes aplicar la variable de entorno anteponiéndola a tu comando de inicialización de la aplicación:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Por ejemplo, en una aplicación Express, puedes usar esto para establecer diferentes manejadores de errores por entorno:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ dumpExceptions: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, showStack: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Por ejemplo, <a href="https://pugjs.org" target="_blank" rel="noreferrer">Pug</a>, la biblioteca de plantillas utilizada por <a href="https://expressjs.com" target="_blank" rel="noreferrer">Express.js</a>, se compila en modo de depuración si <code>NODE_ENV</code> no está establecido en <code>production</code>. Las vistas de Express se compilan en cada solicitud en modo de desarrollo, mientras que en producción se almacenan en caché. Hay muchos más ejemplos.</p><p><code>Esta variable de entorno es una convención ampliamente utilizada en bibliotecas externas, pero no dentro de Node.js en sí.</code></p><h2 id="¿por-que-se-considera-a-node-env-un-antipatron" tabindex="-1">¿Por qué se considera a NODE_ENV un antipatrón? <a class="header-anchor" href="#¿por-que-se-considera-a-node-env-un-antipatron" aria-label="Permalink to “¿Por qué se considera a NODE_ENV un antipatrón?”">​</a></h2><p>Un entorno es una plataforma digital o un sistema donde los ingenieros pueden construir, probar, implementar y administrar productos de software. Convencionalmente, existen cuatro etapas o tipos de entornos donde se ejecuta nuestra aplicación:</p><ul><li>Desarrollo</li><li>Staging</li><li>Producción</li><li>Pruebas</li></ul><p>El problema fundamental de <code>NODE_ENV</code> proviene de que los desarrolladores combinan optimizaciones y el comportamiento del software con el entorno en el que se está ejecutando su software. El resultado es código como el siguiente:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;staging&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;testing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Si bien esto puede parecer inofensivo, hace que los entornos de producción y staging sean diferentes, lo que imposibilita las pruebas confiables. Por ejemplo, una prueba y, por lo tanto, una funcionalidad de tu producto podría pasar cuando <code>NODE_ENV</code> está establecido en <code>development</code>, pero fallar cuando se establece <code>NODE_ENV</code> en <code>production</code>. Por lo tanto, establecer <code>NODE_ENV</code> en cualquier valor que no sea <code>production</code> se considera un antipatrón.</p>`,21)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};