import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"الحظر مقابل عدم الحظر في Node.js","description":"يشرح هذا المقال الفرق بين المكالمات المحظورة وغير المحظورة في Node.js، بما في ذلك تأثيرها على حلقة الأحداث والتوازي.","frontmatter":{"title":"الحظر مقابل عدم الحظر في Node.js","description":"يشرح هذا المقال الفرق بين المكالمات المحظورة وغير المحظورة في Node.js، بما في ذلك تأثيرها على حلقة الأحداث والتوازي.","head":[["meta",{"name":"og:title","content":"الحظر مقابل عدم الحظر في Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"يشرح هذا المقال الفرق بين المكالمات المحظورة وغير المحظورة في Node.js، بما في ذلك تأثيرها على حلقة الأحداث والتوازي."}],["meta",{"name":"twitter:title","content":"الحظر مقابل عدم الحظر في Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"يشرح هذا المقال الفرق بين المكالمات المحظورة وغير المحظورة في Node.js، بما في ذلك تأثيرها على حلقة الأحداث والتوازي."}],["link",{"rel":"canonical","href":"https://idoc.dev/ar/nodejs/guide/overview-of-blocking-vs-non-blocking"}],["meta",{"property":"og:url","content":"https://idoc.dev/ar/nodejs/guide/overview-of-blocking-vs-non-blocking"}]]},"headers":[],"relativePath":"ar/nodejs/guide/overview-of-blocking-vs-non-blocking.md","filePath":"ar/nodejs/guide/overview-of-blocking-vs-non-blocking.md","lastUpdated":null}`),a={name:`ar/nodejs/guide/overview-of-blocking-vs-non-blocking.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="نظرة-عامة-حول-الحظر-مقابل-عدم-الحظر" tabindex="-1">نظرة عامة حول الحظر مقابل عدم الحظر <a class="header-anchor" href="#نظرة-عامة-حول-الحظر-مقابل-عدم-الحظر" aria-label="Permalink to “نظرة عامة حول الحظر مقابل عدم الحظر”">​</a></h1><p>تغطي هذه النظرة العامة الفرق بين استدعاءات الحظر وعدم الحظر في Node.js. ستشير هذه النظرة العامة إلى حلقة الأحداث و libuv ولكن لا يلزم معرفة مسبقة بهذه الموضوعات. يُفترض أن لدى القراء فهمًا أساسيًا للغة JavaScript ونمط <a href="/ar/nodejs/guide/javascript-asynchronous-programming-and-callbacks">استدعاء JavaScript غير المتزامن</a> Node.js.</p><div class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p><p>تشير &quot;الإدخال/الإخراج&quot; بشكل أساسي إلى التفاعل مع قرص النظام والشبكة المدعومة من <a href="https://libuv.org/" target="_blank" rel="noreferrer">libuv</a>.</p></div><h2 id="حظر" tabindex="-1">حظر <a class="header-anchor" href="#حظر" aria-label="Permalink to “حظر”">​</a></h2><p><strong>الحظر</strong> هو عندما يجب أن ينتظر تنفيذ JavaScript إضافي في عملية Node.js حتى تكتمل عملية غير JavaScript. يحدث هذا لأن حلقة الأحداث غير قادرة على الاستمرار في تشغيل JavaScript أثناء حدوث عملية <strong>حظر</strong>.</p><p>في Node.js، لا يشار عادةً إلى JavaScript الذي يُظهر أداءً ضعيفًا بسبب كونه مكثفًا لوحدة المعالجة المركزية بدلاً من الانتظار لعملية غير JavaScript، مثل الإدخال/الإخراج، على أنه <strong>حظر</strong>. تعد الطرق المتزامنة في مكتبة Node.js القياسية التي تستخدم libuv هي عمليات <strong>الحظر</strong> الأكثر استخدامًا. قد تحتوي الوحدات النمطية الأصلية أيضًا على طرق <strong>حظر</strong>.</p><p>توفر جميع طرق الإدخال/الإخراج في مكتبة Node.js القياسية إصدارات غير متزامنة، وهي <strong>غير حظر</strong>، وتقبل وظائف الاستدعاء. تحتوي بعض الطرق أيضًا على نظائر <strong>حظر</strong>، والتي لها أسماء تنتهي بـ <code>Sync</code>.</p><h2 id="مقارنة-التعليمات-البرمجية" tabindex="-1">مقارنة التعليمات البرمجية <a class="header-anchor" href="#مقارنة-التعليمات-البرمجية" aria-label="Permalink to “مقارنة التعليمات البرمجية”">​</a></h2><p>تقوم طرق <strong>الحظر</strong> بالتنفيذ <strong>بشكل متزامن</strong> وتقوم طرق <strong>عدم الحظر</strong> بالتنفيذ <strong>بشكل غير متزامن</strong>.</p><p>باستخدام وحدة نظام الملفات كمثال، هذه قراءة ملف <strong>متزامنة</strong>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/file.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// يحظر هنا حتى تتم قراءة الملف</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>وهنا مثال <strong>غير متزامن</strong> مكافئ:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/file.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>يبدو المثال الأول أبسط من المثال الثاني ولكنه يعيبه أن السطر الثاني <strong>يحظر</strong> تنفيذ أي JavaScript إضافي حتى تتم قراءة الملف بأكمله. لاحظ أنه في الإصدار المتزامن، إذا تم طرح خطأ، فسيلزم التقاطه وإلا ستتعطل العملية. في الإصدار غير المتزامن، الأمر متروك للمؤلف ليقرر ما إذا كان يجب طرح خطأ كما هو موضح.</p><p>دعنا نوسع مثالنا قليلاً:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/file.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// يحظر هنا حتى تتم قراءة الملف</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moreWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// سيتم تشغيله بعد console.log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>وهنا مثال غير متزامن مشابه، ولكنه غير مكافئ:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/file.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moreWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// سيتم تشغيله قبل console.log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>في المثال الأول أعلاه، سيتم استدعاء <code>console.log</code> قبل <code>moreWork()</code>. في المثال الثاني، <code>fs.readFile()</code> <strong>غير حظر</strong> بحيث يمكن أن يستمر تنفيذ JavaScript وسيتم استدعاء <code>moreWork()</code> أولاً. تعد القدرة على تشغيل <code>moreWork()</code> دون انتظار اكتمال قراءة الملف خيار تصميم رئيسي يسمح بإنتاجية أعلى.</p><h2 id="التزامن-والإنتاجية" tabindex="-1">التزامن والإنتاجية <a class="header-anchor" href="#التزامن-والإنتاجية" aria-label="Permalink to “التزامن والإنتاجية”">​</a></h2><p>تنفيذ JavaScript في Node.js هو ذو مسار تنفيذ واحد، لذا يشير التزامن إلى قدرة حلقة الأحداث على تنفيذ وظائف رد نداء JavaScript بعد الانتهاء من أعمال أخرى. يجب أن يسمح أي رمز يُتوقع تشغيله بطريقة متزامنة لحلقة الأحداث بالاستمرار في التشغيل حيث تحدث عمليات غير JavaScript، مثل الإدخال/الإخراج.</p><p>على سبيل المثال، دعنا نفكر في حالة تستغرق فيها كل عملية طلب إلى خادم الويب 50 مللي ثانية لإكمالها، و45 مللي ثانية من تلك الـ 50 مللي ثانية هي إدخال/إخراج قاعدة بيانات يمكن إجراؤه بشكل غير متزامن. يتيح اختيار عمليات غير حظر غير متزامنة تحرير تلك الـ 45 مللي ثانية لكل طلب للتعامل مع طلبات أخرى. هذا فرق كبير في السعة فقط عن طريق اختيار استخدام طرق غير حظر بدلاً من طرق الحظر.</p><p>تختلف حلقة الأحداث عن النماذج في العديد من اللغات الأخرى حيث قد يتم إنشاء سلاسل تنفيذ إضافية للتعامل مع العمل المتزامن.</p><h2 id="مخاطر-خلط-كود-الحظر-وغير-الحظر" tabindex="-1">مخاطر خلط كود الحظر وغير الحظر <a class="header-anchor" href="#مخاطر-خلط-كود-الحظر-وغير-الحظر" aria-label="Permalink to “مخاطر خلط كود الحظر وغير الحظر”">​</a></h2><p>هناك بعض الأنماط التي يجب تجنبها عند التعامل مع الإدخال/الإخراج. دعنا نلقي نظرة على مثال:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/file.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlinkSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/file.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>في المثال أعلاه، من المحتمل أن يتم تشغيل <code>fs.unlinkSync()</code> قبل <code>fs.readFile()</code>، مما سيحذف <code>file.md</code> قبل قراءته بالفعل. طريقة أفضل لكتابة هذا، وهي غير حظر تمامًا ومضمونة التنفيذ بالترتيب الصحيح هي:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/file.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">readFileErr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (readFileErr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> readFileErr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/file.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">unlinkErr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (unlinkErr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unlinkErr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>يضع ما سبق استدعاء <strong>غير حظر</strong> لـ <code>fs.unlink()</code> داخل رد نداء <code>fs.readFile()</code> مما يضمن الترتيب الصحيح للعمليات.</p>`,29)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};