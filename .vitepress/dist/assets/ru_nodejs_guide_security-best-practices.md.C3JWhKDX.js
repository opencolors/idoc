import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Лучшие практики безопасности для приложений Node.js","description":"Полный справочник по обеспечению безопасности приложений Node.js, охватывающий моделирование угроз, лучшие практики и смягчение распространенных уязвимостей, таких как отказ в обслуживании,binding DNS и раскрытие конфиденциальной информации.","frontmatter":{"title":"Лучшие практики безопасности для приложений Node.js","description":"Полный справочник по обеспечению безопасности приложений Node.js, охватывающий моделирование угроз, лучшие практики и смягчение распространенных уязвимостей, таких как отказ в обслуживании,binding DNS и раскрытие конфиденциальной информации.","head":[["meta",{"name":"og:title","content":"Лучшие практики безопасности для приложений Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Полный справочник по обеспечению безопасности приложений Node.js, охватывающий моделирование угроз, лучшие практики и смягчение распространенных уязвимостей, таких как отказ в обслуживании,binding DNS и раскрытие конфиденциальной информации."}],["meta",{"name":"twitter:title","content":"Лучшие практики безопасности для приложений Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Полный справочник по обеспечению безопасности приложений Node.js, охватывающий моделирование угроз, лучшие практики и смягчение распространенных уязвимостей, таких как отказ в обслуживании,binding DNS и раскрытие конфиденциальной информации."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/guide/security-best-practices"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/guide/security-best-practices"}]]},"headers":[],"relativePath":"ru/nodejs/guide/security-best-practices.md","filePath":"ru/nodejs/guide/security-best-practices.md","lastUpdated":null}`),a={name:`ru/nodejs/guide/security-best-practices.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="рекомендации-по-безопасности" tabindex="-1">Рекомендации по безопасности <a class="header-anchor" href="#рекомендации-по-безопасности" aria-label="Permalink to “Рекомендации по безопасности”">​</a></h1><h3 id="цель" tabindex="-1">Цель <a class="header-anchor" href="#цель" aria-label="Permalink to “Цель”">​</a></h3><p>Этот документ предназначен для расширения существующей <a href="/ru/nodejs/guide/security-best-practices#threat-model">модели угроз</a> и предоставления подробных рекомендаций о том, как защитить приложение Node.js.</p><h2 id="содержание-документа" tabindex="-1">Содержание документа <a class="header-anchor" href="#содержание-документа" aria-label="Permalink to “Содержание документа”">​</a></h2><ul><li>Рекомендации: упрощенный и сжатый способ ознакомления с лучшими практиками. Мы можем использовать <a href="https://github.com/nodejs/security-wg/issues/488" target="_blank" rel="noreferrer">этот вопрос</a> или <a href="https://github.com/goldbergyoni/nodebestpractices" target="_blank" rel="noreferrer">это руководство</a> в качестве отправной точки. Важно отметить, что этот документ относится конкретно к Node.js, если вы ищете что-то более широкое, рассмотрите <a href="https://github.com/ossf/wg-best-practices-os-developers" target="_blank" rel="noreferrer">лучшие практики OSSF</a>.</li><li>Объяснение атак: иллюстрация и документирование простым языком с некоторыми примерами кода (если это возможно) атак, которые мы упоминаем в модели угроз.</li><li>Сторонние библиотеки: определение угроз (атаки с опечатками, вредоносные пакеты...) и лучшие практики в отношении зависимостей модулей node и т. д.</li></ul><h2 id="список-угроз" tabindex="-1">Список угроз <a class="header-anchor" href="#список-угроз" aria-label="Permalink to “Список угроз”">​</a></h2><h3 id="отказ-в-обслуживании-http-сервера-cwe-400" tabindex="-1">Отказ в обслуживании HTTP-сервера (CWE-400) <a class="header-anchor" href="#отказ-в-обслуживании-http-сервера-cwe-400" aria-label="Permalink to “Отказ в обслуживании HTTP-сервера (CWE-400)”">​</a></h3><p>Это атака, при которой приложение становится недоступным для цели, для которой оно было разработано, из-за способа обработки входящих HTTP-запросов. Эти запросы не обязательно должны быть специально созданы злоумышленником: неправильно настроенный или содержащий ошибки клиент также может отправлять серверу шаблон запросов, который приводит к отказу в обслуживании.</p><p>HTTP-запросы принимаются HTTP-сервером Node.js и передаются в код приложения через зарегистрированный обработчик запросов. Сервер не анализирует содержимое тела запроса. Поэтому любой DoS, вызванный содержимым тела после его передачи обработчику запросов, не является уязвимостью в самом Node.js, поскольку код приложения несет ответственность за его правильную обработку.</p><p>Убедитесь, что WebServer правильно обрабатывает ошибки сокетов, например, когда сервер создан без обработчика ошибок, он будет уязвим для DoS.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:net&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // socket.on(&#39;error&#39;, console.error)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // это предотвращает сбой сервера</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Echo server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(socket)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0.0.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><em>Если выполняется неверный запрос, сервер может выйти из строя.</em></p><p>Примером DoS-атаки, не вызванной содержимым запроса, является Slowloris. В этой атаке HTTP-запросы отправляются медленно и фрагментированно, по одному фрагменту за раз. Пока полный запрос не будет доставлен, сервер будет поддерживать ресурсы, выделенные для текущего запроса. Если отправить достаточное количество этих запросов одновременно, количество одновременных подключений скоро достигнет своего максимума, что приведет к отказу в обслуживании. Именно так атака зависит не от содержимого запроса, а от времени и шаблона запросов, отправляемых на сервер.</p><h4 id="меры-по-смягчению-последствии" tabindex="-1">Меры по смягчению последствий <a class="header-anchor" href="#меры-по-смягчению-последствии" aria-label="Permalink to “Меры по смягчению последствий”">​</a></h4><ul><li>Использовать обратный прокси-сервер для получения и пересылки запросов в Node.js-приложение. Обратные прокси-серверы могут предоставлять кэширование, балансировку нагрузки, чёрные списки IP-адресов и т. д., что снижает вероятность успешной DoS-атаки.</li><li>Правильно настроить тайм-ауты сервера, чтобы соединения, которые неактивны или запросы которых поступают слишком медленно, могли быть разорваны. См. различные тайм-ауты в <code>http.Server</code>, особенно <code>headersTimeout</code>, <code>requestTimeout</code>, <code>timeout</code> и <code>keepAliveTimeout</code>.</li><li>Ограничить количество открытых сокетов на хост и общее количество. См. <a href="/ru/nodejs/api/http">документацию по http</a>, особенно <code>agent.maxSockets</code>, <code>agent.maxTotalSockets</code>, <code>agent.maxFreeSockets</code> и <code>server.maxRequestsPerSocket</code>.</li></ul><h3 id="dns-rebinding-cwe-346" tabindex="-1">DNS Rebinding (CWE-346) <a class="header-anchor" href="#dns-rebinding-cwe-346" aria-label="Permalink to “DNS Rebinding (CWE-346)”">​</a></h3><p>Это атака, которая может быть нацелена на приложения Node.js, запущенные с включенным отладчиком с помощью переключателя <a href="/ru/nodejs/guide/debugging-nodejs">--inspect switch</a>.</p><p>Поскольку веб-сайты, открытые в веб-браузере, могут выполнять WebSocket и HTTP-запросы, они могут быть нацелены на отладчик, запущенный локально. Обычно это предотвращается <a href="/ru/nodejs/guide/debugging-nodejs">политикой одного источника</a>, реализованной современными браузерами, которая запрещает скриптам получать доступ к ресурсам из разных источников (то есть вредоносный веб-сайт не может читать данные, запрошенные с локального IP-адреса).</p><p>Однако с помощью DNS rebinding злоумышленник может временно контролировать источник своих запросов, чтобы они, казалось, исходили с локального IP-адреса. Это делается путем контроля как веб-сайта, так и DNS-сервера, используемого для разрешения его IP-адреса. См. <a href="https://en.wikipedia.org/wiki/DNS_rebinding" target="_blank" rel="noreferrer">DNS Rebinding wiki</a> для получения более подробной информации.</p><h4 id="меры-по-смягчению-последствии-1" tabindex="-1">Меры по смягчению последствий <a class="header-anchor" href="#меры-по-смягчению-последствии-1" aria-label="Permalink to “Меры по смягчению последствий”">​</a></h4><ul><li>Отключить инспектор по сигналу SIGUSR1, присоединив к нему слушатель <code>process.on(‘SIGUSR1’, …)</code>.</li><li>Не запускать протокол инспектора в продакшене.</li></ul><h3 id="предоставление-конфиденциальнои-информации-неавторизованному-лицу-cwe-552" tabindex="-1">Предоставление конфиденциальной информации неавторизованному лицу (CWE-552) <a class="header-anchor" href="#предоставление-конфиденциальнои-информации-неавторизованному-лицу-cwe-552" aria-label="Permalink to “Предоставление конфиденциальной информации неавторизованному лицу (CWE-552)”">​</a></h3><p>Все файлы и папки, включенные в текущий каталог, отправляются в реестр npm во время публикации пакета.</p><p>Существуют некоторые механизмы для управления этим поведением путем определения списка блокировки с помощью <code>.npmignore</code> и <code>.gitignore</code> или путем определения списка разрешений в <code>package.json</code>.</p><h4 id="меры-по-смягчению-последствии-2" tabindex="-1">Меры по смягчению последствий <a class="header-anchor" href="#меры-по-смягчению-последствии-2" aria-label="Permalink to “Меры по смягчению последствий”">​</a></h4><ul><li>Используйте <code>npm publish --dry-run</code> для составления списка всех файлов для публикации. Обязательно просмотрите содержимое перед публикацией пакета.</li><li>Также важно создавать и поддерживать файлы игнорирования, такие как <code>.gitignore</code> и <code>.npmignore</code>. В этих файлах можно указать, какие файлы/папки не следует публиковать. Свойство <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#files" target="_blank" rel="noreferrer">files</a> в <code>package.json</code> позволяет выполнить обратную операцию - составить список &quot;разрешенных&quot;.</li><li>В случае утечки обязательно <a href="https://docs.npmjs.com/unpublishing-packages-from-the-registry" target="_blank" rel="noreferrer">отмените публикацию пакета</a>.</li></ul><h3 id="контрабанда-http-запросов-cwe-444" tabindex="-1">Контрабанда HTTP-запросов (CWE-444) <a class="header-anchor" href="#контрабанда-http-запросов-cwe-444" aria-label="Permalink to “Контрабанда HTTP-запросов (CWE-444)”">​</a></h3><p>Это атака, в которой участвуют два HTTP-сервера (обычно прокси и приложение Node.js). Клиент отправляет HTTP-запрос, который сначала проходит через внешний сервер (прокси), а затем перенаправляется на внутренний сервер (приложение). Когда внешний и внутренний сервер по-разному интерпретируют неоднозначные HTTP-запросы, возникает возможность для злоумышленника отправить вредоносное сообщение, которое не будет замечено внешним сервером, но будет замечено внутренним, фактически &quot;контрабандой&quot; пронося его мимо прокси-сервера.</p><p>Более подробное описание и примеры см. в <a href="https://cwe.mitre.org/data/definitions/444.html" target="_blank" rel="noreferrer">CWE-444</a>.</p><p>Поскольку эта атака зависит от того, что Node.js интерпретирует HTTP-запросы иначе, чем (произвольный) HTTP-сервер, успешная атака может быть вызвана уязвимостью в Node.js, во внешнем сервере или в обоих. Если то, как запрос интерпретируется Node.js, соответствует спецификации HTTP (см. <a href="https://datatracker.ietf.org/doc/html/rfc7230#section-3" target="_blank" rel="noreferrer">RFC7230</a>), то это не считается уязвимостью в Node.js.</p><h4 id="меры-по-смягчению-последствии-3" tabindex="-1">Меры по смягчению последствий <a class="header-anchor" href="#меры-по-смягчению-последствии-3" aria-label="Permalink to “Меры по смягчению последствий”">​</a></h4><ul><li>Не используйте опцию <code>insecureHTTPParser</code> при создании HTTP-сервера.</li><li>Настройте внешний сервер для нормализации неоднозначных запросов.</li><li>Постоянно отслеживайте новые уязвимости, связанные с контрабандой HTTP-запросов, как в Node.js, так и во внешнем сервере по выбору.</li><li>Используйте HTTP/2 от начала до конца и отключите понижение версии HTTP, если это возможно.</li></ul><h3 id="information-exposure-through-timing-attacks-cwe-208" tabindex="-1">Information Exposure through Timing Attacks (CWE-208) <a class="header-anchor" href="#information-exposure-through-timing-attacks-cwe-208" aria-label="Permalink to “Information Exposure through Timing Attacks (CWE-208)”">​</a></h3><p>Это атака, которая позволяет злоумышленнику получить потенциально конфиденциальную информацию, например, измеряя время, необходимое приложению для ответа на запрос. Эта атака не специфична для Node.js и может быть нацелена практически на все среды выполнения.</p><p>Атака возможна всякий раз, когда приложение использует секрет в операции, чувствительной ко времени (например, ветвление). Рассмотрим обработку аутентификации в типичном приложении. Здесь базовый метод аутентификации включает в себя электронную почту и пароль в качестве учетных данных. Информация о пользователе извлекается из входных данных, предоставленных пользователем, в идеале из СУБД. После извлечения информации о пользователе пароль сравнивается с информацией о пользователе, извлеченной из базы данных. Использование встроенного сравнения строк занимает больше времени для значений одинаковой длины. Это сравнение, когда оно выполняется в течение приемлемого времени, непреднамеренно увеличивает время ответа на запрос. Сравнивая время ответа на запрос, злоумышленник может угадать длину и значение пароля в большом количестве запросов.</p><h4 id="mitigations" tabindex="-1">Mitigations <a class="header-anchor" href="#mitigations" aria-label="Permalink to “Mitigations”">​</a></h4><ul><li>Crypto API предоставляет функцию <code>timingSafeEqual</code> для сравнения фактических и ожидаемых конфиденциальных значений с использованием алгоритма постоянного времени.</li><li>Для сравнения паролей вы можете использовать <a href="/ru/nodejs/api/crypto">scrypt</a>, также доступный в собственном криптографическом модуле.</li><li>В более общем смысле, избегайте использования секретов в операциях с переменным временем. Это включает в себя ветвление на секретах и, когда злоумышленник может быть размещен в той же инфраструктуре (например, на той же облачной машине), использование секрета в качестве индекса в памяти. Написать код с постоянным временем в JavaScript сложно (отчасти из-за JIT). Для криптографических приложений используйте встроенные криптографические API или WebAssembly (для алгоритмов, не реализованных изначально).</li></ul><h3 id="malicious-third-party-modules-cwe-1357" tabindex="-1">Malicious Third-Party Modules (CWE-1357) <a class="header-anchor" href="#malicious-third-party-modules-cwe-1357" aria-label="Permalink to “Malicious Third-Party Modules (CWE-1357)”">​</a></h3><p>В настоящее время в Node.js любой пакет может получить доступ к мощным ресурсам, таким как доступ к сети. Кроме того, поскольку они также имеют доступ к файловой системе, они могут отправлять любые данные куда угодно.</p><p>Весь код, работающий в процессе node, имеет возможность загружать и запускать дополнительный произвольный код с помощью <code>eval()</code> (или его эквивалентов). Весь код с доступом для записи к файловой системе может достичь того же, записывая в новые или существующие загруженные файлы.</p><p>Node.js имеет экспериментальный¹ <a href="/ru/nodejs/api/permissions">механизм политики</a> для объявления загруженного ресурса как ненадежного или доверенного. Однако эта политика не включена по умолчанию. Обязательно зафиксируйте версии зависимостей и выполняйте автоматические проверки на наличие уязвимостей, используя общие рабочие процессы или скрипты npm. Прежде чем устанавливать пакет, убедитесь, что этот пакет поддерживается и содержит все ожидаемое содержимое. Будьте осторожны, исходный код GitHub не всегда совпадает с опубликованным, проверьте его в <code>node_modules</code>.</p><h4 id="атаки-на-цепочку-поставок" tabindex="-1">Атаки на цепочку поставок <a class="header-anchor" href="#атаки-на-цепочку-поставок" aria-label="Permalink to “Атаки на цепочку поставок”">​</a></h4><p>Атака на цепочку поставок в Node.js-приложении происходит, когда одна из его зависимостей (прямая или транзитивная) скомпрометирована. Это может произойти либо из-за того, что приложение слишком лояльно относится к спецификации зависимостей (допуская нежелательные обновления), и/или из-за распространенных опечаток в спецификации (уязвимо для <a href="https://en.wikipedia.org/wiki/Typosquatting" target="_blank" rel="noreferrer">тайпосквоттинга</a>).</p><p>Злоумышленник, получивший контроль над вышестоящим пакетом, может опубликовать новую версию с вредоносным кодом. Если Node.js-приложение зависит от этого пакета, не указывая строго, какую версию безопасно использовать, пакет может быть автоматически обновлен до последней вредоносной версии, что приведет к компрометации приложения.</p><p>Зависимости, указанные в файле <code>package.json</code>, могут иметь точный номер версии или диапазон. Однако, когда зависимость привязана к точному номеру версии, ее транзитивные зависимости сами по себе не привязаны. Это все еще оставляет приложение уязвимым для нежелательных/неожиданных обновлений.</p><p>Возможные векторы атак:</p><ul><li>Тайпосквоттинг</li><li>Отравление Lockfile</li><li>Скомпрометированные мейнтейнеры</li><li>Вредоносные пакеты</li><li>Конфликты зависимостей</li></ul><h5 id="меры-по-смягчению-последствии-4" tabindex="-1">Меры по смягчению последствий <a class="header-anchor" href="#меры-по-смягчению-последствии-4" aria-label="Permalink to “Меры по смягчению последствий”">​</a></h5><ul><li>Запретите npm выполнять произвольные скрипты с помощью <code>--ignore-scripts</code><ul><li>Кроме того, вы можете отключить его глобально с помощью <code>npm config set ignore-scripts true</code></li></ul></li><li>Закрепите версии зависимостей за определенной неизменяемой версией, а не за версией, которая является диапазоном или из изменяемого источника.</li><li>Используйте lockfiles, которые закрепляют каждую зависимость (прямую и транзитивную). <ul><li>Используйте <a href="https://blog.ulisesgascon.com/lockfile-posioned" target="_blank" rel="noreferrer">Меры по смягчению последствий отравления lockfile</a>.</li></ul></li><li>Автоматизируйте проверки на наличие новых уязвимостей с помощью CI, используя такие инструменты, как <a href="https://www.npmjs.com/package/npm-audit" target="_blank" rel="noreferrer">npm-audit</a>. <ul><li>Такие инструменты, как <code>Socket</code>, можно использовать для анализа пакетов со статическим анализом, чтобы найти рискованное поведение, такое как доступ к сети или файловой системе.</li></ul></li><li>Используйте <code>npm ci</code> вместо <code>npm install</code>. Это обеспечивает соблюдение lockfile, так что несоответствия между ним и файлом <code>package.json</code> вызывают ошибку (вместо того, чтобы молча игнорировать lockfile в пользу <code>package.json</code>).</li><li>Тщательно проверьте файл <code>package.json</code> на наличие ошибок/опечаток в именах зависимостей.</li></ul><h3 id="нарушение-доступа-к-памяти-cwe-284" tabindex="-1">Нарушение доступа к памяти (CWE-284) <a class="header-anchor" href="#нарушение-доступа-к-памяти-cwe-284" aria-label="Permalink to “Нарушение доступа к памяти (CWE-284)”">​</a></h3><p>Атаки, основанные на памяти или куче, зависят от сочетания ошибок управления памятью и эксплуатируемого распределителя памяти. Как и все среды выполнения, Node.js уязвим для этих атак, если ваши проекты работают на общем компьютере. Использование безопасной кучи полезно для предотвращения утечки конфиденциальной информации из-за переполнения и недополнения указателей.</p><p>К сожалению, безопасная куча недоступна в Windows. Дополнительную информацию можно найти в <a href="/ru/nodejs/api/cli">документации по безопасной куче Node.js</a>.</p><h4 id="меры-по-смягчению-последствии-5" tabindex="-1">Меры по смягчению последствий <a class="header-anchor" href="#меры-по-смягчению-последствии-5" aria-label="Permalink to “Меры по смягчению последствий”">​</a></h4><ul><li>Используйте <code>--secure-heap=n</code> в зависимости от вашего приложения, где n - выделенный максимальный размер байтов.</li><li>Не запускайте ваше производственное приложение на общем компьютере.</li></ul><h3 id="monkey-patching-cwe-349" tabindex="-1">Monkey Patching (CWE-349) <a class="header-anchor" href="#monkey-patching-cwe-349" aria-label="Permalink to “Monkey Patching (CWE-349)”">​</a></h3><p>Monkey patching относится к изменению свойств во время выполнения с целью изменения существующего поведения. Пример:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// eslint-disable-next-line no-extend-native</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // overriding the global [].push</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="меры-по-смягчению-последствии-6" tabindex="-1">Меры по смягчению последствий <a class="header-anchor" href="#меры-по-смягчению-последствии-6" aria-label="Permalink to “Меры по смягчению последствий”">​</a></h4><p>Флаг <code>--frozen-intrinsics</code> включает экспериментальные¹ замороженные внутренние элементы, что означает, что все встроенные объекты и функции JavaScript рекурсивно заморожены. Следовательно, следующий фрагмент не переопределит поведение по умолчанию для <code>Array.prototype.push</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// eslint-disable-next-line no-extend-native</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // overriding the global [].push</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uncaught:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError &lt;Object &lt;Object &lt;[Object: null prototype] {}&gt;&gt;&gt;:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Cannot assign to read only property &#39;push&#39; of object &#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Однако важно отметить, что вы все равно можете определять новые глобальные переменные и заменять существующие глобальные переменные, используя <code>globalThis</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalThis.foo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> still</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> define</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> globals</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalThis.Array</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> However,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> also</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> replace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> existing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> globals</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Следовательно, <code>Object.freeze(globalThis)</code> можно использовать, чтобы гарантировать, что никакие глобальные переменные не будут заменены.</p><h3 id="атаки-с-загрязнением-прототипов-cwe-1321" tabindex="-1">Атаки с загрязнением прототипов (CWE-1321) <a class="header-anchor" href="#атаки-с-загрязнением-прототипов-cwe-1321" aria-label="Permalink to “Атаки с загрязнением прототипов (CWE-1321)”">​</a></h3><p>Загрязнение прототипа относится к возможности изменения или внедрения свойств в элементы языка Javascript путем злоупотребления использованием _<em>proto</em>, _constructor, prototype и других свойств, унаследованных от встроенных прототипов.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;__proto__&quot;: { &quot;polluted&quot;: true}}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, a, data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c.polluted) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Potential DoS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;__proto__&quot;: null}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, data2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasOwnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uncaught TypeError: d.hasOwnProperty is not a function</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Это потенциальная уязвимость, унаследованная от языка JavaScript.</p><h4 id="примеры" tabindex="-1">Примеры <a class="header-anchor" href="#примеры" aria-label="Permalink to “Примеры”">​</a></h4><ul><li><a href="https://www.cvedetails.com/cve/CVE-2022-21824/" target="_blank" rel="noreferrer">CVE-2022-21824</a> (Node.js)</li><li><a href="https://www.cvedetails.com/cve/CVE-2018-3721/" target="_blank" rel="noreferrer">CVE-2018-3721</a> (Сторонняя библиотека: Lodash)</li></ul><h4 id="меры-по-снижению-рисков" tabindex="-1">Меры по снижению рисков <a class="header-anchor" href="#меры-по-снижению-рисков" aria-label="Permalink to “Меры по снижению рисков”">​</a></h4><ul><li>Избегайте <a href="https://gist.github.com/DaniAkash/b3d7159fddcff0a9ee035bd10e34b277#file-unsafe-merge-js" target="_blank" rel="noreferrer">небезопасных рекурсивных слияний</a>, см. <a href="https://www.cve.org/CVERecord?id=CVE-2018-16487" target="_blank" rel="noreferrer">CVE-2018-16487</a>.</li><li>Внедрите проверки JSON Schema для внешних/ненадежных запросов.</li><li>Создавайте Объекты без прототипа, используя <code>Object.create(null)</code>.</li><li>Заморозка прототипа: <code>Object.freeze(MyObject.prototype)</code>.</li><li>Отключите свойство <code>Object.prototype.__proto__</code>, используя флаг <code>--disable-proto</code>.</li><li>Убедитесь, что свойство существует непосредственно в объекте, а не в прототипе, используя <code>Object.hasOwn(obj, keyFromObj)</code>.</li><li>Избегайте использования методов из <code>Object.prototype</code>.</li></ul><h3 id="неконтролируемыи-элемент-пути-поиска-cwe-427" tabindex="-1">Неконтролируемый элемент пути поиска (CWE-427) <a class="header-anchor" href="#неконтролируемыи-элемент-пути-поиска-cwe-427" aria-label="Permalink to “Неконтролируемый элемент пути поиска (CWE-427)”">​</a></h3><p>Node.js загружает модули, следуя <a href="/ru/nodejs/api/modules">Алгоритму разрешения модулей</a>. Следовательно, он предполагает, что каталог, в котором запрашивается модуль (require), является доверенным.</p><p>Под этим подразумевается ожидаемое поведение приложения, которое выглядит следующим образом. Предположим следующую структуру каталогов:</p><ul><li>app/ <ul><li>server.js</li><li>auth.js</li><li>auth</li></ul></li></ul><p>Если server.js использует <code>require(&#39;./auth&#39;)</code>, он будет следовать алгоритму разрешения модулей и загрузит auth вместо <code>auth.js</code>.</p><h4 id="меры-по-снижению-рисков-1" tabindex="-1">Меры по снижению рисков <a class="header-anchor" href="#меры-по-снижению-рисков-1" aria-label="Permalink to “Меры по снижению рисков”">​</a></h4><p>Использование экспериментального¹ <a href="/ru/nodejs/api/permissions">механизма политик с проверкой целостности</a> может помочь избежать вышеуказанной угрозы. Для каталога, описанного выше, можно использовать следующий <code>policy.json</code></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./app/auth.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;integrity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-iuGZ6SFVFpMuHUcJciQTIKpIyaQVigMZlvg9Lx66HV8=&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./app/server.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;./auth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./app/auth.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;integrity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-NPtLCQ0ntPPWgfVEgX46ryTNpdvTWdQPoZO3kHo0bKI=&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Следовательно, при запросе модуля auth система будет проверять целостность и выдавать ошибку, если она не соответствует ожидаемой.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">»</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --experimental-policy=policy.json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app/server.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node:internal/policy/sri:65</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      throw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ERR_SRI_PARSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">str,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> str[prevIndex],</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prevIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SyntaxError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ERR_SRI_PARSE]: Subresource Integrity string </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-iuGZ6SFVFpMuHUcJciQTIKpIyaQVigMZlvg9Lx66HV8=%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> had an unexpected </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> at position 51</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NodeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/errors:393:5)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Object.parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/policy/sri:65:13)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> processEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/policy/manifest:581:38)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Manifest.assertIntegrity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/policy/manifest:588:32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1119:21)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._extensions..js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1213:10)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module.load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1037:32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:878:12)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module.require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1061:19)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/helpers:99:18) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  code:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_SRI_PARSE&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Обратите внимание, всегда рекомендуется использовать <code>--policy-integrity</code>, чтобы избежать мутаций политики.</p><h2 id="экспериментальные-функции-в-production" tabindex="-1">Экспериментальные функции в Production <a class="header-anchor" href="#экспериментальные-функции-в-production" aria-label="Permalink to “Экспериментальные функции в Production”">​</a></h2><p>Использование экспериментальных функций в production не рекомендуется. Экспериментальные функции могут подвергаться обратно несовместимым изменениям при необходимости, и их функциональность не является стабильной с точки зрения безопасности. Тем не менее, обратная связь очень ценится.</p><h2 id="инструменты-openssf" tabindex="-1">Инструменты OpenSSF <a class="header-anchor" href="#инструменты-openssf" aria-label="Permalink to “Инструменты OpenSSF”">​</a></h2><p><a href="https://www.openssf.org" target="_blank" rel="noreferrer">OpenSSF</a> возглавляет несколько инициатив, которые могут быть очень полезными, особенно если вы планируете опубликовать npm-пакет. Эти инициативы включают:</p><ul><li><a href="https://securityscorecards.dev/" target="_blank" rel="noreferrer">OpenSSF Scorecard</a> Scorecard оценивает проекты с открытым исходным кодом, используя серию автоматизированных проверок рисков безопасности. Вы можете использовать его для проактивной оценки уязвимостей и зависимостей в вашей кодовой базе и принятия обоснованных решений о принятии уязвимостей.</li><li><a href="https://bestpractices.coreinfrastructure.org/en" target="_blank" rel="noreferrer">OpenSSF Best Practices Badge Program</a> Проекты могут добровольно самосертифицироваться, описывая, как они соответствуют каждой передовой практике. Это сгенерирует значок, который можно добавить в проект.</li></ul>`,87)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};