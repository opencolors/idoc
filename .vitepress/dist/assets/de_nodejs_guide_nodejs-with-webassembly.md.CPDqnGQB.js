import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js mit WebAssembly","description":"WebAssembly ist eine Hochleistungs-Assembler-Sprache, die aus verschiedenen Sprachen kompiliert werden kann, darunter C/C++, Rust und AssemblyScript. Node.js stellt die erforderlichen APIs über das globale WebAssembly-Objekt zur Verfügung, um mit WebAssembly zu kommunizieren.","frontmatter":{"title":"Node.js mit WebAssembly","description":"WebAssembly ist eine Hochleistungs-Assembler-Sprache, die aus verschiedenen Sprachen kompiliert werden kann, darunter C/C++, Rust und AssemblyScript. Node.js stellt die erforderlichen APIs über das globale WebAssembly-Objekt zur Verfügung, um mit WebAssembly zu kommunizieren.","head":[["meta",{"name":"og:title","content":"Node.js mit WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"WebAssembly ist eine Hochleistungs-Assembler-Sprache, die aus verschiedenen Sprachen kompiliert werden kann, darunter C/C++, Rust und AssemblyScript. Node.js stellt die erforderlichen APIs über das globale WebAssembly-Objekt zur Verfügung, um mit WebAssembly zu kommunizieren."}],["meta",{"name":"twitter:title","content":"Node.js mit WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"WebAssembly ist eine Hochleistungs-Assembler-Sprache, die aus verschiedenen Sprachen kompiliert werden kann, darunter C/C++, Rust und AssemblyScript. Node.js stellt die erforderlichen APIs über das globale WebAssembly-Objekt zur Verfügung, um mit WebAssembly zu kommunizieren."}],["link",{"rel":"canonical","href":"https://idoc.dev/de/nodejs/guide/nodejs-with-webassembly"}],["meta",{"property":"og:url","content":"https://idoc.dev/de/nodejs/guide/nodejs-with-webassembly"}]]},"headers":[],"relativePath":"de/nodejs/guide/nodejs-with-webassembly.md","filePath":"de/nodejs/guide/nodejs-with-webassembly.md","lastUpdated":null}`),a={name:`de/nodejs/guide/nodejs-with-webassembly.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-mit-webassembly" tabindex="-1">Node.js mit WebAssembly <a class="header-anchor" href="#node-js-mit-webassembly" aria-label="Permalink to “Node.js mit WebAssembly”">​</a></h1><p><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> ist eine leistungsstarke, assemblerähnliche Sprache, die aus verschiedenen Sprachen kompiliert werden kann, darunter C/C++, Rust und AssemblyScript. Derzeit wird sie von Chrome, Firefox, Safari, Edge und Node.js unterstützt!</p><p>Die WebAssembly-Spezifikation beschreibt zwei Dateiformate, ein binäres Format namens WebAssembly-Modul mit der Erweiterung <code>.wasm</code> und eine entsprechende Textdarstellung namens WebAssembly-Textformat mit der Erweiterung <code>.wat</code>.</p><h2 id="wichtige-konzepte" tabindex="-1">Wichtige Konzepte <a class="header-anchor" href="#wichtige-konzepte" aria-label="Permalink to “Wichtige Konzepte”">​</a></h2><ul><li>Modul - Eine kompilierte WebAssembly-Binärdatei, d. h. eine <code>.wasm</code>-Datei.</li><li>Speicher - Ein ArrayBuffer mit variabler Größe.</li><li>Tabelle - Ein Typed Array mit variabler Größe von Referenzen, die nicht im Speicher gespeichert sind.</li><li>Instanz - Eine Instanziierung eines Moduls mit seinem Speicher, seiner Tabelle und seinen Variablen.</li></ul><p>Um WebAssembly zu verwenden, benötigen Sie eine <code>.wasm</code>-Binärdatei und eine Reihe von APIs zur Kommunikation mit WebAssembly. Node.js stellt die notwendigen APIs über das globale <code>WebAssembly</code>-Objekt bereit.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebAssembly)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Object [WebAssembly] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  compile: [Function: compile],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  validate: [Function: validate],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  instantiate: [Function: instantiate]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="generieren-von-webassembly-modulen" tabindex="-1">Generieren von WebAssembly-Modulen <a class="header-anchor" href="#generieren-von-webassembly-modulen" aria-label="Permalink to “Generieren von WebAssembly-Modulen”">​</a></h2><p>Es gibt verschiedene Methoden zum Generieren von WebAssembly-Binärdateien, darunter:</p><ul><li>Schreiben von WebAssembly (<code>.wat</code>) von Hand und Konvertieren in das Binärformat mithilfe von Tools wie <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a>.</li><li>Verwenden von <a href="https://github.com/emscripten-core/emscripten" target="_blank" rel="noreferrer">emscripten</a> mit einer C/C++-Anwendung</li><li>Verwenden von <a href="https://github.com/rustwasm/wasm-pack" target="_blank" rel="noreferrer">wasm-pack</a> mit einer Rust-Anwendung</li><li>Verwenden von <a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noreferrer">AssemblyScript</a>, wenn Sie eine TypeScript-ähnliche Erfahrung bevorzugen</li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong>Einige dieser Tools generieren nicht nur die Binärdatei, sondern auch den JavaScript-&quot;Glue&quot;-Code und die entsprechenden HTML-Dateien zur Ausführung im Browser.</strong></p></div><h2 id="wie-man-es-benutzt" tabindex="-1">Wie man es benutzt <a class="header-anchor" href="#wie-man-es-benutzt" aria-label="Permalink to “Wie man es benutzt”">​</a></h2><p>Sobald Sie ein WebAssembly-Modul haben, können Sie das Node.js <code>WebAssembly</code>-Objekt verwenden, um es zu instanziieren.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/add.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasmBuffer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wasmModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Exportierte Funktionen befinden sich unter instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmModule.instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Gibt aus: 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="interaktion-mit-dem-betriebssystem" tabindex="-1">Interaktion mit dem Betriebssystem <a class="header-anchor" href="#interaktion-mit-dem-betriebssystem" aria-label="Permalink to “Interaktion mit dem Betriebssystem”">​</a></h2><p>WebAssembly-Module können nicht direkt auf Betriebssystemfunktionen zugreifen. Ein Drittanbieter-Tool <a href="https://github.com/bytecodealliance/wasmtime" target="_blank" rel="noreferrer">Wasmtime</a> kann verwendet werden, um auf diese Funktionalität zuzugreifen. <code>Wasmtime</code> nutzt die <a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a> API, um auf die Betriebssystemfunktionalität zuzugreifen.</p><h2 id="ressourcen" tabindex="-1">Ressourcen <a class="header-anchor" href="#ressourcen" aria-label="Permalink to “Ressourcen”">​</a></h2><ul><li><a href="https://webassembly.org/" target="_blank" rel="noreferrer">Allgemeine WebAssembly-Informationen</a></li><li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noreferrer">MDN-Dokumente</a></li><li><a href="https://webassembly.github.io/spec/core/text/index.html" target="_blank" rel="noreferrer">WebAssembly von Hand schreiben</a></li></ul>`,18)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};