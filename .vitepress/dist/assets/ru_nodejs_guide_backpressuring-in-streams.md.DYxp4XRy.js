import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Понимание откачки в потоках Node.js","description":"Узнайте, как реализовать пользовательские потоки Readable и Writable в Node.js, соблюдая откачку для обеспечения эффективного потока данных и избегая распространенных ловушек.","frontmatter":{"title":"Понимание откачки в потоках Node.js","description":"Узнайте, как реализовать пользовательские потоки Readable и Writable в Node.js, соблюдая откачку для обеспечения эффективного потока данных и избегая распространенных ловушек.","head":[["meta",{"name":"og:title","content":"Понимание откачки в потоках Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Узнайте, как реализовать пользовательские потоки Readable и Writable в Node.js, соблюдая откачку для обеспечения эффективного потока данных и избегая распространенных ловушек."}],["meta",{"name":"twitter:title","content":"Понимание откачки в потоках Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Узнайте, как реализовать пользовательские потоки Readable и Writable в Node.js, соблюдая откачку для обеспечения эффективного потока данных и избегая распространенных ловушек."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/guide/backpressuring-in-streams"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/guide/backpressuring-in-streams"}]]},"headers":[],"relativePath":"ru/nodejs/guide/backpressuring-in-streams.md","filePath":"ru/nodejs/guide/backpressuring-in-streams.md","lastUpdated":null}`),a={name:`ru/nodejs/guide/backpressuring-in-streams.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="обратное-давление-в-потоках" tabindex="-1">Обратное давление в потоках <a class="header-anchor" href="#обратное-давление-в-потоках" aria-label="Permalink to “Обратное давление в потоках”">​</a></h1><p>Существует общая проблема, возникающая при обработке данных, называемая обратным давлением (backpressure), которая описывает накопление данных за буфером во время передачи данных. Когда принимающая сторона передачи выполняет сложные операции или работает медленнее по какой-либо причине, возникает тенденция к накоплению данных из входящего источника, как засор.</p><p>Чтобы решить эту проблему, должна быть создана система делегирования, обеспечивающая плавный поток данных от одного источника к другому. Различные сообщества решали эту проблему уникальным образом для своих программ. Хорошими примерами являются Unix pipes и TCP sockets, которые часто называют управлением потоком (flow control). В Node.js потоки (streams) стали принятым решением.</p><p>Цель этого руководства - подробно рассказать, что такое обратное давление и как именно потоки решают эту проблему в исходном коде Node.js. Во второй части руководства будут представлены рекомендуемые передовые методы для обеспечения безопасности и оптимизации кода вашего приложения при реализации потоков.</p><p>Мы предполагаем небольшую осведомленность об общем определении <code>backpressure</code>, <code>Buffer</code> и <code>EventEmitters</code> в Node.js, а также некоторый опыт работы с <code>Stream</code>. Если вы еще не читали эти документы, неплохо было бы сначала ознакомиться с <a href="/ru/nodejs/api/stream">документацией API</a>, так как это поможет вам расширить понимание при чтении этого руководства.</p><h2 id="проблема-с-обработкои-данных" tabindex="-1">Проблема с обработкой данных <a class="header-anchor" href="#проблема-с-обработкои-данных" aria-label="Permalink to “Проблема с обработкой данных”">​</a></h2><p>В компьютерной системе данные передаются от одного процесса к другому через каналы (pipes), сокеты (sockets) и сигналы (signals). В Node.js мы находим аналогичный механизм под названием <code>Stream</code>. Потоки - это здорово! Они так много делают для Node.js, и почти каждая часть внутреннего кода использует этот модуль. Вам, как разработчику, более чем рекомендуется использовать их тоже!</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:readline&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> readline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output: process.stdout,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input: process.stdin,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">question</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Почему вам следует использовать потоки? &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">answer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Возможно, это \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">answer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, возможно, это потому, что они потрясающие!\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Хорошим примером того, почему механизм обратного давления, реализованный через потоки, является отличной оптимизацией, можно продемонстрировать, сравнив внутренние системные инструменты из реализации Stream в Node.js.</p><p>В одном сценарии мы возьмем большой файл (примерно -9 ГБ) и сожмем его с помощью знакомого инструмента <code>zip(1)</code>.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> The.Matrix.1080p.mkv</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Хотя это займет несколько минут, в другом shell мы можем запустить скрипт, который использует модуль <code>zlib</code> из Node.js, который обертывает другой инструмент сжатия, <code>gzip(1)</code>.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gzip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:zlib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createGzip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The.Matrix.1080p.mkv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWriteStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The.Matrix.1080p.mkv.gz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gzip).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Чтобы проверить результаты, попробуйте открыть каждый сжатый файл. Файл, сжатый инструментом <code>zip(1)</code>, уведомит вас о том, что файл поврежден, тогда как сжатие, завершенное Stream, будет распаковано без ошибок.</p><div class="tip custom-block"><p class="custom-block-title">Примечание</p><p>В этом примере мы используем <code>.pipe()</code>, чтобы получить источник данных с одного конца на другой. Однако обратите внимание, что нет подключенных правильных обработчиков ошибок. Если фрагмент данных не будет получен должным образом, источник Readable или поток <code>gzip</code> не будут уничтожены. <code>pump</code> — это служебный инструмент, который должным образом уничтожит все потоки в конвейере, если один из них выйдет из строя или закроется, и он просто необходим в этом случае!</p></div><p><code>pump</code> необходим только для Node.js 8.x или более ранних версий, поскольку для Node.js 10.x или более поздних версий был представлен <code>pipeline</code> для замены <code>pump</code>. Это метод модуля для передачи данных между потоками, пересылки ошибок, надлежащей очистки и предоставления обратного вызова по завершении конвейера.</p><p>Вот пример использования конвейера:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:stream&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> zlib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:zlib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the pipeline API to easily pipe a series of streams</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// together and get notified when the pipeline is fully done.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// A pipeline to gzip a potentially huge video file efficiently:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The.Matrix.1080p.mkv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  zlib.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createGzip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWriteStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The.Matrix.1080p.mkv.gz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Конвейер не удался&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Конвейер успешен&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>Вы также можете использовать модуль <code>stream/promises</code> для использования конвейера с <code>async / await</code>:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:stream/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> zlib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:zlib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pipeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The.Matrix.1080p.mkv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      zlib.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createGzip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWriteStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The.Matrix.1080p.mkv.gz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Конвейер успешен&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Конвейер не удался&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="слишком-много-данных-слишком-быстро" tabindex="-1">Слишком много данных, слишком быстро <a class="header-anchor" href="#слишком-много-данных-слишком-быстро" aria-label="Permalink to “Слишком много данных, слишком быстро”">​</a></h2><p>Бывают случаи, когда поток <code>Readable</code> может отдавать данные в <code>Writable</code> слишком быстро - гораздо больше, чем потребитель может обработать!</p><p>Когда это происходит, потребитель начинает ставить в очередь все фрагменты данных для последующего использования. Очередь записи становится все длиннее и длиннее, и из-за этого больше данных должно храниться в памяти до завершения всего процесса.</p><p>Запись на диск происходит намного медленнее, чем чтение с диска, поэтому, когда мы пытаемся сжать файл и записать его на жесткий диск, возникает противодавление, потому что диск записи не сможет угнаться за скоростью чтения.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Тайно поток говорит: &quot;Ого, ого! Погоди, это слишком много!&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Данные начнут накапливаться на стороне чтения буфера данных, поскольку</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// write&#39; пытается угнаться за входящим потоком данных.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gzip).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputFile);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Вот почему важен механизм противодавления. Если бы системы противодавления не было, процесс исчерпал бы память вашей системы, фактически замедляя другие процессы и монополизируя большую часть вашей системы до завершения.</p><p>Это приводит к нескольким вещам:</p><ul><li>Замедление всех других текущих процессов</li><li>Очень перегруженный сборщик мусора</li><li>Истощение памяти</li></ul><p>В следующих примерах мы уберем возвращаемое значение функции <code>.write()</code> и изменим его на <code>true</code>, что фактически отключит поддержку противодавления в ядре Node.js. В любом упоминании о <code>&#39;modified&#39;</code> binary мы говорим о запуске двоичного файла node без строки <code>return ret;</code>, а вместо нее с заменой на <code>return true;</code>.</p><h2 id="чрезмерное-сопротивление-сборке-мусора" tabindex="-1">Чрезмерное сопротивление сборке мусора <a class="header-anchor" href="#чрезмерное-сопротивление-сборке-мусора" aria-label="Permalink to “Чрезмерное сопротивление сборке мусора”">​</a></h2><p>Давайте взглянем на быстрый бенчмарк. Используя тот же пример, что и выше, мы провели несколько временных испытаний, чтобы получить среднее время для обоих двоичных файлов.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   trial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (#)  | \`node\` binary (ms) | modified \`node\` binary (ms)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=================================================================</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      56924</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           55011</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      52686</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           55869</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      59479</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           54043</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      54473</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           55229</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      52933</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           59723</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=================================================================</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> time:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      55299</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           55975</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Оба занимают около минуты, так что разницы почти нет, но давайте присмотримся, чтобы убедиться, что наши подозрения верны. Мы используем Linux-инструмент <code>dtrace</code>, чтобы оценить, что происходит со сборщиком мусора V8.</p><p>Измеренное время GC (сборщика мусора) указывает на интервалы полного цикла одной очистки, выполняемой сборщиком мусора:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">approx.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ms) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ms) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> modified</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ms)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=================================================</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         40</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        170</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        300</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           *</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           *</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           *</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      39000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     26</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      42000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     21</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      47000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     32</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      50000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     28</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      54000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     35</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Хотя два процесса начинаются одинаково и, кажется, работают с GC с одинаковой скоростью, становится очевидно, что через несколько секунд с правильно работающей системой противодавления она распределяет нагрузку GC по последовательным интервалам в 4-8 миллисекунд до конца передачи данных.</p><p>Однако, когда системы противодавления нет, сбор мусора V8 начинает затягиваться. Обычный двоичный файл вызывает GC примерно 75 раз в минуту, тогда как измененный двоичный файл - только 36 раз.</p><p>Это медленный и постепенный долг, накапливающийся из-за растущего использования памяти. По мере передачи данных без системы противодавления для каждого фрагмента передачи используется больше памяти.</p><p>Чем больше памяти выделяется, тем больше GC приходится обрабатывать за одну очистку. Чем больше очистка, тем больше GC нужно решить, что можно освободить, и сканирование отсоединенных указателей в большем пространстве памяти будет потреблять больше вычислительной мощности.</p><h2 id="исчерпание-памяти" tabindex="-1">Исчерпание памяти <a class="header-anchor" href="#исчерпание-памяти" aria-label="Permalink to “Исчерпание памяти”">​</a></h2><p>Чтобы определить потребление памяти каждым бинарным файлом, мы засекали время работы каждого процесса с помощью <code>/usr/bin/time -lp sudo ./node ./backpressure-example/zlib.js</code> индивидуально.</p><p>Это вывод для обычного бинарного файла:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Соблюдение</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> возвращаемого</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> значения</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=============================================</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">real</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        58.88</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        56.79</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sys</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          8.79</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  87810048</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  maximum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resident</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> size</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> memory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> size</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unshared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> size</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unshared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> size</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     19427</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  page</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reclaims</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      3134</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  page</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> faults</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  swaps</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  block</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> operations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       194</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  block</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> operations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  messages</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  messages</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> received</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  signals</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> received</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  voluntary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> switches</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    666037</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  involuntary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> switches</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>Оказывается, максимальный размер в байтах, занимаемый виртуальной памятью, составляет примерно 87,81 МБ.</p><p>А теперь изменим возвращаемое значение функции <code>.write()</code> и получим:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Без</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> соблюдения</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> возвращаемого</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> значения</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">==================================================</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">real</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        54.48</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        53.15</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sys</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          7.43</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1524965376</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  maximum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resident</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> size</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> memory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> size</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unshared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> size</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unshared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> size</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    373617</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  page</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reclaims</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      3139</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  page</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> faults</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  swaps</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        18</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  block</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> operations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       199</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  block</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> operations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  messages</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  messages</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> received</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  signals</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> received</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        25</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  voluntary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> switches</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    629566</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  involuntary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> switches</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>Оказывается, максимальный размер в байтах, занимаемый виртуальной памятью, составляет примерно 1,52 ГБ.</p><p>Без потоков для делегирования обратного давления выделяется на порядок больше места в памяти — огромная разница между одним и тем же процессом!</p><p>Этот эксперимент показывает, насколько оптимизирован и экономичен механизм обратного давления Node.js для вашей вычислительной системы. Теперь давайте разберемся, как это работает!</p><h2 id="как-backpressure-решает-эти-проблемы" tabindex="-1">Как Backpressure Решает Эти Проблемы? <a class="header-anchor" href="#как-backpressure-решает-эти-проблемы" aria-label="Permalink to “Как Backpressure Решает Эти Проблемы?”">​</a></h2><p>Существуют различные функции для передачи данных из одного процесса в другой. В Node.js есть встроенная функция <code>.pipe()</code>. Существуют и другие пакеты, которые вы также можете использовать! В конечном счете, на базовом уровне этого процесса у нас есть два отдельных компонента: источник данных и потребитель.</p><p>Когда <code>.pipe()</code> вызывается из источника, он сигнализирует потребителю о том, что есть данные для передачи. Функция pipe помогает настроить соответствующие замыкания backpressure для триггеров событий.</p><p>В Node.js источником является поток <code>Readable</code>, а потребителем - поток <code>Writable</code> (оба они могут быть заменены потоком Duplex или Transform, но это выходит за рамки данного руководства).</p><p>Момент, когда срабатывает backpressure, можно точно определить по возвращаемому значению функции <code>.write()</code> потока <code>Writable</code>. Это возвращаемое значение, конечно, определяется несколькими условиями.</p><p>В любом сценарии, когда буфер данных превысил <code>highwaterMark</code> или очередь записи в настоящее время занята, <code>.write()</code> <code>вернет false</code>.</p><p>Когда возвращается значение <code>false</code>, срабатывает система backpressure. Она приостановит входящий поток <code>Readable</code> от отправки каких-либо данных и будет ждать, пока потребитель снова не будет готов. Как только буфер данных опустеет, будет сгенерировано событие <code>&#39;drain&#39;</code> и возобновится входящий поток данных.</p><p>Как только очередь будет завершена, backpressure позволит снова отправлять данные. Пространство в памяти, которое использовалось, освободится и подготовится к следующей партии данных.</p><p>Это эффективно позволяет использовать фиксированный объем памяти в любой момент времени для функции <code>.pipe()</code>. Не будет утечки памяти, не будет бесконечной буферизации, и сборщику мусора придется иметь дело только с одной областью в памяти!</p><p>Итак, если backpressure так важна, почему вы (вероятно) о ней не слышали? Ответ прост: Node.js делает все это автоматически для вас.</p><p>Это так здорово! Но не так уж и здорово, когда мы пытаемся понять, как реализовать наши собственные потоки.</p><div class="info custom-block"><p class="custom-block-title">ПРИМЕЧАНИЕ</p><p>В большинстве машин есть размер байтов, который определяет, когда буфер заполнен (который будет варьироваться на разных машинах). Node.js позволяет вам установить свой собственный <code>highWaterMark</code>, но обычно по умолчанию установлено значение 16 КБ (16384 или 16 для потоков objectMode). В случаях, когда вы, возможно, захотите поднять это значение, дерзайте, но делайте это с осторожностью!</p></div><h2 id="жизненныи-цикл-pipe" tabindex="-1">Жизненный цикл <code>.pipe()</code> <a class="header-anchor" href="#жизненныи-цикл-pipe" aria-label="Permalink to “Жизненный цикл .pipe()”">​</a></h2><p>Чтобы лучше понять, что такое противодавление, вот блок-схема жизненного цикла потока <code>Readable</code>, который <a href="/ru/nodejs/api/stream">передается</a> в поток <code>Writable</code>:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                                                     +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">===================+</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                         x--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Функции</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> конвейеризации</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   src.pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                         x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     настраиваются</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> во</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> время</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">===================</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                         x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     метода</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .pipe.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Обратные</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> вызовы</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> событий</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">===============+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                           |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-------------------</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Ваши</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> данные</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     Они</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> существуют</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> вне</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .on(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;close&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=======+=======+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     потока</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> данных,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> но</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .on(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;data&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     важно</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> прикреплять</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .on(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;drain&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     события</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> и</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> их</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">             |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .on(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;unpipe&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+---------v---------+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     соответствующие</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> обратные</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .on(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;error&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Readable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Stream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  +----+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                           |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .on(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;finish&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+-^-------^-------^-+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                           |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .on(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;end&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ^</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ^</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                           +-------------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ^</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ^</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ^</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ^</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    +-------------------+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         +=================+</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ^</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ^</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      +---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Writable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Stream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  +--------</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  .write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           +-------------------+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         +=======+=========+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ^</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                 |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                              +------------------v---------+</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ^</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       +-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (!chunk)                </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Этот</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> фрагмент</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> слишком</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> велик?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ^</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     emit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();             </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Очередь</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> занята?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       +-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                       +-------+----------------+---+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ^</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     emit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();                   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ^</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ^</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                   +--v---+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        +---v---+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ^-----------------------------------</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Нет</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Да</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                                           +------+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        +---v---+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                               |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ^</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ^</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               emit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .pause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();          </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=================+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ^-------^----------------^-----------------------+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-----+---+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">               |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                                               +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=================+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">               |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                                                           |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ^</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            when</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> queue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> empty</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     +============+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ^------------^-----------------------</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Буферизация</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">               |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                       |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">============</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">emit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .drain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ^Буфер^</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">emit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();      </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+------------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ^Буфер^</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                                       +------------+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   добавить</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> фрагмент</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> в</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> очередь</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---^---------------------</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                                       +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">============+</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Если вы настраиваете конвейер для последовательного соединения нескольких потоков для манипулирования вашими данными, скорее всего, вы будете реализовывать поток Transform.</p></div><p>В этом случае ваш вывод из потока <code>Readable</code> будет поступать в <code>Transform</code> и будет передаваться в <code>Writable</code>.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Readable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Transformable).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Writable);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Противодавление будет применяться автоматически, но обратите внимание, что как входящий, так и исходящий <code>highwaterMark</code> потока <code>Transform</code> могут изменяться и влиять на систему противодавления.</p><h2 id="руководство-по-обратному-давлению" tabindex="-1">Руководство по обратному давлению <a class="header-anchor" href="#руководство-по-обратному-давлению" aria-label="Permalink to “Руководство по обратному давлению”">​</a></h2><p>Начиная с Node.js v0.10, класс Stream предлагает возможность изменять поведение <code>.read()</code> или <code>.write()</code> с помощью версий этих функций с подчеркиванием (<code>._read()</code> и <code>._write()</code> соответственно).</p><p>Существуют руководства по реализации Readable потоков и реализации Writable потоков. Предполагается, что вы их прочитали, и следующий раздел будет немного более подробным.</p><h2 id="правила-которые-следует-соблюдать-при-реализации-пользовательских-потоков" tabindex="-1">Правила, которые следует соблюдать при реализации пользовательских потоков <a class="header-anchor" href="#правила-которые-следует-соблюдать-при-реализации-пользовательских-потоков" aria-label="Permalink to “Правила, которые следует соблюдать при реализации пользовательских потоков”">​</a></h2><p>Золотое правило потоков - всегда уважать обратное давление. Лучшая практика - это непротиворечивая практика. Пока вы внимательно избегаете поведения, которое конфликтует с внутренней поддержкой обратного давления, вы можете быть уверены, что следуете хорошей практике.</p><p>В общем,</p><ol><li>Никогда не используйте <code>.push()</code>, если вас не просят.</li><li>Никогда не вызывайте <code>.write()</code> после того, как он вернул false, а вместо этого ждите &#39;drain&#39;.</li><li>Потоки меняются между разными версиями Node.js и используемой вами библиотекой. Будьте осторожны и тестируйте вещи.</li></ol><div class="tip custom-block"><p class="custom-block-title">ПРИМЕЧАНИЕ</p><p>Что касается пункта 3, невероятно полезным пакетом для создания потоков браузера является <code>readable-stream</code>. Rodd Vagg написал <a href="https://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html" target="_blank" rel="noreferrer">отличный пост в блоге</a>, описывающий полезность этой библиотеки. Короче говоря, он обеспечивает своего рода автоматическую плавную деградацию для Readable потоков и поддерживает более старые версии браузеров и Node.js.</p></div><h2 id="правила-специфичные-для-readable-потоков" tabindex="-1">Правила, специфичные для Readable потоков <a class="header-anchor" href="#правила-специфичные-для-readable-потоков" aria-label="Permalink to “Правила, специфичные для Readable потоков”">​</a></h2><p>До сих пор мы рассматривали, как <code>.write()</code> влияет на обратное давление, и в основном сосредотачивались на Writable потоке. Из-за функциональности Node.js данные технически текут вниз по потоку от Readable к Writable. Однако, как мы можем наблюдать при любой передаче данных, материи или энергии, источник так же важен, как и пункт назначения, и Readable поток жизненно важен для того, как обрабатывается обратное давление.</p><p>Оба эти процесса полагаются друг на друга для эффективного взаимодействия. Если Readable игнорирует, когда Writable поток просит его прекратить отправку данных, это может быть так же проблематично, как и в случае, когда возвращаемое значение <code>.write()</code> неверно.</p><p>Таким образом, помимо уважения возвращаемого значения <code>.write()</code>, мы также должны уважать возвращаемое значение <code>.push()</code>, используемого в методе <code>._read()</code>. Если <code>.push()</code> возвращает значение false, поток прекратит чтение из источника. В противном случае он будет продолжаться без паузы.</p><p>Вот пример плохой практики использования <code>.push()</code>:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Это проблематично, так как оно полностью игнорирует возвращаемое значение из push</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// что может быть сигналом обратного давления от целевого потока!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyReadable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Readable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  _read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunk;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (chunk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNextChunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunk);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Кроме того, за пределами пользовательского потока есть подводные камни, связанные с игнорированием обратного давления. В этом контрпримере хорошей практики код приложения принудительно передает данные, когда они доступны (сигнализируется событием <code>&#39;data&#39;</code>):</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Это игнорирует механизмы обратного давления, установленные Node.js,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// и безусловно передает данные, независимо от того, готов ли</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// целевой поток к ним или нет.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">readable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> writable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Вот пример использования <code>.push()</code> с Readable потоком.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Readable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:stream&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Создайте пользовательский Readable поток</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myReadableStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Readable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  objectMode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Добавьте немного данных в поток</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Отметьте конец потока</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Потребляйте поток</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myReadableStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunk);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Вывод:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { message: &#39;Hello, world!&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="правила-специфичные-для-записываемых-потоков" tabindex="-1">Правила, специфичные для записываемых потоков <a class="header-anchor" href="#правила-специфичные-для-записываемых-потоков" aria-label="Permalink to “Правила, специфичные для записываемых потоков”">​</a></h2><p>Напомним, что <code>.write()</code> может возвращать true или false в зависимости от определенных условий. К счастью для нас, при создании нашего собственного записываемого потока, конечный автомат потока будет обрабатывать наши обратные вызовы и определять, когда обрабатывать противодавление и оптимизировать поток данных для нас. Однако, когда мы хотим использовать Writable напрямую, мы должны уважать возвращаемое значение <code>.write()</code> и уделять пристальное внимание следующим условиям:</p><ul><li>Если очередь записи занята, <code>.write()</code> вернет false.</li><li>Если фрагмент данных слишком велик, <code>.write()</code> вернет false (предел указывается переменной highWaterMark).</li></ul><p>В этом примере мы создаем пользовательский читаемый поток, который помещает один объект в поток с помощью <code>.push()</code>. Метод <code>._read()</code> вызывается, когда поток готов к потреблению данных, и в этом случае мы немедленно помещаем некоторые данные в поток и отмечаем конец потока, помещая <code>null</code>.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stream&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyReadable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Readable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  _read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readableStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyReadable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">readableStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.stdout);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Затем мы используем поток, прослушивая событие &#39;data&#39; и записывая в журнал каждый фрагмент данных, который помещается в поток. В этом случае мы помещаем в поток только один фрагмент данных, поэтому мы видим только одно сообщение журнала.</p><h2 id="правила-специфичные-для-записываемых-потоков-1" tabindex="-1">Правила, специфичные для записываемых потоков <a class="header-anchor" href="#правила-специфичные-для-записываемых-потоков-1" aria-label="Permalink to “Правила, специфичные для записываемых потоков”">​</a></h2><p>Напомним, что <code>.write()</code> может возвращать true или false в зависимости от определенных условий. К счастью для нас, при создании нашего собственного записываемого потока, конечный автомат потока будет обрабатывать наши обратные вызовы и определять, когда обрабатывать противодавление и оптимизировать поток данных для нас.</p><p>Однако, когда мы хотим использовать Writable напрямую, мы должны уважать возвращаемое значение <code>.write()</code> и уделять пристальное внимание следующим условиям:</p><ul><li>Если очередь записи занята, <code>.write()</code> вернет false.</li><li>Если фрагмент данных слишком велик, <code>.write()</code> вернет false (предел указывается переменной highWaterMark).</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyWritable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Writable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // This writable is invalid because of the async nature of JavaScript callbacks.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Without a return statement for each callback prior to the last,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // there is a great chance multiple callbacks will be called.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (chunk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (chunk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Также есть некоторые вещи, на которые следует обратить внимание при реализации <code>._writev()</code>. Функция связана с <code>.cork()</code>, но есть распространенная ошибка при написании:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Using .uncork() twice here makes two calls on the C++ layer, rendering the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cork/uncork technique useless.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;world &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uncork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;from &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Matteo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uncork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The correct way to write this is to utilize process.nextTick(), which fires</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// on the next event loop.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;world &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(doUncork, ws);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;from &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Matteo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(doUncork, ws);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// As a global function.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doUncork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uncork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p><code>.cork()</code> можно вызывать сколько угодно раз, нам просто нужно быть осторожными и вызывать <code>.uncork()</code> столько же раз, чтобы снова заставить его течь.</p><h2 id="заключение" tabindex="-1">Заключение <a class="header-anchor" href="#заключение" aria-label="Permalink to “Заключение”">​</a></h2><p>Потоки – часто используемый модуль в Node.js. Они важны для внутренней структуры, а для разработчиков – для расширения и соединения в экосистеме модулей Node.js.</p><p>Надеемся, теперь вы сможете устранять неполадки и безопасно кодировать свои собственные <code>Writable</code> и <code>Readable</code> потоки, помня о противодавлении, а также делиться своими знаниями с коллегами и друзьями.</p><p>Обязательно изучите подробнее <code>Stream</code> для других функций API, чтобы улучшить и раскрыть возможности потоковой передачи при создании приложения с помощью Node.js.</p>`,104)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};