import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"تصفح وتصحيح Node.js","description":"خيارات تصفح وتصحيح Node.js، بما في ذلك --inspect، --inspect-brk، و--debug، فضلاً عن السيناريوهات الخاصة بالتصفح البعيد والمعلومات المتعلقة بالبرنامج المساعد التقليدي.","frontmatter":{"title":"تصفح وتصحيح Node.js","description":"خيارات تصفح وتصحيح Node.js، بما في ذلك --inspect، --inspect-brk، و--debug، فضلاً عن السيناريوهات الخاصة بالتصفح البعيد والمعلومات المتعلقة بالبرنامج المساعد التقليدي.","head":[["meta",{"name":"og:title","content":"تصفح وتصحيح Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"خيارات تصفح وتصحيح Node.js، بما في ذلك --inspect، --inspect-brk، و--debug، فضلاً عن السيناريوهات الخاصة بالتصفح البعيد والمعلومات المتعلقة بالبرنامج المساعد التقليدي."}],["meta",{"name":"twitter:title","content":"تصفح وتصحيح Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"خيارات تصفح وتصحيح Node.js، بما في ذلك --inspect، --inspect-brk، و--debug، فضلاً عن السيناريوهات الخاصة بالتصفح البعيد والمعلومات المتعلقة بالبرنامج المساعد التقليدي."}],["link",{"rel":"canonical","href":"https://idoc.dev/ar/nodejs/guide/debugging-nodejs"}],["meta",{"property":"og:url","content":"https://idoc.dev/ar/nodejs/guide/debugging-nodejs"}]]},"headers":[],"relativePath":"ar/nodejs/guide/debugging-nodejs.md","filePath":"ar/nodejs/guide/debugging-nodejs.md","lastUpdated":1749464498000}`),a={name:`ar/nodejs/guide/debugging-nodejs.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="تصحيح-أخطاء-node-js" tabindex="-1">تصحيح أخطاء Node.js <a class="header-anchor" href="#تصحيح-أخطاء-node-js" aria-label="Permalink to “تصحيح أخطاء Node.js”">​</a></h1><p>سيساعدك هذا الدليل على البدء في تصحيح أخطاء تطبيقاتك وبرامجك النصية في Node.js.</p><h2 id="تمكين-المدقق" tabindex="-1">تمكين المدقق <a class="header-anchor" href="#تمكين-المدقق" aria-label="Permalink to “تمكين المدقق”">​</a></h2><p>عند البدء باستخدام مفتاح <code>--inspect</code>، تستمع عملية Node.js لعميل تصحيح أخطاء. بشكل افتراضي، ستستمع على المضيف والمنفذ <code>127.0.0.1:9229</code>. يتم أيضًا تعيين UUID فريد لكل عملية.</p><p>يجب أن تعرف عملاء المدقق وتحدد عنوان المضيف والمنفذ و UUID للاتصال. سيبدو عنوان URL الكامل كالتالي <code>ws://127.0.0.1:9229/0f2c936f-b1cd-4ac9-aab3-f63b0f33d55e</code>.</p><p>ستبدأ Node.js أيضًا في الاستماع إلى رسائل تصحيح الأخطاء إذا تلقت إشارة <code>SIGUSR1</code>. (لا تتوفر <code>SIGUSR1</code> على نظام التشغيل Windows.) في Node.js 7 والإصدارات الأقدم، يؤدي هذا إلى تنشيط واجهة برمجة تطبيقات مصحح الأخطاء القديمة. في Node.js 8 والإصدارات الأحدث، سيؤدي ذلك إلى تنشيط واجهة برمجة تطبيقات المدقق.</p><h2 id="الآثار-الأمنية" tabindex="-1">الآثار الأمنية <a class="header-anchor" href="#الآثار-الأمنية" aria-label="Permalink to “الآثار الأمنية”">​</a></h2><p>نظرًا لأن مصحح الأخطاء لديه حق الوصول الكامل إلى بيئة تنفيذ Node.js، فقد يكون الممثل الضار القادر على الاتصال بهذا المنفذ قادرًا على تنفيذ تعليمات برمجية عشوائية نيابة عن عملية Node.js. من المهم فهم الآثار الأمنية لتعريض منفذ مصحح الأخطاء على الشبكات العامة والخاصة.</p><h3 id="تعريض-منفذ-تصحيح-الأخطاء-علنًا-غير-آمن" tabindex="-1">تعريض منفذ تصحيح الأخطاء علنًا غير آمن <a class="header-anchor" href="#تعريض-منفذ-تصحيح-الأخطاء-علنًا-غير-آمن" aria-label="Permalink to “تعريض منفذ تصحيح الأخطاء علنًا غير آمن”">​</a></h3><p>إذا كان مصحح الأخطاء مرتبطًا بعنوان IP عام، أو بـ 0.0.0.0، فسيتمكن أي عملاء يمكنهم الوصول إلى عنوان IP الخاص بك من الاتصال بمصحح الأخطاء دون أي قيود وسيكونون قادرين على تشغيل تعليمات برمجية عشوائية.</p><p>بشكل افتراضي، يرتبط <code>node --inspect</code> بـ 127.0.0.1. تحتاج صراحةً إلى توفير عنوان IP عام أو 0.0.0.0، وما إلى ذلك، إذا كنت تنوي السماح بالاتصالات الخارجية بمصحح الأخطاء. قد يعرضك القيام بذلك لتهديد أمني كبير محتمل. نقترح عليك التأكد من وجود جدران حماية وضوابط وصول مناسبة لمنع التعرض الأمني.</p><p>راجع القسم الخاص بـ &quot;<a href="/ar/nodejs/guide/debugging-nodejs#enabling-remote-debugging-scenarios">تمكين سيناريوهات تصحيح الأخطاء عن بُعد</a>&quot; للحصول على بعض النصائح حول كيفية السماح لعملاء تصحيح الأخطاء عن بُعد بالاتصال بأمان.</p><h3 id="تتمتع-التطبيقات-المحلية-بوصول-كامل-إلى-المدقق" tabindex="-1">تتمتع التطبيقات المحلية بوصول كامل إلى المدقق <a class="header-anchor" href="#تتمتع-التطبيقات-المحلية-بوصول-كامل-إلى-المدقق" aria-label="Permalink to “تتمتع التطبيقات المحلية بوصول كامل إلى المدقق”">​</a></h3><p>حتى إذا قمت بربط منفذ المدقق بـ 127.0.0.1 (الإعداد الافتراضي)، فسيكون لأي تطبيقات تعمل محليًا على جهازك وصول غير مقيد. هذا عن طريق التصميم للسماح لمصححات الأخطاء المحلية بالقدرة على الإرفاق بسهولة.</p><h3 id="المتصفحات-وwebsockets-وسياسة-الأصل-نفسه" tabindex="-1">المتصفحات وWebSockets وسياسة الأصل نفسه <a class="header-anchor" href="#المتصفحات-وwebsockets-وسياسة-الأصل-نفسه" aria-label="Permalink to “المتصفحات وWebSockets وسياسة الأصل نفسه”">​</a></h3><p>يمكن للمواقع المفتوحة في متصفح الويب إجراء طلبات WebSocket وHTTP بموجب نموذج أمان المتصفح. يلزم اتصال HTTP أولي للحصول على معرف جلسة تصحيح فريد. تمنع سياسة الأصل نفسه مواقع الويب من القدرة على إجراء اتصال HTTP هذا. لمزيد من الأمان ضد <a href="https://en.wikipedia.org/wiki/DNS_rebinding" target="_blank" rel="noreferrer">هجمات إعادة ربط DNS</a>، يتحقق Node.js من أن رؤوس &#39;Host&#39; للاتصال تحدد إما عنوان IP أو <code>localhost</code> بدقة.</p><p>تحظر سياسات الأمان هذه الاتصال بخادم تصحيح أخطاء عن بُعد عن طريق تحديد اسم المضيف. يمكنك تجاوز هذا القيد عن طريق تحديد إما عنوان IP أو عن طريق استخدام أنفاق ssh كما هو موضح أدناه.</p><h2 id="عملاء-الفحص" tabindex="-1">عملاء الفحص <a class="header-anchor" href="#عملاء-الفحص" aria-label="Permalink to “عملاء الفحص”">​</a></h2><p>يتوفر مصحح أخطاء CLI بسيط مع node inspect myscript.js. يمكن للعديد من الأدوات التجارية ومفتوحة المصدر أيضًا الاتصال بـ Node.js Inspector.</p><h3 id="chrome-devtools-55-،-microsoft-edge" tabindex="-1">Chrome DevTools 55+ ، Microsoft Edge <a class="header-anchor" href="#chrome-devtools-55-،-microsoft-edge" aria-label="Permalink to “Chrome DevTools 55+ ، Microsoft Edge”">​</a></h3><ul><li><strong>الخيار 1</strong>: افتح <code>chrome://inspect</code> في متصفح يعتمد على Chromium أو <code>edge://inspect</code> في Edge. انقر فوق الزر Configure وتأكد من إدراج المضيف والمنفذ المستهدفين.</li><li><strong>الخيار 2</strong>: انسخ <code>devtoolsFrontendUrl</code> من إخراج <code>/json/list</code> (انظر أعلاه) أو نص تلميح <code>--inspect</code> والصقه في Chrome.</li></ul><p>راجع <a href="https://github.com/ChromeDevTools/devtools-frontend" target="_blank" rel="noreferrer">https://github.com/ChromeDevTools/devtools-frontend</a> ، <a href="https://www.microsoftedgeinsider.com" target="_blank" rel="noreferrer">https://www.microsoftedgeinsider.com</a> لمزيد من المعلومات.</p><h3 id="visual-studio-code-1-10" tabindex="-1">Visual Studio Code 1.10+ <a class="header-anchor" href="#visual-studio-code-1-10" aria-label="Permalink to “Visual Studio Code 1.10+”">​</a></h3><ul><li>في لوحة Debug ، انقر فوق رمز الإعدادات لفتح <code>.vscode/launch.json</code>. حدد &quot;Node.js&quot; للإعداد الأولي.</li></ul><p>راجع <a href="https://github.com/microsoft/vscode" target="_blank" rel="noreferrer">https://github.com/microsoft/vscode</a> لمزيد من المعلومات.</p><h3 id="jetbrains-webstorm-و-ides-jetbrains-الأخرى" tabindex="-1">JetBrains WebStorm و IDEs JetBrains الأخرى <a class="header-anchor" href="#jetbrains-webstorm-و-ides-jetbrains-الأخرى" aria-label="Permalink to “JetBrains WebStorm و IDEs JetBrains الأخرى”">​</a></h3><ul><li>قم بإنشاء تكوين تصحيح أخطاء Node.js جديد واضغط على Debug. سيتم استخدام <code>--inspect</code> افتراضيًا لـ Node.js 7+. لتعطيل إلغاء تحديد <code>js.debugger.node.use.inspect</code> في IDE Registry. لمعرفة المزيد حول تشغيل وتصحيح أخطاء Node.js في WebStorm و IDEs JetBrains الأخرى ، تحقق من <a href="https://www.jetbrains.com/help/webstorm/running-and-debugging-node-js.html" target="_blank" rel="noreferrer">WebStorm online help</a>.</li></ul><h3 id="chrome-remote-interface" tabindex="-1">chrome-remote-interface <a class="header-anchor" href="#chrome-remote-interface" aria-label="Permalink to “chrome-remote-interface”">​</a></h3><ul><li>مكتبة لتسهيل الاتصالات بنقاط نهاية <a href="https://chromedevtools.github.io/debugger-protocol-viewer/v8/" target="_blank" rel="noreferrer">بروتوكول الفاحص</a>. راجع <a href="https://github.com/cyrus-and/chrome-remote-interface" target="_blank" rel="noreferrer">https://github.com/cyrus-and/chrome-remote-interface</a> لمزيد من المعلومات.</li></ul><h3 id="gitpod" tabindex="-1">Gitpod <a class="header-anchor" href="#gitpod" aria-label="Permalink to “Gitpod”">​</a></h3><ul><li>ابدأ تكوين تصحيح أخطاء Node.js من عرض <code>Debug</code> أو اضغط على <code>F5</code>. تعليمات مفصلة</li></ul><p>راجع <a href="https://www.gitpod.io" target="_blank" rel="noreferrer">https://www.gitpod.io</a> لمزيد من المعلومات.</p><h3 id="eclipse-ide-مع-ملحق-eclipse-wild-web-developer" tabindex="-1">Eclipse IDE مع ملحق Eclipse Wild Web Developer <a class="header-anchor" href="#eclipse-ide-مع-ملحق-eclipse-wild-web-developer" aria-label="Permalink to “Eclipse IDE مع ملحق Eclipse Wild Web Developer”">​</a></h3><ul><li>من ملف <code>.js</code>، اختر <code>Debug As... &gt; Node program</code>، أو أنشئ تكوين تصحيح أخطاء لإرفاق مصحح الأخطاء بتطبيق Node.js قيد التشغيل (بدأ بالفعل بـ<code>--inspect</code>).</li></ul><p>راجع <a href="https://eclipse.org/eclipseide" target="_blank" rel="noreferrer">https://eclipse.org/eclipseide</a> لمزيد من المعلومات.</p><h2 id="خيارات-سطر-الأوامر" tabindex="-1">خيارات سطر الأوامر <a class="header-anchor" href="#خيارات-سطر-الأوامر" aria-label="Permalink to “خيارات سطر الأوامر”">​</a></h2><p>يسرد الجدول التالي تأثير العلامات المختلفة لوقت التشغيل على تصحيح الأخطاء:</p><table tabindex="0"><thead><tr><th>العلم</th><th>المعنى</th></tr></thead><tbody><tr><td><code>--inspect</code></td><td>تمكين تصحيح الأخطاء باستخدام Node.js Inspector. استمع على العنوان والمنفذ الافتراضيين (127.0.0.1:9229)</td></tr><tr><td><code>--inspect-brk</code></td><td>تمكين تصحيح الأخطاء باستخدام Node.js Inspector. استمع على العنوان والمنفذ الافتراضيين (127.0.0.1:9229)؛ توقف قبل بدء تشغيل كود المستخدم</td></tr><tr><td><code>--inspect=[host:port]</code></td><td>تمكين وكيل الفاحص؛ اربط بالعنوان أو اسم المضيف (الافتراضي: 127.0.0.1)؛ استمع على المنفذ port (الافتراضي: 9229)</td></tr><tr><td><code>--inspect-brk=[host:port]</code></td><td>تمكين وكيل الفاحص؛ اربط بالعنوان أو اسم المضيف (الافتراضي: 127.0.0.1)؛ استمع على المنفذ port (الافتراضي: 9229)؛ توقف قبل بدء تشغيل كود المستخدم</td></tr><tr><td><code>--inspect-wait</code></td><td>تمكين وكيل الفاحص؛ استمع على العنوان والمنفذ الافتراضيين (127.0.0.1:9229)؛ انتظر حتى يتم إرفاق مصحح الأخطاء.</td></tr><tr><td><code>--inspect-wait=[host:port]</code></td><td>تمكين وكيل الفاحص؛ اربط بالعنوان أو اسم المضيف (الافتراضي: 127.0.0.1)؛ استمع على المنفذ port (الافتراضي: 9229)؛ انتظر حتى يتم إرفاق مصحح الأخطاء.</td></tr><tr><td><code>node inspect script.js</code></td><td>قم بإنشاء عملية فرعية لتشغيل نص المستخدم بعلامة --inspect ؛ واستخدم العملية الرئيسية لتشغيل مصحح أخطاء CLI.</td></tr><tr><td><code>node inspect --port=xxxx script.js</code></td><td>قم بإنشاء عملية فرعية لتشغيل نص المستخدم بعلامة --inspect ؛ واستخدم العملية الرئيسية لتشغيل مصحح أخطاء CLI. استمع على المنفذ port (الافتراضي: 9229)</td></tr></tbody></table><h2 id="تمكين-سيناريوهات-التصحيح-عن-بعد" tabindex="-1">تمكين سيناريوهات التصحيح عن بعد <a class="header-anchor" href="#تمكين-سيناريوهات-التصحيح-عن-بعد" aria-label="Permalink to “تمكين سيناريوهات التصحيح عن بعد”">​</a></h2><p>نوصي بعدم جعل المصحح يستمع على عنوان IP عام أبدًا. إذا كنت بحاجة إلى السماح باتصالات التصحيح عن بعد، فنحن نوصي باستخدام أنفاق ssh بدلاً من ذلك. نحن نقدم المثال التالي لأغراض توضيحية فقط. يرجى فهم المخاطر الأمنية للسماح بالوصول عن بعد إلى خدمة مميزة قبل المتابعة.</p><p>لنفترض أنك تقوم بتشغيل Node.js على جهاز بعيد، remote.example.com، وتريد أن تكون قادرًا على تصحيح الأخطاء. على هذا الجهاز، يجب أن تبدأ عملية node مع استماع المفتش إلى المضيف المحلي فقط (الافتراضي).</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>الآن، على جهازك المحلي الذي تريد بدء اتصال عميل التصحيح منه، يمكنك إعداد نفق ssh:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9225:localhost:9229</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote.example.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>يبدأ هذا جلسة نفق ssh حيث سيتم إعادة توجيه الاتصال بالمنفذ 9221 على جهازك المحلي إلى المنفذ 9229 على remote.example.com. يمكنك الآن إرفاق مصحح أخطاء مثل Chrome DevTools أو Visual Studio Code بـ localhost:9221، والذي يجب أن يكون قادرًا على تصحيح الأخطاء كما لو كان تطبيق Node.js يعمل محليًا.</p><h2 id="مصحح-الأخطاء-القديم" tabindex="-1">مصحح الأخطاء القديم <a class="header-anchor" href="#مصحح-الأخطاء-القديم" aria-label="Permalink to “مصحح الأخطاء القديم”">​</a></h2><p><strong>تم إهمال مصحح الأخطاء القديم اعتبارًا من Node.js 7.7.0. يرجى استخدام --inspect و Inspector بدلاً من ذلك.</strong></p><p>عند البدء باستخدام مفاتيح <code>--debug</code> أو <code>--debug-brk</code> في الإصدار 7 والإصدارات الأقدم، تستمع Node.js إلى أوامر تصحيح الأخطاء التي يحددها بروتوكول تصحيح أخطاء V8 المتوقف على منفذ TCP، بشكل افتراضي <code>5858</code>. يمكن لأي عميل مصحح أخطاء يتحدث هذا البروتوكول الاتصال بالعملية قيد التشغيل وتصحيحها؛ يتم سرد عدد قليل من العملاء المشهورين أدناه.</p><p>لم يعد بروتوكول تصحيح أخطاء V8 يتم صيانته أو توثيقه.</p><h3 id="مصحح-الأخطاء-المدمج" tabindex="-1">مصحح الأخطاء المدمج <a class="header-anchor" href="#مصحح-الأخطاء-المدمج" aria-label="Permalink to “مصحح الأخطاء المدمج”">​</a></h3><p>ابدأ <code>node debug script_name.js</code> لبدء البرنامج النصي الخاص بك ضمن مصحح الأخطاء المدمج في سطر الأوامر. يبدأ البرنامج النصي الخاص بك في عملية Node.js أخرى بدأت بخيار <code>--debug-brk</code>، وتقوم عملية Node.js الأولية بتشغيل البرنامج النصي <code>_debugger.js</code> والاتصال بالهدف الخاص بك. راجع <a href="/ar/nodejs/api/debugger">المستندات</a> لمزيد من المعلومات.</p><h3 id="node-inspector" tabindex="-1">node-inspector <a class="header-anchor" href="#node-inspector" aria-label="Permalink to “node-inspector”">​</a></h3><p>تصحيح أخطاء تطبيق Node.js الخاص بك باستخدام أدوات مطوري Chrome من خلال استخدام عملية وسيطة تترجم <a href="https://chromedevtools.github.io/debugger-protocol-viewer/v8/" target="_blank" rel="noreferrer">بروتوكول Inspector</a> المستخدم في Chromium إلى بروتوكول V8 Debugger المستخدم في Node.js. راجع <a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="noreferrer">https://github.com/node-inspector/node-inspector</a> لمزيد من المعلومات.</p>`,53)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};