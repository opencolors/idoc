import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Differenze tra Node.js e il browser","description":"Scopri le principali differenze tra la creazione di applicazioni con Node.js e il browser, tra cui l'ecosistema, il controllo dell'ambiente e i sistemi di moduli.","frontmatter":{"title":"Differenze tra Node.js e il browser","description":"Scopri le principali differenze tra la creazione di applicazioni con Node.js e il browser, tra cui l'ecosistema, il controllo dell'ambiente e i sistemi di moduli.","head":[["meta",{"name":"og:title","content":"Differenze tra Node.js e il browser | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Scopri le principali differenze tra la creazione di applicazioni con Node.js e il browser, tra cui l'ecosistema, il controllo dell'ambiente e i sistemi di moduli."}],["meta",{"name":"twitter:title","content":"Differenze tra Node.js e il browser | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Scopri le principali differenze tra la creazione di applicazioni con Node.js e il browser, tra cui l'ecosistema, il controllo dell'ambiente e i sistemi di moduli."}],["link",{"rel":"canonical","href":"https://idoc.dev/it/nodejs/guide/differences-between-node-and-browser"}],["meta",{"property":"og:url","content":"https://idoc.dev/it/nodejs/guide/differences-between-node-and-browser"}]]},"headers":[],"relativePath":"it/nodejs/guide/differences-between-node-and-browser.md","filePath":"it/nodejs/guide/differences-between-node-and-browser.md","lastUpdated":1749464498000}`),a={name:`it/nodejs/guide/differences-between-node-and-browser.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="differenze-tra-node-js-e-il-browser" tabindex="-1">Differenze tra Node.js e il Browser <a class="header-anchor" href="#differenze-tra-node-js-e-il-browser" aria-label="Permalink to “Differenze tra Node.js e il Browser”">​</a></h1><p>Sia il browser che Node.js utilizzano JavaScript come linguaggio di programmazione. Costruire app che vengono eseguite nel browser è completamente diverso dal costruire un&#39;applicazione Node.js. Nonostante sia sempre JavaScript, ci sono alcune differenze chiave che rendono l&#39;esperienza radicalmente diversa.</p><p>Dal punto di vista di uno sviluppatore frontend che utilizza ampiamente JavaScript, le app Node.js portano con sé un enorme vantaggio: la comodità di programmare tutto - il frontend e il backend - in un singolo linguaggio.</p><p>Hai una grande opportunità perché sappiamo quanto sia difficile imparare completamente e profondamente un linguaggio di programmazione e, utilizzando lo stesso linguaggio per svolgere tutto il tuo lavoro sul web - sia sul client che sul server, ti trovi in una posizione di vantaggio unica.</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>Ciò che cambia è l&#39;ecosistema.</p></div><p>Nel browser, la maggior parte delle volte quello che fai è interagire con il DOM o altre API della piattaforma Web come i Cookie. Questi non esistono in Node.js, ovviamente. Non hai il <code>document</code>, <code>window</code> e tutti gli altri oggetti forniti dal browser.</p><p>E nel browser, non abbiamo tutte le belle API che Node.js fornisce attraverso i suoi moduli, come la funzionalità di accesso al filesystem.</p><p>Un&#39;altra grande differenza è che in Node.js hai il controllo dell&#39;ambiente. A meno che tu non stia costruendo un&#39;applicazione open source che chiunque può distribuire ovunque, sai su quale versione di Node.js eseguirai l&#39;applicazione. Rispetto all&#39;ambiente del browser, dove non hai il lusso di scegliere quale browser utilizzeranno i tuoi visitatori, questo è molto conveniente.</p><p>Ciò significa che puoi scrivere tutto il JavaScript moderno ES2015+ supportato dalla tua versione di Node.js. Poiché JavaScript si muove così velocemente, ma i browser possono essere un po&#39; lenti ad aggiornarsi, a volte sul web sei bloccato con l&#39;utilizzo di versioni JavaScript/ECMAScript precedenti. Puoi usare Babel per trasformare il tuo codice in modo che sia compatibile con ES5 prima di spedirlo al browser, ma in Node.js non ne avrai bisogno.</p><p>Un&#39;altra differenza è che Node.js supporta sia i sistemi di moduli CommonJS che ES (da Node.js v12), mentre nel browser stiamo iniziando a vedere l&#39;implementazione dello standard ES Modules.</p><p>In pratica, questo significa che puoi usare sia <code>require()</code> che <code>import</code> in Node.js, mentre sei limitato a <code>import</code> nel browser.</p>`,11)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};