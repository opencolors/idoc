import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"イベントループ（またはワーカープール）をブロックしない","description":"Node.jsでのイベントループとワーカープールのブロックを避けることで、DoS攻撃に強い高性能Webサーバーを書く方法。","frontmatter":{"title":"イベントループ（またはワーカープール）をブロックしない","description":"Node.jsでのイベントループとワーカープールのブロックを避けることで、DoS攻撃に強い高性能Webサーバーを書く方法。","head":[["meta",{"name":"og:title","content":"イベントループ（またはワーカープール）をブロックしない | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.jsでのイベントループとワーカープールのブロックを避けることで、DoS攻撃に強い高性能Webサーバーを書く方法。"}],["meta",{"name":"twitter:title","content":"イベントループ（またはワーカープール）をブロックしない | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.jsでのイベントループとワーカープールのブロックを避けることで、DoS攻撃に強い高性能Webサーバーを書く方法。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/guide/dont-block-the-event-loop"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/guide/dont-block-the-event-loop"}]]},"headers":[],"relativePath":"ja/nodejs/guide/dont-block-the-event-loop.md","filePath":"ja/nodejs/guide/dont-block-the-event-loop.md","lastUpdated":null}`),a={name:`ja/nodejs/guide/dont-block-the-event-loop.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="イベントループ-またはワーカープール-をブロックしない" tabindex="-1">イベントループ (またはワーカープール) をブロックしない <a class="header-anchor" href="#イベントループ-またはワーカープール-をブロックしない" aria-label="Permalink to “イベントループ (またはワーカープール) をブロックしない”">​</a></h1><h2 id="このガイドを読むべきか" tabindex="-1">このガイドを読むべきか? <a class="header-anchor" href="#このガイドを読むべきか" aria-label="Permalink to “このガイドを読むべきか?”">​</a></h2><p>短いコマンドラインスクリプト以上の複雑なものを書いている場合は、これを読むことで、より高性能で安全なアプリケーションを作成できるようになります。</p><p>このドキュメントは Node.js サーバーを念頭に置いて書かれていますが、その概念は複雑な Node.js アプリケーションにも適用できます。 OS 固有の詳細が異なる場合は、このドキュメントは Linux 中心です。</p><h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to “概要”">​</a></h2><p>Node.js はイベントループ (初期化とコールバック) で JavaScript コードを実行し、ファイル I/O などの高コストなタスクを処理するためのワーカープールを提供します。 Node.js は優れたスケーラビリティを備えており、Apache などのより重量なアプローチよりも優れている場合があります。 Node.js のスケーラビリティの秘訣は、少数のスレッドを使用して多数のクライアントを処理することです。 Node.js がより少ないスレッドで済む場合は、システムの時間とメモリをスレッドのスペースと時間のオーバーヘッド (メモリ、コンテキストスイッチ) に費やすのではなく、クライアントの処理に費やすことができます。 しかし、Node.js はスレッド数が少ないため、それらを賢く使用するようにアプリケーションを構成する必要があります。</p><p>Node.js サーバーを高速に保つための良い経験則を次に示します。<em>Node.js は、特定の時点で各クライアントに関連付けられている作業が「小さい」場合に高速です。</em></p><p>これは、イベントループのコールバックとワーカープールのタスクに適用されます。</p><h2 id="イベントループとワーカープールをブロックすることを避けるべき理由" tabindex="-1">イベントループとワーカープールをブロックすることを避けるべき理由 <a class="header-anchor" href="#イベントループとワーカープールをブロックすることを避けるべき理由" aria-label="Permalink to “イベントループとワーカープールをブロックすることを避けるべき理由”">​</a></h2><p>Node.js は少数のスレッドを使用して多数のクライアントを処理します。 Node.js には、イベントループ (メインループ、メインスレッド、イベントスレッドなどとも呼ばれます) と、ワーカープール内の <code>k</code> ワーカーのプール (スレッドプールとも呼ばれます) の 2 種類のスレッドがあります。</p><p>スレッドがコールバック (イベントループ) またはタスク (ワーカー) の実行に時間がかかっている場合、それを「ブロックされた」と呼びます。 スレッドが 1 つのクライアントのためにブロックされている間、他のクライアントからのリクエストを処理できません。 これは、イベントループとワーカープールの両方をブロックしないことに対する 2 つの動機を提供します。</p><ol><li>パフォーマンス: どちらかのタイプのスレッドで定期的に高負荷のアクティビティを実行すると、サーバーの <em>スループット</em> (リクエスト/秒) が低下します。</li><li>セキュリティ: 特定の入力に対してスレッドの 1 つがブロックされる可能性がある場合、悪意のあるクライアントがこの「悪意のある入力」を送信し、スレッドをブロックさせ、他のクライアントの処理を妨げる可能性があります。 これは、<a href="https://en.wikipedia.org/wiki/Denial-of-service_attack" target="_blank" rel="noreferrer">サービス拒否攻撃</a> になります。</li></ol><h2 id="node-の簡単な復習" tabindex="-1">Node の簡単な復習 <a class="header-anchor" href="#node-の簡単な復習" aria-label="Permalink to “Node の簡単な復習”">​</a></h2><p>Node.js はイベント駆動型アーキテクチャを使用します。オーケストレーションのためのイベントループと、負荷の高いタスクのためのワーカープールがあります。</p><h3 id="イベントループで実行されるコードは何ですか" tabindex="-1">イベントループで実行されるコードは何ですか？ <a class="header-anchor" href="#イベントループで実行されるコードは何ですか" aria-label="Permalink to “イベントループで実行されるコードは何ですか？”">​</a></h3><p>Node.js アプリケーションは、開始時にまず初期化フェーズを完了し、モジュールを <code>require</code> してイベントのコールバックを登録します。その後、Node.js アプリケーションはイベントループに入り、適切なコールバックを実行して受信クライアントリクエストに応答します。このコールバックは同期的に実行され、完了後に処理を継続するための非同期リクエストを登録する場合があります。これらの非同期リクエストのコールバックも、イベントループで実行されます。</p><p>イベントループは、ネットワーク I/O など、コールバックによって行われたノンブロッキングの非同期リクエストも実行します。</p><p>要約すると、イベントループはイベントに登録された JavaScript コールバックを実行し、ネットワーク I/O などのノンブロッキングの非同期リクエストを実行する役割も担っています。</p><h3 id="ワーカープールで実行されるコードは何ですか" tabindex="-1">ワーカープールで実行されるコードは何ですか？ <a class="header-anchor" href="#ワーカープールで実行されるコードは何ですか" aria-label="Permalink to “ワーカープールで実行されるコードは何ですか？”">​</a></h3><p>Node.js のワーカープールは libuv (<a href="http://docs.libuv.org/en/v1.x/threadpool.html" target="_blank" rel="noreferrer">ドキュメント</a>) で実装されており、一般的なタスク送信 API を公開しています。</p><p>Node.js は、ワーカープールを使用して「負荷の高い」タスクを処理します。これには、オペレーティングシステムがノンブロッキングバージョンを提供していない I/O と、特に CPU 負荷の高いタスクが含まれます。</p><p>以下は、このワーカープールを使用する Node.js モジュール API です。</p><ol><li>I/O 集中型 <ol><li><a href="/ja/nodejs/api/dns">DNS</a>: <code>dns.lookup()</code>, <code>dns.lookupService()</code>.</li><li>[ファイルシステム][/api/fs]: <code>fs.FSWatcher()</code> と明示的に同期的なものを除くすべてのファイルシステム API は、libuv のスレッドプールを使用します。</li></ol></li><li>CPU 集中型 <ol><li><a href="/ja/nodejs/api/crypto">Crypto</a>: <code>crypto.pbkdf2()</code>, <code>crypto.scrypt()</code>, <code>crypto.randomBytes()</code>, <code>crypto.randomFill()</code>, <code>crypto.generateKeyPair()</code>.</li><li><a href="/ja/nodejs/api/zlib">Zlib</a>: 明示的に同期的なものを除くすべての zlib API は、libuv のスレッドプールを使用します。</li></ol></li></ol><p>多くの Node.js アプリケーションでは、これらの API がワーカープールのタスクの唯一のソースです。<a href="/ja/nodejs/api/addons">C++ アドオン</a> を使用するアプリケーションとモジュールは、他のタスクをワーカープールに送信できます。</p><p>完全を期すために、イベントループ上のコールバックからこれらの API のいずれかを呼び出すと、イベントループは、その API の Node.js C++ バインディングに入り、タスクをワーカープールに送信する際に、いくつかのわずかなセットアップコストを支払うことに注意してください。これらのコストは、タスク全体のコストに比べればごくわずかであるため、イベントループはそれをオフロードしています。これらのタスクのいずれかをワーカープールに送信するとき、Node.js は Node.js C++ バインディング内の対応する C++ 関数へのポインタを提供します。</p><h3 id="node-js-はどのようにして次に実行するコードを決定するのか" tabindex="-1">Node.js はどのようにして次に実行するコードを決定するのか？ <a class="header-anchor" href="#node-js-はどのようにして次に実行するコードを決定するのか" aria-label="Permalink to “Node.js はどのようにして次に実行するコードを決定するのか？”">​</a></h3><p>抽象的には、イベントループとワーカープールは、それぞれ保留中のイベントと保留中のタスクのキューを保持します。</p><p>実際には、イベントループは実際にはキューを保持しません。代わりに、<a href="http://man7.org/linux/man-pages/man7/epoll.7.html" target="_blank" rel="noreferrer">epoll</a> (Linux)、<a href="https://developer.apple.com/library/content/documentation/Darwin/Conceptual/FSEvents_ProgGuide/KernelQueues/KernelQueues.html" target="_blank" rel="noreferrer">kqueue</a> (OSX)、イベントポート (Solaris)、または <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365198.aspx" target="_blank" rel="noreferrer">IOCP</a> (Windows) のようなメカニズムを使用して、オペレーティングシステムに監視を依頼するファイルディスクリプタのコレクションを持っています。これらのファイルディスクリプタは、ネットワークソケット、監視しているファイルなどに対応します。オペレーティングシステムがこれらのファイルディスクリプタのいずれかが準備完了になったと言うと、イベントループはそれを適切なイベントに変換し、そのイベントに関連付けられたコールバックを呼び出します。このプロセスの詳細については、<a href="https://www.youtube.com/watch?v=P9csgxBgaZ8" target="_blank" rel="noreferrer">こちら</a>をご覧ください。</p><p>対照的に、ワーカープールは、エントリが処理されるタスクである実際のキューを使用します。ワーカーはこのキューからタスクをポップして処理し、完了すると、ワーカーはイベントループに対して「少なくとも 1 つのタスクが完了した」イベントを発生させます。</p><h3 id="これはアプリケーション設計にとって何を意味するのか" tabindex="-1">これはアプリケーション設計にとって何を意味するのか？ <a class="header-anchor" href="#これはアプリケーション設計にとって何を意味するのか" aria-label="Permalink to “これはアプリケーション設計にとって何を意味するのか？”">​</a></h3><p>Apache のようなクライアントごとに 1 つのスレッドを持つシステムでは、保留中の各クライアントに独自のスレッドが割り当てられます。1 つのクライアントを処理するスレッドがブロックされた場合、オペレーティングシステムはそれを中断し、別のクライアントに順番を与えます。したがって、オペレーティングシステムは、少量の作業しか必要としないクライアントが、より多くの作業を必要とするクライアントによって不利にならないようにします。</p><p>Node.js は少ないスレッドで多くのクライアントを処理するため、1 つのスレッドが 1 つのクライアントのリクエストの処理をブロックすると、保留中のクライアントのリクエストは、スレッドがコールバックまたはタスクを完了するまで順番が回ってこない可能性があります。したがって、クライアントの公正な扱いは、アプリケーションの責任です。これは、単一のコールバックまたはタスクで、クライアントに対してあまりにも多くの作業を行うべきではないことを意味します。</p><p>これが Node.js がうまくスケールできる理由の一部ですが、公正なスケジューリングを確保する責任があることも意味します。次のセクションでは、イベントループとワーカープールの公正なスケジューリングを確保する方法について説明します。</p><h2 id="イベントループをブロックしない" tabindex="-1">イベントループをブロックしない <a class="header-anchor" href="#イベントループをブロックしない" aria-label="Permalink to “イベントループをブロックしない”">​</a></h2><p>イベントループは、新しいクライアント接続を認識し、応答の生成を調整します。すべての受信リクエストと送信レスポンスは、イベントループを通過します。これは、イベントループがどこかの時点で長時間を費やすと、現在および新規のクライアントは順番待ちができなくなることを意味します。</p><p>イベントループを絶対にブロックしないようにする必要があります。言い換えれば、JavaScriptの各コールバックは迅速に完了する必要があります。これはもちろん、<code>await</code>、<code>Promise.then</code>などにも当てはまります。</p><p>これを確実にする良い方法は、コールバックの<a href="https://en.wikipedia.org/wiki/Time_complexity" target="_blank" rel="noreferrer">&quot;計算量&quot;</a>について考えることです。コールバックが引数に関係なく一定の手順数で完了する場合、保留中のすべてのクライアントに公平な順番を与えることになります。コールバックが引数に応じて異なる手順数を要する場合、引数の長さについて検討する必要があります。</p><p>例1：定数時間のコールバック。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/constant-time&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例2：<code>O(n)</code>のコールバック。このコールバックは、<code>n</code>が小さい場合は高速に実行され、<code>n</code>が大きい場合は低速に実行されます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/countToN&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.query.n;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 他のクライアントに順番を渡すまでに n 回のイテレーション</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Iter \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>例3：<code>O(n^2)</code>のコールバック。このコールバックは、<code>n</code>が小さい場合は高速に実行されますが、<code>n</code>が大きい場合は前の<code>O(n)</code>の例よりもはるかに低速に実行されます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/countToN2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.query.n;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 他のクライアントに順番を渡すまでに n^2 回のイテレーション</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Iter \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="どの程度注意する必要がありますか" tabindex="-1">どの程度注意する必要がありますか？ <a class="header-anchor" href="#どの程度注意する必要がありますか" aria-label="Permalink to “どの程度注意する必要がありますか？”">​</a></h3><p>Node.jsはJavaScriptにGoogle V8エンジンを使用しており、多くの一般的な操作では非常に高速です。このルールの例外は、以下で説明する正規表現とJSON操作です。</p><p>ただし、複雑なタスクでは、入力を制限し、長すぎる入力を拒否することを検討する必要があります。そうすれば、コールバックの複雑さが大きい場合でも、入力を制限することで、コールバックが許容される最長の入力に対して最悪の場合よりも時間がかからないようにすることができます。次に、このコールバックの最悪の場合のコストを評価し、その実行時間がコンテキストで許容できるかどうかを判断できます。</p><h2 id="イベントループのブロック-redos" tabindex="-1">イベントループのブロック：REDOS <a class="header-anchor" href="#イベントループのブロック-redos" aria-label="Permalink to “イベントループのブロック：REDOS”">​</a></h2><p>イベントループを悲惨なほどブロックする一般的な方法は、「脆弱な」<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noreferrer">正規表現</a>を使用することです。</p><h3 id="脆弱な正規表現を避ける" tabindex="-1">脆弱な正規表現を避ける <a class="header-anchor" href="#脆弱な正規表現を避ける" aria-label="Permalink to “脆弱な正規表現を避ける”">​</a></h3><p>正規表現（regexp）は、パターンに対して入力文字列を照合します。通常、正規表現のマッチングは、入力文字列を一度だけ処理する <code>--- O(n)</code> 時間（<code>n</code> は入力文字列の長さ）が必要であると考えます。多くの場合、一度の処理で十分です。残念ながら、正規表現のマッチングには、入力文字列を指数関数的に何度も処理する <code>--- O(2^n)</code> 時間が必要になる場合があります。指数関数的な回数の処理とは、エンジンがマッチングを判断するために x 回の処理を必要とする場合、入力文字列に 1 文字追加するだけで <code>2*x</code> 回の処理が必要になることを意味します。処理回数は必要な時間に線形的に関連しているため、この評価の影響はイベントループをブロックすることになります。</p><p><em>脆弱な正規表現</em> とは、正規表現エンジンが指数関数的な時間を要する可能性があり、それによって「悪意のある入力」に対する <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS" target="_blank" rel="noreferrer">REDOS</a> の危険にさらされるものです。正規表現パターンが脆弱であるかどうか（つまり、正規表現エンジンが指数関数的な時間を要する可能性があるかどうか）は、実際に答えるのが難しい問題であり、Perl、Python、Ruby、Java、JavaScript などを使用しているかどうかによって異なりますが、以下はこれらのすべての言語に共通する経験則です。</p><ol><li><code>(a+)*</code> のようなネストされた量指定子を避けてください。V8 の正規表現エンジンは、これらのいくつかを迅速に処理できますが、脆弱なものもあります。</li><li><code>(a|a)*</code> のように、重複する句を持つ OR を避けてください。繰り返しますが、これらは高速な場合もあれば、そうでない場合もあります。</li><li><code>(a.*) \\1</code> のように、後方参照の使用を避けてください。どの正規表現エンジンも、これらを線形時間で評価することを保証できません。</li><li>単純な文字列マッチングを行う場合は、<code>indexOf</code> またはローカルの同等のものを使用してください。より安価であり、<code>O(n)</code> を超えることはありません。</li></ol><p>正規表現が脆弱かどうか不明な場合は、Node.js は一般に、脆弱な正規表現と長い入力文字列でも、マッチングを問題なく報告できることを覚えておいてください。指数関数的な動作は、不一致がある場合にトリガーされますが、Node.js は入力文字列を何度も処理するまで確信できません。</p><h3 id="redos-の例" tabindex="-1">REDOS の例 <a class="header-anchor" href="#redos-の例" aria-label="Permalink to “REDOS の例”">​</a></h3><p>サーバーを REDOS にさらす脆弱な正規表現の例を以下に示します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/redos-me&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.query.filePath;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // REDOS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (filePath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;valid path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;invalid path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>この例の脆弱な正規表現は、（悪い！）Linux 上の有効なパスをチェックする方法です。「<code>/a/b/c</code>」のように、&quot;/&quot; で区切られた名前のシーケンスである文字列に一致します。これは、ルール 1 に違反しているため危険です。二重にネストされた量指定子があります。</p><p>クライアントが <code>///.../\\n</code> (100 個の / の後に、正規表現の &quot;.&quot; が一致しない改行文字) で filePath をクエリすると、イベントループは事実上永遠に実行され、イベントループをブロックします。このクライアントの REDOS 攻撃により、正規表現のマッチングが完了するまで、他のすべてのクライアントは順番待ちの状態になります。</p><p>このため、ユーザー入力を検証するために複雑な正規表現を使用することには注意が必要です。</p><h3 id="redos-対策リソース" tabindex="-1">REDOS 対策リソース <a class="header-anchor" href="#redos-対策リソース" aria-label="Permalink to “REDOS 対策リソース”">​</a></h3><p>正規表現の安全性をチェックするツールがいくつかあります。</p><ul><li><a href="https://github.com/davisjam/safe-regex" target="_blank" rel="noreferrer">safe-regex</a></li><li><a href="https://github.com/superhuman/rxxr2" target="_blank" rel="noreferrer">rxxr2</a></li></ul><p>ただし、これらのいずれもすべての脆弱な正規表現を検出するわけではありません。</p><p>別のアプローチは、別の正規表現エンジンを使用することです。Google の非常に高速な <a href="https://github.com/google/re2" target="_blank" rel="noreferrer">RE2</a> 正規表現エンジンを使用する <a href="https://github.com/uhop/node-re2" target="_blank" rel="noreferrer">node-re2</a> モジュールを使用できます。ただし、RE2 は V8 の正規表現と 100% 互換性がないため、正規表現を処理するために node-re2 モジュールをスワップする場合は、リグレッションを確認してください。また、特に複雑な正規表現は node-re2 ではサポートされていません。</p><p>URL やファイルパスなど、「明白な」ものを一致させようとしている場合は、<a href="http://www.regexlib.com/" target="_blank" rel="noreferrer">正規表現ライブラリ</a> で例を見つけるか、npm モジュール (例: <a href="https://www.npmjs.com/package/ip-regex" target="_blank" rel="noreferrer">ip-regex</a>) を使用してください。</p><h3 id="イベントループのブロック-node-js-コアモジュール" tabindex="-1">イベントループのブロック: Node.js コアモジュール <a class="header-anchor" href="#イベントループのブロック-node-js-コアモジュール" aria-label="Permalink to “イベントループのブロック: Node.js コアモジュール”">​</a></h3><p>いくつかの Node.js コアモジュールには、同期的に負荷の高い API があります。</p><ul><li><a href="/ja/nodejs/api/crypto">暗号化</a></li><li><a href="/ja/nodejs/api/zlib">圧縮</a></li><li><a href="/ja/nodejs/api/fs">ファイルシステム</a></li><li><a href="/ja/nodejs/api/child_process">子プロセス</a></li></ul><p>これらの API は、計算量が多い (暗号化、圧縮)、I/O が必要 (ファイル I/O)、またはその両方 (子プロセス) であるため、負荷が高くなります。これらの API は、スクリプト作成の利便性を目的としていますが、サーバーコンテキストでの使用を意図したものではありません。イベントループで実行すると、通常の JavaScript 命令よりも完了までに時間がかかり、イベントループをブロックします。</p><p>サーバーでは、これらのモジュールから次の同期 API を使用しないでください。</p><ul><li>暗号化: <ul><li><code>crypto.randomBytes</code> (同期バージョン)</li><li><code>crypto.randomFillSync</code></li><li><code>crypto.pbkdf2Sync</code></li><li>暗号化および復号化ルーチンに大きな入力を行うことにも注意する必要があります。</li></ul></li><li>圧縮: <ul><li><code>zlib.inflateSync</code></li><li><code>zlib.deflateSync</code></li></ul></li><li>ファイルシステム: <ul><li>同期ファイルシステム API は使用しないでください。たとえば、アクセスするファイルが <a href="https://en.wikipedia.org/wiki/Clustered_file_system#Distributed_file_systems" target="_blank" rel="noreferrer">分散ファイルシステム</a> (例: <a href="https://en.wikipedia.org/wiki/Network_File_System" target="_blank" rel="noreferrer">NFS</a>) にある場合、アクセス時間は大きく異なる可能性があります。</li></ul></li><li>子プロセス: <ul><li><code>child_process.spawnSync</code></li><li><code>child_process.execSync</code></li><li><code>child_process.execFileSync</code></li></ul></li></ul><p>このリストは、Node.js v9 の時点でほぼ完全です。</p><h2 id="イベントループのブロック-json-dos" tabindex="-1">イベントループのブロック：JSON DOS <a class="header-anchor" href="#イベントループのブロック-json-dos" aria-label="Permalink to “イベントループのブロック：JSON DOS”">​</a></h2><p><code>JSON.parse</code> と <code>JSON.stringify</code> も潜在的にコストの高い操作です。これらは入力の長さに比例して O(n) ですが、n が大きい場合、驚くほど時間がかかることがあります。</p><p>サーバーが JSON オブジェクト、特にクライアントからの JSON オブジェクトを操作する場合、イベントループ上で扱うオブジェクトや文字列のサイズに注意する必要があります。</p><p>例：JSON によるブロック。サイズ 2^21 のオブジェクト <code>obj</code> を作成し、<code>JSON.stringify</code> で文字列化し、その文字列に対して indexOf を実行し、その後 <code>JSON.parse</code> を実行します。<code>JSON.stringify</code> された文字列は 50MB になります。オブジェクトの文字列化には 0.7 秒、50MB の文字列に対する indexOf には 0.03 秒、文字列のパースには 1.3 秒かかります。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> niter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> before, str, pos, res, took;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> niter; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { obj1: obj, obj2: obj }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 各イテレーションでサイズが倍になる</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">before </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hrtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">took </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hrtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(before);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;JSON.stringify took &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> took);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">before </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hrtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nomatch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">took </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hrtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(before);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pure indexof took &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> took);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">before </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hrtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">took </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hrtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(before);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;JSON.parse took &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> took);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>非同期 JSON API を提供する npm モジュールがあります。例えば以下を参照してください。</p><ul><li><a href="https://www.npmjs.com/package/JSONStream" target="_blank" rel="noreferrer">JSONStream</a> は、ストリーム API を備えています。</li><li><a href="https://www.npmjs.com/package/bfj" target="_blank" rel="noreferrer">Big-Friendly JSON</a> は、ストリーム API と、以下に示すイベントループ上での分割というパラダイムを使用した標準 JSON API の非同期バージョンを備えています。</li></ul><h2 id="イベントループをブロックせずに複雑な計算を実行する" tabindex="-1">イベントループをブロックせずに複雑な計算を実行する <a class="header-anchor" href="#イベントループをブロックせずに複雑な計算を実行する" aria-label="Permalink to “イベントループをブロックせずに複雑な計算を実行する”">​</a></h2><p>イベントループをブロックせずに JavaScript で複雑な計算を実行したいとします。パーティショニングまたはオフロードの 2 つのオプションがあります。</p><h3 id="パーティショニング" tabindex="-1">パーティショニング <a class="header-anchor" href="#パーティショニング" aria-label="Permalink to “パーティショニング”">​</a></h3><p>計算を <em>パーティショニング</em> して、それぞれがイベントループ上で実行されるようにしますが、他の保留中のイベントに定期的に譲歩（順番を譲る）します。JavaScript では、以下の例 2 に示すように、進行中のタスクの状態をクロージャに簡単に保存できます。</p><p>簡単な例として、数値 <code>1</code> から <code>n</code> までの平均を計算したいとします。</p><p>例 1：パーティション化されていない平均、コストは <code>O(n)</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> avg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;avg: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> avg);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例 2：パーティション化された平均、<code>n</code> 個の非同期ステップのそれぞれのコストは <code>O(1)</code> です。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> asyncAvg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">avgCB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 進行中の合計を JS クロージャに保存します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;非同期再帰&quot;。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 次の操作を非同期的にスケジュールします。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(help.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cb));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ヘルパーを開始し、avgCB を呼び出すための CB を指定します。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  help</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> avg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    avgCB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(avg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asyncAvg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">avg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1-n の平均: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> avg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>この原則は、配列のイテレーションなどに適用できます。</p><h3 id="オフロード" tabindex="-1">オフロード <a class="header-anchor" href="#オフロード" aria-label="Permalink to “オフロード”">​</a></h3><p>より複雑な処理が必要な場合、パーティショニングは良い選択肢ではありません。なぜなら、パーティショニングはイベントループのみを使用し、ほぼ確実にあなたのマシンで利用可能な複数のコアを活用できないからです。<strong>イベントループはクライアントのリクエストを調整するものであり、それ自体がリクエストを処理するものではないことを覚えておいてください。</strong> 複雑なタスクの場合は、イベントループからワーカプールに処理をオフロードしてください。</p><h4 id="オフロードの方法" tabindex="-1">オフロードの方法 <a class="header-anchor" href="#オフロードの方法" aria-label="Permalink to “オフロードの方法”">​</a></h4><p>処理をオフロードするための宛先ワーカプールには、2つの選択肢があります。</p><ol><li><a href="/ja/nodejs/api/addons">C++アドオン</a>を開発して、Node.jsの組み込みワーカプールを使用できます。古いバージョンのNodeでは、<a href="https://github.com/nodejs/nan" target="_blank" rel="noreferrer">NAN</a>を使用して<a href="/ja/nodejs/api/addons">C++アドオン</a>を構築し、新しいバージョンでは<a href="/ja/nodejs/api/n-api">N-API</a>を使用します。<a href="https://www.npmjs.com/package/webworker-threads" target="_blank" rel="noreferrer">node-webworker-threads</a>を使用すると、JavaScriptのみでNode.jsワーカプールにアクセスできます。</li><li>Node.jsのI/Oをテーマにしたワーカプールではなく、計算専用の独自のワーカプールを作成および管理できます。これを行う最も簡単な方法は、<a href="/ja/nodejs/api/child_process">子プロセス</a>または<a href="/ja/nodejs/api/cluster">クラスタ</a>を使用することです。</li></ol><p>単にクライアントごとに<a href="/ja/nodejs/api/child_process">子プロセス</a>を作成すべきではありません。クライアントのリクエストは、子プロセスの作成と管理よりも早く受信できるため、サーバーが<a href="https://en.wikipedia.org/wiki/Fork_bomb" target="_blank" rel="noreferrer">フォーク爆弾</a>になる可能性があります。</p><p>オフロードの欠点 オフロードのアプローチの欠点は、通信コストという形でオーバーヘッドが発生することです。イベントループのみが、アプリケーションの「名前空間」（JavaScriptの状態）を見ることができます。ワーカからは、イベントループの名前空間にあるJavaScriptオブジェクトを操作することはできません。代わりに、共有したいオブジェクトをシリアライズおよびデシリアライズする必要があります。その後、ワーカはこれらのオブジェクトの独自のコピーを操作し、変更されたオブジェクト（または「パッチ」）をイベントループに返すことができます。</p><p>シリアライズに関する懸念事項については、JSON DOSのセクションを参照してください。</p><h4 id="オフロードに関するいくつかの提案" tabindex="-1">オフロードに関するいくつかの提案 <a class="header-anchor" href="#オフロードに関するいくつかの提案" aria-label="Permalink to “オフロードに関するいくつかの提案”">​</a></h4><p>CPU負荷の高いタスクとI/O負荷の高いタスクは、特性が大きく異なるため、区別することをお勧めします。</p><p>CPU負荷の高いタスクは、ワーカがスケジュールされている場合にのみ進行し、ワーカはマシンの<a href="/ja/nodejs/api/os">論理コア</a>のいずれかにスケジュールされる必要があります。4つの論理コアと5つのワーカがある場合、これらのワーカの1つは進行できません。その結果、このワーカに対してオーバーヘッド（メモリとスケジューリングのコスト）を支払っているにもかかわらず、何もリターンが得られません。</p><p>I/O負荷の高いタスクは、外部サービスプロバイダ（DNS、ファイルシステムなど）にクエリを送信し、その応答を待つことを伴います。I/O負荷の高いタスクを持つワーカが応答を待っている間、他に何もすることがないため、オペレーティングシステムによってデ・スケジュールされ、別のワーカにリクエストを送信する機会を与えることができます。したがって、I/O負荷の高いタスクは、関連するスレッドが実行されていなくても進行します。データベースやファイルシステムなどの外部サービスプロバイダは、多くの保留中のリクエストを同時に処理するように高度に最適化されています。たとえば、ファイルシステムは、保留中の書き込みおよび読み取りリクエストの大規模なセットを調べて、競合する更新をマージし、最適な順序でファイルを取得します。</p><p>Node.jsワーカプールなど、1つのワーカプールのみに依存している場合、CPUバウンドのタスクとI/Oバウンドのタスクの特性が異なることが、アプリケーションのパフォーマンスを損なう可能性があります。</p><p>このため、別の計算ワーカプールを維持することをお勧めします。</p><h3 id="オフロード-結論" tabindex="-1">オフロード: 結論 <a class="header-anchor" href="#オフロード-結論" aria-label="Permalink to “オフロード: 結論”">​</a></h3><p>配列の要素を任意に長く反復処理するような単純なタスクには、パーティショニングが良い選択肢かもしれません。計算がより複雑な場合は、オフロードがより良いアプローチです。通信コスト、つまりイベントループとワーカープール間でシリアライズされたオブジェクトを渡すオーバーヘッドは、複数のコアを使用する利点によって相殺されます。</p><p>ただし、サーバーが複雑な計算に大きく依存している場合は、Node.jsが本当に適しているかどうかを検討する必要があります。Node.jsはI/Oバウンドの作業に優れていますが、高価な計算には最適な選択肢ではないかもしれません。</p><p>オフロードのアプローチをとる場合は、ワーカープールをブロックしないことに関するセクションを参照してください。</p><h3 id="ワーカープールをブロックしない" tabindex="-1">ワーカープールをブロックしない <a class="header-anchor" href="#ワーカープールをブロックしない" aria-label="Permalink to “ワーカープールをブロックしない”">​</a></h3><p>Node.jsには、k個のワーカーで構成されるワーカープールがあります。上記で説明したオフロードパラダイムを使用している場合は、個別の計算ワーカープールがあるかもしれません。これにも同じ原則が適用されます。いずれにせよ、kは同時処理する可能性のあるクライアントの数よりもはるかに小さいと仮定しましょう。これは、Node.jsの「多数のクライアントに対して1つのスレッド」という哲学と一致しており、そのスケーラビリティの秘訣です。</p><p>上記で説明したように、各ワーカーは現在のタスクを完了してから、ワーカープールのキューにある次のタスクに進みます。</p><p>ここで、クライアントのリクエストを処理するために必要なタスクのコストには変動があります。一部のタスクはすぐに完了できます（短いファイルやキャッシュされたファイルの読み取り、または少数のランダムバイトの生成など）。他のタスクはより時間がかかります（より大きいファイルやキャッシュされていないファイルの読み取り、またはより多くのランダムバイトの生成など）。あなたの目標は、タスク時間の変動を最小限に抑えることであり、これを達成するためにタスクのパーティショニングを使用する必要があります。</p><h4 id="タスク時間の変動を最小限に抑える" tabindex="-1">タスク時間の変動を最小限に抑える <a class="header-anchor" href="#タスク時間の変動を最小限に抑える" aria-label="Permalink to “タスク時間の変動を最小限に抑える”">​</a></h4><p>ワーカーの現在のタスクが他のタスクよりもはるかに高価な場合、他の保留中のタスクの処理に使用できなくなります。言い換えれば、比較的長い各タスクは、完了するまでワーカープールのサイズを事実上1つ減らします。これは望ましくありません。なぜなら、ある時点までは、ワーカープール内のワーカーが多いほど、ワーカープールのスループット（タスク/秒）が大きくなり、したがってサーバーのスループット（クライアントリクエスト/秒）が大きくなるからです。比較的コストのかかるタスクを持つ1つのクライアントは、ワーカープールのスループットを低下させ、ひいてはサーバーのスループットを低下させます。</p><p>これを避けるために、ワーカープールに送信するタスクの長さの変動を最小限に抑えるようにしてください。I/Oリクエストによってアクセスされる外部システム（DB、FSなど）をブラックボックスとして扱うのは適切ですが、これらのI/Oリクエストの相対的なコストを認識し、特に長くなると予想されるリクエストの送信は避ける必要があります。</p><p>2つの例で、タスク時間の可能な変動を示す必要があります。</p><h4 id="バリエーションの例-時間のかかるファイルシステム読み込み" tabindex="-1">バリエーションの例：時間のかかるファイルシステム読み込み <a class="header-anchor" href="#バリエーションの例-時間のかかるファイルシステム読み込み" aria-label="Permalink to “バリエーションの例：時間のかかるファイルシステム読み込み”">​</a></h4><p>サーバーがクライアントリクエストを処理するためにファイルを読み込む必要があるとします。Node.jsの<a href="/ja/nodejs/api/fs">ファイルシステム</a> APIを参照した後、単純さのために<code>fs.readFile()</code>を使用することにしました。ただし、<code>fs.readFile()</code>は（現在）分割されていません。ファイル全体にわたる単一の<code>fs.read()</code>タスクを送信します。一部のユーザーに対して短いファイルを読み込み、他のユーザーに対して長いファイルを読み込む場合、<code>fs.readFile()</code>はタスクの長さに大きな変動をもたらし、ワーカープールのスループットを低下させる可能性があります。</p><p>最悪のシナリオとして、攻撃者がサーバーに任意のファイルを読み込ませることができるとします（これは<a href="https://www.owasp.org/index.php/Path_Traversal" target="_blank" rel="noreferrer">ディレクトリトラバーサル脆弱性</a>です）。サーバーがLinuxで実行されている場合、攻撃者は非常に遅いファイル（<code>/dev/random</code>）を指定できます。実際上、<code>/dev/random</code>は無限に遅く、<code>/dev/random</code>からの読み込みを求められたすべてのワーカーはタスクを完了できません。攻撃者は、各ワーカーに対して1つずつ、k個のリクエストを送信し、ワーカープールを使用する他のクライアントリクエストは処理を進めることができなくなります。</p><h4 id="バリエーションの例-時間のかかる暗号化操作" tabindex="-1">バリエーションの例：時間のかかる暗号化操作 <a class="header-anchor" href="#バリエーションの例-時間のかかる暗号化操作" aria-label="Permalink to “バリエーションの例：時間のかかる暗号化操作”">​</a></h4><p>サーバーが<code>crypto.randomBytes()</code>を使用して暗号的に安全な乱数バイトを生成するとします。<code>crypto.randomBytes()</code>は分割されていません。要求したバイト数を生成するために、単一の<code>randomBytes()</code>タスクを作成します。一部のユーザーに対して少ないバイトを作成し、他のユーザーに対してより多くのバイトを作成する場合、<code>crypto.randomBytes()</code>はタスクの長さの変動の別の原因となります。</p><h3 id="タスクの分割" tabindex="-1">タスクの分割 <a class="header-anchor" href="#タスクの分割" aria-label="Permalink to “タスクの分割”">​</a></h3><p>時間コストが変動するタスクは、ワーカープールのスループットを損なう可能性があります。タスク時間の変動を最小限に抑えるために、可能な限り、各タスクを同程度のコストのサブタスクに分割する必要があります。各サブタスクが完了すると、次のサブタスクを送信し、最後のサブタスクが完了すると、送信者に通知する必要があります。</p><p><code>fs.readFile()</code>の例を続けると、代わりに<code>fs.read()</code>（手動分割）または<code>ReadStream</code>（自動分割）を使用する必要があります。</p><p>同じ原則がCPUバウンドタスクにも適用されます。<code>asyncAvg</code>の例はイベントループには不適切かもしれませんが、ワーカープールには適しています。</p><p>タスクをサブタスクに分割すると、短いタスクは少数のサブタスクに拡張され、長いタスクは多数のサブタスクに拡張されます。長いタスクの各サブタスクの間で、割り当てられたワーカーは別の短いタスクのサブタスクを処理できるため、ワーカープールの全体的なタスクスループットが向上します。</p><p>完了したサブタスクの数は、ワーカープールのスループットを測る上で有用な指標ではないことに注意してください。代わりに、完了したタスクの数を重視してください。</p><h3 id="タスクの分割を避ける" tabindex="-1">タスクの分割を避ける <a class="header-anchor" href="#タスクの分割を避ける" aria-label="Permalink to “タスクの分割を避ける”">​</a></h3><p>タスクの分割の目的は、タスク時間のばらつきを最小限に抑えることであることを思い出してください。短いタスクと長いタスクを区別できる場合（例えば、配列の合計と配列のソートなど）、タスクのクラスごとに1つのワーカプールを作成できます。短いタスクと長いタスクを別々のワーカプールにルーティングすることも、タスク時間のばらつきを最小限に抑える別の方法です。</p><p>このアプローチの利点として、タスクの分割にはオーバーヘッド（ワーカプールのタスク表現の作成コストとワーカプールのキューの操作コスト）が発生し、分割を避けることで、ワーカプールへの追加のトリップのコストを節約できます。また、タスクの分割におけるミスを防ぐこともできます。</p><p>このアプローチの欠点は、これらのワーカプール内のすべてのワーカが、スペースと時間のオーバーヘッドを被り、CPU時間を奪い合うことです。CPUバウンドのタスクは、スケジュールされている場合にのみ進行することを覚えておいてください。その結果、このアプローチは慎重な分析の後にのみ検討する必要があります。</p><h3 id="ワーカプール-結論" tabindex="-1">ワーカプール：結論 <a class="header-anchor" href="#ワーカプール-結論" aria-label="Permalink to “ワーカプール：結論”">​</a></h3><p>Node.jsのワーカプールのみを使用する場合でも、個別のワーカプールを維持する場合でも、プール(群)のタスクスループットを最適化する必要があります。</p><p>これを行うには、タスクの分割を使用して、タスク時間のばらつきを最小限に抑えます。</p><h2 id="npmモジュールのリスク" tabindex="-1">npmモジュールのリスク <a class="header-anchor" href="#npmモジュールのリスク" aria-label="Permalink to “npmモジュールのリスク”">​</a></h2><p>Node.jsのコアモジュールは、幅広いアプリケーションの構築ブロックを提供しますが、時にはそれ以上のものが必要になることがあります。Node.jsの開発者は、npmエコシステムの恩恵を大きく受けており、数十万ものモジュールが開発プロセスを加速するための機能を提供しています。</p><p>ただし、これらのモジュールの大部分はサードパーティの開発者によって作成されており、一般的に最善の努力のみを保証してリリースされていることを覚えておいてください。npmモジュールを使用する開発者は、2つのことを懸念する必要がありますが、後者はしばしば忘れられます。</p><ol><li>APIを尊重しているか？</li><li>APIがイベントループまたはワーカをブロックする可能性があるか？多くのモジュールは、コミュニティの不利益になるように、APIのコストを示す努力をしていません。</li></ol><p>単純なAPIについては、APIのコストを見積もることができます。文字列操作のコストは把握するのが難しくありません。しかし、多くの場合、APIのコストがどれくらいになるかは不明です。</p><p>高コストになる可能性のあるAPIを呼び出す場合は、コストを再確認してください。開発者にドキュメント化を依頼するか、自分でソースコードを調べてください（そして、コストをドキュメント化するPRを提出してください）。</p><p>APIが非同期であっても、パーティションごとにワーカまたはイベントループでどれくらいの時間を費やす可能性があるかはわかりません。たとえば、上記の<code>asyncAvg</code>の例で、ヘルパー関数への各呼び出しが、数値の半分を合計するのではなく、数値の1つを合計すると仮定します。すると、この関数は依然として非同期ですが、各パーティションのコストは<code>O(1)</code>ではなく<code>O(n)</code>になり、<code>n</code>の任意の値に対して使用するのははるかに安全ではありません。</p><h2 id="結論" tabindex="-1">結論 <a class="header-anchor" href="#結論" aria-label="Permalink to “結論”">​</a></h2><p>Node.jsには2種類のスレッドがあります。1つのイベントループとk個のワーカーです。イベントループはJavaScriptのコールバックとノンブロッキングI/Oを担当し、ワーカーは非同期リクエストを完了させるC++コードに対応するタスクを実行します。これにはブロッキングI/OとCPU負荷の高い作業が含まれます。どちらのタイプのスレッドも、一度に1つのアクティビティしか処理しません。コールバックまたはタスクの処理に時間がかかると、それを実行しているスレッドはブロックされます。アプリケーションがブロッキングコールバックまたはタスクを作成する場合、最悪の場合、スループット（クライアント/秒）が低下し、最悪の場合、完全なサービス拒否につながる可能性があります。</p><p>高スループットで、よりDoS対策されたWebサーバーを作成するには、良性な入力と悪意のある入力の両方で、イベントループもワーカーもブロックされないようにする必要があります。</p>`,143)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};