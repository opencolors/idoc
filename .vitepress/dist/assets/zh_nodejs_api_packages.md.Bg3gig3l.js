import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 包文档","description":"查看 Node.js 官方关于包的文档，了解如何管理、创建和发布包，包括 package.json、依赖关系和包管理工具的详细信息。","frontmatter":{"title":"Node.js 包文档","description":"查看 Node.js 官方关于包的文档，了解如何管理、创建和发布包，包括 package.json、依赖关系和包管理工具的详细信息。","head":[["meta",{"name":"og:title","content":"Node.js 包文档 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"查看 Node.js 官方关于包的文档，了解如何管理、创建和发布包，包括 package.json、依赖关系和包管理工具的详细信息。"}],["meta",{"name":"twitter:title","content":"Node.js 包文档 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"查看 Node.js 官方关于包的文档，了解如何管理、创建和发布包，包括 package.json、依赖关系和包管理工具的详细信息。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/packages"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/packages"}]]},"headers":[],"relativePath":"zh/nodejs/api/packages.md","filePath":"zh/nodejs/api/packages.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/api/packages.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="modules-packages" tabindex="-1">模块：包 <a class="header-anchor" href="#modules-packages" aria-label="Permalink to “模块：包”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.13.0, v12.20.0</td><td>添加对 <code>&quot;exports&quot;</code> 模式的支持。</td></tr><tr><td>v14.6.0, v12.19.0</td><td>添加包 <code>&quot;imports&quot;</code> 字段。</td></tr><tr><td>v13.7.0, v12.17.0</td><td>取消对条件导出的标记。</td></tr><tr><td>v13.7.0, v12.16.0</td><td>移除 <code>--experimental-conditional-exports</code> 选项。 在 12.16.0 中，条件导出仍然隐藏在 <code>--experimental-modules</code> 之后。</td></tr><tr><td>v13.6.0, v12.16.0</td><td>取消使用其名称自引用包的标记。</td></tr><tr><td>v12.7.0</td><td>引入 <code>&quot;exports&quot;</code> <code>package.json</code> 字段，作为经典 <code>&quot;main&quot;</code> 字段的更强大的替代方案。</td></tr><tr><td>v12.0.0</td><td>通过 <code>package.json</code> <code>&quot;type&quot;</code> 字段添加对使用 <code>.js</code> 文件扩展名的 ES 模块的支持。</td></tr></tbody></table></div><h2 id="introduction" tabindex="-1">介绍 <a class="header-anchor" href="#introduction" aria-label="Permalink to “介绍”">​</a></h2><p>包是一个由 <code>package.json</code> 文件描述的文件夹树。 包由包含 <code>package.json</code> 文件的文件夹和所有子文件夹组成，直到包含另一个 <code>package.json</code> 文件的下一个文件夹或名为 <code>node_modules</code> 的文件夹。</p><p>本页为编写 <code>package.json</code> 文件的包作者提供指导，并提供 Node.js 定义的 <a href="/zh/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> 字段的参考。</p><h2 id="determining-module-system" tabindex="-1">确定模块系统 <a class="header-anchor" href="#determining-module-system" aria-label="Permalink to “确定模块系统”">​</a></h2><h3 id="introduction_1" tabindex="-1">介绍 <a class="header-anchor" href="#introduction_1" aria-label="Permalink to “介绍”">​</a></h3><p>当作为初始输入传递给 <code>node</code>，或由 <code>import</code> 语句或 <code>import()</code> 表达式引用时，Node.js 会将以下内容视为 <a href="/zh/nodejs/api/esm">ES 模块</a>：</p><ul><li>具有 <code>.mjs</code> 扩展名的文件。</li><li>当最近的父 <code>package.json</code> 文件包含一个值为 <code>&quot;module&quot;</code> 的顶级 <a href="/zh/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> 字段时，具有 <code>.js</code> 扩展名的文件。</li><li>作为参数传递给 <code>--eval</code> 的字符串，或通过 <code>STDIN</code> 通过管道传递给 <code>node</code> 的字符串，并带有标志 <code>--input-type=module</code>。</li><li>包含仅作为 <a href="/zh/nodejs/api/esm">ES 模块</a> 成功解析的语法的代码，例如 <code>import</code> 或 <code>export</code> 语句或 <code>import.meta</code>，而没有关于如何解释它的显式标记。 显式标记是 <code>.mjs</code> 或 <code>.cjs</code> 扩展名，<code>package.json</code> <code>&quot;type&quot;</code> 字段（值为 <code>&quot;module&quot;</code> 或 <code>&quot;commonjs&quot;</code>），或 <code>--input-type</code> 标志。 动态 <code>import()</code> 表达式在 CommonJS 或 ES 模块中都支持，并且不会强制将文件视为 ES 模块。 参见 <a href="/zh/nodejs/api/packages#syntax-detection">语法检测</a>。</li></ul><p>当作为初始输入传递给 <code>node</code>，或由 <code>import</code> 语句或 <code>import()</code> 表达式引用时，Node.js 会将以下内容视为 <a href="/zh/nodejs/api/modules">CommonJS</a>：</p><ul><li>具有 <code>.cjs</code> 扩展名的文件。</li><li>当最近的父 <code>package.json</code> 文件包含一个值为 <code>&quot;commonjs&quot;</code> 的顶级字段 <a href="/zh/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> 时，具有 <code>.js</code> 扩展名的文件。</li><li>作为参数传递给 <code>--eval</code> 或 <code>--print</code> 的字符串，或通过 <code>STDIN</code> 通过管道传递给 <code>node</code> 的字符串，并带有标志 <code>--input-type=commonjs</code>。</li><li>没有父 <code>package.json</code> 文件或最近的父 <code>package.json</code> 文件缺少 <code>type</code> 字段，并且代码可以作为 CommonJS 成功求值的具有 <code>.js</code> 扩展名的文件。 换句话说，Node.js 首先尝试将此类“模棱两可”的文件作为 CommonJS 运行，如果作为 CommonJS 的求值失败，因为它解析器找到了 ES 模块语法，它将重试将其作为 ES 模块求值。</li></ul><p>在“模棱两可”的文件中编写 ES 模块语法会产生性能成本，因此鼓励作者尽可能明确。 特别是，包作者应始终在其 <code>package.json</code> 文件中包含 <a href="/zh/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> 字段，即使在所有源都是 CommonJS 的包中也是如此。 明确包的 <code>type</code> 将使包在 Node.js 的默认类型发生更改时具有前瞻性，并且还可以让构建工具和加载器更容易确定包中的文件应如何解释。</p><h3 id="syntax-detection" tabindex="-1">语法检测 <a class="header-anchor" href="#syntax-detection" aria-label="Permalink to “语法检测”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>更改</th></tr></thead><tbody><tr><td>v22.7.0</td><td>默认启用语法检测。</td></tr><tr><td>v21.1.0, v20.10.0</td><td>添加于：v21.1.0, v20.10.0</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a>.2 - 发布候选版本</p></div><p>Node.js 将检查模糊输入的源代码，以确定它是否包含 ES 模块语法；如果检测到此类语法，则该输入将被视为 ES 模块。</p><p>模糊输入定义为：</p><ul><li>扩展名为 <code>.js</code> 或没有扩展名的文件；并且没有控制 <code>package.json</code> 文件或缺少 <code>type</code> 字段。</li><li>未指定 <code>--input-type</code> 时，字符串输入（<code>--eval</code> 或 <code>STDIN</code>）。</li></ul><p>ES 模块语法定义为在作为 CommonJS 计算时会抛出异常的语法。 这包括以下内容：</p><ul><li><code>import</code> 语句（但 <em>不包括</em> <code>import()</code> 表达式，该表达式在 CommonJS 中有效）。</li><li><code>export</code> 语句。</li><li><code>import.meta</code> 引用。</li><li>模块顶层的 <code>await</code>。</li><li>CommonJS 包装器变量（<code>require</code>、<code>module</code>、<code>exports</code>、<code>__dirname</code>、<code>__filename</code>）的词法重新声明。</li></ul><h3 id="modules-loaders" tabindex="-1">模块加载器 <a class="header-anchor" href="#modules-loaders" aria-label="Permalink to “模块加载器”">​</a></h3><p>Node.js 有两个系统用于解析说明符和加载模块。</p><p>一个是 CommonJS 模块加载器：</p><ul><li>它是完全同步的。</li><li>它负责处理 <code>require()</code> 调用。</li><li>它是可以猴子补丁的。</li><li>它支持<a href="/zh/nodejs/api/modules#folders-as-modules">文件夹作为模块</a>。</li><li>在解析说明符时，如果没有找到完全匹配，它将尝试添加扩展名（<code>.js</code>、<code>.json</code> 和最后的 <code>.node</code>），然后尝试将<a href="/zh/nodejs/api/modules#folders-as-modules">文件夹解析为模块</a>。</li><li>它将 <code>.json</code> 视为 JSON 文本文件。</li><li><code>.node</code> 文件被解释为使用 <code>process.dlopen()</code> 加载的已编译的插件模块。</li><li>它将缺少 <code>.json</code> 或 <code>.node</code> 扩展名的所有文件视为 JavaScript 文本文件。</li><li>如果模块图是同步的（不包含顶层的 <code>await</code>），则只能用于<a href="/zh/nodejs/api/modules#loading-ecmascript-modules-using-require">从 CommonJS 模块加载 ECMAScript 模块</a>。当用于加载不是 ECMAScript 模块的 JavaScript 文本文件时，该文件将被加载为 CommonJS 模块。</li></ul><p>一个是 ECMAScript 模块加载器：</p><ul><li>它是异步的，除非它用于为 <code>require()</code> 加载模块。</li><li>它负责处理 <code>import</code> 语句和 <code>import()</code> 表达式。</li><li>它不可猴子补丁，可以使用<a href="/zh/nodejs/api/esm#loaders">加载器钩子</a>进行自定义。</li><li>它不支持将文件夹作为模块，必须完全指定目录索引（例如 <code>&#39;. /startup/index.js&#39;</code>）。</li><li>它不进行扩展名搜索。 当说明符是相对或绝对文件 URL 时，必须提供文件扩展名。</li><li>它可以加载 JSON 模块，但需要导入类型属性。</li><li>它只接受 JavaScript 文本文件的 <code>.js</code>、<code>.mjs</code> 和 <code>.cjs</code> 扩展名。</li><li>它可用于加载 JavaScript CommonJS 模块。 此类模块通过 <code>cjs-module-lexer</code> 传递，以尝试识别命名导出，如果可以通过静态分析确定这些导出，则可以使用。 导入的 CommonJS 模块将其 URL 转换为绝对路径，然后通过 CommonJS 模块加载器加载。</li></ul><h3 id="packagejson-and-file-extensions" tabindex="-1"><code>package.json</code> 和文件扩展名 <a class="header-anchor" href="#packagejson-and-file-extensions" aria-label="Permalink to “package.json 和文件扩展名”">​</a></h3><p>在一个包中，<a href="/zh/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> 中的 <a href="/zh/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> 字段定义了 Node.js 应该如何解释 <code>.js</code> 文件。 如果 <code>package.json</code> 文件没有 <code>&quot;type&quot;</code> 字段，则 <code>.js</code> 文件会被视为 <a href="/zh/nodejs/api/modules">CommonJS</a>。</p><p><code>package.json</code> 中 <code>&quot;type&quot;</code> 的值为 <code>&quot;module&quot;</code> 时，告诉 Node.js 将该包中的 <code>.js</code> 文件解释为使用 <a href="/zh/nodejs/api/esm">ES 模块</a> 语法。</p><p><code>&quot;type&quot;</code> 字段不仅适用于初始入口点（<code>node my-app.js</code>），还适用于 <code>import</code> 语句和 <code>import()</code> 表达式引用的文件。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// my-app.js, 被视为 ES 模块，因为在同一文件夹中存在一个 package.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件，其中 &quot;type&quot;: &quot;module&quot;。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./startup/init.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 被加载为 ES 模块，因为 ./startup 不包含 package.json 文件，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 因此从上一级继承 &quot;type&quot; 值。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;commonjs-package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 被加载为 CommonJS，因为 ./node_modules/commonjs-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缺少 &quot;type&quot; 字段或包含 &quot;type&quot;: &quot;commonjs&quot;。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./node_modules/commonjs-package/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 被加载为 CommonJS，因为 ./node_modules/commonjs-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缺少 &quot;type&quot; 字段或包含 &quot;type&quot;: &quot;commonjs&quot;。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>无论最近的父级 <code>package.json</code> 如何，以 <code>.mjs</code> 结尾的文件始终加载为 <a href="/zh/nodejs/api/esm">ES 模块</a>。</p><p>无论最近的父级 <code>package.json</code> 如何，以 <code>.cjs</code> 结尾的文件始终加载为 <a href="/zh/nodejs/api/modules">CommonJS</a>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./legacy-file.cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 被加载为 CommonJS，因为 .cjs 始终被加载为 CommonJS。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;commonjs-package/src/index.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 被加载为 ES 模块，因为 .mjs 始终被加载为 ES 模块。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>.mjs</code> 和 <code>.cjs</code> 扩展名可用于在同一包中混合类型：</p><ul><li>在 <code>&quot;type&quot;: &quot;module&quot;</code> 包中，可以通过将特定文件命名为 <code>.cjs</code> 扩展名来指示 Node.js 将其解释为 <a href="/zh/nodejs/api/modules">CommonJS</a>（因为在 <code>&quot;module&quot;</code> 包中，<code>.js</code> 和 <code>.mjs</code> 文件都被视为 ES 模块）。</li><li>在 <code>&quot;type&quot;: &quot;commonjs&quot;</code> 包中，可以通过将特定文件命名为 <code>.mjs</code> 扩展名来指示 Node.js 将其解释为 <a href="/zh/nodejs/api/esm">ES 模块</a>（因为在 <code>&quot;commonjs&quot;</code> 包中，<code>.js</code> 和 <code>.cjs</code> 文件都被视为 CommonJS）。</li></ul><h3 id="--input-type-flag" tabindex="-1"><code>--input-type</code> 标志 <a class="header-anchor" href="#--input-type-flag" aria-label="Permalink to “--input-type 标志”">​</a></h3><p><strong>添加于: v12.0.0</strong></p><p>当设置 <code>--input-type=module</code> 标志时，作为参数传递给 <code>--eval</code>（或 <code>-e</code>）的字符串，或通过 <code>STDIN</code> 管道传递给 <code>node</code> 的字符串，将被视为 <a href="/zh/nodejs/api/esm">ES 模块</a>。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --input-type=module</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;import { sep } from &#39;node:path&#39;; console.log(sep);&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;import { sep } from &#39;node:path&#39;; console.log(sep);&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --input-type=module</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>为了完整性，还有 <code>--input-type=commonjs</code>，用于显式地将字符串输入作为 CommonJS 运行。如果未指定 <code>--input-type</code>，这是默认行为。</p><h2 id="determining-package-manager" tabindex="-1">确定包管理器 <a class="header-anchor" href="#determining-package-manager" aria-label="Permalink to “确定包管理器”">​</a></h2><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> - 实验性</p></div><p>虽然所有 Node.js 项目在发布后都应可由所有包管理器安装，但它们的开发团队通常需要使用一个特定的包管理器。 为了简化此过程，Node.js 附带了一个名为 <a href="/zh/nodejs/api/corepack">Corepack</a> 的工具，旨在使所有包管理器在您的环境中透明地可用 - 前提是您已安装 Node.js。</p><p>默认情况下，Corepack 不会强制执行任何特定的包管理器，并将使用与每个 Node.js 版本关联的通用“最近已知良好”版本，但您可以通过在项目的 <code>package.json</code> 中设置 <a href="/zh/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> 字段来改善此体验。</p><h2 id="package-entry-points" tabindex="-1">包入口点 <a class="header-anchor" href="#package-entry-points" aria-label="Permalink to “包入口点”">​</a></h2><p>在包的 <code>package.json</code> 文件中，两个字段可以定义包的入口点：<a href="/zh/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> 和 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>。 两个字段都适用于 ES 模块和 CommonJS 模块入口点。</p><p><a href="/zh/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> 字段在所有版本的 Node.js 中都受支持，但其功能有限：它仅定义包的主入口点。</p><p><a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 提供了一种现代替代方案，取代了 <a href="/zh/nodejs/api/packages#main"><code>&quot;main&quot;</code></a>，允许定义多个入口点，支持环境之间的条件入口分辨率，并且<strong>防止任何其他入口点（除了那些在 <a href="#exports"><code>&quot;exports&quot;</code></a> 中定义的）</strong>。 这种封装允许模块作者清楚地定义其包的公共接口。</p><p>对于针对当前支持的 Node.js 版本的新包，建议使用 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段。 对于支持 Node.js 10 及更低版本的包，则需要 <a href="/zh/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> 字段。 如果同时定义了 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 和 <a href="/zh/nodejs/api/packages#main"><code>&quot;main&quot;</code></a>，则在支持的 Node.js 版本中，<a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段优先于 <a href="/zh/nodejs/api/packages#main"><code>&quot;main&quot;</code></a>。</p><p><a href="/zh/nodejs/api/packages#conditional-exports">条件导出</a> 可以在 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 中使用，以定义每个环境的不同包入口点，包括包是通过 <code>require</code> 还是通过 <code>import</code> 引用。 有关在单个包中支持 CommonJS 和 ES 模块的更多信息，请参阅 <a href="/zh/nodejs/api/packages#dual-commonjses-module-packages">双重 CommonJS/ES 模块包部分</a>。</p><p>引入 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段的现有包将阻止包的使用者使用任何未定义的入口点，包括 <a href="/zh/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> (例如 <code>require(&#39;your-package/package.json&#39;)</code>)。 <strong>这很可能会是一项重大更改。</strong></p><p>为了使 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 的引入不会造成破坏性更改，请确保导出每个先前支持的入口点。 最好显式指定入口点，以便很好地定义包的公共 API。 例如，一个先前导出 <code>main</code>、<code>lib</code>、<code>feature</code> 和 <code>package.json</code> 的项目可以使用以下 <code>package.exports</code>：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./package.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>或者，项目可以选择使用导出模式导出整个文件夹，无论是否带有扩展子路径：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./package.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>以上为任何次要包版本提供了向后兼容性，包的未来主要更改可以正确地将导出限制为仅暴露的特定功能导出：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/internal/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="main-entry-point-export" tabindex="-1">主要入口点导出 <a class="header-anchor" href="#main-entry-point-export" aria-label="Permalink to “主要入口点导出”">​</a></h3><p>编写新包时，建议使用 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当定义了 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段时，该包的所有子路径都会被封装，并且对导入者不再可用。例如，<code>require(&#39;pkg/subpath.js&#39;)</code> 会抛出一个 <a href="/zh/nodejs/api/errors#err-package-path-not-exported"><code>ERR_PACKAGE_PATH_NOT_EXPORTED</code></a> 错误。</p><p>这种导出封装为工具提供了更可靠的包接口保证，并在处理包的语义版本升级时提供了保证。 这不是一个强封装，因为直接 require 包的任何绝对子路径（例如 <code>require(&#39;/path/to/node_modules/pkg/subpath.js&#39;)</code>）仍然会加载 <code>subpath.js</code>。</p><p>所有当前支持的 Node.js 版本和现代构建工具都支持 <code>&quot;exports&quot;</code> 字段。 对于使用旧版本 Node.js 或相关构建工具的项目，可以通过在 <code>&quot;main&quot;</code> 字段旁边包含 <code>&quot;exports&quot;</code> 并指向同一个模块来实现兼容性：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="subpath-exports" tabindex="-1">子路径导出 <a class="header-anchor" href="#subpath-exports" aria-label="Permalink to “子路径导出”">​</a></h3><p><strong>添加于: v12.7.0</strong></p><p>使用 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段时，可以通过将主入口点视为 <code>&quot;.&quot;</code> 子路径来定义自定义子路径以及主入口点：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./submodule.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/submodule.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>现在，只有 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 中定义的子路径才能被使用者导入：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> submodule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/submodule.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载 ./node_modules/es-module-package/src/submodule.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>而其他子路径将会报错：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> submodule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/private-module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出 ERR_PACKAGE_PATH_NOT_EXPORTED</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="extensions-in-subpaths" tabindex="-1">子路径中的扩展名 <a class="header-anchor" href="#extensions-in-subpaths" aria-label="Permalink to “子路径中的扩展名”">​</a></h4><p>包作者应该在其导出中提供带扩展名的（<code>import &#39;pkg/subpath.js&#39;</code>）或不带扩展名的（<code>import &#39;pkg/subpath&#39;</code>）子路径。 这确保了每个导出的模块只有一个子路径，以便所有依赖项导入相同的统一说明符，从而使包契约对使用者保持清晰，并简化包子路径补全。</p><p>传统上，包倾向于使用不带扩展名的样式，这种样式具有可读性和屏蔽包内文件真实路径的优点。</p><p>由于 <a href="https://github.com/WICG/import-maps" target="_blank" rel="noreferrer">import maps</a> 现在为浏览器和其他 JavaScript 运行时中的包解析提供了一个标准，因此使用不带扩展名的样式可能会导致 import map 定义膨胀。 显式文件扩展名可以通过允许导入映射利用 <a href="https://github.com/WICG/import-maps#packages-via-trailing-slashes" target="_blank" rel="noreferrer">packages 文件夹映射</a> 在可能的情况下映射多个子路径，而不是每个包子路径导出使用单独的映射条目，从而避免此问题。 这也反映了在相对和绝对导入说明符中使用 <a href="/zh/nodejs/api/esm#mandatory-file-extensions">完整的说明符路径</a> 的要求。</p><h3 id="exports-sugar" tabindex="-1">导出简写 <a class="header-anchor" href="#exports-sugar" aria-label="Permalink to “导出简写”">​</a></h3><p><strong>添加于: v12.11.0</strong></p><p>如果 <code>&quot;.&quot;</code> 导出是唯一的导出，则 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段为此情况提供简写，即直接使用 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段值。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以写成：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="subpath-imports" tabindex="-1">子路径导入 <a class="header-anchor" href="#subpath-imports" aria-label="Permalink to “子路径导入”">​</a></h3><p><strong>添加于: v14.6.0, v12.19.0</strong></p><p>除了 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段之外，还有一个包 <code>&quot;imports&quot;</code> 字段，用于创建仅适用于包本身内部导入说明符的私有映射。</p><p><code>&quot;imports&quot;</code> 字段中的条目必须始终以 <code>#</code> 开头，以确保它们与外部包说明符区分开。</p><p>例如，imports 字段可用于获得内部模块条件导出的好处：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#dep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dep-polyfill.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>其中 <code>import &#39;#dep&#39;</code> 不会获得外部包 <code>dep-node-native</code> 的解析（包括其导出的内容），而是在其他环境中获取相对于包的本地文件 <code>./dep-polyfill.js</code>。</p><p>与 <code>&quot;exports&quot;</code> 字段不同，<code>&quot;imports&quot;</code> 字段允许映射到外部包。</p><p>imports 字段的解析规则与其他方面与 exports 字段类似。</p><h3 id="subpath-patterns" tabindex="-1">子路径模式 <a class="header-anchor" href="#subpath-patterns" aria-label="Permalink to “子路径模式”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v16.10.0, v14.19.0</td><td>支持 &quot;imports&quot; 字段中的模式尾部。</td></tr><tr><td>v16.9.0, v14.19.0</td><td>支持模式尾部。</td></tr><tr><td>v14.13.0, v12.20.0</td><td>添加于: v14.13.0, v12.20.0</td></tr></tbody></table></div><p>对于导出或导入数量较少的包，我们建议显式列出每个导出子路径条目。 但是对于具有大量子路径的包，这可能会导致 <code>package.json</code> 膨胀和维护问题。</p><p>对于这些用例，可以改用子路径导出模式：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/features/*.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#internal/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/internal/*.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong><code>*</code> 映射公开嵌套子路径，因为它只是字符串替换语法。</strong></p><p>右侧的所有 <code>*</code> 实例都将被替换为该值，包括它是否包含任何 <code>/</code> 分隔符。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/x.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载 ./node_modules/es-module-package/src/features/x.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/y/y.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载 ./node_modules/es-module-package/src/features/y/y.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> internalZ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#internal/z.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载 ./node_modules/es-module-package/src/internal/z.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这是一个直接的静态匹配和替换，对文件扩展名没有任何特殊处理。 在映射的两侧都包含 <code>&quot;*.js&quot;</code> 将公开的包导出限制为仅 JS 文件。</p><p>导出的属性是静态可枚举的，它通过导出模式来维护，因为可以通过将右侧的目标模式视为相对于包中文件列表的 <code>**</code> glob 来确定包的各个导出。 因为 <code>node_modules</code> 路径在导出目标中被禁止，所以这种扩展仅依赖于包本身的文件。</p><p>要从模式中排除私有子文件夹，可以使用 <code>null</code> 目标：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/private-internal/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureInternal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/private-internal/m.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出：ERR_PACKAGE_PATH_NOT_EXPORTED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/x.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载 ./node_modules/es-module-package/src/features/x.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="conditional-exports" tabindex="-1">条件导出 <a class="header-anchor" href="#conditional-exports" aria-label="Permalink to “条件导出”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v13.7.0, v12.16.0</td><td>取消条件导出的标记。</td></tr><tr><td>v13.2.0, v12.16.0</td><td>添加于：v13.2.0, v12.16.0</td></tr></tbody></table></div><p>条件导出提供了一种根据特定条件映射到不同路径的方法。 CommonJS 和 ES 模块导入都支持它们。</p><p>例如，一个希望为 <code>require()</code> 和 <code>import</code> 提供不同 ES 模块导出的包可以这样编写：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index-module.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index-require.cjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Node.js 实现了以下条件，按照从最具体到最不具体的顺序列出，因为应该定义条件：</p><ul><li><code>&quot;node-addons&quot;</code> - 类似于 <code>&quot;node&quot;</code>，并且匹配任何 Node.js 环境。 此条件可用于提供一个使用本机 C++ 插件的入口点，而不是一个更通用且不依赖于本机插件的入口点。 可以通过 <a href="/zh/nodejs/api/cli#no-addons"><code>--no-addons</code> 标志</a>禁用此条件。</li><li><code>&quot;node&quot;</code> - 匹配任何 Node.js 环境。 可以是 CommonJS 或 ES 模块文件。 <em>在大多数情况下，显式调用 Node.js 平台是不必要的。</em></li><li><code>&quot;import&quot;</code> - 当包通过 <code>import</code> 或 <code>import()</code> 加载时，或通过 ECMAScript 模块加载器的任何顶级导入或解析操作加载时匹配。 适用于目标文件的模块格式。 <em>始终与 <code>&quot;require&quot;</code> 互斥。</em></li><li><code>&quot;require&quot;</code> - 当包通过 <code>require()</code> 加载时匹配。 引用的文件应该可以通过 <code>require()</code> 加载，尽管条件匹配与目标文件的模块格式无关。 预期格式包括 CommonJS、JSON、本机插件和 ES 模块。 <em>始终与 <code>&quot;import&quot;</code> 互斥。</em></li><li><code>&quot;module-sync&quot;</code> - 无论包是通过 <code>import</code>、<code>import()</code> 还是 <code>require()</code> 加载，都会匹配。 格式预计为 ES 模块，其模块图中不包含顶级 await - 如果包含，当 <code>require()</code> 该模块时，将抛出 <code>ERR_REQUIRE_ASYNC_MODULE</code>。</li><li><code>&quot;default&quot;</code> - 始终匹配的通用回退。 可以是 CommonJS 或 ES 模块文件。 <em>此条件应始终排在最后。</em></li></ul><p>在 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 对象中，键的顺序很重要。 在条件匹配期间，较早的条目具有更高的优先级，并且优先于较晚的条目。 <em>一般规则是，条件在对象顺序中应从最具体到最不具体。</em></p><p>使用 <code>&quot;import&quot;</code> 和 <code>&quot;require&quot;</code> 条件可能会导致一些危险，这在<a href="/zh/nodejs/api/packages#dual-commonjses-module-packages">双 CommonJS/ES 模块包部分</a>中进一步解释。</p><p><code>&quot;node-addons&quot;</code> 条件可用于提供一个使用本机 C++ 插件的入口点。 但是，可以通过 <a href="/zh/nodejs/api/cli#no-addons"><code>--no-addons</code> 标志</a>禁用此条件。 使用 <code>&quot;node-addons&quot;</code> 时，建议将 <code>&quot;default&quot;</code> 视为一种增强，它可以提供更通用的入口点，例如使用 WebAssembly 而不是本机插件。</p><p>条件导出也可以扩展到导出子路径，例如：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>定义一个包，其中 <code>require(&#39;pkg/feature.js&#39;)</code> 和 <code>import &#39;pkg/feature.js&#39;)</code> 可以在 Node.js 和其他 JS 环境之间提供不同的实现。</p><p>使用环境分支时，请尽可能始终包含 <code>&quot;default&quot;</code> 条件。 提供 <code>&quot;default&quot;</code> 条件可确保任何未知的 JS 环境都能够使用此通用实现，这有助于避免这些 JS 环境不得不伪装成现有环境才能支持具有条件导出的包。 因此，使用 <code>&quot;node&quot;</code> 和 <code>&quot;default&quot;</code> 条件分支通常比使用 <code>&quot;node&quot;</code> 和 <code>&quot;browser&quot;</code> 条件分支更好。</p><h3 id="nested-conditions" tabindex="-1">嵌套条件 <a class="header-anchor" href="#nested-conditions" aria-label="Permalink to “嵌套条件”">​</a></h3><p>除了直接映射之外，Node.js 还支持嵌套条件对象。</p><p>例如，定义一个仅在 Node.js 中具有双模式入口点，但在浏览器中没有的包：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.cjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature.mjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>条件会像扁平条件一样，按照顺序进行匹配。 如果一个嵌套条件没有任何映射，它将继续检查父条件的其余条件。 通过这种方式，嵌套条件的行为类似于嵌套的 JavaScript <code>if</code> 语句。</p><h3 id="resolving-user-conditions" tabindex="-1">解析用户条件 <a class="header-anchor" href="#resolving-user-conditions" aria-label="Permalink to “解析用户条件”">​</a></h3><p><strong>新增于: v14.9.0, v12.19.0</strong></p><p>运行 Node.js 时，可以使用 <code>--conditions</code> 标志添加自定义用户条件：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --conditions=development</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后它将解析包导入和导出中的 <code>&quot;development&quot;</code> 条件，同时适当地解析现有的 <code>&quot;node&quot;</code>、<code>&quot;node-addons&quot;</code>、<code>&quot;default&quot;</code>、<code>&quot;import&quot;</code> 和 <code>&quot;require&quot;</code> 条件。</p><p>可以使用重复标志设置任意数量的自定义条件。</p><p>典型的条件应仅包含字母数字字符，并在必要时使用 &quot;:&quot;, &quot;-&quot; 或 &quot;=&quot; 作为分隔符。 否则可能会在 node 之外遇到兼容性问题。</p><p>在 node 中，条件几乎没有限制，但具体来说包括：</p><h3 id="community-conditions-definitions" tabindex="-1">社区条件定义 <a class="header-anchor" href="#community-conditions-definitions" aria-label="Permalink to “社区条件定义”">​</a></h3><p>默认情况下，Node.js 内核中实现的 <code>&quot;import&quot;</code>、<code>&quot;require&quot;</code>、<code>&quot;node&quot;</code>、<code>&quot;module-sync&quot;</code>、<code>&quot;node-addons&quot;</code> 和 <code>&quot;default&quot;</code> 条件之外的条件字符串会被忽略。</p><p>其他平台可能会实现其他条件，并且可以通过 <a href="/zh/nodejs/api/packages#resolving-user-conditions"><code>--conditions</code> / <code>-C</code> 标志</a> 在 Node.js 中启用用户条件。</p><p>由于自定义包条件需要明确的定义才能确保正确使用，因此下面提供了一个常见的已知包条件及其严格定义的列表，以帮助进行生态系统协调。</p><ul><li><code>&quot;types&quot;</code> - 可由类型系统使用来解析给定导出的类型文件。 <em>此条件应始终首先包含。</em></li><li><code>&quot;browser&quot;</code> - 任何 Web 浏览器环境。</li><li><code>&quot;development&quot;</code> - 可用于定义仅用于开发的入口点，例如在开发模式下运行时提供额外的调试上下文，例如更好的错误消息。 <em>必须始终与 <code>&quot;production&quot;</code> 互斥。</em></li><li><code>&quot;production&quot;</code> - 可用于定义生产环境入口点。 <em>必须始终与 <code>&quot;development&quot;</code> 互斥。</em></li></ul><p>对于其他运行时，特定于平台的条件键定义由 <a href="https://wintercg.org/" target="_blank" rel="noreferrer">WinterCG</a> 在 <a href="https://runtime-keys.proposal.wintercg.org/" target="_blank" rel="noreferrer">运行时键</a> 提案规范中维护。</p><p>可以通过创建一个拉取请求到 <a href="https://github.com/nodejs/node/blob/HEAD/doc/api/packages.md#conditions-definitions" target="_blank" rel="noreferrer">Node.js 文档的此部分</a> 将新的条件定义添加到此列表中。 此处列出新条件定义的要求是：</p><ul><li>对于所有实现者，定义应清晰明确。</li><li>应该清楚地证明为什么需要该条件的使用案例。</li><li>应该存在足够的现有实现使用情况。</li><li>条件名称不应与另一个条件定义或广泛使用的条件冲突。</li><li>条件定义的列出应为生态系统提供协调收益，否则这是不可能的。 例如，对于公司特定或应用程序特定的条件，情况不一定如此。</li><li>该条件应该是 Node.js 用户希望它位于 Node.js 核心文档中的条件。 <code>&quot;types&quot;</code> 条件就是一个很好的例子：它实际上不属于 <a href="https://runtime-keys.proposal.wintercg.org/" target="_blank" rel="noreferrer">运行时键</a> 提案，但在 Node.js 文档中非常合适。</li></ul><p>上述定义可能会在适当的时候移动到专用的条件注册表中。</p><h3 id="self-referencing-a-package-using-its-name" tabindex="-1">使用包名称自引用包 <a class="header-anchor" href="#self-referencing-a-package-using-its-name" aria-label="Permalink to “使用包名称自引用包”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>更改</th></tr></thead><tbody><tr><td>v13.6.0, v12.16.0</td><td>取消使用包名称自引用的标记。</td></tr><tr><td>v13.1.0, v12.16.0</td><td>添加于：v13.1.0, v12.16.0</td></tr></tbody></table></div><p>在一个包中，可以通过包的名称引用包的 <code>package.json</code> 文件的 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段中定义的值。 例如，假设 <code>package.json</code> 是：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./foo.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>然后，<em>该包中</em>的任何模块都可以引用包本身的导出：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./a-module.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { something } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a-package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 ./index.mjs 导入 &quot;something&quot;。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>只有当 <code>package.json</code> 具有 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 时，自引用才可用，并且只允许导入 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>（在 <code>package.json</code> 中）允许的内容。 因此，在给定前一个包的情况下，下面的代码会生成运行时错误：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./another-module.mjs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 ./m.mjs 导入 &quot;another&quot;。 失败，因为</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;package.json&quot; 的 &quot;exports&quot; 字段</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未提供名为 &quot;./m.mjs&quot; 的导出。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { another } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a-package/m.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在使用 <code>require</code> 时，自引用也可用，无论是在 ES 模块中还是在 CommonJS 模块中。 例如，此代码也可以工作：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./a-module.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">something</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a-package/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 ./foo.js 加载。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>最后，自引用也适用于作用域包。 例如，此代码也可以工作：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@my/package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./index.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./other.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@my/package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> other.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="dual-commonjs/es-module-packages" tabindex="-1">双 CommonJS/ES 模块包 <a class="header-anchor" href="#dual-commonjs/es-module-packages" aria-label="Permalink to “双 CommonJS/ES 模块包”">​</a></h2><p>有关详细信息，请参阅<a href="https://github.com/nodejs/package-examples" target="_blank" rel="noreferrer">包示例仓库</a>。</p><h2 id="nodejs-packagejson-field-definitions" tabindex="-1">Node.js <code>package.json</code> 字段定义 <a class="header-anchor" href="#nodejs-packagejson-field-definitions" aria-label="Permalink to “Node.js package.json 字段定义”">​</a></h2><p>本节介绍 Node.js 运行时使用的字段。 其他工具（例如 <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json" target="_blank" rel="noreferrer">npm</a>）使用 Node.js 忽略的其他字段，此处未作记录。</p><p>Node.js 中使用了 <code>package.json</code> 文件中的以下字段：</p><ul><li><a href="/zh/nodejs/api/packages#name"><code>&quot;name&quot;</code></a> - 在包中使用命名导入时相关。 也被包管理器用作包的名称。</li><li><a href="/zh/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> - 加载包时的默认模块，如果未指定 exports，以及在 Node.js 引入 exports 之前的版本中。</li><li><a href="/zh/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> - 建议在向包贡献时使用的包管理器。 由 <a href="/zh/nodejs/api/corepack">Corepack</a> 垫片利用。</li><li><a href="/zh/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> - 包类型，用于确定是将 <code>.js</code> 文件加载为 CommonJS 还是 ES 模块。</li><li><a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> - 包导出和条件导出。 存在时，限制可以从包中加载哪些子模块。</li><li><a href="/zh/nodejs/api/packages#imports"><code>&quot;imports&quot;</code></a> - 包导入，供包本身中的模块使用。</li></ul><h3 id="name" tabindex="-1"><code>&quot;name&quot;</code> <a class="header-anchor" href="#name" aria-label="Permalink to “&quot;name&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v13.6.0, v12.16.0</td><td>移除 <code>--experimental-resolve-self</code> 选项。</td></tr><tr><td>v13.1.0, v12.16.0</td><td>添加于: v13.1.0, v12.16.0</td></tr></tbody></table></div><ul><li>类型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;package-name&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&quot;name&quot;</code> 字段定义了你的包名。发布到 <em>npm</em> 仓库需要一个满足<a href="https://docs.npmjs.com/files/package.json#name" target="_blank" rel="noreferrer">特定要求</a>的名称。</p><p>除了 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段之外，<code>&quot;name&quot;</code> 字段还可以用于<a href="/zh/nodejs/api/packages#self-referencing-a-package-using-its-name">使用其名称自引用</a>一个包。</p><h3 id="main" tabindex="-1"><code>&quot;main&quot;</code> <a class="header-anchor" href="#main" aria-label="Permalink to “&quot;main&quot;”">​</a></h3><p><strong>添加于: v0.4.0</strong></p><ul><li>类型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&quot;main&quot;</code> 字段定义了通过 <code>node_modules</code> 查找按名称导入包时的入口点。 它的值是一个路径。</p><p>当一个包具有 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段时，通过名称导入包时，它将优先于 <code>&quot;main&quot;</code> 字段。</p><p>它还定义了当<a href="/zh/nodejs/api/modules#folders-as-modules">通过 <code>require()</code> 加载包目录</a>时使用的脚本。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这会解析到 ./path/to/directory/index.js。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./path/to/directory&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="packagemanager" tabindex="-1"><code>&quot;packageManager&quot;</code> <a class="header-anchor" href="#packagemanager" aria-label="Permalink to “&quot;packageManager&quot;”">​</a></h3><p><strong>添加于: v16.9.0, v14.19.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性</p></div><ul><li>类型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;packageManager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;package manager name&gt;@&lt;version&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&quot;packageManager&quot;</code> 字段定义了在当前项目上工作时期望使用的包管理器。 它可以设置为任何<a href="/zh/nodejs/api/corepack#supported-package-managers">支持的包管理器</a>，并将确保你的团队使用完全相同的包管理器版本，而无需安装 Node.js 之外的任何其他内容。</p><p>此字段目前是实验性的，需要选择启用； 有关该过程的详细信息，请查看 <a href="/zh/nodejs/api/corepack">Corepack</a> 页面。</p><h3 id="type" tabindex="-1"><code>&quot;type&quot;</code> <a class="header-anchor" href="#type" aria-label="Permalink to “&quot;type&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v13.2.0, v12.17.0</td><td>取消 <code>--experimental-modules</code> 标志。</td></tr><tr><td>v12.0.0</td><td>添加于: v12.0.0</td></tr></tbody></table></div><ul><li>类型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>&quot;type&quot;</code> 字段定义了 Node.js 用于所有 <code>.js</code> 文件的模块格式，这些文件将该 <code>package.json</code> 文件作为其最近的父级文件。</p><p>当最近的父级 <code>package.json</code> 文件包含一个值为 <code>&quot;module&quot;</code> 的顶级字段 <code>&quot;type&quot;</code> 时，以 <code>.js</code> 结尾的文件将被加载为 ES 模块。</p><p>最近的父级 <code>package.json</code> 被定义为在当前文件夹、该文件夹的父级等位置搜索时找到的第一个 <code>package.json</code>，直到到达 node_modules 文件夹或卷根。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 与前面的 package.json 在同一文件夹中 {#in-same-folder-as-preceding-packagejson}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 作为 ES 模块运行</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果最近的父级 <code>package.json</code> 缺少 <code>&quot;type&quot;</code> 字段，或者包含 <code>&quot;type&quot;: &quot;commonjs&quot;</code>，则 <code>.js</code> 文件被视为 <a href="/zh/nodejs/api/modules">CommonJS</a>。 如果到达卷根并且没有找到 <code>package.json</code>，则 <code>.js</code> 文件被视为 <a href="/zh/nodejs/api/modules">CommonJS</a>。</p><p>如果最近的父级 <code>package.json</code> 包含 <code>&quot;type&quot;: &quot;module&quot;</code>，则 <code>.js</code> 文件的 <code>import</code> 语句被视为 ES 模块。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// my-app.js，与上面的示例是同一部分</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./startup.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由于 package.json，作为 ES 模块加载</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>无论 <code>&quot;type&quot;</code> 字段的值如何，<code>.mjs</code> 文件始终被视为 ES 模块，<code>.cjs</code> 文件始终被视为 CommonJS。</p><h3 id="exports" tabindex="-1"><code>&quot;exports&quot;</code> <a class="header-anchor" href="#exports" aria-label="Permalink to “&quot;exports&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.13.0, v12.20.0</td><td>添加对 <code>&quot;exports&quot;</code> 模式的支持。</td></tr><tr><td>v13.7.0, v12.17.0</td><td>取消 conditional exports 标志。</td></tr><tr><td>v13.7.0, v12.16.0</td><td>实现逻辑 conditional exports 排序。</td></tr><tr><td>v13.7.0, v12.16.0</td><td>删除 <code>--experimental-conditional-exports</code> 选项。 在 12.16.0 中，conditional exports 仍然在 <code>--experimental-modules</code> 之后。</td></tr><tr><td>v13.2.0, v12.16.0</td><td>实现 conditional exports。</td></tr><tr><td>v12.7.0</td><td>添加于: v12.7.0</td></tr></tbody></table></div><ul><li>类型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&quot;exports&quot;</code> 字段允许定义通过名称导入的包的<a href="/zh/nodejs/api/packages#package-entry-points">入口点</a>，这些入口点通过 <code>node_modules</code> 查找或<a href="/zh/nodejs/api/packages#self-referencing-a-package-using-its-name">自引用</a>其自身名称来加载。 它在 Node.js 12+ 中作为 <a href="/zh/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> 的替代方案受到支持，可以支持定义<a href="/zh/nodejs/api/packages#subpath-exports">子路径导出</a>和<a href="/zh/nodejs/api/packages#conditional-exports">条件导出</a>，同时封装内部未导出的模块。</p><p><a href="/zh/nodejs/api/packages#conditional-exports">条件导出</a>也可以在 <code>&quot;exports&quot;</code> 中使用，以定义每个环境的不同包入口点，包括该包是通过 <code>require</code> 还是通过 <code>import</code> 引用。</p><p><code>&quot;exports&quot;</code> 中定义的所有路径必须是以 <code>./</code> 开头的相对文件 URL。</p><h3 id="imports" tabindex="-1"><code>&quot;imports&quot;</code> <a class="header-anchor" href="#imports" aria-label="Permalink to “&quot;imports&quot;”">​</a></h3><p><strong>添加于: v14.6.0, v12.19.0</strong></p><ul><li>类型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#dep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dep-polyfill.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>imports 字段中的条目必须是以 <code>#</code> 开头的字符串。</p><p>包导入允许映射到外部包。</p><p>此字段为当前包定义 <a href="/zh/nodejs/api/packages#subpath-imports">子路径导入</a>。</p>`,209)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};