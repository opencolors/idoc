import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 全局对象","description":"本页面记录了在 Node.js 中可用的全局对象，包括全局变量、函数和类，这些对象无需显式导入即可在任何模块中访问。","frontmatter":{"title":"Node.js 全局对象","description":"本页面记录了在 Node.js 中可用的全局对象，包括全局变量、函数和类，这些对象无需显式导入即可在任何模块中访问。","head":[["meta",{"name":"og:title","content":"Node.js 全局对象 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"本页面记录了在 Node.js 中可用的全局对象，包括全局变量、函数和类，这些对象无需显式导入即可在任何模块中访问。"}],["meta",{"name":"twitter:title","content":"Node.js 全局对象 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"本页面记录了在 Node.js 中可用的全局对象，包括全局变量、函数和类，这些对象无需显式导入即可在任何模块中访问。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/globals"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/globals"}]]},"headers":[],"relativePath":"zh/nodejs/api/globals.md","filePath":"zh/nodejs/api/globals.md","lastUpdated":null}`),a={name:`zh/nodejs/api/globals.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="global-objects" tabindex="-1">全局对象 <a class="header-anchor" href="#global-objects" aria-label="Permalink to “全局对象”">​</a></h1><p>这些对象在所有模块中都可用。</p><p>以下变量可能看起来是全局的，但实际上不是。它们仅存在于 <a href="/zh/nodejs/api/modules">CommonJS 模块</a> 的作用域内：</p><ul><li><a href="/zh/nodejs/api/modules#dirname"><code>__dirname</code></a></li><li><a href="/zh/nodejs/api/modules#filename"><code>__filename</code></a></li><li><a href="/zh/nodejs/api/modules#exports"><code>exports</code></a></li><li><a href="/zh/nodejs/api/modules#module"><code>module</code></a></li><li><a href="/zh/nodejs/api/modules#requireid"><code>require()</code></a></li></ul><p>这里列出的对象是 Node.js 特有的。还有一些 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noreferrer">内置对象</a> 是 JavaScript 语言本身的一部分，它们也是全局可访问的。</p><h2 id="class-abortcontroller" tabindex="-1">类: <code>AbortController</code> <a class="header-anchor" href="#class-abortcontroller" aria-label="Permalink to “类: AbortController”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.4.0</td><td>不再是实验性的。</td></tr><tr><td>v15.0.0, v14.17.0</td><td>添加于：v15.0.0, v14.17.0</td></tr></tbody></table></div><p>一个用于在选定的基于 <code>Promise</code> 的 API 中发出取消信号的实用程序类。该 API 基于 Web API <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController" target="_blank" rel="noreferrer"><code>AbortController</code></a>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ac</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbortController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac.signal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abort&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Aborted!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                           { once: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ac.signal.aborted);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="abortcontrollerabortreason" tabindex="-1"><code>abortController.abort([reason])</code> <a class="header-anchor" href="#abortcontrollerabortreason" aria-label="Permalink to “abortController.abort([reason])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v17.2.0, v16.14.0</td><td>添加了新的可选 reason 参数。</td></tr><tr><td>v15.0.0, v14.17.0</td><td>添加于：v15.0.0, v14.17.0</td></tr></tbody></table></div><ul><li><code>reason</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a> 一个可选的原因，可以在 <code>AbortSignal</code> 的 <code>reason</code> 属性上检索。</li></ul><p>触发中止信号，导致 <code>abortController.signal</code> 发出 <code>&#39;abort&#39;</code> 事件。</p><h3 id="abortcontrollersignal" tabindex="-1"><code>abortController.signal</code> <a class="header-anchor" href="#abortcontrollersignal" aria-label="Permalink to “abortController.signal”">​</a></h3><p><strong>添加于: v15.0.0, v14.17.0</strong></p><ul><li>类型: <a href="/zh/nodejs/api/globals#class-abortsignal">&lt;AbortSignal&gt;</a></li></ul><h3 id="class-abortsignal" tabindex="-1">类: <code>AbortSignal</code> <a class="header-anchor" href="#class-abortsignal" aria-label="Permalink to “类: AbortSignal”">​</a></h3><p><strong>添加于: v15.0.0, v14.17.0</strong></p><ul><li>继承自: <a href="/zh/nodejs/api/events#class-eventtarget">&lt;EventTarget&gt;</a></li></ul><p>当调用 <code>abortController.abort()</code> 方法时，<code>AbortSignal</code> 用于通知观察者。</p><h4 id="static-method-abortsignalabortreason" tabindex="-1">静态方法: <code>AbortSignal.abort([reason])</code> <a class="header-anchor" href="#static-method-abortsignalabortreason" aria-label="Permalink to “静态方法: AbortSignal.abort([reason])”">​</a></h4><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v17.2.0, v16.14.0</td><td>添加了新的可选 reason 参数。</td></tr><tr><td>v15.12.0, v14.17.0</td><td>添加于: v15.12.0, v14.17.0</td></tr></tbody></table></div><ul><li><code>reason</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a></li><li>返回值: <a href="/zh/nodejs/api/globals#class-abortsignal">&lt;AbortSignal&gt;</a></li></ul><p>返回一个已中止的 <code>AbortSignal</code>。</p><h4 id="static-method-abortsignaltimeoutdelay" tabindex="-1">静态方法: <code>AbortSignal.timeout(delay)</code> <a class="header-anchor" href="#static-method-abortsignaltimeoutdelay" aria-label="Permalink to “静态方法: AbortSignal.timeout(delay)”">​</a></h4><p><strong>添加于: v17.3.0, v16.14.0</strong></p><ul><li><code>delay</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 在触发 AbortSignal 之前等待的毫秒数。</li></ul><p>返回一个新的 <code>AbortSignal</code>，它将在 <code>delay</code> 毫秒后被中止。</p><h4 id="static-method-abortsignalanysignals" tabindex="-1">静态方法: <code>AbortSignal.any(signals)</code> <a class="header-anchor" href="#static-method-abortsignalanysignals" aria-label="Permalink to “静态方法: AbortSignal.any(signals)”">​</a></h4><p><strong>添加于: v20.3.0, v18.17.0</strong></p><ul><li><code>signals</code> <a href="/zh/nodejs/api/globals#class-abortsignal">&lt;AbortSignal[]&gt;</a> 用于组合新的 <code>AbortSignal</code> 的 <code>AbortSignal</code> 数组。</li></ul><p>返回一个新的 <code>AbortSignal</code>，如果提供的任何信号被中止，它将被中止。 它的 <a href="/zh/nodejs/api/globals#abortsignalreason"><code>abortSignal.reason</code></a> 将被设置为导致其中止的 <code>signals</code> 之一。</p><h4 id="event-abort" tabindex="-1">事件: <code>&#39;abort&#39;</code> <a class="header-anchor" href="#event-abort" aria-label="Permalink to “事件: &#39;abort&#39;”">​</a></h4><p><strong>添加于: v15.0.0, v14.17.0</strong></p><p>当调用 <code>abortController.abort()</code> 方法时，会触发 <code>&#39;abort&#39;</code> 事件。 该回调函数会被调用，带有一个对象参数，该对象参数带有一个 <code>type</code> 属性，其值为 <code>&#39;abort&#39;</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ac</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbortController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 onabort 属性...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac.signal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onabort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aborted!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者 EventTarget API...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac.signal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abort&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.type);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 &#39;abort&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, { once: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>与 <code>AbortSignal</code> 关联的 <code>AbortController</code> 仅触发一次 <code>&#39;abort&#39;</code> 事件。 我们建议代码在添加 <code>&#39;abort&#39;</code> 事件监听器之前检查 <code>abortSignal.aborted</code> 属性是否为 <code>false</code>。</p><p>附加到 <code>AbortSignal</code> 的任何事件监听器都应使用 <code>{ once: true }</code> 选项（或者，如果使用 <code>EventEmitter</code> API 附加监听器，则使用 <code>once()</code> 方法），以确保在处理 <code>&#39;abort&#39;</code> 事件后立即删除事件监听器。 如果不这样做，可能会导致内存泄漏。</p><h4 id="abortsignalaborted" tabindex="-1"><code>abortSignal.aborted</code> <a class="header-anchor" href="#abortsignalaborted" aria-label="Permalink to “abortSignal.aborted”">​</a></h4><p><strong>加入于: v15.0.0, v14.17.0</strong></p><ul><li>类型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 当 <code>AbortController</code> 被中止后为 True。</li></ul><h4 id="abortsignalonabort" tabindex="-1"><code>abortSignal.onabort</code> <a class="header-anchor" href="#abortsignalonabort" aria-label="Permalink to “abortSignal.onabort”">​</a></h4><p><strong>加入于: v15.0.0, v14.17.0</strong></p><ul><li>类型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li></ul><p>一个可选的回调函数，可以由用户代码设置，以便在 <code>abortController.abort()</code> 函数被调用时得到通知。</p><h4 id="abortsignalreason" tabindex="-1"><code>abortSignal.reason</code> <a class="header-anchor" href="#abortsignalreason" aria-label="Permalink to “abortSignal.reason”">​</a></h4><p><strong>加入于: v17.2.0, v16.14.0</strong></p><ul><li>类型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a></li></ul><p>触发 <code>AbortSignal</code> 时指定的可选原因。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ac</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbortController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;boom!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ac.signal.reason);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error: boom!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="abortsignalthrowifaborted" tabindex="-1"><code>abortSignal.throwIfAborted()</code> <a class="header-anchor" href="#abortsignalthrowifaborted" aria-label="Permalink to “abortSignal.throwIfAborted()”">​</a></h4><p><strong>加入于: v17.3.0, v16.17.0</strong></p><p>如果 <code>abortSignal.aborted</code> 为 <code>true</code>，则抛出 <code>abortSignal.reason</code>。</p><h2 id="class-blob" tabindex="-1">类: <code>Blob</code> <a class="header-anchor" href="#class-blob" aria-label="Permalink to “类: Blob”">​</a></h2><p><strong>加入于: v18.0.0</strong></p><p>请参阅 <a href="/zh/nodejs/api/buffer#class-blob">&lt;Blob&gt;</a>。</p><h2 id="class-buffer" tabindex="-1">类: <code>Buffer</code> <a class="header-anchor" href="#class-buffer" aria-label="Permalink to “类: Buffer”">​</a></h2><p><strong>加入于: v0.1.103</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li></ul><p>用于处理二进制数据。 参阅 <a href="/zh/nodejs/api/buffer">buffer 部分</a>。</p><h2 id="class-bytelengthqueuingstrategy" tabindex="-1">类: <code>ByteLengthQueuingStrategy</code> <a class="header-anchor" href="#class-bytelengthqueuingstrategy" aria-label="Permalink to “类: ByteLengthQueuingStrategy”">​</a></h2><p><strong>加入于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> - 实验性。</p></div><p>一个浏览器兼容的 <a href="/zh/nodejs/api/webstreams#class-bytelengthqueuingstrategy"><code>ByteLengthQueuingStrategy</code></a> 实现。</p><h2 id="__dirname" tabindex="-1"><code>__dirname</code> <a class="header-anchor" href="#__dirname" aria-label="Permalink to “__dirname”">​</a></h2><p>这个变量可能看起来是全局的，但实际上不是。 参阅 <a href="/zh/nodejs/api/modules#dirname"><code>__dirname</code></a>。</p><h2 id="__filename" tabindex="-1"><code>__filename</code> <a class="header-anchor" href="#__filename" aria-label="Permalink to “__filename”">​</a></h2><p>这个变量可能看起来是全局的，但实际上不是。 参阅 <a href="/zh/nodejs/api/modules#filename"><code>__filename</code></a>。</p><h2 id="atobdata" tabindex="-1"><code>atob(data)</code> <a class="header-anchor" href="#atobdata" aria-label="Permalink to “atob(data)”">​</a></h2><p><strong>加入于: v16.0.0</strong></p><div class="info custom-block"><p class="custom-block-title">[稳定度: 3 - 遗留]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 3</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 3</a> - 遗留。 请使用 <code>Buffer.from(data, &#39;base64&#39;)</code> 代替。</p></div><p><a href="/zh/nodejs/api/buffer#bufferatobdata"><code>buffer.atob()</code></a> 的全局别名。</p><h2 id="broadcastchannel" tabindex="-1"><code>BroadcastChannel</code> <a class="header-anchor" href="#broadcastchannel" aria-label="Permalink to “BroadcastChannel”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><p>请参阅 <a href="/zh/nodejs/api/worker_threads#class-broadcastchannel-extends-eventtarget">&lt;BroadcastChannel&gt;</a>。</p><h2 id="btoadata" tabindex="-1"><code>btoa(data)</code> <a class="header-anchor" href="#btoadata" aria-label="Permalink to “btoa(data)”">​</a></h2><p><strong>添加于: v16.0.0</strong></p><div class="info custom-block"><p class="custom-block-title">[稳定度: 3 - 废弃]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 3</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 3</a> - 废弃。请改用 <code>buf.toString(&#39;base64&#39;)</code>。</p></div><p><a href="/zh/nodejs/api/buffer#bufferbtoadata"><code>buffer.btoa()</code></a> 的全局别名。</p><h2 id="clearimmediateimmediateobject" tabindex="-1"><code>clearImmediate(immediateObject)</code> <a class="header-anchor" href="#clearimmediateimmediateobject" aria-label="Permalink to “clearImmediate(immediateObject)”">​</a></h2><p><strong>添加于: v0.9.1</strong></p><p><a href="/zh/nodejs/api/timers#clearimmediateimmediate"><code>clearImmediate</code></a> 在 <a href="/zh/nodejs/api/timers">timers</a> 部分中描述。</p><h2 id="clearintervalintervalobject" tabindex="-1"><code>clearInterval(intervalObject)</code> <a class="header-anchor" href="#clearintervalintervalobject" aria-label="Permalink to “clearInterval(intervalObject)”">​</a></h2><p><strong>添加于: v0.0.1</strong></p><p><a href="/zh/nodejs/api/timers#clearintervaltimeout"><code>clearInterval</code></a> 在 <a href="/zh/nodejs/api/timers">timers</a> 部分中描述。</p><h2 id="cleartimeouttimeoutobject" tabindex="-1"><code>clearTimeout(timeoutObject)</code> <a class="header-anchor" href="#cleartimeouttimeoutobject" aria-label="Permalink to “clearTimeout(timeoutObject)”">​</a></h2><p><strong>添加于: v0.0.1</strong></p><p><a href="/zh/nodejs/api/timers#cleartimeouttimeout"><code>clearTimeout</code></a> 在 <a href="/zh/nodejs/api/timers">timers</a> 部分中描述。</p><h2 id="closeevent" tabindex="-1"><code>CloseEvent</code> <a class="header-anchor" href="#closeevent" aria-label="Permalink to “CloseEvent”">​</a></h2><p><strong>添加于: v23.0.0</strong></p><p><code>CloseEvent</code> 类。有关更多详细信息，请参阅 <a href="https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/CloseEvent" target="_blank" rel="noreferrer"><code>CloseEvent</code></a>。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/CloseEvent" target="_blank" rel="noreferrer"><code>CloseEvent</code></a> 的浏览器兼容实现。使用 <a href="/zh/nodejs/api/cli#no-experimental-websocket"><code>--no-experimental-websocket</code></a> 命令行标志禁用此 API。</p><h2 id="class-compressionstream" tabindex="-1">类: <code>CompressionStream</code> <a class="header-anchor" href="#class-compressionstream" aria-label="Permalink to “类: CompressionStream”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性。</p></div><p><a href="/zh/nodejs/api/webstreams#class-compressionstream"><code>CompressionStream</code></a> 的浏览器兼容实现。</p><h2 id="console" tabindex="-1"><code>console</code> <a class="header-anchor" href="#console" aria-label="Permalink to “console”">​</a></h2><p><strong>添加于: v0.1.100</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>用于打印到 stdout 和 stderr。请参阅 <a href="/zh/nodejs/api/console"><code>console</code></a> 部分。</p><h2 id="class-countqueuingstrategy" tabindex="-1">类: <code>CountQueuingStrategy</code> <a class="header-anchor" href="#class-countqueuingstrategy" aria-label="Permalink to “类: CountQueuingStrategy”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性。</p></div><p><a href="/zh/nodejs/api/webstreams#class-countqueuingstrategy"><code>CountQueuingStrategy</code></a> 的浏览器兼容实现。</p><h2 id="crypto" tabindex="-1"><code>Crypto</code> <a class="header-anchor" href="#crypto" aria-label="Permalink to “Crypto”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>不再是实验性的。</td></tr><tr><td>v19.0.0</td><td>不再受 <code>--experimental-global-webcrypto</code> CLI 标志控制。</td></tr><tr><td>v17.6.0, v16.15.0</td><td>添加于: v17.6.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[稳定: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定。</p></div><p><a href="/zh/nodejs/api/webcrypto#class-crypto">&lt;Crypto&gt;</a> 的浏览器兼容实现。 仅当 Node.js 二进制文件在编译时包含对 <code>node:crypto</code> 模块的支持时，此全局变量才可用。</p><h2 id="crypto_1" tabindex="-1"><code>crypto</code> <a class="header-anchor" href="#crypto_1" aria-label="Permalink to “crypto”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>不再是实验性的。</td></tr><tr><td>v19.0.0</td><td>不再受 <code>--experimental-global-webcrypto</code> CLI 标志控制。</td></tr><tr><td>v17.6.0, v16.15.0</td><td>添加于: v17.6.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[稳定: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定。</p></div><p><a href="/zh/nodejs/api/webcrypto">Web Crypto API</a> 的浏览器兼容实现。</p><h2 id="cryptokey" tabindex="-1"><code>CryptoKey</code> <a class="header-anchor" href="#cryptokey" aria-label="Permalink to “CryptoKey”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>不再是实验性的。</td></tr><tr><td>v19.0.0</td><td>不再受 <code>--experimental-global-webcrypto</code> CLI 标志控制。</td></tr><tr><td>v17.6.0, v16.15.0</td><td>添加于: v17.6.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[稳定: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定。</p></div><p><a href="/zh/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> 的浏览器兼容实现。 仅当 Node.js 二进制文件在编译时包含对 <code>node:crypto</code> 模块的支持时，此全局变量才可用。</p><h2 id="customevent" tabindex="-1"><code>CustomEvent</code> <a class="header-anchor" href="#customevent" aria-label="Permalink to “CustomEvent”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>不再是实验性的。</td></tr><tr><td>v22.1.0, v20.13.0</td><td>CustomEvent 现在是稳定的。</td></tr><tr><td>v19.0.0</td><td>不再受 <code>--experimental-global-customevent</code> CLI 标志控制。</td></tr><tr><td>v18.7.0, v16.17.0</td><td>添加于: v18.7.0, v16.17.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[稳定: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定</p></div><p><a href="https://dom.spec.whatwg.org/#customevent" target="_blank" rel="noreferrer"><code>CustomEvent</code> Web API</a> 的浏览器兼容实现。</p><h2 id="class-decompressionstream" tabindex="-1">类: <code>DecompressionStream</code> <a class="header-anchor" href="#class-decompressionstream" aria-label="Permalink to “类: DecompressionStream”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性的。</p></div><p>一个浏览器兼容的 <a href="/zh/nodejs/api/webstreams#class-decompressionstream"><code>DecompressionStream</code></a> 实现。</p><h2 id="event" tabindex="-1"><code>Event</code> <a class="header-anchor" href="#event" aria-label="Permalink to “Event”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.4.0</td><td>不再是实验性的。</td></tr><tr><td>v15.0.0</td><td>添加于: v15.0.0</td></tr></tbody></table></div><p>一个浏览器兼容的 <code>Event</code> 类实现。 详情请查看 <a href="/zh/nodejs/api/events#eventtarget-and-event-api"><code>EventTarget</code> 和 <code>Event</code> API</a>。</p><h2 id="eventsource" tabindex="-1"><code>EventSource</code> <a class="header-anchor" href="#eventsource" aria-label="Permalink to “EventSource”">​</a></h2><p><strong>添加于: v22.3.0, v20.18.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性的。 使用 <a href="/zh/nodejs/api/cli#experimental-eventsource"><code>--experimental-eventsource</code></a> CLI 标志启用此 API。</p></div><p>一个浏览器兼容的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource" target="_blank" rel="noreferrer"><code>EventSource</code></a> 类实现。</p><h2 id="eventtarget" tabindex="-1"><code>EventTarget</code> <a class="header-anchor" href="#eventtarget" aria-label="Permalink to “EventTarget”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.4.0</td><td>不再是实验性的。</td></tr><tr><td>v15.0.0</td><td>添加于: v15.0.0</td></tr></tbody></table></div><p>一个浏览器兼容的 <code>EventTarget</code> 类实现。 详情请查看 <a href="/zh/nodejs/api/events#eventtarget-and-event-api"><code>EventTarget</code> 和 <code>Event</code> API</a>。</p><h2 id="exports" tabindex="-1"><code>exports</code> <a class="header-anchor" href="#exports" aria-label="Permalink to “exports”">​</a></h2><p>这个变量可能看起来是全局的，但实际上不是。 请查看 <a href="/zh/nodejs/api/modules#exports"><code>exports</code></a>。</p><h2 id="fetch" tabindex="-1"><code>fetch</code> <a class="header-anchor" href="#fetch" aria-label="Permalink to “fetch”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v21.0.0</td><td>不再是实验性的。</td></tr><tr><td>v18.0.0</td><td>不再需要 <code>--experimental-fetch</code> CLI 标志。</td></tr><tr><td>v17.5.0, v16.15.0</td><td>添加于: v17.5.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定的</p></div><p>一个浏览器兼容的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/fetch" target="_blank" rel="noreferrer"><code>fetch()</code></a> 函数实现。</p><h2 id="class-file" tabindex="-1">类: <code>File</code> <a class="header-anchor" href="#class-file" aria-label="Permalink to “类: File”">​</a></h2><p><strong>添加于: v20.0.0</strong></p><p>请查看 <a href="/zh/nodejs/api/buffer#class-file">&lt;File&gt;</a>。</p><h2 id="class-formdata" tabindex="-1">类 <code>FormData</code> <a class="header-anchor" href="#class-formdata" aria-label="Permalink to “类 FormData”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v21.0.0</td><td>不再是实验性的。</td></tr><tr><td>v18.0.0</td><td>不再需要 <code>--experimental-fetch</code> 命令行标志。</td></tr><tr><td>v17.6.0, v16.15.0</td><td>添加于：v17.6.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[稳定: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定</p></div><p>一个浏览器兼容的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData" target="_blank" rel="noreferrer">&lt;FormData&gt;</a> 实现。</p><h2 id="global" tabindex="-1"><code>global</code> <a class="header-anchor" href="#global" aria-label="Permalink to “global”">​</a></h2><p><strong>添加于: v0.1.27</strong></p><div class="info custom-block"><p class="custom-block-title">[稳定: 3 - 遗留]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 3</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 3</a> - 遗留。请使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis" target="_blank" rel="noreferrer"><code>globalThis</code></a> 代替。</p></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 全局命名空间对象。</li></ul><p>在浏览器中，顶层作用域传统上是全局作用域。 这意味着 <code>var something</code> 将定义一个新的全局变量，但在 ECMAScript 模块中除外。 在 Node.js 中，情况有所不同。 顶层作用域不是全局作用域；Node.js 模块中的 <code>var something</code> 将是该模块的局部变量，无论它是 <a href="/zh/nodejs/api/modules">CommonJS 模块</a> 还是 <a href="/zh/nodejs/api/esm">ECMAScript 模块</a>。</p><h2 id="class-headers" tabindex="-1">类 <code>Headers</code> <a class="header-anchor" href="#class-headers" aria-label="Permalink to “类 Headers”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v21.0.0</td><td>不再是实验性的。</td></tr><tr><td>v18.0.0</td><td>不再需要 <code>--experimental-fetch</code> 命令行标志。</td></tr><tr><td>v17.5.0, v16.15.0</td><td>添加于：v17.5.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[稳定: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定</p></div><p>一个浏览器兼容的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers" target="_blank" rel="noreferrer">&lt;Headers&gt;</a> 实现。</p><h2 id="localstorage" tabindex="-1"><code>localStorage</code> <a class="header-anchor" href="#localstorage" aria-label="Permalink to “localStorage”">​</a></h2><p><strong>添加于: v22.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a>.0 - 早期开发。</p></div><p>一个浏览器兼容的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer"><code>localStorage</code></a> 实现。 数据以未加密的形式存储在 <a href="/zh/nodejs/api/cli#localstorage-filefile"><code>--localstorage-file</code></a> 命令行标志指定的文件中。 可以存储的最大数据量为 10 MB。 不支持在 Web Storage API 之外修改此数据。 使用 <a href="/zh/nodejs/api/cli#experimental-webstorage"><code>--experimental-webstorage</code></a> 命令行标志启用此 API。 在服务器环境中使用时，<code>localStorage</code> 数据不是按用户或按请求存储的，而是在所有用户和请求之间共享的。</p><h2 id="messagechannel" tabindex="-1"><code>MessageChannel</code> <a class="header-anchor" href="#messagechannel" aria-label="Permalink to “MessageChannel”">​</a></h2><p><strong>Added in: v15.0.0</strong></p><p><code>MessageChannel</code> 类。 更多详情请参见 <a href="/zh/nodejs/api/worker_threads#class-messagechannel"><code>MessageChannel</code></a>。</p><h2 id="messageevent" tabindex="-1"><code>MessageEvent</code> <a class="header-anchor" href="#messageevent" aria-label="Permalink to “MessageEvent”">​</a></h2><p><strong>Added in: v15.0.0</strong></p><p><code>MessageEvent</code> 类。 更多详情请参见 <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/MessageEvent" target="_blank" rel="noreferrer"><code>MessageEvent</code></a>。</p><h2 id="messageport" tabindex="-1"><code>MessagePort</code> <a class="header-anchor" href="#messageport" aria-label="Permalink to “MessagePort”">​</a></h2><p><strong>Added in: v15.0.0</strong></p><p><code>MessagePort</code> 类。 更多详情请参见 <a href="/zh/nodejs/api/worker_threads#class-messageport"><code>MessagePort</code></a>。</p><h2 id="module" tabindex="-1"><code>module</code> <a class="header-anchor" href="#module" aria-label="Permalink to “module”">​</a></h2><p>这个变量看起来像是全局的，但实际上不是。 更多详情请参见 <a href="/zh/nodejs/api/modules#module"><code>module</code></a>。</p><h2 id="navigator" tabindex="-1"><code>Navigator</code> <a class="header-anchor" href="#navigator" aria-label="Permalink to “Navigator”">​</a></h2><p><strong>Added in: v21.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a>.1 - 活跃开发中。 使用 <a href="/zh/nodejs/api/cli#no-experimental-global-navigator"><code>--no-experimental-global-navigator</code></a> CLI 标志禁用此 API。</p></div><p><a href="https://html.spec.whatwg.org/multipage/system-state#the-navigator-object" target="_blank" rel="noreferrer">Navigator API</a> 的部分实现。</p><h2 id="navigator_1" tabindex="-1"><code>navigator</code> <a class="header-anchor" href="#navigator_1" aria-label="Permalink to “navigator”">​</a></h2><p><strong>Added in: v21.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a>.1 - 活跃开发中。 使用 <a href="/zh/nodejs/api/cli#no-experimental-global-navigator"><code>--no-experimental-global-navigator</code></a> CLI 标志禁用此 API。</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator" target="_blank" rel="noreferrer"><code>window.navigator</code></a> 的部分实现。</p><h3 id="navigatorhardwareconcurrency" tabindex="-1"><code>navigator.hardwareConcurrency</code> <a class="header-anchor" href="#navigatorhardwareconcurrency" aria-label="Permalink to “navigator.hardwareConcurrency”">​</a></h3><p><strong>Added in: v21.0.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p><code>navigator.hardwareConcurrency</code> 只读属性返回当前 Node.js 实例可用的逻辑处理器数量。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`此进程运行在 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hardwareConcurrency</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} 个逻辑处理器上\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="navigatorlanguage" tabindex="-1"><code>navigator.language</code> <a class="header-anchor" href="#navigatorlanguage" aria-label="Permalink to “navigator.language”">​</a></h3><p><strong>Added in: v21.2.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>navigator.language</code> 只读属性返回一个字符串，表示 Node.js 实例的首选语言。 该语言将由 Node.js 在运行时使用的 ICU 库根据操作系统的默认语言确定。</p><p>该值表示在 <a href="https://www.rfc-editor.org/rfc/rfc5646.txt" target="_blank" rel="noreferrer">RFC 5646</a> 中定义的语言版本。</p><p>在没有 ICU 的构建中的回退值为 <code>&#39;en-US&#39;</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Node.js 实例的首选语言具有标签 &#39;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">language</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="navigatorlanguages" tabindex="-1"><code>navigator.languages</code> <a class="header-anchor" href="#navigatorlanguages" aria-label="Permalink to “navigator.languages”">​</a></h3><p><strong>添加于: v21.2.0</strong></p><ul><li>{Array</li></ul><p><code>navigator.languages</code> 只读属性返回一个字符串数组，表示 Node.js 实例的首选语言。 默认情况下，<code>navigator.languages</code> 仅包含 <code>navigator.language</code> 的值，该值将由 Node.js 在运行时使用的 ICU 库根据操作系统的默认语言确定。</p><p>在没有 ICU 的构建上的回退值为 <code>[&#39;en-US&#39;]</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`首选语言为 &#39;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">languages</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="navigatorplatform" tabindex="-1"><code>navigator.platform</code> <a class="header-anchor" href="#navigatorplatform" aria-label="Permalink to “navigator.platform”">​</a></h3><p><strong>添加于: v21.2.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>navigator.platform</code> 只读属性返回一个字符串，用于标识 Node.js 实例正在运行的平台。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`此进程运行在 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">platform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="navigatoruseragent" tabindex="-1"><code>navigator.userAgent</code> <a class="header-anchor" href="#navigatoruseragent" aria-label="Permalink to “navigator.userAgent”">​</a></h3><p><strong>添加于: v21.1.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>navigator.userAgent</code> 只读属性返回由运行时名称和主版本号组成的用户代理。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`用户代理是 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userAgent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 &quot;Node.js/21&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="performanceentry" tabindex="-1"><code>PerformanceEntry</code> <a class="header-anchor" href="#performanceentry" aria-label="Permalink to “PerformanceEntry”">​</a></h2><p><strong>添加于: v19.0.0</strong></p><p><code>PerformanceEntry</code> 类。 更多详情请参阅 <a href="/zh/nodejs/api/perf_hooks#class-performanceentry"><code>PerformanceEntry</code></a>。</p><h2 id="performancemark" tabindex="-1"><code>PerformanceMark</code> <a class="header-anchor" href="#performancemark" aria-label="Permalink to “PerformanceMark”">​</a></h2><p><strong>添加于: v19.0.0</strong></p><p><code>PerformanceMark</code> 类。 更多详情请参阅 <a href="/zh/nodejs/api/perf_hooks#class-performancemark"><code>PerformanceMark</code></a>。</p><h2 id="performancemeasure" tabindex="-1"><code>PerformanceMeasure</code> <a class="header-anchor" href="#performancemeasure" aria-label="Permalink to “PerformanceMeasure”">​</a></h2><p><strong>添加于: v19.0.0</strong></p><p><code>PerformanceMeasure</code> 类。 更多详情请参阅 <a href="/zh/nodejs/api/perf_hooks#class-performancemeasure"><code>PerformanceMeasure</code></a>。</p><h2 id="performanceobserver" tabindex="-1"><code>PerformanceObserver</code> <a class="header-anchor" href="#performanceobserver" aria-label="Permalink to “PerformanceObserver”">​</a></h2><p><strong>添加于: v19.0.0</strong></p><p><code>PerformanceObserver</code> 类。 更多详情请参阅 <a href="/zh/nodejs/api/perf_hooks#class-performanceobserver"><code>PerformanceObserver</code></a>。</p><h2 id="performanceobserverentrylist" tabindex="-1"><code>PerformanceObserverEntryList</code> <a class="header-anchor" href="#performanceobserverentrylist" aria-label="Permalink to “PerformanceObserverEntryList”">​</a></h2><p><strong>添加于: v19.0.0</strong></p><p><code>PerformanceObserverEntryList</code> 类。 更多详情请参阅 <a href="/zh/nodejs/api/perf_hooks#class-performanceobserverentrylist"><code>PerformanceObserverEntryList</code></a>。</p><h2 id="performanceresourcetiming" tabindex="-1"><code>PerformanceResourceTiming</code> <a class="header-anchor" href="#performanceresourcetiming" aria-label="Permalink to “PerformanceResourceTiming”">​</a></h2><p><strong>添加于: v19.0.0</strong></p><p><code>PerformanceResourceTiming</code> 类。 更多详情请参阅 <a href="/zh/nodejs/api/perf_hooks#class-performanceresourcetiming"><code>PerformanceResourceTiming</code></a>。</p><h2 id="performance" tabindex="-1"><code>performance</code> <a class="header-anchor" href="#performance" aria-label="Permalink to “performance”">​</a></h2><p><strong>添加于: v16.0.0</strong></p><p><a href="/zh/nodejs/api/perf_hooks#perf-hooksperformance"><code>perf_hooks.performance</code></a> 对象。</p><h2 id="process" tabindex="-1"><code>process</code> <a class="header-anchor" href="#process" aria-label="Permalink to “process”">​</a></h2><p><strong>添加于: v0.1.7</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>进程对象。 参见 <a href="/zh/nodejs/api/process#process"><code>process</code> 对象</a> 章节。</p><h2 id="queuemicrotaskcallback" tabindex="-1"><code>queueMicrotask(callback)</code> <a class="header-anchor" href="#queuemicrotaskcallback" aria-label="Permalink to “queueMicrotask(callback)”">​</a></h2><p><strong>添加于: v11.0.0</strong></p><ul><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 要排队的函数。</li></ul><p><code>queueMicrotask()</code> 方法将一个微任务排队以调用 <code>callback</code>。 如果 <code>callback</code> 抛出异常，则将发出 <a href="/zh/nodejs/api/process#process"><code>process</code> 对象</a> 的 <code>&#39;uncaughtException&#39;</code> 事件。</p><p>微任务队列由 V8 管理，并且可以使用与由 Node.js 管理的 <a href="/zh/nodejs/api/process#processnexttickcallback-args"><code>process.nextTick()</code></a> 队列类似的方式来使用。 在 Node.js 事件循环的每一轮中，始终在微任务队列之前处理 <code>process.nextTick()</code> 队列。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在这里，\`queueMicrotask()\` 用于确保“load”事件始终</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 异步发出，因此具有一致性。 使用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里的 \`process.nextTick()\` 将导致“load”事件始终在发出</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在任何其他 promise 作业之前。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (hit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    queueMicrotask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hit);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, data);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="class-readablebytestreamcontroller" tabindex="-1">类: <code>ReadableByteStreamController</code> <a class="header-anchor" href="#class-readablebytestreamcontroller" aria-label="Permalink to “类: ReadableByteStreamController”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> - 实验性。</p></div><p><a href="/zh/nodejs/api/webstreams#class-readablebytestreamcontroller"><code>ReadableByteStreamController</code></a> 的浏览器兼容实现。</p><h2 id="class-readablestream" tabindex="-1">类: <code>ReadableStream</code> <a class="header-anchor" href="#class-readablestream" aria-label="Permalink to “类: ReadableStream”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性的。</p></div><p><a href="/zh/nodejs/api/webstreams#class-readablestream"><code>ReadableStream</code></a> 的浏览器兼容实现。</p><h2 id="class-readablestreambyobreader" tabindex="-1">类: <code>ReadableStreamBYOBReader</code> <a class="header-anchor" href="#class-readablestreambyobreader" aria-label="Permalink to “类: ReadableStreamBYOBReader”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性的。</p></div><p><a href="/zh/nodejs/api/webstreams#class-readablestreambyobreader"><code>ReadableStreamBYOBReader</code></a> 的浏览器兼容实现。</p><h2 id="class-readablestreambyobrequest" tabindex="-1">类: <code>ReadableStreamBYOBRequest</code> <a class="header-anchor" href="#class-readablestreambyobrequest" aria-label="Permalink to “类: ReadableStreamBYOBRequest”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性的。</p></div><p><a href="/zh/nodejs/api/webstreams#class-readablestreambyobrequest"><code>ReadableStreamBYOBRequest</code></a> 的浏览器兼容实现。</p><h2 id="class-readablestreamdefaultcontroller" tabindex="-1">类: <code>ReadableStreamDefaultController</code> <a class="header-anchor" href="#class-readablestreamdefaultcontroller" aria-label="Permalink to “类: ReadableStreamDefaultController”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性的。</p></div><p><a href="/zh/nodejs/api/webstreams#class-readablestreamdefaultcontroller"><code>ReadableStreamDefaultController</code></a> 的浏览器兼容实现。</p><h2 id="class-readablestreamdefaultreader" tabindex="-1">类: <code>ReadableStreamDefaultReader</code> <a class="header-anchor" href="#class-readablestreamdefaultreader" aria-label="Permalink to “类: ReadableStreamDefaultReader”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性的。</p></div><p><a href="/zh/nodejs/api/webstreams#class-readablestreamdefaultreader"><code>ReadableStreamDefaultReader</code></a> 的浏览器兼容实现。</p><h2 id="require" tabindex="-1"><code>require()</code> <a class="header-anchor" href="#require" aria-label="Permalink to “require()”">​</a></h2><p>此变量可能看起来是全局的，但实际上不是。请参阅 <a href="/zh/nodejs/api/modules#requireid"><code>require()</code></a>。</p><h2 id="response" tabindex="-1"><code>Response</code> <a class="header-anchor" href="#response" aria-label="Permalink to “Response”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v21.0.0</td><td>不再是实验性的。</td></tr><tr><td>v18.0.0</td><td>不再需要 <code>--experimental-fetch</code> 命令行标志。</td></tr><tr><td>v17.5.0, v16.15.0</td><td>添加于: v17.5.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定的</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Response" target="_blank" rel="noreferrer">&lt;Response&gt;</a> 的浏览器兼容实现。</p><h2 id="request" tabindex="-1"><code>Request</code> <a class="header-anchor" href="#request" aria-label="Permalink to “Request”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v21.0.0</td><td>不再是实验性的。</td></tr><tr><td>v18.0.0</td><td>不再需要 <code>--experimental-fetch</code> 命令行标志。</td></tr><tr><td>v17.5.0, v16.15.0</td><td>添加于: v17.5.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[稳定: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定</p></div><p>与浏览器兼容的<a href="https://developer.mozilla.org/en-US/docs/Web/API/Request" target="_blank" rel="noreferrer">&lt;Request&gt;</a>实现。</p><h2 id="sessionstorage" tabindex="-1"><code>sessionStorage</code> <a class="header-anchor" href="#sessionstorage" aria-label="Permalink to “sessionStorage”">​</a></h2><p><strong>添加于: v22.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 早期开发。</p></div><p>与浏览器兼容的<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage" target="_blank" rel="noreferrer"><code>sessionStorage</code></a>实现。 数据存储在内存中，存储配额为 10 MB。 <code>sessionStorage</code> 数据仅在当前运行的进程中持久存在，并且不在工作线程之间共享。</p><h2 id="setimmediatecallback-args" tabindex="-1"><code>setImmediate(callback[, ...args])</code> <a class="header-anchor" href="#setimmediatecallback-args" aria-label="Permalink to “setImmediate(callback[, ...args])”">​</a></h2><p><strong>添加于: v0.9.1</strong></p><p><a href="/zh/nodejs/api/timers#setimmediatecallback-args"><code>setImmediate</code></a>在<a href="/zh/nodejs/api/timers">定时器</a>章节中描述。</p><h2 id="setintervalcallback-delay-args" tabindex="-1"><code>setInterval(callback, delay[, ...args])</code> <a class="header-anchor" href="#setintervalcallback-delay-args" aria-label="Permalink to “setInterval(callback, delay[, ...args])”">​</a></h2><p><strong>添加于: v0.0.1</strong></p><p><a href="/zh/nodejs/api/timers#setintervalcallback-delay-args"><code>setInterval</code></a>在<a href="/zh/nodejs/api/timers">定时器</a>章节中描述。</p><h2 id="settimeoutcallback-delay-args" tabindex="-1"><code>setTimeout(callback, delay[, ...args])</code> <a class="header-anchor" href="#settimeoutcallback-delay-args" aria-label="Permalink to “setTimeout(callback, delay[, ...args])”">​</a></h2><p><strong>添加于: v0.0.1</strong></p><p><a href="/zh/nodejs/api/timers#settimeoutcallback-delay-args"><code>setTimeout</code></a>在<a href="/zh/nodejs/api/timers">定时器</a>章节中描述。</p><h2 id="class-storage" tabindex="-1">Class: <code>Storage</code> <a class="header-anchor" href="#class-storage" aria-label="Permalink to “Class: Storage”">​</a></h2><p><strong>添加于: v22.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 早期开发。</p></div><p>与浏览器兼容的<a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage" target="_blank" rel="noreferrer"><code>Storage</code></a>实现。 使用<a href="/zh/nodejs/api/cli#experimental-webstorage"><code>--experimental-webstorage</code></a> 命令行标志启用此 API。</p><h2 id="structuredclonevalue-options" tabindex="-1"><code>structuredClone(value[, options])</code> <a class="header-anchor" href="#structuredclonevalue-options" aria-label="Permalink to “structuredClone(value[, options])”">​</a></h2><p><strong>添加于: v17.0.0</strong></p><p>WHATWG <a href="https://developer.mozilla.org/en-US/docs/Web/API/structuredClone" target="_blank" rel="noreferrer"><code>structuredClone</code></a> 方法。</p><h2 id="subtlecrypto" tabindex="-1"><code>SubtleCrypto</code> <a class="header-anchor" href="#subtlecrypto" aria-label="Permalink to “SubtleCrypto”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v19.0.0</td><td>不再受 <code>--experimental-global-webcrypto</code> CLI 标志控制。</td></tr><tr><td>v17.6.0, v16.15.0</td><td>添加于：v17.6.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[稳定: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定。</p></div><p><a href="/zh/nodejs/api/webcrypto#class-subtlecrypto">&lt;SubtleCrypto&gt;</a> 的一个浏览器兼容实现。只有在编译 Node.js 二进制文件时包含了对 <code>node:crypto</code> 模块的支持，这个全局变量才可用。</p><h2 id="domexception" tabindex="-1"><code>DOMException</code> <a class="header-anchor" href="#domexception" aria-label="Permalink to “DOMException”">​</a></h2><p><strong>添加于: v17.0.0</strong></p><p>WHATWG <code>DOMException</code> 类。 更多详情请参阅 <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMException" target="_blank" rel="noreferrer"><code>DOMException</code></a>。</p><h2 id="textdecoder" tabindex="-1"><code>TextDecoder</code> <a class="header-anchor" href="#textdecoder" aria-label="Permalink to “TextDecoder”">​</a></h2><p><strong>添加于: v11.0.0</strong></p><p>WHATWG <code>TextDecoder</code> 类。 请参阅 <a href="/zh/nodejs/api/util#class-utiltextdecoder"><code>TextDecoder</code></a> 部分。</p><h2 id="class-textdecoderstream" tabindex="-1">类: <code>TextDecoderStream</code> <a class="header-anchor" href="#class-textdecoderstream" aria-label="Permalink to “类: TextDecoderStream”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定: 1 - 实验]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验。</p></div><p><a href="/zh/nodejs/api/webstreams#class-textdecoderstream"><code>TextDecoderStream</code></a> 的一个浏览器兼容实现。</p><h2 id="textencoder" tabindex="-1"><code>TextEncoder</code> <a class="header-anchor" href="#textencoder" aria-label="Permalink to “TextEncoder”">​</a></h2><p><strong>添加于: v11.0.0</strong></p><p>WHATWG <code>TextEncoder</code> 类。 请参阅 <a href="/zh/nodejs/api/util#class-utiltextencoder"><code>TextEncoder</code></a> 部分。</p><h2 id="class-textencoderstream" tabindex="-1">类: <code>TextEncoderStream</code> <a class="header-anchor" href="#class-textencoderstream" aria-label="Permalink to “类: TextEncoderStream”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定: 1 - 实验]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验。</p></div><p><a href="/zh/nodejs/api/webstreams#class-textencoderstream"><code>TextEncoderStream</code></a> 的一个浏览器兼容实现。</p><h2 id="class-transformstream" tabindex="-1">类: <code>TransformStream</code> <a class="header-anchor" href="#class-transformstream" aria-label="Permalink to “类: TransformStream”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定: 1 - 实验]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验。</p></div><p><a href="/zh/nodejs/api/webstreams#class-transformstream"><code>TransformStream</code></a> 的一个浏览器兼容实现。</p><h2 id="class-transformstreamdefaultcontroller" tabindex="-1">类: <code>TransformStreamDefaultController</code> <a class="header-anchor" href="#class-transformstreamdefaultcontroller" aria-label="Permalink to “类: TransformStreamDefaultController”">​</a></h2><p><strong>添加于: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定: 1 - 实验]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验。</p></div><p><a href="/zh/nodejs/api/webstreams#class-transformstreamdefaultcontroller"><code>TransformStreamDefaultController</code></a> 的一个浏览器兼容实现。</p><h2 id="url" tabindex="-1"><code>URL</code> <a class="header-anchor" href="#url" aria-label="Permalink to “URL”">​</a></h2><p><strong>Added in: v10.0.0</strong></p><p>WHATWG <code>URL</code> 类。 请参见 <a href="/zh/nodejs/api/url#class-url"><code>URL</code></a> 部分。</p><h2 id="urlsearchparams" tabindex="-1"><code>URLSearchParams</code> <a class="header-anchor" href="#urlsearchparams" aria-label="Permalink to “URLSearchParams”">​</a></h2><p><strong>Added in: v10.0.0</strong></p><p>WHATWG <code>URLSearchParams</code> 类。 请参见 <a href="/zh/nodejs/api/url#class-urlsearchparams"><code>URLSearchParams</code></a> 部分。</p><h2 id="webassembly" tabindex="-1"><code>WebAssembly</code> <a class="header-anchor" href="#webassembly" aria-label="Permalink to “WebAssembly”">​</a></h2><p><strong>Added in: v8.0.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>该对象充当所有 W3C <a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> 相关功能的命名空间。 有关用法和兼容性，请参见 <a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noreferrer">Mozilla 开发者网络</a>。</p><h2 id="websocket" tabindex="-1"><code>WebSocket</code> <a class="header-anchor" href="#websocket" aria-label="Permalink to “WebSocket”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v22.4.0</td><td>不再是实验性的。</td></tr><tr><td>v22.0.0</td><td>不再位于 <code>--experimental-websocket</code> 命令行标志之后。</td></tr><tr><td>v21.0.0, v20.10.0</td><td>Added in: v21.0.0, v20.10.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[稳定: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定。</p></div><p>与浏览器兼容的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" target="_blank" rel="noreferrer"><code>WebSocket</code></a> 实现。 使用 <a href="/zh/nodejs/api/cli#no-experimental-websocket"><code>--no-experimental-websocket</code></a> 命令行标志禁用此 API。</p><h2 id="class-writablestream" tabindex="-1">类: <code>WritableStream</code> <a class="header-anchor" href="#class-writablestream" aria-label="Permalink to “类: WritableStream”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定: 1 - 实验]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验。</p></div><p>与浏览器兼容的 <a href="/zh/nodejs/api/webstreams#class-writablestream"><code>WritableStream</code></a> 实现。</p><h2 id="class-writablestreamdefaultcontroller" tabindex="-1">类: <code>WritableStreamDefaultController</code> <a class="header-anchor" href="#class-writablestreamdefaultcontroller" aria-label="Permalink to “类: WritableStreamDefaultController”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定: 1 - 实验]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验。</p></div><p>与浏览器兼容的 <a href="/zh/nodejs/api/webstreams#class-writablestreamdefaultcontroller"><code>WritableStreamDefaultController</code></a> 实现。</p><h2 id="class-writablestreamdefaultwriter" tabindex="-1">类: <code>WritableStreamDefaultWriter</code> <a class="header-anchor" href="#class-writablestreamdefaultwriter" aria-label="Permalink to “类: WritableStreamDefaultWriter”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定: 1 - 实验]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验。</p></div><p>与浏览器兼容的 <a href="/zh/nodejs/api/webstreams#class-writablestreamdefaultwriter"><code>WritableStreamDefaultWriter</code></a> 实现。</p>`,347)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};