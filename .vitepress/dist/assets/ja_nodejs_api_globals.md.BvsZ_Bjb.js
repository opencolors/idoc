import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.jsのグローバルオブジェクト","description":"このページでは、Node.jsで利用可能なグローバルオブジェクトについて記載しています。モジュールから明示的なインポートを必要とせずにアクセス可能なグローバル変数、関数、クラスを含みます。","frontmatter":{"title":"Node.jsのグローバルオブジェクト","description":"このページでは、Node.jsで利用可能なグローバルオブジェクトについて記載しています。モジュールから明示的なインポートを必要とせずにアクセス可能なグローバル変数、関数、クラスを含みます。","head":[["meta",{"name":"og:title","content":"Node.jsのグローバルオブジェクト | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"このページでは、Node.jsで利用可能なグローバルオブジェクトについて記載しています。モジュールから明示的なインポートを必要とせずにアクセス可能なグローバル変数、関数、クラスを含みます。"}],["meta",{"name":"twitter:title","content":"Node.jsのグローバルオブジェクト | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"このページでは、Node.jsで利用可能なグローバルオブジェクトについて記載しています。モジュールから明示的なインポートを必要とせずにアクセス可能なグローバル変数、関数、クラスを含みます。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/globals"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/globals"}]]},"headers":[],"relativePath":"ja/nodejs/api/globals.md","filePath":"ja/nodejs/api/globals.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/api/globals.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="global-objects" tabindex="-1">グローバルオブジェクト <a class="header-anchor" href="#global-objects" aria-label="Permalink to “グローバルオブジェクト”">​</a></h1><p>これらのオブジェクトは、すべてのモジュールで使用できます。</p><p>次の変数はグローバルに見えるかもしれませんが、そうではありません。これらは、<a href="/ja/nodejs/api/modules">CommonJS モジュール</a>のスコープ内でのみ存在します。</p><ul><li><a href="/ja/nodejs/api/modules#dirname"><code>__dirname</code></a></li><li><a href="/ja/nodejs/api/modules#filename"><code>__filename</code></a></li><li><a href="/ja/nodejs/api/modules#exports"><code>exports</code></a></li><li><a href="/ja/nodejs/api/modules#module"><code>module</code></a></li><li><a href="/ja/nodejs/api/modules#requireid"><code>require()</code></a></li></ul><p>ここにリストされているオブジェクトは、Node.js に固有のものです。JavaScript 言語自体の一部である <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noreferrer">組み込みオブジェクト</a>もあり、これらもグローバルにアクセス可能です。</p><h2 id="class-abortcontroller" tabindex="-1">Class: <code>AbortController</code> <a class="header-anchor" href="#class-abortcontroller" aria-label="Permalink to “Class: AbortController”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v15.4.0</td><td>実験的ではなくなりました。</td></tr><tr><td>v15.0.0, v14.17.0</td><td>追加: v15.0.0, v14.17.0</td></tr></tbody></table></div><p>選択された <code>Promise</code> ベースの API でキャンセルを通知するために使用されるユーティリティクラス。API は、Web API の <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController" target="_blank" rel="noreferrer"><code>AbortController</code></a> に基づいています。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ac</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbortController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac.signal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abort&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Aborted!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                           { once: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ac.signal.aborted);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true を出力</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="abortcontrollerabortreason" tabindex="-1"><code>abortController.abort([reason])</code> <a class="header-anchor" href="#abortcontrollerabortreason" aria-label="Permalink to “abortController.abort([reason])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v17.2.0, v16.14.0</td><td>新しいオプションの reason 引数を追加しました。</td></tr><tr><td>v15.0.0, v14.17.0</td><td>追加: v15.0.0, v14.17.0</td></tr></tbody></table></div><ul><li><code>reason</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a> オプションの理由で、<code>AbortSignal</code> の <code>reason</code> プロパティで取得できます。</li></ul><p>abort シグナルをトリガーし、<code>abortController.signal</code> が <code>&#39;abort&#39;</code> イベントを発行するようにします。</p><h3 id="abortcontrollersignal" tabindex="-1"><code>abortController.signal</code> <a class="header-anchor" href="#abortcontrollersignal" aria-label="Permalink to “abortController.signal”">​</a></h3><p><strong>追加: v15.0.0, v14.17.0</strong></p><ul><li>タイプ: <a href="/ja/nodejs/api/globals#class-abortsignal">&lt;AbortSignal&gt;</a></li></ul><h3 id="class-abortsignal" tabindex="-1">Class: <code>AbortSignal</code> <a class="header-anchor" href="#class-abortsignal" aria-label="Permalink to “Class: AbortSignal”">​</a></h3><p><strong>追加: v15.0.0, v14.17.0</strong></p><ul><li>拡張: <a href="/ja/nodejs/api/events#class-eventtarget">&lt;EventTarget&gt;</a></li></ul><p><code>AbortSignal</code> は、<code>abortController.abort()</code> メソッドが呼び出されたときにオブザーバーに通知するために使用されます。</p><h4 id="static-method-abortsignalabortreason" tabindex="-1">静的メソッド: <code>AbortSignal.abort([reason])</code> <a class="header-anchor" href="#static-method-abortsignalabortreason" aria-label="Permalink to “静的メソッド: AbortSignal.abort([reason])”">​</a></h4><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v17.2.0, v16.14.0</td><td>新しいオプションの reason 引数が追加されました。</td></tr><tr><td>v15.12.0, v14.17.0</td><td>追加: v15.12.0, v14.17.0</td></tr></tbody></table></div><ul><li><code>reason</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a></li><li>戻り値: <a href="/ja/nodejs/api/globals#class-abortsignal">&lt;AbortSignal&gt;</a></li></ul><p>すでに中断された新しい <code>AbortSignal</code> を返します。</p><h4 id="static-method-abortsignaltimeoutdelay" tabindex="-1">静的メソッド: <code>AbortSignal.timeout(delay)</code> <a class="header-anchor" href="#static-method-abortsignaltimeoutdelay" aria-label="Permalink to “静的メソッド: AbortSignal.timeout(delay)”">​</a></h4><p><strong>追加: v17.3.0, v16.14.0</strong></p><ul><li><code>delay</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> AbortSignal をトリガーするまで待機するミリ秒数。</li></ul><p><code>delay</code> ミリ秒後に中断される新しい <code>AbortSignal</code> を返します。</p><h4 id="static-method-abortsignalanysignals" tabindex="-1">静的メソッド: <code>AbortSignal.any(signals)</code> <a class="header-anchor" href="#static-method-abortsignalanysignals" aria-label="Permalink to “静的メソッド: AbortSignal.any(signals)”">​</a></h4><p><strong>追加: v20.3.0, v18.17.0</strong></p><ul><li><code>signals</code> <a href="/ja/nodejs/api/globals#class-abortsignal">&lt;AbortSignal[]&gt;</a> 新しい <code>AbortSignal</code> を構成する <code>AbortSignal</code>。</li></ul><p>指定されたシグナルのいずれかが中断された場合に中断される新しい <code>AbortSignal</code> を返します。 その <a href="/ja/nodejs/api/globals#abortsignalreason"><code>abortSignal.reason</code></a> は、中断の原因となった <code>signals</code> のいずれかに設定されます。</p><h4 id="event-abort" tabindex="-1">イベント: <code>&#39;abort&#39;</code> <a class="header-anchor" href="#event-abort" aria-label="Permalink to “イベント: &#39;abort&#39;”">​</a></h4><p><strong>追加: v15.0.0, v14.17.0</strong></p><p><code>&#39;abort&#39;</code> イベントは、<code>abortController.abort()</code> メソッドが呼び出されたときに発生します。 コールバックは、<code>type</code> プロパティが <code>&#39;abort&#39;</code> に設定された単一のオブジェクト引数で呼び出されます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ac</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbortController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// onabort プロパティを使用...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac.signal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onabort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aborted!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// または EventTarget API を使用...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac.signal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abort&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.type);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;abort&#39; を出力</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, { once: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>AbortSignal</code> が関連付けられている <code>AbortController</code> は、<code>&#39;abort&#39;</code> イベントを 1 回だけトリガーします。 コードは、<code>&#39;abort&#39;</code> イベントリスナーを追加する前に、<code>abortSignal.aborted</code> 属性が <code>false</code> であることを確認することをお勧めします。</p><p><code>AbortSignal</code> にアタッチされたイベントリスナーは、<code>{ once: true }</code> オプションを使用するか（または、<code>EventEmitter</code> API を使用してリスナーをアタッチする場合は、<code>once()</code> メソッドを使用します）、<code>&#39;abort&#39;</code> イベントが処理されるとすぐにイベントリスナーが削除されるようにする必要があります。 そうしないと、メモリリークが発生する可能性があります。</p><h4 id="abortsignalaborted" tabindex="-1"><code>abortSignal.aborted</code> <a class="header-anchor" href="#abortsignalaborted" aria-label="Permalink to “abortSignal.aborted”">​</a></h4><p><strong>Added in: v15.0.0, v14.17.0</strong></p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>AbortController</code> が中止された後、真になります。</li></ul><h4 id="abortsignalonabort" tabindex="-1"><code>abortSignal.onabort</code> <a class="header-anchor" href="#abortsignalonabort" aria-label="Permalink to “abortSignal.onabort”">​</a></h4><p><strong>Added in: v15.0.0, v14.17.0</strong></p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li></ul><p><code>abortController.abort()</code> 関数が呼び出されたときに通知されるように、ユーザーコードによって設定できるオプションのコールバック関数です。</p><h4 id="abortsignalreason" tabindex="-1"><code>abortSignal.reason</code> <a class="header-anchor" href="#abortsignalreason" aria-label="Permalink to “abortSignal.reason”">​</a></h4><p><strong>Added in: v17.2.0, v16.14.0</strong></p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a></li></ul><p><code>AbortSignal</code> がトリガーされたときに指定されたオプションの理由です。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ac</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbortController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ac.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;boom!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ac.signal.reason);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error: boom!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="abortsignalthrowifaborted" tabindex="-1"><code>abortSignal.throwIfAborted()</code> <a class="header-anchor" href="#abortsignalthrowifaborted" aria-label="Permalink to “abortSignal.throwIfAborted()”">​</a></h4><p><strong>Added in: v17.3.0, v16.17.0</strong></p><p><code>abortSignal.aborted</code> が <code>true</code> の場合、<code>abortSignal.reason</code> をスローします。</p><h2 id="class-blob" tabindex="-1">Class: <code>Blob</code> <a class="header-anchor" href="#class-blob" aria-label="Permalink to “Class: Blob”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><p><a href="/ja/nodejs/api/buffer#class-blob">&lt;Blob&gt;</a> を参照してください。</p><h2 id="class-buffer" tabindex="-1">Class: <code>Buffer</code> <a class="header-anchor" href="#class-buffer" aria-label="Permalink to “Class: Buffer”">​</a></h2><p><strong>Added in: v0.1.103</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li></ul><p>バイナリデータを扱うために使用されます。<a href="/ja/nodejs/api/buffer">buffer section</a> を参照してください。</p><h2 id="class-bytelengthqueuingstrategy" tabindex="-1">Class: <code>ByteLengthQueuingStrategy</code> <a class="header-anchor" href="#class-bytelengthqueuingstrategy" aria-label="Permalink to “Class: ByteLengthQueuingStrategy”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 実験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-bytelengthqueuingstrategy"><code>ByteLengthQueuingStrategy</code></a> のブラウザ互換実装。</p><h2 id="__dirname" tabindex="-1"><code>__dirname</code> <a class="header-anchor" href="#__dirname" aria-label="Permalink to “__dirname”">​</a></h2><p>この変数はグローバルのように見えるかもしれませんが、そうではありません。<a href="/ja/nodejs/api/modules#dirname"><code>__dirname</code></a> を参照してください。</p><h2 id="__filename" tabindex="-1"><code>__filename</code> <a class="header-anchor" href="#__filename" aria-label="Permalink to “__filename”">​</a></h2><p>この変数はグローバルのように見えるかもしれませんが、そうではありません。<a href="/ja/nodejs/api/modules#filename"><code>__filename</code></a> を参照してください。</p><h2 id="atobdata" tabindex="-1"><code>atob(data)</code> <a class="header-anchor" href="#atobdata" aria-label="Permalink to “atob(data)”">​</a></h2><p><strong>Added in: v16.0.0</strong></p><div class="info custom-block"><p class="custom-block-title">[Stable: 3 - Legacy]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 3</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 3</a> - レガシー。代わりに <code>Buffer.from(data, &#39;base64&#39;)</code> を使用してください。</p></div><p><a href="/ja/nodejs/api/buffer#bufferatobdata"><code>buffer.atob()</code></a> のグローバルエイリアス。</p><h2 id="broadcastchannel" tabindex="-1"><code>BroadcastChannel</code> <a class="header-anchor" href="#broadcastchannel" aria-label="Permalink to “BroadcastChannel”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><p><a href="/ja/nodejs/api/worker_threads#class-broadcastchannel-extends-eventtarget">&lt;BroadcastChannel&gt;</a> を参照してください。</p><h2 id="btoadata" tabindex="-1"><code>btoa(data)</code> <a class="header-anchor" href="#btoadata" aria-label="Permalink to “btoa(data)”">​</a></h2><p><strong>Added in: v16.0.0</strong></p><div class="info custom-block"><p class="custom-block-title">[Stable: 3 - Legacy]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 3</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 3</a> - レガシー。代わりに <code>buf.toString(&#39;base64&#39;)</code> を使用してください。</p></div><p><a href="/ja/nodejs/api/buffer#bufferbtoadata"><code>buffer.btoa()</code></a> のグローバルエイリアス。</p><h2 id="clearimmediateimmediateobject" tabindex="-1"><code>clearImmediate(immediateObject)</code> <a class="header-anchor" href="#clearimmediateimmediateobject" aria-label="Permalink to “clearImmediate(immediateObject)”">​</a></h2><p><strong>Added in: v0.9.1</strong></p><p><a href="/ja/nodejs/api/timers#clearimmediateimmediate"><code>clearImmediate</code></a> は <a href="/ja/nodejs/api/timers">timers</a> セクションで説明されています。</p><h2 id="clearintervalintervalobject" tabindex="-1"><code>clearInterval(intervalObject)</code> <a class="header-anchor" href="#clearintervalintervalobject" aria-label="Permalink to “clearInterval(intervalObject)”">​</a></h2><p><strong>Added in: v0.0.1</strong></p><p><a href="/ja/nodejs/api/timers#clearintervaltimeout"><code>clearInterval</code></a> は <a href="/ja/nodejs/api/timers">timers</a> セクションで説明されています。</p><h2 id="cleartimeouttimeoutobject" tabindex="-1"><code>clearTimeout(timeoutObject)</code> <a class="header-anchor" href="#cleartimeouttimeoutobject" aria-label="Permalink to “clearTimeout(timeoutObject)”">​</a></h2><p><strong>Added in: v0.0.1</strong></p><p><a href="/ja/nodejs/api/timers#cleartimeouttimeout"><code>clearTimeout</code></a> は <a href="/ja/nodejs/api/timers">timers</a> セクションで説明されています。</p><h2 id="closeevent" tabindex="-1"><code>CloseEvent</code> <a class="header-anchor" href="#closeevent" aria-label="Permalink to “CloseEvent”">​</a></h2><p><strong>Added in: v23.0.0</strong></p><p><code>CloseEvent</code> クラス。詳細については、<a href="https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/CloseEvent" target="_blank" rel="noreferrer"><code>CloseEvent</code></a> を参照してください。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/CloseEvent" target="_blank" rel="noreferrer"><code>CloseEvent</code></a> のブラウザ互換実装。<a href="/ja/nodejs/api/cli#no-experimental-websocket"><code>--no-experimental-websocket</code></a> CLI フラグでこの API を無効にします。</p><h2 id="class-compressionstream" tabindex="-1">Class: <code>CompressionStream</code> <a class="header-anchor" href="#class-compressionstream" aria-label="Permalink to “Class: CompressionStream”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-compressionstream"><code>CompressionStream</code></a> のブラウザ互換実装。</p><h2 id="console" tabindex="-1"><code>console</code> <a class="header-anchor" href="#console" aria-label="Permalink to “console”">​</a></h2><p><strong>Added in: v0.1.100</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>stdout および stderr に出力するために使用されます。<a href="/ja/nodejs/api/console"><code>console</code></a> セクションを参照してください。</p><h2 id="class-countqueuingstrategy" tabindex="-1">Class: <code>CountQueuingStrategy</code> <a class="header-anchor" href="#class-countqueuingstrategy" aria-label="Permalink to “Class: CountQueuingStrategy”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-countqueuingstrategy"><code>CountQueuingStrategy</code></a> のブラウザ互換実装。</p><h2 id="crypto" tabindex="-1"><code>Crypto</code> <a class="header-anchor" href="#crypto" aria-label="Permalink to “Crypto”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>実験的ではなくなりました。</td></tr><tr><td>v19.0.0</td><td><code>--experimental-global-webcrypto</code> CLI フラグの背後になくなりました。</td></tr><tr><td>v17.6.0, v16.15.0</td><td>追加: v17.6.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定。</p></div><p><a href="/ja/nodejs/api/webcrypto#class-crypto">&lt;Crypto&gt;</a>のブラウザ互換実装。このグローバル変数は、Node.jsバイナリが<code>node:crypto</code>モジュールのサポートを含めてコンパイルされた場合にのみ利用可能です。</p><h2 id="crypto_1" tabindex="-1"><code>crypto</code> <a class="header-anchor" href="#crypto_1" aria-label="Permalink to “crypto”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>実験的ではなくなりました。</td></tr><tr><td>v19.0.0</td><td><code>--experimental-global-webcrypto</code> CLI フラグの背後になくなりました。</td></tr><tr><td>v17.6.0, v16.15.0</td><td>追加: v17.6.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定。</p></div><p><a href="/ja/nodejs/api/webcrypto">Web Crypto API</a>のブラウザ互換実装。</p><h2 id="cryptokey" tabindex="-1"><code>CryptoKey</code> <a class="header-anchor" href="#cryptokey" aria-label="Permalink to “CryptoKey”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>実験的ではなくなりました。</td></tr><tr><td>v19.0.0</td><td><code>--experimental-global-webcrypto</code> CLI フラグの背後になくなりました。</td></tr><tr><td>v17.6.0, v16.15.0</td><td>追加: v17.6.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定。</p></div><p><a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a>のブラウザ互換実装。このグローバル変数は、Node.jsバイナリが<code>node:crypto</code>モジュールのサポートを含めてコンパイルされた場合にのみ利用可能です。</p><h2 id="customevent" tabindex="-1"><code>CustomEvent</code> <a class="header-anchor" href="#customevent" aria-label="Permalink to “CustomEvent”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>実験的ではなくなりました。</td></tr><tr><td>v22.1.0, v20.13.0</td><td>CustomEvent は安定版になりました。</td></tr><tr><td>v19.0.0</td><td><code>--experimental-global-customevent</code> CLI フラグの背後になくなりました。</td></tr><tr><td>v18.7.0, v16.17.0</td><td>追加: v18.7.0, v16.17.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定</p></div><p><a href="https://dom.spec.whatwg.org/#customevent" target="_blank" rel="noreferrer"><code>CustomEvent</code> Web API</a>のブラウザ互換実装。</p><h2 id="class-decompressionstream" tabindex="-1">Class: <code>DecompressionStream</code> <a class="header-anchor" href="#class-decompressionstream" aria-label="Permalink to “Class: DecompressionStream”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - Experimental.</p></div><p><a href="/ja/nodejs/api/webstreams#class-decompressionstream"><code>DecompressionStream</code></a> のブラウザ互換実装。</p><h2 id="event" tabindex="-1"><code>Event</code> <a class="header-anchor" href="#event" aria-label="Permalink to “Event”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v15.4.0</td><td>Experimentalではなくなりました。</td></tr><tr><td>v15.0.0</td><td>Added in: v15.0.0</td></tr></tbody></table></div><p><code>Event</code> クラスのブラウザ互換実装。詳細は <a href="/ja/nodejs/api/events#eventtarget-and-event-api"><code>EventTarget</code> および <code>Event</code> API</a> を参照してください。</p><h2 id="eventsource" tabindex="-1"><code>EventSource</code> <a class="header-anchor" href="#eventsource" aria-label="Permalink to “EventSource”">​</a></h2><p><strong>Added in: v22.3.0, v20.18.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - Experimental. このAPIを有効にするには、<a href="/ja/nodejs/api/cli#experimental-eventsource"><code>--experimental-eventsource</code></a> CLIフラグを使用してください。</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource" target="_blank" rel="noreferrer"><code>EventSource</code></a> クラスのブラウザ互換実装。</p><h2 id="eventtarget" tabindex="-1"><code>EventTarget</code> <a class="header-anchor" href="#eventtarget" aria-label="Permalink to “EventTarget”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v15.4.0</td><td>Experimentalではなくなりました。</td></tr><tr><td>v15.0.0</td><td>Added in: v15.0.0</td></tr></tbody></table></div><p><code>EventTarget</code> クラスのブラウザ互換実装。詳細は <a href="/ja/nodejs/api/events#eventtarget-and-event-api"><code>EventTarget</code> および <code>Event</code> API</a> を参照してください。</p><h2 id="exports" tabindex="-1"><code>exports</code> <a class="header-anchor" href="#exports" aria-label="Permalink to “exports”">​</a></h2><p>この変数はグローバルに見えるかもしれませんが、そうではありません。<a href="/ja/nodejs/api/modules#exports"><code>exports</code></a> を参照してください。</p><h2 id="fetch" tabindex="-1"><code>fetch</code> <a class="header-anchor" href="#fetch" aria-label="Permalink to “fetch”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v21.0.0</td><td>Experimentalではなくなりました。</td></tr><tr><td>v18.0.0</td><td><code>--experimental-fetch</code> CLIフラグの背後に隠されなくなりました。</td></tr><tr><td>v17.5.0, v16.15.0</td><td>Added in: v17.5.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 2</a> - Stable</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/fetch" target="_blank" rel="noreferrer"><code>fetch()</code></a> 関数のブラウザ互換実装。</p><h2 id="class-file" tabindex="-1">Class: <code>File</code> <a class="header-anchor" href="#class-file" aria-label="Permalink to “Class: File”">​</a></h2><p><strong>Added in: v20.0.0</strong></p><p><a href="/ja/nodejs/api/buffer#class-file">&lt;File&gt;</a> を参照してください。</p><h2 id="class-formdata" tabindex="-1">Class <code>FormData</code> <a class="header-anchor" href="#class-formdata" aria-label="Permalink to “Class FormData”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v21.0.0</td><td>実験的ではなくなりました。</td></tr><tr><td>v18.0.0</td><td><code>--experimental-fetch</code> CLI フラグの背後になくなりました。</td></tr><tr><td>v17.6.0, v16.15.0</td><td>追加: v17.6.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData" target="_blank" rel="noreferrer">&lt;FormData&gt;</a> のブラウザ互換実装。</p><h2 id="global" tabindex="-1"><code>global</code> <a class="header-anchor" href="#global" aria-label="Permalink to “global”">​</a></h2><p><strong>追加: v0.1.27</strong></p><div class="info custom-block"><p class="custom-block-title">[安定版: 3 - レガシー]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 3</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 3</a> - レガシー。代わりに <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis" target="_blank" rel="noreferrer"><code>globalThis</code></a> を使用してください。</p></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> グローバル名前空間オブジェクト。</li></ul><p>ブラウザでは、トップレベルのスコープは伝統的にグローバルスコープでした。これは、ECMAScript モジュール内を除き、<code>var something</code> が新しいグローバル変数を定義することを意味します。Node.js では、これは異なります。トップレベルのスコープはグローバルスコープではありません。Node.js モジュール内の <code>var something</code> は、それが <a href="/ja/nodejs/api/modules">CommonJS モジュール</a> であるか <a href="/ja/nodejs/api/esm">ECMAScript モジュール</a> であるかに関わらず、そのモジュールに対してローカルになります。</p><h2 id="class-headers" tabindex="-1">Class <code>Headers</code> <a class="header-anchor" href="#class-headers" aria-label="Permalink to “Class Headers”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v21.0.0</td><td>実験的ではなくなりました。</td></tr><tr><td>v18.0.0</td><td><code>--experimental-fetch</code> CLI フラグの背後になくなりました。</td></tr><tr><td>v17.5.0, v16.15.0</td><td>追加: v17.5.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers" target="_blank" rel="noreferrer">&lt;Headers&gt;</a> のブラウザ互換実装。</p><h2 id="localstorage" tabindex="-1"><code>localStorage</code> <a class="header-anchor" href="#localstorage" aria-label="Permalink to “localStorage”">​</a></h2><p><strong>追加: v22.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 早期開発。</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer"><code>localStorage</code></a> のブラウザ互換実装。データは、<a href="/ja/nodejs/api/cli#localstorage-filefile"><code>--localstorage-file</code></a> CLI フラグで指定されたファイルに暗号化されずに保存されます。保存できるデータの最大量は 10 MB です。Web Storage API 以外でのこのデータの変更はサポートされていません。<a href="/ja/nodejs/api/cli#experimental-webstorage"><code>--experimental-webstorage</code></a> CLI フラグを使用してこの API を有効にします。サーバーのコンテキストで使用する場合、<code>localStorage</code> データはユーザーごとまたはリクエストごとに保存されず、すべてのユーザーとリクエストで共有されます。</p><h2 id="messagechannel" tabindex="-1"><code>MessageChannel</code> <a class="header-anchor" href="#messagechannel" aria-label="Permalink to “MessageChannel”">​</a></h2><p><strong>Added in: v15.0.0</strong></p><p><code>MessageChannel</code> クラス。詳細については、<a href="/ja/nodejs/api/worker_threads#class-messagechannel"><code>MessageChannel</code></a> を参照してください。</p><h2 id="messageevent" tabindex="-1"><code>MessageEvent</code> <a class="header-anchor" href="#messageevent" aria-label="Permalink to “MessageEvent”">​</a></h2><p><strong>Added in: v15.0.0</strong></p><p><code>MessageEvent</code> クラス。詳細については、<a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/MessageEvent" target="_blank" rel="noreferrer"><code>MessageEvent</code></a> を参照してください。</p><h2 id="messageport" tabindex="-1"><code>MessagePort</code> <a class="header-anchor" href="#messageport" aria-label="Permalink to “MessagePort”">​</a></h2><p><strong>Added in: v15.0.0</strong></p><p><code>MessagePort</code> クラス。詳細については、<a href="/ja/nodejs/api/worker_threads#class-messageport"><code>MessagePort</code></a> を参照してください。</p><h2 id="module" tabindex="-1"><code>module</code> <a class="header-anchor" href="#module" aria-label="Permalink to “module”">​</a></h2><p>この変数はグローバルに見えるかもしれませんが、そうではありません。<a href="/ja/nodejs/api/modules#module"><code>module</code></a> を参照してください。</p><h2 id="navigator" tabindex="-1"><code>Navigator</code> <a class="header-anchor" href="#navigator" aria-label="Permalink to “Navigator”">​</a></h2><p><strong>Added in: v21.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a>.1 - 活発な開発。この API を無効にするには、<a href="/ja/nodejs/api/cli#no-experimental-global-navigator"><code>--no-experimental-global-navigator</code></a> CLI フラグを使用します。</p></div><p><a href="https://html.spec.whatwg.org/multipage/system-state#the-navigator-object" target="_blank" rel="noreferrer">Navigator API</a> の部分的な実装。</p><h2 id="navigator_1" tabindex="-1"><code>navigator</code> <a class="header-anchor" href="#navigator_1" aria-label="Permalink to “navigator”">​</a></h2><p><strong>Added in: v21.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a>.1 - 活発な開発。この API を無効にするには、<a href="/ja/nodejs/api/cli#no-experimental-global-navigator"><code>--no-experimental-global-navigator</code></a> CLI フラグを使用します。</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator" target="_blank" rel="noreferrer"><code>window.navigator</code></a> の部分的な実装。</p><h3 id="navigatorhardwareconcurrency" tabindex="-1"><code>navigator.hardwareConcurrency</code> <a class="header-anchor" href="#navigatorhardwareconcurrency" aria-label="Permalink to “navigator.hardwareConcurrency”">​</a></h3><p><strong>Added in: v21.0.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p><code>navigator.hardwareConcurrency</code> 読み取り専用プロパティは、現在の Node.js インスタンスで使用可能な論理プロセッサの数を返します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`このプロセスは \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hardwareConcurrency</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} 個の論理プロセッサで実行されています\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="navigatorlanguage" tabindex="-1"><code>navigator.language</code> <a class="header-anchor" href="#navigatorlanguage" aria-label="Permalink to “navigator.language”">​</a></h3><p><strong>Added in: v21.2.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>navigator.language</code> 読み取り専用プロパティは、Node.js インスタンスの優先言語を表す文字列を返します。言語は、実行時に Node.js が使用する ICU ライブラリによって、オペレーティングシステムのデフォルト言語に基づいて決定されます。</p><p>この値は、<a href="https://www.rfc-editor.org/rfc/rfc5646.txt" target="_blank" rel="noreferrer">RFC 5646</a> で定義されている言語バージョンを表しています。</p><p>ICU なしのビルドのフォールバック値は <code>&#39;en-US&#39;</code> です。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Node.js インスタンスの優先言語にはタグ &#39;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">language</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39; があります\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="navigatorlanguages" tabindex="-1"><code>navigator.languages</code> <a class="header-anchor" href="#navigatorlanguages" aria-label="Permalink to “navigator.languages”">​</a></h3><p><strong>Added in: v21.2.0</strong></p><ul><li>{Array</li></ul><p><code>navigator.languages</code>の読み取り専用プロパティは、Node.jsインスタンスの優先言語を表す文字列の配列を返します。デフォルトでは、<code>navigator.languages</code>は<code>navigator.language</code>の値のみを含み、これはNode.jsが実行時に使用するICUライブラリによって、オペレーティングシステムのデフォルト言語に基づいて決定されます。</p><p>ICUなしでビルドする場合のフォールバック値は<code>[&#39;en-US&#39;]</code>です。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`優先言語は &#39;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">languages</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="navigatorplatform" tabindex="-1"><code>navigator.platform</code> <a class="header-anchor" href="#navigatorplatform" aria-label="Permalink to “navigator.platform”">​</a></h3><p><strong>Added in: v21.2.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>navigator.platform</code>の読み取り専用プロパティは、Node.jsインスタンスが実行されているプラットフォームを識別する文字列を返します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`このプロセスは \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">platform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} 上で実行されています\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="navigatoruseragent" tabindex="-1"><code>navigator.userAgent</code> <a class="header-anchor" href="#navigatoruseragent" aria-label="Permalink to “navigator.userAgent”">​</a></h3><p><strong>Added in: v21.1.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>navigator.userAgent</code>の読み取り専用プロパティは、ランタイム名とメジャーバージョン番号で構成されるユーザーエージェントを返します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`ユーザーエージェントは \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userAgent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} です\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;Node.js/21&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="performanceentry" tabindex="-1"><code>PerformanceEntry</code> <a class="header-anchor" href="#performanceentry" aria-label="Permalink to “PerformanceEntry”">​</a></h2><p><strong>Added in: v19.0.0</strong></p><p><code>PerformanceEntry</code> クラス。詳細は <a href="/ja/nodejs/api/perf_hooks#class-performanceentry"><code>PerformanceEntry</code></a> を参照してください。</p><h2 id="performancemark" tabindex="-1"><code>PerformanceMark</code> <a class="header-anchor" href="#performancemark" aria-label="Permalink to “PerformanceMark”">​</a></h2><p><strong>Added in: v19.0.0</strong></p><p><code>PerformanceMark</code> クラス。詳細は <a href="/ja/nodejs/api/perf_hooks#class-performancemark"><code>PerformanceMark</code></a> を参照してください。</p><h2 id="performancemeasure" tabindex="-1"><code>PerformanceMeasure</code> <a class="header-anchor" href="#performancemeasure" aria-label="Permalink to “PerformanceMeasure”">​</a></h2><p><strong>Added in: v19.0.0</strong></p><p><code>PerformanceMeasure</code> クラス。詳細は <a href="/ja/nodejs/api/perf_hooks#class-performancemeasure"><code>PerformanceMeasure</code></a> を参照してください。</p><h2 id="performanceobserver" tabindex="-1"><code>PerformanceObserver</code> <a class="header-anchor" href="#performanceobserver" aria-label="Permalink to “PerformanceObserver”">​</a></h2><p><strong>Added in: v19.0.0</strong></p><p><code>PerformanceObserver</code> クラス。詳細は <a href="/ja/nodejs/api/perf_hooks#class-performanceobserver"><code>PerformanceObserver</code></a> を参照してください。</p><h2 id="performanceobserverentrylist" tabindex="-1"><code>PerformanceObserverEntryList</code> <a class="header-anchor" href="#performanceobserverentrylist" aria-label="Permalink to “PerformanceObserverEntryList”">​</a></h2><p><strong>Added in: v19.0.0</strong></p><p><code>PerformanceObserverEntryList</code> クラス。詳細は <a href="/ja/nodejs/api/perf_hooks#class-performanceobserverentrylist"><code>PerformanceObserverEntryList</code></a> を参照してください。</p><h2 id="performanceresourcetiming" tabindex="-1"><code>PerformanceResourceTiming</code> <a class="header-anchor" href="#performanceresourcetiming" aria-label="Permalink to “PerformanceResourceTiming”">​</a></h2><p><strong>Added in: v19.0.0</strong></p><p><code>PerformanceResourceTiming</code> クラス。詳細は<a href="/ja/nodejs/api/perf_hooks#class-performanceresourcetiming"><code>PerformanceResourceTiming</code></a>を参照してください。</p><h2 id="performance" tabindex="-1"><code>performance</code> <a class="header-anchor" href="#performance" aria-label="Permalink to “performance”">​</a></h2><p><strong>Added in: v16.0.0</strong></p><p><a href="/ja/nodejs/api/perf_hooks#perf-hooksperformance"><code>perf_hooks.performance</code></a> オブジェクト。</p><h2 id="process" tabindex="-1"><code>process</code> <a class="header-anchor" href="#process" aria-label="Permalink to “process”">​</a></h2><p><strong>Added in: v0.1.7</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>process オブジェクト。<a href="/ja/nodejs/api/process#process"><code>process</code> オブジェクト</a>のセクションを参照してください。</p><h2 id="queuemicrotaskcallback" tabindex="-1"><code>queueMicrotask(callback)</code> <a class="header-anchor" href="#queuemicrotaskcallback" aria-label="Permalink to “queueMicrotask(callback)”">​</a></h2><p><strong>Added in: v11.0.0</strong></p><ul><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> キューに入れる関数。</li></ul><p><code>queueMicrotask()</code> メソッドは、<code>callback</code> を呼び出すマイクロタスクをキューに入れます。<code>callback</code> が例外をスローすると、<a href="/ja/nodejs/api/process#process"><code>process</code> オブジェクト</a> の <code>&#39;uncaughtException&#39;</code> イベントが発生します。</p><p>マイクロタスクキューは V8 によって管理され、Node.js によって管理される <a href="/ja/nodejs/api/process#processnexttickcallback-args"><code>process.nextTick()</code></a> キューと同様の方法で使用できます。<code>process.nextTick()</code> キューは、Node.js イベントループの各ターンにおいて、常にマイクロタスクキューの前に処理されます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ここでは、\`queueMicrotask()\` を使用して、&#39;load&#39; イベントが常に</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 非同期で、したがって一貫して発行されるようにしています。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ここで \`process.nextTick()\` を使用すると、&#39;load&#39; イベントが常に</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 他のすべての Promise ジョブの前に発行されることになります。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (hit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    queueMicrotask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hit);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, data);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="class-readablebytestreamcontroller" tabindex="-1">Class: <code>ReadableByteStreamController</code> <a class="header-anchor" href="#class-readablebytestreamcontroller" aria-label="Permalink to “Class: ReadableByteStreamController”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 試験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-readablebytestreamcontroller"><code>ReadableByteStreamController</code></a> のブラウザ互換実装。</p><h2 id="class-readablestream" tabindex="-1">クラス: <code>ReadableStream</code> <a class="header-anchor" href="#class-readablestream" aria-label="Permalink to “クラス: ReadableStream”">​</a></h2><p><strong>追加: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> - 試験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-readablestream"><code>ReadableStream</code></a> のブラウザ互換実装。</p><h2 id="class-readablestreambyobreader" tabindex="-1">クラス: <code>ReadableStreamBYOBReader</code> <a class="header-anchor" href="#class-readablestreambyobreader" aria-label="Permalink to “クラス: ReadableStreamBYOBReader”">​</a></h2><p><strong>追加: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> - 試験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-readablestreambyobreader"><code>ReadableStreamBYOBReader</code></a> のブラウザ互換実装。</p><h2 id="class-readablestreambyobrequest" tabindex="-1">クラス: <code>ReadableStreamBYOBRequest</code> <a class="header-anchor" href="#class-readablestreambyobrequest" aria-label="Permalink to “クラス: ReadableStreamBYOBRequest”">​</a></h2><p><strong>追加: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> - 試験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-readablestreambyobrequest"><code>ReadableStreamBYOBRequest</code></a> のブラウザ互換実装。</p><h2 id="class-readablestreamdefaultcontroller" tabindex="-1">クラス: <code>ReadableStreamDefaultController</code> <a class="header-anchor" href="#class-readablestreamdefaultcontroller" aria-label="Permalink to “クラス: ReadableStreamDefaultController”">​</a></h2><p><strong>追加: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> - 試験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-readablestreamdefaultcontroller"><code>ReadableStreamDefaultController</code></a> のブラウザ互換実装。</p><h2 id="class-readablestreamdefaultreader" tabindex="-1">クラス: <code>ReadableStreamDefaultReader</code> <a class="header-anchor" href="#class-readablestreamdefaultreader" aria-label="Permalink to “クラス: ReadableStreamDefaultReader”">​</a></h2><p><strong>追加: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> - 試験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-readablestreamdefaultreader"><code>ReadableStreamDefaultReader</code></a> のブラウザ互換実装。</p><h2 id="require" tabindex="-1"><code>require()</code> <a class="header-anchor" href="#require" aria-label="Permalink to “require()”">​</a></h2><p>この変数はグローバルに見えるかもしれませんが、そうではありません。<a href="/ja/nodejs/api/modules#requireid"><code>require()</code></a> を参照してください。</p><h2 id="response" tabindex="-1"><code>Response</code> <a class="header-anchor" href="#response" aria-label="Permalink to “Response”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v21.0.0</td><td>試験的ではなくなりました。</td></tr><tr><td>v18.0.0</td><td><code>--experimental-fetch</code> CLIフラグの背後に隠れなくなりました。</td></tr><tr><td>v17.5.0, v16.15.0</td><td>追加: v17.5.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> - 安定</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Response" target="_blank" rel="noreferrer">&lt;Response&gt;</a> のブラウザ互換実装。</p><h2 id="request" tabindex="-1"><code>Request</code> <a class="header-anchor" href="#request" aria-label="Permalink to “Request”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[沿革]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v21.0.0</td><td>実験的ではなくなりました。</td></tr><tr><td>v18.0.0</td><td><code>--experimental-fetch</code> CLI フラグの背後に隠されなくなりました。</td></tr><tr><td>v17.5.0, v16.15.0</td><td>追加: v17.5.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 2</a> - 安定</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Request" target="_blank" rel="noreferrer">&lt;Request&gt;</a> のブラウザ互換実装。</p><h2 id="sessionstorage" tabindex="-1"><code>sessionStorage</code> <a class="header-anchor" href="#sessionstorage" aria-label="Permalink to “sessionStorage”">​</a></h2><p><strong>追加: v22.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a>.0 - 早期開発。</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage" target="_blank" rel="noreferrer"><code>sessionStorage</code></a> のブラウザ互換実装。データはメモリに保存され、ストレージクォータは 10 MB です。<code>sessionStorage</code> データは、現在実行中のプロセス内でのみ保持され、ワーカー間で共有されません。</p><h2 id="setimmediatecallback-args" tabindex="-1"><code>setImmediate(callback[, ...args])</code> <a class="header-anchor" href="#setimmediatecallback-args" aria-label="Permalink to “setImmediate(callback[, ...args])”">​</a></h2><p><strong>追加: v0.9.1</strong></p><p><a href="/ja/nodejs/api/timers#setimmediatecallback-args"><code>setImmediate</code></a> は <a href="/ja/nodejs/api/timers">timers</a> セクションで説明されています。</p><h2 id="setintervalcallback-delay-args" tabindex="-1"><code>setInterval(callback, delay[, ...args])</code> <a class="header-anchor" href="#setintervalcallback-delay-args" aria-label="Permalink to “setInterval(callback, delay[, ...args])”">​</a></h2><p><strong>追加: v0.0.1</strong></p><p><a href="/ja/nodejs/api/timers#setintervalcallback-delay-args"><code>setInterval</code></a> は <a href="/ja/nodejs/api/timers">timers</a> セクションで説明されています。</p><h2 id="settimeoutcallback-delay-args" tabindex="-1"><code>setTimeout(callback, delay[, ...args])</code> <a class="header-anchor" href="#settimeoutcallback-delay-args" aria-label="Permalink to “setTimeout(callback, delay[, ...args])”">​</a></h2><p><strong>追加: v0.0.1</strong></p><p><a href="/ja/nodejs/api/timers#settimeoutcallback-delay-args"><code>setTimeout</code></a> は <a href="/ja/nodejs/api/timers">timers</a> セクションで説明されています。</p><h2 id="class-storage" tabindex="-1">Class: <code>Storage</code> <a class="header-anchor" href="#class-storage" aria-label="Permalink to “Class: Storage”">​</a></h2><p><strong>追加: v22.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a>.0 - 早期開発。</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage" target="_blank" rel="noreferrer"><code>Storage</code></a> のブラウザ互換実装。この API を有効にするには、<a href="/ja/nodejs/api/cli#experimental-webstorage"><code>--experimental-webstorage</code></a> CLI フラグを使用します。</p><h2 id="structuredclonevalue-options" tabindex="-1"><code>structuredClone(value[, options])</code> <a class="header-anchor" href="#structuredclonevalue-options" aria-label="Permalink to “structuredClone(value[, options])”">​</a></h2><p><strong>追加: v17.0.0</strong></p><p>WHATWG <a href="https://developer.mozilla.org/en-US/docs/Web/API/structuredClone" target="_blank" rel="noreferrer"><code>structuredClone</code></a> メソッド。</p><h2 id="subtlecrypto" tabindex="-1"><code>SubtleCrypto</code> <a class="header-anchor" href="#subtlecrypto" aria-label="Permalink to “SubtleCrypto”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v19.0.0</td><td><code>--experimental-global-webcrypto</code> CLI フラグの背後に隠されていなくなりました。</td></tr><tr><td>v17.6.0, v16.15.0</td><td>追加: v17.6.0, v16.15.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定。</p></div><p><a href="/ja/nodejs/api/webcrypto#class-subtlecrypto">&lt;SubtleCrypto&gt;</a> のブラウザ互換実装です。このグローバル変数は、Node.js バイナリが <code>node:crypto</code> モジュールのサポートを含めてコンパイルされている場合にのみ使用可能です。</p><h2 id="domexception" tabindex="-1"><code>DOMException</code> <a class="header-anchor" href="#domexception" aria-label="Permalink to “DOMException”">​</a></h2><p><strong>追加: v17.0.0</strong></p><p>WHATWG <code>DOMException</code> クラス。詳細は <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMException" target="_blank" rel="noreferrer"><code>DOMException</code></a> を参照してください。</p><h2 id="textdecoder" tabindex="-1"><code>TextDecoder</code> <a class="header-anchor" href="#textdecoder" aria-label="Permalink to “TextDecoder”">​</a></h2><p><strong>追加: v11.0.0</strong></p><p>WHATWG <code>TextDecoder</code> クラス。<a href="/ja/nodejs/api/util#class-utiltextdecoder"><code>TextDecoder</code></a> セクションを参照してください。</p><h2 id="class-textdecoderstream" tabindex="-1">クラス: <code>TextDecoderStream</code> <a class="header-anchor" href="#class-textdecoderstream" aria-label="Permalink to “クラス: TextDecoderStream”">​</a></h2><p><strong>追加: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 試験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-textdecoderstream"><code>TextDecoderStream</code></a> のブラウザ互換実装です。</p><h2 id="textencoder" tabindex="-1"><code>TextEncoder</code> <a class="header-anchor" href="#textencoder" aria-label="Permalink to “TextEncoder”">​</a></h2><p><strong>追加: v11.0.0</strong></p><p>WHATWG <code>TextEncoder</code> クラス。<a href="/ja/nodejs/api/util#class-utiltextencoder"><code>TextEncoder</code></a> セクションを参照してください。</p><h2 id="class-textencoderstream" tabindex="-1">クラス: <code>TextEncoderStream</code> <a class="header-anchor" href="#class-textencoderstream" aria-label="Permalink to “クラス: TextEncoderStream”">​</a></h2><p><strong>追加: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 試験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-textencoderstream"><code>TextEncoderStream</code></a> のブラウザ互換実装です。</p><h2 id="class-transformstream" tabindex="-1">クラス: <code>TransformStream</code> <a class="header-anchor" href="#class-transformstream" aria-label="Permalink to “クラス: TransformStream”">​</a></h2><p><strong>追加: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 試験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-transformstream"><code>TransformStream</code></a> のブラウザ互換実装です。</p><h2 id="class-transformstreamdefaultcontroller" tabindex="-1">クラス: <code>TransformStreamDefaultController</code> <a class="header-anchor" href="#class-transformstreamdefaultcontroller" aria-label="Permalink to “クラス: TransformStreamDefaultController”">​</a></h2><p><strong>追加: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 試験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-transformstreamdefaultcontroller"><code>TransformStreamDefaultController</code></a> のブラウザ互換実装です。</p><h2 id="url" tabindex="-1"><code>URL</code> <a class="header-anchor" href="#url" aria-label="Permalink to “URL”">​</a></h2><p><strong>Added in: v10.0.0</strong></p><p>WHATWG の <code>URL</code> クラスです。<a href="/ja/nodejs/api/url#class-url"><code>URL</code></a> セクションを参照してください。</p><h2 id="urlsearchparams" tabindex="-1"><code>URLSearchParams</code> <a class="header-anchor" href="#urlsearchparams" aria-label="Permalink to “URLSearchParams”">​</a></h2><p><strong>Added in: v10.0.0</strong></p><p>WHATWG の <code>URLSearchParams</code> クラスです。<a href="/ja/nodejs/api/url#class-urlsearchparams"><code>URLSearchParams</code></a> セクションを参照してください。</p><h2 id="webassembly" tabindex="-1"><code>WebAssembly</code> <a class="header-anchor" href="#webassembly" aria-label="Permalink to “WebAssembly”">​</a></h2><p><strong>Added in: v8.0.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>すべての W3C <a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> 関連機能の名前空間として機能するオブジェクト。使用方法と互換性については、<a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noreferrer">Mozilla Developer Network</a> を参照してください。</p><h2 id="websocket" tabindex="-1"><code>WebSocket</code> <a class="header-anchor" href="#websocket" aria-label="Permalink to “WebSocket”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v22.4.0</td><td>実験的ではなくなりました。</td></tr><tr><td>v22.0.0</td><td><code>--experimental-websocket</code> CLI フラグの背後になくなりました。</td></tr><tr><td>v21.0.0, v20.10.0</td><td>Added in: v21.0.0, v20.10.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 2</a> - 安定。</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" target="_blank" rel="noreferrer"><code>WebSocket</code></a> のブラウザ互換実装。<a href="/ja/nodejs/api/cli#no-experimental-websocket"><code>--no-experimental-websocket</code></a> CLI フラグを使用して、この API を無効にします。</p><h2 id="class-writablestream" tabindex="-1">Class: <code>WritableStream</code> <a class="header-anchor" href="#class-writablestream" aria-label="Permalink to “Class: WritableStream”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 実験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-writablestream"><code>WritableStream</code></a> のブラウザ互換実装。</p><h2 id="class-writablestreamdefaultcontroller" tabindex="-1">Class: <code>WritableStreamDefaultController</code> <a class="header-anchor" href="#class-writablestreamdefaultcontroller" aria-label="Permalink to “Class: WritableStreamDefaultController”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 実験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-writablestreamdefaultcontroller"><code>WritableStreamDefaultController</code></a> のブラウザ互換実装。</p><h2 id="class-writablestreamdefaultwriter" tabindex="-1">Class: <code>WritableStreamDefaultWriter</code> <a class="header-anchor" href="#class-writablestreamdefaultwriter" aria-label="Permalink to “Class: WritableStreamDefaultWriter”">​</a></h2><p><strong>Added in: v18.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 実験的。</p></div><p><a href="/ja/nodejs/api/webstreams#class-writablestreamdefaultwriter"><code>WritableStreamDefaultWriter</code></a> のブラウザ互換実装。</p>`,347)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};