import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js デバッグ","description":"Node.js デバッグ オプション、--inspect、--inspect-brk、--debug を含むリモート デバッグ シナリオとレガシ デバッガーの情報。","frontmatter":{"title":"Node.js デバッグ","description":"Node.js デバッグ オプション、--inspect、--inspect-brk、--debug を含むリモート デバッグ シナリオとレガシ デバッガーの情報。","head":[["meta",{"name":"og:title","content":"Node.js デバッグ | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js デバッグ オプション、--inspect、--inspect-brk、--debug を含むリモート デバッグ シナリオとレガシ デバッガーの情報。"}],["meta",{"name":"twitter:title","content":"Node.js デバッグ | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js デバッグ オプション、--inspect、--inspect-brk、--debug を含むリモート デバッグ シナリオとレガシ デバッガーの情報。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/guide/debugging-nodejs"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/guide/debugging-nodejs"}]]},"headers":[],"relativePath":"ja/nodejs/guide/debugging-nodejs.md","filePath":"ja/nodejs/guide/debugging-nodejs.md","lastUpdated":null}`),a={name:`ja/nodejs/guide/debugging-nodejs.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-のデバッグ" tabindex="-1">Node.js のデバッグ <a class="header-anchor" href="#node-js-のデバッグ" aria-label="Permalink to “Node.js のデバッグ”">​</a></h1><p>このガイドは、Node.js アプリケーションとスクリプトのデバッグを開始するのに役立ちます。</p><h2 id="インスペクターの有効化" tabindex="-1">インスペクターの有効化 <a class="header-anchor" href="#インスペクターの有効化" aria-label="Permalink to “インスペクターの有効化”">​</a></h2><p><code>--inspect</code> スイッチを付けて起動すると、Node.js プロセスはデバッグクライアントをリッスンします。 デフォルトでは、ホストとポート <code>127.0.0.1:9229</code> でリッスンします。 各プロセスには、一意の UUID も割り当てられます。</p><p>インスペクタークライアントは、接続するためにホストアドレス、ポート、UUID を知って指定する必要があります。 完全な URL は、<code>ws://127.0.0.1:9229/0f2c936f-b1cd-4ac9-aab3-f63b0f33d55e</code> のようになります。</p><p>Node.js は、<code>SIGUSR1</code> シグナルを受信した場合も、デバッグメッセージのリッスンを開始します (Windows では <code>SIGUSR1</code> は利用できません)。 Node.js 7 以前では、これによりレガシーデバッガー API がアクティブになります。 Node.js 8 以降では、インスペクター API がアクティブになります。</p><h2 id="セキュリティへの影響" tabindex="-1">セキュリティへの影響 <a class="header-anchor" href="#セキュリティへの影響" aria-label="Permalink to “セキュリティへの影響”">​</a></h2><p>デバッガーは Node.js の実行環境にフルアクセスできるため、このポートに接続できる悪意のある人物は、Node.js プロセスの代わりに任意のコードを実行できる可能性があります。 パブリックネットワークおよびプライベートネットワークでデバッガーポートを公開することのセキュリティへの影響を理解することが重要です。</p><h3 id="デバッグポートを公開することは安全ではありません" tabindex="-1">デバッグポートを公開することは安全ではありません <a class="header-anchor" href="#デバッグポートを公開することは安全ではありません" aria-label="Permalink to “デバッグポートを公開することは安全ではありません”">​</a></h3><p>デバッガーがパブリック IP アドレスまたは 0.0.0.0 にバインドされている場合、IP アドレスに到達できるすべてのクライアントは、制限なしにデバッガーに接続でき、任意のコードを実行できます。</p><p>デフォルトでは、<code>node --inspect</code> は 127.0.0.1 にバインドされます。 デバッガーへの外部接続を許可する場合は、パブリック IP アドレスまたは 0.0.0.0 などを明示的に指定する必要があります。 これを行うと、潜在的に重大なセキュリティ上の脅威にさらされる可能性があります。 セキュリティ上の露出を防ぐために、適切なファイアウォールとアクセス制御が整備されていることを確認することをお勧めします。</p><p>リモートデバッガークライアントの安全な接続を許可する方法については、 &#39;<a href="/ja/nodejs/guide/debugging-nodejs#enabling-remote-debugging-scenarios">リモートデバッグシナリオの有効化</a>&#39; のセクションを参照してください。</p><h3 id="ローカルアプリケーションはインスペクターへのフルアクセス権を持っています" tabindex="-1">ローカルアプリケーションはインスペクターへのフルアクセス権を持っています <a class="header-anchor" href="#ローカルアプリケーションはインスペクターへのフルアクセス権を持っています" aria-label="Permalink to “ローカルアプリケーションはインスペクターへのフルアクセス権を持っています”">​</a></h3><p>インスペクターポートを 127.0.0.1 (デフォルト) にバインドした場合でも、マシン上でローカルに実行されているすべてのアプリケーションは無制限にアクセスできます。 これは、ローカルデバッガーが簡単にアタッチできるようにするための設計によるものです。</p><h3 id="ブラウザ、websocket、同一生成元ポリシー" tabindex="-1">ブラウザ、WebSocket、同一生成元ポリシー <a class="header-anchor" href="#ブラウザ、websocket、同一生成元ポリシー" aria-label="Permalink to “ブラウザ、WebSocket、同一生成元ポリシー”">​</a></h3><p>Webブラウザで開かれたウェブサイトは、ブラウザのセキュリティモデルに基づいてWebSocketおよびHTTPリクエストを行うことができます。一意のデバッガセッションIDを取得するには、最初のHTTP接続が必要です。同一生成元ポリシーにより、ウェブサイトはこのHTTP接続を行うことができません。<a href="https://en.wikipedia.org/wiki/DNS_rebinding" target="_blank" rel="noreferrer">DNSリバインディング攻撃</a>に対する追加のセキュリティとして、Node.jsは接続の「Host」ヘッダーがIPアドレスまたは<code>localhost</code>を正確に指定していることを検証します。</p><p>これらのセキュリティポリシーにより、ホスト名を指定してリモートデバッグサーバーに接続することは許可されません。IPアドレスを指定するか、以下に示すようにSSHトンネルを使用することで、この制限を回避できます。</p><h2 id="インスペクタークライアント" tabindex="-1">インスペクタークライアント <a class="header-anchor" href="#インスペクタークライアント" aria-label="Permalink to “インスペクタークライアント”">​</a></h2><p>最小限のCLIデバッガは、<code>node inspect myscript.js</code>で使用できます。いくつかの商用およびオープンソースツールも、Node.jsインスペクターに接続できます。</p><h3 id="chrome-devtools-55-、microsoft-edge" tabindex="-1">Chrome DevTools 55+、Microsoft Edge <a class="header-anchor" href="#chrome-devtools-55-、microsoft-edge" aria-label="Permalink to “Chrome DevTools 55+、Microsoft Edge”">​</a></h3><ul><li><strong>オプション1</strong>: Chromiumベースのブラウザで<code>chrome://inspect</code>を開くか、Edgeで<code>edge://inspect</code>を開きます。「Configure」ボタンをクリックし、ターゲットのホストとポートがリストされていることを確認します。</li><li><strong>オプション2</strong>: <code>/json/list</code>の出力（上記参照）または<code>--inspect</code>のヒントテキストから<code>devtoolsFrontendUrl</code>をコピーしてChromeに貼り付けます。</li></ul><p>詳細については、<a href="https://github.com/ChromeDevTools/devtools-frontend" target="_blank" rel="noreferrer">https://github.com/ChromeDevTools/devtools-frontend</a>、<a href="https://www.microsoftedgeinsider.com" target="_blank" rel="noreferrer">https://www.microsoftedgeinsider.com</a>を参照してください。</p><h3 id="visual-studio-code-1-10" tabindex="-1">Visual Studio Code 1.10+ <a class="header-anchor" href="#visual-studio-code-1-10" aria-label="Permalink to “Visual Studio Code 1.10+”">​</a></h3><ul><li>デバッグパネルで、設定アイコンをクリックして<code>.vscode/launch.json</code>を開きます。初期設定として「Node.js」を選択します。</li></ul><p>詳細については、<a href="https://github.com/microsoft/vscode" target="_blank" rel="noreferrer">https://github.com/microsoft/vscode</a>を参照してください。</p><h3 id="jetbrains-webstormおよびその他のjetbrains-ide" tabindex="-1">JetBrains WebStormおよびその他のJetBrains IDE <a class="header-anchor" href="#jetbrains-webstormおよびその他のjetbrains-ide" aria-label="Permalink to “JetBrains WebStormおよびその他のJetBrains IDE”">​</a></h3><ul><li>新しいNode.jsデバッグ構成を作成し、「Debug」をクリックします。Node.js 7+では、<code>--inspect</code>がデフォルトで使用されます。無効にするには、IDEレジストリで<code>js.debugger.node.use.inspect</code>のチェックを外してください。WebStormおよびその他のJetBrains IDEでのNode.jsの実行とデバッグの詳細については、<a href="https://www.jetbrains.com/help/webstorm/running-and-debugging-node-js.html" target="_blank" rel="noreferrer">WebStormオンラインヘルプ</a>を参照してください。</li></ul><h3 id="chrome-remote-interface" tabindex="-1">chrome-remote-interface <a class="header-anchor" href="#chrome-remote-interface" aria-label="Permalink to “chrome-remote-interface”">​</a></h3><ul><li><a href="https://chromedevtools.github.io/debugger-protocol-viewer/v8/" target="_blank" rel="noreferrer">Inspector Protocol</a> エンドポイントへの接続を容易にするライブラリ。 詳細については、<a href="https://github.com/cyrus-and/chrome-remote-interface" target="_blank" rel="noreferrer">https://github.com/cyrus-and/chrome-remote-interface</a> を参照してください。</li></ul><h3 id="gitpod" tabindex="-1">Gitpod <a class="header-anchor" href="#gitpod" aria-label="Permalink to “Gitpod”">​</a></h3><ul><li><code>Debug</code> ビューから Node.js デバッグ構成を開始するか、<code>F5</code> キーを押します。詳しい手順は以下を参照してください。</li></ul><p>詳細については、<a href="https://www.gitpod.io" target="_blank" rel="noreferrer">https://www.gitpod.io</a> を参照してください。</p><h3 id="eclipse-ide-with-eclipse-wild-web-developer-extension" tabindex="-1">Eclipse IDE with Eclipse Wild Web Developer extension <a class="header-anchor" href="#eclipse-ide-with-eclipse-wild-web-developer-extension" aria-label="Permalink to “Eclipse IDE with Eclipse Wild Web Developer extension”">​</a></h3><ul><li><code>.js</code> ファイルから <code>Debug As... &gt; Node program</code> を選択するか、実行中の Node.js アプリケーションにデバッガーをアタッチするためのデバッグ構成を作成します（すでに <code>--inspect</code> で開始されている必要があります）。</li></ul><p>詳細については、<a href="https://eclipse.org/eclipseide" target="_blank" rel="noreferrer">https://eclipse.org/eclipseide</a> を参照してください。</p><h2 id="コマンドラインオプション" tabindex="-1">コマンドラインオプション <a class="header-anchor" href="#コマンドラインオプション" aria-label="Permalink to “コマンドラインオプション”">​</a></h2><p>次の表は、さまざまなランタイムフラグがデバッグに与える影響を示しています。</p><table tabindex="0"><thead><tr><th>フラグ</th><th>意味</th></tr></thead><tbody><tr><td><code>--inspect</code></td><td>Node.js Inspector を使用したデバッグを有効にします。デフォルトのアドレスとポート (127.0.0.1:9229) でリッスンします。</td></tr><tr><td><code>--inspect-brk</code></td><td>Node.js Inspector を使用したデバッグを有効にします。デフォルトのアドレスとポート (127.0.0.1:9229) でリッスンします。ユーザーコードが開始する前に中断します。</td></tr><tr><td><code>--inspect=[host:port]</code></td><td>Inspector エージェントを有効にします。アドレスまたはホスト名 host にバインドします (デフォルト: 127.0.0.1)。ポート port でリッスンします (デフォルト: 9229)。</td></tr><tr><td><code>--inspect-brk=[host:port]</code></td><td>Inspector エージェントを有効にします。アドレスまたはホスト名 host にバインドします (デフォルト: 127.0.0.1)。ポート port でリッスンします (デフォルト: 9229)。ユーザーコードが開始する前に中断します。</td></tr><tr><td><code>--inspect-wait</code></td><td>Inspector エージェントを有効にします。デフォルトのアドレスとポート (127.0.0.1:9229) でリッスンします。デバッガーがアタッチされるのを待ちます。</td></tr><tr><td><code>--inspect-wait=[host:port]</code></td><td>Inspector エージェントを有効にします。アドレスまたはホスト名 host にバインドします (デフォルト: 127.0.0.1)。ポート port でリッスンします (デフォルト: 9229)。デバッガーがアタッチされるのを待ちます。</td></tr><tr><td><code>node inspect script.js</code></td><td>子プロセスを生成して、ユーザーのスクリプトを --inspect フラグで実行します。メインプロセスを使用して CLI デバッガーを実行します。</td></tr><tr><td><code>node inspect --port=xxxx script.js</code></td><td>子プロセスを生成して、ユーザーのスクリプトを --inspect フラグで実行します。メインプロセスを使用して CLI デバッガーを実行します。ポート port でリッスンします (デフォルト: 9229)。</td></tr></tbody></table><h2 id="リモートデバッグシナリオの有効化" tabindex="-1">リモートデバッグシナリオの有効化 <a class="header-anchor" href="#リモートデバッグシナリオの有効化" aria-label="Permalink to “リモートデバッグシナリオの有効化”">​</a></h2><p>デバッガーをパブリックIPアドレスでリッスンさせることは決して推奨しません。リモートデバッグ接続を許可する必要がある場合は、代わりにsshトンネルを使用することをお勧めします。以下の例は、説明のみを目的として提供しています。続行する前に、特権サービスへのリモートアクセスを許可することによるセキュリティリスクを理解してください。</p><p>Node.jsをリモートマシン (remote.example.com) で実行していて、デバッグできるようにしたいとします。そのマシンでは、インスペクターがlocalhost (デフォルト) のみでリッスンするようにNode.jsプロセスを開始する必要があります。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>次に、デバッグクライアント接続を開始したいローカルマシンで、sshトンネルを設定できます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9225:localhost:9229</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote.example.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>これはsshトンネルセッションを開始し、ローカルマシンのポート9221への接続がremote.example.comのポート9229に転送されます。Chrome DevToolsやVisual Studio Codeなどのデバッガーをlocalhost:9221にアタッチできるようになり、Node.jsアプリケーションがローカルで実行されているかのようにデバッグできるはずです。</p><h2 id="レガシーデバッガー" tabindex="-1">レガシーデバッガー <a class="header-anchor" href="#レガシーデバッガー" aria-label="Permalink to “レガシーデバッガー”">​</a></h2><p><strong>レガシーデバッガーはNode.js 7.7.0以降で非推奨になりました。代わりに--inspectとInspectorを使用してください。</strong></p><p>バージョン7以前で<code>--debug</code>または<code>--debug-brk</code>スイッチを付けて起動すると、Node.jsはTCPポート (デフォルトでは<code>5858</code>) 上で、廃止されたV8デバッグプロトコルで定義されたデバッグコマンドをリッスンします。このプロトコルを話すデバッガークライアントは、実行中のプロセスに接続してデバッグできます。以下に、いくつかの一般的なものをリストします。</p><p>V8デバッグプロトコルは、もはやメンテナンスもドキュメント化もされていません。</p><h3 id="ビルトインデバッガー" tabindex="-1">ビルトインデバッガー <a class="header-anchor" href="#ビルトインデバッガー" aria-label="Permalink to “ビルトインデバッガー”">​</a></h3><p><code>node debug script_name.js</code> を実行して、ビルトインコマンドラインデバッガーでスクリプトを開始します。スクリプトは、<code>--debug-brk</code>オプションで開始された別のNode.jsプロセスで開始され、初期のNode.jsプロセスは<code>_debugger.js</code>スクリプトを実行してターゲットに接続します。詳細については、<a href="/ja/nodejs/api/debugger">ドキュメント</a>を参照してください。</p><h3 id="node-inspector" tabindex="-1">node-inspector <a class="header-anchor" href="#node-inspector" aria-label="Permalink to “node-inspector”">​</a></h3><p>Node.js アプリを Chrome DevTools でデバッグします。Chromium で使用される <a href="https://chromedevtools.github.io/debugger-protocol-viewer/v8/" target="_blank" rel="noreferrer">Inspector Protocol</a> を Node.js で使用される V8 Debugger プロトコルに変換する中間プロセスを使用します。詳細については、<a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="noreferrer">https://github.com/node-inspector/node-inspector</a> を参照してください。</p>`,53)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};