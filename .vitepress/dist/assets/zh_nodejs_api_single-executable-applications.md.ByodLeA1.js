import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 单一可执行应用程序","description":"了解如何使用 Node.js 创建和管理单一可执行应用程序，包括如何打包应用程序、管理依赖项以及处理安全性考虑。","frontmatter":{"title":"Node.js 单一可执行应用程序","description":"了解如何使用 Node.js 创建和管理单一可执行应用程序，包括如何打包应用程序、管理依赖项以及处理安全性考虑。","head":[["meta",{"name":"og:title","content":"Node.js 单一可执行应用程序 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"了解如何使用 Node.js 创建和管理单一可执行应用程序，包括如何打包应用程序、管理依赖项以及处理安全性考虑。"}],["meta",{"name":"twitter:title","content":"Node.js 单一可执行应用程序 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"了解如何使用 Node.js 创建和管理单一可执行应用程序，包括如何打包应用程序、管理依赖项以及处理安全性考虑。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/single-executable-applications"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/single-executable-applications"}]]},"headers":[],"relativePath":"zh/nodejs/api/single-executable-applications.md","filePath":"zh/nodejs/api/single-executable-applications.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/api/single-executable-applications.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="single-executable-applications" tabindex="-1">单一可执行应用程序 <a class="header-anchor" href="#single-executable-applications" aria-label="Permalink to “单一可执行应用程序”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.6.0</td><td>增加了对 &quot;useSnapshot&quot; 的支持。</td></tr><tr><td>v20.6.0</td><td>增加了对 &quot;useCodeCache&quot; 的支持。</td></tr><tr><td>v19.7.0, v18.16.0</td><td>增加于：v19.7.0, v18.16.0</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a>.1 - 活跃开发中</p></div><p><strong>源码:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/src/node_sea.cc" target="_blank" rel="noreferrer">src/node_sea.cc</a></p><p>此特性允许方便地将 Node.js 应用程序分发到未安装 Node.js 的系统上。</p><p>Node.js 支持创建<a href="https://github.com/nodejs/single-executable" target="_blank" rel="noreferrer">单一可执行应用程序</a>，方法是允许将 Node.js 准备的 blob（可以包含捆绑的脚本）注入到 <code>node</code> 二进制文件中。 在启动期间，程序会检查是否已注入任何内容。 如果找到 blob，它将执行 blob 中的脚本。 否则，Node.js 将像往常一样运行。</p><p>单一可执行应用程序功能目前仅支持使用 <a href="/zh/nodejs/api/modules#modules-commonjs-modules">CommonJS</a> 模块系统运行单个嵌入式脚本。</p><p>用户可以使用 <code>node</code> 二进制文件本身和任何可以将资源注入到二进制文件中的工具，从其捆绑的脚本创建单一可执行应用程序。</p><p>以下是使用其中一种工具 <a href="https://github.com/nodejs/postject" target="_blank" rel="noreferrer">postject</a> 创建单一可执行应用程序的步骤：</p><h2 id="generating-single-executable-preparation-blobs" tabindex="-1">生成单一可执行准备 blob <a class="header-anchor" href="#generating-single-executable-preparation-blobs" aria-label="Permalink to “生成单一可执行准备 blob”">​</a></h2><p>可以使用 Node.js 二进制文件的 <code>--experimental-sea-config</code> 标志生成注入到应用程序中的单一可执行准备 blob，该二进制文件将用于构建单一可执行文件。 它接受 JSON 格式的配置文件的路径。 如果传递给它的路径不是绝对路径，Node.js 将使用相对于当前工作目录的路径。</p><p>该配置当前读取以下顶级字段：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/bundled/script.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;output&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/write/the/generated/blob.blob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;disableExperimentalSEAWarning&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认值: false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;useSnapshot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认值: false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;useCodeCache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认值: false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;assets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;a.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/a.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;b.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/b.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果路径不是绝对路径，Node.js 将使用相对于当前工作目录的路径。 用于生成 blob 的 Node.js 二进制文件的版本必须与将注入 blob 的二进制文件的版本相同。</p><p>注意：在生成跨平台 SEA（例如，在 <code>darwin-arm64</code> 上生成 <code>linux-x64</code> 的 SEA）时，必须将 <code>useCodeCache</code> 和 <code>useSnapshot</code> 设置为 false，以避免生成不兼容的可执行文件。 由于代码缓存和快照只能在编译它们的同一平台上加载，因此当尝试加载在不同平台上构建的代码缓存或快照时，生成的可执行文件可能会在启动时崩溃。</p><h3 id="assets" tabindex="-1">资源 <a class="header-anchor" href="#assets" aria-label="Permalink to “资源”">​</a></h3><p>用户可以通过将键-路径字典作为 <code>assets</code> 字段添加到配置中来包含资源。在构建时，Node.js 会从指定的路径读取资源，并将它们捆绑到准备好的 blob 中。在生成的执行文件中，用户可以使用 <a href="/zh/nodejs/api/single-executable-applications#seagetassetkey-encoding"><code>sea.getAsset()</code></a> 和 <a href="/zh/nodejs/api/single-executable-applications#seagetassetasblobkey-options"><code>sea.getAssetAsBlob()</code></a> API 来检索资源。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/bundled/script.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;output&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/write/the/generated/blob.blob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;assets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;a.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/a.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;b.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/b.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>单执行文件应用程序可以按如下方式访问资源：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getAssetAsBlob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getRawAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:sea&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 ArrayBuffer 中的数据副本。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> image</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回从资源解码为 UTF8 的字符串。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回包含资源的 Blob。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAssetAsBlob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回包含原始资源且不复制的 ArrayBuffer。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> raw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRawAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>有关更多信息，请参阅 <a href="/zh/nodejs/api/single-executable-applications#seagetassetkey-encoding"><code>sea.getAsset()</code></a>、<a href="/zh/nodejs/api/single-executable-applications#seagetassetasblobkey-options"><code>sea.getAssetAsBlob()</code></a> 和 <a href="/zh/nodejs/api/single-executable-applications#seagetrawassetkey"><code>sea.getRawAsset()</code></a> API 的文档。</p><h3 id="startup-snapshot-support" tabindex="-1">启动快照支持 <a class="header-anchor" href="#startup-snapshot-support" aria-label="Permalink to “启动快照支持”">​</a></h3><p><code>useSnapshot</code> 字段可用于启用启动快照支持。在这种情况下，最终的可执行文件启动时不会运行 <code>main</code> 脚本。相反，它会在构建机器上生成单执行文件应用程序的准备 blob 时运行。然后，生成的准备 blob 将包含一个快照，捕获由 <code>main</code> 脚本初始化的状态。注入了准备 blob 的最终可执行文件将在运行时反序列化该快照。</p><p>当 <code>useSnapshot</code> 为 true 时，主脚本必须调用 <a href="/zh/nodejs/api/v8#v8startupsnapshotsetdeserializemainfunctioncallback-data"><code>v8.startupSnapshot.setDeserializeMainFunction()</code></a> API 来配置需要在用户启动最终可执行文件时运行的代码。</p><p>应用程序在单执行文件中使用快照的典型模式是：</p><p>启动快照脚本的一般约束也适用于用于为单执行文件构建快照的主脚本，并且主脚本可以使用 <a href="/zh/nodejs/api/v8#startup-snapshot-api"><code>v8.startupSnapshot</code> API</a> 来适应这些约束。请参阅 <a href="/zh/nodejs/api/cli#build-snapshot">关于 Node.js 中启动快照支持的文档</a>。</p><h3 id="v8-code-cache-support" tabindex="-1">V8 代码缓存支持 <a class="header-anchor" href="#v8-code-cache-support" aria-label="Permalink to “V8 代码缓存支持”">​</a></h3><p>当在配置中将 <code>useCodeCache</code> 设置为 <code>true</code> 时，在生成单文件可执行程序准备 blob 期间，Node.js 将编译 <code>main</code> 脚本以生成 V8 代码缓存。生成的代码缓存将成为准备 blob 的一部分，并被注入到最终的可执行文件中。当单文件可执行应用程序启动时，Node.js 将使用代码缓存来加速编译，而不是从头开始编译 <code>main</code> 脚本，然后执行脚本，这将提高启动性能。</p><p><strong>注意：</strong> 当 <code>useCodeCache</code> 为 <code>true</code> 时，<code>import()</code> 不起作用。</p><h2 id="in-the-injected-main-script" tabindex="-1">在注入的 main 脚本中 <a class="header-anchor" href="#in-the-injected-main-script" aria-label="Permalink to “在注入的 main 脚本中”">​</a></h2><h3 id="single-executable-application-api" tabindex="-1">单文件可执行应用程序 API <a class="header-anchor" href="#single-executable-application-api" aria-label="Permalink to “单文件可执行应用程序 API”">​</a></h3><p><code>node:sea</code> 内置模块允许从嵌入到可执行文件中的 JavaScript main 脚本与单文件可执行应用程序进行交互。</p><h4 id="seaissea" tabindex="-1"><code>sea.isSea()</code> <a class="header-anchor" href="#seaissea" aria-label="Permalink to “sea.isSea()”">​</a></h4><p><strong>新增于：v21.7.0, v20.12.0</strong></p><ul><li>返回：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 此脚本是否在单文件可执行应用程序中运行。</li></ul><h3 id="seagetassetkey-encoding" tabindex="-1"><code>sea.getAsset(key[, encoding])</code> <a class="header-anchor" href="#seagetassetkey-encoding" aria-label="Permalink to “sea.getAsset(key[, encoding])”">​</a></h3><p><strong>新增于：v21.7.0, v20.12.0</strong></p><p>此方法可用于检索配置为在构建时捆绑到单文件可执行应用程序中的资源。如果找不到匹配的资源，则会抛出一个错误。</p><ul><li><code>key</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 资源在单文件可执行应用程序配置中的 <code>assets</code> 字段指定的字典中的键。</li><li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 如果指定，资源将被解码为字符串。接受 <code>TextDecoder</code> 支持的任何编码。如果未指定，将返回一个包含资源副本的 <code>ArrayBuffer</code>。</li><li>返回：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a></li></ul><h3 id="seagetassetasblobkey-options" tabindex="-1"><code>sea.getAssetAsBlob(key[, options])</code> <a class="header-anchor" href="#seagetassetasblobkey-options" aria-label="Permalink to “sea.getAssetAsBlob(key[, options])”">​</a></h3><p><strong>新增于: v21.7.0, v20.12.0</strong></p><p>与 <a href="/zh/nodejs/api/single-executable-applications#seagetassetkey-encoding"><code>sea.getAsset()</code></a> 类似，但以 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noreferrer"><code>Blob</code></a> 的形式返回结果。 当找不到匹配的 asset 时，会抛出一个错误。</p><ul><li><p><code>key</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> single-executable application 配置中 <code>assets</code> 字段指定的字典中 asset 的键。</p></li><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></p><ul><li><code>type</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> blob 的可选 mime 类型。</li></ul></li><li><p>返回: <a href="/zh/nodejs/api/buffer#class-blob">&lt;Blob&gt;</a></p></li></ul><h3 id="seagetrawassetkey" tabindex="-1"><code>sea.getRawAsset(key)</code> <a class="header-anchor" href="#seagetrawassetkey" aria-label="Permalink to “sea.getRawAsset(key)”">​</a></h3><p><strong>新增于: v21.7.0, v20.12.0</strong></p><p>此方法可用于检索配置为在构建时捆绑到 single-executable application 中的 assets。 当找不到匹配的 asset 时，会抛出一个错误。</p><p>与 <code>sea.getAsset()</code> 或 <code>sea.getAssetAsBlob()</code> 不同，此方法不返回副本。 而是返回可执行文件中捆绑的原始 asset。</p><p>目前，用户应避免写入返回的 array buffer。 如果注入的部分未标记为可写或未正确对齐，则写入返回的 array buffer 很可能会导致崩溃。</p><ul><li><code>key</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> single-executable application 配置中 <code>assets</code> 字段指定的字典中 asset 的键。</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a></li></ul><h3 id="requireid-in-the-injected-main-script-is-not-file-based" tabindex="-1">注入的主脚本中的 <code>require(id)</code> 不是基于文件的 <a class="header-anchor" href="#requireid-in-the-injected-main-script-is-not-file-based" aria-label="Permalink to “注入的主脚本中的 require(id) 不是基于文件的”">​</a></h3><p>注入的主脚本中的 <code>require()</code> 与非注入模块可用的 <a href="/zh/nodejs/api/modules#requireid"><code>require()</code></a> 不同。 它也没有非注入 <a href="/zh/nodejs/api/modules#requireid"><code>require()</code></a> 的任何属性，除了 <a href="/zh/nodejs/api/modules#accessing-the-main-module"><code>require.main</code></a>。 它只能用于加载内置模块。 尝试加载只能在文件系统中找到的模块将会抛出一个错误。</p><p>用户可以将他们的应用程序捆绑到一个独立的 JavaScript 文件中，以便注入到可执行文件中，而不是依赖于基于文件的 <code>require()</code>。 这也能确保更具确定性的依赖关系图。</p><p>但是，如果仍然需要基于文件的 <code>require()</code>，也可以实现：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createRequire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRequire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="__filename-and-modulefilename-in-the-injected-main-script" tabindex="-1">注入的主脚本中的 <code>__filename</code> 和 <code>module.filename</code> <a class="header-anchor" href="#__filename-and-modulefilename-in-the-injected-main-script" aria-label="Permalink to “注入的主脚本中的 __filename 和 module.filename”">​</a></h3><p>注入的主脚本中的 <code>__filename</code> 和 <code>module.filename</code> 的值等于 <a href="/zh/nodejs/api/process#processexecpath"><code>process.execPath</code></a>。</p><h3 id="__dirname-in-the-injected-main-script" tabindex="-1">注入的主脚本中的 <code>__dirname</code> <a class="header-anchor" href="#__dirname-in-the-injected-main-script" aria-label="Permalink to “注入的主脚本中的 __dirname”">​</a></h3><p>注入的主脚本中的 <code>__dirname</code> 的值等于 <a href="/zh/nodejs/api/process#processexecpath"><code>process.execPath</code></a> 的目录名。</p><h2 id="notes" tabindex="-1">备注 <a class="header-anchor" href="#notes" aria-label="Permalink to “备注”">​</a></h2><h3 id="single-executable-application-creation-process" tabindex="-1">单一可执行应用程序创建过程 <a class="header-anchor" href="#single-executable-application-creation-process" aria-label="Permalink to “单一可执行应用程序创建过程”">​</a></h3><p>旨在创建单一可执行 Node.js 应用程序的工具必须将使用 <code>--experimental-sea-config&quot;</code> 准备的 blob 的内容注入到：</p><ul><li>如果 <code>node</code> 二进制文件是 <a href="https://en.wikipedia.org/wiki/Portable_Executable" target="_blank" rel="noreferrer">PE</a> 文件，则注入到名为 <code>NODE_SEA_BLOB</code> 的资源中</li><li>如果 <code>node</code> 二进制文件是 <a href="https://en.wikipedia.org/wiki/Mach-O" target="_blank" rel="noreferrer">Mach-O</a> 文件，则注入到 <code>NODE_SEA</code> 段中名为 <code>NODE_SEA_BLOB</code> 的节中</li><li>如果 <code>node</code> 二进制文件是 <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format" target="_blank" rel="noreferrer">ELF</a> 文件，则注入到名为 <code>NODE_SEA_BLOB</code> 的 note 中</li></ul><p>在二进制文件中搜索 <code>NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2:0</code> <a href="https://www.electronjs.org/docs/latest/tutorial/fuses" target="_blank" rel="noreferrer">fuse</a> 字符串，并将最后一个字符翻转为 <code>1</code>，以表明已注入资源。</p><h3 id="platform-support" tabindex="-1">平台支持 <a class="header-anchor" href="#platform-support" aria-label="Permalink to “平台支持”">​</a></h3><p>单一可执行文件支持仅在以下平台上定期在 CI 上进行测试：</p><ul><li>Windows</li><li>macOS</li><li>Linux（<a href="https://github.com/nodejs/node/blob/main/BUILDING.md#platform-list" target="_blank" rel="noreferrer">Node.js 支持的</a>所有发行版，除了 Alpine，以及<a href="https://github.com/nodejs/node/blob/main/BUILDING.md#platform-list" target="_blank" rel="noreferrer">Node.js 支持的</a>所有架构，除了 s390x）</li></ul><p>这是由于缺乏更好的工具来生成单一可执行文件，这些文件可用于在其他平台上测试此功能。</p><p>欢迎提出关于其他资源注入工具/工作流程的建议。 请在 <a href="https://github.com/nodejs/single-executable/discussions" target="_blank" rel="noreferrer">https://github.com/nodejs/single-executable/discussions</a> 发起讨论，以帮助我们记录它们。</p>`,68)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};