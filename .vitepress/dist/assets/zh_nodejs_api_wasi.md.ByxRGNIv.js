import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js WASI 文档","description":"探索 Node.js 的 WebAssembly 系统接口 (WASI) 文档，详细介绍如何在 Node.js 环境中使用 WASI，包括文件系统操作、环境变量等 API。","frontmatter":{"title":"Node.js WASI 文档","description":"探索 Node.js 的 WebAssembly 系统接口 (WASI) 文档，详细介绍如何在 Node.js 环境中使用 WASI，包括文件系统操作、环境变量等 API。","head":[["meta",{"name":"og:title","content":"Node.js WASI 文档 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"探索 Node.js 的 WebAssembly 系统接口 (WASI) 文档，详细介绍如何在 Node.js 环境中使用 WASI，包括文件系统操作、环境变量等 API。"}],["meta",{"name":"twitter:title","content":"Node.js WASI 文档 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"探索 Node.js 的 WebAssembly 系统接口 (WASI) 文档，详细介绍如何在 Node.js 环境中使用 WASI，包括文件系统操作、环境变量等 API。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/wasi"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/wasi"}]]},"headers":[],"relativePath":"zh/nodejs/api/wasi.md","filePath":"zh/nodejs/api/wasi.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/api/wasi.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="webassembly-system-interface-wasi" tabindex="-1">WebAssembly 系统接口 (WASI) <a class="header-anchor" href="#webassembly-system-interface-wasi" aria-label="Permalink to “WebAssembly 系统接口 (WASI)”">​</a></h1><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性</p></div><p><strong>当前 <code>node:wasi</code> 模块没有提供某些 WASI 运行时提供的全面的文件系统安全特性。 安全文件系统沙箱的完整支持可能会在未来实现，也可能不会实现。 在此期间，请勿依赖它来运行不受信任的代码。</strong></p><p><strong>源码:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/wasi.js" target="_blank" rel="noreferrer">lib/wasi.js</a></p><p>WASI API 提供了 <a href="https://wasi.dev/" target="_blank" rel="noreferrer">WebAssembly 系统接口</a> 规范的实现。 WASI 允许 WebAssembly 应用程序通过一系列类似 POSIX 的函数访问底层操作系统。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-17" id="tab-18" checked><label data-title="ESM" for="tab-18">ESM</label><input type="radio" name="group-17" id="tab-19"><label data-title="CJS" for="tab-19">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFile } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { WASI } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:wasi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { argv, env } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preview1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args: argv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preopens: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/some/real/path/that/wasm/can/access&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./demo.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasm, wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImportObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:wasi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preview1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args: argv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preopens: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/some/real/path/that/wasm/can/access&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;demo.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasm, wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImportObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></div></div><p>要运行上面的示例，创建一个名为 <code>demo.wat</code> 的新的 WebAssembly 文本格式文件：</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>(module</span></span>
<span class="line"><span>    ;; 导入所需的 fd_write WASI 函数，该函数将给定的 io 向量写入 stdout</span></span>
<span class="line"><span>    ;; fd_write 的函数签名是：</span></span>
<span class="line"><span>    ;; (文件描述符, *iovs, iovs_len, nwritten) -&gt; 返回写入的字节数</span></span>
<span class="line"><span>    (import &quot;wasi_snapshot_preview1&quot; &quot;fd_write&quot; (func $fd_write (param i32 i32 i32 i32) (result i32)))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    (memory 1)</span></span>
<span class="line"><span>    (export &quot;memory&quot; (memory 0))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ;; 将 &#39;hello world\\n&#39; 写入内存，偏移量为 8 字节</span></span>
<span class="line"><span>    ;; 注意结尾的换行符，这是文本显示所必需的</span></span>
<span class="line"><span>    (data (i32.const 8) &quot;hello world\\n&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    (func $main (export &quot;_start&quot;)</span></span>
<span class="line"><span>        ;; 在线性内存中创建一个新的 io 向量</span></span>
<span class="line"><span>        (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - 这是指向 &#39;hello world\\n&#39; 字符串开头的指针</span></span>
<span class="line"><span>        (i32.store (i32.const 4) (i32.const 12))  ;; iov.iov_len - &#39;hello world\\n&#39; 字符串的长度</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        (call $fd_write</span></span>
<span class="line"><span>            (i32.const 1) ;; file_descriptor - 1 代表 stdout</span></span>
<span class="line"><span>            (i32.const 0) ;; *iovs - 指向 iov 数组的指针，该数组存储在内存位置 0</span></span>
<span class="line"><span>            (i32.const 1) ;; iovs_len - 我们要打印存储在 iov 中的 1 个字符串 - 所以是 1。</span></span>
<span class="line"><span>            (i32.const 20) ;; nwritten - 内存中存储写入字节数的位置</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>        drop ;; 从堆栈顶部丢弃写入的字节数</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>使用 <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a> 将 <code>.wat</code> 编译为 <code>.wasm</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wat2wasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo.wat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="security" tabindex="-1">安全性 <a class="header-anchor" href="#security" aria-label="Permalink to “安全性”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v21.2.0, v20.11.0</td><td>澄清了 WASI 的安全属性。</td></tr><tr><td>v21.2.0, v20.11.0</td><td>添加于: v21.2.0, v20.11.0</td></tr></tbody></table></div><p>WASI 提供了一种基于 capability 的模型，通过该模型，应用程序可以获得其自定义的 <code>env</code>、<code>preopens</code>、<code>stdin</code>、<code>stdout</code>、<code>stderr</code> 和 <code>exit</code> capability。</p><p><strong>当前的 Node.js 威胁模型不提供像某些 WASI 运行时中存在的安全沙箱。</strong></p><p>虽然支持 capability 功能，但它们在 Node.js 中并不构成安全模型。例如，文件系统沙箱可以使用各种技术逃逸。该项目正在探索是否可以在未来添加这些安全保证。</p><h2 id="class-wasi" tabindex="-1">类: <code>WASI</code> <a class="header-anchor" href="#class-wasi" aria-label="Permalink to “类: WASI”">​</a></h2><p><strong>添加于: v13.3.0, v12.16.0</strong></p><p><code>WASI</code> 类提供了 WASI 系统调用 API 以及用于处理基于 WASI 的应用程序的附加便捷方法。每个 <code>WASI</code> 实例代表一个不同的环境。</p><h3 id="new-wasioptions" tabindex="-1"><code>new WASI([options])</code> <a class="header-anchor" href="#new-wasioptions" aria-label="Permalink to “new WASI([options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.1.0</td><td>returnOnExit 的默认值已更改为 true。</td></tr><tr><td>v20.0.0</td><td>version 选项现在是必需的，并且没有默认值。</td></tr><tr><td>v19.8.0</td><td>向 options 添加了 version 字段。</td></tr><tr><td>v13.3.0, v12.16.0</td><td>添加于: v13.3.0, v12.16.0</td></tr></tbody></table></div><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>args</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">&lt;Array&gt;</a> WebAssembly 应用程序将看到的一系列字符串作为命令行参数。第一个参数是 WASI 命令本身的虚拟路径。 <strong>默认值:</strong> <code>[]</code>。</li><li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 一个类似于 <code>process.env</code> 的对象，WebAssembly 应用程序将看到它作为其环境。 <strong>默认值:</strong> <code>{}</code>。</li><li><code>preopens</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 此对象表示 WebAssembly 应用程序的本地目录结构。 <code>preopens</code> 的字符串键被视为文件系统中的目录。 <code>preopens</code> 中相应的值是主机上这些目录的真实路径。</li><li><code>returnOnExit</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 默认情况下，当 WASI 应用程序调用 <code>__wasi_proc_exit()</code> 时，<code>wasi.start()</code> 将返回指定的退出代码，而不是终止该进程。 将此选项设置为 <code>false</code> 将导致 Node.js 进程以指定的退出代码退出。 <strong>默认值:</strong> <code>true</code>。</li><li><code>stdin</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> 在 WebAssembly 应用程序中用作标准输入的文件描述符。 <strong>默认值:</strong> <code>0</code>。</li><li><code>stdout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> 在 WebAssembly 应用程序中用作标准输出的文件描述符。 <strong>默认值:</strong> <code>1</code>。</li><li><code>stderr</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> 在 WebAssembly 应用程序中用作标准错误的文件描述符。 <strong>默认值:</strong> <code>2</code>。</li><li><code>version</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 请求的 WASI 版本。 目前，唯一支持的版本是 <code>unstable</code> 和 <code>preview1</code>。 此选项是必需的。</li></ul></li></ul><h3 id="wasigetimportobject" tabindex="-1"><code>wasi.getImportObject()</code> <a class="header-anchor" href="#wasigetimportobject" aria-label="Permalink to “wasi.getImportObject()”">​</a></h3><p><strong>新增于: v19.8.0</strong></p><p>返回一个导入对象，如果除了 WASI 提供的导入之外不需要其他 WASM 导入，则可以将其传递给 <code>WebAssembly.instantiate()</code>。</p><p>如果将版本 <code>unstable</code> 传递给构造函数，它将返回：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi_unstable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi.wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果将版本 <code>preview1</code> 传递给构造函数，或者未指定版本，它将返回：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi_snapshot_preview1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi.wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="wasistartinstance" tabindex="-1"><code>wasi.start(instance)</code> <a class="header-anchor" href="#wasistartinstance" aria-label="Permalink to “wasi.start(instance)”">​</a></h3><p><strong>新增于: v13.3.0, v12.16.0</strong></p><ul><li><code>instance</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer">&lt;WebAssembly.Instance&gt;</a></li></ul><p>尝试通过调用其 <code>_start()</code> 导出，开始将 <code>instance</code> 作为 WASI 命令执行。 如果 <code>instance</code> 不包含 <code>_start()</code> 导出，或者如果 <code>instance</code> 包含 <code>_initialize()</code> 导出，则会抛出异常。</p><p><code>start()</code> 要求 <code>instance</code> 导出一个名为 <code>memory</code> 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory" target="_blank" rel="noreferrer"><code>WebAssembly.Memory</code></a>。 如果 <code>instance</code> 没有 <code>memory</code> 导出，则会抛出异常。</p><p>如果多次调用 <code>start()</code>，则会抛出异常。</p><h3 id="wasiinitializeinstance" tabindex="-1"><code>wasi.initialize(instance)</code> <a class="header-anchor" href="#wasiinitializeinstance" aria-label="Permalink to “wasi.initialize(instance)”">​</a></h3><p><strong>新增于: v14.6.0, v12.19.0</strong></p><ul><li><code>instance</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer">&lt;WebAssembly.Instance&gt;</a></li></ul><p>如果 <code>instance</code> 包含 <code>_initialize()</code> 导出，尝试通过调用它来将 <code>instance</code> 初始化为 WASI reactor。 如果 <code>instance</code> 包含 <code>_start()</code> 导出，则会抛出异常。</p><p><code>initialize()</code> 要求 <code>instance</code> 导出一个名为 <code>memory</code> 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory" target="_blank" rel="noreferrer"><code>WebAssembly.Memory</code></a>。 如果 <code>instance</code> 没有 <code>memory</code> 导出，则会抛出异常。</p><p>如果多次调用 <code>initialize()</code>，则会抛出异常。</p><h3 id="wasiwasiimport" tabindex="-1"><code>wasi.wasiImport</code> <a class="header-anchor" href="#wasiwasiimport" aria-label="Permalink to “wasi.wasiImport”">​</a></h3><p><strong>新增于: v13.3.0, v12.16.0</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><code>wasiImport</code> 是一个实现了 WASI 系统调用 API 的对象。 在实例化 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer"><code>WebAssembly.Instance</code></a> 期间，应将此对象作为 <code>wasi_snapshot_preview1</code> 导入传递。</p>`,44)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};