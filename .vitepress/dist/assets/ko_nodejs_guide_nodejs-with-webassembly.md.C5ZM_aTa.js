import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js with WebAssembly","description":"WebAssembly 는 C/C++, Rust, AssemblyScript 등 다양한 언어로 컴파일 할 수 있는 고성능 어셈블리어이다. Node.js 는 WebAssembly 객체를 통해 WebAssembly 와 통신하기 위해 필요한 API 를 제공한다.","frontmatter":{"title":"Node.js with WebAssembly","description":"WebAssembly 는 C/C++, Rust, AssemblyScript 등 다양한 언어로 컴파일 할 수 있는 고성능 어셈블리어이다. Node.js 는 WebAssembly 객체를 통해 WebAssembly 와 통신하기 위해 필요한 API 를 제공한다.","head":[["meta",{"name":"og:title","content":"Node.js with WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"WebAssembly 는 C/C++, Rust, AssemblyScript 등 다양한 언어로 컴파일 할 수 있는 고성능 어셈블리어이다. Node.js 는 WebAssembly 객체를 통해 WebAssembly 와 통신하기 위해 필요한 API 를 제공한다."}],["meta",{"name":"twitter:title","content":"Node.js with WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"WebAssembly 는 C/C++, Rust, AssemblyScript 등 다양한 언어로 컴파일 할 수 있는 고성능 어셈블리어이다. Node.js 는 WebAssembly 객체를 통해 WebAssembly 와 통신하기 위해 필요한 API 를 제공한다."}],["link",{"rel":"canonical","href":"https://idoc.dev/ko/nodejs/guide/nodejs-with-webassembly"}],["meta",{"property":"og:url","content":"https://idoc.dev/ko/nodejs/guide/nodejs-with-webassembly"}]]},"headers":[],"relativePath":"ko/nodejs/guide/nodejs-with-webassembly.md","filePath":"ko/nodejs/guide/nodejs-with-webassembly.md","lastUpdated":1749464498000}`),a={name:`ko/nodejs/guide/nodejs-with-webassembly.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="webassembly를-사용한-node-js" tabindex="-1">WebAssembly를 사용한 Node.js <a class="header-anchor" href="#webassembly를-사용한-node-js" aria-label="Permalink to “WebAssembly를 사용한 Node.js”">​</a></h1><p><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a>는 C/C++, Rust, AssemblyScript 등 다양한 언어에서 컴파일할 수 있는 고성능 어셈블리 유사 언어입니다. 현재 Chrome, Firefox, Safari, Edge 및 Node.js에서 지원됩니다!</p><p>WebAssembly 사양은 <code>.wasm</code> 확장자를 가진 WebAssembly 모듈이라는 바이너리 형식과 <code>.wat</code> 확장자를 가진 WebAssembly 텍스트 형식이라는 해당 텍스트 표현의 두 가지 파일 형식을 자세히 설명합니다.</p><h2 id="주요-개념" tabindex="-1">주요 개념 <a class="header-anchor" href="#주요-개념" aria-label="Permalink to “주요 개념”">​</a></h2><ul><li>모듈 - 컴파일된 WebAssembly 바이너리, 즉 <code>.wasm</code> 파일입니다.</li><li>메모리 - 크기 조정이 가능한 ArrayBuffer입니다.</li><li>테이블 - 메모리에 저장되지 않은 크기 조정이 가능한 참조 형식 배열입니다.</li><li>인스턴스 - 메모리, 테이블 및 변수를 포함하는 모듈의 인스턴스화입니다.</li></ul><p>WebAssembly를 사용하려면 <code>.wasm</code> 바이너리 파일과 WebAssembly와 통신하기 위한 API 세트가 필요합니다. Node.js는 전역 <code>WebAssembly</code> 객체를 통해 필요한 API를 제공합니다.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebAssembly)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Object [WebAssembly] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  compile: [Function: compile],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  validate: [Function: validate],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  instantiate: [Function: instantiate]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="webassembly-모듈-생성" tabindex="-1">WebAssembly 모듈 생성 <a class="header-anchor" href="#webassembly-모듈-생성" aria-label="Permalink to “WebAssembly 모듈 생성”">​</a></h2><p>다음과 같은 WebAssembly 바이너리 파일을 생성하는 데 사용할 수 있는 여러 가지 방법이 있습니다.</p><ul><li>WebAssembly(<code>.wat</code>)를 직접 작성하고 <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a>와 같은 도구를 사용하여 바이너리 형식으로 변환합니다.</li><li>C/C++ 응용 프로그램과 함께 <a href="https://github.com/emscripten-core/emscripten" target="_blank" rel="noreferrer">emscripten</a> 사용</li><li>Rust 응용 프로그램과 함께 <a href="https://github.com/rustwasm/wasm-pack" target="_blank" rel="noreferrer">wasm-pack</a> 사용</li><li>TypeScript와 같은 환경을 선호하는 경우 <a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noreferrer">AssemblyScript</a> 사용</li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong>이러한 도구 중 일부는 바이너리 파일뿐만 아니라 브라우저에서 실행할 수 있는 JavaScript &quot;글루&quot; 코드 및 해당 HTML 파일도 생성합니다.</strong></p></div><h2 id="사용-방법" tabindex="-1">사용 방법 <a class="header-anchor" href="#사용-방법" aria-label="Permalink to “사용 방법”">​</a></h2><p>WebAssembly 모듈이 있으면 Node.js <code>WebAssembly</code> 객체를 사용하여 인스턴스화할 수 있습니다.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/add.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasmBuffer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wasmModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 내보낸 함수는 instance.exports 아래에 있습니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmModule.instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 출력: 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="os와-상호-작용" tabindex="-1">OS와 상호 작용 <a class="header-anchor" href="#os와-상호-작용" aria-label="Permalink to “OS와 상호 작용”">​</a></h2><p>WebAssembly 모듈은 자체적으로 OS 기능에 직접 액세스할 수 없습니다. 타사 도구인 <a href="https://github.com/bytecodealliance/wasmtime" target="_blank" rel="noreferrer">Wasmtime</a>을 사용하여 이 기능에 액세스할 수 있습니다. <code>Wasmtime</code>은 <a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a> API를 사용하여 OS 기능에 액세스합니다.</p><h2 id="참고-자료" tabindex="-1">참고 자료 <a class="header-anchor" href="#참고-자료" aria-label="Permalink to “참고 자료”">​</a></h2><ul><li><a href="https://webassembly.org/" target="_blank" rel="noreferrer">일반 WebAssembly 정보</a></li><li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noreferrer">MDN 문서</a></li><li><a href="https://webassembly.github.io/spec/core/text/index.html" target="_blank" rel="noreferrer">WebAssembly 직접 작성</a></li></ul>`,18)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};