import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js مع TypeScript","description":"تعلم كيفية استخدام TypeScript مع Node.js، بما في ذلك فوائده، والتثبيت، والاستخدام. اكتشف كيفية تجميع وتشغيل شيفرة TypeScript، واستكشف ميزاته وأدواته.","frontmatter":{"title":"Node.js مع TypeScript","description":"تعلم كيفية استخدام TypeScript مع Node.js، بما في ذلك فوائده، والتثبيت، والاستخدام. اكتشف كيفية تجميع وتشغيل شيفرة TypeScript، واستكشف ميزاته وأدواته.","head":[["meta",{"name":"og:title","content":"Node.js مع TypeScript | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"تعلم كيفية استخدام TypeScript مع Node.js، بما في ذلك فوائده، والتثبيت، والاستخدام. اكتشف كيفية تجميع وتشغيل شيفرة TypeScript، واستكشف ميزاته وأدواته."}],["meta",{"name":"twitter:title","content":"Node.js مع TypeScript | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"تعلم كيفية استخدام TypeScript مع Node.js، بما في ذلك فوائده، والتثبيت، والاستخدام. اكتشف كيفية تجميع وتشغيل شيفرة TypeScript، واستكشف ميزاته وأدواته."}],["link",{"rel":"canonical","href":"https://idoc.dev/ar/nodejs/guide/nodejs-with-typescript"}],["meta",{"property":"og:url","content":"https://idoc.dev/ar/nodejs/guide/nodejs-with-typescript"}]]},"headers":[],"relativePath":"ar/nodejs/guide/nodejs-with-typescript.md","filePath":"ar/nodejs/guide/nodejs-with-typescript.md","lastUpdated":null}`),a={name:`ar/nodejs/guide/nodejs-with-typescript.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-مع-typescript" tabindex="-1">Node.js مع TypeScript <a class="header-anchor" href="#node-js-مع-typescript" aria-label="Permalink to “Node.js مع TypeScript”">​</a></h1><h2 id="ما-هو-typescript" tabindex="-1">ما هو TypeScript <a class="header-anchor" href="#ما-هو-typescript" aria-label="Permalink to “ما هو TypeScript”">​</a></h2><p><a href="https://www.typescriptlang.org" target="_blank" rel="noreferrer">TypeScript</a> هي لغة مفتوحة المصدر يتم صيانتها وتطويرها بواسطة Microsoft. إنها محبوبة وتستخدم من قبل الكثير من مطوري البرامج في جميع أنحاء العالم.</p><p>بشكل أساسي، هي مجموعة شاملة من JavaScript تضيف إمكانات جديدة إلى اللغة. الإضافة الأبرز هي تعريفات النوع الثابت، وهو شيء غير موجود في JavaScript العادية. بفضل الأنواع، من الممكن، على سبيل المثال، تحديد نوع الوسائط التي نتوقعها وما يتم إرجاعه بالضبط في وظائفنا أو ما هو الشكل الدقيق للكائن الذي نقوم بإنشائه. TypeScript هي أداة قوية حقًا وتفتح عالمًا جديدًا من الاحتمالات في مشاريع JavaScript. إنها تجعل الكود الخاص بنا أكثر أمانًا وقوة من خلال منع العديد من الأخطاء قبل حتى شحن الكود - فهي تكتشف المشكلات أثناء تطوير الكود وتتكامل بشكل رائع مع محررات التعليمات البرمجية مثل Visual Studio Code.</p><p>يمكننا التحدث عن فوائد TypeScript الأخرى لاحقًا، دعنا نرى بعض الأمثلة الآن!</p><h3 id="أمثلة" tabindex="-1">أمثلة <a class="header-anchor" href="#أمثلة" aria-label="Permalink to “أمثلة”">​</a></h3><p>ألق نظرة على مقتطف الكود هذا ثم يمكننا تفكيكه معًا:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> justine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Justine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isJustineAnAdult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(justine)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>الجزء الأول (مع الكلمة الأساسية <code>type</code>) مسؤول عن الإعلان عن نوع الكائن المخصص الخاص بنا الذي يمثل المستخدمين. في وقت لاحق، نستخدم هذا النوع الذي تم إنشاؤه حديثًا لإنشاء وظيفة <code>isAdult</code> التي تقبل وسيطة واحدة من النوع <code>User</code> وترجع <code>boolean</code>. بعد ذلك، نقوم بإنشاء <code>justine</code>، بيانات المثال الخاصة بنا التي يمكن استخدامها لاستدعاء الوظيفة المحددة مسبقًا. أخيرًا، نقوم بإنشاء متغير جديد بمعلومات حول ما إذا كانت <code>justine</code> بالغًا.</p><p>هناك أشياء إضافية حول هذا المثال يجب أن تعرفها. أولاً، إذا لم نلتزم بالأنواع المعلنة، فستنبهنا TypeScript إلى وجود خطأ ما وتمنع إساءة الاستخدام. ثانيًا، ليس كل شيء يجب أن يكون مكتوبًا صراحةً - TypeScript ذكية جدًا ويمكنها استنتاج الأنواع لنا. على سبيل المثال، سيكون المتغير <code>isJustineAnAdult</code> من النوع boolean حتى لو لم نكتبه صراحةً أو <code>justine</code> سيكون وسيطة صالحة لوظيفتنا حتى لو لم نعلن عن هذا المتغير من النوع <code>User</code>.</p><p>حسنًا، لدينا بعض كود TypeScript. الآن كيف يمكننا تشغيله؟</p><p><strong>أول شيء يجب القيام به هو تثبيت TypeScript في مشروعنا:</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>الآن يمكننا تجميعه إلى JavaScript باستخدام الأمر <code>tsc</code> في المحطة الطرفية. هيا بنا نفعل ذلك!</p><p><strong>بافتراض أن اسم ملفنا هو <code>example.ts</code>، فسيبدو الأمر كما يلي:</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong><a href="https://www.npmjs.com/package/npx" target="_blank" rel="noreferrer">npx</a> هنا تعني Node Package Execute. تتيح لنا هذه الأداة تشغيل مترجم TypeScript دون تثبيته عالميًا.</strong></p></div><p><code>tsc</code> هو مترجم TypeScript الذي سيأخذ كود TypeScript الخاص بنا ويجمعه إلى JavaScript. سيؤدي هذا الأمر إلى إنشاء ملف جديد باسم <code>example.js</code> يمكننا تشغيله باستخدام Node.js. الآن بعد أن عرفنا كيفية تجميع وتشغيل كود TypeScript، دعنا نرى إمكانات TypeScript في منع الأخطاء أثناء العمل!</p><p><strong>إليك كيفية تعديل الكود الخاص بنا:</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> justine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Justine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Secret!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isJustineAnAdult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(justine, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I shouldn&#39;t be here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>وهذا ما يجب أن تقوله TypeScript عن هذا:</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">example.ts:12:5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TS2322:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assignable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     age:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Secret!&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  example.ts:3:5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     age:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          ~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> expected</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> comes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> property</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;age&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> declared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> here</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;User&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">example.ts:15:7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TS2322:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;boolean&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assignable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">15</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isJustineAnAdult:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">justine,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I shouldn&#39;t be here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         ~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">example.ts:15:51</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TS2554:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Expected</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arguments,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> but</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> got</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">15</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isJustineAnAdult:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isAdult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">justine,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I shouldn&#39;t be here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                                                     ~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Found</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> errors</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> same</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts:12</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>كما ترون، تمنعنا TypeScript بنجاح من شحن التعليمات البرمجية التي قد تعمل بشكل غير متوقع. هذا رائع!</p><h2 id="المزيد-عن-typescript" tabindex="-1">المزيد عن TypeScript <a class="header-anchor" href="#المزيد-عن-typescript" aria-label="Permalink to “المزيد عن TypeScript”">​</a></h2><p>تقدم TypeScript مجموعة كبيرة من الآليات الرائعة الأخرى مثل الواجهات والفئات وأنواع الأدوات المساعدة وما إلى ذلك. أيضًا، في المشاريع الأكبر حجمًا، يمكنك الإعلان عن تكوين محول TypeScript الخاص بك في ملف منفصل وتعديل كيفية عمله بدقة ومدى دقته والمكان الذي يخزن فيه الملفات المترجمة على سبيل المثال. يمكنك قراءة المزيد عن كل هذه الأشياء الرائعة في <a href="https://www.typescriptlang.org/docs" target="_blank" rel="noreferrer">وثائق TypeScript الرسمية</a>.</p><p>بعض الفوائد الأخرى لـ TypeScript التي تستحق الذكر هي أنه يمكن اعتمادها تدريجيًا، فهي تساعد في جعل التعليمات البرمجية أكثر قابلية للقراءة والفهم وتسمح للمطورين باستخدام ميزات اللغة الحديثة أثناء شحن التعليمات البرمجية لإصدارات Node.js الأقدم.</p><h2 id="تشغيل-كود-typescript-في-node-js" tabindex="-1">تشغيل كود TypeScript في Node.js <a class="header-anchor" href="#تشغيل-كود-typescript-في-node-js" aria-label="Permalink to “تشغيل كود TypeScript في Node.js”">​</a></h2><p>لا يمكن لـ Node.js تشغيل TypeScript أصليًا. لا يمكنك استدعاء <code>node example.ts</code> من سطر الأوامر مباشرةً. ولكن هناك ثلاثة حلول لهذه المشكلة:</p><h3 id="تجميع-typescript-إلى-javascript" tabindex="-1">تجميع TypeScript إلى JavaScript <a class="header-anchor" href="#تجميع-typescript-إلى-javascript" aria-label="Permalink to “تجميع TypeScript إلى JavaScript”">​</a></h3><p>إذا كنت ترغب في تشغيل كود TypeScript في Node.js، فأنت بحاجة إلى تجميعه إلى JavaScript أولاً. يمكنك القيام بذلك باستخدام محول TypeScript <code>tsc</code> كما هو موضح سابقًا.</p><p>إليك مثال صغير:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="تشغيل-كود-typescript-باستخدام-ts-node" tabindex="-1">تشغيل كود TypeScript باستخدام <code>ts-node</code> <a class="header-anchor" href="#تشغيل-كود-typescript-باستخدام-ts-node" aria-label="Permalink to “تشغيل كود TypeScript باستخدام ts-node”">​</a></h3><p>يمكنك استخدام <a href="https://www.npmjs.com/package/ts-node" target="_blank" rel="noreferrer">ts-node</a> لتشغيل كود TypeScript مباشرةً في Node.js دون الحاجة إلى تجميعه أولاً. لكنه لا يتحقق من نوع التعليمات البرمجية الخاصة بك. لذلك نوصي بالتحقق من نوع التعليمات البرمجية الخاصة بك أولاً باستخدام <code>tsc</code> ثم تشغيلها باستخدام <code>ts-node</code> قبل شحنها.</p><p>لاستخدام <code>ts-node</code>، تحتاج إلى تثبيته أولاً:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ثم يمكنك تشغيل كود TypeScript الخاص بك هكذا:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="تشغيل-كود-typescript-باستخدام-tsx" tabindex="-1">تشغيل كود TypeScript باستخدام <code>tsx</code> <a class="header-anchor" href="#تشغيل-كود-typescript-باستخدام-tsx" aria-label="Permalink to “تشغيل كود TypeScript باستخدام tsx”">​</a></h3><p>يمكنك استخدام <a href="https://www.npmjs.com/package/tsx" target="_blank" rel="noreferrer">tsx</a> لتشغيل كود TypeScript مباشرةً في Node.js دون الحاجة إلى تجميعه أولاً. لكنه لا يتحقق من نوع التعليمات البرمجية الخاصة بك. لذلك نوصي بالتحقق من نوع التعليمات البرمجية الخاصة بك أولاً باستخدام <code>tsc</code> ثم تشغيلها باستخدام <code>tsx</code> قبل شحنها.</p><p>لاستخدام tsx، تحتاج إلى تثبيته أولاً:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ثم يمكنك تشغيل كود TypeScript الخاص بك هكذا:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>إذا كنت ترغب في استخدام <code>tsx</code> عبر <code>node</code>، يمكنك تسجيل <code>tsx</code> عبر <code>--import</code>:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --import=tsx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="typescript-في-عالم-node-js" tabindex="-1">TypeScript في عالم Node.js <a class="header-anchor" href="#typescript-في-عالم-node-js" aria-label="Permalink to “TypeScript في عالم Node.js”">​</a></h2><p>لقد ترسخت TypeScript في عالم Node.js وتستخدمها العديد من الشركات والمشاريع مفتوحة المصدر والأدوات والأطر. بعض الأمثلة البارزة للمشاريع مفتوحة المصدر التي تستخدم TypeScript هي:</p><ul><li><a href="https://nestjs.com" target="_blank" rel="noreferrer">NestJS</a> - إطار عمل قوي وكامل الميزات يجعل إنشاء أنظمة قابلة للتطوير ومصممة بشكل جيد أمرًا سهلاً وممتعًا</li><li><a href="https://typeorm.io" target="_blank" rel="noreferrer">TypeORM</a> - ORM رائع متأثر بأدوات أخرى معروفة من لغات أخرى مثل Hibernate أو Doctrine أو Entity Framework</li><li><a href="https://prisma.io" target="_blank" rel="noreferrer">Prisma</a> - ORM من الجيل التالي يتميز بنموذج بيانات تعريفي وترحيلات تم إنشاؤها واستعلامات قاعدة بيانات آمنة تمامًا من حيث النوع</li><li><a href="https://rxjs.dev" target="_blank" rel="noreferrer">RxJS</a> - مكتبة مستخدمة على نطاق واسع للبرمجة التفاعلية</li><li><a href="https://adonisjs.com" target="_blank" rel="noreferrer">AdonisJS</a> - إطار عمل ويب كامل الميزات مع Node.js</li><li><a href="https://foal.dev" target="_blank" rel="noreferrer">FoalTs</a> - إطار عمل Nodejs الأنيق</li></ul><p>والعديد والعديد من المشاريع الرائعة الأخرى... ربما حتى مشروعك القادم!</p>`,50)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};