import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Einzelne ausführbare Anwendungen mit Node.js","description":"Erfahren Sie, wie Sie mit Node.js einzelne ausführbare Anwendungen erstellen und verwalten, einschließlich der Verpackung Ihrer Anwendung, der Verwaltung von Abhängigkeiten und der Berücksichtigung von Sicherheitsaspekten.","frontmatter":{"title":"Einzelne ausführbare Anwendungen mit Node.js","description":"Erfahren Sie, wie Sie mit Node.js einzelne ausführbare Anwendungen erstellen und verwalten, einschließlich der Verpackung Ihrer Anwendung, der Verwaltung von Abhängigkeiten und der Berücksichtigung von Sicherheitsaspekten.","head":[["meta",{"name":"og:title","content":"Einzelne ausführbare Anwendungen mit Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Erfahren Sie, wie Sie mit Node.js einzelne ausführbare Anwendungen erstellen und verwalten, einschließlich der Verpackung Ihrer Anwendung, der Verwaltung von Abhängigkeiten und der Berücksichtigung von Sicherheitsaspekten."}],["meta",{"name":"twitter:title","content":"Einzelne ausführbare Anwendungen mit Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Erfahren Sie, wie Sie mit Node.js einzelne ausführbare Anwendungen erstellen und verwalten, einschließlich der Verpackung Ihrer Anwendung, der Verwaltung von Abhängigkeiten und der Berücksichtigung von Sicherheitsaspekten."}],["link",{"rel":"canonical","href":"https://idoc.dev/de/nodejs/api/single-executable-applications"}],["meta",{"property":"og:url","content":"https://idoc.dev/de/nodejs/api/single-executable-applications"}]]},"headers":[],"relativePath":"de/nodejs/api/single-executable-applications.md","filePath":"de/nodejs/api/single-executable-applications.md","lastUpdated":1749464498000}`),a={name:`de/nodejs/api/single-executable-applications.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="single-executable-applications" tabindex="-1">Einzelne ausführbare Anwendungen <a class="header-anchor" href="#single-executable-applications" aria-label="Permalink to “Einzelne ausführbare Anwendungen”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[Historie]</p><table tabindex="0"><thead><tr><th>Version</th><th>Änderungen</th></tr></thead><tbody><tr><td>v20.6.0</td><td>Unterstützung für &quot;useSnapshot&quot; hinzugefügt.</td></tr><tr><td>v20.6.0</td><td>Unterstützung für &quot;useCodeCache&quot; hinzugefügt.</td></tr><tr><td>v19.7.0, v18.16.0</td><td>Hinzugefügt in: v19.7.0, v18.16.0</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[Stabil: 1 - Experimentell]</p><p><a href="/de/nodejs/api/documentation#stability-index">Stabil: 1</a> <a href="/de/nodejs/api/documentation#stability-index">Stabilität: 1</a>.1 - Aktive Entwicklung</p></div><p><strong>Quellcode:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/src/node_sea.cc" target="_blank" rel="noreferrer">src/node_sea.cc</a></p><p>Diese Funktion ermöglicht die komfortable Verteilung einer Node.js-Anwendung auf einem System, auf dem Node.js nicht installiert ist.</p><p>Node.js unterstützt die Erstellung von <a href="https://github.com/nodejs/single-executable" target="_blank" rel="noreferrer">einzelnen ausführbaren Anwendungen</a>, indem ein von Node.js vorbereiteter Blob, der ein gebündeltes Skript enthalten kann, in die <code>node</code>-Binärdatei injiziert werden kann. Beim Start prüft das Programm, ob etwas injiziert wurde. Wenn der Blob gefunden wird, führt es das Skript im Blob aus. Andernfalls arbeitet Node.js wie gewohnt.</p><p>Die Funktion für einzelne ausführbare Anwendungen unterstützt derzeit nur die Ausführung eines einzelnen eingebetteten Skripts mit dem <a href="/de/nodejs/api/modules#modules-commonjs-modules">CommonJS</a>-Modulsystem.</p><p>Benutzer können eine einzelne ausführbare Anwendung aus ihrem gebündelten Skript mit der <code>node</code>-Binärdatei selbst und jedem Tool erstellen, das Ressourcen in die Binärdatei injizieren kann.</p><p>Hier sind die Schritte zum Erstellen einer einzelnen ausführbaren Anwendung mit einem solchen Tool, <a href="https://github.com/nodejs/postject" target="_blank" rel="noreferrer">postject</a>:</p><h2 id="generating-single-executable-preparation-blobs" tabindex="-1">Generieren von Vorbereitungs-Blobs für einzelne ausführbare Dateien <a class="header-anchor" href="#generating-single-executable-preparation-blobs" aria-label="Permalink to “Generieren von Vorbereitungs-Blobs für einzelne ausführbare Dateien”">​</a></h2><p>Vorbereitungs-Blobs für einzelne ausführbare Dateien, die in die Anwendung injiziert werden, können mit dem Flag <code>--experimental-sea-config</code> der Node.js-Binärdatei generiert werden, die zum Erstellen der einzelnen ausführbaren Datei verwendet wird. Es erwartet einen Pfad zu einer Konfigurationsdatei im JSON-Format. Wenn der an sie übergebene Pfad nicht absolut ist, verwendet Node.js den Pfad relativ zum aktuellen Arbeitsverzeichnis.</p><p>Die Konfiguration liest derzeit die folgenden Felder der obersten Ebene:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/bundled/script.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;output&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/write/the/generated/blob.blob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;disableExperimentalSEAWarning&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Standard: false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;useSnapshot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Standard: false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;useCodeCache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Standard: false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;assets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Optional</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;a.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/a.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;b.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/b.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Wenn die Pfade nicht absolut sind, verwendet Node.js den Pfad relativ zum aktuellen Arbeitsverzeichnis. Die Version der Node.js-Binärdatei, die zum Erstellen des Blobs verwendet wird, muss mit der identisch sein, in die der Blob injiziert wird.</p><p>Hinweis: Beim Generieren von plattformübergreifenden SEAs (z. B. Generieren einer SEA für <code>linux-x64</code> unter <code>darwin-arm64</code>) müssen <code>useCodeCache</code> und <code>useSnapshot</code> auf false gesetzt werden, um die Generierung inkompatibler ausführbarer Dateien zu vermeiden. Da Code-Cache und Snapshots nur auf derselben Plattform geladen werden können, auf der sie kompiliert wurden, kann die generierte ausführbare Datei beim Start abstürzen, wenn versucht wird, Code-Cache oder Snapshots zu laden, die auf einer anderen Plattform erstellt wurden.</p><h3 id="assets" tabindex="-1">Assets <a class="header-anchor" href="#assets" aria-label="Permalink to “Assets”">​</a></h3><p>Benutzer können Assets einbinden, indem sie der Konfiguration ein Key-Path-Dictionary als <code>assets</code>-Feld hinzufügen. Während der Build-Zeit liest Node.js die Assets von den angegebenen Pfaden und bündelt sie in den Preparation Blob. In der generierten ausführbaren Datei können Benutzer die Assets mit den APIs <a href="/de/nodejs/api/single-executable-applications#seagetassetkey-encoding"><code>sea.getAsset()</code></a> und <a href="/de/nodejs/api/single-executable-applications#seagetassetasblobkey-options"><code>sea.getAssetAsBlob()</code></a> abrufen.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/pfad/zum/gebündelten/skript.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;output&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/pfad/zum/schreiben/des/generierten/blob.blob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;assets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;a.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/pfad/zu/a.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;b.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/pfad/zu/b.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Die Single-Executable-Anwendung kann wie folgt auf die Assets zugreifen:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getAssetAsBlob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getRawAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:sea&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Gibt eine Kopie der Daten in einem ArrayBuffer zurück.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> image</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Gibt eine aus dem Asset dekodierte Zeichenkette als UTF8 zurück.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Gibt einen Blob zurück, der das Asset enthält.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAssetAsBlob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Gibt einen ArrayBuffer zurück, der das rohe Asset ohne Kopieren enthält.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> raw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRawAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Weitere Informationen finden Sie in der Dokumentation der APIs <a href="/de/nodejs/api/single-executable-applications#seagetassetkey-encoding"><code>sea.getAsset()</code></a>, <a href="/de/nodejs/api/single-executable-applications#seagetassetasblobkey-options"><code>sea.getAssetAsBlob()</code></a> und <a href="/de/nodejs/api/single-executable-applications#seagetrawassetkey"><code>sea.getRawAsset()</code></a>.</p><h3 id="startup-snapshot-support" tabindex="-1">Startup-Snapshot-Unterstützung <a class="header-anchor" href="#startup-snapshot-support" aria-label="Permalink to “Startup-Snapshot-Unterstützung”">​</a></h3><p>Das Feld <code>useSnapshot</code> kann verwendet werden, um die Startup-Snapshot-Unterstützung zu aktivieren. In diesem Fall wird das <code>main</code>-Skript nicht ausgeführt, wenn die endgültige ausführbare Datei gestartet wird. Stattdessen wird es ausgeführt, wenn der Single-Executable-Anwendungsvorbereitungs-Blob auf dem Build-Rechner generiert wird. Der generierte Vorbereitungs-Blob enthält dann einen Snapshot, der die vom <code>main</code>-Skript initialisierten Zustände erfasst. Die endgültige ausführbare Datei mit dem injizierten Vorbereitungs-Blob deserialisiert den Snapshot zur Laufzeit.</p><p>Wenn <code>useSnapshot</code> wahr ist, muss das Hauptskript die API <a href="/de/nodejs/api/v8#v8startupsnapshotsetdeserializemainfunctioncallback-data"><code>v8.startupSnapshot.setDeserializeMainFunction()</code></a> aufrufen, um Code zu konfigurieren, der ausgeführt werden muss, wenn die endgültige ausführbare Datei von den Benutzern gestartet wird.</p><p>Das typische Muster für eine Anwendung, die Snapshots in einer Single-Executable-Anwendung verwendet, ist:</p><p>Die allgemeinen Einschränkungen der Startup-Snapshot-Skripte gelten auch für das Hauptskript, wenn es zum Erstellen von Snapshots für die Single-Executable-Anwendung verwendet wird, und das Hauptskript kann die <a href="/de/nodejs/api/v8#startup-snapshot-api"><code>v8.startupSnapshot</code> API</a> verwenden, um sich an diese Einschränkungen anzupassen. Siehe <a href="/de/nodejs/api/cli#build-snapshot">Dokumentation zur Startup-Snapshot-Unterstützung in Node.js</a>.</p><h3 id="v8-code-cache-support" tabindex="-1">V8-Code-Cache-Unterstützung <a class="header-anchor" href="#v8-code-cache-support" aria-label="Permalink to “V8-Code-Cache-Unterstützung”">​</a></h3><p>Wenn <code>useCodeCache</code> in der Konfiguration auf <code>true</code> gesetzt ist, kompiliert Node.js während der Generierung des einzelnen ausführbaren Vorbereitungs-Blobs das <code>main</code>-Skript, um den V8-Code-Cache zu generieren. Der generierte Code-Cache ist Teil des Vorbereitungs-Blobs und wird in die endgültige ausführbare Datei eingefügt. Wenn die einzelne ausführbare Anwendung gestartet wird, verwendet Node.js den Code-Cache, um die Kompilierung zu beschleunigen, anstatt das <code>main</code>-Skript von Grund auf neu zu kompilieren, und führt dann das Skript aus, was die Startleistung verbessert.</p><p><strong>Hinweis:</strong> <code>import()</code> funktioniert nicht, wenn <code>useCodeCache</code> auf <code>true</code> gesetzt ist.</p><h2 id="in-the-injected-main-script" tabindex="-1">Im eingefügten Hauptskript <a class="header-anchor" href="#in-the-injected-main-script" aria-label="Permalink to “Im eingefügten Hauptskript”">​</a></h2><h3 id="single-executable-application-api" tabindex="-1">Single-Executable-Application-API <a class="header-anchor" href="#single-executable-application-api" aria-label="Permalink to “Single-Executable-Application-API”">​</a></h3><p>Das integrierte <code>node:sea</code>-Modul ermöglicht die Interaktion mit der Single-Executable-Anwendung vom JavaScript-Hauptskript aus, das in die ausführbare Datei eingebettet ist.</p><h4 id="seaissea" tabindex="-1"><code>sea.isSea()</code> <a class="header-anchor" href="#seaissea" aria-label="Permalink to “sea.isSea()”">​</a></h4><p><strong>Hinzugefügt in: v21.7.0, v20.12.0</strong></p><ul><li>Gibt zurück: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> Ob dieses Skript innerhalb einer Single-Executable-Anwendung ausgeführt wird.</li></ul><h3 id="seagetassetkey-encoding" tabindex="-1"><code>sea.getAsset(key[, encoding])</code> <a class="header-anchor" href="#seagetassetkey-encoding" aria-label="Permalink to “sea.getAsset(key[, encoding])”">​</a></h3><p><strong>Hinzugefügt in: v21.7.0, v20.12.0</strong></p><p>Diese Methode kann verwendet werden, um die Assets abzurufen, die so konfiguriert sind, dass sie zur Build-Zeit in die Single-Executable-Anwendung gebündelt werden. Es wird ein Fehler ausgelöst, wenn kein übereinstimmendes Asset gefunden werden kann.</p><ul><li><code>key</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Der Schlüssel für das Asset in dem Dictionary, das durch das Feld <code>assets</code> in der Single-Executable-Application-Konfiguration angegeben wird.</li><li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Wenn angegeben, wird das Asset als Zeichenkette dekodiert. Jede von <code>TextDecoder</code> unterstützte Kodierung wird akzeptiert. Wenn nicht angegeben, wird stattdessen ein <code>ArrayBuffer</code> zurückgegeben, das eine Kopie des Assets enthält.</li><li>Gibt zurück: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a></li></ul><h3 id="seagetassetasblobkey-options" tabindex="-1"><code>sea.getAssetAsBlob(key[, options])</code> <a class="header-anchor" href="#seagetassetasblobkey-options" aria-label="Permalink to “sea.getAssetAsBlob(key[, options])”">​</a></h3><p><strong>Hinzugefügt in: v21.7.0, v20.12.0</strong></p><p>Ähnlich wie <a href="/de/nodejs/api/single-executable-applications#seagetassetkey-encoding"><code>sea.getAsset()</code></a>, aber gibt das Ergebnis als <a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noreferrer"><code>Blob</code></a> zurück. Ein Fehler wird geworfen, wenn kein passendes Asset gefunden werden kann.</p><ul><li><p><code>key</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Der Schlüssel für das Asset im Dictionary, das durch das Feld <code>assets</code> in der Single-Executable-Application-Konfiguration angegeben wird.</p></li><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></p><ul><li><code>type</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Ein optionaler MIME-Typ für den Blob.</li></ul></li><li><p>Gibt zurück: <a href="/de/nodejs/api/buffer#class-blob">&lt;Blob&gt;</a></p></li></ul><h3 id="seagetrawassetkey" tabindex="-1"><code>sea.getRawAsset(key)</code> <a class="header-anchor" href="#seagetrawassetkey" aria-label="Permalink to “sea.getRawAsset(key)”">​</a></h3><p><strong>Hinzugefügt in: v21.7.0, v20.12.0</strong></p><p>Diese Methode kann verwendet werden, um die Assets abzurufen, die so konfiguriert sind, dass sie zur Build-Zeit in die Single-Executable-Application gebündelt werden. Ein Fehler wird geworfen, wenn kein passendes Asset gefunden werden kann.</p><p>Im Gegensatz zu <code>sea.getAsset()</code> oder <code>sea.getAssetAsBlob()</code> gibt diese Methode keine Kopie zurück. Stattdessen gibt sie das rohe Asset zurück, das in die ausführbare Datei gebündelt ist.</p><p>Im Moment sollten Benutzer es vermeiden, in den zurückgegebenen Array-Puffer zu schreiben. Wenn der injizierte Abschnitt nicht als beschreibbar markiert oder nicht richtig ausgerichtet ist, führen Schreibvorgänge in den zurückgegebenen Array-Puffer wahrscheinlich zu einem Absturz.</p><ul><li><code>key</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Der Schlüssel für das Asset im Dictionary, das durch das Feld <code>assets</code> in der Single-Executable-Application-Konfiguration angegeben wird.</li><li>Gibt zurück: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a></li></ul><h3 id="requireid-in-the-injected-main-script-is-not-file-based" tabindex="-1"><code>require(id)</code> im injizierten Hauptskript ist nicht dateibasiert <a class="header-anchor" href="#requireid-in-the-injected-main-script-is-not-file-based" aria-label="Permalink to “require(id) im injizierten Hauptskript ist nicht dateibasiert”">​</a></h3><p><code>require()</code> im injizierten Hauptskript ist nicht dasselbe wie das <a href="/de/nodejs/api/modules#requireid"><code>require()</code></a>, das für Module verfügbar ist, die nicht injiziert werden. Es hat auch keine der Eigenschaften, die nicht-injiziertes <a href="/de/nodejs/api/modules#requireid"><code>require()</code></a> hat, außer <a href="/de/nodejs/api/modules#accessing-the-main-module"><code>require.main</code></a>. Es kann nur verwendet werden, um integrierte Module zu laden. Der Versuch, ein Modul zu laden, das nur im Dateisystem gefunden werden kann, führt zu einem Fehler.</p><p>Anstatt sich auf ein dateibasiertes <code>require()</code> zu verlassen, können Benutzer ihre Anwendung in eine eigenständige JavaScript-Datei bündeln, um sie in die ausführbare Datei zu injizieren. Dies gewährleistet auch einen deterministischeren Abhängigkeitsgraphen.</p><p>Wenn jedoch ein dateibasiertes <code>require()</code> dennoch benötigt wird, kann dies auch erreicht werden:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createRequire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRequire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="__filename-and-modulefilename-in-the-injected-main-script" tabindex="-1"><code>__filename</code> und <code>module.filename</code> im injizierten Hauptskript <a class="header-anchor" href="#__filename-and-modulefilename-in-the-injected-main-script" aria-label="Permalink to “__filename und module.filename im injizierten Hauptskript”">​</a></h3><p>Die Werte von <code>__filename</code> und <code>module.filename</code> im injizierten Hauptskript sind gleich <a href="/de/nodejs/api/process#processexecpath"><code>process.execPath</code></a>.</p><h3 id="__dirname-in-the-injected-main-script" tabindex="-1"><code>__dirname</code> im injizierten Hauptskript <a class="header-anchor" href="#__dirname-in-the-injected-main-script" aria-label="Permalink to “__dirname im injizierten Hauptskript”">​</a></h3><p>Der Wert von <code>__dirname</code> im injizierten Hauptskript ist gleich dem Verzeichnisnamen von <a href="/de/nodejs/api/process#processexecpath"><code>process.execPath</code></a>.</p><h2 id="notes" tabindex="-1">Hinweise <a class="header-anchor" href="#notes" aria-label="Permalink to “Hinweise”">​</a></h2><h3 id="single-executable-application-creation-process" tabindex="-1">Prozess zur Erstellung einer einzelnen ausführbaren Anwendung <a class="header-anchor" href="#single-executable-application-creation-process" aria-label="Permalink to “Prozess zur Erstellung einer einzelnen ausführbaren Anwendung”">​</a></h3><p>Ein Tool, das eine einzelne ausführbare Node.js-Anwendung erstellen soll, muss den Inhalt des mit <code>--experimental-sea-config&quot;</code> vorbereiteten Blobs in Folgendes injizieren:</p><ul><li>Eine Ressource namens <code>NODE_SEA_BLOB</code>, wenn die <code>node</code>-Binärdatei eine <a href="https://en.wikipedia.org/wiki/Portable_Executable" target="_blank" rel="noreferrer">PE</a>-Datei ist.</li><li>Einen Abschnitt namens <code>NODE_SEA_BLOB</code> im <code>NODE_SEA</code>-Segment, wenn die <code>node</code>-Binärdatei eine <a href="https://en.wikipedia.org/wiki/Mach-O" target="_blank" rel="noreferrer">Mach-O</a>-Datei ist.</li><li>Eine Notiz namens <code>NODE_SEA_BLOB</code>, wenn die <code>node</code>-Binärdatei eine <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format" target="_blank" rel="noreferrer">ELF</a>-Datei ist.</li></ul><p>Suchen Sie in der Binärdatei nach der <a href="https://www.electronjs.org/docs/latest/tutorial/fuses" target="_blank" rel="noreferrer">Fuse</a>-Zeichenkette <code>NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2:0</code> und ändern Sie das letzte Zeichen in <code>1</code>, um anzuzeigen, dass eine Ressource injiziert wurde.</p><h3 id="platform-support" tabindex="-1">Plattformunterstützung <a class="header-anchor" href="#platform-support" aria-label="Permalink to “Plattformunterstützung”">​</a></h3><p>Die Unterstützung für einzelne ausführbare Dateien wird im CI-System regelmäßig nur auf den folgenden Plattformen getestet:</p><ul><li>Windows</li><li>macOS</li><li>Linux (alle von Node.js <a href="https://github.com/nodejs/node/blob/main/BUILDING.md#platform-list" target="_blank" rel="noreferrer">unterstützten Distributionen</a> außer Alpine und alle von Node.js <a href="https://github.com/nodejs/node/blob/main/BUILDING.md#platform-list" target="_blank" rel="noreferrer">unterstützten Architekturen</a> außer s390x)</li></ul><p>Dies ist auf das Fehlen besserer Tools zur Erzeugung einzelner ausführbarer Dateien zurückzuführen, mit denen diese Funktion auf anderen Plattformen getestet werden kann.</p><p>Vorschläge für andere Tools/Workflows zur Ressourceninjektion sind willkommen. Bitte starten Sie eine Diskussion unter <a href="https://github.com/nodejs/single-executable/discussions" target="_blank" rel="noreferrer">https://github.com/nodejs/single-executable/discussions</a>, um uns bei der Dokumentation zu helfen.</p>`,68)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};