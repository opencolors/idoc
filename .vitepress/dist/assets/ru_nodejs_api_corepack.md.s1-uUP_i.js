import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Документация Corepack для Node.js","description":"Corepack - это бинарный файл, поставляемый вместе с Node.js, который предоставляет стандартный интерфейс для управления менеджерами пакетов, такими как npm, pnpm и Yarn. Он позволяет пользователям легко переключаться между различными менеджерами пакетов и версиями, обеспечивая совместимость и упрощая рабочий процесс разработки.","frontmatter":{"title":"Документация Corepack для Node.js","description":"Corepack - это бинарный файл, поставляемый вместе с Node.js, который предоставляет стандартный интерфейс для управления менеджерами пакетов, такими как npm, pnpm и Yarn. Он позволяет пользователям легко переключаться между различными менеджерами пакетов и версиями, обеспечивая совместимость и упрощая рабочий процесс разработки.","head":[["meta",{"name":"og:title","content":"Документация Corepack для Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Corepack - это бинарный файл, поставляемый вместе с Node.js, который предоставляет стандартный интерфейс для управления менеджерами пакетов, такими как npm, pnpm и Yarn. Он позволяет пользователям легко переключаться между различными менеджерами пакетов и версиями, обеспечивая совместимость и упрощая рабочий процесс разработки."}],["meta",{"name":"twitter:title","content":"Документация Corepack для Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Corepack - это бинарный файл, поставляемый вместе с Node.js, который предоставляет стандартный интерфейс для управления менеджерами пакетов, такими как npm, pnpm и Yarn. Он позволяет пользователям легко переключаться между различными менеджерами пакетов и версиями, обеспечивая совместимость и упрощая рабочий процесс разработки."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/api/corepack"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/api/corepack"}]]},"headers":[],"relativePath":"ru/nodejs/api/corepack.md","filePath":"ru/nodejs/api/corepack.md","lastUpdated":1749464498000}`),a={name:`ru/nodejs/api/corepack.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="corepack" tabindex="-1">Corepack <a class="header-anchor" href="#corepack" aria-label="Permalink to “Corepack”">​</a></h1><p><strong>Добавлено в: v16.9.0, v14.19.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Стабильность: 1 - Экспериментальный]</p><p><a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 1</a> <a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 1</a> - Экспериментальный</p></div><p><em><a href="https://github.com/nodejs/corepack">Corepack</a></em> - это экспериментальный инструмент, помогающий управлять версиями ваших менеджеров пакетов. Он предоставляет бинарные прокси для каждого <a href="/ru/nodejs/api/corepack#supported-package-managers">поддерживаемого менеджера пакетов</a>, которые при вызове идентифицируют, какой менеджер пакетов настроен для текущего проекта, загружают его при необходимости и, наконец, запускают.</p><p>Несмотря на то, что Corepack распространяется с установками Node.js по умолчанию, менеджеры пакетов, управляемые Corepack, не являются частью дистрибутива Node.js и:</p><ul><li>При первом использовании Corepack загружает последнюю версию из сети.</li><li>Любые необходимые обновления (связанные с уязвимостями безопасности или иные) выходят за рамки проекта Node.js. При необходимости конечные пользователи должны самостоятельно решать, как выполнять обновления.</li></ul><p>Эта функция упрощает два основных рабочих процесса:</p><ul><li>Это облегчает адаптацию новых участников, поскольку им больше не придется следовать специфическим для системы процессам установки, чтобы получить желаемый менеджер пакетов.</li><li>Это позволяет вам убедиться, что каждый член вашей команды будет использовать именно ту версию менеджера пакетов, которую вы хотите, без необходимости вручную синхронизировать ее каждый раз, когда вам нужно внести обновление.</li></ul><h2 id="workflows" tabindex="-1">Рабочие процессы <a class="header-anchor" href="#workflows" aria-label="Permalink to “Рабочие процессы”">​</a></h2><h3 id="enabling-the-feature" tabindex="-1">Включение функции <a class="header-anchor" href="#enabling-the-feature" aria-label="Permalink to “Включение функции”">​</a></h3><p>Из-за своего экспериментального статуса Corepack в настоящее время необходимо явно включить, чтобы он оказал какое-либо влияние. Для этого запустите <a href="https://github.com/nodejs/corepack#corepack-enable--name" target="_blank" rel="noreferrer"><code>corepack enable</code></a>, который установит символические ссылки в вашей среде рядом с двоичным файлом <code>node</code> (и перезапишет существующие символические ссылки, если необходимо).</p><p>С этого момента любой вызов <a href="/ru/nodejs/api/corepack#supported-package-managers">поддерживаемых бинарных файлов</a> будет работать без дальнейшей настройки. Если у вас возникнут проблемы, запустите <a href="https://github.com/nodejs/corepack#corepack-disable--name" target="_blank" rel="noreferrer"><code>corepack disable</code></a>, чтобы удалить прокси из вашей системы (и подумайте об открытии issue в <a href="https://github.com/nodejs/corepack" target="_blank" rel="noreferrer">репозитории Corepack</a>, чтобы сообщить нам об этом).</p><h3 id="configuring-a-package" tabindex="-1">Настройка пакета <a class="header-anchor" href="#configuring-a-package" aria-label="Permalink to “Настройка пакета”">​</a></h3><p>Прокси-серверы Corepack найдут ближайший файл <a href="/ru/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> в иерархии вашей текущей директории, чтобы извлечь его свойство <a href="/ru/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a>.</p><p>Если значение соответствует <a href="/ru/nodejs/api/corepack#supported-package-managers">поддерживаемому менеджеру пакетов</a>, Corepack убедится, что все вызовы соответствующих бинарных файлов выполняются с запрошенной версией, загружая ее по требованию, если это необходимо, и прерывая процесс, если ее не удается успешно получить.</p><p>Вы можете использовать <a href="https://github.com/nodejs/corepack#corepack-use-nameversion" target="_blank" rel="noreferrer"><code>corepack use</code></a>, чтобы попросить Corepack обновить ваш локальный <code>package.json</code> для использования менеджера пакетов по вашему выбору:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # устанавливает последнюю версию 7.x в package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # устанавливает последнюю версию в package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="upgrading-the-global-versions" tabindex="-1">Обновление глобальных версий <a class="header-anchor" href="#upgrading-the-global-versions" aria-label="Permalink to “Обновление глобальных версий”">​</a></h3><p>При запуске вне существующего проекта (например, при запуске <code>yarn init</code>), Corepack по умолчанию будет использовать предопределенные версии, примерно соответствующие последним стабильным выпускам каждого инструмента. Эти версии можно переопределить, запустив команду <a href="https://github.com/nodejs/corepack#corepack-install--g--global---all--nameversion" target="_blank" rel="noreferrer"><code>corepack install</code></a> вместе с версией менеджера пакетов, которую вы хотите установить:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Альтернативно, можно использовать тег или диапазон:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn@stable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="offline-workflow" tabindex="-1">Автономный режим работы <a class="header-anchor" href="#offline-workflow" aria-label="Permalink to “Автономный режим работы”">​</a></h3><p>Многие производственные среды не имеют доступа к сети. Поскольку Corepack обычно загружает выпуски менеджеров пакетов непосредственно из их реестров, это может конфликтовать с такими средами. Чтобы избежать этого, вызовите команду <a href="https://github.com/nodejs/corepack#corepack-pack---all--nameversion" target="_blank" rel="noreferrer"><code>corepack pack</code></a>, пока у вас еще есть доступ к сети (обычно одновременно с подготовкой образа для развертывания). Это гарантирует, что необходимые менеджеры пакетов будут доступны даже без доступа к сети.</p><p>Команда <code>pack</code> имеет <a href="https://github.com/nodejs/corepack#utility-commands" target="_blank" rel="noreferrer">различные флаги</a>. Обратитесь к подробной <a href="https://github.com/nodejs/corepack#readme" target="_blank" rel="noreferrer">документации Corepack</a> для получения дополнительной информации.</p><h2 id="supported-package-managers" tabindex="-1">Поддерживаемые менеджеры пакетов <a class="header-anchor" href="#supported-package-managers" aria-label="Permalink to “Поддерживаемые менеджеры пакетов”">​</a></h2><p>Через Corepack предоставляются следующие бинарные файлы:</p><table tabindex="0"><thead><tr><th>Менеджер пакетов</th><th>Имена бинарных файлов</th></tr></thead><tbody><tr><td><a href="https://yarnpkg.com/" target="_blank" rel="noreferrer">Yarn</a></td><td><code>yarn</code> , <code>yarnpkg</code></td></tr><tr><td><a href="https://pnpm.io/" target="_blank" rel="noreferrer">pnpm</a></td><td><code>pnpm</code> , <code>pnpx</code></td></tr></tbody></table><h2 id="common-questions" tabindex="-1">Часто задаваемые вопросы <a class="header-anchor" href="#common-questions" aria-label="Permalink to “Часто задаваемые вопросы”">​</a></h2><h3 id="how-does-corepack-interact-with-npm?" tabindex="-1">Как Corepack взаимодействует с npm? <a class="header-anchor" href="#how-does-corepack-interact-with-npm?" aria-label="Permalink to “Как Corepack взаимодействует с npm?”">​</a></h3><p>Хотя Corepack может поддерживать npm как любой другой менеджер пакетов, его шимы не включены по умолчанию. Это имеет несколько последствий:</p><ul><li>Всегда можно выполнить команду <code>npm</code> в проекте, настроенном для использования с другим менеджером пакетов, поскольку Corepack не может перехватить ее.</li><li>Хотя <code>npm</code> является допустимым вариантом в свойстве <a href="/ru/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a>, отсутствие шима приведет к использованию глобального npm.</li></ul><h3 id="running-npm-install--g-yarn-doesnt-work" tabindex="-1">Запуск <code>npm install -g yarn</code> не работает <a class="header-anchor" href="#running-npm-install--g-yarn-doesnt-work" aria-label="Permalink to “Запуск npm install -g yarn не работает”">​</a></h3><p>npm предотвращает случайную перезапись бинарных файлов Corepack при выполнении глобальной установки. Чтобы избежать этой проблемы, рассмотрите один из следующих вариантов:</p><ul><li>Не запускайте эту команду; Corepack в любом случае предоставит бинарные файлы менеджера пакетов и обеспечит постоянную доступность запрошенных версий, поэтому установка менеджеров пакетов явным образом не требуется.</li><li>Добавьте флаг <code>--force</code> к <code>npm install</code>; это сообщит npm, что перезапись бинарных файлов допустима, но при этом вы сотрете бинарные файлы Corepack. (Запустите <a href="https://github.com/nodejs/corepack#corepack-enable--name" target="_blank" rel="noreferrer"><code>corepack enable</code></a>, чтобы добавить их обратно.)</li></ul>`,35)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};