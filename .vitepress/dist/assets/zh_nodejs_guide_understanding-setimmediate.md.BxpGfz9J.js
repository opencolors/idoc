import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"理解 Node.js 中的 setImmediate()","description":"了解 Node.js 中 setImmediate() 的工作原理、与 setTimeout()、process.nextTick() 和 Promise.then() 的区别，以及如何与事件循环和队列交互。","frontmatter":{"title":"理解 Node.js 中的 setImmediate()","description":"了解 Node.js 中 setImmediate() 的工作原理、与 setTimeout()、process.nextTick() 和 Promise.then() 的区别，以及如何与事件循环和队列交互。","head":[["meta",{"name":"og:title","content":"理解 Node.js 中的 setImmediate() | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"了解 Node.js 中 setImmediate() 的工作原理、与 setTimeout()、process.nextTick() 和 Promise.then() 的区别，以及如何与事件循环和队列交互。"}],["meta",{"name":"twitter:title","content":"理解 Node.js 中的 setImmediate() | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"了解 Node.js 中 setImmediate() 的工作原理、与 setTimeout()、process.nextTick() 和 Promise.then() 的区别，以及如何与事件循环和队列交互。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/guide/understanding-setimmediate"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/guide/understanding-setimmediate"}]]},"headers":[],"relativePath":"zh/nodejs/guide/understanding-setimmediate.md","filePath":"zh/nodejs/guide/understanding-setimmediate.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/guide/understanding-setimmediate.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="理解-setimmediate" tabindex="-1">理解 <code>setImmediate()</code> <a class="header-anchor" href="#理解-setimmediate" aria-label="Permalink to “理解 setImmediate()”">​</a></h1><p>当你想异步执行一些代码，并且尽快执行时，一个选择是使用 Node.js 提供的 <code>setImmediate()</code> 函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 做一些事情</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>任何作为 <code>setImmediate()</code> 参数传递的函数都是一个回调函数，它会在事件循环的下一次迭代中执行。</p><p><code>setImmediate()</code> 与 <code>setTimeout(() =&gt; {}, 0)</code> (传递一个 0 毫秒的超时时间)，以及 <code>process.nextTick()</code> 和 <code>Promise.then()</code> 有何不同？</p><p>传递给 <code>process.nextTick()</code> 的函数将在事件循环的当前迭代中，在当前操作结束后执行。这意味着它总是会在 <code>setTimeout</code> 和 <code>setImmediate</code> 之前执行。</p><p>具有 0 毫秒延迟的 <code>setTimeout()</code> 回调函数与 <code>setImmediate()</code> 非常相似。执行顺序将取决于各种因素，但它们都将在事件循环的下一次迭代中运行。</p><p><code>process.nextTick</code> 回调函数被添加到 <strong>process.nextTick 队列</strong>。<code>Promise.then()</code> 回调函数被添加到 promise <strong>微任务队列</strong>。<code>setTimeout</code>，<code>setImmediate</code> 回调函数被添加到 <strong>宏任务队列</strong>。</p><p>事件循环首先执行 <strong>process.nextTick 队列</strong> 中的任务，然后执行 <strong>promise 微任务队列</strong>，最后执行 <code>setTimeout</code> 或 <code>setImmediate</code> <strong>宏任务队列</strong>。</p><p>这是一个展示 <code>setImmediate()</code>、<code>process.nextTick()</code> 和 <code>Promise.then()</code> 之间顺序的例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> zoo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zoo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baz);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(zoo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start foo bar zoo baz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这段代码首先调用 <code>start()</code>，然后在 <strong>process.nextTick 队列</strong> 中调用 <code>foo()</code>。之后，它将处理 <strong>promise 微任务队列</strong>，这会打印 bar 并在同时在 <strong>process.nextTick 队列</strong> 中添加 <code>zoo()</code>。然后它将调用刚刚添加的 <code>zoo()</code>。最后，调用 <strong>宏任务队列</strong> 中的 <code>baz()</code>。</p><p>上述原则在 CommonJS 情况下是成立的，但请记住在 ES Modules 中，例如 <code>mjs</code> 文件，执行顺序将有所不同：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start bar foo zoo baz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这是因为加载的 ES Module 被包装为一个异步操作，因此整个脚本实际上已经在 <code>promise 微任务队列</code> 中。所以当 promise 被立即 resolve 时，它的回调会被附加到 <code>微任务队列</code>。Node.js 将尝试清除队列，直到移动到任何其他队列，因此你会看到它首先输出 bar。</p>`,15)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};