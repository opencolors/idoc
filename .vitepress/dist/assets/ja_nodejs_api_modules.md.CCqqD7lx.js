import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js ドキュメント - モジュール","description":"Node.jsのモジュールに関するドキュメントを探求し、CommonJS、ESモジュール、依存関係の管理、モジュールの解決方法を学びましょう。","frontmatter":{"title":"Node.js ドキュメント - モジュール","description":"Node.jsのモジュールに関するドキュメントを探求し、CommonJS、ESモジュール、依存関係の管理、モジュールの解決方法を学びましょう。","head":[["meta",{"name":"og:title","content":"Node.js ドキュメント - モジュール | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.jsのモジュールに関するドキュメントを探求し、CommonJS、ESモジュール、依存関係の管理、モジュールの解決方法を学びましょう。"}],["meta",{"name":"twitter:title","content":"Node.js ドキュメント - モジュール | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.jsのモジュールに関するドキュメントを探求し、CommonJS、ESモジュール、依存関係の管理、モジュールの解決方法を学びましょう。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/modules"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/modules"}]]},"headers":[],"relativePath":"ja/nodejs/api/modules.md","filePath":"ja/nodejs/api/modules.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/api/modules.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="modules-commonjs-modules" tabindex="-1">Modules: CommonJS モジュール <a class="header-anchor" href="#modules-commonjs-modules" aria-label="Permalink to “Modules: CommonJS モジュール”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 2</a> - 安定</p></div><p>CommonJS モジュールは、Node.js 向けに JavaScript コードをパッケージ化する元々の方法です。Node.js は、ブラウザやその他の JavaScript ランタイムで使用される <a href="/ja/nodejs/api/esm">ECMAScript モジュール</a> 標準もサポートしています。</p><p>Node.js では、各ファイルは個別のモジュールとして扱われます。たとえば、<code>foo.js</code> という名前のファイルを考えてみましょう。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> circle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./circle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`半径 4 の円の面積は \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">circle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>最初の行で、<code>foo.js</code> は <code>foo.js</code> と同じディレクトリにあるモジュール <code>circle.js</code> をロードしています。</p><p><code>circle.js</code> の内容は次のとおりです。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">circumference</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>モジュール <code>circle.js</code> は、関数 <code>area()</code> と <code>circumference()</code> をエクスポートしました。関数とオブジェクトは、特別な <code>exports</code> オブジェクトに追加のプロパティを指定することで、モジュールのルートに追加されます。</p><p>モジュール内のローカル変数は、Node.js によってモジュールが関数でラップされているため、プライベートになります ( <a href="/ja/nodejs/api/modules#the-module-wrapper">モジュールラッパー</a> を参照)。この例では、変数 <code>PI</code> は <code>circle.js</code> に対してプライベートです。</p><p><code>module.exports</code> プロパティには、新しい値 (関数やオブジェクトなど) を割り当てることができます。</p><p>次のコードでは、<code>bar.js</code> は Square クラスをエクスポートする <code>square</code> モジュールを使用しています。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Square</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./square.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mySquare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`mySquare の面積は \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mySquare</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">area</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>square</code> モジュールは <code>square.js</code> で定義されています。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// exports への割り当てはモジュールを変更しません。module.exports を使用する必要があります。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>CommonJS モジュールシステムは、<a href="/ja/nodejs/api/module"><code>module</code> コアモジュール</a> に実装されています。</p><h2 id="enabling" tabindex="-1">有効化 <a class="header-anchor" href="#enabling" aria-label="Permalink to “有効化”">​</a></h2><p>Node.js には、CommonJS モジュールと <a href="/ja/nodejs/api/esm">ECMAScript モジュール</a> の 2 つのモジュールシステムがあります。</p><p>デフォルトでは、Node.js は次を CommonJS モジュールとして扱います。</p><ul><li><code>.cjs</code> 拡張子のファイル。</li><li>最も近い親 <code>package.json</code> ファイルに <code>&quot;commonjs&quot;</code> の値を持つトップレベルのフィールド <a href="/ja/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> が含まれている場合の <code>.js</code> 拡張子のファイル。</li><li>最も近い親 <code>package.json</code> ファイルにトップレベルのフィールド <a href="/ja/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> が含まれていない場合、または親フォルダーに <code>package.json</code> がない場合の <code>.js</code> 拡張子のファイル、または拡張子のないファイル。ただし、ファイルに ES モジュールとして評価されない限りエラーになる構文が含まれている場合は除きます。パッケージの作成者は、すべてのソースが CommonJS であるパッケージでも、<a href="/ja/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> フィールドを含める必要があります。パッケージの <code>type</code> を明示的にすることで、ビルドツールとローダーがパッケージ内のファイルをどのように解釈するかを判断しやすくなります。</li><li><code>.mjs</code>、<code>.cjs</code>、<code>.json</code>、<code>.node</code>、または <code>.js</code> ではない拡張子のファイル (最も近い親 <code>package.json</code> ファイルに <code>&quot;module&quot;</code> の値を持つトップレベルのフィールド <a href="/ja/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> が含まれている場合、これらのファイルはプログラムのコマンドラインエントリポイントとして使用される場合はなく、<code>require()</code> 経由で含まれている場合にのみ CommonJS モジュールとして認識されます)。</li></ul><p>詳細については、<a href="/ja/nodejs/api/packages#determining-module-system">モジュールシステムの決定</a> を参照してください。</p><p><code>require()</code> の呼び出しは常に CommonJS モジュールローダーを使用します。<code>import()</code> の呼び出しは常に ECMAScript モジュールローダーを使用します。</p><h2 id="accessing-the-main-module" tabindex="-1">メインモジュールへのアクセス <a class="header-anchor" href="#accessing-the-main-module" aria-label="Permalink to “メインモジュールへのアクセス”">​</a></h2><p>Node.jsから直接ファイルが実行されると、<code>require.main</code>はその<code>module</code>に設定されます。つまり、<code>require.main === module</code>をテストすることで、ファイルが直接実行されたかどうかを判断できます。</p><p>ファイル <code>foo.js</code> の場合、<code>node foo.js</code> を介して実行される場合はこれが <code>true</code> になりますが、<code>require(&#39;./foo&#39;)</code> で実行される場合は <code>false</code> になります。</p><p>エントリポイントが CommonJS モジュールでない場合、<code>require.main</code> は <code>undefined</code> であり、メインモジュールにアクセスできません。</p><h2 id="package-manager-tips" tabindex="-1">パッケージマネージャーのヒント <a class="header-anchor" href="#package-manager-tips" aria-label="Permalink to “パッケージマネージャーのヒント”">​</a></h2><p>Node.jsの <code>require()</code> 関数のセマンティクスは、合理的なディレクトリ構造をサポートするのに十分な汎用性を持つように設計されました。<code>dpkg</code>、<code>rpm</code>、<code>npm</code> などのパッケージマネージャープログラムは、Node.jsモジュールからネイティブパッケージを修正なしで構築できることが期待されます。</p><p>以下に、うまく機能する可能性のある推奨されるディレクトリ構造を示します。</p><p><code>/usr/lib/node/\\&lt;some-package\\&gt;/\\&lt;some-version\\&gt;</code> にパッケージの特定のバージョンの内容を保持したいとしましょう。</p><p>パッケージは互いに依存する可能性があります。パッケージ <code>foo</code> をインストールするには、パッケージ <code>bar</code> の特定のバージョンをインストールする必要がある場合があります。<code>bar</code> パッケージ自体に依存関係がある可能性があり、場合によっては、これらが衝突したり、循環依存関係を形成したりすることさえあります。</p><p>Node.jsは、ロードするすべてのモジュールの <code>realpath</code> を検索し（つまり、シンボリックリンクを解決します）、次に <a href="/ja/nodejs/api/modules#loading-from-node-modules-folders">それらの依存関係を <code>node_modules</code> フォルダーで検索する</a> ため、この状況は次のアーキテクチャで解決できます。</p><ul><li><code>/usr/lib/node/foo/1.2.3/</code>: <code>foo</code> パッケージの内容（バージョン1.2.3）。</li><li><code>/usr/lib/node/bar/4.3.2/</code>: <code>foo</code> が依存する <code>bar</code> パッケージの内容。</li><li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code>: <code>/usr/lib/node/bar/4.3.2/</code> へのシンボリックリンク。</li><li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code>: <code>bar</code> が依存するパッケージへのシンボリックリンク。</li></ul><p>したがって、サイクルが発生した場合でも、依存関係の競合がある場合でも、すべてのモジュールは使用できる依存関係のバージョンを取得できます。</p><p><code>foo</code> パッケージのコードが <code>require(&#39;bar&#39;)</code> を実行すると、<code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> にシンボリックリンクされているバージョンが取得されます。次に、<code>bar</code> パッケージのコードが <code>require(&#39;quux&#39;)</code> を呼び出すと、<code>/usr/lib/node/bar/4.3.2/node_modules/quux</code> にシンボリックリンクされているバージョンが取得されます。</p><p>さらに、モジュールの検索プロセスをさらに最適化するために、パッケージを <code>/usr/lib/node</code> に直接配置するのではなく、<code>/usr/lib/node_modules/\\&lt;name\\&gt;/\\&lt;version\\&gt;</code> に配置することができます。これにより、Node.jsは <code>/usr/node_modules</code> または <code>/node_modules</code> で見つからない依存関係を探す手間が省けます。</p><p>モジュールをNode.js REPLで使用できるようにするには、<code>$NODE_PATH</code> 環境変数に <code>/usr/lib/node_modules</code> フォルダーを追加すると便利な場合があります。<code>node_modules</code> フォルダーを使用したモジュールの検索はすべて相対的であり、<code>require()</code> の呼び出しを行うファイルの実際のパスに基づいているため、パッケージ自体はどこにでも配置できます。</p><h2 id="loading-ecmascript-modules-using-require" tabindex="-1"><code>require()</code> を使用した ECMAScript モジュールの読み込み <a class="header-anchor" href="#loading-ecmascript-modules-using-require" aria-label="Permalink to “require() を使用した ECMAScript モジュールの読み込み”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v23.5.0</td><td>この機能はデフォルトで実験的な警告を表示しなくなりましたが、<code>--trace-require-module</code> で警告を表示することは可能です。</td></tr><tr><td>v23.0.0</td><td>この機能は <code>--experimental-require-module</code> CLI フラグの背後にはありません。</td></tr><tr><td>v23.0.0</td><td><code>require(esm)</code> で <code>&#39;module.exports&#39;</code> 相互運用エクスポートをサポート。</td></tr><tr><td>v22.0.0, v20.17.0</td><td>v22.0.0, v20.17.0 で追加</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a>.2 - リリース候補</p></div><p><code>.mjs</code> 拡張子は <a href="/ja/nodejs/api/esm">ECMAScript モジュール</a> 用に予約されています。 どのファイルが ECMAScript モジュールとして解析されるかについての詳細は、<a href="/ja/nodejs/api/packages#determining-module-system">モジュールシステムの決定</a> セクションを参照してください。</p><p><code>require()</code> は、次の要件を満たす ECMAScript モジュールの読み込みのみをサポートします。</p><ul><li>モジュールが完全に同期していること（トップレベルの <code>await</code> を含まない）。そして</li><li>次のいずれかの条件が満たされていること:</li></ul><p>ロードされる ES モジュールが要件を満たしている場合、<code>require()</code> はそれをロードしてモジュール名前空間オブジェクトを返すことができます。 この場合、動的な <code>import()</code> に似ていますが、同期的に実行され、名前空間オブジェクトを直接返します。</p><p>次の ES モジュールがあるとします。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// distance.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// point.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>CommonJS モジュールは <code>require()</code> でロードできます:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./distance.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(distance);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [Module: null prototype] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   distance: [Function: distance]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./point.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(point);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [Module: null prototype] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   default: [class Point],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   __esModule: true,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>ES モジュールを CommonJS に変換する既存のツールとの相互運用性のために、<code>require()</code> を介して実際 ES モジュールをロードできる場合は、<code>default</code> エクスポートがある場合、返される名前空間には <code>__esModule: true</code> プロパティが含まれます。これにより、ツールによって生成された消費コードは、実際の ES モジュールでデフォルトのエクスポートを認識できます。 名前空間がすでに <code>__esModule</code> を定義している場合、これは追加されません。 このプロパティは実験的であり、将来変更される可能性があります。 これは、既存のエコシステム規約に従って、ES モジュールを CommonJS モジュールに変換するツールのみが使用する必要があります。 CommonJS で直接作成されたコードは、それに依存することを避ける必要があります。</p><p>ES モジュールに名前付きエクスポートとデフォルトエクスポートの両方が含まれている場合、<code>require()</code> によって返される結果はモジュール名前空間オブジェクトであり、<code>import()</code> によって返される結果と同様に、デフォルトのエクスポートを <code>.default</code> プロパティに配置します。 <code>require(esm)</code> で直接返されるものをカスタマイズするには、ES モジュールは文字列名 <code>&quot;module.exports&quot;</code> を使用して目的の値をエクスポートできます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// point.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`distance\` は、静的プロパティとして \`Point\` に追加されない限り、このモジュールの CommonJS コンシューマーには失われます。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;module.exports&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./point.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Point); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [class Point]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;module.exports&#39; が使用されている場合、名前付きエクスポートは失われます</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./point.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(distance); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上記の例では、<code>module.exports</code> エクスポート名が使用されている場合、名前付きエクスポートは CommonJS コンシューマーには失われることに注意してください。 CommonJS コンシューマーが名前付きエクスポートへのアクセスを継続できるようにするために、モジュールは、デフォルトのエクスポートが、プロパティとして添付された名前付きエクスポートを持つオブジェクトであることを確認できます。 たとえば、上記の例では、<code>distance</code> は静的メソッドとしてデフォルトのエクスポートである <code>Point</code> クラスにアタッチできます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> distance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;module.exports&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./point.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Point); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [class Point]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./point.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(distance); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [Function: distance]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>require()</code> されるモジュールにトップレベルの <code>await</code> が含まれている場合、または <code>import</code> するモジュールグラフにトップレベルの <code>await</code> が含まれている場合、<a href="/ja/nodejs/api/errors#err-require-async-module"><code>ERR_REQUIRE_ASYNC_MODULE</code></a> がスローされます。 この場合、ユーザーは <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import" target="_blank" rel="noreferrer"><code>import()</code></a> を使用して非同期モジュールをロードする必要があります。</p><p><code>--experimental-print-required-tla</code> が有効になっている場合、評価前に <code>ERR_REQUIRE_ASYNC_MODULE</code> をスローする代わりに、Node.js はモジュールを評価し、トップレベルの await を特定しようとし、ユーザーがそれらを修正するのに役立つように場所を出力します。</p><p><code>require()</code> を使用した ES モジュールのロードのサポートは現在実験的であり、<code>--no-experimental-require-module</code> を使用して無効にできます。 この機能が使用されている場所を出力するには、<a href="/ja/nodejs/api/cli#trace-require-modulemode"><code>--trace-require-module</code></a> を使用します。</p><p>この機能は、<a href="/ja/nodejs/api/process#processfeaturesrequire-module"><code>process.features.require_module</code></a> が <code>true</code> かどうかを確認することで検出できます。</p><h2 id="all-together" tabindex="-1">まとめ <a class="header-anchor" href="#all-together" aria-label="Permalink to “まとめ”">​</a></h2><p><code>require()</code> が呼び出されたときにロードされる正確なファイル名を取得するには、<code>require.resolve()</code> 関数を使用します。</p><p>上記のすべてをまとめると、<code>require()</code> が行うことの擬似コードによる高レベルのアルゴリズムは次のとおりです。</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>require(X) from module at path Y</span></span>
<span class="line"><span>1. Xがコアモジュールである場合、</span></span>
<span class="line"><span>   a. コアモジュールを返す</span></span>
<span class="line"><span>   b. 停止</span></span>
<span class="line"><span>2. Xが&#39;/&#39;で始まる場合、</span></span>
<span class="line"><span>   a. Yをファイルシステムのルートに設定する</span></span>
<span class="line"><span>3. Xが&#39;./&#39;、&#39;/&#39;、または&#39;../&#39;で始まる場合、</span></span>
<span class="line"><span>   a. LOAD_AS_FILE(Y + X)</span></span>
<span class="line"><span>   b. LOAD_AS_DIRECTORY(Y + X)</span></span>
<span class="line"><span>   c. &quot;not found&quot; を投げる</span></span>
<span class="line"><span>4. Xが&#39;#&#39;で始まる場合、</span></span>
<span class="line"><span>   a. LOAD_PACKAGE_IMPORTS(X, dirname(Y))</span></span>
<span class="line"><span>5. LOAD_PACKAGE_SELF(X, dirname(Y))</span></span>
<span class="line"><span>6. LOAD_NODE_MODULES(X, dirname(Y))</span></span>
<span class="line"><span>7. &quot;not found&quot; を投げる</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MAYBE_DETECT_AND_LOAD(X)</span></span>
<span class="line"><span>1. XがCommonJSモジュールとして解析される場合、XをCommonJSモジュールとしてロードする。停止。</span></span>
<span class="line"><span>2. それ以外の場合、Xのソースコードが&lt;a href=&quot;esm.md#resolver-algorithm-specification&quot;&gt;ESMリゾルバーで定義されているDETECT_MODULE_SYNTAX&lt;/a&gt;を使用してECMAScriptモジュールとして解析できる場合、</span></span>
<span class="line"><span>  a. XをECMAScriptモジュールとしてロードする。停止。</span></span>
<span class="line"><span>3. 1.でXをCommonJSとして解析しようとしたSyntaxErrorを投げる。停止。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_AS_FILE(X)</span></span>
<span class="line"><span>1. Xがファイルの場合、Xをそのファイル拡張子形式としてロードする。停止</span></span>
<span class="line"><span>2. X.jsがファイルの場合、</span></span>
<span class="line"><span>    a. Xに最も近いパッケージスコープ SCOPE を見つける。</span></span>
<span class="line"><span>    b. スコープが見つからない場合</span></span>
<span class="line"><span>      1. MAYBE_DETECT_AND_LOAD(X.js)</span></span>
<span class="line"><span>    c. SCOPE/package.jsonに &quot;type&quot; フィールドが含まれている場合、</span></span>
<span class="line"><span>      1. &quot;type&quot; フィールドが &quot;module&quot; の場合、X.jsをECMAScriptモジュールとしてロードする。停止。</span></span>
<span class="line"><span>      2. &quot;type&quot; フィールドが &quot;commonjs&quot; の場合、X.jsをCommonJSモジュールとしてロードする。停止。</span></span>
<span class="line"><span>    d. MAYBE_DETECT_AND_LOAD(X.js)</span></span>
<span class="line"><span>3. X.jsonがファイルの場合、X.jsonをJavaScriptオブジェクトにロードする。停止</span></span>
<span class="line"><span>4. X.nodeがファイルの場合、X.nodeをバイナリaddonとしてロードする。停止</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_INDEX(X)</span></span>
<span class="line"><span>1. X/index.jsがファイルの場合</span></span>
<span class="line"><span>    a. Xに最も近いパッケージスコープ SCOPE を見つける。</span></span>
<span class="line"><span>    b. スコープが見つからない場合、X/index.jsをCommonJSモジュールとしてロードする。停止。</span></span>
<span class="line"><span>    c. SCOPE/package.jsonに &quot;type&quot; フィールドが含まれている場合、</span></span>
<span class="line"><span>      1. &quot;type&quot; フィールドが &quot;module&quot; の場合、X/index.jsをECMAScriptモジュールとしてロードする。停止。</span></span>
<span class="line"><span>      2. それ以外の場合、X/index.jsをCommonJSモジュールとしてロードする。停止。</span></span>
<span class="line"><span>2. X/index.jsonがファイルの場合、X/index.jsonをJavaScriptオブジェクトに解析する。停止</span></span>
<span class="line"><span>3. X/index.nodeがファイルの場合、X/index.nodeをバイナリaddonとしてロードする。停止</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_AS_DIRECTORY(X)</span></span>
<span class="line"><span>1. X/package.jsonがファイルの場合、</span></span>
<span class="line"><span>   a. X/package.jsonを解析し、&quot;main&quot; フィールドを探す。</span></span>
<span class="line"><span>   b. &quot;main&quot; が falsy な値の場合、2. に GOTO する。</span></span>
<span class="line"><span>   c. let M = X + (json main フィールド)</span></span>
<span class="line"><span>   d. LOAD_AS_FILE(M)</span></span>
<span class="line"><span>   e. LOAD_INDEX(M)</span></span>
<span class="line"><span>   f. LOAD_INDEX(X) DEPRECATED</span></span>
<span class="line"><span>   g. &quot;not found&quot; を投げる</span></span>
<span class="line"><span>2. LOAD_INDEX(X)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_NODE_MODULES(X, START)</span></span>
<span class="line"><span>1. let DIRS = NODE_MODULES_PATHS(START)</span></span>
<span class="line"><span>2. DIRS の各 DIR について:</span></span>
<span class="line"><span>   a. LOAD_PACKAGE_EXPORTS(X, DIR)</span></span>
<span class="line"><span>   b. LOAD_AS_FILE(DIR/X)</span></span>
<span class="line"><span>   c. LOAD_AS_DIRECTORY(DIR/X)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>NODE_MODULES_PATHS(START)</span></span>
<span class="line"><span>1. let PARTS = path split(START)</span></span>
<span class="line"><span>2. let I = PARTS のカウント - 1</span></span>
<span class="line"><span>3. let DIRS = []</span></span>
<span class="line"><span>4. while I &gt;= 0,</span></span>
<span class="line"><span>   a. if PARTS[I] = &quot;node_modules&quot;, GOTO d.</span></span>
<span class="line"><span>   b. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)</span></span>
<span class="line"><span>   c. DIRS = DIR + DIRS</span></span>
<span class="line"><span>   d. let I = I - 1</span></span>
<span class="line"><span>5. DIRS + GLOBAL_FOLDERS を返す</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_PACKAGE_IMPORTS(X, DIR)</span></span>
<span class="line"><span>1. DIR に最も近いパッケージスコープ SCOPE を見つける。</span></span>
<span class="line"><span>2. スコープが見つからない場合、戻る。</span></span>
<span class="line"><span>3. SCOPE/package.json &quot;imports&quot; が null または undefined の場合、戻る。</span></span>
<span class="line"><span>4. \`--experimental-require-module\` が有効になっている場合</span></span>
<span class="line"><span>  a. let CONDITIONS = [&quot;node&quot;, &quot;require&quot;, &quot;module-sync&quot;]</span></span>
<span class="line"><span>  b. それ以外の場合、let CONDITIONS = [&quot;node&quot;, &quot;require&quot;]</span></span>
<span class="line"><span>5. let MATCH = PACKAGE_IMPORTS_RESOLVE(X, pathToFileURL(SCOPE),</span></span>
<span class="line"><span>  CONDITIONS) &lt;a href=&quot;esm.md#resolver-algorithm-specification&quot;&gt;ESMリゾルバーで定義されています&lt;/a&gt;。</span></span>
<span class="line"><span>6. RESOLVE_ESM_MATCH(MATCH).</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_PACKAGE_EXPORTS(X, DIR)</span></span>
<span class="line"><span>1. XをNAMEとSUBPATHの組み合わせとして解釈してみてください。ここで、名前には@scope/プレフィックスが付いており、サブパスはスラッシュ（\`/\`）で始まります。</span></span>
<span class="line"><span>2. Xがこのパターンに一致しないか、DIR/NAME/package.jsonがファイルでない場合、</span></span>
<span class="line"><span>   戻る。</span></span>
<span class="line"><span>3. DIR/NAME/package.jsonを解析し、&quot;exports&quot; フィールドを探す。</span></span>
<span class="line"><span>4. &quot;exports&quot; が null または undefined の場合、戻る。</span></span>
<span class="line"><span>5. \`--experimental-require-module\` が有効になっている場合</span></span>
<span class="line"><span>  a. let CONDITIONS = [&quot;node&quot;, &quot;require&quot;, &quot;module-sync&quot;]</span></span>
<span class="line"><span>  b. それ以外の場合、let CONDITIONS = [&quot;node&quot;, &quot;require&quot;]</span></span>
<span class="line"><span>6. let MATCH = PACKAGE_EXPORTS_RESOLVE(pathToFileURL(DIR/NAME), &quot;.&quot; + SUBPATH,</span></span>
<span class="line"><span>   \`package.json\` &quot;exports&quot;, CONDITIONS) &lt;a href=&quot;esm.md#resolver-algorithm-specification&quot;&gt;ESMリゾルバーで定義されています&lt;/a&gt;。</span></span>
<span class="line"><span>7. RESOLVE_ESM_MATCH(MATCH)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOAD_PACKAGE_SELF(X, DIR)</span></span>
<span class="line"><span>1. DIR に最も近いパッケージスコープ SCOPE を見つける。</span></span>
<span class="line"><span>2. スコープが見つからない場合、戻る。</span></span>
<span class="line"><span>3. SCOPE/package.json &quot;exports&quot; が null または undefined の場合、戻る。</span></span>
<span class="line"><span>4. SCOPE/package.json &quot;name&quot; がXの最初のセグメントでない場合、戻る。</span></span>
<span class="line"><span>5. let MATCH = PACKAGE_EXPORTS_RESOLVE(pathToFileURL(SCOPE),</span></span>
<span class="line"><span>   &quot;.&quot; + X.slice(&quot;name&quot;.length), \`package.json\` &quot;exports&quot;, [&quot;node&quot;, &quot;require&quot;])</span></span>
<span class="line"><span>   &lt;a href=&quot;esm.md#resolver-algorithm-specification&quot;&gt;ESMリゾルバーで定義されています&lt;/a&gt;。</span></span>
<span class="line"><span>6. RESOLVE_ESM_MATCH(MATCH)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>RESOLVE_ESM_MATCH(MATCH)</span></span>
<span class="line"><span>1. let RESOLVED_PATH = fileURLToPath(MATCH)</span></span>
<span class="line"><span>2. RESOLVED_PATHのファイルが存在する場合、RESOLVED_PATHをその拡張子</span></span>
<span class="line"><span>   形式としてロードする。停止</span></span>
<span class="line"><span>3. &quot;not found&quot; を投げる</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br></div></div><h2 id="caching" tabindex="-1">キャッシュ <a class="header-anchor" href="#caching" aria-label="Permalink to “キャッシュ”">​</a></h2><p>モジュールは、最初にロードされた後にキャッシュされます。 これは、（とりわけ）<code>require(&#39;foo&#39;)</code>のすべての呼び出しが、同じファイルに解決される場合、まったく同じオブジェクトが返されることを意味します。</p><p><code>require.cache</code>が変更されていない場合、<code>require(&#39;foo&#39;)</code>を複数回呼び出しても、モジュールコードが複数回実行されることはありません。 これは重要な機能です。 これにより、「部分的に完了した」オブジェクトを返すことができ、循環を引き起こす場合でも、推移的な依存関係をロードできます。</p><p>モジュールにコードを複数回実行させるには、関数をエクスポートし、その関数を呼び出します。</p><h3 id="module-caching-caveats" tabindex="-1">モジュールのキャッシュに関する注意点 <a class="header-anchor" href="#module-caching-caveats" aria-label="Permalink to “モジュールのキャッシュに関する注意点”">​</a></h3><p>モジュールは、解決されたファイル名に基づいてキャッシュされます。 モジュールは、呼び出し元モジュールの場所（<code>node_modules</code>フォルダからのロード）に基づいて異なるファイル名に解決される可能性があるため、<code>require(&#39;foo&#39;)</code>が常にまったく同じオブジェクトを返すという<em>保証</em>はありません。</p><p>さらに、大文字と小文字を区別しないファイルシステムまたはオペレーティングシステムでは、異なる解決済みのファイル名が同じファイルを指す可能性がありますが、キャッシュはそれらを異なるモジュールとして扱い、ファイルを複数回リロードします。 たとえば、<code>require(&#39;./foo&#39;)</code>と<code>require(&#39;./FOO&#39;)</code>は、<code>./foo</code>と<code>./FOO</code>が同じファイルであるかどうかに関係なく、2つの異なるオブジェクトを返します。</p><h2 id="built-in-modules" tabindex="-1">組み込みモジュール <a class="header-anchor" href="#built-in-modules" aria-label="Permalink to “組み込みモジュール”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[歴史]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v16.0.0, v14.18.0</td><td><code>require(...)</code>への<code>node:</code>インポートのサポートが追加されました。</td></tr></tbody></table></div><p>Node.jsには、バイナリにコンパイルされたいくつかのモジュールがあります。 これらのモジュールについては、このドキュメントの別の場所で詳しく説明されています。</p><p>組み込みモジュールはNode.jsソース内で定義されており、<code>lib/</code>フォルダにあります。</p><p>組み込みモジュールは<code>node:</code>プレフィックスを使用して識別でき、その場合、<code>require</code>キャッシュをバイパスします。 たとえば、<code>require(&#39;node:http&#39;)</code>は、その名前のエントリが<code>require.cache</code>にある場合でも、常に組み込みのHTTPモジュールを返します。</p><p>一部の組み込みモジュールは、その識別子が<code>require()</code>に渡された場合、常に優先的にロードされます。 たとえば、<code>require(&#39;http&#39;)</code>は、その名前のファイルがある場合でも、常に組み込みのHTTPモジュールを返します。 <code>node:</code>プレフィックスを使用せずにロードできる組み込みモジュールのリストは、プレフィックスなしでリストされた<a href="/ja/nodejs/api/module#modulebuiltinmodules"><code>module.builtinModules</code></a>で公開されています。</p><h3 id="built-in-modules-with-mandatory-node-prefix" tabindex="-1"><code>node:</code> プレフィックスが必須の組み込みモジュール <a class="header-anchor" href="#built-in-modules-with-mandatory-node-prefix" aria-label="Permalink to “node: プレフィックスが必須の組み込みモジュール”">​</a></h3><p><code>require()</code> によってロードされる際、一部の組み込みモジュールは <code>node:</code> プレフィックスを付けてリクエストする必要があります。この要件は、新しく導入された組み込みモジュールが、すでにその名前を取得しているユーザーランドパッケージとの競合を防ぐために存在します。現在、<code>node:</code> プレフィックスを必要とする組み込みモジュールは次のとおりです。</p><ul><li><a href="/ja/nodejs/api/single-executable-applications#single-executable-application-api"><code>node:sea</code></a></li><li><a href="/ja/nodejs/api/sqlite"><code>node:sqlite</code></a></li><li><a href="/ja/nodejs/api/test"><code>node:test</code></a></li><li><a href="/ja/nodejs/api/test#test-reporters"><code>node:test/reporters</code></a></li></ul><p>これらのモジュールのリストは、プレフィックスを含めて、<a href="/ja/nodejs/api/module#modulebuiltinmodules"><code>module.builtinModules</code></a> で公開されています。</p><h2 id="cycles" tabindex="-1">循環参照 <a class="header-anchor" href="#cycles" aria-label="Permalink to “循環参照”">​</a></h2><p>循環 <code>require()</code> 呼び出しがある場合、モジュールは返されるときに実行を完了していない可能性があります。</p><p>次の状況を考えてください。</p><p><code>a.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a starting&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./b.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;in a, b.done = %j&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b.done);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a done&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>b.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b starting&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;in b, a.done = %j&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a.done);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b done&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>main.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main starting&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./b.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;in main, a.done = %j, b.done = %j&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a.done, b.done);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>main.js</code> が <code>a.js</code> をロードし、次に <code>a.js</code> が <code>b.js</code> をロードするとします。その時点で、<code>b.js</code> は <code>a.js</code> をロードしようとします。無限ループを防ぐために、<code>a.js</code> の exports オブジェクトの <strong>未完了のコピー</strong> が <code>b.js</code> モジュールに返されます。次に、<code>b.js</code> はロードを完了し、その <code>exports</code> オブジェクトが <code>a.js</code> モジュールに提供されます。</p><p><code>main.js</code> が両方のモジュールをロードするまでに、両方とも完了しています。したがって、このプログラムの出力は次のようになります。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> starting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">in b, a.done = false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">in a, b.done = true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">in main, a.done = true, b.done = true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>アプリケーション内で循環モジュールの依存関係が正しく機能するようにするには、慎重な計画が必要です。</p><h2 id="file-modules" tabindex="-1">ファイルモジュール <a class="header-anchor" href="#file-modules" aria-label="Permalink to “ファイルモジュール”">​</a></h2><p>正確なファイル名が見つからない場合、Node.js は必要なファイル名に拡張子 <code>.js</code>、<code>.json</code>、そして最後に <code>.node</code> を追加してロードを試みます。異なる拡張子（例：<code>.cjs</code>）を持つファイルをロードする場合は、その完全な名前をファイル拡張子を含めて <code>require()</code> に渡す必要があります（例：<code>require(&#39;./file.cjs&#39;)</code>）。</p><p><code>.json</code> ファイルは JSON テキストファイルとして解析され、<code>.node</code> ファイルは <code>process.dlopen()</code> でロードされるコンパイル済みアドオンモジュールとして解釈されます。他の拡張子（または拡張子がない）を持つファイルは、JavaScript テキストファイルとして解析されます。使用される解析目標を理解するには、<a href="/ja/nodejs/api/packages#determining-module-system">モジュールシステムの決定</a> セクションを参照してください。</p><p><code>&#39;/&#39;</code> で始まる require されるモジュールは、ファイルへの絶対パスです。たとえば、<code>require(&#39;/home/marco/foo.js&#39;)</code> は <code>/home/marco/foo.js</code> のファイルをロードします。</p><p><code>&#39;./&#39;</code> で始まる require されるモジュールは、<code>require()</code> を呼び出すファイルからの相対パスです。つまり、<code>require(&#39;./circle&#39;)</code> が <code>circle.js</code> を見つけるためには、<code>circle.js</code> は <code>foo.js</code> と同じディレクトリにある必要があります。</p><p>ファイルを示す先頭の <code>&#39;/&#39;</code>、<code>&#39;./&#39;</code>、または <code>&#39;../&#39;</code> がない場合、モジュールはコアモジュールであるか、<code>node_modules</code> フォルダからロードされる必要があります。</p><p>指定されたパスが存在しない場合、<code>require()</code> は <a href="/ja/nodejs/api/errors#module-not-found"><code>MODULE_NOT_FOUND</code></a> エラーをスローします。</p><h2 id="folders-as-modules" tabindex="-1">モジュールとしてのフォルダ <a class="header-anchor" href="#folders-as-modules" aria-label="Permalink to “モジュールとしてのフォルダ”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[Stable: 3 - Legacy]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 3</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 3</a> - レガシー: 代わりに <a href="/ja/nodejs/api/packages#subpath-exports">サブパスエクスポート</a> または <a href="/ja/nodejs/api/packages#subpath-imports">サブパスインポート</a> を使用してください。</p></div><p>フォルダを引数として <code>require()</code> に渡す方法は 3 つあります。</p><p>1 つ目は、フォルダのルートに <a href="/ja/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> ファイルを作成し、<code>main</code> モジュールを指定することです。<a href="/ja/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> ファイルの例は次のようになります。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;some-library&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/some-library.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>これが <code>./some-library</code> のフォルダにある場合、<code>require(&#39;./some-library&#39;)</code> は <code>./some-library/lib/some-library.js</code> のロードを試みます。</p><p>ディレクトリに <a href="/ja/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> ファイルが存在しない場合、または <a href="/ja/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> エントリが見つからないか解決できない場合、Node.js はそのディレクトリから <code>index.js</code> または <code>index.node</code> ファイルのロードを試みます。たとえば、前の例に <a href="/ja/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> ファイルがない場合、<code>require(&#39;./some-library&#39;)</code> は次のロードを試みます。</p><ul><li><code>./some-library/index.js</code></li><li><code>./some-library/index.node</code></li></ul><p>これらの試みが失敗した場合、Node.js はモジュール全体をデフォルトのエラーで欠落しているものとして報告します。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Cannot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;some-library&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上記の 3 つのケースすべてにおいて、<code>import(&#39;./some-library&#39;)</code> の呼び出しは <a href="/ja/nodejs/api/errors#err-unsupported-dir-import"><code>ERR_UNSUPPORTED_DIR_IMPORT</code></a> エラーになります。パッケージの <a href="/ja/nodejs/api/packages#subpath-exports">サブパスエクスポート</a> または <a href="/ja/nodejs/api/packages#subpath-imports">サブパスインポート</a> を使用すると、モジュールとしてのフォルダと同じ包含組織の利点が得られ、<code>require</code> と <code>import</code> の両方で機能します。</p><h2 id="loading-from-node_modules-folders" tabindex="-1"><code>node_modules</code>フォルダからのロード <a class="header-anchor" href="#loading-from-node_modules-folders" aria-label="Permalink to “node_modulesフォルダからのロード”">​</a></h2><p><code>require()</code>に渡されたモジュール識別子が<a href="/ja/nodejs/api/modules#built-in-modules">組み込み</a>モジュールではなく、<code>&#39;/&#39;</code>、<code>&#39;../&#39;</code>、<code>&#39;./&#39;</code>で始まらない場合、Node.jsは現在のモジュールのディレクトリから開始し、<code>/node_modules</code>を追加し、その場所からモジュールをロードしようとします。Node.jsはすでに<code>node_modules</code>で終わるパスに<code>node_modules</code>を追加しません。</p><p>そこに見つからない場合、親ディレクトリに移動し、ファイルのシステムのルートに到達するまで続行します。</p><p>たとえば、<code>&#39;/home/ry/projects/foo.js&#39;</code>にあるファイルが<code>require(&#39;bar.js&#39;)</code>を呼び出した場合、Node.jsは次の場所をこの順序で検索します。</p><ul><li><code>/home/ry/projects/node_modules/bar.js</code></li><li><code>/home/ry/node_modules/bar.js</code></li><li><code>/home/node_modules/bar.js</code></li><li><code>/node_modules/bar.js</code></li></ul><p>これにより、プログラムは依存関係をローカライズして、衝突しないようにすることができます。</p><p>モジュール名にパスのサフィックスを含めることで、モジュールとともに配布される特定のファイルまたはサブモジュールをrequireすることができます。たとえば、<code>require(&#39;example-module/path/to/file&#39;)</code>は、<code>example-module</code>が配置されている場所を基準に<code>path/to/file</code>を解決します。サフィックス付きのパスは、同じモジュール解決のセマンティクスに従います。</p><h2 id="loading-from-the-global-folders" tabindex="-1">グローバルフォルダからのロード <a class="header-anchor" href="#loading-from-the-global-folders" aria-label="Permalink to “グローバルフォルダからのロード”">​</a></h2><p><code>NODE_PATH</code>環境変数がコロン区切りの絶対パスのリストに設定されている場合、Node.jsは他の場所で見つからないモジュールに対してそれらのパスを検索します。</p><p>Windowsでは、<code>NODE_PATH</code>はコロン（<code>:</code>）ではなくセミコロン（<code>;</code>）で区切られます。</p><p><code>NODE_PATH</code>は、現在の<a href="/ja/nodejs/api/modules#all-together">モジュール解決</a>アルゴリズムが定義される前に、さまざまなパスからモジュールをロードできるようにするために元々作成されました。</p><p><code>NODE_PATH</code>はまだサポートされていますが、Node.jsのエコシステムが依存モジュールを配置するための規約に落ち着いたため、現在では必要性が低くなっています。<code>NODE_PATH</code>に依存するデプロイメントでは、<code>NODE_PATH</code>を設定する必要があることを人々が知らない場合、予期しない動作を示すことがあります。モジュールの依存関係が変更され、<code>NODE_PATH</code>が検索されると、異なるバージョン（または異なるモジュール）がロードされることがあります。</p><p>さらに、Node.jsは次のGLOBAL_FOLDERSのリストを検索します。</p><ul><li>1: <code>$HOME/.node_modules</code></li><li>2: <code>$HOME/.node_libraries</code></li><li>3: <code>$PREFIX/lib/node</code></li></ul><p>ここで、<code>$HOME</code>はユーザーのホームディレクトリであり、<code>$PREFIX</code>はNode.jsが構成された<code>node_prefix</code>です。</p><p>これらはほとんど歴史的な理由によるものです。</p><p>依存関係をローカルの<code>node_modules</code>フォルダに配置することを強くお勧めします。これらはより速く、より確実にロードされます。</p><h2 id="the-module-wrapper" tabindex="-1">モジュールラッパー <a class="header-anchor" href="#the-module-wrapper" aria-label="Permalink to “モジュールラッパー”">​</a></h2><p>モジュールのコードが実行される前に、Node.js はそれを次のような関数ラッパーで包みます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// モジュールコードは実際にはここに記述されます</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>このようにすることで、Node.js はいくつかのことを実現します。</p><ul><li>トップレベルの変数（<code>var</code>、<code>const</code>、または<code>let</code>で定義）を、グローバルオブジェクトではなくモジュールにスコープ化します。</li><li>モジュールに固有のグローバルに見える変数をいくつか提供するのに役立ちます。例： <ul><li>実装者がモジュールから値をエクスポートするために使用できる <code>module</code> および <code>exports</code> オブジェクト。</li><li>モジュールの絶対ファイル名とディレクトリパスを含む便利な変数 <code>__filename</code> と <code>__dirname</code>。</li></ul></li></ul><h2 id="the-module-scope" tabindex="-1">モジュールスコープ <a class="header-anchor" href="#the-module-scope" aria-label="Permalink to “モジュールスコープ”">​</a></h2><h3 id="__dirname" tabindex="-1"><code>__dirname</code> <a class="header-anchor" href="#__dirname" aria-label="Permalink to “__dirname”">​</a></h3><p><strong>追加: v0.1.27</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>現在のモジュールのディレクトリ名。これは、<a href="/ja/nodejs/api/modules#filename"><code>__filename</code></a>の<a href="/ja/nodejs/api/path#pathdirnamepath"><code>path.dirname()</code></a>と同じです。</p><p>例：<code>/Users/mjr</code>から<code>node example.js</code>を実行する</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: /Users/mjr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: /Users/mjr</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="__filename" tabindex="-1"><code>__filename</code> <a class="header-anchor" href="#__filename" aria-label="Permalink to “__filename”">​</a></h3><p><strong>追加: v0.0.1</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>現在のモジュールのファイル名。これは、シンボリックリンクが解決された現在のモジュールファイルの絶対パスです。</p><p>メインプログラムの場合、これはコマンドラインで使用されるファイル名と同じであるとは限りません。</p><p>現在のモジュールのディレクトリ名については、<a href="/ja/nodejs/api/modules#dirname"><code>__dirname</code></a>を参照してください。</p><p>例：</p><p><code>/Users/mjr</code>から<code>node example.js</code>を実行する</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: /Users/mjr/example.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: /Users/mjr</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>次のディレクトリ構造を持つ、<code>a</code>と<code>b</code>の2つのモジュールがあるとします。ここで、<code>b</code>は<code>a</code>の依存関係です。</p><ul><li><code>/Users/mjr/app/a.js</code></li><li><code>/Users/mjr/app/node_modules/b/b.js</code></li></ul><p><code>b.js</code>内の<code>__filename</code>への参照は<code>/Users/mjr/app/node_modules/b/b.js</code>を返し、<code>a.js</code>内の<code>__filename</code>への参照は<code>/Users/mjr/app/a.js</code>を返します。</p><h3 id="exports" tabindex="-1"><code>exports</code> <a class="header-anchor" href="#exports" aria-label="Permalink to “exports”">​</a></h3><p><strong>Added in: v0.1.12</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><code>module.exports</code> への参照であり、より短く入力できます。 <code>exports</code> をいつ使用し、<code>module.exports</code> をいつ使用するかについての詳細は、<a href="/ja/nodejs/api/modules#exports-shortcut">exports ショートカット</a> に関するセクションを参照してください。</p><h3 id="module" tabindex="-1"><code>module</code> <a class="header-anchor" href="#module" aria-label="Permalink to “module”">​</a></h3><p><strong>Added in: v0.1.16</strong></p><ul><li><a href="/ja/nodejs/api/modules#the-module-object">&lt;module&gt;</a></li></ul><p>現在のモジュールへの参照です。<a href="/ja/nodejs/api/modules#the-module-object"><code>module</code> オブジェクト</a>に関するセクションを参照してください。 特に、<code>module.exports</code> は、モジュールがエクスポートするものを定義し、<code>require()</code> を通じて利用できるようにするために使用されます。</p><h3 id="requireid" tabindex="-1"><code>require(id)</code> <a class="header-anchor" href="#requireid" aria-label="Permalink to “require(id)”">​</a></h3><p><strong>Added in: v0.1.13</strong></p><ul><li><code>id</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> モジュール名またはパス</li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a> エクスポートされたモジュールのコンテンツ</li></ul><p>モジュール、<code>JSON</code>、およびローカルファイルをインポートするために使用されます。 モジュールは <code>node_modules</code> からインポートできます。 ローカルモジュールと JSON ファイルは、<a href="/ja/nodejs/api/modules#dirname"><code>__dirname</code></a> (定義されている場合) または現在のワーキングディレクトリによって名前が付けられたディレクトリに対して解決される相対パス (例: <code>./</code>、<code>./foo</code>、<code>./bar/baz</code>、<code>../foo</code>) を使用してインポートできます。 POSIX スタイルの相対パスは OS に依存しない方法で解決されます。つまり、上記の例は Windows でも Unix システムと同じように動作します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`__dirname\` または現在の</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ワーキングディレクトリを基準としたパスを持つローカルモジュールをインポートします。(Windows では、これは .\\path\\myLocalModule に解決されます。)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myLocalModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./path/myLocalModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JSON ファイルのインポート:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jsonData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./path/filename.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// node_modules または Node.js 組み込みモジュールからのモジュールのインポート:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> crypto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:crypto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="requirecache" tabindex="-1"><code>require.cache</code> <a class="header-anchor" href="#requirecache" aria-label="Permalink to “require.cache”">​</a></h4><p><strong>Added in: v0.3.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>モジュールは、要求されたときにこのオブジェクトにキャッシュされます。 このオブジェクトからキー値を削除すると、次の <code>require</code> はモジュールをリロードします。 これは <a href="/ja/nodejs/api/addons">ネイティブアドオン</a> には適用されず、リロードするとエラーが発生します。</p><p>エントリの追加または置換も可能です。 このキャッシュは組み込みモジュールの前にチェックされ、組み込みモジュールに一致する名前がキャッシュに追加されると、<code>node:</code> プレフィックス付きの require 呼び出しのみが組み込みモジュールを受信します。 取り扱いには注意してください！</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> assert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:assert&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> realFs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fakeFs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require.cache.fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { exports: fakeFs };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strictEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), fakeFs);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strictEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), realFs);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="requireextensions" tabindex="-1"><code>require.extensions</code> <a class="header-anchor" href="#requireextensions" aria-label="Permalink to “require.extensions”">​</a></h4><p><strong>Added in: v0.3.0</strong></p><p><strong>Deprecated since: v0.10.6</strong></p><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 0</a> - 非推奨</p></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>特定のファイル拡張子をどのように処理するかを <code>require</code> に指示します。</p><p>拡張子 <code>.sjs</code> のファイルを <code>.js</code> として処理する:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require.extensions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.sjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> require.extensions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>非推奨。</strong> 過去には、このリストはオンデマンドでコンパイルすることによって非 JavaScript モジュールを Node.js に読み込むために使用されていました。 しかし実際には、他の Node.js プログラムを介してモジュールを読み込んだり、事前に JavaScript にコンパイルするなど、これを行うためのより良い方法がたくさんあります。</p><p><code>require.extensions</code> の使用は避けてください。 使用すると、微妙なバグが発生する可能性があり、登録された拡張子ごとに拡張子の解決が遅くなります。</p><h4 id="requiremain" tabindex="-1"><code>require.main</code> <a class="header-anchor" href="#requiremain" aria-label="Permalink to “require.main”">​</a></h4><p><strong>Added in: v0.1.17</strong></p><ul><li><a href="/ja/nodejs/api/modules#the-module-object">&lt;module&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a></li></ul><p>Node.js プロセスが起動したときにロードされたエントリスクリプトを表す <code>Module</code> オブジェクト。プログラムのエントリポイントが CommonJS モジュールでない場合は <code>undefined</code>。 <a href="/ja/nodejs/api/modules#accessing-the-main-module">&quot;メインモジュールへのアクセス&quot;</a>を参照してください。</p><p><code>entry.js</code> スクリプト内:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(require.main);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entry.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Module {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/absolute/path/to&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/absolute/path/to/entry.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  loaded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/absolute/path/to/node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &#39;/absolute/path/node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &#39;/absolute/node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &#39;/node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="requireresolverequest-options" tabindex="-1"><code>require.resolve(request[, options])</code> <a class="header-anchor" href="#requireresolverequest-options" aria-label="Permalink to “require.resolve(request[, options])”">​</a></h4><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v8.9.0</td><td><code>paths</code> オプションがサポートされるようになりました。</td></tr><tr><td>v0.3.0</td><td>Added in: v0.3.0</td></tr></tbody></table></div><ul><li><p><code>request</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 解決するモジュールのパス。</p></li><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></p><ul><li><code>paths</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> モジュールの場所を解決するためのパス。 存在する場合、これらのパスはデフォルトの解決パスの代わりに使用されますが、<code>$HOME/.node_modules</code> のような <a href="/ja/nodejs/api/modules#loading-from-the-global-folders">GLOBAL_FOLDERS</a> は常に含まれます。 これらの各パスは、モジュール解決アルゴリズムの開始点として使用されます。つまり、<code>node_modules</code> 階層はこの場所からチェックされます。</li></ul></li><li><p>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></p></li></ul><p>内部の <code>require()</code> メカニズムを使用してモジュールの場所を検索しますが、モジュールをロードするのではなく、解決されたファイル名を返すだけです。</p><p>モジュールが見つからない場合は、<code>MODULE_NOT_FOUND</code> エラーがスローされます。</p><h5 id="requireresolvepathsrequest" tabindex="-1"><code>require.resolve.paths(request)</code> <a class="header-anchor" href="#requireresolvepathsrequest" aria-label="Permalink to “require.resolve.paths(request)”">​</a></h5><p><strong>Added in: v8.9.0</strong></p><ul><li><code>request</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 検索パスを取得するモジュールのパス。</li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" target="_blank" rel="noreferrer">&lt;null&gt;</a></li></ul><p><code>request</code> の解決中に検索されたパスを含む配列を返します。または、<code>request</code> 文字列がコアモジュール (例えば <code>http</code> や <code>fs</code>) を参照する場合は <code>null</code> を返します。</p><h2 id="the-module-object" tabindex="-1"><code>module</code> オブジェクト <a class="header-anchor" href="#the-module-object" aria-label="Permalink to “module オブジェクト”">​</a></h2><p><strong>Added in: v0.1.16</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>各モジュールにおいて、<code>module</code> 自由変数は現在のモジュールを表すオブジェクトへの参照です。 便宜上、<code>module.exports</code> は <code>exports</code> モジュールグローバルを通してアクセスすることもできます。 <code>module</code> は実際にはグローバルではなく、各モジュールに対してローカルです。</p><h3 id="modulechildren" tabindex="-1"><code>module.children</code> <a class="header-anchor" href="#modulechildren" aria-label="Permalink to “module.children”">​</a></h3><p><strong>Added in: v0.1.16</strong></p><ul><li><a href="/ja/nodejs/api/modules#the-module-object">&lt;module[]&gt;</a></li></ul><p>このモジュールが最初に require したモジュールオブジェクト。</p><h3 id="moduleexports" tabindex="-1"><code>module.exports</code> <a class="header-anchor" href="#moduleexports" aria-label="Permalink to “module.exports”">​</a></h3><p><strong>Added in: v0.1.16</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><code>module.exports</code> オブジェクトは <code>Module</code> システムによって作成されます。 これが許容できない場合があります。多くの人は、自分のモジュールを何らかのクラスのインスタンスにしたいと思っています。 これを行うには、目的のエクスポートオブジェクトを <code>module.exports</code> に割り当てます。 目的のオブジェクトを <code>exports</code> に割り当てると、ローカルの <code>exports</code> 変数が再バインドされるだけです。これはおそらく望ましいものではありません。</p><p>たとえば、<code>a.js</code> というモジュールを作成するとします。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EventEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:events&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 何らかの作業を行い、しばらくしてから</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// モジュール自体から &#39;ready&#39; イベントを発行します。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ready&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>次に、別のファイルで次のようにすることができます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ready&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;module &quot;a&quot; is ready&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>module.exports</code> への割り当ては、すぐに行う必要があります。 コールバックで行うことはできません。 これは機能しません。</p><p><code>x.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>y.js</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.a);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="exports-shortcut" tabindex="-1"><code>exports</code> のショートカット <a class="header-anchor" href="#exports-shortcut" aria-label="Permalink to “exports のショートカット”">​</a></h4><p><strong>追加: v0.1.16</strong></p><p><code>exports</code> 変数は、モジュールのファイルレベルスコープ内で利用可能であり、モジュールが評価される前に <code>module.exports</code> の値が割り当てられます。</p><p>これにより、<code>module.exports.f = ...</code> を <code>exports.f = ...</code> とより簡潔に記述できるショートカットが提供されます。ただし、他の変数と同様に、<code>exports</code> に新しい値が割り当てられると、<code>module.exports</code> にはバインドされなくなることに注意してください。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hello </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// モジュールの require からエクスポート</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { hello: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エクスポートされず、モジュール内でのみ利用可能</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>module.exports</code> プロパティが新しいオブジェクトに完全に置き換えられる場合、<code>exports</code> を再割り当てすることも一般的です。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... など</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>この動作を説明するために、<code>require()</code> の仮想的な実装を想像してください。これは、実際に <code>require()</code> によって行われることと非常によく似ています。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { exports: {} };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ここにモジュールコードを記述します。この例では、関数を定義します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someFunc;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // この時点で、exports は module.exports へのショートカットではなくなり、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // このモジュールは空のデフォルトオブジェクトをエクスポートします。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someFunc;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // この時点で、モジュールはデフォルトオブジェクトの代わりに someFunc をエクスポートします。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="modulefilename" tabindex="-1"><code>module.filename</code> <a class="header-anchor" href="#modulefilename" aria-label="Permalink to “module.filename”">​</a></h3><p><strong>追加: v0.1.16</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>モジュールの完全に解決されたファイル名。</p><h3 id="moduleid" tabindex="-1"><code>module.id</code> <a class="header-anchor" href="#moduleid" aria-label="Permalink to “module.id”">​</a></h3><p><strong>追加: v0.1.16</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>モジュールの識別子。通常、これは完全に解決されたファイル名です。</p><h3 id="moduleispreloading" tabindex="-1"><code>module.isPreloading</code> <a class="header-anchor" href="#moduleispreloading" aria-label="Permalink to “module.isPreloading”">​</a></h3><p><strong>追加: v15.4.0, v14.17.0</strong></p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> モジュールが Node.js のプリロードフェーズ中に実行されている場合は <code>true</code>。</li></ul><h3 id="moduleloaded" tabindex="-1"><code>module.loaded</code> <a class="header-anchor" href="#moduleloaded" aria-label="Permalink to “module.loaded”">​</a></h3><p><strong>Added in: v0.1.16</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>モジュールのロードが完了したかどうか、またはロード処理中であるかどうか。</p><h3 id="moduleparent" tabindex="-1"><code>module.parent</code> <a class="header-anchor" href="#moduleparent" aria-label="Permalink to “module.parent”">​</a></h3><p><strong>Added in: v0.1.16</strong></p><p><strong>Deprecated since: v14.6.0, v12.19.0</strong></p><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 0</a> - Deprecated: 代わりに <a href="/ja/nodejs/api/modules#requiremain"><code>require.main</code></a> と <a href="/ja/nodejs/api/modules#modulechildren"><code>module.children</code></a> を使用してください。</p></div><ul><li><a href="/ja/nodejs/api/modules#the-module-object">&lt;module&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" target="_blank" rel="noreferrer">&lt;null&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a></li></ul><p>最初にこのモジュールを要求したモジュール。現在のモジュールが現在のプロセスのエントリーポイントである場合は <code>null</code>、または CommonJS モジュールではないもの（E.G.: REPL または <code>import</code>）によってモジュールがロードされた場合は <code>undefined</code>。</p><h3 id="modulepath" tabindex="-1"><code>module.path</code> <a class="header-anchor" href="#modulepath" aria-label="Permalink to “module.path”">​</a></h3><p><strong>Added in: v11.14.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>モジュールのディレクトリ名。 これは通常、<a href="/ja/nodejs/api/modules#moduleid"><code>module.id</code></a> の <a href="/ja/nodejs/api/path#pathdirnamepath"><code>path.dirname()</code></a> と同じです。</p><h3 id="modulepaths" tabindex="-1"><code>module.paths</code> <a class="header-anchor" href="#modulepaths" aria-label="Permalink to “module.paths”">​</a></h3><p><strong>Added in: v0.4.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>モジュールの検索パス。</p><h3 id="modulerequireid" tabindex="-1"><code>module.require(id)</code> <a class="header-anchor" href="#modulerequireid" aria-label="Permalink to “module.require(id)”">​</a></h3><p><strong>Added in: v0.5.1</strong></p><ul><li><code>id</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a> エクスポートされたモジュールの内容</li></ul><p><code>module.require()</code> メソッドは、元のモジュールから <code>require()</code> が呼び出されたかのようにモジュールをロードする方法を提供します。</p><p>これを行うには、<code>module</code> オブジェクトへの参照を取得する必要があります。 <code>require()</code> は <code>module.exports</code> を返し、<code>module</code> は通常、特定のモジュールのコード内でのみ利用可能であるため、使用するには明示的にエクスポートする必要があります。</p><h2 id="the-module-object_1" tabindex="-1"><code>Module</code> オブジェクト <a class="header-anchor" href="#the-module-object_1" aria-label="Permalink to “Module オブジェクト”">​</a></h2><p>このセクションは<a href="/ja/nodejs/api/module#the-module-object">モジュール: <code>module</code> コアモジュール</a>に移動しました。</p><ul><li><a href="/ja/nodejs/api/module#modulebuiltinmodules"><code>module.builtinModules</code></a></li><li><a href="/ja/nodejs/api/module#modulecreaterequirefilename"><code>module.createRequire(filename)</code></a></li><li><a href="/ja/nodejs/api/module#modulesyncbuiltinesmexports"><code>module.syncBuiltinESMExports()</code></a></li></ul><h2 id="source-map-v3-support" tabindex="-1">Source map v3 サポート <a class="header-anchor" href="#source-map-v3-support" aria-label="Permalink to “Source map v3 サポート”">​</a></h2><p>このセクションは<a href="/ja/nodejs/api/module#source-map-v3-support">モジュール: <code>module</code> コアモジュール</a>に移動しました。</p><ul><li><a href="/ja/nodejs/api/module#modulefindsourcemappath"><code>module.findSourceMap(path)</code></a></li><li><a href="/ja/nodejs/api/module#class-modulesourcemap">Class: <code>module.SourceMap</code></a><ul><li><a href="/ja/nodejs/api/module#new-sourcemappayload"><code>new SourceMap(payload)</code></a></li><li><a href="/ja/nodejs/api/module#sourcemappayload"><code>sourceMap.payload</code></a></li><li><a href="/ja/nodejs/api/module#sourcemapfindentrylinenumber-columnnumber"><code>sourceMap.findEntry(lineNumber, columnNumber)</code></a></li></ul></li></ul>`,269)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};