import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js シングル実行可能アプリケーション","description":"Node.jsでシングル実行可能アプリケーションを作成・管理する方法を学びます。アプリケーションのバンドル、依存関係の管理、セキュリティの考慮事項について説明します。","frontmatter":{"title":"Node.js シングル実行可能アプリケーション","description":"Node.jsでシングル実行可能アプリケーションを作成・管理する方法を学びます。アプリケーションのバンドル、依存関係の管理、セキュリティの考慮事項について説明します。","head":[["meta",{"name":"og:title","content":"Node.js シングル実行可能アプリケーション | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.jsでシングル実行可能アプリケーションを作成・管理する方法を学びます。アプリケーションのバンドル、依存関係の管理、セキュリティの考慮事項について説明します。"}],["meta",{"name":"twitter:title","content":"Node.js シングル実行可能アプリケーション | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.jsでシングル実行可能アプリケーションを作成・管理する方法を学びます。アプリケーションのバンドル、依存関係の管理、セキュリティの考慮事項について説明します。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/single-executable-applications"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/single-executable-applications"}]]},"headers":[],"relativePath":"ja/nodejs/api/single-executable-applications.md","filePath":"ja/nodejs/api/single-executable-applications.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/api/single-executable-applications.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="single-executable-applications" tabindex="-1">シングル実行可能アプリケーション <a class="header-anchor" href="#single-executable-applications" aria-label="Permalink to “シングル実行可能アプリケーション”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v20.6.0</td><td>&quot;useSnapshot&quot; のサポートを追加しました。</td></tr><tr><td>v20.6.0</td><td>&quot;useCodeCache&quot; のサポートを追加しました。</td></tr><tr><td>v19.7.0, v18.16.0</td><td>v19.7.0, v18.16.0 で追加されました</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a>。1 - 積極的な開発</p></div><p><strong>ソースコード:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/src/node_sea.cc" target="_blank" rel="noreferrer">src/node_sea.cc</a></p><p>この機能により、Node.js がインストールされていないシステムへの Node.js アプリケーションの配布が容易になります。</p><p>Node.js は、バンドルされたスクリプトを含むことができる Node.js によって準備された BLOB を <code>node</code> バイナリに注入できるようにすることで、<a href="https://github.com/nodejs/single-executable" target="_blank" rel="noreferrer">シングル実行可能アプリケーション</a>の作成をサポートしています。起動時に、プログラムは何か注入されたものがあるかどうかを確認します。BLOB が見つかった場合、BLOB 内のスクリプトを実行します。それ以外の場合、Node.js は通常どおりに動作します。</p><p>シングル実行可能アプリケーション機能は、現在、<a href="/ja/nodejs/api/modules#modules-commonjs-modules">CommonJS</a>モジュールシステムを使用した単一の埋め込みスクリプトの実行のみをサポートしています。</p><p>ユーザーは、<code>node</code> バイナリ自体、およびリソースをバイナリに注入できるツールを使用して、バンドルされたスクリプトからシングル実行可能アプリケーションを作成できます。</p><p>そのようなツールの 1 つである <a href="https://github.com/nodejs/postject" target="_blank" rel="noreferrer">postject</a> を使用してシングル実行可能アプリケーションを作成する手順を以下に示します。</p><h2 id="generating-single-executable-preparation-blobs" tabindex="-1">シングル実行可能準備 BLOB の生成 <a class="header-anchor" href="#generating-single-executable-preparation-blobs" aria-label="Permalink to “シングル実行可能準備 BLOB の生成”">​</a></h2><p>アプリケーションに注入されるシングル実行可能準備 BLOB は、シングル実行可能ファイルのビルドに使用される Node.js バイナリの <code>--experimental-sea-config</code> フラグを使用して生成できます。これは、JSON 形式の設定ファイルへのパスを受け取ります。渡されたパスが絶対パスでない場合、Node.js は現在の作業ディレクトリからの相対パスを使用します。</p><p>設定は現在、次のトップレベルのフィールドを読み取ります。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/bundled/script.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;output&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/write/the/generated/blob.blob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;disableExperimentalSEAWarning&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// デフォルト: false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;useSnapshot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// デフォルト: false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;useCodeCache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// デフォルト: false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;assets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// オプション</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;a.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/a.dat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;b.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/b.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>パスが絶対パスでない場合、Node.js は現在の作業ディレクトリからの相対パスを使用します。BLOB の生成に使用される Node.js バイナリのバージョンは、BLOB が注入されるバイナリのバージョンと同じである必要があります。</p><p>注意: クロスプラットフォーム SEA を生成する場合 (例: <code>darwin-arm64</code> で <code>linux-x64</code> 用の SEA を生成する場合)、互換性のない実行ファイルの生成を避けるために、<code>useCodeCache</code> と <code>useSnapshot</code> を false に設定する必要があります。コードキャッシュとスナップショットは、コンパイルされたプラットフォームでのみロードできるため、異なるプラットフォームでビルドされたコードキャッシュまたはスナップショットをロードしようとすると、生成された実行ファイルが起動時にクラッシュする可能性があります。</p><h3 id="assets" tabindex="-1">アセット <a class="header-anchor" href="#assets" aria-label="Permalink to “アセット”">​</a></h3><p>ユーザーは、キーとパスの辞書を <code>assets</code> フィールドとして設定に追加することで、アセットを含めることができます。ビルド時に、Node.js は指定されたパスからアセットを読み取り、それらを準備 BLOB にバンドルします。生成された実行可能ファイルでは、ユーザーは <a href="/ja/nodejs/api/single-executable-applications#seagetassetkey-encoding"><code>sea.getAsset()</code></a> および <a href="/ja/nodejs/api/single-executable-applications#seagetassetasblobkey-options"><code>sea.getAssetAsBlob()</code></a> API を使用してアセットを取得できます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/bundled/script.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;output&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/write/the/generated/blob.blob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;assets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;a.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/a.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;b.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/b.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>シングル実行可能アプリケーションは、次のようにアセットにアクセスできます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getAssetAsBlob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getRawAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:sea&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ArrayBuffer のデータのコピーを返します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> image</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// アセットから UTF8 としてデコードされた文字列を返します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// アセットを含む Blob を返します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAssetAsBlob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// コピーせずに生の資産を含む ArrayBuffer を返します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> raw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRawAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>詳細については、<a href="/ja/nodejs/api/single-executable-applications#seagetassetkey-encoding"><code>sea.getAsset()</code></a>、<a href="/ja/nodejs/api/single-executable-applications#seagetassetasblobkey-options"><code>sea.getAssetAsBlob()</code></a> および <a href="/ja/nodejs/api/single-executable-applications#seagetrawassetkey"><code>sea.getRawAsset()</code></a> API のドキュメントを参照してください。</p><h3 id="startup-snapshot-support" tabindex="-1">スタートアップスナップショットのサポート <a class="header-anchor" href="#startup-snapshot-support" aria-label="Permalink to “スタートアップスナップショットのサポート”">​</a></h3><p><code>useSnapshot</code> フィールドを使用して、スタートアップスナップショットのサポートを有効にできます。この場合、最終的な実行可能ファイルが起動されたときには、<code>main</code> スクリプトは実行されません。代わりに、シングル実行可能アプリケーションの準備 BLOB がビルドマシンで生成されるときに実行されます。生成された準備 BLOB には、<code>main</code> スクリプトによって初期化された状態をキャプチャするスナップショットが含まれます。準備 BLOB が挿入された最終的な実行可能ファイルは、実行時にスナップショットをデシリアライズします。</p><p><code>useSnapshot</code> が true の場合、メインスクリプトは <a href="/ja/nodejs/api/v8#v8startupsnapshotsetdeserializemainfunctioncallback-data"><code>v8.startupSnapshot.setDeserializeMainFunction()</code></a> API を呼び出して、ユーザーによって最終的な実行可能ファイルが起動されたときに実行する必要のあるコードを設定する必要があります。</p><p>シングル実行可能アプリケーションでスナップショットを使用するアプリケーションの典型的なパターンは次のとおりです。</p><p>スタートアップスナップショットスクリプトの一般的な制約は、シングル実行可能アプリケーションのスナップショットを構築するために使用されるメインスクリプトにも適用され、メインスクリプトは <a href="/ja/nodejs/api/v8#startup-snapshot-api"><code>v8.startupSnapshot</code> API</a> を使用してこれらの制約に適応できます。Node.js での<a href="/ja/nodejs/api/cli#build-snapshot">スタートアップスナップショットサポートに関するドキュメント</a>を参照してください。</p><h3 id="v8-code-cache-support" tabindex="-1">V8 コードキャッシュのサポート <a class="header-anchor" href="#v8-code-cache-support" aria-label="Permalink to “V8 コードキャッシュのサポート”">​</a></h3><p>構成で <code>useCodeCache</code> が <code>true</code> に設定されている場合、シングル実行可能ファイル準備 blob の生成中に、Node.js は <code>main</code> スクリプトをコンパイルして V8 コードキャッシュを生成します。生成されたコードキャッシュは準備 blob の一部となり、最終的な実行可能ファイルに注入されます。シングル実行可能アプリケーションが起動されると、Node.js は <code>main</code> スクリプトを最初からコンパイルする代わりに、コードキャッシュを使用してコンパイルを高速化し、スクリプトを実行します。これにより、起動パフォーマンスが向上します。</p><p><strong>注記:</strong> <code>useCodeCache</code> が <code>true</code> の場合、<code>import()</code> は動作しません。</p><h2 id="in-the-injected-main-script" tabindex="-1">注入された main スクリプト内 <a class="header-anchor" href="#in-the-injected-main-script" aria-label="Permalink to “注入された main スクリプト内”">​</a></h2><h3 id="single-executable-application-api" tabindex="-1">シングル実行可能アプリケーション API <a class="header-anchor" href="#single-executable-application-api" aria-label="Permalink to “シングル実行可能アプリケーション API”">​</a></h3><p><code>node:sea</code> ビルトインを使用すると、実行可能ファイルに埋め込まれた JavaScript メインスクリプトからシングル実行可能アプリケーションとやり取りできます。</p><h4 id="seaissea" tabindex="-1"><code>sea.isSea()</code> <a class="header-anchor" href="#seaissea" aria-label="Permalink to “sea.isSea()”">​</a></h4><p><strong>追加: v21.7.0, v20.12.0</strong></p><ul><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> このスクリプトがシングル実行可能アプリケーション内で実行されているかどうか。</li></ul><h3 id="seagetassetkey-encoding" tabindex="-1"><code>sea.getAsset(key[, encoding])</code> <a class="header-anchor" href="#seagetassetkey-encoding" aria-label="Permalink to “sea.getAsset(key[, encoding])”">​</a></h3><p><strong>追加: v21.7.0, v20.12.0</strong></p><p>このメソッドを使用すると、ビルド時にシングル実行可能ファイルにバンドルされるように構成されたアセットを取得できます。一致するアセットが見つからない場合、エラーがスローされます。</p><ul><li><code>key</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> シングル実行可能アプリケーション構成の <code>assets</code> フィールドで指定された辞書内のアセットのキー。</li><li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 指定された場合、アセットは文字列としてデコードされます。<code>TextDecoder</code> でサポートされているエンコーディングはすべて受け入れられます。指定されていない場合、アセットのコピーを含む <code>ArrayBuffer</code> が代わりに返されます。</li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a></li></ul><h3 id="seagetassetasblobkey-options" tabindex="-1"><code>sea.getAssetAsBlob(key[, options])</code> <a class="header-anchor" href="#seagetassetasblobkey-options" aria-label="Permalink to “sea.getAssetAsBlob(key[, options])”">​</a></h3><p><strong>Added in: v21.7.0, v20.12.0</strong></p><p><a href="/ja/nodejs/api/single-executable-applications#seagetassetkey-encoding"><code>sea.getAsset()</code></a> と同様ですが、結果を <a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noreferrer"><code>Blob</code></a> で返します。一致するアセットが見つからない場合はエラーがスローされます。</p><ul><li><p><code>key</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> シングル実行可能アプリケーション構成の <code>assets</code> フィールドで指定されたディクショナリ内のアセットのキー。</p></li><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></p><ul><li><code>type</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Blob のオプションの mime タイプ。</li></ul></li><li><p>戻り値: <a href="/ja/nodejs/api/buffer#class-blob">&lt;Blob&gt;</a></p></li></ul><h3 id="seagetrawassetkey" tabindex="-1"><code>sea.getRawAsset(key)</code> <a class="header-anchor" href="#seagetrawassetkey" aria-label="Permalink to “sea.getRawAsset(key)”">​</a></h3><p><strong>Added in: v21.7.0, v20.12.0</strong></p><p>このメソッドは、ビルド時にシングル実行可能アプリケーションにバンドルされるように構成されたアセットを取得するために使用できます。一致するアセットが見つからない場合はエラーがスローされます。</p><p><code>sea.getAsset()</code> または <code>sea.getAssetAsBlob()</code> とは異なり、このメソッドはコピーを返しません。代わりに、実行可能ファイル内にバンドルされた生の資産を返します。</p><p>今のところ、ユーザーは返された配列バッファへの書き込みを避ける必要があります。注入されたセクションが書き込み可能としてマークされていない場合、または適切にアラインされていない場合、返された配列バッファへの書き込みはクラッシュにつながる可能性があります。</p><ul><li><code>key</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> シングル実行可能アプリケーション構成の <code>assets</code> フィールドで指定されたディクショナリ内のアセットのキー。</li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a></li></ul><h3 id="requireid-in-the-injected-main-script-is-not-file-based" tabindex="-1">注入されたメインスクリプト内の <code>require(id)</code> はファイルベースではありません <a class="header-anchor" href="#requireid-in-the-injected-main-script-is-not-file-based" aria-label="Permalink to “注入されたメインスクリプト内の require(id) はファイルベースではありません”">​</a></h3><p>注入されたメインスクリプト内の <code>require()</code> は、注入されていないモジュールで使用できる <a href="/ja/nodejs/api/modules#requireid"><code>require()</code></a> と同じではありません。また、注入されていない <a href="/ja/nodejs/api/modules#requireid"><code>require()</code></a> が持つプロパティ (<a href="/ja/nodejs/api/modules#accessing-the-main-module"><code>require.main</code></a> を除く) もありません。組み込みモジュールをロードするためにのみ使用できます。ファイルシステムにのみ存在するモジュールをロードしようとすると、エラーがスローされます。</p><p>ファイルベースの <code>require()</code> に依存する代わりに、ユーザーはアプリケーションをスタンドアロンの JavaScript ファイルにバンドルして、実行可能ファイルに注入できます。これにより、より決定論的な依存関係グラフも保証されます。</p><p>ただし、ファイルベースの <code>require()</code> が依然として必要な場合は、次の方法でも実現できます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createRequire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRequire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="__filename-and-modulefilename-in-the-injected-main-script" tabindex="-1">インジェクトされたメインスクリプトにおける <code>__filename</code> と <code>module.filename</code> <a class="header-anchor" href="#__filename-and-modulefilename-in-the-injected-main-script" aria-label="Permalink to “インジェクトされたメインスクリプトにおける __filename と module.filename”">​</a></h3><p>インジェクトされたメインスクリプトにおける <code>__filename</code> と <code>module.filename</code> の値は、<a href="/ja/nodejs/api/process#processexecpath"><code>process.execPath</code></a> と等しくなります。</p><h3 id="__dirname-in-the-injected-main-script" tabindex="-1">インジェクトされたメインスクリプトにおける <code>__dirname</code> <a class="header-anchor" href="#__dirname-in-the-injected-main-script" aria-label="Permalink to “インジェクトされたメインスクリプトにおける __dirname”">​</a></h3><p>インジェクトされたメインスクリプトにおける <code>__dirname</code> の値は、<a href="/ja/nodejs/api/process#processexecpath"><code>process.execPath</code></a> のディレクトリ名と等しくなります。</p><h2 id="notes" tabindex="-1">注記 <a class="header-anchor" href="#notes" aria-label="Permalink to “注記”">​</a></h2><h3 id="single-executable-application-creation-process" tabindex="-1">シングル実行可能アプリケーションの作成プロセス <a class="header-anchor" href="#single-executable-application-creation-process" aria-label="Permalink to “シングル実行可能アプリケーションの作成プロセス”">​</a></h3><p>シングル実行可能な Node.js アプリケーションを作成することを目的とするツールは、<code>--experimental-sea-config&quot;</code> で準備された blob の内容を次のようにインジェクトする必要があります。</p><ul><li><code>node</code> バイナリが <a href="https://en.wikipedia.org/wiki/Portable_Executable" target="_blank" rel="noreferrer">PE</a> ファイルである場合、<code>NODE_SEA_BLOB</code> という名前のリソース</li><li><code>node</code> バイナリが <a href="https://en.wikipedia.org/wiki/Mach-O" target="_blank" rel="noreferrer">Mach-O</a> ファイルである場合、<code>NODE_SEA</code> セグメント内の <code>NODE_SEA_BLOB</code> という名前のセクション</li><li><code>node</code> バイナリが <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format" target="_blank" rel="noreferrer">ELF</a> ファイルである場合、<code>NODE_SEA_BLOB</code> という名前のノート</li></ul><p>バイナリ内で <code>NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2:0</code> <a href="https://www.electronjs.org/docs/latest/tutorial/fuses" target="_blank" rel="noreferrer">fuse</a> 文字列を検索し、最後の文字を <code>1</code> に反転させて、リソースがインジェクトされたことを示します。</p><h3 id="platform-support" tabindex="-1">プラットフォームサポート <a class="header-anchor" href="#platform-support" aria-label="Permalink to “プラットフォームサポート”">​</a></h3><p>シングル実行可能ファイルのサポートは、次のプラットフォームでのみ CI で定期的にテストされています。</p><ul><li>Windows</li><li>macOS</li><li>Linux (Alpine を除く <a href="https://github.com/nodejs/node/blob/main/BUILDING.md#platform-list" target="_blank" rel="noreferrer">Node.js でサポートされているすべてのディストリビューション</a> と、s390x を除く <a href="https://github.com/nodejs/node/blob/main/BUILDING.md#platform-list" target="_blank" rel="noreferrer">Node.js でサポートされているすべてのアーキテクチャ</a>)</li></ul><p>これは、他のプラットフォームでこの機能をテストするために使用できるシングル実行可能ファイルを生成するためのより良いツールがないためです。</p><p>他のリソースインジェクションツール/ワークフローに関する提案を歓迎します。 それらを文書化するために、<a href="https://github.com/nodejs/single-executable/discussions" target="_blank" rel="noreferrer">https://github.com/nodejs/single-executable/discussions</a> で議論を開始してください。</p>`,68)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};