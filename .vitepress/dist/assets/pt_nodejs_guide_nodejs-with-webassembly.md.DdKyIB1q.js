import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js com WebAssembly","description":"WebAssembly é uma linguagem de montagem de alto desempenho que pode ser compilada a partir de vários idiomas, incluindo C/C++, Rust e AssemblyScript. O Node.js fornece as APIs necessárias por meio do objeto WebAssembly global para se comunicar com WebAssembly.","frontmatter":{"title":"Node.js com WebAssembly","description":"WebAssembly é uma linguagem de montagem de alto desempenho que pode ser compilada a partir de vários idiomas, incluindo C/C++, Rust e AssemblyScript. O Node.js fornece as APIs necessárias por meio do objeto WebAssembly global para se comunicar com WebAssembly.","head":[["meta",{"name":"og:title","content":"Node.js com WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"WebAssembly é uma linguagem de montagem de alto desempenho que pode ser compilada a partir de vários idiomas, incluindo C/C++, Rust e AssemblyScript. O Node.js fornece as APIs necessárias por meio do objeto WebAssembly global para se comunicar com WebAssembly."}],["meta",{"name":"twitter:title","content":"Node.js com WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"WebAssembly é uma linguagem de montagem de alto desempenho que pode ser compilada a partir de vários idiomas, incluindo C/C++, Rust e AssemblyScript. O Node.js fornece as APIs necessárias por meio do objeto WebAssembly global para se comunicar com WebAssembly."}],["link",{"rel":"canonical","href":"https://idoc.dev/pt/nodejs/guide/nodejs-with-webassembly"}],["meta",{"property":"og:url","content":"https://idoc.dev/pt/nodejs/guide/nodejs-with-webassembly"}]]},"headers":[],"relativePath":"pt/nodejs/guide/nodejs-with-webassembly.md","filePath":"pt/nodejs/guide/nodejs-with-webassembly.md","lastUpdated":null}`),a={name:`pt/nodejs/guide/nodejs-with-webassembly.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-com-webassembly" tabindex="-1">Node.js com WebAssembly <a class="header-anchor" href="#node-js-com-webassembly" aria-label="Permalink to “Node.js com WebAssembly”">​</a></h1><p><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> é uma linguagem de baixo nível de desempenho semelhante a assembly que pode ser compilada a partir de várias linguagens, incluindo C/C++, Rust e AssemblyScript. Atualmente, é suportado por Chrome, Firefox, Safari, Edge e Node.js!</p><p>A especificação do WebAssembly detalha dois formatos de arquivo, um formato binário chamado Módulo WebAssembly com uma extensão <code>.wasm</code> e a representação de texto correspondente chamada formato de texto WebAssembly com uma extensão <code>.wat</code>.</p><h2 id="conceitos-chave" tabindex="-1">Conceitos-chave <a class="header-anchor" href="#conceitos-chave" aria-label="Permalink to “Conceitos-chave”">​</a></h2><ul><li>Module - Um binário WebAssembly compilado, ou seja, um arquivo <code>.wasm</code>.</li><li>Memory - Um ArrayBuffer redimensionável.</li><li>Table - Uma array tipada redimensionável de referências não armazenadas em Memory.</li><li>Instance - Uma instanciação de um Módulo com sua Memory, Table e variáveis.</li></ul><p>Para usar o WebAssembly, você precisa de um arquivo binário <code>.wasm</code> e um conjunto de APIs para se comunicar com o WebAssembly. O Node.js fornece as APIs necessárias através do objeto global <code>WebAssembly</code>.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebAssembly)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Object [WebAssembly] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  compile: [Function: compile],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  validate: [Function: validate],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  instantiate: [Function: instantiate]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="gerando-modulos-webassembly" tabindex="-1">Gerando Módulos WebAssembly <a class="header-anchor" href="#gerando-modulos-webassembly" aria-label="Permalink to “Gerando Módulos WebAssembly”">​</a></h2><p>Existem vários métodos disponíveis para gerar arquivos binários WebAssembly, incluindo:</p><ul><li>Escrever WebAssembly (<code>.wat</code>) manualmente e converter para formato binário usando ferramentas como <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a>.</li><li>Usar <a href="https://github.com/emscripten-core/emscripten" target="_blank" rel="noreferrer">emscripten</a> com uma aplicação C/C++</li><li>Usar <a href="https://github.com/rustwasm/wasm-pack" target="_blank" rel="noreferrer">wasm-pack</a> com uma aplicação Rust</li><li>Usar <a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noreferrer">AssemblyScript</a> se você preferir uma experiência semelhante ao TypeScript</li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong>Algumas dessas ferramentas geram não apenas o arquivo binário, mas também o código JavaScript &quot;glue&quot; e os arquivos HTML correspondentes para serem executados no navegador.</strong></p></div><h2 id="como-usar" tabindex="-1">Como usar <a class="header-anchor" href="#como-usar" aria-label="Permalink to “Como usar”">​</a></h2><p>Depois de ter um módulo WebAssembly, você pode usar o objeto <code>WebAssembly</code> do Node.js para instanciá-lo.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/add.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasmBuffer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wasmModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Funções exportadas vivem sob instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmModule.instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Outputs: 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="interagindo-com-o-so" tabindex="-1">Interagindo com o SO <a class="header-anchor" href="#interagindo-com-o-so" aria-label="Permalink to “Interagindo com o SO”">​</a></h2><p>Módulos WebAssembly não podem acessar diretamente a funcionalidade do SO por conta própria. Uma ferramenta de terceiros <a href="https://github.com/bytecodealliance/wasmtime" target="_blank" rel="noreferrer">Wasmtime</a> pode ser usada para acessar essa funcionalidade. <code>Wasmtime</code> utiliza a API <a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a> para acessar a funcionalidade do SO.</p><h2 id="recursos" tabindex="-1">Recursos <a class="header-anchor" href="#recursos" aria-label="Permalink to “Recursos”">​</a></h2><ul><li><a href="https://webassembly.org/" target="_blank" rel="noreferrer">Informações Gerais sobre WebAssembly</a></li><li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noreferrer">Documentos MDN</a></li><li><a href="https://webassembly.github.io/spec/core/text/index.html" target="_blank" rel="noreferrer">Escreva WebAssembly manualmente</a></li></ul>`,18)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};