import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js Web Crypto API","description":"Node.jsのWeb Crypto APIは、安全な通信とデータの完全性のための暗号化機能を提供します。鍵生成、暗号化、復号化、署名、検証が含まれます。","frontmatter":{"title":"Node.js Web Crypto API","description":"Node.jsのWeb Crypto APIは、安全な通信とデータの完全性のための暗号化機能を提供します。鍵生成、暗号化、復号化、署名、検証が含まれます。","head":[["meta",{"name":"og:title","content":"Node.js Web Crypto API | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.jsのWeb Crypto APIは、安全な通信とデータの完全性のための暗号化機能を提供します。鍵生成、暗号化、復号化、署名、検証が含まれます。"}],["meta",{"name":"twitter:title","content":"Node.js Web Crypto API | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.jsのWeb Crypto APIは、安全な通信とデータの完全性のための暗号化機能を提供します。鍵生成、暗号化、復号化、署名、検証が含まれます。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/webcrypto"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/webcrypto"}]]},"headers":[],"relativePath":"ja/nodejs/api/webcrypto.md","filePath":"ja/nodejs/api/webcrypto.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/api/webcrypto.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="web-crypto-api" tabindex="-1">Web Crypto API <a class="header-anchor" href="#web-crypto-api" aria-label="Permalink to “Web Crypto API”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v23.5.0</td><td>アルゴリズム <code>Ed25519</code> および <code>X25519</code> が安定版になりました。</td></tr><tr><td>v19.0.0</td><td><code>Ed25519</code>、<code>Ed448</code>、<code>X25519</code>、および <code>X448</code> アルゴリズムを除き、実験的ではなくなりました。</td></tr><tr><td>v20.0.0, v18.17.0</td><td>引数は、他の Web Crypto API の実装と同様に、WebIDL の定義に従って強制され、検証されるようになりました。</td></tr><tr><td>v18.4.0, v16.17.0</td><td>独自の <code>&#39;node.keyObject&#39;</code> インポート/エクスポート形式を削除しました。</td></tr><tr><td>v18.4.0, v16.17.0</td><td>独自の <code>&#39;NODE-DSA&#39;</code>、<code>&#39;NODE-DH&#39;</code>、および <code>&#39;NODE-SCRYPT&#39;</code> アルゴリズムを削除しました。</td></tr><tr><td>v18.4.0, v16.17.0</td><td><code>&#39;Ed25519&#39;</code>、<code>&#39;Ed448&#39;</code>、<code>&#39;X25519&#39;</code>、および <code>&#39;X448&#39;</code> アルゴリズムを追加しました。</td></tr><tr><td>v18.4.0, v16.17.0</td><td>独自の <code>&#39;NODE-ED25519&#39;</code> および <code>&#39;NODE-ED448&#39;</code> アルゴリズムを削除しました。</td></tr><tr><td>v18.4.0, v16.17.0</td><td>独自の <code>&#39;NODE-X25519&#39;</code> および <code>&#39;NODE-X448&#39;</code> という名前のカーブを <code>&#39;ECDH&#39;</code> アルゴリズムから削除しました。</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 2</a> - 安定</p></div><p>Node.js は、標準の <a href="https://www.w3.org/TR/WebCryptoAPI/" target="_blank" rel="noreferrer">Web Crypto API</a> の実装を提供します。</p><p>このモジュールにアクセスするには、<code>globalThis.crypto</code> または <code>require(&#39;node:crypto&#39;).webcrypto</code> を使用します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subtle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalThis.crypto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HMAC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hash: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SHA-256&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sign&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;verify&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;I love cupcakes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> digest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HMAC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, key, message);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="examples" tabindex="-1">例 <a class="header-anchor" href="#examples" aria-label="Permalink to “例”">​</a></h2><h3 id="generating-keys" tabindex="-1">鍵の生成 <a class="header-anchor" href="#generating-keys" aria-label="Permalink to “鍵の生成”">​</a></h3><p><a href="/ja/nodejs/api/webcrypto#class-subtlecrypto">&lt;SubtleCrypto&gt;</a> クラスを使用して、対称（秘密）鍵または非対称鍵ペア（公開鍵と秘密鍵）を生成できます。</p><h4 id="aes-keys" tabindex="-1">AES 鍵 <a class="header-anchor" href="#aes-keys" aria-label="Permalink to “AES 鍵”">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subtle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalThis.crypto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateAesKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AES-CBC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    length,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;encrypt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;decrypt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="ecdsa-key-pairs" tabindex="-1">ECDSA key pairs <a class="header-anchor" href="#ecdsa-key-pairs" aria-label="Permalink to “ECDSA key pairs”">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subtle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalThis.crypto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateEcKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">namedCurve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;P-521&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    publicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    privateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ECDSA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    namedCurve,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sign&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;verify&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { publicKey, privateKey };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="ed25519/x25519-key-pairs" tabindex="-1">Ed25519/X25519 key pairs <a class="header-anchor" href="#ed25519/x25519-key-pairs" aria-label="Permalink to “Ed25519/X25519 key pairs”">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subtle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalThis.crypto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateEd25519Key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ed25519&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sign&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;verify&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateX25519Key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;X25519&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;deriveKey&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="hmac-keys" tabindex="-1">HMAC keys <a class="header-anchor" href="#hmac-keys" aria-label="Permalink to “HMAC keys”">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subtle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalThis.crypto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateHmacKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SHA-256&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HMAC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hash,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sign&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;verify&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="rsa-key-pairs" tabindex="-1">RSA key pairs <a class="header-anchor" href="#rsa-key-pairs" aria-label="Permalink to “RSA key pairs”">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subtle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalThis.crypto;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> publicExponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Uint8Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateRsaKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">modulusLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2048</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SHA-256&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    publicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    privateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;RSASSA-PKCS1-v1_5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modulusLength,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    publicExponent,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hash,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sign&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;verify&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { publicKey, privateKey };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="encryption-and-decryption" tabindex="-1">Encryption and decryption <a class="header-anchor" href="#encryption-and-decryption" aria-label="Permalink to “Encryption and decryption”">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> crypto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalThis.crypto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> aesEncrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">plaintext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateAesKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> iv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRandomValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Uint8Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ciphertext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AES-CBC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    iv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, key, ec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plaintext));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    iv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ciphertext,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> aesDecrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ciphertext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">iv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plaintext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AES-CBC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    iv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, key, ciphertext);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plaintext);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="exporting-and-importing-keys" tabindex="-1">Exporting and importing keys <a class="header-anchor" href="#exporting-and-importing-keys" aria-label="Permalink to “Exporting and importing keys”">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subtle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalThis.crypto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateAndExportHmacKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jwk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SHA-512&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HMAC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hash,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sign&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;verify&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exportKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(format, key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> importHmacKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">keyData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jwk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SHA-512&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">importKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(format, keyData, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HMAC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hash,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sign&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;verify&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="wrapping-and-unwrapping-keys" tabindex="-1">キーのラッピングとアンラッピング <a class="header-anchor" href="#wrapping-and-unwrapping-keys" aria-label="Permalink to “キーのラッピングとアンラッピング”">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subtle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalThis.crypto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateAndWrapHmacKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jwk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SHA-512&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    wrappingKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HMAC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hash,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sign&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;verify&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AES-KW&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wrapKey&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;unwrapKey&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wrappedKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrapKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(format, key, wrappingKey, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AES-KW&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { wrappedKey, wrappingKey };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unwrapHmacKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  wrappedKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  wrappingKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jwk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SHA-512&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unwrapKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wrappedKey,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wrappingKey,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;AES-KW&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HMAC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hash },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sign&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;verify&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h3 id="sign-and-verify" tabindex="-1">署名と検証 <a class="header-anchor" href="#sign-and-verify" aria-label="Permalink to “署名と検証”">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subtle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalThis.crypto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> signature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;RSASSA-PKCS1-v1_5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, key, ec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signature;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">signature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> verified</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;RSASSA-PKCS1-v1_5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      key,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      signature,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> verified;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="deriving-bits-and-keys" tabindex="-1">ビットとキーの導出 <a class="header-anchor" href="#deriving-bits-and-keys" aria-label="Permalink to “ビットとキーの導出”">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subtle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalThis.crypto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pbkdf2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">salt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">iterations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">importKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;raw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pass),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;PBKDF2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;deriveBits&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deriveBits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;PBKDF2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hash: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SHA-512&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    salt: ec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(salt),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    iterations,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, key, length);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bits;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pbkdf2Key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">salt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">iterations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> keyMaterial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">importKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;raw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pass),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;PBKDF2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;deriveKey&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deriveKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;PBKDF2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hash: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SHA-512&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    salt: ec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(salt),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    iterations,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, keyMaterial, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AES-GCM&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    length,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;encrypt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;decrypt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h3 id="digest" tabindex="-1">Digest <a class="header-anchor" href="#digest" aria-label="Permalink to “Digest”">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subtle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalThis.crypto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">algorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SHA-512&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> digest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subtle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(algorithm, ec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> digest;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="algorithm-matrix" tabindex="-1">Algorithm matrix <a class="header-anchor" href="#algorithm-matrix" aria-label="Permalink to “Algorithm matrix”">​</a></h2><p>Node.js Web Crypto API の実装でサポートされているアルゴリズムと、各アルゴリズムでサポートされている API の詳細を以下の表に示します。</p><table tabindex="0"><thead><tr><th>アルゴリズム</th><th><code>generateKey</code></th><th><code>exportKey</code></th><th><code>importKey</code></th><th><code>encrypt</code></th><th><code>decrypt</code></th><th><code>wrapKey</code></th><th><code>unwrapKey</code></th><th><code>deriveBits</code></th><th><code>deriveKey</code></th><th><code>sign</code></th><th><code>verify</code></th><th><code>digest</code></th></tr></thead><tbody><tr><td><code>&#39;RSASSA-PKCS1-v1_5&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td></tr><tr><td><code>&#39;RSA-PSS&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td></tr><tr><td><code>&#39;RSA-OAEP&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><code>&#39;ECDSA&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td></tr><tr><td><code>&#39;Ed25519&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td></tr><tr><td><code>&#39;Ed448&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td></tr><tr><td><code>&#39;ECDH&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td></tr><tr><td><code>&#39;X25519&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td></tr><tr><td><code>&#39;X448&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td></tr><tr><td><code>&#39;AES-CTR&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><code>&#39;AES-CBC&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><code>&#39;AES-GCM&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><code>&#39;AES-KW&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><code>&#39;HMAC&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td></tr><tr><td><code>&#39;HKDF&#39;</code></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td></tr><tr><td><code>&#39;PBKDF2&#39;</code></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td></tr><tr><td><code>&#39;SHA-1&#39;</code></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>✔</td></tr><tr><td><code>&#39;SHA-256&#39;</code></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>✔</td></tr><tr><td><code>&#39;SHA-384&#39;</code></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>✔</td></tr><tr><td><code>&#39;SHA-512&#39;</code></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>✔</td></tr></tbody></table><h2 id="class-crypto" tabindex="-1">Class: <code>Crypto</code> <a class="header-anchor" href="#class-crypto" aria-label="Permalink to “Class: Crypto”">​</a></h2><p><strong>Added in: v15.0.0</strong></p><p><code>globalThis.crypto</code> は <code>Crypto</code> クラスのインスタンスです。<code>Crypto</code> は、暗号 API の残りの部分へのアクセスを提供するシングルトンです。</p><h3 id="cryptosubtle" tabindex="-1"><code>crypto.subtle</code> <a class="header-anchor" href="#cryptosubtle" aria-label="Permalink to “crypto.subtle”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="/ja/nodejs/api/webcrypto#class-subtlecrypto">&lt;SubtleCrypto&gt;</a></li></ul><p><code>SubtleCrypto</code> API へのアクセスを提供します。</p><h3 id="cryptogetrandomvaluestypedarray" tabindex="-1"><code>crypto.getRandomValues(typedArray)</code> <a class="header-anchor" href="#cryptogetrandomvaluestypedarray" aria-label="Permalink to “crypto.getRandomValues(typedArray)”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><ul><li><code>typedArray</code> <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a></li><li>Returns: <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a></li></ul><p>暗号学的に強い乱数を生成します。指定された <code>typedArray</code> は乱数値で埋められ、<code>typedArray</code> への参照が返されます。</p><p>指定された <code>typedArray</code> は、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> の整数ベースのインスタンスでなければなりません。つまり、<code>Float32Array</code> と <code>Float64Array</code> は受け入れられません。</p><p>指定された <code>typedArray</code> が 65,536 バイトを超える場合、エラーがスローされます。</p><h3 id="cryptorandomuuid" tabindex="-1"><code>crypto.randomUUID()</code> <a class="header-anchor" href="#cryptorandomuuid" aria-label="Permalink to “crypto.randomUUID()”">​</a></h3><p><strong>追加:</strong> v16.7.0 以降</p><ul><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>ランダムな <a href="https://www.rfc-editor.org/rfc/rfc4122.txt" target="_blank" rel="noreferrer">RFC 4122</a> バージョン 4 UUID を生成します。UUID は、暗号論的に安全な擬似乱数ジェネレーターを使用して生成されます。</p><h2 id="class-cryptokey" tabindex="-1">Class: <code>CryptoKey</code> <a class="header-anchor" href="#class-cryptokey" aria-label="Permalink to “Class: CryptoKey”">​</a></h2><p><strong>追加:</strong> v15.0.0 以降</p><h3 id="cryptokeyalgorithm" tabindex="-1"><code>cryptoKey.algorithm</code> <a class="header-anchor" href="#cryptokeyalgorithm" aria-label="Permalink to “cryptoKey.algorithm”">​</a></h3><p><strong>追加:</strong> v15.0.0 以降</p><ul><li>型: <a href="/ja/nodejs/api/webcrypto#class-managerpage">&lt;AesKeyGenParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-rsahashedkeygenparams">&lt;RsaHashedKeyGenParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-eckeygenparams">&lt;EcKeyGenParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-hmackeygenparams">&lt;HmacKeyGenParams&gt;</a></li></ul><p>キーを使用できるアルゴリズムの詳細と、アルゴリズム固有の追加パラメーターを含むオブジェクト。</p><p>読み取り専用。</p><h3 id="cryptokeyextractable" tabindex="-1"><code>cryptoKey.extractable</code> <a class="header-anchor" href="#cryptokeyextractable" aria-label="Permalink to “cryptoKey.extractable”">​</a></h3><p><strong>追加:</strong> v15.0.0 以降</p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p><code>true</code> の場合、<a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> は <code>subtleCrypto.exportKey()</code> または <code>subtleCrypto.wrapKey()</code> のいずれかを使用して抽出できます。</p><p>読み取り専用。</p><h3 id="cryptokeytype" tabindex="-1"><code>cryptoKey.type</code> <a class="header-anchor" href="#cryptokeytype" aria-label="Permalink to “cryptoKey.type”">​</a></h3><p><strong>追加:</strong> v15.0.0 以降</p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;secret&#39;</code>, <code>&#39;private&#39;</code>, または <code>&#39;public&#39;</code> のいずれか。</li></ul><p>キーが対称 (<code>&#39;secret&#39;</code>) キーか、非対称 (<code>&#39;private&#39;</code> または <code>&#39;public&#39;</code>) キーかを識別する文字列。</p><h3 id="cryptokeyusages" tabindex="-1"><code>cryptoKey.usages</code> <a class="header-anchor" href="#cryptokeyusages" aria-label="Permalink to “cryptoKey.usages”">​</a></h3><p><strong>追加:</strong> v15.0.0 以降</p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>キーを使用できる操作を識別する文字列の配列。</p><p>可能な使用法は次のとおりです。</p><ul><li><code>&#39;encrypt&#39;</code> - キーを使用してデータを暗号化できます。</li><li><code>&#39;decrypt&#39;</code> - キーを使用してデータを復号化できます。</li><li><code>&#39;sign&#39;</code> - キーを使用してデジタル署名を生成できます。</li><li><code>&#39;verify&#39;</code> - キーを使用してデジタル署名を検証できます。</li><li><code>&#39;deriveKey&#39;</code> - キーを使用して新しいキーを派生させることができます。</li><li><code>&#39;deriveBits&#39;</code> - キーを使用してビットを派生させることができます。</li><li><code>&#39;wrapKey&#39;</code> - キーを使用して別のキーをラップできます。</li><li><code>&#39;unwrapKey&#39;</code> - キーを使用して別のキーをアンラップできます。</li></ul><p>有効なキーの使用法は、キーアルゴリズム（<code>cryptokey.algorithm.name</code> で識別される）によって異なります。</p><table tabindex="0"><thead><tr><th>キーの種類</th><th><code>&#39;encrypt&#39;</code></th><th><code>&#39;decrypt&#39;</code></th><th><code>&#39;sign&#39;</code></th><th><code>&#39;verify&#39;</code></th><th><code>&#39;deriveKey&#39;</code></th><th><code>&#39;deriveBits&#39;</code></th><th><code>&#39;wrapKey&#39;</code></th><th><code>&#39;unwrapKey&#39;</code></th></tr></thead><tbody><tr><td><code>&#39;AES-CBC&#39;</code></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;AES-CTR&#39;</code></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;AES-GCM&#39;</code></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;AES-KW&#39;</code></td><td></td><td></td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;ECDH&#39;</code></td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td></tr><tr><td><code>&#39;X25519&#39;</code></td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td></tr><tr><td><code>&#39;X448&#39;</code></td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td></tr><tr><td><code>&#39;ECDSA&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td></tr><tr><td><code>&#39;Ed25519&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td></tr><tr><td><code>&#39;Ed448&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td></tr><tr><td><code>&#39;HDKF&#39;</code></td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td></tr><tr><td><code>&#39;HMAC&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td></tr><tr><td><code>&#39;PBKDF2&#39;</code></td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td></tr><tr><td><code>&#39;RSA-OAEP&#39;</code></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;RSA-PSS&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td></tr><tr><td><code>&#39;RSASSA-PKCS1-v1_5&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="class-cryptokeypair" tabindex="-1">クラス: <code>CryptoKeyPair</code> <a class="header-anchor" href="#class-cryptokeypair" aria-label="Permalink to “クラス: CryptoKeyPair”">​</a></h2><p><strong>Added in: v15.0.0</strong></p><p><code>CryptoKeyPair</code> は、非対称鍵ペアを表す <code>publicKey</code> プロパティと <code>privateKey</code> プロパティを持つシンプルな辞書オブジェクトです。</p><h3 id="cryptokeypairprivatekey" tabindex="-1"><code>cryptoKeyPair.privateKey</code> <a class="header-anchor" href="#cryptokeypairprivatekey" aria-label="Permalink to “cryptoKeyPair.privateKey”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> <code>type</code> が <code>&#39;private&#39;</code> となる <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a>。</li></ul><h3 id="cryptokeypairpublickey" tabindex="-1"><code>cryptoKeyPair.publicKey</code> <a class="header-anchor" href="#cryptokeypairpublickey" aria-label="Permalink to “cryptoKeyPair.publicKey”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> <code>type</code> が <code>&#39;public&#39;</code> となる <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a>。</li></ul><h2 id="class-subtlecrypto" tabindex="-1">クラス: <code>SubtleCrypto</code> <a class="header-anchor" href="#class-subtlecrypto" aria-label="Permalink to “クラス: SubtleCrypto”">​</a></h2><p><strong>Added in: v15.0.0</strong></p><h3 id="subtledecryptalgorithm-key-data" tabindex="-1"><code>subtle.decrypt(algorithm, key, data)</code> <a class="header-anchor" href="#subtledecryptalgorithm-key-data" aria-label="Permalink to “subtle.decrypt(algorithm, key, data)”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><ul><li><code>algorithm</code>: <a href="/ja/nodejs/api/webcrypto#class-rsaoaepparams">&lt;RsaOaepParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aesctrparams">&lt;AesCtrParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aescbcparams">&lt;AesCbcParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aesgcmparams">&lt;AesGcmParams&gt;</a></li><li><code>key</code>: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a></li><li><code>data</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で解決される Promise。</li></ul><p><code>algorithm</code> で指定されたメソッドとパラメータ、および <code>key</code> によって提供される鍵素材を使用して、<code>subtle.decrypt()</code> は提供された <code>data</code> の解読を試みます。成功した場合、返される Promise は、プレーンテキストの結果を含む <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で解決されます。</p><p>現在サポートされているアルゴリズムは次のとおりです。</p><ul><li><code>&#39;RSA-OAEP&#39;</code></li><li><code>&#39;AES-CTR&#39;</code></li><li><code>&#39;AES-CBC&#39;</code></li><li><code>&#39;AES-GCM&#39;</code></li></ul><h3 id="subtlederivebitsalgorithm-basekey-length" tabindex="-1"><code>subtle.deriveBits(algorithm, baseKey[, length])</code> <a class="header-anchor" href="#subtlederivebitsalgorithm-basekey-length" aria-label="Permalink to “subtle.deriveBits(algorithm, baseKey[, length])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.5.0, v20.17.0</td><td><code>length</code> パラメーターが <code>&#39;ECDH&#39;</code>, <code>&#39;X25519&#39;</code>, および <code>&#39;X448&#39;</code> でオプションになりました。</td></tr><tr><td>v18.4.0, v16.17.0</td><td><code>&#39;X25519&#39;</code> および <code>&#39;X448&#39;</code> アルゴリズムが追加されました。</td></tr><tr><td>v15.0.0</td><td>v15.0.0 で追加されました。</td></tr></tbody></table></div><ul><li><code>algorithm</code>: <a href="/ja/nodejs/api/webcrypto#class-algorithmidentifier">&lt;AlgorithmIdentifier&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-ecdhkeyderiveparams">&lt;EcdhKeyDeriveParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-hkdfparams">&lt;HkdfParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-pbkdf2params">&lt;Pbkdf2Params&gt;</a></li><li><code>baseKey</code>: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a></li><li><code>length</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type" target="_blank" rel="noreferrer">&lt;null&gt;</a> <strong>デフォルト:</strong> <code>null</code></li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で解決されます。</li></ul><p><code>algorithm</code> で指定されたメソッドとパラメーター、および <code>baseKey</code> で提供される鍵素材を使用して、<code>subtle.deriveBits()</code> は <code>length</code> ビットの生成を試みます。</p><p><code>length</code> が提供されないか <code>null</code> の場合、特定のアルゴリズムの最大ビット数が生成されます。 これは、<code>&#39;ECDH&#39;</code>, <code>&#39;X25519&#39;</code>, および <code>&#39;X448&#39;</code> アルゴリズムで許可されています。他のアルゴリズムでは、<code>length</code> は数値である必要があります。</p><p>成功した場合、返される Promise は、生成されたデータを含む <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で解決されます。</p><p>現在サポートされているアルゴリズムは次のとおりです。</p><ul><li><code>&#39;ECDH&#39;</code></li><li><code>&#39;X25519&#39;</code></li><li><code>&#39;X448&#39;</code></li><li><code>&#39;HKDF&#39;</code></li><li><code>&#39;PBKDF2&#39;</code></li></ul><h3 id="subtlederivekeyalgorithm-basekey-derivedkeyalgorithm-extractable-keyusages" tabindex="-1"><code>subtle.deriveKey(algorithm, baseKey, derivedKeyAlgorithm, extractable, keyUsages)</code> <a class="header-anchor" href="#subtlederivekeyalgorithm-basekey-derivedkeyalgorithm-extractable-keyusages" aria-label="Permalink to “subtle.deriveKey(algorithm, baseKey, derivedKeyAlgorithm, extractable, keyUsages)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v18.4.0, v16.17.0</td><td><code>&#39;X25519&#39;</code> および <code>&#39;X448&#39;</code> アルゴリズムが追加されました。</td></tr><tr><td>v15.0.0</td><td>v15.0.0 で追加されました。</td></tr></tbody></table></div><ul><li><code>algorithm</code>: <a href="/ja/nodejs/api/webcrypto#class-algorithmidentifier">&lt;AlgorithmIdentifier&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-ecdhkeyderiveparams">&lt;EcdhKeyDeriveParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-hkdfparams">&lt;HkdfParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-pbkdf2params">&lt;Pbkdf2Params&gt;</a></li><li><code>baseKey</code>: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a></li><li><code>derivedKeyAlgorithm</code>: <a href="/ja/nodejs/api/webcrypto#class-hmackeygenparams">&lt;HmacKeyGenParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aeskeygenparams">&lt;AesKeyGenParams&gt;</a></li><li><code>extractable</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li><li><code>keyUsages</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> <a href="/ja/nodejs/api/webcrypto#cryptokeyusages">Key usages</a> を参照してください。</li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> で解決されます。</li></ul><p><code>algorithm</code> で指定されたメソッドとパラメーター、および <code>baseKey</code> で提供される鍵素材を使用して、<code>subtle.deriveKey()</code> は、<code>derivedKeyAlgorithm</code> のメソッドとパラメーターに基づいて、新しい <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> の生成を試みます。</p><p><code>subtle.deriveKey()</code> の呼び出しは、<code>subtle.deriveBits()</code> を呼び出して生の鍵素材を生成し、その結果を <code>subtle.importKey()</code> メソッドに <code>deriveKeyAlgorithm</code>、<code>extractable</code>、および <code>keyUsages</code> パラメーターを入力として渡すことと同等です。</p><p>現在サポートされているアルゴリズムは次のとおりです。</p><ul><li><code>&#39;ECDH&#39;</code></li><li><code>&#39;X25519&#39;</code></li><li><code>&#39;X448&#39;</code></li><li><code>&#39;HKDF&#39;</code></li><li><code>&#39;PBKDF2&#39;</code></li></ul><h3 id="subtledigestalgorithm-data" tabindex="-1"><code>subtle.digest(algorithm, data)</code> <a class="header-anchor" href="#subtledigestalgorithm-data" aria-label="Permalink to “subtle.digest(algorithm, data)”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><ul><li><code>algorithm</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li><li><code>data</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で解決されます。</li></ul><p><code>algorithm</code> で識別されるメソッドを使用し、<code>subtle.digest()</code> は <code>data</code> のダイジェストを生成しようとします。成功した場合、返される promise は、計算されたダイジェストを含む <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で解決されます。</p><p><code>algorithm</code> が <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> として提供されている場合、次のいずれかでなければなりません。</p><ul><li><code>&#39;SHA-1&#39;</code></li><li><code>&#39;SHA-256&#39;</code></li><li><code>&#39;SHA-384&#39;</code></li><li><code>&#39;SHA-512&#39;</code></li></ul><p><code>algorithm</code> が <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> として提供されている場合、その値が上記のいずれかである <code>name</code> プロパティが必要です。</p><h3 id="subtleencryptalgorithm-key-data" tabindex="-1"><code>subtle.encrypt(algorithm, key, data)</code> <a class="header-anchor" href="#subtleencryptalgorithm-key-data" aria-label="Permalink to “subtle.encrypt(algorithm, key, data)”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><ul><li><code>algorithm</code>: <a href="/ja/nodejs/api/webcrypto#class-rsaoaepparams">&lt;RsaOaepParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aesctrparams">&lt;AesCtrParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aescbcparams">&lt;AesCbcParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aesgcmparams">&lt;AesGcmParams&gt;</a></li><li><code>key</code>: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a></li><li><code>data</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で解決されます。</li></ul><p><code>algorithm</code> で指定されたメソッドとパラメータ、および <code>key</code> で提供されたキー素材を使用して、<code>subtle.encrypt()</code> は <code>data</code> を暗号化しようとします。成功した場合、返される promise は、暗号化された結果を含む <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で解決されます。</p><p>現在サポートされているアルゴリズムは次のとおりです。</p><ul><li><code>&#39;RSA-OAEP&#39;</code></li><li><code>&#39;AES-CTR&#39;</code></li><li><code>&#39;AES-CBC&#39;</code></li><li><code>&#39;AES-GCM&#39;</code></li></ul><h3 id="subtleexportkeyformat-key" tabindex="-1"><code>subtle.exportKey(format, key)</code> <a class="header-anchor" href="#subtleexportkeyformat-key" aria-label="Permalink to “subtle.exportKey(format, key)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v18.4.0, v16.17.0</td><td><code>&#39;Ed25519&#39;</code>, <code>&#39;Ed448&#39;</code>, <code>&#39;X25519&#39;</code>, および <code>&#39;X448&#39;</code> アルゴリズムが追加されました。</td></tr><tr><td>v15.9.0</td><td><code>&#39;NODE-DSA&#39;</code> JWK エクスポートを削除しました。</td></tr><tr><td>v15.0.0</td><td>次のバージョンで追加: v15.0.0</td></tr></tbody></table></div><ul><li><code>format</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;raw&#39;</code>, <code>&#39;pkcs8&#39;</code>, <code>&#39;spki&#39;</code>, または <code>&#39;jwk&#39;</code> のいずれかである必要があります。</li><li><code>key</code>: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a></li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> で解決されます。</li></ul><p>指定された形式で指定されたキーをエクスポートします（サポートされている場合）。</p><p><a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> が抽出可能でない場合、返される Promise は reject されます。</p><p><code>format</code> が <code>&#39;pkcs8&#39;</code> または <code>&#39;spki&#39;</code> のいずれかで、エクスポートが成功した場合、返される Promise は、エクスポートされたキーデータを含む <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で解決されます。</p><p><code>format</code> が <code>&#39;jwk&#39;</code> で、エクスポートが成功した場合、返される Promise は、<a href="https://tools.ietf.org/html/rfc7517" target="_blank" rel="noreferrer">JSON Web Key</a> 仕様に準拠する JavaScript オブジェクトで解決されます。</p><table tabindex="0"><thead><tr><th>キータイプ</th><th><code>&#39;spki&#39;</code></th><th><code>&#39;pkcs8&#39;</code></th><th><code>&#39;jwk&#39;</code></th><th><code>&#39;raw&#39;</code></th></tr></thead><tbody><tr><td><code>&#39;AES-CBC&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;AES-CTR&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;AES-GCM&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;AES-KW&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;ECDH&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;ECDSA&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;Ed25519&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;Ed448&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;HDKF&#39;</code></td><td></td><td></td><td></td><td></td></tr><tr><td><code>&#39;HMAC&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;PBKDF2&#39;</code></td><td></td><td></td><td></td><td></td></tr><tr><td><code>&#39;RSA-OAEP&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td></tr><tr><td><code>&#39;RSA-PSS&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td></tr><tr><td><code>&#39;RSASSA-PKCS1-v1_5&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td></tr></tbody></table><h3 id="subtlegeneratekeyalgorithm-extractable-keyusages" tabindex="-1"><code>subtle.generateKey(algorithm, extractable, keyUsages)</code> <a class="header-anchor" href="#subtlegeneratekeyalgorithm-extractable-keyusages" aria-label="Permalink to “subtle.generateKey(algorithm, extractable, keyUsages)”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><ul><li><p><code>algorithm</code>: <a href="/ja/nodejs/api/webcrypto#class-algorithmidentifier">&lt;AlgorithmIdentifier&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-rsahashedkeygenparams">&lt;RsaHashedKeyGenParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-eckeygenparams">&lt;EcKeyGenParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-hmackeygenparams">&lt;HmacKeyGenParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aeskeygenassistgenparams">&lt;AesKeyGenParams&gt;</a></p></li><li><p><code>extractable</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></p></li><li><p><code>keyUsages</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> <a href="/ja/nodejs/api/webcrypto#cryptokeyusages">キー用途</a> を参照してください。</p></li><li><p>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-cryptokeypair">&lt;CryptoKeyPair&gt;</a> で解決されます。</p></li></ul><p><code>algorithm</code> で提供されるメソッドとパラメーターを使用して、<code>subtle.generateKey()</code> は新しいキーマテリアルの生成を試みます。使用されるメソッドに応じて、このメソッドは単一の <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> または <a href="/ja/nodejs/api/webcrypto#class-cryptokeypair">&lt;CryptoKeyPair&gt;</a> を生成する場合があります。</p><p><a href="/ja/nodejs/api/webcrypto#class-cryptokeypair">&lt;CryptoKeyPair&gt;</a>（公開鍵と秘密鍵）の生成がサポートされているアルゴリズムは次のとおりです。</p><ul><li><code>&#39;RSASSA-PKCS1-v1_5&#39;</code></li><li><code>&#39;RSA-PSS&#39;</code></li><li><code>&#39;RSA-OAEP&#39;</code></li><li><code>&#39;ECDSA&#39;</code></li><li><code>&#39;Ed25519&#39;</code></li><li><code>&#39;Ed448&#39;</code></li><li><code>&#39;ECDH&#39;</code></li><li><code>&#39;X25519&#39;</code></li><li><code>&#39;X448&#39;</code></li></ul><p><a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> (秘密鍵) の生成がサポートされているアルゴリズムは次のとおりです。</p><ul><li><code>&#39;HMAC&#39;</code></li><li><code>&#39;AES-CTR&#39;</code></li><li><code>&#39;AES-CBC&#39;</code></li><li><code>&#39;AES-GCM&#39;</code></li><li><code>&#39;AES-KW&#39;</code></li></ul><h3 id="subtleimportkeyformat-keydata-algorithm-extractable-keyusages" tabindex="-1"><code>subtle.importKey(format, keyData, algorithm, extractable, keyUsages)</code> <a class="header-anchor" href="#subtleimportkeyformat-keydata-algorithm-extractable-keyusages" aria-label="Permalink to “subtle.importKey(format, keyData, algorithm, extractable, keyUsages)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v18.4.0, v16.17.0</td><td><code>&#39;Ed25519&#39;</code>, <code>&#39;Ed448&#39;</code>, <code>&#39;X25519&#39;</code>, および <code>&#39;X448&#39;</code> アルゴリズムを追加しました。</td></tr><tr><td>v15.9.0</td><td><code>&#39;NODE-DSA&#39;</code> JWK インポートを削除しました。</td></tr><tr><td>v15.0.0</td><td>v15.0.0 で追加されました。</td></tr></tbody></table></div><ul><li><p><code>format</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;raw&#39;</code>, <code>&#39;pkcs8&#39;</code>, <code>&#39;spki&#39;</code>, または <code>&#39;jwk&#39;</code> のいずれかである必要があります。</p></li><li><p><code>keyData</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></p></li><li><p><code>algorithm</code>: <a href="/ja/nodejs/api/webcrypto#class-algorithmidentifier">&lt;AlgorithmIdentifier&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-rsahashedimportparams">&lt;RsaHashedImportParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-eckeyimportparams">&lt;EcKeyImportParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-hmacimportparams">&lt;HmacImportParams&gt;</a></p></li><li><p><code>extractable</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></p></li><li><p><code>keyUsages</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> <a href="/ja/nodejs/api/webcrypto#cryptokeyusages">Key usages</a> を参照してください。</p></li><li><p>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> で解決される Promise。</p></li></ul><p><code>subtle.importKey()</code> メソッドは、指定された <code>keyData</code> を指定された <code>format</code> として解釈し、提供された <code>algorithm</code>、<code>extractable</code>、および <code>keyUsages</code> 引数を使用して <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> インスタンスを作成しようとします。インポートが成功すると、返される Promise は作成された <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> で解決されます。</p><p><code>&#39;PBKDF2&#39;</code> キーをインポートする場合、<code>extractable</code> は <code>false</code> である必要があります。</p><p>現在サポートされているアルゴリズムは次のとおりです。</p><table tabindex="0"><thead><tr><th>キーの種類</th><th><code>&#39;spki&#39;</code></th><th><code>&#39;pkcs8&#39;</code></th><th><code>&#39;jwk&#39;</code></th><th><code>&#39;raw&#39;</code></th></tr></thead><tbody><tr><td><code>&#39;AES-CBC&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;AES-CTR&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;AES-GCM&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;AES-KW&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;ECDH&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;X25519&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;X448&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;ECDSA&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;Ed25519&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;Ed448&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;HDKF&#39;</code></td><td></td><td></td><td></td><td>✔</td></tr><tr><td><code>&#39;HMAC&#39;</code></td><td></td><td></td><td>✔</td><td>✔</td></tr><tr><td><code>&#39;PBKDF2&#39;</code></td><td></td><td></td><td></td><td>✔</td></tr><tr><td><code>&#39;RSA-OAEP&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td></tr><tr><td><code>&#39;RSA-PSS&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td></tr><tr><td><code>&#39;RSASSA-PKCS1-v1_5&#39;</code></td><td>✔</td><td>✔</td><td>✔</td><td></td></tr></tbody></table><h3 id="subtlesignalgorithm-key-data" tabindex="-1"><code>subtle.sign(algorithm, key, data)</code> <a class="header-anchor" href="#subtlesignalgorithm-key-data" aria-label="Permalink to “subtle.sign(algorithm, key, data)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v18.4.0, v16.17.0</td><td><code>&#39;Ed25519&#39;</code> および <code>&#39;Ed448&#39;</code> アルゴリズムが追加されました。</td></tr><tr><td>v15.0.0</td><td>v15.0.0 で追加されました。</td></tr></tbody></table></div><ul><li><code>algorithm</code>: <a href="/ja/nodejs/api/webcrypto#class-algorithmidentifier">&lt;AlgorithmIdentifier&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-rsapssparams">&lt;RsaPssParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-ecdsaparams">&lt;EcdsaParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-ed448params">&lt;Ed448Params&gt;</a></li><li><code>key</code>: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a></li><li><code>data</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で履行されます</li></ul><p><code>algorithm</code> で与えられたメソッドとパラメータ、および <code>key</code> で提供された鍵素材を使用して、<code>subtle.sign()</code> は <code>data</code> の暗号署名を生成しようとします。成功した場合、返された Promise は、生成された署名を含む <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で解決されます。</p><p>現在サポートされているアルゴリズムは次のとおりです。</p><ul><li><code>&#39;RSASSA-PKCS1-v1_5&#39;</code></li><li><code>&#39;RSA-PSS&#39;</code></li><li><code>&#39;ECDSA&#39;</code></li><li><code>&#39;Ed25519&#39;</code></li><li><code>&#39;Ed448&#39;</code></li><li><code>&#39;HMAC&#39;</code></li></ul><h3 id="subtleunwrapkeyformat-wrappedkey-unwrappingkey-unwrapalgo-unwrappedkeyalgo-extractable-keyusages" tabindex="-1"><code>subtle.unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgo, unwrappedKeyAlgo, extractable, keyUsages)</code> <a class="header-anchor" href="#subtleunwrapkeyformat-wrappedkey-unwrappingkey-unwrapalgo-unwrappedkeyalgo-extractable-keyusages" aria-label="Permalink to “subtle.unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgo, unwrappedKeyAlgo, extractable, keyUsages)”">​</a></h3><p><strong>追加:</strong> v15.0.0</p><ul><li><p><code>format</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;raw&#39;</code>, <code>&#39;pkcs8&#39;</code>, <code>&#39;spki&#39;</code>, または <code>&#39;jwk&#39;</code> のいずれかである必要があります。</p></li><li><p><code>wrappedKey</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></p></li><li><p><code>unwrappingKey</code>: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a></p></li><li><p><code>unwrapAlgo</code>: <a href="/ja/nodejs/api/webcrypto#class-algorithmidentifier">&lt;AlgorithmIdentifier&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-rsaoaepparams">&lt;RsaOaepParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aesctrparams">&lt;AesCtrParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aescbcparams">&lt;AesCbcParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aesgcmparams">&lt;AesGcmParams&gt;</a></p></li><li><p><code>unwrappedKeyAlgo</code>: <a href="/ja/nodejs/api/webcrypto#class-algorithmidentifier">&lt;AlgorithmIdentifier&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-rsahashedimportparams">&lt;RsaHashedImportParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-eckeyimportparams">&lt;EcKeyImportParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-hmacimportparams">&lt;HmacImportParams&gt;</a></p></li><li><p><code>extractable</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></p></li><li><p><code>keyUsages</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> <a href="/ja/nodejs/api/webcrypto#cryptokeyusages">鍵の使用法</a>を参照してください。</p></li><li><p>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> で履行されます</p></li></ul><p>暗号化において、「鍵をラップする」とは、鍵素材をエクスポートしてから暗号化することを指します。<code>subtle.unwrapKey()</code> メソッドは、ラップされた鍵を復号化し、<a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> インスタンスを作成しようとします。これは、最初に暗号化された鍵データに対して <code>subtle.decrypt()</code> を呼び出し (<code>wrappedKey</code>、<code>unwrapAlgo</code>、および <code>unwrappingKey</code> 引数を入力として使用)、次に結果を <code>subtle.importKey()</code> メソッドに渡し、<code>unwrappedKeyAlgo</code>、<code>extractable</code>、および <code>keyUsages</code> 引数を入力として使用するのと同じです。成功した場合、返された Promise は <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a> オブジェクトで解決されます。</p><p>現在サポートされているラッピングアルゴリズムは次のとおりです。</p><ul><li><code>&#39;RSA-OAEP&#39;</code></li><li><code>&#39;AES-CTR&#39;</code></li><li><code>&#39;AES-CBC&#39;</code></li><li><code>&#39;AES-GCM&#39;</code></li><li><code>&#39;AES-KW&#39;</code></li></ul><p>サポートされているアンラップされた鍵アルゴリズムは次のとおりです。</p><ul><li><code>&#39;RSASSA-PKCS1-v1_5&#39;</code></li><li><code>&#39;RSA-PSS&#39;</code></li><li><code>&#39;RSA-OAEP&#39;</code></li><li><code>&#39;ECDSA&#39;</code></li><li><code>&#39;Ed25519&#39;</code></li><li><code>&#39;Ed448&#39;</code></li><li><code>&#39;ECDH&#39;</code></li><li><code>&#39;X25519&#39;</code></li><li><code>&#39;X448&#39;</code></li><li><code>&#39;HMAC&#39;</code></li><li><code>&#39;AES-CTR&#39;</code></li><li><code>&#39;AES-CBC&#39;</code></li><li><code>&#39;AES-GCM&#39;</code></li><li><code>&#39;AES-KW&#39;</code></li></ul><h3 id="subtleverifyalgorithm-key-signature-data" tabindex="-1"><code>subtle.verify(algorithm, key, signature, data)</code> <a class="header-anchor" href="#subtleverifyalgorithm-key-signature-data" aria-label="Permalink to “subtle.verify(algorithm, key, signature, data)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v18.4.0, v16.17.0</td><td><code>&#39;Ed25519&#39;</code> と <code>&#39;Ed448&#39;</code> アルゴリズムを追加。</td></tr><tr><td>v15.0.0</td><td>v15.0.0 で追加</td></tr></tbody></table></div><ul><li><code>algorithm</code>: <a href="/ja/nodejs/api/webcrypto#class-algorithmidentifier">&lt;AlgorithmIdentifier&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-rsapssparams">&lt;RsaPssParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-ecdsaparams">&lt;EcdsaParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-ed448params">&lt;Ed448Params&gt;</a></li><li><code>key</code>: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a></li><li><code>signature</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li><li><code>data</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> で履行</li></ul><p><code>algorithm</code> に与えられたメソッドとパラメータ、および <code>key</code> によって提供される鍵素材を使用して、<code>subtle.verify()</code> は <code>signature</code> が <code>data</code> の有効な暗号署名であることを検証しようとします。返される Promise は、<code>true</code> または <code>false</code> で解決されます。</p><p>現在サポートされているアルゴリズムは次のとおりです。</p><ul><li><code>&#39;RSASSA-PKCS1-v1_5&#39;</code></li><li><code>&#39;RSA-PSS&#39;</code></li><li><code>&#39;ECDSA&#39;</code></li><li><code>&#39;Ed25519&#39;</code></li><li><code>&#39;Ed448&#39;</code></li><li><code>&#39;HMAC&#39;</code></li></ul><h3 id="subtlewrapkeyformat-key-wrappingkey-wrapalgo" tabindex="-1"><code>subtle.wrapKey(format, key, wrappingKey, wrapAlgo)</code> <a class="header-anchor" href="#subtlewrapkeyformat-key-wrappingkey-wrapalgo" aria-label="Permalink to “subtle.wrapKey(format, key, wrappingKey, wrapAlgo)”">​</a></h3><p><strong>追加: v15.0.0</strong></p><ul><li><code>format</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;raw&#39;</code>, <code>&#39;pkcs8&#39;</code>, <code>&#39;spki&#39;</code>, または <code>&#39;jwk&#39;</code> のいずれかである必要があります。</li><li><code>key</code>: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a></li><li><code>wrappingKey</code>: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a></li><li><code>wrapAlgo</code>: <a href="/ja/nodejs/api/webcrypto#class-algorithmidentifier">&lt;AlgorithmIdentifier&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-rsaoaepparams">&lt;RsaOaepParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aesctrparams">&lt;AesCtrParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aescbcparams">&lt;AesCbcParams&gt;</a> | <a href="/ja/nodejs/api/webcrypto#class-aesgcmparams">&lt;AesGcmParams&gt;</a></li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で履行</li></ul><p>暗号化において、「キーのラッピング」とは、鍵素材をエクスポートしてから暗号化することを指します。<code>subtle.wrapKey()</code> メソッドは、鍵素材を <code>format</code> によって識別される形式にエクスポートし、<code>wrapAlgo</code> によって指定されたメソッドとパラメータ、および <code>wrappingKey</code> によって提供された鍵素材を使用して暗号化します。これは、<code>format</code> と <code>key</code> を引数として使用して <code>subtle.exportKey()</code> を呼び出し、その結果を <code>wrappingKey</code> と <code>wrapAlgo</code> を入力として使用して <code>subtle.encrypt()</code> メソッドに渡すことと同じです。成功した場合、返される Promise は、暗号化されたキーデータを含む <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> で解決されます。</p><p>現在サポートされているラッピングアルゴリズムは次のとおりです。</p><ul><li><code>&#39;RSA-OAEP&#39;</code></li><li><code>&#39;AES-CTR&#39;</code></li><li><code>&#39;AES-CBC&#39;</code></li><li><code>&#39;AES-GCM&#39;</code></li><li><code>&#39;AES-KW&#39;</code></li></ul><h2 id="algorithm-parameters" tabindex="-1">アルゴリズムパラメータ <a class="header-anchor" href="#algorithm-parameters" aria-label="Permalink to “アルゴリズムパラメータ”">​</a></h2><p>アルゴリズムパラメータオブジェクトは、様々な<a href="/ja/nodejs/api/webcrypto#class-subtlecrypto">&lt;SubtleCrypto&gt;</a>メソッドで使用されるメソッドとパラメータを定義します。ここでは「クラス」として説明されていますが、これらは単純なJavaScriptの辞書オブジェクトです。</p><h3 id="class-algorithmidentifier" tabindex="-1">クラス: <code>AlgorithmIdentifier</code> <a class="header-anchor" href="#class-algorithmidentifier" aria-label="Permalink to “クラス: AlgorithmIdentifier”">​</a></h3><p><strong>追加: v18.4.0, v16.17.0</strong></p><h4 id="algorithmidentifiername" tabindex="-1"><code>algorithmIdentifier.name</code> <a class="header-anchor" href="#algorithmidentifiername" aria-label="Permalink to “algorithmIdentifier.name”">​</a></h4><p><strong>追加: v18.4.0, v16.17.0</strong></p><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><h3 id="class-aescbcparams" tabindex="-1">クラス: <code>AesCbcParams</code> <a class="header-anchor" href="#class-aescbcparams" aria-label="Permalink to “クラス: AesCbcParams”">​</a></h3><p><strong>追加: v15.0.0</strong></p><h4 id="aescbcparamsiv" tabindex="-1"><code>aesCbcParams.iv</code> <a class="header-anchor" href="#aescbcparamsiv" aria-label="Permalink to “aesCbcParams.iv”">​</a></h4><p><strong>追加: v15.0.0</strong></p><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul><p>初期化ベクトルを提供します。 これは正確に16バイトの長さでなければならず、予測不可能で暗号学的にランダムである必要があります。</p><h4 id="aescbcparamsname" tabindex="-1"><code>aesCbcParams.name</code> <a class="header-anchor" href="#aescbcparamsname" aria-label="Permalink to “aesCbcParams.name”">​</a></h4><p><strong>追加: v15.0.0</strong></p><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;AES-CBC&#39;</code> でなければなりません。</li></ul><h3 id="class-aesctrparams" tabindex="-1">クラス: <code>AesCtrParams</code> <a class="header-anchor" href="#class-aesctrparams" aria-label="Permalink to “クラス: AesCtrParams”">​</a></h3><p><strong>追加: v15.0.0</strong></p><h4 id="aesctrparamscounter" tabindex="-1"><code>aesCtrParams.counter</code> <a class="header-anchor" href="#aesctrparamscounter" aria-label="Permalink to “aesCtrParams.counter”">​</a></h4><p><strong>追加: v15.0.0</strong></p><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul><p>カウンタブロックの初期値。 これは正確に16バイトの長さでなければなりません。</p><p><code>AES-CTR</code>メソッドは、ブロックの一番右の<code>length</code>ビットをカウンタとして使用し、残りのビットをナンスとして使用します。</p><h4 id="aesctrparamslength" tabindex="-1"><code>aesCtrParams.length</code> <a class="header-anchor" href="#aesctrparamslength" aria-label="Permalink to “aesCtrParams.length”">​</a></h4><p><strong>追加: v15.0.0</strong></p><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <code>aesCtrParams.counter</code>の中でカウンタとして使用されるビット数。</li></ul><h4 id="aesctrparamsname" tabindex="-1"><code>aesCtrParams.name</code> <a class="header-anchor" href="#aesctrparamsname" aria-label="Permalink to “aesCtrParams.name”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;AES-CTR&#39;</code> である必要があります。</li></ul><h3 id="class-aesgcmparams" tabindex="-1">Class: <code>AesGcmParams</code> <a class="header-anchor" href="#class-aesgcmparams" aria-label="Permalink to “Class: AesGcmParams”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><h4 id="aesgcmparamsadditionaldata" tabindex="-1"><code>aesGcmParams.additionalData</code> <a class="header-anchor" href="#aesgcmparamsadditionaldata" aria-label="Permalink to “aesGcmParams.additionalData”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a></li></ul><p>AES-GCM メソッドでは、<code>additionalData</code> は暗号化されませんが、データの認証に含まれる追加の入力です。<code>additionalData</code> の使用は任意です。</p><h4 id="aesgcmparamsiv" tabindex="-1"><code>aesGcmParams.iv</code> <a class="header-anchor" href="#aesgcmparamsiv" aria-label="Permalink to “aesGcmParams.iv”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul><p>初期化ベクトルは、特定の鍵を使用したすべての暗号化操作で一意である必要があります。</p><p>理想的には、これは決定論的な 12 バイトの値であり、同じ鍵を使用するすべての呼び出しで一意であることが保証されるように計算されます。あるいは、初期化ベクトルは少なくとも 12 バイトの暗号論的にランダムなバイトで構成されていても構いません。AES-GCM の初期化ベクトルの構築に関する詳細については、<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf" target="_blank" rel="noreferrer">NIST SP 800-38D</a> のセクション 8 を参照してください。</p><h4 id="aesgcmparamsname" tabindex="-1"><code>aesGcmParams.name</code> <a class="header-anchor" href="#aesgcmparamsname" aria-label="Permalink to “aesGcmParams.name”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;AES-GCM&#39;</code> である必要があります。</li></ul><h4 id="aesgcmparamstaglength" tabindex="-1"><code>aesGcmParams.tagLength</code> <a class="header-anchor" href="#aesgcmparamstaglength" aria-label="Permalink to “aesGcmParams.tagLength”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 生成される認証タグのサイズ（ビット単位）。この値は、<code>32</code>、<code>64</code>、<code>96</code>、<code>104</code>、<code>112</code>、<code>120</code>、または <code>128</code> のいずれかでなければなりません。<strong>デフォルト:</strong> <code>128</code>。</li></ul><h3 id="class-aeskeygenparams" tabindex="-1">Class: <code>AesKeyGenParams</code> <a class="header-anchor" href="#class-aeskeygenparams" aria-label="Permalink to “Class: AesKeyGenParams”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><h4 id="aeskeygenparamslength" tabindex="-1"><code>aesKeyGenParams.length</code> <a class="header-anchor" href="#aeskeygenparamslength" aria-label="Permalink to “aesKeyGenParams.length”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>生成される AES 鍵の長さ。これは <code>128</code>、<code>192</code>、または <code>256</code> のいずれかでなければなりません。</p><h4 id="aeskeygenparamsname" tabindex="-1"><code>aesKeyGenParams.name</code> <a class="header-anchor" href="#aeskeygenparamsname" aria-label="Permalink to “aesKeyGenParams.name”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;AES-CBC&#39;</code>、<code>&#39;AES-CTR&#39;</code>、<code>&#39;AES-GCM&#39;</code>、または <code>&#39;AES-KW&#39;</code> のいずれかでなければなりません。</li></ul><h3 id="class-ecdhkeyderiveparams" tabindex="-1">Class: <code>EcdhKeyDeriveParams</code> <a class="header-anchor" href="#class-ecdhkeyderiveparams" aria-label="Permalink to “Class: EcdhKeyDeriveParams”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><h4 id="ecdhkeyderiveparamsname" tabindex="-1"><code>ecdhKeyDeriveParams.name</code> <a class="header-anchor" href="#ecdhkeyderiveparamsname" aria-label="Permalink to “ecdhKeyDeriveParams.name”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;ECDH&#39;</code>、<code>&#39;X25519&#39;</code>、または <code>&#39;X448&#39;</code> のいずれかでなければなりません。</li></ul><h4 id="ecdhkeyderiveparamspublic" tabindex="-1"><code>ecdhKeyDeriveParams.public</code> <a class="header-anchor" href="#ecdhkeyderiveparamspublic" aria-label="Permalink to “ecdhKeyDeriveParams.public”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="/ja/nodejs/api/webcrypto#class-cryptokey">&lt;CryptoKey&gt;</a></li></ul><p>ECDH 鍵導出は、一方の当事者の秘密鍵と他方の当事者の公開鍵を入力として受け取り、それらを使用して共通の共有秘密を生成することによって機能します。<code>ecdhKeyDeriveParams.public</code> プロパティは、相手方の公開鍵に設定されます。</p><h3 id="class-ecdsaparams" tabindex="-1">Class: <code>EcdsaParams</code> <a class="header-anchor" href="#class-ecdsaparams" aria-label="Permalink to “Class: EcdsaParams”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><h4 id="ecdsaparamshash" tabindex="-1"><code>ecdsaParams.hash</code> <a class="header-anchor" href="#ecdsaparamshash" aria-label="Permalink to “ecdsaParams.hash”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> として表される場合、値は次のいずれかでなければなりません。</p><ul><li><code>&#39;SHA-1&#39;</code></li><li><code>&#39;SHA-256&#39;</code></li><li><code>&#39;SHA-384&#39;</code></li><li><code>&#39;SHA-512&#39;</code></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> として表される場合、オブジェクトは <code>name</code> プロパティを持ち、その値は上記のリストされた値のいずれかでなければなりません。</p><h4 id="ecdsaparamsname" tabindex="-1"><code>ecdsaParams.name</code> <a class="header-anchor" href="#ecdsaparamsname" aria-label="Permalink to “ecdsaParams.name”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;ECDSA&#39;</code> である必要があります。</li></ul><h3 id="class-eckeygenparams" tabindex="-1">Class: <code>EcKeyGenParams</code> <a class="header-anchor" href="#class-eckeygenparams" aria-label="Permalink to “Class: EcKeyGenParams”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><h4 id="eckeygenparamsname" tabindex="-1"><code>ecKeyGenParams.name</code> <a class="header-anchor" href="#eckeygenparamsname" aria-label="Permalink to “ecKeyGenParams.name”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;ECDSA&#39;</code> または <code>&#39;ECDH&#39;</code> のいずれかである必要があります。</li></ul><h4 id="eckeygenparamsnamedcurve" tabindex="-1"><code>ecKeyGenParams.namedCurve</code> <a class="header-anchor" href="#eckeygenparamsnamedcurve" aria-label="Permalink to “ecKeyGenParams.namedCurve”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;P-256&#39;</code>, <code>&#39;P-384&#39;</code>, <code>&#39;P-521&#39;</code> のいずれかである必要があります。</li></ul><h3 id="class-eckeyimportparams" tabindex="-1">Class: <code>EcKeyImportParams</code> <a class="header-anchor" href="#class-eckeyimportparams" aria-label="Permalink to “Class: EcKeyImportParams”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><h4 id="eckeyimportparamsname" tabindex="-1"><code>ecKeyImportParams.name</code> <a class="header-anchor" href="#eckeyimportparamsname" aria-label="Permalink to “ecKeyImportParams.name”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;ECDSA&#39;</code> または <code>&#39;ECDH&#39;</code> のいずれかである必要があります。</li></ul><h4 id="eckeyimportparamsnamedcurve" tabindex="-1"><code>ecKeyImportParams.namedCurve</code> <a class="header-anchor" href="#eckeyimportparamsnamedcurve" aria-label="Permalink to “ecKeyImportParams.namedCurve”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;P-256&#39;</code>, <code>&#39;P-384&#39;</code>, <code>&#39;P-521&#39;</code> のいずれかである必要があります。</li></ul><h3 id="class-ed448params" tabindex="-1">Class: <code>Ed448Params</code> <a class="header-anchor" href="#class-ed448params" aria-label="Permalink to “Class: Ed448Params”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><h4 id="ed448paramsname" tabindex="-1"><code>ed448Params.name</code> <a class="header-anchor" href="#ed448paramsname" aria-label="Permalink to “ed448Params.name”">​</a></h4><p><strong>Added in: v18.4.0, v16.17.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;Ed448&#39;</code> である必要があります。</li></ul><h4 id="ed448paramscontext" tabindex="-1"><code>ed448Params.context</code> <a class="header-anchor" href="#ed448paramscontext" aria-label="Permalink to “ed448Params.context”">​</a></h4><p><strong>Added in: v18.4.0, v16.17.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a></li></ul><p><code>context</code> メンバは、メッセージに関連付けるオプションのコンテキストデータを表します。Node.js Web Crypto API の実装は、長さゼロのコンテキストのみをサポートしており、これはコンテキストをまったく提供しないのと同じです。</p><h3 id="class-hkdfparams" tabindex="-1">クラス: <code>HkdfParams</code> <a class="header-anchor" href="#class-hkdfparams" aria-label="Permalink to “クラス: HkdfParams”">​</a></h3><p><strong>追加:</strong> v15.0.0</p><h4 id="hkdfparamshash" tabindex="-1"><code>hkdfParams.hash</code> <a class="header-anchor" href="#hkdfparamshash" aria-label="Permalink to “hkdfParams.hash”">​</a></h4><p><strong>追加:</strong> v15.0.0</p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> として表される場合、値は次のいずれかである必要があります。</p><ul><li><code>&#39;SHA-1&#39;</code></li><li><code>&#39;SHA-256&#39;</code></li><li><code>&#39;SHA-384&#39;</code></li><li><code>&#39;SHA-512&#39;</code></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> として表される場合、オブジェクトは <code>name</code> プロパティを持ち、その値は上記のリストの値のいずれかである必要があります。</p><h4 id="hkdfparamsinfo" tabindex="-1"><code>hkdfParams.info</code> <a class="header-anchor" href="#hkdfparamsinfo" aria-label="Permalink to “hkdfParams.info”">​</a></h4><p><strong>追加:</strong> v15.0.0</p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul><p>HKDFアルゴリズムにアプリケーション固有のコンテキスト入力を提供します。 これは長さがゼロでも構いませんが、提供する必要があります。</p><h4 id="hkdfparamsname" tabindex="-1"><code>hkdfParams.name</code> <a class="header-anchor" href="#hkdfparamsname" aria-label="Permalink to “hkdfParams.name”">​</a></h4><p><strong>追加:</strong> v15.0.0</p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;HKDF&#39;</code> である必要があります。</li></ul><h4 id="hkdfparamssalt" tabindex="-1"><code>hkdfParams.salt</code> <a class="header-anchor" href="#hkdfparamssalt" aria-label="Permalink to “hkdfParams.salt”">​</a></h4><p><strong>追加:</strong> v15.0.0</p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul><p>ソルト値は、HKDFアルゴリズムの強度を大幅に向上させます。 ランダムまたは擬似ランダムである必要があり、ダイジェスト関数の出力と同じ長さである必要があります（たとえば、<code>&#39;SHA-256&#39;</code>をダイジェストとして使用する場合、ソルトは256ビットのランダムデータである必要があります）。</p><h3 id="class-hmacimportparams" tabindex="-1">クラス: <code>HmacImportParams</code> <a class="header-anchor" href="#class-hmacimportparams" aria-label="Permalink to “クラス: HmacImportParams”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><h4 id="hmacimportparamshash" tabindex="-1"><code>hmacImportParams.hash</code> <a class="header-anchor" href="#hmacimportparamshash" aria-label="Permalink to “hmacImportParams.hash”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> として表される場合、値は次のいずれかである必要があります。</p><ul><li><code>&#39;SHA-1&#39;</code></li><li><code>&#39;SHA-256&#39;</code></li><li><code>&#39;SHA-384&#39;</code></li><li><code>&#39;SHA-512&#39;</code></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> として表される場合、オブジェクトは上記のリストされた値のいずれかである <code>name</code> プロパティを持つ必要があります。</p><h4 id="hmacimportparamslength" tabindex="-1"><code>hmacImportParams.length</code> <a class="header-anchor" href="#hmacimportparamslength" aria-label="Permalink to “hmacImportParams.length”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>HMACキーのオプションのビット数。これはオプションであり、ほとんどの場合省略する必要があります。</p><h4 id="hmacimportparamsname" tabindex="-1"><code>hmacImportParams.name</code> <a class="header-anchor" href="#hmacimportparamsname" aria-label="Permalink to “hmacImportParams.name”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;HMAC&#39;</code> である必要があります。</li></ul><h3 id="class-hmackeygenparams" tabindex="-1">クラス: <code>HmacKeyGenParams</code> <a class="header-anchor" href="#class-hmackeygenparams" aria-label="Permalink to “クラス: HmacKeyGenParams”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><h4 id="hmackeygenparamshash" tabindex="-1"><code>hmacKeyGenParams.hash</code> <a class="header-anchor" href="#hmackeygenparamshash" aria-label="Permalink to “hmacKeyGenParams.hash”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> として表される場合、値は次のいずれかである必要があります。</p><ul><li><code>&#39;SHA-1&#39;</code></li><li><code>&#39;SHA-256&#39;</code></li><li><code>&#39;SHA-384&#39;</code></li><li><code>&#39;SHA-512&#39;</code></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> として表される場合、オブジェクトは上記のリストされた値のいずれかである <code>name</code> プロパティを持つ必要があります。</p><h4 id="hmackeygenparamslength" tabindex="-1"><code>hmacKeyGenParams.length</code> <a class="header-anchor" href="#hmackeygenparamslength" aria-label="Permalink to “hmacKeyGenParams.length”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>タイプ: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>HMACキー用に生成するビット数。省略した場合、長さは使用されるハッシュアルゴリズムによって決定されます。これはオプションであり、ほとんどの場合省略する必要があります。</p><h4 id="hmackeygenparamsname" tabindex="-1"><code>hmacKeyGenParams.name</code> <a class="header-anchor" href="#hmackeygenparamsname" aria-label="Permalink to “hmacKeyGenParams.name”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;HMAC&#39;</code> である必要があります。</li></ul><h3 id="class-pbkdf2params" tabindex="-1">クラス: <code>Pbkdf2Params</code> <a class="header-anchor" href="#class-pbkdf2params" aria-label="Permalink to “クラス: Pbkdf2Params”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><h4 id="pbkdb2paramshash" tabindex="-1"><code>pbkdb2Params.hash</code> <a class="header-anchor" href="#pbkdb2paramshash" aria-label="Permalink to “pbkdb2Params.hash”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> として表現される場合、値は次のいずれかである必要があります。</p><ul><li><code>&#39;SHA-1&#39;</code></li><li><code>&#39;SHA-256&#39;</code></li><li><code>&#39;SHA-384&#39;</code></li><li><code>&#39;SHA-512&#39;</code></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> として表現される場合、オブジェクトは上記のリストされた値のいずれかを値とする <code>name</code> プロパティを持っている必要があります。</p><h4 id="pbkdf2paramsiterations" tabindex="-1"><code>pbkdf2Params.iterations</code> <a class="header-anchor" href="#pbkdf2paramsiterations" aria-label="Permalink to “pbkdf2Params.iterations”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>PBKDF2 アルゴリズムがビットを導出する際に実行する反復回数。</p><h4 id="pbkdf2paramsname" tabindex="-1"><code>pbkdf2Params.name</code> <a class="header-anchor" href="#pbkdf2paramsname" aria-label="Permalink to “pbkdf2Params.name”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;PBKDF2&#39;</code> である必要があります。</li></ul><h4 id="pbkdf2paramssalt" tabindex="-1"><code>pbkdf2Params.salt</code> <a class="header-anchor" href="#pbkdf2paramssalt" aria-label="Permalink to “pbkdf2Params.salt”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul><p>少なくとも 16 バイトのランダムまたは疑似ランダムなバイトである必要があります。</p><h3 id="class-rsahashedimportparams" tabindex="-1">クラス: <code>RsaHashedImportParams</code> <a class="header-anchor" href="#class-rsahashedimportparams" aria-label="Permalink to “クラス: RsaHashedImportParams”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><h4 id="rsahashedimportparamshash" tabindex="-1"><code>rsaHashedImportParams.hash</code> <a class="header-anchor" href="#rsahashedimportparamshash" aria-label="Permalink to “rsaHashedImportParams.hash”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> として表現される場合、値は次のいずれかである必要があります。</p><ul><li><code>&#39;SHA-1&#39;</code></li><li><code>&#39;SHA-256&#39;</code></li><li><code>&#39;SHA-384&#39;</code></li><li><code>&#39;SHA-512&#39;</code></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> として表現される場合、オブジェクトは上記のリストされた値のいずれかを値とする <code>name</code> プロパティを持っている必要があります。</p><h4 id="rsahashedimportparamsname" tabindex="-1"><code>rsaHashedImportParams.name</code> <a class="header-anchor" href="#rsahashedimportparamsname" aria-label="Permalink to “rsaHashedImportParams.name”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;RSASSA-PKCS1-v1_5&#39;</code>, <code>&#39;RSA-PSS&#39;</code>, または <code>&#39;RSA-OAEP&#39;</code> のいずれかである必要があります。</li></ul><h3 id="class-rsahashedkeygenparams" tabindex="-1">クラス: <code>RsaHashedKeyGenParams</code> <a class="header-anchor" href="#class-rsahashedkeygenparams" aria-label="Permalink to “クラス: RsaHashedKeyGenParams”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><h4 id="rsahashedkeygenparamshash" tabindex="-1"><code>rsaHashedKeyGenParams.hash</code> <a class="header-anchor" href="#rsahashedkeygenparamshash" aria-label="Permalink to “rsaHashedKeyGenParams.hash”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> として表現される場合、値は次のいずれかである必要があります。</p><ul><li><code>&#39;SHA-1&#39;</code></li><li><code>&#39;SHA-256&#39;</code></li><li><code>&#39;SHA-384&#39;</code></li><li><code>&#39;SHA-512&#39;</code></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> として表現される場合、オブジェクトは <code>name</code> プロパティを持ち、その値は上記のリストされた値のいずれかである必要があります。</p><h4 id="rsahashedkeygenparamsmoduluslength" tabindex="-1"><code>rsaHashedKeyGenParams.modulusLength</code> <a class="header-anchor" href="#rsahashedkeygenparamsmoduluslength" aria-label="Permalink to “rsaHashedKeyGenParams.modulusLength”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>RSA モジュラスのビット単位の長さ。 ベストプラクティスとして、これは少なくとも <code>2048</code> である必要があります。</p><h4 id="rsahashedkeygenparamsname" tabindex="-1"><code>rsaHashedKeyGenParams.name</code> <a class="header-anchor" href="#rsahashedkeygenparamsname" aria-label="Permalink to “rsaHashedKeyGenParams.name”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>&#39;RSASSA-PKCS1-v1_5&#39;</code>, <code>&#39;RSA-PSS&#39;</code>, または <code>&#39;RSA-OAEP&#39;</code> のいずれかである必要があります。</li></ul><h4 id="rsahashedkeygenparamspublicexponent" tabindex="-1"><code>rsaHashedKeyGenParams.publicExponent</code> <a class="header-anchor" href="#rsahashedkeygenparamspublicexponent" aria-label="Permalink to “rsaHashedKeyGenParams.publicExponent”">​</a></h4><p><strong>Added in: v15.0.0</strong></p><ul><li>Type: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">&lt;Uint8Array&gt;</a></li></ul><p>RSA 公開指数。 これは、32 ビット以内に収まるビッグエンディアンの符号なし整数を含む <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">&lt;Uint8Array&gt;</a> である必要があります。 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">&lt;Uint8Array&gt;</a> には、任意の数の先頭のゼロビットを含めることができます。 値は素数でなければなりません。 別の値を使用する理由がない限り、公開指数として <code>new Uint8Array([1, 0, 1])</code> (65537) を使用します。</p><h3 id="class-rsaoaepparams" tabindex="-1">クラス: <code>RsaOaepParams</code> <a class="header-anchor" href="#class-rsaoaepparams" aria-label="Permalink to “クラス: RsaOaepParams”">​</a></h3><p><strong>追加: v15.0.0</strong></p><h4 id="rsaoaepparamslabel" tabindex="-1"><code>rsaOaepParams.label</code> <a class="header-anchor" href="#rsaoaepparamslabel" aria-label="Permalink to “rsaOaepParams.label”">​</a></h4><p><strong>追加: v15.0.0</strong></p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer">&lt;ArrayBuffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">&lt;TypedArray&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">&lt;DataView&gt;</a> | <a href="/ja/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul><p>暗号化されませんが、生成された暗号テキストにバインドされるバイトの追加コレクション。</p><p><code>rsaOaepParams.label</code> パラメーターはオプションです。</p><h4 id="rsaoaepparamsname" tabindex="-1"><code>rsaOaepParams.name</code> <a class="header-anchor" href="#rsaoaepparamsname" aria-label="Permalink to “rsaOaepParams.name”">​</a></h4><p><strong>追加: v15.0.0</strong></p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> は <code>&#39;RSA-OAEP&#39;</code> である必要があります。</li></ul><h3 id="class-rsapssparams" tabindex="-1">クラス: <code>RsaPssParams</code> <a class="header-anchor" href="#class-rsapssparams" aria-label="Permalink to “クラス: RsaPssParams”">​</a></h3><p><strong>追加: v15.0.0</strong></p><h4 id="rsapssparamsname" tabindex="-1"><code>rsaPssParams.name</code> <a class="header-anchor" href="#rsapssparamsname" aria-label="Permalink to “rsaPssParams.name”">​</a></h4><p><strong>追加: v15.0.0</strong></p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> は <code>&#39;RSA-PSS&#39;</code> である必要があります。</li></ul><h4 id="rsapssparamssaltlength" tabindex="-1"><code>rsaPssParams.saltLength</code> <a class="header-anchor" href="#rsapssparamssaltlength" aria-label="Permalink to “rsaPssParams.saltLength”">​</a></h4><p><strong>追加: v15.0.0</strong></p><ul><li>型: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>使用するランダムソルトの長さ（バイト単位）。</p><h2 id="footnotes" tabindex="-1">脚注 <a class="header-anchor" href="#footnotes" aria-label="Permalink to “脚注”">​</a></h2>`,387)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};