import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js ドキュメント - エラー","description":"Node.jsのドキュメントのこのセクションでは、エラークラス、エラーコード、およびNode.jsアプリケーションでのエラー処理方法について詳しく説明しています。","frontmatter":{"title":"Node.js ドキュメント - エラー","description":"Node.jsのドキュメントのこのセクションでは、エラークラス、エラーコード、およびNode.jsアプリケーションでのエラー処理方法について詳しく説明しています。","head":[["meta",{"name":"og:title","content":"Node.js ドキュメント - エラー | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.jsのドキュメントのこのセクションでは、エラークラス、エラーコード、およびNode.jsアプリケーションでのエラー処理方法について詳しく説明しています。"}],["meta",{"name":"twitter:title","content":"Node.js ドキュメント - エラー | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.jsのドキュメントのこのセクションでは、エラークラス、エラーコード、およびNode.jsアプリケーションでのエラー処理方法について詳しく説明しています。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/errors"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/errors"}]]},"headers":[],"relativePath":"ja/nodejs/api/errors.md","filePath":"ja/nodejs/api/errors.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/api/errors.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="errors" tabindex="-1">エラー <a class="header-anchor" href="#errors" aria-label="Permalink to “エラー”">​</a></h1><p>Node.jsで実行されているアプリケーションは、一般的に以下の4つのカテゴリーのエラーに遭遇します。</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError" target="_blank" rel="noreferrer">&lt;EvalError&gt;</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" target="_blank" rel="noreferrer">&lt;SyntaxError&gt;</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError" target="_blank" rel="noreferrer">&lt;RangeError&gt;</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" target="_blank" rel="noreferrer">&lt;ReferenceError&gt;</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noreferrer">&lt;TypeError&gt;</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError" target="_blank" rel="noreferrer">&lt;URIError&gt;</a>のような標準的なJavaScriptエラー。</li><li>存在しないファイルを開こうとしたり、閉じられたソケットを介してデータを送信しようとするなど、基盤となるオペレーティングシステムの制約によってトリガーされるシステムエラー。</li><li>アプリケーションコードによってトリガーされるユーザー指定のエラー。</li><li><code>AssertionError</code>は、Node.jsが起こりえない例外的なロジック違反を検出したときにトリガーされる可能性のある特殊な種類のエラーです。これらは通常、<code>node:assert</code>モジュールによって発生します。</li></ul><p>Node.jsによって発生するすべてのJavaScriptおよびシステムエラーは、標準のJavaScriptの<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a>クラスから継承されるか、そのインスタンスであり、<em>少なくとも</em>そのクラスで使用可能なプロパティを提供することが保証されています。</p><h2 id="error-propagation-and-interception" tabindex="-1">エラーの伝播と傍受 <a class="header-anchor" href="#error-propagation-and-interception" aria-label="Permalink to “エラーの伝播と傍受”">​</a></h2><p>Node.jsは、アプリケーションの実行中に発生するエラーを伝播および処理するためのいくつかのメカニズムをサポートしています。これらのエラーがどのように報告され、処理されるかは、<code>Error</code>の種類と呼び出されるAPIのスタイルによって異なります。</p><p>すべてのJavaScriptエラーは例外として処理され、標準のJavaScriptの<code>throw</code>メカニズムを使用してエラーを<em>直ちに</em>生成およびスローします。これらは、JavaScript言語によって提供される<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch" target="_blank" rel="noreferrer"><code>try…catch</code>構造</a>を使用して処理されます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// zが定義されていないため、ReferenceErrorでスローします。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ここでエラーを処理します。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>JavaScriptの<code>throw</code>メカニズムを使用すると、例外が発生し、<em>必ず</em>処理する必要があります。そうでない場合、Node.jsプロセスは直ちに終了します。</p><p>いくつかの例外を除いて、<em>同期</em>API（<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a>を返さず、<code>callback</code>関数を受け入れないすべてのブロッキングメソッド。<a href="/ja/nodejs/api/fs#fsreadfilesyncpath-options"><code>fs.readFileSync</code></a>など）は、<code>throw</code>を使用してエラーを報告します。</p><p><em>非同期API</em>内で発生するエラーは、複数の方法で報告される可能性があります。</p><ul><li>一部の非同期メソッドは<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a>を返します。常にそれが拒否される可能性があることを考慮する必要があります。未処理のPromiseの拒否に対するプロセスの反応については、<a href="/ja/nodejs/api/cli#unhandled-rejectionsmode"><code>--unhandled-rejections</code></a>フラグを参照してください。</li><li><code>callback</code>関数を受け入れるほとんどの非同期メソッドは、その関数の最初の引数として渡される<code>Error</code>オブジェクトを受け入れます。その最初の引数が<code>null</code>ではなく、<code>Error</code>のインスタンスである場合、処理する必要があるエラーが発生しました。</li><li>非同期メソッドが<a href="/ja/nodejs/api/events#class-eventemitter"><code>EventEmitter</code></a>であるオブジェクトで呼び出されると、エラーはそのオブジェクトの<code>&#39;error&#39;</code>イベントにルーティングできます。</li><li>Node.js APIの一部の通常非同期メソッドは、<code>throw</code>メカニズムを使用して、<code>try…catch</code>を使用して処理する必要がある例外を発生させる場合があります。このようなメソッドの包括的なリストはありません。必要な適切なエラー処理メカニズムを判断するには、各メソッドのドキュメントを参照してください。</li></ul><p><code>&#39;error&#39;</code>イベントメカニズムの使用は、<a href="/ja/nodejs/api/stream">ストリームベース</a>および<a href="/ja/nodejs/api/events#class-eventemitter">イベントエミッターベース</a>のAPIで最も一般的です。これらは、時間経過に伴う一連の非同期操作（成功または失敗する可能性のある単一の操作とは対照的）を表します。</p><p><em>すべての</em><a href="/ja/nodejs/api/events#class-eventemitter"><code>EventEmitter</code></a>オブジェクトについて、<code>&#39;error&#39;</code>イベントハンドラーが提供されていない場合、エラーはスローされ、Node.jsプロセスはキャッチされない例外を報告し、クラッシュします。ただし、<a href="/ja/nodejs/api/process#event-uncaughtexception"><code>&#39;uncaughtException&#39;</code></a>イベントのハンドラーが登録されているか、非推奨の<a href="/ja/nodejs/api/domain"><code>node:domain</code></a>モジュールが使用されている場合は除きます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EventEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:events&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ee</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &#39;error&#39;イベントハンドラーが追加されていないため、プロセスがクラッシュします。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ee.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This will crash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>この方法で生成されたエラーは、呼び出し元のコードがすでに終了した<em>後</em>にスローされるため、<code>try…catch</code>を使用して傍受<em>できません</em>。</p><p>開発者は、各メソッドのドキュメントを参照して、それらのメソッドによって発生するエラーがどのように伝播されるかを正確に判断する必要があります。</p><h2 id="class-error" tabindex="-1">クラス: <code>Error</code> <a class="header-anchor" href="#class-error" aria-label="Permalink to “クラス: Error”">​</a></h2><p>JavaScript の汎用的な <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a> オブジェクトであり、エラーが発生した特定の状況を示すものではありません。 <code>Error</code> オブジェクトは、<code>Error</code> がインスタンス化されたコード内の場所を詳細に示す &quot;スタックトレース&quot; をキャプチャし、エラーのテキストによる説明を提供する場合があります。</p><p>Node.js によって生成されるすべてのエラーは、すべてのシステムエラーと JavaScript エラーを含めて、<code>Error</code> クラスのインスタンスであるか、<code>Error</code> クラスから継承されます。</p><h3 id="new-errormessage-options" tabindex="-1"><code>new Error(message[, options])</code> <a class="header-anchor" href="#new-errormessage-options" aria-label="Permalink to “new Error(message[, options])”">​</a></h3><ul><li><code>message</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>cause</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a> 新しく作成されたエラーの原因となったエラー。</li></ul></li></ul><p>新しい <code>Error</code> オブジェクトを作成し、<code>error.message</code> プロパティに指定されたテキストメッセージを設定します。 オブジェクトが <code>message</code> として渡された場合、テキストメッセージは <code>String(message)</code> を呼び出すことによって生成されます。 <code>cause</code> オプションが指定された場合、<code>error.cause</code> プロパティに割り当てられます。 <code>error.stack</code> プロパティは、<code>new Error()</code> が呼び出されたコード内の場所を表します。 スタックトレースは、<a href="https://v8.dev/docs/stack-trace-api" target="_blank" rel="noreferrer">V8 のスタックトレース API</a> に依存します。 スタックトレースは、(a) <em>同期コードの実行</em> の開始時、または (b) プロパティ <code>Error.stackTraceLimit</code> で指定されたフレーム数のうち、小さい方までしか拡張されません。</p><h3 id="errorcapturestacktracetargetobject-constructoropt" tabindex="-1"><code>Error.captureStackTrace(targetObject[, constructorOpt])</code> <a class="header-anchor" href="#errorcapturestacktracetargetobject-constructoropt" aria-label="Permalink to “Error.captureStackTrace(targetObject[, constructorOpt])”">​</a></h3><ul><li><code>targetObject</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li><li><code>constructorOpt</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li></ul><p><code>targetObject</code> に <code>.stack</code> プロパティを作成します。このプロパティにアクセスすると、<code>Error.captureStackTrace()</code> が呼び出されたコード内の場所を表す文字列が返されます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Error.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">captureStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myObject);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myObject.stack;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`new Error().stack\` と同様</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>トレースの最初の行には <code>\${myObject.name}: \${myObject.message}</code> がプレフィックスとして付加されます。</p><p>オプションの <code>constructorOpt</code> 引数は関数を受け取ります。 指定された場合、<code>constructorOpt</code> を含む <code>constructorOpt</code> より上のすべてのフレームは、生成されたスタックトレースから除外されます。</p><p><code>constructorOpt</code> 引数は、エラー生成の実装の詳細をユーザーから隠すのに役立ちます。 例えば：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // スタックトレースを2回計算することを避けるために、スタックトレースなしでエラーを作成します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stackTraceLimit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Error;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Error.stackTraceLimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Error.stackTraceLimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stackTraceLimit;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 関数 b より上のスタックトレースをキャプチャします</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Error.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">captureStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error, b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 関数 c も b もスタックトレースに含まれていません</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="errorstacktracelimit" tabindex="-1"><code>Error.stackTraceLimit</code> <a class="header-anchor" href="#errorstacktracelimit" aria-label="Permalink to “Error.stackTraceLimit”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p><code>Error.stackTraceLimit</code> プロパティは、スタックトレースによって収集されるスタックフレームの数を指定します（<code>new Error().stack</code> または <code>Error.captureStackTrace(obj)</code> によって生成されるかどうかに関わらず）。</p><p>デフォルト値は <code>10</code> ですが、有効な JavaScript 数値に設定できます。変更は、値が変更された <em>後</em> にキャプチャされたすべてのスタックトレースに影響します。</p><p>数値以外の値に設定した場合、または負の数値に設定した場合、スタックトレースはどのフレームもキャプチャしません。</p><h3 id="errorcause" tabindex="-1"><code>error.cause</code> <a class="header-anchor" href="#errorcause" aria-label="Permalink to “error.cause”">​</a></h3><p><strong>追加:</strong> v16.9.0</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a></li></ul><p>存在する場合、<code>error.cause</code> プロパティは、<code>Error</code> の根本的な原因です。エラーをキャッチし、別のメッセージまたはコードで新しいエラーをスローして、元のエラーにアクセスできるようにする場合に使用されます。</p><p><code>error.cause</code> プロパティは通常、<code>new Error(message, { cause })</code> を呼び出すことによって設定されます。<code>cause</code> オプションが指定されていない場合、コンストラクターによって設定されません。</p><p>このプロパティを使用すると、エラーをチェーン化できます。<code>Error</code> オブジェクトをシリアライズする場合、<a href="/ja/nodejs/api/util#utilinspectobject-options"><code>util.inspect()</code></a> は、<code>error.cause</code> が設定されている場合は再帰的にシリアライズします。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cause</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;リモート HTTP サーバーが 500 ステータスで応答しました&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> symptom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;メッセージの送信に失敗しました&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { cause });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symptom);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   Error: メッセージの送信に失敗しました</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at REPL2:1:17</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Script.runInThisContext (node:vm:130:12)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       ... cause スタックトレースと一致する 7 行 ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at [_line] [as _line] (node:internal/readline/interface:886:18) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     [cause]: Error: リモート HTTP サーバーが 500 ステータスで応答しました</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at REPL1:1:15</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at Script.runInThisContext (node:vm:130:12)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at REPLServer.defaultEval (node:repl:574:29)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at bound (node:domain:426:15)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at REPLServer.runBound [as eval] (node:domain:437:12)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at REPLServer.onLine (node:repl:902:10)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at REPLServer.emit (node:events:549:35)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at REPLServer.emit (node:domain:482:12)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at [_onLine] [as _onLine] (node:internal/readline/interface:425:12)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at [_line] [as _line] (node:internal/readline/interface:886:18)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="errorcode" tabindex="-1"><code>error.code</code> <a class="header-anchor" href="#errorcode" aria-label="Permalink to “error.code”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>error.code</code> プロパティは、エラーの種類を識別する文字列ラベルです。<code>error.code</code> は、エラーを識別する最も安定した方法です。これは Node.js のメジャーバージョン間でのみ変更されます。対照的に、<code>error.message</code> 文字列は Node.js の任意のバージョン間で変更される可能性があります。特定のコードの詳細については、<a href="/ja/nodejs/api/errors#nodejs-error-codes">Node.js エラーコード</a> を参照してください。</p><h3 id="errormessage" tabindex="-1"><code>error.message</code> <a class="header-anchor" href="#errormessage" aria-label="Permalink to “error.message”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>error.message</code> プロパティは、<code>new Error(message)</code> を呼び出すことによって設定されたエラーの文字列記述です。コンストラクターに渡される <code>message</code> は、<code>Error</code> のスタックトレースの最初の行にも表示されます。ただし、<code>Error</code> オブジェクトの作成後にこのプロパティを変更しても、スタックトレースの最初の行が変更されない <em>可能性があり</em> ます (たとえば、このプロパティが変更される前に <code>error.stack</code> が読み取られた場合)。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.message);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints: The message</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="errorstack" tabindex="-1"><code>error.stack</code> <a class="header-anchor" href="#errorstack" aria-label="Permalink to “error.stack”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>error.stack</code> プロパティは、<code>Error</code> がインスタンス化されたコード内の場所を記述する文字列です。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Things</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> happening!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/gbusey/file.js:525:2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Frobnicator.refrobulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (/home/gbusey/business-logic.js:424:21)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Actor.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">anonymou</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (/home/gbusey/actors.js:400:8)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> increaseSynergy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (/home/gbusey/actors.js:701:6)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>最初の行は <code>\\&lt;error class name\\&gt;: \\&lt;error message\\&gt;</code> としてフォーマットされ、その後に一連のスタックフレーム（各行は &quot;at &quot; で始まる）が続きます。各フレームは、エラーの生成につながったコード内の呼び出しサイトを記述します。V8 は、各関数の名前を（変数名、関数名、またはオブジェクトメソッド名で）表示しようとしますが、適切な名前を見つけられない場合があります。V8 が関数の名前を特定できない場合、そのフレームには場所情報のみが表示されます。それ以外の場合、決定された関数名は、括弧で囲まれた場所情報ととも​​に表示されます。</p><p>フレームは JavaScript 関数に対してのみ生成されます。たとえば、実行が C++ アドオン関数 <code>cheetahify</code> を介して同期的に渡され、それ自体が JavaScript 関数を呼び出す場合、<code>cheetahify</code> 呼び出しを表すフレームはスタックトレースに存在しません。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cheetahify</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./native-binding.node&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeFaster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // \`cheetahify()\` *synchronously* calls speedy.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cheetahify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> speedy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;oh no!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">makeFaster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will throw:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   /home/gbusey/file.js:6</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       throw new Error(&#39;oh no!&#39;);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//           ^</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   Error: oh no!</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at speedy (/home/gbusey/file.js:6:11)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at makeFaster (/home/gbusey/file.js:5:3)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Object.&lt;anonymous&gt; (/home/gbusey/file.js:10:1)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Module._compile (module.js:456:26)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Object.Module._extensions..js (module.js:474:10)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Module.load (module.js:356:32)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Function.Module._load (module.js:312:12)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Function.Module.runMain (module.js:497:10)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at startup (node.js:119:16)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at node.js:906:3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>場所情報は次のいずれかになります。</p><ul><li>フレームが V8 内部の呼び出しを表す場合は <code>native</code>（<code>[].forEach</code> など）。</li><li>フレームが Node.js 内部の呼び出しを表す場合は <code>plain-filename.js:line:column</code>。</li><li>フレームが（CommonJS モジュールシステムを使用した）ユーザープログラムまたはその依存関係の呼び出しを表す場合は <code>/absolute/path/to/file.js:line:column</code>。</li><li>フレームが（ES モジュールシステムを使用した）ユーザープログラムまたはその依存関係の呼び出しを表す場合は <code>\\&lt;transport-protocol\\&gt;:///url/to/module/file.mjs:line:column</code>。</li></ul><p>スタックトレースを表す文字列は、<code>error.stack</code> プロパティが <strong>アクセスされた</strong> ときに遅延生成されます。</p><p>スタックトレースによってキャプチャされるフレームの数は、<code>Error.stackTraceLimit</code> または現在のイベントループティックで使用可能なフレーム数のうち小さい方によって制限されます。</p><h2 id="class-assertionerror" tabindex="-1">クラス: <code>AssertionError</code> <a class="header-anchor" href="#class-assertionerror" aria-label="Permalink to “クラス: AssertionError”">​</a></h2><ul><li>継承元: <a href="/ja/nodejs/api/errors#class-error">&lt;errors.Error&gt;</a></li></ul><p>アサーションの失敗を示します。詳細については、<a href="/ja/nodejs/api/assert#class-assertassertionerror"><code>Class: assert.AssertionError</code></a> を参照してください。</p><h2 id="class-rangeerror" tabindex="-1">クラス: <code>RangeError</code> <a class="header-anchor" href="#class-rangeerror" aria-label="Permalink to “クラス: RangeError”">​</a></h2><ul><li>継承元: <a href="/ja/nodejs/api/errors#class-error">&lt;errors.Error&gt;</a></li></ul><p>提供された引数が、関数の許容可能な値のセットまたは範囲内にないことを示します。これは数値範囲であるか、特定の関数パラメーターのオプションのセットの範囲外であるかを問いません。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;RangeError: &quot;port&quot; option should be &gt;= 0 and &lt; 65536: -1&quot; をスロー</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Node.jsは、引数検証の形式として、<code>RangeError</code>インスタンスを<em>即座に</em>生成してスローします。</p><h2 id="class-referenceerror" tabindex="-1">クラス: <code>ReferenceError</code> <a class="header-anchor" href="#class-referenceerror" aria-label="Permalink to “クラス: ReferenceError”">​</a></h2><ul><li>継承元: <a href="/ja/nodejs/api/errors#class-error">&lt;errors.Error&gt;</a></li></ul><p>定義されていない変数にアクセスしようとしていることを示します。このようなエラーは通常、コードのタイプミスや、その他の壊れたプログラムを示します。</p><p>クライアントコードがこれらのエラーを生成して伝播することはできますが、実際にはV8のみがそれを行います。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doesNotExist;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ReferenceErrorをスローします。doesNotExistはこのプログラムの変数ではありません。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>アプリケーションが動的にコードを生成して実行していない限り、<code>ReferenceError</code>インスタンスはコードまたはその依存関係のバグを示します。</p><h2 id="class-syntaxerror" tabindex="-1">クラス: <code>SyntaxError</code> <a class="header-anchor" href="#class-syntaxerror" aria-label="Permalink to “クラス: SyntaxError”">​</a></h2><ul><li>継承元: <a href="/ja/nodejs/api/errors#class-error">&lt;errors.Error&gt;</a></li></ul><p>プログラムが有効なJavaScriptではないことを示します。これらのエラーは、コード評価の結果としてのみ生成および伝播される可能性があります。コード評価は、<code>eval</code>、<code>Function</code>、<code>require</code>、または<a href="/ja/nodejs/api/vm">vm</a>の結果として発生する可能性があります。これらのエラーは、ほとんどの場合、壊れたプログラムを示しています。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:vm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runInThisContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;binary ! isNotOk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &#39;err&#39; はSyntaxErrorになります。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>SyntaxError</code>インスタンスは、それを作成したコンテキストでは回復できません。他のコンテキストによってのみキャッチできます。</p><h2 id="class-systemerror" tabindex="-1">クラス: <code>SystemError</code> <a class="header-anchor" href="#class-systemerror" aria-label="Permalink to “クラス: SystemError”">​</a></h2><ul><li>継承元: <a href="/ja/nodejs/api/errors#class-error">&lt;errors.Error&gt;</a></li></ul><p>Node.jsは、ランタイム環境内で例外が発生した場合にシステムエラーを生成します。これらは通常、アプリケーションがオペレーティングシステムの制約に違反した場合に発生します。たとえば、アプリケーションが存在しないファイルを読み取ろうとすると、システムエラーが発生します。</p><ul><li><code>address</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 存在する場合、ネットワーク接続が失敗したアドレス</li><li><code>code</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 文字列のエラーコード</li><li><code>dest</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 存在する場合、ファイルシステムエラーを報告する際のファイルパスの宛先</li><li><code>errno</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> システムが提供するエラー番号</li><li><code>info</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 存在する場合、エラー状態に関する追加の詳細</li><li><code>message</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> システムが提供する人間が読めるエラーの説明</li><li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 存在する場合、ファイルシステムエラーを報告する際のファイルパス</li><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 存在する場合、利用できないネットワーク接続ポート</li><li><code>syscall</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> エラーをトリガーしたシステムコールの名前</li></ul><h3 id="erroraddress" tabindex="-1"><code>error.address</code> <a class="header-anchor" href="#erroraddress" aria-label="Permalink to “error.address”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>存在する場合、<code>error.address</code> はネットワーク接続に失敗したアドレスを記述する文字列です。</p><h3 id="errorcode_1" tabindex="-1"><code>error.code</code> <a class="header-anchor" href="#errorcode_1" aria-label="Permalink to “error.code”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>error.code</code> プロパティは、エラーコードを表す文字列です。</p><h3 id="errordest" tabindex="-1"><code>error.dest</code> <a class="header-anchor" href="#errordest" aria-label="Permalink to “error.dest”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>存在する場合、<code>error.dest</code> は、ファイルシステムエラーを報告する際のファイルパスの宛先です。</p><h3 id="errorerrno" tabindex="-1"><code>error.errno</code> <a class="header-anchor" href="#errorerrno" aria-label="Permalink to “error.errno”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p><code>error.errno</code> プロパティは、<a href="https://docs.libuv.org/en/v1.x/errors" target="_blank" rel="noreferrer"><code>libuv Error handling</code></a> で定義されたエラーコードに対応する負の数です。</p><p>Windows では、システムから提供されたエラー番号は libuv によって正規化されます。</p><p>エラーコードの文字列表現を取得するには、<a href="/ja/nodejs/api/util#utilgetsystemerrornameerr"><code>util.getSystemErrorName(error.errno)</code></a> を使用してください。</p><h3 id="errorinfo" tabindex="-1"><code>error.info</code> <a class="header-anchor" href="#errorinfo" aria-label="Permalink to “error.info”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>存在する場合、<code>error.info</code> はエラー状態に関する詳細情報を持つオブジェクトです。</p><h3 id="errormessage_1" tabindex="-1"><code>error.message</code> <a class="header-anchor" href="#errormessage_1" aria-label="Permalink to “error.message”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>error.message</code> は、システムが提供する、人間が読めるエラーの説明です。</p><h3 id="errorpath" tabindex="-1"><code>error.path</code> <a class="header-anchor" href="#errorpath" aria-label="Permalink to “error.path”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>存在する場合、<code>error.path</code> は関連する無効なパス名を含む文字列です。</p><h3 id="errorport" tabindex="-1"><code>error.port</code> <a class="header-anchor" href="#errorport" aria-label="Permalink to “error.port”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>存在する場合、<code>error.port</code> は利用できないネットワーク接続ポートです。</p><h3 id="errorsyscall" tabindex="-1"><code>error.syscall</code> <a class="header-anchor" href="#errorsyscall" aria-label="Permalink to “error.syscall”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>error.syscall</code> プロパティは、失敗した <a href="https://man7.org/linux/man-pages/man2/syscalls.2" target="_blank" rel="noreferrer">syscall</a> を記述する文字列です。</p><h3 id="common-system-errors" tabindex="-1">一般的なシステムエラー <a class="header-anchor" href="#common-system-errors" aria-label="Permalink to “一般的なシステムエラー”">​</a></h3><p>Node.jsプログラムの作成時によく遭遇するシステムエラーの一覧です。包括的なリストについては、<a href="https://man7.org/linux/man-pages/man3/errno.3" target="_blank" rel="noreferrer"><code>errno</code>(3) man page</a>を参照してください。</p><ul><li><code>EACCES</code> (Permission denied): ファイルアクセス権限によって禁止されている方法でファイルにアクセスしようとしました。</li><li><code>EADDRINUSE</code> (Address already in use): ローカルシステム上の別のサーバーがすでにそのアドレスを使用しているため、サーバー（<a href="/ja/nodejs/api/net"><code>net</code></a>、<a href="/ja/nodejs/api/http"><code>http</code></a>、または<a href="/ja/nodejs/api/https"><code>https</code></a>）をローカルアドレスにバインドしようとしました。</li><li><code>ECONNREFUSED</code> (Connection refused): 対象のマシンが積極的に拒否したため、接続を確立できませんでした。これは通常、外国のホストで非アクティブなサービスに接続しようとした場合に発生します。</li><li><code>ECONNRESET</code> (Connection reset by peer): ピアによって接続が強制的に閉じられました。これは通常、タイムアウトまたは再起動により、リモートソケットでの接続が失われた場合に発生します。<a href="/ja/nodejs/api/http"><code>http</code></a>および<a href="/ja/nodejs/api/net"><code>net</code></a>モジュールを介してよく遭遇します。</li><li><code>EEXIST</code> (File exists): 既存のファイルが、ターゲットが存在しないことを必要とする操作のターゲットになりました。</li><li><code>EISDIR</code> (Is a directory): 操作はファイルを予期していましたが、指定されたパス名はディレクトリでした。</li><li><code>EMFILE</code> (Too many open files in system): システムで許可されている<a href="https://en.wikipedia.org/wiki/File_descriptor" target="_blank" rel="noreferrer">ファイル記述子</a>の最大数に達し、少なくとも1つが閉じられるまで、別の記述子の要求を満たすことができません。これは、特にプロセスに対するファイル記述子の制限が低いシステム（特にmacOS）で、多数のファイルを並行して一度に開く場合に発生します。低い制限を修正するには、Node.jsプロセスを実行するのと同じシェルで<code>ulimit -n 2048</code>を実行します。</li><li><code>ENOENT</code> (No such file or directory): 指定されたパス名のコンポーネントが存在しないことを示すために、<a href="/ja/nodejs/api/fs"><code>fs</code></a>操作によって一般的に発生します。指定されたパスでエンティティ（ファイルまたはディレクトリ）が見つかりませんでした。</li><li><code>ENOTDIR</code> (Not a directory): 指定されたパス名のコンポーネントは存在しましたが、予期されたディレクトリではありませんでした。<a href="/ja/nodejs/api/fs#fsreaddirpath-options-callback"><code>fs.readdir</code></a>によって一般的に発生します。</li><li><code>ENOTEMPTY</code> (Directory not empty): エントリを持つディレクトリが、空のディレクトリを必要とする操作のターゲットになりました。通常は<a href="/ja/nodejs/api/fs#fsunlinkpath-callback"><code>fs.unlink</code></a>です。</li><li><code>ENOTFOUND</code> (DNS lookup failed): <code>EAI_NODATA</code>または<code>EAI_NONAME</code>のいずれかのDNS障害を示します。これは標準のPOSIXエラーではありません。</li><li><code>EPERM</code> (Operation not permitted): 特権の昇格を必要とする操作を実行しようとしました。</li><li><code>EPIPE</code> (Broken pipe): データを読み取るプロセスがないパイプ、ソケット、またはFIFOへの書き込み。<a href="/ja/nodejs/api/net"><code>net</code></a>および<a href="/ja/nodejs/api/http"><code>http</code></a>レイヤーで一般的に発生し、書き込み先のストリームのリモート側が閉じられていることを示します。</li><li><code>ETIMEDOUT</code> (Operation timed out): 接続された相手が一定期間後に適切に応答しなかったため、接続または送信要求が失敗しました。通常、<a href="/ja/nodejs/api/http"><code>http</code></a>または<a href="/ja/nodejs/api/net"><code>net</code></a>で発生します。多くの場合、<code>socket.end()</code>が適切に呼び出されなかった兆候です。</li></ul><h2 id="class-typeerror" tabindex="-1">クラス: <code>TypeError</code> <a class="header-anchor" href="#class-typeerror" aria-label="Permalink to “クラス: TypeError”">​</a></h2><ul><li><a href="/ja/nodejs/api/errors#class-error">&lt;errors.Error&gt;</a> を拡張</li></ul><p>提供された引数が許可された型ではないことを示します。 たとえば、文字列を期待するパラメーターに関数を渡すと、<code>TypeError</code> になります。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError をスローします。文字列が期待されるためです。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Node.js は、引数の検証の形式として、<code>TypeError</code> インスタンスを<em>即座に</em>生成してスローします。</p><h2 id="exceptions-vs-errors" tabindex="-1">例外とエラー <a class="header-anchor" href="#exceptions-vs-errors" aria-label="Permalink to “例外とエラー”">​</a></h2><p>JavaScript の例外は、無効な操作の結果として、または <code>throw</code> ステートメントのターゲットとしてスローされる値です。 これらの値が <code>Error</code> のインスタンスまたは <code>Error</code> から継承するクラスである必要はありませんが、Node.js または JavaScript ランタイムによってスローされるすべての例外は <code>Error</code> のインスタンス<em>になります</em>。</p><p>一部の例外は、JavaScript レイヤーでは<em>回復不能</em>です。 このような例外は、<em>常に</em> Node.js プロセスをクラッシュさせます。 例としては、C++ レイヤーでの <code>assert()</code> チェックまたは <code>abort()</code> 呼び出しなどがあります。</p><h2 id="openssl-errors" tabindex="-1">OpenSSL エラー <a class="header-anchor" href="#openssl-errors" aria-label="Permalink to “OpenSSL エラー”">​</a></h2><p><code>crypto</code> または <code>tls</code> に起因するエラーは <code>Error</code> クラスであり、標準の <code>.code</code> および <code>.message</code> プロパティに加えて、OpenSSL 固有のプロパティが追加されている場合があります。</p><h3 id="erroropensslerrorstack" tabindex="-1"><code>error.opensslErrorStack</code> <a class="header-anchor" href="#erroropensslerrorstack" aria-label="Permalink to “error.opensslErrorStack”">​</a></h3><p>OpenSSL ライブラリ内のエラーの発生源に関するコンテキストを提供する可能性のあるエラーの配列。</p><h3 id="errorfunction" tabindex="-1"><code>error.function</code> <a class="header-anchor" href="#errorfunction" aria-label="Permalink to “error.function”">​</a></h3><p>エラーの発生源である OpenSSL 関数。</p><h3 id="errorlibrary" tabindex="-1"><code>error.library</code> <a class="header-anchor" href="#errorlibrary" aria-label="Permalink to “error.library”">​</a></h3><p>エラーの発生源である OpenSSL ライブラリ。</p><h3 id="errorreason" tabindex="-1"><code>error.reason</code> <a class="header-anchor" href="#errorreason" aria-label="Permalink to “error.reason”">​</a></h3><p>エラーの理由を説明する人間が読める文字列。</p><h2 id="nodejs-error-codes" tabindex="-1">Node.js エラーコード <a class="header-anchor" href="#nodejs-error-codes" aria-label="Permalink to “Node.js エラーコード”">​</a></h2><h3 id="abort_err" tabindex="-1"><code>ABORT_ERR</code> <a class="header-anchor" href="#abort_err" aria-label="Permalink to “ABORT_ERR”">​</a></h3><p><strong>追加: v15.0.0</strong></p><p>操作が中止された場合に使用されます（通常は <code>AbortController</code> を使用）。</p><p><code>AbortSignal</code> を使用<em>しない</em> API は、通常、このコードでエラーを発生させません。</p><p>このコードは、Web プラットフォームの <code>AbortError</code> との互換性を保つために、Node.js エラーが使用する通常の <code>ERR_*</code> 規則を使用していません。</p><h3 id="err_access_denied" tabindex="-1"><code>ERR_ACCESS_DENIED</code> <a class="header-anchor" href="#err_access_denied" aria-label="Permalink to “ERR_ACCESS_DENIED”">​</a></h3><p>Node.js が <a href="/ja/nodejs/api/permissions#permission-model">パーミッションモデル</a> によって制限されたリソースへのアクセスを試みるときにトリガーされる特別なタイプのエラー。</p><h3 id="err_ambiguous_argument" tabindex="-1"><code>ERR_AMBIGUOUS_ARGUMENT</code> <a class="header-anchor" href="#err_ambiguous_argument" aria-label="Permalink to “ERR_AMBIGUOUS_ARGUMENT”">​</a></h3><p>関数の引数が、関数シグネチャが誤解されている可能性を示唆する方法で使用されています。これは、<code>assert.throws(block, message)</code> の <code>message</code> パラメーターが <code>block</code> によってスローされたエラーメッセージと一致する場合に、<code>node:assert</code> モジュールによってスローされます。これは、その使用法が、ユーザーが <code>message</code> を、<code>block</code> がスローしない場合に <code>AssertionError</code> が表示するメッセージではなく、期待されるメッセージであると考えていることを示唆するためです。</p><h3 id="err_arg_not_iterable" tabindex="-1"><code>ERR_ARG_NOT_ITERABLE</code> <a class="header-anchor" href="#err_arg_not_iterable" aria-label="Permalink to “ERR_ARG_NOT_ITERABLE”">​</a></h3><p>反復可能な引数（つまり、<code>for...of</code> ループで動作する値）が必要でしたが、Node.js API に提供されませんでした。</p><h3 id="err_assertion" tabindex="-1"><code>ERR_ASSERTION</code> <a class="header-anchor" href="#err_assertion" aria-label="Permalink to “ERR_ASSERTION”">​</a></h3><p>Node.js が発生してはならない例外的な論理違反を検出したときにトリガーされる可能性がある特別なタイプのエラー。これらは通常、<code>node:assert</code> モジュールによって発生します。</p><h3 id="err_async_callback" tabindex="-1"><code>ERR_ASYNC_CALLBACK</code> <a class="header-anchor" href="#err_async_callback" aria-label="Permalink to “ERR_ASYNC_CALLBACK”">​</a></h3><p>関数ではないものを <code>AsyncHooks</code> コールバックとして登録しようとしました。</p><h3 id="err_async_type" tabindex="-1"><code>ERR_ASYNC_TYPE</code> <a class="header-anchor" href="#err_async_type" aria-label="Permalink to “ERR_ASYNC_TYPE”">​</a></h3><p>非同期リソースのタイプが無効でした。パブリック埋め込み API を使用している場合、ユーザーは独自のタイプを定義することもできます。</p><h3 id="err_brotli_compression_failed" tabindex="-1"><code>ERR_BROTLI_COMPRESSION_FAILED</code> <a class="header-anchor" href="#err_brotli_compression_failed" aria-label="Permalink to “ERR_BROTLI_COMPRESSION_FAILED”">​</a></h3><p>Brotli ストリームに渡されたデータが正常に圧縮されませんでした。</p><h3 id="err_brotli_invalid_param" tabindex="-1"><code>ERR_BROTLI_INVALID_PARAM</code> <a class="header-anchor" href="#err_brotli_invalid_param" aria-label="Permalink to “ERR_BROTLI_INVALID_PARAM”">​</a></h3><p>Brotli ストリームの構築中に無効なパラメーターキーが渡されました。</p><h3 id="err_buffer_context_not_available" tabindex="-1"><code>ERR_BUFFER_CONTEXT_NOT_AVAILABLE</code> <a class="header-anchor" href="#err_buffer_context_not_available" aria-label="Permalink to “ERR_BUFFER_CONTEXT_NOT_AVAILABLE”">​</a></h3><p>Node.js インスタンスに関連付けられていない JS エンジンコンテキストで、アドオンまたは埋め込みコードから Node.js <code>Buffer</code> インスタンスを作成しようとしました。<code>Buffer</code> メソッドに渡されたデータは、メソッドが返されるまでに解放されます。</p><p>このエラーが発生した場合、<code>Buffer</code> インスタンスを作成する代わりに、通常の <code>Uint8Array</code> を作成する方法があります。これは、結果のオブジェクトのプロトタイプのみが異なります。<code>Uint8Array</code> は、一般に <code>Buffer</code> が存在するすべての Node.js コア API で受け入れられます。これらはすべてのコンテキストで使用できます。</p><h3 id="err_buffer_out_of_bounds" tabindex="-1"><code>ERR_BUFFER_OUT_OF_BOUNDS</code> <a class="header-anchor" href="#err_buffer_out_of_bounds" aria-label="Permalink to “ERR_BUFFER_OUT_OF_BOUNDS”">​</a></h3><p><code>Buffer</code> の範囲外の操作が試みられました。</p><h3 id="err_buffer_too_large" tabindex="-1"><code>ERR_BUFFER_TOO_LARGE</code> <a class="header-anchor" href="#err_buffer_too_large" aria-label="Permalink to “ERR_BUFFER_TOO_LARGE”">​</a></h3><p>許可される最大サイズを超える <code>Buffer</code> を作成しようとしました。</p><h3 id="err_cannot_watch_sigint" tabindex="-1"><code>ERR_CANNOT_WATCH_SIGINT</code> <a class="header-anchor" href="#err_cannot_watch_sigint" aria-label="Permalink to “ERR_CANNOT_WATCH_SIGINT”">​</a></h3><p>Node.jsが<code>SIGINT</code>シグナルを監視できませんでした。</p><h3 id="err_child_closed_before_reply" tabindex="-1"><code>ERR_CHILD_CLOSED_BEFORE_REPLY</code> <a class="header-anchor" href="#err_child_closed_before_reply" aria-label="Permalink to “ERR_CHILD_CLOSED_BEFORE_REPLY”">​</a></h3><p>親プロセスが応答を受信する前に、子プロセスが閉じられました。</p><h3 id="err_child_process_ipc_required" tabindex="-1"><code>ERR_CHILD_PROCESS_IPC_REQUIRED</code> <a class="header-anchor" href="#err_child_process_ipc_required" aria-label="Permalink to “ERR_CHILD_PROCESS_IPC_REQUIRED”">​</a></h3><p>IPCチャネルを指定せずに子プロセスがforkされようとした場合に使用されます。</p><h3 id="err_child_process_stdio_maxbuffer" tabindex="-1"><code>ERR_CHILD_PROCESS_STDIO_MAXBUFFER</code> <a class="header-anchor" href="#err_child_process_stdio_maxbuffer" aria-label="Permalink to “ERR_CHILD_PROCESS_STDIO_MAXBUFFER”">​</a></h3><p>メインプロセスが子プロセスのSTDERR/STDOUTからデータを読み取ろうとしており、データの長さが<code>maxBuffer</code>オプションよりも長い場合に使用されます。</p><h3 id="err_closed_message_port" tabindex="-1"><code>ERR_CLOSED_MESSAGE_PORT</code> <a class="header-anchor" href="#err_closed_message_port" aria-label="Permalink to “ERR_CLOSED_MESSAGE_PORT”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v16.2.0, v14.17.1</td><td>エラーメッセージが再導入されました。</td></tr><tr><td>v11.12.0</td><td>エラーメッセージが削除されました。</td></tr><tr><td>v10.5.0</td><td>追加: v10.5.0</td></tr></tbody></table></div><p>通常、<code>.close()</code>が呼び出された後など、閉じられた状態の<code>MessagePort</code>インスタンスを使用しようとしました。</p><h3 id="err_console_writable_stream" tabindex="-1"><code>ERR_CONSOLE_WRITABLE_STREAM</code> <a class="header-anchor" href="#err_console_writable_stream" aria-label="Permalink to “ERR_CONSOLE_WRITABLE_STREAM”">​</a></h3><p><code>Console</code>が<code>stdout</code>ストリームなしでインスタンス化されたか、<code>Console</code>が書き込み不可能な<code>stdout</code>または<code>stderr</code>ストリームを持っています。</p><h3 id="err_construct_call_invalid" tabindex="-1"><code>ERR_CONSTRUCT_CALL_INVALID</code> <a class="header-anchor" href="#err_construct_call_invalid" aria-label="Permalink to “ERR_CONSTRUCT_CALL_INVALID”">​</a></h3><p><strong>追加: v12.5.0</strong></p><p>呼び出し可能ではないクラスコンストラクタが呼び出されました。</p><h3 id="err_construct_call_required" tabindex="-1"><code>ERR_CONSTRUCT_CALL_REQUIRED</code> <a class="header-anchor" href="#err_construct_call_required" aria-label="Permalink to “ERR_CONSTRUCT_CALL_REQUIRED”">​</a></h3><p>クラスのコンストラクタが<code>new</code>なしで呼び出されました。</p><h3 id="err_context_not_initialized" tabindex="-1"><code>ERR_CONTEXT_NOT_INITIALIZED</code> <a class="header-anchor" href="#err_context_not_initialized" aria-label="Permalink to “ERR_CONTEXT_NOT_INITIALIZED”">​</a></h3><p>APIに渡されたVMコンテキストがまだ初期化されていません。 これは、たとえば、コンテキストの作成中にエラーが発生し（キャッチされた場合）、アロケーションに失敗した場合や、コンテキストの作成時に最大コールスタックサイズに達した場合に発生する可能性があります。</p><h3 id="err_crypto_custom_engine_not_supported" tabindex="-1"><code>ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED</code> <a class="header-anchor" href="#err_crypto_custom_engine_not_supported" aria-label="Permalink to “ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED”">​</a></h3><p>OpenSSLエンジンが要求されました（たとえば、<code>clientCertEngine</code>または<code>privateKeyEngine</code> TLSオプションを通じて）。これは、使用されているOpenSSLのバージョンではサポートされていません。コンパイル時のフラグ<code>OPENSSL_NO_ENGINE</code>が原因である可能性があります。</p><h3 id="err_crypto_ecdh_invalid_format" tabindex="-1"><code>ERR_CRYPTO_ECDH_INVALID_FORMAT</code> <a class="header-anchor" href="#err_crypto_ecdh_invalid_format" aria-label="Permalink to “ERR_CRYPTO_ECDH_INVALID_FORMAT”">​</a></h3><p><code>format</code>引数の無効な値が、<code>crypto.ECDH()</code>クラスの<code>getPublicKey()</code>メソッドに渡されました。</p><h3 id="err_crypto_ecdh_invalid_public_key" tabindex="-1"><code>ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY</code> <a class="header-anchor" href="#err_crypto_ecdh_invalid_public_key" aria-label="Permalink to “ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY”">​</a></h3><p><code>key</code>引数の無効な値が、<code>crypto.ECDH()</code>クラスの<code>computeSecret()</code>メソッドに渡されました。 これは、公開鍵が楕円曲線の外にあることを意味します。</p><h3 id="err_crypto_engine_unknown" tabindex="-1"><code>ERR_CRYPTO_ENGINE_UNKNOWN</code> <a class="header-anchor" href="#err_crypto_engine_unknown" aria-label="Permalink to “ERR_CRYPTO_ENGINE_UNKNOWN”">​</a></h3><p>無効な暗号エンジン識別子が <a href="/ja/nodejs/api/crypto#cryptosetengineengine-flags"><code>require(&#39;node:crypto&#39;).setEngine()</code></a> に渡されました。</p><h3 id="err_crypto_fips_forced" tabindex="-1"><code>ERR_CRYPTO_FIPS_FORCED</code> <a class="header-anchor" href="#err_crypto_fips_forced" aria-label="Permalink to “ERR_CRYPTO_FIPS_FORCED”">​</a></h3><p><a href="/ja/nodejs/api/cli#force-fips"><code>--force-fips</code></a> コマンドライン引数が使用されましたが、<code>node:crypto</code> モジュールで FIPS モードを有効または無効にしようとする試みがありました。</p><h3 id="err_crypto_fips_unavailable" tabindex="-1"><code>ERR_CRYPTO_FIPS_UNAVAILABLE</code> <a class="header-anchor" href="#err_crypto_fips_unavailable" aria-label="Permalink to “ERR_CRYPTO_FIPS_UNAVAILABLE”">​</a></h3><p>FIPS モードを有効または無効にしようとしましたが、FIPS モードは利用できませんでした。</p><h3 id="err_crypto_hash_finalized" tabindex="-1"><code>ERR_CRYPTO_HASH_FINALIZED</code> <a class="header-anchor" href="#err_crypto_hash_finalized" aria-label="Permalink to “ERR_CRYPTO_HASH_FINALIZED”">​</a></h3><p><a href="/ja/nodejs/api/crypto#hashdigestencoding"><code>hash.digest()</code></a> が複数回呼び出されました。<code>hash.digest()</code> メソッドは、<code>Hash</code> オブジェクトのインスタンスごとに 1 回しか呼び出すことはできません。</p><h3 id="err_crypto_hash_update_failed" tabindex="-1"><code>ERR_CRYPTO_HASH_UPDATE_FAILED</code> <a class="header-anchor" href="#err_crypto_hash_update_failed" aria-label="Permalink to “ERR_CRYPTO_HASH_UPDATE_FAILED”">​</a></h3><p><a href="/ja/nodejs/api/crypto#hashupdatedata-inputencoding"><code>hash.update()</code></a> が何らかの理由で失敗しました。これはめったに起こらないはずです。</p><h3 id="err_crypto_incompatible_key" tabindex="-1"><code>ERR_CRYPTO_INCOMPATIBLE_KEY</code> <a class="header-anchor" href="#err_crypto_incompatible_key" aria-label="Permalink to “ERR_CRYPTO_INCOMPATIBLE_KEY”">​</a></h3><p>指定された暗号鍵が、試行された操作と互換性がありません。</p><h3 id="err_crypto_incompatible_key_options" tabindex="-1"><code>ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS</code> <a class="header-anchor" href="#err_crypto_incompatible_key_options" aria-label="Permalink to “ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS”">​</a></h3><p>選択された公開鍵または秘密鍵のエンコードは、他のオプションと互換性がありません。</p><h3 id="err_crypto_initialization_failed" tabindex="-1"><code>ERR_CRYPTO_INITIALIZATION_FAILED</code> <a class="header-anchor" href="#err_crypto_initialization_failed" aria-label="Permalink to “ERR_CRYPTO_INITIALIZATION_FAILED”">​</a></h3><p><strong>追加: v15.0.0</strong></p><p>暗号サブシステムの初期化に失敗しました。</p><h3 id="err_crypto_invalid_auth_tag" tabindex="-1"><code>ERR_CRYPTO_INVALID_AUTH_TAG</code> <a class="header-anchor" href="#err_crypto_invalid_auth_tag" aria-label="Permalink to “ERR_CRYPTO_INVALID_AUTH_TAG”">​</a></h3><p><strong>追加: v15.0.0</strong></p><p>無効な認証タグが提供されました。</p><h3 id="err_crypto_invalid_counter" tabindex="-1"><code>ERR_CRYPTO_INVALID_COUNTER</code> <a class="header-anchor" href="#err_crypto_invalid_counter" aria-label="Permalink to “ERR_CRYPTO_INVALID_COUNTER”">​</a></h3><p><strong>追加: v15.0.0</strong></p><p>カウンターモードの暗号に対して無効なカウンターが提供されました。</p><h3 id="err_crypto_invalid_curve" tabindex="-1"><code>ERR_CRYPTO_INVALID_CURVE</code> <a class="header-anchor" href="#err_crypto_invalid_curve" aria-label="Permalink to “ERR_CRYPTO_INVALID_CURVE”">​</a></h3><p><strong>追加: v15.0.0</strong></p><p>無効な楕円曲線が提供されました。</p><h3 id="err_crypto_invalid_digest" tabindex="-1"><code>ERR_CRYPTO_INVALID_DIGEST</code> <a class="header-anchor" href="#err_crypto_invalid_digest" aria-label="Permalink to “ERR_CRYPTO_INVALID_DIGEST”">​</a></h3><p>無効な<a href="/ja/nodejs/api/crypto#cryptogethashes">暗号ダイジェストアルゴリズム</a>が指定されました。</p><h3 id="err_crypto_invalid_iv" tabindex="-1"><code>ERR_CRYPTO_INVALID_IV</code> <a class="header-anchor" href="#err_crypto_invalid_iv" aria-label="Permalink to “ERR_CRYPTO_INVALID_IV”">​</a></h3><p><strong>追加: v15.0.0</strong></p><p>無効な初期化ベクトルが提供されました。</p><h3 id="err_crypto_invalid_jwk" tabindex="-1"><code>ERR_CRYPTO_INVALID_JWK</code> <a class="header-anchor" href="#err_crypto_invalid_jwk" aria-label="Permalink to “ERR_CRYPTO_INVALID_JWK”">​</a></h3><p><strong>追加: v15.0.0</strong></p><p>無効な JSON Web Key が提供されました。</p><h3 id="err_crypto_invalid_keylen" tabindex="-1"><code>ERR_CRYPTO_INVALID_KEYLEN</code> <a class="header-anchor" href="#err_crypto_invalid_keylen" aria-label="Permalink to “ERR_CRYPTO_INVALID_KEYLEN”">​</a></h3><p><strong>追加: v15.0.0</strong></p><p>無効なキー長が提供されました。</p><h3 id="err_crypto_invalid_keypair" tabindex="-1"><code>ERR_CRYPTO_INVALID_KEYPAIR</code> <a class="header-anchor" href="#err_crypto_invalid_keypair" aria-label="Permalink to “ERR_CRYPTO_INVALID_KEYPAIR”">​</a></h3><p><strong>追加: v15.0.0</strong></p><p>無効なキーペアが提供されました。</p><h3 id="err_crypto_invalid_keytype" tabindex="-1"><code>ERR_CRYPTO_INVALID_KEYTYPE</code> <a class="header-anchor" href="#err_crypto_invalid_keytype" aria-label="Permalink to “ERR_CRYPTO_INVALID_KEYTYPE”">​</a></h3><p><strong>追加: v15.0.0</strong></p><p>無効なキータイプが提供されました。</p><h3 id="err_crypto_invalid_key_object_type" tabindex="-1"><code>ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE</code> <a class="header-anchor" href="#err_crypto_invalid_key_object_type" aria-label="Permalink to “ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE”">​</a></h3><p>指定された暗号鍵オブジェクトの型が、試みられた操作に対して無効です。</p><h3 id="err_crypto_invalid_messagelen" tabindex="-1"><code>ERR_CRYPTO_INVALID_MESSAGELEN</code> <a class="header-anchor" href="#err_crypto_invalid_messagelen" aria-label="Permalink to “ERR_CRYPTO_INVALID_MESSAGELEN”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><p>無効なメッセージ長が提供されました。</p><h3 id="err_crypto_invalid_scrypt_params" tabindex="-1"><code>ERR_CRYPTO_INVALID_SCRYPT_PARAMS</code> <a class="header-anchor" href="#err_crypto_invalid_scrypt_params" aria-label="Permalink to “ERR_CRYPTO_INVALID_SCRYPT_PARAMS”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><p><a href="/ja/nodejs/api/crypto#cryptoscryptpassword-salt-keylen-options-callback"><code>crypto.scrypt()</code></a> または <a href="/ja/nodejs/api/crypto#cryptoscryptsyncpassword-salt-keylen-options"><code>crypto.scryptSync()</code></a> の1つ以上のパラメータが、法的範囲外です。</p><h3 id="err_crypto_invalid_state" tabindex="-1"><code>ERR_CRYPTO_INVALID_STATE</code> <a class="header-anchor" href="#err_crypto_invalid_state" aria-label="Permalink to “ERR_CRYPTO_INVALID_STATE”">​</a></h3><p>暗号メソッドが無効な状態のオブジェクトで使用されました。 たとえば、<code>cipher.final()</code> を呼び出す前に <a href="/ja/nodejs/api/crypto#ciphergetauthtag"><code>cipher.getAuthTag()</code></a> を呼び出すなど。</p><h3 id="err_crypto_invalid_tag_length" tabindex="-1"><code>ERR_CRYPTO_INVALID_TAG_LENGTH</code> <a class="header-anchor" href="#err_crypto_invalid_tag_length" aria-label="Permalink to “ERR_CRYPTO_INVALID_TAG_LENGTH”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><p>無効な認証タグ長が提供されました。</p><h3 id="err_crypto_job_init_failed" tabindex="-1"><code>ERR_CRYPTO_JOB_INIT_FAILED</code> <a class="header-anchor" href="#err_crypto_job_init_failed" aria-label="Permalink to “ERR_CRYPTO_JOB_INIT_FAILED”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><p>非同期暗号操作の初期化に失敗しました。</p><h3 id="err_crypto_jwk_unsupported_curve" tabindex="-1"><code>ERR_CRYPTO_JWK_UNSUPPORTED_CURVE</code> <a class="header-anchor" href="#err_crypto_jwk_unsupported_curve" aria-label="Permalink to “ERR_CRYPTO_JWK_UNSUPPORTED_CURVE”">​</a></h3><p>キーの楕円曲線は、<a href="https://www.iana.org/assignments/jose/jose.xhtml#web-key-elliptic-curve" target="_blank" rel="noreferrer">JSON Web Key Elliptic Curve Registry</a> での使用に登録されていません。</p><h3 id="err_crypto_jwk_unsupported_key_type" tabindex="-1"><code>ERR_CRYPTO_JWK_UNSUPPORTED_KEY_TYPE</code> <a class="header-anchor" href="#err_crypto_jwk_unsupported_key_type" aria-label="Permalink to “ERR_CRYPTO_JWK_UNSUPPORTED_KEY_TYPE”">​</a></h3><p>キーの非対称キータイプは、<a href="https://www.iana.org/assignments/jose/jose.xhtml#web-key-types" target="_blank" rel="noreferrer">JSON Web Key Types Registry</a> での使用に登録されていません。</p><h3 id="err_crypto_operation_failed" tabindex="-1"><code>ERR_CRYPTO_OPERATION_FAILED</code> <a class="header-anchor" href="#err_crypto_operation_failed" aria-label="Permalink to “ERR_CRYPTO_OPERATION_FAILED”">​</a></h3><p><strong>Added in: v15.0.0</strong></p><p>暗号操作が、特に指定されていない理由で失敗しました。</p><h3 id="err_crypto_pbkdf2_error" tabindex="-1"><code>ERR_CRYPTO_PBKDF2_ERROR</code> <a class="header-anchor" href="#err_crypto_pbkdf2_error" aria-label="Permalink to “ERR_CRYPTO_PBKDF2_ERROR”">​</a></h3><p>PBKDF2アルゴリズムが、特定の理由で失敗しました。 OpenSSLは詳細を提供していないため、Node.jsも提供していません。</p><h3 id="err_crypto_scrypt_not_supported" tabindex="-1"><code>ERR_CRYPTO_SCRYPT_NOT_SUPPORTED</code> <a class="header-anchor" href="#err_crypto_scrypt_not_supported" aria-label="Permalink to “ERR_CRYPTO_SCRYPT_NOT_SUPPORTED”">​</a></h3><p>Node.jsは <code>scrypt</code> サポートなしでコンパイルされました。 公式リリースバイナリでは不可能ですが、ディストリビューションビルドを含むカスタムビルドで発生する可能性があります。</p><h3 id="err_crypto_sign_key_required" tabindex="-1"><code>ERR_CRYPTO_SIGN_KEY_REQUIRED</code> <a class="header-anchor" href="#err_crypto_sign_key_required" aria-label="Permalink to “ERR_CRYPTO_SIGN_KEY_REQUIRED”">​</a></h3><p>署名 <code>key</code> が <a href="/ja/nodejs/api/crypto#signsignprivatekey-outputencoding"><code>sign.sign()</code></a> メソッドに提供されていませんでした。</p><h3 id="err_crypto_timing_safe_equal_length" tabindex="-1"><code>ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH</code> <a class="header-anchor" href="#err_crypto_timing_safe_equal_length" aria-label="Permalink to “ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH”">​</a></h3><p><a href="/ja/nodejs/api/crypto#cryptotimingsafeequala-b"><code>crypto.timingSafeEqual()</code></a> が、長さの異なる <code>Buffer</code>、<code>TypedArray</code>、または <code>DataView</code> 引数で呼び出されました。</p><h3 id="err_crypto_unknown_cipher" tabindex="-1"><code>ERR_CRYPTO_UNKNOWN_CIPHER</code> <a class="header-anchor" href="#err_crypto_unknown_cipher" aria-label="Permalink to “ERR_CRYPTO_UNKNOWN_CIPHER”">​</a></h3><p>不明な暗号が指定されました。</p><h3 id="err_crypto_unknown_dh_group" tabindex="-1"><code>ERR_CRYPTO_UNKNOWN_DH_GROUP</code> <a class="header-anchor" href="#err_crypto_unknown_dh_group" aria-label="Permalink to “ERR_CRYPTO_UNKNOWN_DH_GROUP”">​</a></h3><p>不明な Diffie-Hellman グループ名が指定されました。有効なグループ名の一覧については、<a href="/ja/nodejs/api/crypto#cryptogetdiffiehellmangroupname"><code>crypto.getDiffieHellman()</code></a> を参照してください。</p><h3 id="err_crypto_unsupported_operation" tabindex="-1"><code>ERR_CRYPTO_UNSUPPORTED_OPERATION</code> <a class="header-anchor" href="#err_crypto_unsupported_operation" aria-label="Permalink to “ERR_CRYPTO_UNSUPPORTED_OPERATION”">​</a></h3><p><strong>追加: v15.0.0, v14.18.0</strong></p><p>サポートされていない暗号操作を呼び出そうとしました。</p><h3 id="err_debugger_error" tabindex="-1"><code>ERR_DEBUGGER_ERROR</code> <a class="header-anchor" href="#err_debugger_error" aria-label="Permalink to “ERR_DEBUGGER_ERROR”">​</a></h3><p><strong>追加: v16.4.0, v14.17.4</strong></p><p><a href="/ja/nodejs/api/debugger">デバッガー</a> でエラーが発生しました。</p><h3 id="err_debugger_startup_error" tabindex="-1"><code>ERR_DEBUGGER_STARTUP_ERROR</code> <a class="header-anchor" href="#err_debugger_startup_error" aria-label="Permalink to “ERR_DEBUGGER_STARTUP_ERROR”">​</a></h3><p><strong>追加: v16.4.0, v14.17.4</strong></p><p><a href="/ja/nodejs/api/debugger">デバッガー</a> は、必要なホスト/ポートが解放されるのを待機中にタイムアウトしました。</p><h3 id="err_dir_closed" tabindex="-1"><code>ERR_DIR_CLOSED</code> <a class="header-anchor" href="#err_dir_closed" aria-label="Permalink to “ERR_DIR_CLOSED”">​</a></h3><p><a href="/ja/nodejs/api/fs#class-fsdir"><code>fs.Dir</code></a> は以前に閉じられました。</p><h3 id="err_dir_concurrent_operation" tabindex="-1"><code>ERR_DIR_CONCURRENT_OPERATION</code> <a class="header-anchor" href="#err_dir_concurrent_operation" aria-label="Permalink to “ERR_DIR_CONCURRENT_OPERATION”">​</a></h3><p><strong>追加: v14.3.0</strong></p><p>非同期操作が進行中の <a href="/ja/nodejs/api/fs#class-fsdir"><code>fs.Dir</code></a> に対して、同期的な read または close の呼び出しが試行されました。</p><h3 id="err_dlopen_disabled" tabindex="-1"><code>ERR_DLOPEN_DISABLED</code> <a class="header-anchor" href="#err_dlopen_disabled" aria-label="Permalink to “ERR_DLOPEN_DISABLED”">​</a></h3><p><strong>追加: v16.10.0, v14.19.0</strong></p><p>ネイティブアドオンの読み込みは、<a href="/ja/nodejs/api/cli#no-addons"><code>--no-addons</code></a> を使用して無効になっています。</p><h3 id="err_dlopen_failed" tabindex="-1"><code>ERR_DLOPEN_FAILED</code> <a class="header-anchor" href="#err_dlopen_failed" aria-label="Permalink to “ERR_DLOPEN_FAILED”">​</a></h3><p><strong>追加: v15.0.0</strong></p><p><code>process.dlopen()</code> の呼び出しに失敗しました。</p><h3 id="err_dns_set_servers_failed" tabindex="-1"><code>ERR_DNS_SET_SERVERS_FAILED</code> <a class="header-anchor" href="#err_dns_set_servers_failed" aria-label="Permalink to “ERR_DNS_SET_SERVERS_FAILED”">​</a></h3><p><code>c-ares</code> は DNS サーバーの設定に失敗しました。</p><h3 id="err_domain_callback_not_available" tabindex="-1"><code>ERR_DOMAIN_CALLBACK_NOT_AVAILABLE</code> <a class="header-anchor" href="#err_domain_callback_not_available" aria-label="Permalink to “ERR_DOMAIN_CALLBACK_NOT_AVAILABLE”">​</a></h3><p><code>node:domain</code> モジュールは、必要なエラー処理フックを確立できなかったため、使用できませんでした。これは、<a href="/ja/nodejs/api/process#processsetuncaughtexceptioncapturecallbackfn"><code>process.setUncaughtExceptionCaptureCallback()</code></a> が以前に呼び出されていたためです。</p><h3 id="err_domain_cannot_set_uncaught_exception_capture" tabindex="-1"><code>ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE</code> <a class="header-anchor" href="#err_domain_cannot_set_uncaught_exception_capture" aria-label="Permalink to “ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE”">​</a></h3><p><a href="/ja/nodejs/api/process#processsetuncaughtexceptioncapturecallbackfn"><code>process.setUncaughtExceptionCaptureCallback()</code></a> は、<code>node:domain</code> モジュールが以前にロードされていたため、呼び出すことができませんでした。</p><p>スタックトレースは、<code>node:domain</code> モジュールがロードされた時点を含むように拡張されます。</p><h3 id="err_duplicate_startup_snapshot_main_function" tabindex="-1"><code>ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION</code> <a class="header-anchor" href="#err_duplicate_startup_snapshot_main_function" aria-label="Permalink to “ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION”">​</a></h3><p><a href="/ja/nodejs/api/v8#v8startupsnapshotsetdeserializemainfunctioncallback-data"><code>v8.startupSnapshot.setDeserializeMainFunction()</code></a> は、以前に呼び出されていたため、呼び出すことができませんでした。</p><h3 id="err_encoding_invalid_encoded_data" tabindex="-1"><code>ERR_ENCODING_INVALID_ENCODED_DATA</code> <a class="header-anchor" href="#err_encoding_invalid_encoded_data" aria-label="Permalink to “ERR_ENCODING_INVALID_ENCODED_DATA”">​</a></h3><p><code>TextDecoder()</code> API に提供されたデータが、提供されたエンコーディングに従って無効でした。</p><h3 id="err_encoding_not_supported" tabindex="-1"><code>ERR_ENCODING_NOT_SUPPORTED</code> <a class="header-anchor" href="#err_encoding_not_supported" aria-label="Permalink to “ERR_ENCODING_NOT_SUPPORTED”">​</a></h3><p><code>TextDecoder()</code> API に提供されたエンコーディングが、<a href="/ja/nodejs/api/util#whatwg-supported-encodings">WHATWG Supported Encodings</a> のいずれでもありませんでした。</p><h3 id="err_eval_esm_cannot_print" tabindex="-1"><code>ERR_EVAL_ESM_CANNOT_PRINT</code> <a class="header-anchor" href="#err_eval_esm_cannot_print" aria-label="Permalink to “ERR_EVAL_ESM_CANNOT_PRINT”">​</a></h3><p><code>--print</code> は ESM 入力では使用できません。</p><h3 id="err_event_recursion" tabindex="-1"><code>ERR_EVENT_RECURSION</code> <a class="header-anchor" href="#err_event_recursion" aria-label="Permalink to “ERR_EVENT_RECURSION”">​</a></h3><p><code>EventTarget</code> でイベントを再帰的にディスパッチしようとした場合にスローされます。</p><h3 id="err_execution_environment_not_available" tabindex="-1"><code>ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE</code> <a class="header-anchor" href="#err_execution_environment_not_available" aria-label="Permalink to “ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE”">​</a></h3><p>JS 実行コンテキストが Node.js 環境に関連付けられていません。これは、Node.js が埋め込みライブラリとして使用され、JS エンジンの一部のフックが正しく設定されていない場合に発生する可能性があります。</p><h3 id="err_falsy_value_rejection" tabindex="-1"><code>ERR_FALSY_VALUE_REJECTION</code> <a class="header-anchor" href="#err_falsy_value_rejection" aria-label="Permalink to “ERR_FALSY_VALUE_REJECTION”">​</a></h3><p><code>util.callbackify()</code> を介してコールバック化された <code>Promise</code> が、偽の値で拒否されました。</p><h3 id="err_feature_unavailable_on_platform" tabindex="-1"><code>ERR_FEATURE_UNAVAILABLE_ON_PLATFORM</code> <a class="header-anchor" href="#err_feature_unavailable_on_platform" aria-label="Permalink to “ERR_FEATURE_UNAVAILABLE_ON_PLATFORM”">​</a></h3><p><strong>Added in: v14.0.0</strong></p><p>Node.js を実行している現在のプラットフォームで使用できない機能が使用された場合に使用されます。</p><h3 id="err_fs_cp_dir_to_non_dir" tabindex="-1"><code>ERR_FS_CP_DIR_TO_NON_DIR</code> <a class="header-anchor" href="#err_fs_cp_dir_to_non_dir" aria-label="Permalink to “ERR_FS_CP_DIR_TO_NON_DIR”">​</a></h3><p><strong>Added in: v16.7.0</strong></p><p><a href="/ja/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> を使用して、ディレクトリを非ディレクトリ (ファイル、シンボリックリンクなど) にコピーしようとしました。</p><h3 id="err_fs_cp_eexist" tabindex="-1"><code>ERR_FS_CP_EEXIST</code> <a class="header-anchor" href="#err_fs_cp_eexist" aria-label="Permalink to “ERR_FS_CP_EEXIST”">​</a></h3><p><strong>Added in: v16.7.0</strong></p><p><code>force</code> と <code>errorOnExist</code> が <code>true</code> に設定されている状態で、<a href="/ja/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> を使用して、既に存在するファイルを上書きしようとしました。</p><h3 id="err_fs_cp_einval" tabindex="-1"><code>ERR_FS_CP_EINVAL</code> <a class="header-anchor" href="#err_fs_cp_einval" aria-label="Permalink to “ERR_FS_CP_EINVAL”">​</a></h3><p><strong>Added in: v16.7.0</strong></p><p><a href="/ja/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> を使用する際に、<code>src</code> または <code>dest</code> が無効なパスを指していました。</p><h3 id="err_fs_cp_fifo_pipe" tabindex="-1"><code>ERR_FS_CP_FIFO_PIPE</code> <a class="header-anchor" href="#err_fs_cp_fifo_pipe" aria-label="Permalink to “ERR_FS_CP_FIFO_PIPE”">​</a></h3><p><strong>Added in: v16.7.0</strong></p><p><a href="/ja/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> を使用して、名前付きパイプをコピーしようとしました。</p><h3 id="err_fs_cp_non_dir_to_dir" tabindex="-1"><code>ERR_FS_CP_NON_DIR_TO_DIR</code> <a class="header-anchor" href="#err_fs_cp_non_dir_to_dir" aria-label="Permalink to “ERR_FS_CP_NON_DIR_TO_DIR”">​</a></h3><p><strong>Added in: v16.7.0</strong></p><p><a href="/ja/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> を使用して、非ディレクトリ (ファイル、シンボリックリンクなど) をディレクトリにコピーしようとしました。</p><h3 id="err_fs_cp_socket" tabindex="-1"><code>ERR_FS_CP_SOCKET</code> <a class="header-anchor" href="#err_fs_cp_socket" aria-label="Permalink to “ERR_FS_CP_SOCKET”">​</a></h3><p><strong>Added in: v16.7.0</strong></p><p><a href="/ja/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> を使用して、ソケットにコピーしようとしました。</p><h3 id="err_fs_cp_symlink_to_subdirectory" tabindex="-1"><code>ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY</code> <a class="header-anchor" href="#err_fs_cp_symlink_to_subdirectory" aria-label="Permalink to “ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY”">​</a></h3><p><strong>Added in: v16.7.0</strong></p><p><a href="/ja/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> を使用する際、<code>dest</code> 内のシンボリックリンクが <code>src</code> のサブディレクトリを指していました。</p><h3 id="err_fs_cp_unknown" tabindex="-1"><code>ERR_FS_CP_UNKNOWN</code> <a class="header-anchor" href="#err_fs_cp_unknown" aria-label="Permalink to “ERR_FS_CP_UNKNOWN”">​</a></h3><p><strong>Added in: v16.7.0</strong></p><p><a href="/ja/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> で、不明なファイルタイプへのコピーが試みられました。</p><h3 id="err_fs_eisdir" tabindex="-1"><code>ERR_FS_EISDIR</code> <a class="header-anchor" href="#err_fs_eisdir" aria-label="Permalink to “ERR_FS_EISDIR”">​</a></h3><p>パスがディレクトリです。</p><h3 id="err_fs_file_too_large" tabindex="-1"><code>ERR_FS_FILE_TOO_LARGE</code> <a class="header-anchor" href="#err_fs_file_too_large" aria-label="Permalink to “ERR_FS_FILE_TOO_LARGE”">​</a></h3><p>ファイルのサイズが <code>Buffer</code> で許容される最大サイズよりも大きいため、読み込もうとしました。</p><h3 id="err_http2_altsvc_invalid_origin" tabindex="-1"><code>ERR_HTTP2_ALTSVC_INVALID_ORIGIN</code> <a class="header-anchor" href="#err_http2_altsvc_invalid_origin" aria-label="Permalink to “ERR_HTTP2_ALTSVC_INVALID_ORIGIN”">​</a></h3><p>HTTP/2 ALTSVC フレームには有効なオリジンが必要です。</p><h3 id="err_http2_altsvc_length" tabindex="-1"><code>ERR_HTTP2_ALTSVC_LENGTH</code> <a class="header-anchor" href="#err_http2_altsvc_length" aria-label="Permalink to “ERR_HTTP2_ALTSVC_LENGTH”">​</a></h3><p>HTTP/2 ALTSVC フレームは、最大 16,382 バイトのペイロードに制限されています。</p><h3 id="err_http2_connect_authority" tabindex="-1"><code>ERR_HTTP2_CONNECT_AUTHORITY</code> <a class="header-anchor" href="#err_http2_connect_authority" aria-label="Permalink to “ERR_HTTP2_CONNECT_AUTHORITY”">​</a></h3><p><code>CONNECT</code> メソッドを使用する HTTP/2 リクエストでは、<code>:authority</code> 疑似ヘッダーが必要です。</p><h3 id="err_http2_connect_path" tabindex="-1"><code>ERR_HTTP2_CONNECT_PATH</code> <a class="header-anchor" href="#err_http2_connect_path" aria-label="Permalink to “ERR_HTTP2_CONNECT_PATH”">​</a></h3><p><code>CONNECT</code> メソッドを使用する HTTP/2 リクエストでは、<code>:path</code> 疑似ヘッダーは禁止されています。</p><h3 id="err_http2_connect_scheme" tabindex="-1"><code>ERR_HTTP2_CONNECT_SCHEME</code> <a class="header-anchor" href="#err_http2_connect_scheme" aria-label="Permalink to “ERR_HTTP2_CONNECT_SCHEME”">​</a></h3><p><code>CONNECT</code> メソッドを使用する HTTP/2 リクエストでは、<code>:scheme</code> 疑似ヘッダーは禁止されています。</p><h3 id="err_http2_error" tabindex="-1"><code>ERR_HTTP2_ERROR</code> <a class="header-anchor" href="#err_http2_error" aria-label="Permalink to “ERR_HTTP2_ERROR”">​</a></h3><p>特定できない HTTP/2 エラーが発生しました。</p><h3 id="err_http2_goaway_session" tabindex="-1"><code>ERR_HTTP2_GOAWAY_SESSION</code> <a class="header-anchor" href="#err_http2_goaway_session" aria-label="Permalink to “ERR_HTTP2_GOAWAY_SESSION”">​</a></h3><p><code>Http2Session</code> が接続されたピアから <code>GOAWAY</code> フレームを受信した後、新しい HTTP/2 ストリームを開くことはできません。</p><h3 id="err_http2_headers_after_respond" tabindex="-1"><code>ERR_HTTP2_HEADERS_AFTER_RESPOND</code> <a class="header-anchor" href="#err_http2_headers_after_respond" aria-label="Permalink to “ERR_HTTP2_HEADERS_AFTER_RESPOND”">​</a></h3><p>HTTP/2 レスポンスの開始後に、追加のヘッダーが指定されました。</p><h3 id="err_http2_headers_sent" tabindex="-1"><code>ERR_HTTP2_HEADERS_SENT</code> <a class="header-anchor" href="#err_http2_headers_sent" aria-label="Permalink to “ERR_HTTP2_HEADERS_SENT”">​</a></h3><p>複数のレスポンスヘッダーを送信しようとしました。</p><h3 id="err_http2_header_single_value" tabindex="-1"><code>ERR_HTTP2_HEADER_SINGLE_VALUE</code> <a class="header-anchor" href="#err_http2_header_single_value" aria-label="Permalink to “ERR_HTTP2_HEADER_SINGLE_VALUE”">​</a></h3><p>単一の値のみを持つ必要のある HTTP/2 ヘッダーフィールドに複数の値が指定されました。</p><h3 id="err_http2_info_status_not_allowed" tabindex="-1"><code>ERR_HTTP2_INFO_STATUS_NOT_ALLOWED</code> <a class="header-anchor" href="#err_http2_info_status_not_allowed" aria-label="Permalink to “ERR_HTTP2_INFO_STATUS_NOT_ALLOWED”">​</a></h3><p>情報 HTTP ステータスコード (<code>1xx</code>) は、HTTP/2 レスポンスのレスポンスステータスコードとして設定できません。</p><h3 id="err_http2_invalid_connection_headers" tabindex="-1"><code>ERR_HTTP2_INVALID_CONNECTION_HEADERS</code> <a class="header-anchor" href="#err_http2_invalid_connection_headers" aria-label="Permalink to “ERR_HTTP2_INVALID_CONNECTION_HEADERS”">​</a></h3><p>HTTP/1 の接続固有のヘッダーは、HTTP/2 のリクエストおよびレスポンスで使用することが禁止されています。</p><h3 id="err_http2_invalid_header_value" tabindex="-1"><code>ERR_HTTP2_INVALID_HEADER_VALUE</code> <a class="header-anchor" href="#err_http2_invalid_header_value" aria-label="Permalink to “ERR_HTTP2_INVALID_HEADER_VALUE”">​</a></h3><p>無効な HTTP/2 ヘッダー値が指定されました。</p><h3 id="err_http2_invalid_info_status" tabindex="-1"><code>ERR_HTTP2_INVALID_INFO_STATUS</code> <a class="header-anchor" href="#err_http2_invalid_info_status" aria-label="Permalink to “ERR_HTTP2_INVALID_INFO_STATUS”">​</a></h3><p>無効な HTTP 情報ステータスコードが指定されました。情報ステータスコードは、<code>100</code> から <code>199</code> までの整数でなければなりません（両端を含む）。</p><h3 id="err_http2_invalid_origin" tabindex="-1"><code>ERR_HTTP2_INVALID_ORIGIN</code> <a class="header-anchor" href="#err_http2_invalid_origin" aria-label="Permalink to “ERR_HTTP2_INVALID_ORIGIN”">​</a></h3><p>HTTP/2 <code>ORIGIN</code> フレームには、有効なオリジンが必要です。</p><h3 id="err_http2_invalid_packed_settings_length" tabindex="-1"><code>ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH</code> <a class="header-anchor" href="#err_http2_invalid_packed_settings_length" aria-label="Permalink to “ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH”">​</a></h3><p><code>http2.getUnpackedSettings()</code> API に渡される入力 <code>Buffer</code> および <code>Uint8Array</code> インスタンスの長さは、6 の倍数である必要があります。</p><h3 id="err_http2_invalid_pseudoheader" tabindex="-1"><code>ERR_HTTP2_INVALID_PSEUDOHEADER</code> <a class="header-anchor" href="#err_http2_invalid_pseudoheader" aria-label="Permalink to “ERR_HTTP2_INVALID_PSEUDOHEADER”">​</a></h3><p>有効な HTTP/2 疑似ヘッダー (<code>:status</code>, <code>:path</code>, <code>:authority</code>, <code>:scheme</code>, および <code>:method</code>) のみを使用できます。</p><h3 id="err_http2_invalid_session" tabindex="-1"><code>ERR_HTTP2_INVALID_SESSION</code> <a class="header-anchor" href="#err_http2_invalid_session" aria-label="Permalink to “ERR_HTTP2_INVALID_SESSION”">​</a></h3><p>すでに破棄された <code>Http2Session</code> オブジェクトに対してアクションが実行されました。</p><h3 id="err_http2_invalid_setting_value" tabindex="-1"><code>ERR_HTTP2_INVALID_SETTING_VALUE</code> <a class="header-anchor" href="#err_http2_invalid_setting_value" aria-label="Permalink to “ERR_HTTP2_INVALID_SETTING_VALUE”">​</a></h3><p>HTTP/2 設定に無効な値が指定されました。</p><h3 id="err_http2_invalid_stream" tabindex="-1"><code>ERR_HTTP2_INVALID_STREAM</code> <a class="header-anchor" href="#err_http2_invalid_stream" aria-label="Permalink to “ERR_HTTP2_INVALID_STREAM”">​</a></h3><p>すでに破棄されたストリームに対して操作が実行されました。</p><h3 id="err_http2_max_pending_settings_ack" tabindex="-1"><code>ERR_HTTP2_MAX_PENDING_SETTINGS_ACK</code> <a class="header-anchor" href="#err_http2_max_pending_settings_ack" aria-label="Permalink to “ERR_HTTP2_MAX_PENDING_SETTINGS_ACK”">​</a></h3><p>HTTP/2 <code>SETTINGS</code> フレームが接続されたピアに送信されるたびに、ピアは新しい <code>SETTINGS</code> を受信して適用したことを確認する応答を送信する必要があります。デフォルトでは、未応答の <code>SETTINGS</code> フレームの最大数が一度に送信される可能性があります。このエラーコードは、その制限に達した場合に使用されます。</p><h3 id="err_http2_nested_push" tabindex="-1"><code>ERR_HTTP2_NESTED_PUSH</code> <a class="header-anchor" href="#err_http2_nested_push" aria-label="Permalink to “ERR_HTTP2_NESTED_PUSH”">​</a></h3><p>プッシュストリーム内から新しいプッシュストリームを開始しようとしました。ネストされたプッシュストリームは許可されていません。</p><h3 id="err_http2_no_mem" tabindex="-1"><code>ERR_HTTP2_NO_MEM</code> <a class="header-anchor" href="#err_http2_no_mem" aria-label="Permalink to “ERR_HTTP2_NO_MEM”">​</a></h3><p><code>http2session.setLocalWindowSize(windowSize)</code> API の使用中にメモリ不足になりました。</p><h3 id="err_http2_no_socket_manipulation" tabindex="-1"><code>ERR_HTTP2_NO_SOCKET_MANIPULATION</code> <a class="header-anchor" href="#err_http2_no_socket_manipulation" aria-label="Permalink to “ERR_HTTP2_NO_SOCKET_MANIPULATION”">​</a></h3><p><code>Http2Session</code> にアタッチされたソケットを直接操作しようとしました（読み取り、書き込み、一時停止、再開など）。</p><h3 id="err_http2_origin_length" tabindex="-1"><code>ERR_HTTP2_ORIGIN_LENGTH</code> <a class="header-anchor" href="#err_http2_origin_length" aria-label="Permalink to “ERR_HTTP2_ORIGIN_LENGTH”">​</a></h3><p>HTTP/2 <code>ORIGIN</code> フレームは、長さが 16382 バイトに制限されています。</p><h3 id="err_http2_out_of_streams" tabindex="-1"><code>ERR_HTTP2_OUT_OF_STREAMS</code> <a class="header-anchor" href="#err_http2_out_of_streams" aria-label="Permalink to “ERR_HTTP2_OUT_OF_STREAMS”">​</a></h3><p>単一の HTTP/2 セッションで作成されたストリームの数が最大制限に達しました。</p><h3 id="err_http2_payload_forbidden" tabindex="-1"><code>ERR_HTTP2_PAYLOAD_FORBIDDEN</code> <a class="header-anchor" href="#err_http2_payload_forbidden" aria-label="Permalink to “ERR_HTTP2_PAYLOAD_FORBIDDEN”">​</a></h3><p>ペイロードが禁止されている HTTP 応答コードにメッセージペイロードが指定されました。</p><h3 id="err_http2_ping_cancel" tabindex="-1"><code>ERR_HTTP2_PING_CANCEL</code> <a class="header-anchor" href="#err_http2_ping_cancel" aria-label="Permalink to “ERR_HTTP2_PING_CANCEL”">​</a></h3><p>HTTP/2 ping がキャンセルされました。</p><h3 id="err_http2_ping_length" tabindex="-1"><code>ERR_HTTP2_PING_LENGTH</code> <a class="header-anchor" href="#err_http2_ping_length" aria-label="Permalink to “ERR_HTTP2_PING_LENGTH”">​</a></h3><p>HTTP/2 ping ペイロードの長さは正確に 8 バイトでなければなりません。</p><h3 id="err_http2_pseudoheader_not_allowed" tabindex="-1"><code>ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED</code> <a class="header-anchor" href="#err_http2_pseudoheader_not_allowed" aria-label="Permalink to “ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED”">​</a></h3><p>HTTP/2 疑似ヘッダーが不適切に使用されました。疑似ヘッダーは、<code>:</code> プレフィックスで始まるヘッダーキー名です。</p><h3 id="err_http2_push_disabled" tabindex="-1"><code>ERR_HTTP2_PUSH_DISABLED</code> <a class="header-anchor" href="#err_http2_push_disabled" aria-label="Permalink to “ERR_HTTP2_PUSH_DISABLED”">​</a></h3><p>クライアントによって無効にされたプッシュストリームを作成しようとしました。</p><h3 id="err_http2_send_file" tabindex="-1"><code>ERR_HTTP2_SEND_FILE</code> <a class="header-anchor" href="#err_http2_send_file" aria-label="Permalink to “ERR_HTTP2_SEND_FILE”">​</a></h3><p><code>Http2Stream.prototype.responseWithFile()</code> API を使用してディレクトリを送信しようとしました。</p><h3 id="err_http2_send_file_noseek" tabindex="-1"><code>ERR_HTTP2_SEND_FILE_NOSEEK</code> <a class="header-anchor" href="#err_http2_send_file_noseek" aria-label="Permalink to “ERR_HTTP2_SEND_FILE_NOSEEK”">​</a></h3><p><code>Http2Stream.prototype.responseWithFile()</code> API を使用して、通常のファイル以外のものを送信しようとしましたが、<code>offset</code> または <code>length</code> オプションが指定されました。</p><h3 id="err_http2_session_error" tabindex="-1"><code>ERR_HTTP2_SESSION_ERROR</code> <a class="header-anchor" href="#err_http2_session_error" aria-label="Permalink to “ERR_HTTP2_SESSION_ERROR”">​</a></h3><p><code>Http2Session</code> はゼロ以外のエラーコードで閉じられました。</p><h3 id="err_http2_settings_cancel" tabindex="-1"><code>ERR_HTTP2_SETTINGS_CANCEL</code> <a class="header-anchor" href="#err_http2_settings_cancel" aria-label="Permalink to “ERR_HTTP2_SETTINGS_CANCEL”">​</a></h3><p><code>Http2Session</code> 設定がキャンセルされました。</p><h3 id="err_http2_socket_bound" tabindex="-1"><code>ERR_HTTP2_SOCKET_BOUND</code> <a class="header-anchor" href="#err_http2_socket_bound" aria-label="Permalink to “ERR_HTTP2_SOCKET_BOUND”">​</a></h3><p>すでに別の <code>Http2Session</code> オブジェクトにバインドされている <code>net.Socket</code> または <code>tls.TLSSocket</code> に <code>Http2Session</code> オブジェクトを接続しようとしました。</p><h3 id="err_http2_socket_unbound" tabindex="-1"><code>ERR_HTTP2_SOCKET_UNBOUND</code> <a class="header-anchor" href="#err_http2_socket_unbound" aria-label="Permalink to “ERR_HTTP2_SOCKET_UNBOUND”">​</a></h3><p>すでに閉じられている <code>Http2Session</code> の <code>socket</code> プロパティを使用しようとしました。</p><h3 id="err_http2_status_101" tabindex="-1"><code>ERR_HTTP2_STATUS_101</code> <a class="header-anchor" href="#err_http2_status_101" aria-label="Permalink to “ERR_HTTP2_STATUS_101”">​</a></h3><p>HTTP/2 では、<code>101</code> 情報ステータスコードの使用は禁止されています。</p><h3 id="err_http2_status_invalid" tabindex="-1"><code>ERR_HTTP2_STATUS_INVALID</code> <a class="header-anchor" href="#err_http2_status_invalid" aria-label="Permalink to “ERR_HTTP2_STATUS_INVALID”">​</a></h3><p>無効な HTTP ステータスコードが指定されました。ステータスコードは、<code>100</code> から <code>599</code> (両端を含む) までの整数でなければなりません。</p><h3 id="err_http2_stream_cancel" tabindex="-1"><code>ERR_HTTP2_STREAM_CANCEL</code> <a class="header-anchor" href="#err_http2_stream_cancel" aria-label="Permalink to “ERR_HTTP2_STREAM_CANCEL”">​</a></h3><p><code>Http2Stream</code> は、接続されたピアにデータが送信される前に破棄されました。</p><h3 id="err_http2_stream_error" tabindex="-1"><code>ERR_HTTP2_STREAM_ERROR</code> <a class="header-anchor" href="#err_http2_stream_error" aria-label="Permalink to “ERR_HTTP2_STREAM_ERROR”">​</a></h3><p>ゼロ以外のエラーコードが <code>RST_STREAM</code> フレームで指定されました。</p><h3 id="err_http2_stream_self_dependency" tabindex="-1"><code>ERR_HTTP2_STREAM_SELF_DEPENDENCY</code> <a class="header-anchor" href="#err_http2_stream_self_dependency" aria-label="Permalink to “ERR_HTTP2_STREAM_SELF_DEPENDENCY”">​</a></h3><p>HTTP/2 ストリームの優先度を設定するときに、ストリームを親ストリームの依存関係としてマークできます。このエラーコードは、ストリームをそれ自体の依存関係としてマークしようとした場合に使用されます。</p><h3 id="err_http2_too_many_custom_settings" tabindex="-1"><code>ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS</code> <a class="header-anchor" href="#err_http2_too_many_custom_settings" aria-label="Permalink to “ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS”">​</a></h3><p>サポートされているカスタム設定の数 (10) を超えました。</p><h3 id="err_http2_too_many_invalid_frames" tabindex="-1"><code>ERR_HTTP2_TOO_MANY_INVALID_FRAMES</code> <a class="header-anchor" href="#err_http2_too_many_invalid_frames" aria-label="Permalink to “ERR_HTTP2_TOO_MANY_INVALID_FRAMES”">​</a></h3><p><strong>Added in: v15.14.0</strong></p><p><code>maxSessionInvalidFrames</code> オプションで指定された、ピアから送信された許容可能な無効な HTTP/2 プロトコルフレームの制限を超えました。</p><h3 id="err_http2_trailers_already_sent" tabindex="-1"><code>ERR_HTTP2_TRAILERS_ALREADY_SENT</code> <a class="header-anchor" href="#err_http2_trailers_already_sent" aria-label="Permalink to “ERR_HTTP2_TRAILERS_ALREADY_SENT”">​</a></h3><p>トレーリングヘッダーはすでに <code>Http2Stream</code> で送信されています。</p><h3 id="err_http2_trailers_not_ready" tabindex="-1"><code>ERR_HTTP2_TRAILERS_NOT_READY</code> <a class="header-anchor" href="#err_http2_trailers_not_ready" aria-label="Permalink to “ERR_HTTP2_TRAILERS_NOT_READY”">​</a></h3><p><code>http2stream.sendTrailers()</code> メソッドは、<code>Http2Stream</code> オブジェクトで <code>&#39;wantTrailers&#39;</code> イベントが発生するまで呼び出すことはできません。 <code>&#39;wantTrailers&#39;</code> イベントは、<code>Http2Stream</code> に対して <code>waitForTrailers</code> オプションが設定されている場合にのみ発生します。</p><h3 id="err_http2_unsupported_protocol" tabindex="-1"><code>ERR_HTTP2_UNSUPPORTED_PROTOCOL</code> <a class="header-anchor" href="#err_http2_unsupported_protocol" aria-label="Permalink to “ERR_HTTP2_UNSUPPORTED_PROTOCOL”">​</a></h3><p><code>http2.connect()</code> に、<code>http:</code> または <code>https:</code> 以外のプロトコルを使用する URL が渡されました。</p><h3 id="err_http_body_not_allowed" tabindex="-1"><code>ERR_HTTP_BODY_NOT_ALLOWED</code> <a class="header-anchor" href="#err_http_body_not_allowed" aria-label="Permalink to “ERR_HTTP_BODY_NOT_ALLOWED”">​</a></h3><p>コンテンツを許可しない HTTP レスポンスに書き込もうとしたときにエラーがスローされます。</p><h3 id="err_http_content_length_mismatch" tabindex="-1"><code>ERR_HTTP_CONTENT_LENGTH_MISMATCH</code> <a class="header-anchor" href="#err_http_content_length_mismatch" aria-label="Permalink to “ERR_HTTP_CONTENT_LENGTH_MISMATCH”">​</a></h3><p>レスポンスボディのサイズが、指定された content-length ヘッダーの値と一致しません。</p><h3 id="err_http_headers_sent" tabindex="-1"><code>ERR_HTTP_HEADERS_SENT</code> <a class="header-anchor" href="#err_http_headers_sent" aria-label="Permalink to “ERR_HTTP_HEADERS_SENT”">​</a></h3><p>ヘッダーがすでに送信された後に、さらにヘッダーを追加しようとしました。</p><h3 id="err_http_invalid_header_value" tabindex="-1"><code>ERR_HTTP_INVALID_HEADER_VALUE</code> <a class="header-anchor" href="#err_http_invalid_header_value" aria-label="Permalink to “ERR_HTTP_INVALID_HEADER_VALUE”">​</a></h3><p>無効な HTTP ヘッダー値が指定されました。</p><h3 id="err_http_invalid_status_code" tabindex="-1"><code>ERR_HTTP_INVALID_STATUS_CODE</code> <a class="header-anchor" href="#err_http_invalid_status_code" aria-label="Permalink to “ERR_HTTP_INVALID_STATUS_CODE”">​</a></h3><p>ステータスコードが通常のステータスコード範囲 (100-999) を超えています。</p><h3 id="err_http_request_timeout" tabindex="-1"><code>ERR_HTTP_REQUEST_TIMEOUT</code> <a class="header-anchor" href="#err_http_request_timeout" aria-label="Permalink to “ERR_HTTP_REQUEST_TIMEOUT”">​</a></h3><p>クライアントが、許可された時間内にリクエスト全体を送信しませんでした。</p><h3 id="err_http_socket_assigned" tabindex="-1"><code>ERR_HTTP_SOCKET_ASSIGNED</code> <a class="header-anchor" href="#err_http_socket_assigned" aria-label="Permalink to “ERR_HTTP_SOCKET_ASSIGNED”">​</a></h3><p>指定された <a href="/ja/nodejs/api/http#class-httpserverresponse"><code>ServerResponse</code></a> には、すでにソケットが割り当てられています。</p><h3 id="err_http_socket_encoding" tabindex="-1"><code>ERR_HTTP_SOCKET_ENCODING</code> <a class="header-anchor" href="#err_http_socket_encoding" aria-label="Permalink to “ERR_HTTP_SOCKET_ENCODING”">​</a></h3><p><a href="https://tools.ietf.org/html/rfc7230#section-3" target="_blank" rel="noreferrer">RFC 7230 Section 3</a> に基づき、ソケットエンコーディングの変更は許可されていません。</p><h3 id="err_http_trailer_invalid" tabindex="-1"><code>ERR_HTTP_TRAILER_INVALID</code> <a class="header-anchor" href="#err_http_trailer_invalid" aria-label="Permalink to “ERR_HTTP_TRAILER_INVALID”">​</a></h3><p>転送エンコーディングがそれをサポートしていないにもかかわらず、<code>Trailer</code> ヘッダーが設定されました。</p><h3 id="err_illegal_constructor" tabindex="-1"><code>ERR_ILLEGAL_CONSTRUCTOR</code> <a class="header-anchor" href="#err_illegal_constructor" aria-label="Permalink to “ERR_ILLEGAL_CONSTRUCTOR”">​</a></h3><p>非公開コンストラクターを使用してオブジェクトを構築しようとしました。</p><h3 id="err_import_attribute_missing" tabindex="-1"><code>ERR_IMPORT_ATTRIBUTE_MISSING</code> <a class="header-anchor" href="#err_import_attribute_missing" aria-label="Permalink to “ERR_IMPORT_ATTRIBUTE_MISSING”">​</a></h3><p><strong>Added in: v21.1.0</strong></p><p>インポート属性が欠落しているため、指定されたモジュールをインポートできません。</p><h3 id="err_import_attribute_type_incompatible" tabindex="-1"><code>ERR_IMPORT_ATTRIBUTE_TYPE_INCOMPATIBLE</code> <a class="header-anchor" href="#err_import_attribute_type_incompatible" aria-label="Permalink to “ERR_IMPORT_ATTRIBUTE_TYPE_INCOMPATIBLE”">​</a></h3><p><strong>Added in: v21.1.0</strong></p><p>インポートの <code>type</code> 属性が指定されましたが、指定されたモジュールのタイプが異なっています。</p><h3 id="err_import_attribute_unsupported" tabindex="-1"><code>ERR_IMPORT_ATTRIBUTE_UNSUPPORTED</code> <a class="header-anchor" href="#err_import_attribute_unsupported" aria-label="Permalink to “ERR_IMPORT_ATTRIBUTE_UNSUPPORTED”">​</a></h3><p><strong>Added in: v21.0.0, v20.10.0, v18.19.0</strong></p><p>インポート属性は、このバージョンの Node.js ではサポートされていません。</p><h3 id="err_incompatible_option_pair" tabindex="-1"><code>ERR_INCOMPATIBLE_OPTION_PAIR</code> <a class="header-anchor" href="#err_incompatible_option_pair" aria-label="Permalink to “ERR_INCOMPATIBLE_OPTION_PAIR”">​</a></h3><p>オプションの組み合わせに互換性がなく、同時に使用できません。</p><h3 id="err_input_type_not_allowed" tabindex="-1"><code>ERR_INPUT_TYPE_NOT_ALLOWED</code> <a class="header-anchor" href="#err_input_type_not_allowed" aria-label="Permalink to “ERR_INPUT_TYPE_NOT_ALLOWED”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 試験的</p></div><p><code>--input-type</code> フラグがファイルをを実行するために使用されました。このフラグは <code>--eval</code>、<code>--print</code>、または <code>STDIN</code> を介した入力でのみ使用できます。</p><h3 id="err_inspector_already_activated" tabindex="-1"><code>ERR_INSPECTOR_ALREADY_ACTIVATED</code> <a class="header-anchor" href="#err_inspector_already_activated" aria-label="Permalink to “ERR_INSPECTOR_ALREADY_ACTIVATED”">​</a></h3><p><code>node:inspector</code> モジュールを使用しているときに、インスペクターがポートで既にリッスンを開始しているときにアクティブ化しようとしました。別のアドレスでアクティブ化する前に、<code>inspector.close()</code> を使用してください。</p><h3 id="err_inspector_already_connected" tabindex="-1"><code>ERR_INSPECTOR_ALREADY_CONNECTED</code> <a class="header-anchor" href="#err_inspector_already_connected" aria-label="Permalink to “ERR_INSPECTOR_ALREADY_CONNECTED”">​</a></h3><p><code>node:inspector</code> モジュールを使用しているときに、インスペクターが既に接続されているときに接続しようとしました。</p><h3 id="err_inspector_closed" tabindex="-1"><code>ERR_INSPECTOR_CLOSED</code> <a class="header-anchor" href="#err_inspector_closed" aria-label="Permalink to “ERR_INSPECTOR_CLOSED”">​</a></h3><p><code>node:inspector</code> モジュールを使用しているときに、セッションが既に閉じられた後にインスペクターを使用しようとしました。</p><h3 id="err_inspector_command" tabindex="-1"><code>ERR_INSPECTOR_COMMAND</code> <a class="header-anchor" href="#err_inspector_command" aria-label="Permalink to “ERR_INSPECTOR_COMMAND”">​</a></h3><p><code>node:inspector</code> モジュールを介してコマンドを発行中にエラーが発生しました。</p><h3 id="err_inspector_not_active" tabindex="-1"><code>ERR_INSPECTOR_NOT_ACTIVE</code> <a class="header-anchor" href="#err_inspector_not_active" aria-label="Permalink to “ERR_INSPECTOR_NOT_ACTIVE”">​</a></h3><p><code>inspector.waitForDebugger()</code> が呼び出されたときに、<code>inspector</code> がアクティブではありません。</p><h3 id="err_inspector_not_available" tabindex="-1"><code>ERR_INSPECTOR_NOT_AVAILABLE</code> <a class="header-anchor" href="#err_inspector_not_available" aria-label="Permalink to “ERR_INSPECTOR_NOT_AVAILABLE”">​</a></h3><p><code>node:inspector</code> モジュールは使用できません。</p><h3 id="err_inspector_not_connected" tabindex="-1"><code>ERR_INSPECTOR_NOT_CONNECTED</code> <a class="header-anchor" href="#err_inspector_not_connected" aria-label="Permalink to “ERR_INSPECTOR_NOT_CONNECTED”">​</a></h3><p><code>node:inspector</code> モジュールを使用しているときに、接続される前にインスペクターを使用しようとしました。</p><h3 id="err_inspector_not_worker" tabindex="-1"><code>ERR_INSPECTOR_NOT_WORKER</code> <a class="header-anchor" href="#err_inspector_not_worker" aria-label="Permalink to “ERR_INSPECTOR_NOT_WORKER”">​</a></h3><p>ワーカー スレッドからのみ使用できる API が、メイン スレッドで呼び出されました。</p><h3 id="err_internal_assertion" tabindex="-1"><code>ERR_INTERNAL_ASSERTION</code> <a class="header-anchor" href="#err_internal_assertion" aria-label="Permalink to “ERR_INTERNAL_ASSERTION”">​</a></h3><p>Node.js にバグがあるか、Node.js の内部構造の誤った使用方法がありました。エラーを修正するには、<a href="https://github.com/nodejs/node/issues" target="_blank" rel="noreferrer">https://github.com/nodejs/node/issues</a> で問題を報告してください。</p><h3 id="err_invalid_address" tabindex="-1"><code>ERR_INVALID_ADDRESS</code> <a class="header-anchor" href="#err_invalid_address" aria-label="Permalink to “ERR_INVALID_ADDRESS”">​</a></h3><p>指定されたアドレスは、Node.js API によって理解されません。</p><h3 id="err_invalid_address_family" tabindex="-1"><code>ERR_INVALID_ADDRESS_FAMILY</code> <a class="header-anchor" href="#err_invalid_address_family" aria-label="Permalink to “ERR_INVALID_ADDRESS_FAMILY”">​</a></h3><p>指定されたアドレスファミリは、Node.js API によって理解されません。</p><h3 id="err_invalid_arg_type" tabindex="-1"><code>ERR_INVALID_ARG_TYPE</code> <a class="header-anchor" href="#err_invalid_arg_type" aria-label="Permalink to “ERR_INVALID_ARG_TYPE”">​</a></h3><p>誤った型の引数が Node.js API に渡されました。</p><h3 id="err_invalid_arg_value" tabindex="-1"><code>ERR_INVALID_ARG_VALUE</code> <a class="header-anchor" href="#err_invalid_arg_value" aria-label="Permalink to “ERR_INVALID_ARG_VALUE”">​</a></h3><p>無効またはサポートされていない値が、指定された引数に渡されました。</p><h3 id="err_invalid_async_id" tabindex="-1"><code>ERR_INVALID_ASYNC_ID</code> <a class="header-anchor" href="#err_invalid_async_id" aria-label="Permalink to “ERR_INVALID_ASYNC_ID”">​</a></h3><p>無効な <code>asyncId</code> または <code>triggerAsyncId</code> が <code>AsyncHooks</code> を使用して渡されました。 -1 未満の ID が発生することはありません。</p><h3 id="err_invalid_buffer_size" tabindex="-1"><code>ERR_INVALID_BUFFER_SIZE</code> <a class="header-anchor" href="#err_invalid_buffer_size" aria-label="Permalink to “ERR_INVALID_BUFFER_SIZE”">​</a></h3><p><code>Buffer</code> に対してスワップが実行されましたが、そのサイズは操作と互換性がありませんでした。</p><h3 id="err_invalid_char" tabindex="-1"><code>ERR_INVALID_CHAR</code> <a class="header-anchor" href="#err_invalid_char" aria-label="Permalink to “ERR_INVALID_CHAR”">​</a></h3><p>ヘッダーで無効な文字が検出されました。</p><h3 id="err_invalid_cursor_pos" tabindex="-1"><code>ERR_INVALID_CURSOR_POS</code> <a class="header-anchor" href="#err_invalid_cursor_pos" aria-label="Permalink to “ERR_INVALID_CURSOR_POS”">​</a></h3><p>指定されたストリーム上のカーソルは、指定された列なしに、指定された行に移動できません。</p><h3 id="err_invalid_fd" tabindex="-1"><code>ERR_INVALID_FD</code> <a class="header-anchor" href="#err_invalid_fd" aria-label="Permalink to “ERR_INVALID_FD”">​</a></h3><p>ファイル記述子 (&#39;fd&#39;) が無効でした (たとえば、負の値でした)。</p><h3 id="err_invalid_fd_type" tabindex="-1"><code>ERR_INVALID_FD_TYPE</code> <a class="header-anchor" href="#err_invalid_fd_type" aria-label="Permalink to “ERR_INVALID_FD_TYPE”">​</a></h3><p>ファイル記述子 (&#39;fd&#39;) の型が無効でした。</p><h3 id="err_invalid_file_url_host" tabindex="-1"><code>ERR_INVALID_FILE_URL_HOST</code> <a class="header-anchor" href="#err_invalid_file_url_host" aria-label="Permalink to “ERR_INVALID_FILE_URL_HOST”">​</a></h3><p><code>file:</code> URL を消費する Node.js API (たとえば、<a href="/ja/nodejs/api/fs"><code>fs</code></a> モジュールの特定の関数) が、互換性のないホストを持つファイル URL を検出しました。 この状況は、<code>localhost</code> または空のホストのみがサポートされている Unix 系システムでのみ発生する可能性があります。</p><h3 id="err_invalid_file_url_path" tabindex="-1"><code>ERR_INVALID_FILE_URL_PATH</code> <a class="header-anchor" href="#err_invalid_file_url_path" aria-label="Permalink to “ERR_INVALID_FILE_URL_PATH”">​</a></h3><p><code>file:</code> URL を消費する Node.js API (たとえば、<a href="/ja/nodejs/api/fs"><code>fs</code></a> モジュールの特定の関数) が、互換性のないパスを持つファイル URL を検出しました。 パスを使用できるかどうかを判断するための正確なセマンティクスは、プラットフォームに依存します。</p><h3 id="err_invalid_handle_type" tabindex="-1"><code>ERR_INVALID_HANDLE_TYPE</code> <a class="header-anchor" href="#err_invalid_handle_type" aria-label="Permalink to “ERR_INVALID_HANDLE_TYPE”">​</a></h3><p>サポートされていない「ハンドル」を、IPC 通信チャネル経由で子プロセスに送信しようとしました。 詳細については、<a href="/ja/nodejs/api/child_process#subprocesssendmessage-sendhandle-options-callback"><code>subprocess.send()</code></a> および <a href="/ja/nodejs/api/process#processsendmessage-sendhandle-options-callback"><code>process.send()</code></a> を参照してください。</p><h3 id="err_invalid_http_token" tabindex="-1"><code>ERR_INVALID_HTTP_TOKEN</code> <a class="header-anchor" href="#err_invalid_http_token" aria-label="Permalink to “ERR_INVALID_HTTP_TOKEN”">​</a></h3><p>無効な HTTP トークンが提供されました。</p><h3 id="err_invalid_ip_address" tabindex="-1"><code>ERR_INVALID_IP_ADDRESS</code> <a class="header-anchor" href="#err_invalid_ip_address" aria-label="Permalink to “ERR_INVALID_IP_ADDRESS”">​</a></h3><p>IP アドレスが無効です。</p><h3 id="err_invalid_mime_syntax" tabindex="-1"><code>ERR_INVALID_MIME_SYNTAX</code> <a class="header-anchor" href="#err_invalid_mime_syntax" aria-label="Permalink to “ERR_INVALID_MIME_SYNTAX”">​</a></h3><p>MIME の構文が無効です。</p><h3 id="err_invalid_module" tabindex="-1"><code>ERR_INVALID_MODULE</code> <a class="header-anchor" href="#err_invalid_module" aria-label="Permalink to “ERR_INVALID_MODULE”">​</a></h3><p><strong>追加: v15.0.0, v14.18.0</strong></p><p>存在しないか、他の点で無効なモジュールをロードしようとしました。</p><h3 id="err_invalid_module_specifier" tabindex="-1"><code>ERR_INVALID_MODULE_SPECIFIER</code> <a class="header-anchor" href="#err_invalid_module_specifier" aria-label="Permalink to “ERR_INVALID_MODULE_SPECIFIER”">​</a></h3><p>インポートされたモジュール文字列が無効な URL、パッケージ名、またはパッケージのサブパス指定子です。</p><h3 id="err_invalid_object_define_property" tabindex="-1"><code>ERR_INVALID_OBJECT_DEFINE_PROPERTY</code> <a class="header-anchor" href="#err_invalid_object_define_property" aria-label="Permalink to “ERR_INVALID_OBJECT_DEFINE_PROPERTY”">​</a></h3><p>オブジェクトのプロパティに無効な属性を設定中にエラーが発生しました。</p><h3 id="err_invalid_package_config" tabindex="-1"><code>ERR_INVALID_PACKAGE_CONFIG</code> <a class="header-anchor" href="#err_invalid_package_config" aria-label="Permalink to “ERR_INVALID_PACKAGE_CONFIG”">​</a></h3><p>無効な <a href="/ja/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> ファイルの解析に失敗しました。</p><h3 id="err_invalid_package_target" tabindex="-1"><code>ERR_INVALID_PACKAGE_TARGET</code> <a class="header-anchor" href="#err_invalid_package_target" aria-label="Permalink to “ERR_INVALID_PACKAGE_TARGET”">​</a></h3><p><code>package.json</code> の <a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドに、試行されたモジュール解決に対して無効なターゲットマッピング値が含まれています。</p><h3 id="err_invalid_protocol" tabindex="-1"><code>ERR_INVALID_PROTOCOL</code> <a class="header-anchor" href="#err_invalid_protocol" aria-label="Permalink to “ERR_INVALID_PROTOCOL”">​</a></h3><p>無効な <code>options.protocol</code> が <code>http.request()</code> に渡されました。</p><h3 id="err_invalid_repl_eval_config" tabindex="-1"><code>ERR_INVALID_REPL_EVAL_CONFIG</code> <a class="header-anchor" href="#err_invalid_repl_eval_config" aria-label="Permalink to “ERR_INVALID_REPL_EVAL_CONFIG”">​</a></h3><p><a href="/ja/nodejs/api/repl"><code>REPL</code></a> 構成で <code>breakEvalOnSigint</code> オプションと <code>eval</code> オプションの両方が設定されていますが、これはサポートされていません。</p><h3 id="err_invalid_repl_input" tabindex="-1"><code>ERR_INVALID_REPL_INPUT</code> <a class="header-anchor" href="#err_invalid_repl_input" aria-label="Permalink to “ERR_INVALID_REPL_INPUT”">​</a></h3><p>入力は <a href="/ja/nodejs/api/repl"><code>REPL</code></a> で使用できません。 このエラーが使用される条件は、<a href="/ja/nodejs/api/repl"><code>REPL</code></a> ドキュメントに記載されています。</p><h3 id="err_invalid_return_property" tabindex="-1"><code>ERR_INVALID_RETURN_PROPERTY</code> <a class="header-anchor" href="#err_invalid_return_property" aria-label="Permalink to “ERR_INVALID_RETURN_PROPERTY”">​</a></h3><p>関数オプションが、実行時に返されるオブジェクトのプロパティのいずれかに有効な値を提供しない場合にスローされます。</p><h3 id="err_invalid_return_property_value" tabindex="-1"><code>ERR_INVALID_RETURN_PROPERTY_VALUE</code> <a class="header-anchor" href="#err_invalid_return_property_value" aria-label="Permalink to “ERR_INVALID_RETURN_PROPERTY_VALUE”">​</a></h3><p>関数オプションが、実行時に返されるオブジェクトのプロパティのいずれかに予期される値の型を提供しない場合にスローされます。</p><h3 id="err_invalid_return_value" tabindex="-1"><code>ERR_INVALID_RETURN_VALUE</code> <a class="header-anchor" href="#err_invalid_return_value" aria-label="Permalink to “ERR_INVALID_RETURN_VALUE”">​</a></h3><p>関数オプションが、関数が promise を返すことが期待される場合など、実行時に予期される値の型を返さない場合にスローされます。</p><h3 id="err_invalid_state" tabindex="-1"><code>ERR_INVALID_STATE</code> <a class="header-anchor" href="#err_invalid_state" aria-label="Permalink to “ERR_INVALID_STATE”">​</a></h3><p><strong>追加: v15.0.0</strong></p><p>無効な状態のために操作を完了できないことを示します。 たとえば、オブジェクトがすでに破棄されているか、別の操作を実行している可能性があります。</p><h3 id="err_invalid_sync_fork_input" tabindex="-1"><code>ERR_INVALID_SYNC_FORK_INPUT</code> <a class="header-anchor" href="#err_invalid_sync_fork_input" aria-label="Permalink to “ERR_INVALID_SYNC_FORK_INPUT”">​</a></h3><p><code>Buffer</code>、<code>TypedArray</code>、<code>DataView</code>、または <code>string</code> が、非同期フォークへの stdio 入力として提供されました。 詳細については、<a href="/ja/nodejs/api/child_process"><code>child_process</code></a> モジュールのドキュメントを参照してください。</p><h3 id="err_invalid_this" tabindex="-1"><code>ERR_INVALID_THIS</code> <a class="header-anchor" href="#err_invalid_this" aria-label="Permalink to “ERR_INVALID_THIS”">​</a></h3><p>Node.js API 関数が、互換性のない <code>this</code> 値で呼び出されました。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> urlSearchParams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URLSearchParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo=bar&amp;baz=new&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urlSearchParams.has.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;ERR_INVALID_THIS&#39; コードで TypeError をスローします。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="err_invalid_tuple" tabindex="-1"><code>ERR_INVALID_TUPLE</code> <a class="header-anchor" href="#err_invalid_tuple" aria-label="Permalink to “ERR_INVALID_TUPLE”">​</a></h3><p><a href="/ja/nodejs/api/url#the-whatwg-url-api">WHATWG</a> の <a href="/ja/nodejs/api/url#new-urlsearchparamsiterable"><code>URLSearchParams</code> コンストラクタ</a> に提供された <code>iterable</code> 内の要素が <code>[name, value]</code> タプルを表していません。つまり、要素が iterable でないか、または正確に 2 つの要素で構成されていません。</p><h3 id="err_invalid_typescript_syntax" tabindex="-1"><code>ERR_INVALID_TYPESCRIPT_SYNTAX</code> <a class="header-anchor" href="#err_invalid_typescript_syntax" aria-label="Permalink to “ERR_INVALID_TYPESCRIPT_SYNTAX”">​</a></h3><p><strong>Added in: v23.0.0</strong></p><p>提供された TypeScript 構文が無効であるか、サポートされていません。 これは、<a href="/ja/nodejs/api/typescript#type-stripping">型除去</a>による変換を必要とする TypeScript 構文を使用する場合に発生する可能性があります。</p><h3 id="err_invalid_uri" tabindex="-1"><code>ERR_INVALID_URI</code> <a class="header-anchor" href="#err_invalid_uri" aria-label="Permalink to “ERR_INVALID_URI”">​</a></h3><p>無効な URI が渡されました。</p><h3 id="err_invalid_url" tabindex="-1"><code>ERR_INVALID_URL</code> <a class="header-anchor" href="#err_invalid_url" aria-label="Permalink to “ERR_INVALID_URL”">​</a></h3><p>無効な URL が <a href="/ja/nodejs/api/url#the-whatwg-url-api">WHATWG</a> の <a href="/ja/nodejs/api/url#new-urlinput-base"><code>URL</code> コンストラクタ</a> またはレガシーな <a href="/ja/nodejs/api/url#urlparseurlstring-parsequerystring-slashesdenotehost"><code>url.parse()</code></a> に渡され、パースされようとしました。 スローされたエラーオブジェクトは通常、パースに失敗した URL を含む追加のプロパティ <code>&#39;input&#39;</code> を持っています。</p><h3 id="err_invalid_url_scheme" tabindex="-1"><code>ERR_INVALID_URL_SCHEME</code> <a class="header-anchor" href="#err_invalid_url_scheme" aria-label="Permalink to “ERR_INVALID_URL_SCHEME”">​</a></h3><p>特定の目的のために、互換性のないスキーム（プロトコル）の URL を使用しようとしました。 これは、<a href="/ja/nodejs/api/fs"><code>fs</code></a> モジュール（<code>&#39;file&#39;</code> スキームの URL のみを受け入れます）の <a href="/ja/nodejs/api/url#the-whatwg-url-api">WHATWG URL API</a> サポートでのみ使用されますが、将来的には他の Node.js API でも使用される可能性があります。</p><h3 id="err_ipc_channel_closed" tabindex="-1"><code>ERR_IPC_CHANNEL_CLOSED</code> <a class="header-anchor" href="#err_ipc_channel_closed" aria-label="Permalink to “ERR_IPC_CHANNEL_CLOSED”">​</a></h3><p>すでに閉じられている IPC 通信チャネルを使用しようとしました。</p><h3 id="err_ipc_disconnected" tabindex="-1"><code>ERR_IPC_DISCONNECTED</code> <a class="header-anchor" href="#err_ipc_disconnected" aria-label="Permalink to “ERR_IPC_DISCONNECTED”">​</a></h3><p>すでに切断されている IPC 通信チャネルを切断しようとしました。 詳しくは、<a href="/ja/nodejs/api/child_process"><code>child_process</code></a> モジュールのドキュメントをご覧ください。</p><h3 id="err_ipc_one_pipe" tabindex="-1"><code>ERR_IPC_ONE_PIPE</code> <a class="header-anchor" href="#err_ipc_one_pipe" aria-label="Permalink to “ERR_IPC_ONE_PIPE”">​</a></h3><p>複数の IPC 通信チャネルを使用して子 Node.js プロセスを作成しようとしました。 詳しくは、<a href="/ja/nodejs/api/child_process"><code>child_process</code></a> モジュールのドキュメントをご覧ください。</p><h3 id="err_ipc_sync_fork" tabindex="-1"><code>ERR_IPC_SYNC_FORK</code> <a class="header-anchor" href="#err_ipc_sync_fork" aria-label="Permalink to “ERR_IPC_SYNC_FORK”">​</a></h3><p>同期的にフォークされたNode.jsプロセスとの間でIPC通信チャネルを開こうとしました。詳細については、<a href="/ja/nodejs/api/child_process"><code>child_process</code></a>モジュールのドキュメントを参照してください。</p><h3 id="err_ip_blocked" tabindex="-1"><code>ERR_IP_BLOCKED</code> <a class="header-anchor" href="#err_ip_blocked" aria-label="Permalink to “ERR_IP_BLOCKED”">​</a></h3><p>IPは<code>net.BlockList</code>によってブロックされています。</p><h3 id="err_loader_chain_incomplete" tabindex="-1"><code>ERR_LOADER_CHAIN_INCOMPLETE</code> <a class="header-anchor" href="#err_loader_chain_incomplete" aria-label="Permalink to “ERR_LOADER_CHAIN_INCOMPLETE”">​</a></h3><p><strong>Added in: v18.6.0, v16.17.0</strong></p><p>ESMローダーフックが<code>next()</code>を呼び出さずに、また明示的にショートサーキットを通知せずに戻りました。</p><h3 id="err_load_sqlite_extension" tabindex="-1"><code>ERR_LOAD_SQLITE_EXTENSION</code> <a class="header-anchor" href="#err_load_sqlite_extension" aria-label="Permalink to “ERR_LOAD_SQLITE_EXTENSION”">​</a></h3><p><strong>Added in: v23.5.0</strong></p><p>SQLite拡張機能のロード中にエラーが発生しました。</p><h3 id="err_memory_allocation_failed" tabindex="-1"><code>ERR_MEMORY_ALLOCATION_FAILED</code> <a class="header-anchor" href="#err_memory_allocation_failed" aria-label="Permalink to “ERR_MEMORY_ALLOCATION_FAILED”">​</a></h3><p>メモリを割り当てようとしましたが（通常はC++レイヤーで）、失敗しました。</p><h3 id="err_message_target_context_unavailable" tabindex="-1"><code>ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE</code> <a class="header-anchor" href="#err_message_target_context_unavailable" aria-label="Permalink to “ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE”">​</a></h3><p><strong>Added in: v14.5.0, v12.19.0</strong></p><p><a href="/ja/nodejs/api/worker_threads#class-messageport"><code>MessagePort</code></a>に投稿されたメッセージを、ターゲット<a href="/ja/nodejs/api/vm">vm</a><code>Context</code>でデシリアライズできませんでした。現時点では、すべてのNode.jsオブジェクトを任意のコンテキストで正常にインスタンス化できるわけではなく、<code>postMessage()</code>を使用して転送しようとすると、受信側で失敗する可能性があります。</p><h3 id="err_method_not_implemented" tabindex="-1"><code>ERR_METHOD_NOT_IMPLEMENTED</code> <a class="header-anchor" href="#err_method_not_implemented" aria-label="Permalink to “ERR_METHOD_NOT_IMPLEMENTED”">​</a></h3><p>メソッドが必要ですが、実装されていません。</p><h3 id="err_missing_args" tabindex="-1"><code>ERR_MISSING_ARGS</code> <a class="header-anchor" href="#err_missing_args" aria-label="Permalink to “ERR_MISSING_ARGS”">​</a></h3><p>Node.js APIの必須引数が渡されませんでした。これは、API仕様への厳密な準拠のためにのみ使用されます（場合によっては<code>func(undefined)</code>は受け入れますが、<code>func()</code>は受け入れない場合があります）。ほとんどのネイティブNode.js APIでは、<code>func(undefined)</code>と<code>func()</code>は同じように扱われ、代わりに<a href="/ja/nodejs/api/errors#err-invalid-arg-type"><code>ERR_INVALID_ARG_TYPE</code></a>エラーコードが使用される場合があります。</p><h3 id="err_missing_option" tabindex="-1"><code>ERR_MISSING_OPTION</code> <a class="header-anchor" href="#err_missing_option" aria-label="Permalink to “ERR_MISSING_OPTION”">​</a></h3><p>オプションオブジェクトを受け入れるAPIの場合、いくつかのオプションは必須である可能性があります。必須オプションがない場合、このコードがスローされます。</p><h3 id="err_missing_passphrase" tabindex="-1"><code>ERR_MISSING_PASSPHRASE</code> <a class="header-anchor" href="#err_missing_passphrase" aria-label="Permalink to “ERR_MISSING_PASSPHRASE”">​</a></h3><p>パスフレーズを指定せずに暗号化されたキーを読み取ろうとしました。</p><h3 id="err_missing_platform_for_worker" tabindex="-1"><code>ERR_MISSING_PLATFORM_FOR_WORKER</code> <a class="header-anchor" href="#err_missing_platform_for_worker" aria-label="Permalink to “ERR_MISSING_PLATFORM_FOR_WORKER”">​</a></h3><p>このNode.jsインスタンスで使用されているV8プラットフォームは、Workerの作成をサポートしていません。これは、Workerに対する埋め込み側のサポートが不足していることが原因です。特に、このエラーはNode.jsの標準ビルドでは発生しません。</p><h3 id="err_module_not_found" tabindex="-1"><code>ERR_MODULE_NOT_FOUND</code> <a class="header-anchor" href="#err_module_not_found" aria-label="Permalink to “ERR_MODULE_NOT_FOUND”">​</a></h3><p><code>import</code> 操作の試行時またはプログラムのエントリポイントのロード時に、ECMAScript モジュールローダーがモジュールファイルを解決できませんでした。</p><h3 id="err_multiple_callback" tabindex="-1"><code>ERR_MULTIPLE_CALLBACK</code> <a class="header-anchor" href="#err_multiple_callback" aria-label="Permalink to “ERR_MULTIPLE_CALLBACK”">​</a></h3><p>コールバックが複数回呼び出されました。</p><p>コールバックは、クエリが満たされるか拒否されるかのいずれかであり、同時に両方ではないため、ほぼ常に一度だけ呼び出されることを意図しています。後者は、コールバックを複数回呼び出すことによって可能になります。</p><h3 id="err_napi_cons_function" tabindex="-1"><code>ERR_NAPI_CONS_FUNCTION</code> <a class="header-anchor" href="#err_napi_cons_function" aria-label="Permalink to “ERR_NAPI_CONS_FUNCTION”">​</a></h3><p><code>Node-API</code> を使用中に、渡されたコンストラクターが関数ではありませんでした。</p><h3 id="err_napi_invalid_dataview_args" tabindex="-1"><code>ERR_NAPI_INVALID_DATAVIEW_ARGS</code> <a class="header-anchor" href="#err_napi_invalid_dataview_args" aria-label="Permalink to “ERR_NAPI_INVALID_DATAVIEW_ARGS”">​</a></h3><p><code>napi_create_dataview()</code> の呼び出し中に、指定された <code>offset</code> がデータビューの範囲外にあるか、<code>offset + length</code> が指定された <code>buffer</code> の長さよりも大きくなっています。</p><h3 id="err_napi_invalid_typedarray_alignment" tabindex="-1"><code>ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT</code> <a class="header-anchor" href="#err_napi_invalid_typedarray_alignment" aria-label="Permalink to “ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT”">​</a></h3><p><code>napi_create_typedarray()</code> の呼び出し中に、指定された <code>offset</code> が要素サイズの倍数ではありませんでした。</p><h3 id="err_napi_invalid_typedarray_length" tabindex="-1"><code>ERR_NAPI_INVALID_TYPEDARRAY_LENGTH</code> <a class="header-anchor" href="#err_napi_invalid_typedarray_length" aria-label="Permalink to “ERR_NAPI_INVALID_TYPEDARRAY_LENGTH”">​</a></h3><p><code>napi_create_typedarray()</code> の呼び出し中に、<code>(length * size_of_element) + byte_offset</code> が指定された <code>buffer</code> の長さよりも大きくなっています。</p><h3 id="err_napi_tsfn_call_js" tabindex="-1"><code>ERR_NAPI_TSFN_CALL_JS</code> <a class="header-anchor" href="#err_napi_tsfn_call_js" aria-label="Permalink to “ERR_NAPI_TSFN_CALL_JS”">​</a></h3><p>スレッドセーフ関数の JavaScript 部分を呼び出すときにエラーが発生しました。</p><h3 id="err_napi_tsfn_get_undefined" tabindex="-1"><code>ERR_NAPI_TSFN_GET_UNDEFINED</code> <a class="header-anchor" href="#err_napi_tsfn_get_undefined" aria-label="Permalink to “ERR_NAPI_TSFN_GET_UNDEFINED”">​</a></h3><p>JavaScript の <code>undefined</code> 値を取得しようとしたときにエラーが発生しました。</p><h3 id="err_non_context_aware_disabled" tabindex="-1"><code>ERR_NON_CONTEXT_AWARE_DISABLED</code> <a class="header-anchor" href="#err_non_context_aware_disabled" aria-label="Permalink to “ERR_NON_CONTEXT_AWARE_DISABLED”">​</a></h3><p>非コンテキスト対応のネイティブアドオンが、それを許可しないプロセスでロードされました。</p><h3 id="err_not_building_snapshot" tabindex="-1"><code>ERR_NOT_BUILDING_SNAPSHOT</code> <a class="header-anchor" href="#err_not_building_snapshot" aria-label="Permalink to “ERR_NOT_BUILDING_SNAPSHOT”">​</a></h3><p>Node.js が V8 スタートアップスナップショットを作成していないにもかかわらず、スナップショットの作成時にのみ使用できる操作を使用しようとしました。</p><h3 id="err_not_in_single_executable_application" tabindex="-1"><code>ERR_NOT_IN_SINGLE_EXECUTABLE_APPLICATION</code> <a class="header-anchor" href="#err_not_in_single_executable_application" aria-label="Permalink to “ERR_NOT_IN_SINGLE_EXECUTABLE_APPLICATION”">​</a></h3><p><strong>追加:</strong> v21.7.0, v20.12.0</p><p>シングル実行可能アプリケーション内ではない場合、操作は実行できません。</p><h3 id="err_not_supported_in_snapshot" tabindex="-1"><code>ERR_NOT_SUPPORTED_IN_SNAPSHOT</code> <a class="header-anchor" href="#err_not_supported_in_snapshot" aria-label="Permalink to “ERR_NOT_SUPPORTED_IN_SNAPSHOT”">​</a></h3><p>スタートアップスナップショットの作成時にサポートされていない操作を実行しようとしました。</p><h3 id="err_no_crypto" tabindex="-1"><code>ERR_NO_CRYPTO</code> <a class="header-anchor" href="#err_no_crypto" aria-label="Permalink to “ERR_NO_CRYPTO”">​</a></h3><p>Node.js が OpenSSL 暗号化サポートなしでコンパイルされているときに、暗号化機能を使用しようとしました。</p><h3 id="err_no_icu" tabindex="-1"><code>ERR_NO_ICU</code> <a class="header-anchor" href="#err_no_icu" aria-label="Permalink to “ERR_NO_ICU”">​</a></h3><p><a href="/ja/nodejs/api/intl#internationalization-support">ICU</a> を必要とする機能を使用しようとしましたが、Node.js は ICU サポート付きでコンパイルされていません。</p><h3 id="err_no_typescript" tabindex="-1"><code>ERR_NO_TYPESCRIPT</code> <a class="header-anchor" href="#err_no_typescript" aria-label="Permalink to “ERR_NO_TYPESCRIPT”">​</a></h3><p><strong>追加:</strong> v23.0.0</p><p><a href="/ja/nodejs/api/typescript#type-stripping">ネイティブ TypeScript サポート</a> を必要とする機能を使用しようとしましたが、Node.js は TypeScript サポート付きでコンパイルされていません。</p><h3 id="err_operation_failed" tabindex="-1"><code>ERR_OPERATION_FAILED</code> <a class="header-anchor" href="#err_operation_failed" aria-label="Permalink to “ERR_OPERATION_FAILED”">​</a></h3><p><strong>追加:</strong> v15.0.0</p><p>操作が失敗しました。 これは通常、非同期操作の一般的な失敗を示すために使用されます。</p><h3 id="err_out_of_range" tabindex="-1"><code>ERR_OUT_OF_RANGE</code> <a class="header-anchor" href="#err_out_of_range" aria-label="Permalink to “ERR_OUT_OF_RANGE”">​</a></h3><p>指定された値が許容範囲外です。</p><h3 id="err_package_import_not_defined" tabindex="-1"><code>ERR_PACKAGE_IMPORT_NOT_DEFINED</code> <a class="header-anchor" href="#err_package_import_not_defined" aria-label="Permalink to “ERR_PACKAGE_IMPORT_NOT_DEFINED”">​</a></h3><p><code>package.json</code> の <a href="/ja/nodejs/api/packages#imports"><code>&quot;imports&quot;</code></a> フィールドに、指定された内部パッケージ指定子のマッピングが定義されていません。</p><h3 id="err_package_path_not_exported" tabindex="-1"><code>ERR_PACKAGE_PATH_NOT_EXPORTED</code> <a class="header-anchor" href="#err_package_path_not_exported" aria-label="Permalink to “ERR_PACKAGE_PATH_NOT_EXPORTED”">​</a></h3><p><code>package.json</code> の <a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドが、要求されたサブパスをエクスポートしていません。 エクスポートはカプセル化されているため、エクスポートされていないプライベート内部モジュールは、絶対 URL を使用しない限り、パッケージ解決を介してインポートできません。</p><h3 id="err_parse_args_invalid_option_value" tabindex="-1"><code>ERR_PARSE_ARGS_INVALID_OPTION_VALUE</code> <a class="header-anchor" href="#err_parse_args_invalid_option_value" aria-label="Permalink to “ERR_PARSE_ARGS_INVALID_OPTION_VALUE”">​</a></h3><p><strong>追加:</strong> v18.3.0, v16.17.0</p><p><code>strict</code> が <code>true</code> に設定されている場合、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 型のオプションに<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 値が指定された場合、または<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 型のオプションに<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 値が指定された場合に、<a href="/ja/nodejs/api/util#utilparseargsconfig"><code>util.parseArgs()</code></a> によってスローされます。</p><h3 id="err_parse_args_unexpected_positional" tabindex="-1"><code>ERR_PARSE_ARGS_UNEXPECTED_POSITIONAL</code> <a class="header-anchor" href="#err_parse_args_unexpected_positional" aria-label="Permalink to “ERR_PARSE_ARGS_UNEXPECTED_POSITIONAL”">​</a></h3><p><strong>追加:</strong> v18.3.0, v16.17.0</p><p>位置引数が指定され、<code>allowPositionals</code> が <code>false</code> に設定されている場合に、<a href="/ja/nodejs/api/util#utilparseargsconfig"><code>util.parseArgs()</code></a> によってスローされます。</p><h3 id="err_parse_args_unknown_option" tabindex="-1"><code>ERR_PARSE_ARGS_UNKNOWN_OPTION</code> <a class="header-anchor" href="#err_parse_args_unknown_option" aria-label="Permalink to “ERR_PARSE_ARGS_UNKNOWN_OPTION”">​</a></h3><p><strong>追加:</strong> v18.3.0, v16.17.0</p><p><code>strict</code> が <code>true</code> に設定されている場合、引数が <code>options</code> で構成されていない場合に、<a href="/ja/nodejs/api/util#utilparseargsconfig"><code>util.parseArgs()</code></a> によってスローされます。</p><h3 id="err_performance_invalid_timestamp" tabindex="-1"><code>ERR_PERFORMANCE_INVALID_TIMESTAMP</code> <a class="header-anchor" href="#err_performance_invalid_timestamp" aria-label="Permalink to “ERR_PERFORMANCE_INVALID_TIMESTAMP”">​</a></h3><p>パフォーマンスマークまたはメジャーに無効なタイムスタンプ値が指定されました。</p><h3 id="err_performance_measure_invalid_options" tabindex="-1"><code>ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS</code> <a class="header-anchor" href="#err_performance_measure_invalid_options" aria-label="Permalink to “ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS”">​</a></h3><p>パフォーマンスメジャーに無効なオプションが指定されました。</p><h3 id="err_proto_access" tabindex="-1"><code>ERR_PROTO_ACCESS</code> <a class="header-anchor" href="#err_proto_access" aria-label="Permalink to “ERR_PROTO_ACCESS”">​</a></h3><p><code>Object.prototype.__proto__</code>へのアクセスは、<a href="/ja/nodejs/api/cli#disable-protomode"><code>--disable-proto=throw</code></a>を使用して禁止されています。 オブジェクトのプロトタイプを取得および設定するには、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf" target="_blank" rel="noreferrer"><code>Object.getPrototypeOf</code></a> および <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" target="_blank" rel="noreferrer"><code>Object.setPrototypeOf</code></a> を使用する必要があります。</p><h3 id="err_quic_application_error" tabindex="-1"><code>ERR_QUIC_APPLICATION_ERROR</code> <a class="header-anchor" href="#err_quic_application_error" aria-label="Permalink to “ERR_QUIC_APPLICATION_ERROR”">​</a></h3><p><strong>追加: v23.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><p>QUIC アプリケーションエラーが発生しました。</p><h3 id="err_quic_connection_failed" tabindex="-1"><code>ERR_QUIC_CONNECTION_FAILED</code> <a class="header-anchor" href="#err_quic_connection_failed" aria-label="Permalink to “ERR_QUIC_CONNECTION_FAILED”">​</a></h3><p><strong>追加: v23.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><p>QUIC 接続の確立に失敗しました。</p><h3 id="err_quic_endpoint_closed" tabindex="-1"><code>ERR_QUIC_ENDPOINT_CLOSED</code> <a class="header-anchor" href="#err_quic_endpoint_closed" aria-label="Permalink to “ERR_QUIC_ENDPOINT_CLOSED”">​</a></h3><p><strong>追加: v23.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><p>QUIC エンドポイントがエラーで閉じられました。</p><h3 id="err_quic_open_stream_failed" tabindex="-1"><code>ERR_QUIC_OPEN_STREAM_FAILED</code> <a class="header-anchor" href="#err_quic_open_stream_failed" aria-label="Permalink to “ERR_QUIC_OPEN_STREAM_FAILED”">​</a></h3><p><strong>追加: v23.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><p>QUIC ストリームのオープンに失敗しました。</p><h3 id="err_quic_transport_error" tabindex="-1"><code>ERR_QUIC_TRANSPORT_ERROR</code> <a class="header-anchor" href="#err_quic_transport_error" aria-label="Permalink to “ERR_QUIC_TRANSPORT_ERROR”">​</a></h3><p><strong>追加: v23.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><p>QUIC トランスポートエラーが発生しました。</p><h3 id="err_quic_version_negotiation_error" tabindex="-1"><code>ERR_QUIC_VERSION_NEGOTIATION_ERROR</code> <a class="header-anchor" href="#err_quic_version_negotiation_error" aria-label="Permalink to “ERR_QUIC_VERSION_NEGOTIATION_ERROR”">​</a></h3><p><strong>追加: v23.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><p>バージョンネゴシエーションが必要なため、QUIC セッションが失敗しました。</p><h3 id="err_require_async_module" tabindex="-1"><code>ERR_REQUIRE_ASYNC_MODULE</code> <a class="header-anchor" href="#err_require_async_module" aria-label="Permalink to “ERR_REQUIRE_ASYNC_MODULE”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 試験的</p></div><p><a href="/ja/nodejs/api/esm">ES Module</a> を <code>require()</code> しようとしたところ、モジュールが非同期であることが判明しました。つまり、トップレベルの await が含まれています。</p><p>トップレベルの await がどこにあるかを確認するには、<code>--experimental-print-required-tla</code> を使用します (これにより、トップレベルの await を探す前にモジュールが実行されます)。</p><h3 id="err_require_cycle_module" tabindex="-1"><code>ERR_REQUIRE_CYCLE_MODULE</code> <a class="header-anchor" href="#err_require_cycle_module" aria-label="Permalink to “ERR_REQUIRE_CYCLE_MODULE”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 試験的</p></div><p><a href="/ja/nodejs/api/esm">ES Module</a> を <code>require()</code> しようとしたとき、CommonJS から ESM へ、または ESM から CommonJS へのエッジが即時のサイクルに参加しています。ES Module は評価中に評価できないため、これは許可されていません。</p><p>サイクルを回避するには、サイクルに関与する <code>require()</code> 呼び出しが、ES Module ( <code>createRequire()</code> 経由) または CommonJS モジュールのトップレベルで発生するべきではなく、内部関数で遅延的に行う必要があります。</p><h3 id="err_require_esm" tabindex="-1"><code>ERR_REQUIRE_ESM</code> <a class="header-anchor" href="#err_require_esm" aria-label="Permalink to “ERR_REQUIRE_ESM”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>require() が既定で同期 ES モジュールのロードをサポートするようになりました。</td></tr></tbody></table></div><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 0</a> - 非推奨</p></div><p><a href="/ja/nodejs/api/esm">ES Module</a> を <code>require()</code> しようとしました。</p><p>このエラーは、<code>require()</code> が同期 ES モジュールのロードをサポートするようになったため、非推奨になりました。<code>require()</code> がトップレベルの <code>await</code> を含む ES モジュールを検出すると、代わりに <a href="/ja/nodejs/api/errors#err-require-async-module"><code>ERR_REQUIRE_ASYNC_MODULE</code></a> をスローします。</p><h3 id="err_script_execution_interrupted" tabindex="-1"><code>ERR_SCRIPT_EXECUTION_INTERRUPTED</code> <a class="header-anchor" href="#err_script_execution_interrupted" aria-label="Permalink to “ERR_SCRIPT_EXECUTION_INTERRUPTED”">​</a></h3><p>スクリプトの実行が <code>SIGINT</code> によって中断されました (たとえば、+ が押されました)。</p><h3 id="err_script_execution_timeout" tabindex="-1"><code>ERR_SCRIPT_EXECUTION_TIMEOUT</code> <a class="header-anchor" href="#err_script_execution_timeout" aria-label="Permalink to “ERR_SCRIPT_EXECUTION_TIMEOUT”">​</a></h3><p>スクリプトの実行がタイムアウトしました。実行中のスクリプトにバグがある可能性があります。</p><h3 id="err_server_already_listen" tabindex="-1"><code>ERR_SERVER_ALREADY_LISTEN</code> <a class="header-anchor" href="#err_server_already_listen" aria-label="Permalink to “ERR_SERVER_ALREADY_LISTEN”">​</a></h3><p><code>net.Server</code> がすでに listen している状態で、<a href="/ja/nodejs/api/net#serverlisten"><code>server.listen()</code></a> メソッドが呼び出されました。これは、HTTP、HTTPS、および HTTP/2 <code>Server</code> インスタンスを含む、<code>net.Server</code> のすべてのインスタンスに適用されます。</p><h3 id="err_server_not_running" tabindex="-1"><code>ERR_SERVER_NOT_RUNNING</code> <a class="header-anchor" href="#err_server_not_running" aria-label="Permalink to “ERR_SERVER_NOT_RUNNING”">​</a></h3><p><a href="/ja/nodejs/api/net#serverclosecallback"><code>server.close()</code></a> メソッドが、<code>net.Server</code> が実行されていないときに呼び出されました。これは、HTTP、HTTPS、HTTP/2 <code>Server</code> インスタンスを含む、<code>net.Server</code> のすべてのインスタンスに適用されます。</p><h3 id="err_single_executable_application_asset_not_found" tabindex="-1"><code>ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND</code> <a class="header-anchor" href="#err_single_executable_application_asset_not_found" aria-label="Permalink to “ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND”">​</a></h3><p><strong>Added in: v21.7.0, v20.12.0</strong></p><p>アセットを識別するために、シングル実行可能アプリケーション API にキーが渡されましたが、一致するものが見つかりませんでした。</p><h3 id="err_socket_already_bound" tabindex="-1"><code>ERR_SOCKET_ALREADY_BOUND</code> <a class="header-anchor" href="#err_socket_already_bound" aria-label="Permalink to “ERR_SOCKET_ALREADY_BOUND”">​</a></h3><p>既にバインドされているソケットをバインドしようとしました。</p><h3 id="err_socket_bad_buffer_size" tabindex="-1"><code>ERR_SOCKET_BAD_BUFFER_SIZE</code> <a class="header-anchor" href="#err_socket_bad_buffer_size" aria-label="Permalink to “ERR_SOCKET_BAD_BUFFER_SIZE”">​</a></h3><p><a href="/ja/nodejs/api/dgram#dgramcreatesocketoptions-callback"><code>dgram.createSocket()</code></a> の <code>recvBufferSize</code> または <code>sendBufferSize</code> オプションに無効な (負の) サイズが渡されました。</p><h3 id="err_socket_bad_port" tabindex="-1"><code>ERR_SOCKET_BAD_PORT</code> <a class="header-anchor" href="#err_socket_bad_port" aria-label="Permalink to “ERR_SOCKET_BAD_PORT”">​</a></h3><p>&gt;= 0 かつ &lt; 65536 のポートを期待する API 関数が無効な値を受け取りました。</p><h3 id="err_socket_bad_type" tabindex="-1"><code>ERR_SOCKET_BAD_TYPE</code> <a class="header-anchor" href="#err_socket_bad_type" aria-label="Permalink to “ERR_SOCKET_BAD_TYPE”">​</a></h3><p>ソケットタイプ (<code>udp4</code> または <code>udp6</code>) を期待する API 関数が無効な値を受け取りました。</p><h3 id="err_socket_buffer_size" tabindex="-1"><code>ERR_SOCKET_BUFFER_SIZE</code> <a class="header-anchor" href="#err_socket_buffer_size" aria-label="Permalink to “ERR_SOCKET_BUFFER_SIZE”">​</a></h3><p><a href="/ja/nodejs/api/dgram#dgramcreatesocketoptions-callback"><code>dgram.createSocket()</code></a> の使用中に、受信または送信 <code>Buffer</code> のサイズを特定できませんでした。</p><h3 id="err_socket_closed" tabindex="-1"><code>ERR_SOCKET_CLOSED</code> <a class="header-anchor" href="#err_socket_closed" aria-label="Permalink to “ERR_SOCKET_CLOSED”">​</a></h3><p>既に閉じられたソケットを操作しようとしました。</p><h3 id="err_socket_closed_before_connection" tabindex="-1"><code>ERR_SOCKET_CLOSED_BEFORE_CONNECTION</code> <a class="header-anchor" href="#err_socket_closed_before_connection" aria-label="Permalink to “ERR_SOCKET_CLOSED_BEFORE_CONNECTION”">​</a></h3><p>接続中のソケットで <a href="/ja/nodejs/api/net#socketwritedata-encoding-callback"><code>net.Socket.write()</code></a> を呼び出した際に、接続が確立される前にソケットが閉じられました。</p><h3 id="err_socket_connection_timeout" tabindex="-1"><code>ERR_SOCKET_CONNECTION_TIMEOUT</code> <a class="header-anchor" href="#err_socket_connection_timeout" aria-label="Permalink to “ERR_SOCKET_CONNECTION_TIMEOUT”">​</a></h3><p>ファミリー自動選択アルゴリズムを使用している場合、ソケットは許可されたタイムアウト内に DNS から返されたどのアドレスにも接続できませんでした。</p><h3 id="err_socket_dgram_is_connected" tabindex="-1"><code>ERR_SOCKET_DGRAM_IS_CONNECTED</code> <a class="header-anchor" href="#err_socket_dgram_is_connected" aria-label="Permalink to “ERR_SOCKET_DGRAM_IS_CONNECTED”">​</a></h3><p>既に接続されているソケットで <a href="/ja/nodejs/api/dgram#socketconnectport-address-callback"><code>dgram.connect()</code></a> 呼び出しが行われました。</p><h3 id="err_socket_dgram_not_connected" tabindex="-1"><code>ERR_SOCKET_DGRAM_NOT_CONNECTED</code> <a class="header-anchor" href="#err_socket_dgram_not_connected" aria-label="Permalink to “ERR_SOCKET_DGRAM_NOT_CONNECTED”">​</a></h3><p>切断されたソケットで <a href="/ja/nodejs/api/dgram#socketdisconnect"><code>dgram.disconnect()</code></a> または <a href="/ja/nodejs/api/dgram#socketremoteaddress"><code>dgram.remoteAddress()</code></a> 呼び出しが行われました。</p><h3 id="err_socket_dgram_not_running" tabindex="-1"><code>ERR_SOCKET_DGRAM_NOT_RUNNING</code> <a class="header-anchor" href="#err_socket_dgram_not_running" aria-label="Permalink to “ERR_SOCKET_DGRAM_NOT_RUNNING”">​</a></h3><p>呼び出しが行われましたが、UDP サブシステムが実行されていませんでした。</p><h3 id="err_source_map_corrupt" tabindex="-1"><code>ERR_SOURCE_MAP_CORRUPT</code> <a class="header-anchor" href="#err_source_map_corrupt" aria-label="Permalink to “ERR_SOURCE_MAP_CORRUPT”">​</a></h3><p>ソースマップが存在しないか破損しているため、解析できませんでした。</p><h3 id="err_source_map_missing_source" tabindex="-1"><code>ERR_SOURCE_MAP_MISSING_SOURCE</code> <a class="header-anchor" href="#err_source_map_missing_source" aria-label="Permalink to “ERR_SOURCE_MAP_MISSING_SOURCE”">​</a></h3><p>ソースマップからインポートされたファイルが見つかりませんでした。</p><h3 id="err_sqlite_error" tabindex="-1"><code>ERR_SQLITE_ERROR</code> <a class="header-anchor" href="#err_sqlite_error" aria-label="Permalink to “ERR_SQLITE_ERROR”">​</a></h3><p><strong>Added in: v22.5.0</strong></p><p><a href="/ja/nodejs/api/sqlite">SQLite</a> からエラーが返されました。</p><h3 id="err_sri_parse" tabindex="-1"><code>ERR_SRI_PARSE</code> <a class="header-anchor" href="#err_sri_parse" aria-label="Permalink to “ERR_SRI_PARSE”">​</a></h3><p>Subresource Integrity チェックのために文字列が提供されましたが、解析できませんでした。<a href="https://www.w3.org/TR/SRI/#the-integrity-attribute" target="_blank" rel="noreferrer">Subresource Integrity 仕様</a> を参照して、integrity 属性の形式を確認してください。</p><h3 id="err_stream_already_finished" tabindex="-1"><code>ERR_STREAM_ALREADY_FINISHED</code> <a class="header-anchor" href="#err_stream_already_finished" aria-label="Permalink to “ERR_STREAM_ALREADY_FINISHED”">​</a></h3><p>ストリームが終了したため、完了できないストリームメソッドが呼び出されました。</p><h3 id="err_stream_cannot_pipe" tabindex="-1"><code>ERR_STREAM_CANNOT_PIPE</code> <a class="header-anchor" href="#err_stream_cannot_pipe" aria-label="Permalink to “ERR_STREAM_CANNOT_PIPE”">​</a></h3><p><a href="/ja/nodejs/api/stream#class-streamwritable"><code>Writable</code></a> ストリームで <a href="/ja/nodejs/api/stream#readablepipedestination-options"><code>stream.pipe()</code></a> を呼び出そうとしました。</p><h3 id="err_stream_destroyed" tabindex="-1"><code>ERR_STREAM_DESTROYED</code> <a class="header-anchor" href="#err_stream_destroyed" aria-label="Permalink to “ERR_STREAM_DESTROYED”">​</a></h3><p><code>stream.destroy()</code> を使用してストリームが破棄されたため、完了できないストリームメソッドが呼び出されました。</p><h3 id="err_stream_null_values" tabindex="-1"><code>ERR_STREAM_NULL_VALUES</code> <a class="header-anchor" href="#err_stream_null_values" aria-label="Permalink to “ERR_STREAM_NULL_VALUES”">​</a></h3><p><code>null</code> チャンクで <a href="/ja/nodejs/api/stream#writablewritechunk-encoding-callback"><code>stream.write()</code></a> を呼び出そうとしました。</p><h3 id="err_stream_premature_close" tabindex="-1"><code>ERR_STREAM_PREMATURE_CLOSE</code> <a class="header-anchor" href="#err_stream_premature_close" aria-label="Permalink to “ERR_STREAM_PREMATURE_CLOSE”">​</a></h3><p>ストリームまたはパイプラインが明示的なエラーなしに正常に終了しない場合に、<code>stream.finished()</code> および <code>stream.pipeline()</code> によって返されるエラー。</p><h3 id="err_stream_push_after_eof" tabindex="-1"><code>ERR_STREAM_PUSH_AFTER_EOF</code> <a class="header-anchor" href="#err_stream_push_after_eof" aria-label="Permalink to “ERR_STREAM_PUSH_AFTER_EOF”">​</a></h3><p>ストリームに <code>null</code>(EOF) がプッシュされた後で、<a href="/ja/nodejs/api/stream#readablepushchunk-encoding"><code>stream.push()</code></a> を呼び出そうとしました。</p><h3 id="err_stream_unable_to_pipe" tabindex="-1"><code>ERR_STREAM_UNABLE_TO_PIPE</code> <a class="header-anchor" href="#err_stream_unable_to_pipe" aria-label="Permalink to “ERR_STREAM_UNABLE_TO_PIPE”">​</a></h3><p>パイプラインで閉じられたストリームまたは破棄されたストリームにパイプしようとしました。</p><h3 id="err_stream_unshift_after_end_event" tabindex="-1"><code>ERR_STREAM_UNSHIFT_AFTER_END_EVENT</code> <a class="header-anchor" href="#err_stream_unshift_after_end_event" aria-label="Permalink to “ERR_STREAM_UNSHIFT_AFTER_END_EVENT”">​</a></h3><p><code>&#39;end&#39;</code> イベントが発行された後で、<a href="/ja/nodejs/api/stream#readableunshiftchunk-encoding"><code>stream.unshift()</code></a> を呼び出そうとしました。</p><h3 id="err_stream_wrap" tabindex="-1"><code>ERR_STREAM_WRAP</code> <a class="header-anchor" href="#err_stream_wrap" aria-label="Permalink to “ERR_STREAM_WRAP”">​</a></h3><p>Socket に文字列デコーダーが設定されている場合、またはデコーダーが <code>objectMode</code> である場合に、アボートを防ぎます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).Socket;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="err_stream_write_after_end" tabindex="-1"><code>ERR_STREAM_WRITE_AFTER_END</code> <a class="header-anchor" href="#err_stream_write_after_end" aria-label="Permalink to “ERR_STREAM_WRITE_AFTER_END”">​</a></h3><p><code>stream.end()</code> が呼び出された後で、<a href="/ja/nodejs/api/stream#writablewritechunk-encoding-callback"><code>stream.write()</code></a> を呼び出そうとしました。</p><h3 id="err_string_too_long" tabindex="-1"><code>ERR_STRING_TOO_LONG</code> <a class="header-anchor" href="#err_string_too_long" aria-label="Permalink to “ERR_STRING_TOO_LONG”">​</a></h3><p>許可されている最大長を超える文字列を作成しようとしました。</p><h3 id="err_synthetic" tabindex="-1"><code>ERR_SYNTHETIC</code> <a class="header-anchor" href="#err_synthetic" aria-label="Permalink to “ERR_SYNTHETIC”">​</a></h3><p>診断レポートの呼び出しスタックをキャプチャするために使用される人工的なエラーオブジェクト。</p><h3 id="err_system_error" tabindex="-1"><code>ERR_SYSTEM_ERROR</code> <a class="header-anchor" href="#err_system_error" aria-label="Permalink to “ERR_SYSTEM_ERROR”">​</a></h3><p>Node.js プロセス内で、指定されていない、または非特定的なシステムエラーが発生しました。エラーオブジェクトには、追加の詳細情報を含む <code>err.info</code> オブジェクトプロパティがあります。</p><h3 id="err_tap_lexer_error" tabindex="-1"><code>ERR_TAP_LEXER_ERROR</code> <a class="header-anchor" href="#err_tap_lexer_error" aria-label="Permalink to “ERR_TAP_LEXER_ERROR”">​</a></h3><p>lexer の状態の失敗を表すエラー。</p><h3 id="err_tap_parser_error" tabindex="-1"><code>ERR_TAP_PARSER_ERROR</code> <a class="header-anchor" href="#err_tap_parser_error" aria-label="Permalink to “ERR_TAP_PARSER_ERROR”">​</a></h3><p>parser の状態の失敗を表すエラー。エラーの原因となったトークンに関する追加情報は、<code>cause</code> プロパティを介して利用できます。</p><h3 id="err_tap_validation_error" tabindex="-1"><code>ERR_TAP_VALIDATION_ERROR</code> <a class="header-anchor" href="#err_tap_validation_error" aria-label="Permalink to “ERR_TAP_VALIDATION_ERROR”">​</a></h3><p>このエラーは、TAP 検証の失敗を表します。</p><h3 id="err_test_failure" tabindex="-1"><code>ERR_TEST_FAILURE</code> <a class="header-anchor" href="#err_test_failure" aria-label="Permalink to “ERR_TEST_FAILURE”">​</a></h3><p>このエラーは、テストの失敗を表します。失敗に関する追加情報は、<code>cause</code> プロパティを介して利用できます。<code>failureType</code> プロパティは、失敗が発生したときにテストが行っていたことを指定します。</p><h3 id="err_tls_alpn_callback_invalid_result" tabindex="-1"><code>ERR_TLS_ALPN_CALLBACK_INVALID_RESULT</code> <a class="header-anchor" href="#err_tls_alpn_callback_invalid_result" aria-label="Permalink to “ERR_TLS_ALPN_CALLBACK_INVALID_RESULT”">​</a></h3><p>このエラーは、<code>ALPNCallback</code> がクライアントによって提供される ALPN プロトコルのリストにない値を返した場合にスローされます。</p><h3 id="err_tls_alpn_callback_with_protocols" tabindex="-1"><code>ERR_TLS_ALPN_CALLBACK_WITH_PROTOCOLS</code> <a class="header-anchor" href="#err_tls_alpn_callback_with_protocols" aria-label="Permalink to “ERR_TLS_ALPN_CALLBACK_WITH_PROTOCOLS”">​</a></h3><p>このエラーは、TLS オプションに <code>ALPNProtocols</code> と <code>ALPNCallback</code> の両方が含まれている場合に <code>TLSServer</code> を作成するときにスローされます。これらのオプションは相互に排他的です。</p><h3 id="err_tls_cert_altname_format" tabindex="-1"><code>ERR_TLS_CERT_ALTNAME_FORMAT</code> <a class="header-anchor" href="#err_tls_cert_altname_format" aria-label="Permalink to “ERR_TLS_CERT_ALTNAME_FORMAT”">​</a></h3><p>このエラーは、ユーザーが提供した <code>subjectaltname</code> プロパティがエンコードルールに違反している場合、<code>checkServerIdentity</code> によってスローされます。Node.js 自体が生成した証明書オブジェクトは常にエンコードルールに準拠しており、このエラーが発生することはありません。</p><h3 id="err_tls_cert_altname_invalid" tabindex="-1"><code>ERR_TLS_CERT_ALTNAME_INVALID</code> <a class="header-anchor" href="#err_tls_cert_altname_invalid" aria-label="Permalink to “ERR_TLS_CERT_ALTNAME_INVALID”">​</a></h3><p>TLS を使用しているときに、ピアのホスト名/IP が証明書の <code>subjectAltNames</code> のいずれとも一致しませんでした。</p><h3 id="err_tls_dh_param_size" tabindex="-1"><code>ERR_TLS_DH_PARAM_SIZE</code> <a class="header-anchor" href="#err_tls_dh_param_size" aria-label="Permalink to “ERR_TLS_DH_PARAM_SIZE”">​</a></h3><p>TLS を使用しているときに、Diffie-Hellman (<code>DH</code>) 鍵共有プロトコルに提供されるパラメータが小さすぎます。デフォルトでは、脆弱性を回避するために鍵長は 1024 ビット以上である必要があります。より強力なセキュリティのためには、2048 ビット以上を使用することを強くお勧めします。</p><h3 id="err_tls_handshake_timeout" tabindex="-1"><code>ERR_TLS_HANDSHAKE_TIMEOUT</code> <a class="header-anchor" href="#err_tls_handshake_timeout" aria-label="Permalink to “ERR_TLS_HANDSHAKE_TIMEOUT”">​</a></h3><p>TLS/SSLハンドシェイクがタイムアウトしました。この場合、サーバーも接続を中断する必要があります。</p><h3 id="err_tls_invalid_context" tabindex="-1"><code>ERR_TLS_INVALID_CONTEXT</code> <a class="header-anchor" href="#err_tls_invalid_context" aria-label="Permalink to “ERR_TLS_INVALID_CONTEXT”">​</a></h3><p><strong>Added in: v13.3.0</strong></p><p>コンテキストは <code>SecureContext</code> である必要があります。</p><h3 id="err_tls_invalid_protocol_method" tabindex="-1"><code>ERR_TLS_INVALID_PROTOCOL_METHOD</code> <a class="header-anchor" href="#err_tls_invalid_protocol_method" aria-label="Permalink to “ERR_TLS_INVALID_PROTOCOL_METHOD”">​</a></h3><p>指定された <code>secureProtocol</code> メソッドは無効です。不明であるか、安全でないため無効になっています。</p><h3 id="err_tls_invalid_protocol_version" tabindex="-1"><code>ERR_TLS_INVALID_PROTOCOL_VERSION</code> <a class="header-anchor" href="#err_tls_invalid_protocol_version" aria-label="Permalink to “ERR_TLS_INVALID_PROTOCOL_VERSION”">​</a></h3><p>有効なTLSプロトコルバージョンは、<code>&#39;TLSv1&#39;</code>、<code>&#39;TLSv1.1&#39;</code>、または<code>&#39;TLSv1.2&#39;</code>です。</p><h3 id="err_tls_invalid_state" tabindex="-1"><code>ERR_TLS_INVALID_STATE</code> <a class="header-anchor" href="#err_tls_invalid_state" aria-label="Permalink to “ERR_TLS_INVALID_STATE”">​</a></h3><p><strong>Added in: v13.10.0, v12.17.0</strong></p><p>TLSソケットは接続され、安全に確立されている必要があります。続行する前に、&#39;secure&#39;イベントが発行されることを確認してください。</p><h3 id="err_tls_protocol_version_conflict" tabindex="-1"><code>ERR_TLS_PROTOCOL_VERSION_CONFLICT</code> <a class="header-anchor" href="#err_tls_protocol_version_conflict" aria-label="Permalink to “ERR_TLS_PROTOCOL_VERSION_CONFLICT”">​</a></h3><p>TLSプロトコルの <code>minVersion</code> または <code>maxVersion</code> を設定しようとすると、 <code>secureProtocol</code> を明示的に設定しようとする試みと競合します。どちらかのメカニズムを使用してください。</p><h3 id="err_tls_psk_set_identity_hint_failed" tabindex="-1"><code>ERR_TLS_PSK_SET_IDENTITY_HINT_FAILED</code> <a class="header-anchor" href="#err_tls_psk_set_identity_hint_failed" aria-label="Permalink to “ERR_TLS_PSK_SET_IDENTITY_HINT_FAILED”">​</a></h3><p>PSK IDヒントの設定に失敗しました。ヒントが長すぎる可能性があります。</p><h3 id="err_tls_renegotiation_disabled" tabindex="-1"><code>ERR_TLS_RENEGOTIATION_DISABLED</code> <a class="header-anchor" href="#err_tls_renegotiation_disabled" aria-label="Permalink to “ERR_TLS_RENEGOTIATION_DISABLED”">​</a></h3><p>再ネゴシエーションが無効になっているソケットインスタンスでTLSを再ネゴシエーションしようとしました。</p><h3 id="err_tls_required_server_name" tabindex="-1"><code>ERR_TLS_REQUIRED_SERVER_NAME</code> <a class="header-anchor" href="#err_tls_required_server_name" aria-label="Permalink to “ERR_TLS_REQUIRED_SERVER_NAME”">​</a></h3><p>TLSを使用しているときに、最初のパラメータでホスト名を指定せずに <code>server.addContext()</code> メソッドが呼び出されました。</p><h3 id="err_tls_session_attack" tabindex="-1"><code>ERR_TLS_SESSION_ATTACK</code> <a class="header-anchor" href="#err_tls_session_attack" aria-label="Permalink to “ERR_TLS_SESSION_ATTACK”">​</a></h3><p>過剰な量のTLS再ネゴシエーションが検出されました。これはサービス拒否攻撃の潜在的なベクトルです。</p><h3 id="err_tls_sni_from_server" tabindex="-1"><code>ERR_TLS_SNI_FROM_SERVER</code> <a class="header-anchor" href="#err_tls_sni_from_server" aria-label="Permalink to “ERR_TLS_SNI_FROM_SERVER”">​</a></h3><p>TLSサーバー側のソケットからサーバー名表示を発行しようとしましたが、これはクライアントからのみ有効です。</p><h3 id="err_trace_events_category_required" tabindex="-1"><code>ERR_TRACE_EVENTS_CATEGORY_REQUIRED</code> <a class="header-anchor" href="#err_trace_events_category_required" aria-label="Permalink to “ERR_TRACE_EVENTS_CATEGORY_REQUIRED”">​</a></h3><p><code>trace_events.createTracing()</code> メソッドには、少なくとも1つのトレースイベントカテゴリが必要です。</p><h3 id="err_trace_events_unavailable" tabindex="-1"><code>ERR_TRACE_EVENTS_UNAVAILABLE</code> <a class="header-anchor" href="#err_trace_events_unavailable" aria-label="Permalink to “ERR_TRACE_EVENTS_UNAVAILABLE”">​</a></h3><p>Node.jsが <code>--without-v8-platform</code> フラグでコンパイルされたため、 <code>node:trace_events</code> モジュールをロードできませんでした。</p><h3 id="err_transform_already_transforming" tabindex="-1"><code>ERR_TRANSFORM_ALREADY_TRANSFORMING</code> <a class="header-anchor" href="#err_transform_already_transforming" aria-label="Permalink to “ERR_TRANSFORM_ALREADY_TRANSFORMING”">​</a></h3><p><code>Transform</code> ストリームは、まだ変換中に終了しました。</p><h3 id="err_transform_with_length_0" tabindex="-1"><code>ERR_TRANSFORM_WITH_LENGTH_0</code> <a class="header-anchor" href="#err_transform_with_length_0" aria-label="Permalink to “ERR_TRANSFORM_WITH_LENGTH_0”">​</a></h3><p><code>Transform</code> ストリームは、書き込みバッファにデータが残った状態で終了しました。</p><h3 id="err_tty_init_failed" tabindex="-1"><code>ERR_TTY_INIT_FAILED</code> <a class="header-anchor" href="#err_tty_init_failed" aria-label="Permalink to “ERR_TTY_INIT_FAILED”">​</a></h3><p>TTYの初期化がシステムエラーにより失敗しました。</p><h3 id="err_unavailable_during_exit" tabindex="-1"><code>ERR_UNAVAILABLE_DURING_EXIT</code> <a class="header-anchor" href="#err_unavailable_during_exit" aria-label="Permalink to “ERR_UNAVAILABLE_DURING_EXIT”">​</a></h3><p>関数が、<a href="/ja/nodejs/api/process#event-exit"><code>process.on(&#39;exit&#39;)</code></a> ハンドラ内で呼び出されるべきではない <a href="/ja/nodejs/api/process#event-exit"><code>process.on(&#39;exit&#39;)</code></a> ハンドラ内で呼び出されました。</p><h3 id="err_uncaught_exception_capture_already_set" tabindex="-1"><code>ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET</code> <a class="header-anchor" href="#err_uncaught_exception_capture_already_set" aria-label="Permalink to “ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET”">​</a></h3><p><a href="/ja/nodejs/api/process#processsetuncaughtexceptioncapturecallbackfn"><code>process.setUncaughtExceptionCaptureCallback()</code></a> が、コールバックを最初に <code>null</code> にリセットせずに2回呼び出されました。</p><p>このエラーは、別のモジュールから登録されたコールバックを誤って上書きすることを防ぐように設計されています。</p><h3 id="err_unescaped_characters" tabindex="-1"><code>ERR_UNESCAPED_CHARACTERS</code> <a class="header-anchor" href="#err_unescaped_characters" aria-label="Permalink to “ERR_UNESCAPED_CHARACTERS”">​</a></h3><p>エスケープされていない文字を含む文字列を受信しました。</p><h3 id="err_unhandled_error" tabindex="-1"><code>ERR_UNHANDLED_ERROR</code> <a class="header-anchor" href="#err_unhandled_error" aria-label="Permalink to “ERR_UNHANDLED_ERROR”">​</a></h3><p>未処理のエラーが発生しました（たとえば、<a href="/ja/nodejs/api/events#class-eventemitter"><code>EventEmitter</code></a> によって <code>&#39;error&#39;</code> イベントが発行されたが、<code>&#39;error&#39;</code> ハンドラが登録されていない場合）。</p><h3 id="err_unknown_builtin_module" tabindex="-1"><code>ERR_UNKNOWN_BUILTIN_MODULE</code> <a class="header-anchor" href="#err_unknown_builtin_module" aria-label="Permalink to “ERR_UNKNOWN_BUILTIN_MODULE”">​</a></h3><p>ユーザーコードによって通常トリガーされるべきではない特定種類の Node.js 内部エラーを識別するために使用されます。このエラーのインスタンスは、Node.js バイナリ自体の内部バグを指しています。</p><h3 id="err_unknown_credential" tabindex="-1"><code>ERR_UNKNOWN_CREDENTIAL</code> <a class="header-anchor" href="#err_unknown_credential" aria-label="Permalink to “ERR_UNKNOWN_CREDENTIAL”">​</a></h3><p>存在しないUnixグループまたはユーザー識別子が渡されました。</p><h3 id="err_unknown_encoding" tabindex="-1"><code>ERR_UNKNOWN_ENCODING</code> <a class="header-anchor" href="#err_unknown_encoding" aria-label="Permalink to “ERR_UNKNOWN_ENCODING”">​</a></h3><p>無効または不明なエンコーディングオプションがAPIに渡されました。</p><h3 id="err_unknown_file_extension" tabindex="-1"><code>ERR_UNKNOWN_FILE_EXTENSION</code> <a class="header-anchor" href="#err_unknown_file_extension" aria-label="Permalink to “ERR_UNKNOWN_FILE_EXTENSION”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 試験的</p></div><p>不明またはサポートされていないファイル拡張子を持つモジュールをロードしようとしました。</p><h3 id="err_unknown_module_format" tabindex="-1"><code>ERR_UNKNOWN_MODULE_FORMAT</code> <a class="header-anchor" href="#err_unknown_module_format" aria-label="Permalink to “ERR_UNKNOWN_MODULE_FORMAT”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 試験的</p></div><p>不明またはサポートされていないフォーマットを持つモジュールをロードしようとしました。</p><h3 id="err_unknown_signal" tabindex="-1"><code>ERR_UNKNOWN_SIGNAL</code> <a class="header-anchor" href="#err_unknown_signal" aria-label="Permalink to “ERR_UNKNOWN_SIGNAL”">​</a></h3><p>無効または不明なプロセスシグナルが、有効なシグナルを期待するAPI（<a href="/ja/nodejs/api/child_process#subprocesskillsignal"><code>subprocess.kill()</code></a> など）に渡されました。</p><h3 id="err_unsupported_dir_import" tabindex="-1"><code>ERR_UNSUPPORTED_DIR_IMPORT</code> <a class="header-anchor" href="#err_unsupported_dir_import" aria-label="Permalink to “ERR_UNSUPPORTED_DIR_IMPORT”">​</a></h3><p>ディレクトリ URL の <code>import</code> はサポートされていません。代わりに、<a href="/ja/nodejs/api/packages#self-referencing-a-package-using-its-name">パッケージ名を使用してパッケージ自身を参照</a>し、<a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> フィールドの <a href="/ja/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> ファイルで <a href="/ja/nodejs/api/packages#subpath-exports">カスタムサブパスを定義</a>してください。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// サポートされていません</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// サポートされています</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package-name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// サポートされています</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="err_unsupported_esm_url_scheme" tabindex="-1"><code>ERR_UNSUPPORTED_ESM_URL_SCHEME</code> <a class="header-anchor" href="#err_unsupported_esm_url_scheme" aria-label="Permalink to “ERR_UNSUPPORTED_ESM_URL_SCHEME”">​</a></h3><p><code>file</code> および <code>data</code> 以外の URL スキームでの <code>import</code> はサポートされていません。</p><h3 id="err_unsupported_node_modules_type_stripping" tabindex="-1"><code>ERR_UNSUPPORTED_NODE_MODULES_TYPE_STRIPPING</code> <a class="header-anchor" href="#err_unsupported_node_modules_type_stripping" aria-label="Permalink to “ERR_UNSUPPORTED_NODE_MODULES_TYPE_STRIPPING”">​</a></h3><p><strong>Added in: v22.6.0</strong></p><p>型ストリッピングは、<code>node_modules</code> ディレクトリの子孫ファイルではサポートされていません。</p><h3 id="err_unsupported_resolve_request" tabindex="-1"><code>ERR_UNSUPPORTED_RESOLVE_REQUEST</code> <a class="header-anchor" href="#err_unsupported_resolve_request" aria-label="Permalink to “ERR_UNSUPPORTED_RESOLVE_REQUEST”">​</a></h3><p>無効なモジュールリファラーを解決しようとしました。これは、次の場合にインポートするか、<code>import.meta.resolve()</code> を呼び出すときに発生する可能性があります。</p><ul><li>URL スキームが <code>file</code> ではないモジュールからの、組み込みモジュールではないベア指定子。</li><li>URL スキームが <a href="https://url.spec.whatwg.org/#special-scheme" target="_blank" rel="noreferrer">特別なスキーム</a> ではないモジュールからの <a href="https://url.spec.whatwg.org/#relative-url-string" target="_blank" rel="noreferrer">相対 URL</a>。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // \`data:\` URL モジュールからパッケージ &#39;bare-specifier&#39; をインポートしようとしています:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data:text/javascript,import &quot;bare-specifier&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.code); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ERR_UNSUPPORTED_RESOLVE_REQUEST</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="err_use_after_close" tabindex="-1"><code>ERR_USE_AFTER_CLOSE</code> <a class="header-anchor" href="#err_use_after_close" aria-label="Permalink to “ERR_USE_AFTER_CLOSE”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 実験的</p></div><p>すでに閉じられたものを使用しようとしました。</p><h3 id="err_valid_performance_entry_type" tabindex="-1"><code>ERR_VALID_PERFORMANCE_ENTRY_TYPE</code> <a class="header-anchor" href="#err_valid_performance_entry_type" aria-label="Permalink to “ERR_VALID_PERFORMANCE_ENTRY_TYPE”">​</a></h3><p>Performance Timing API (<code>perf_hooks</code>) の使用中に、有効なパフォーマンスエントリタイプが見つかりません。</p><h3 id="err_vm_dynamic_import_callback_missing" tabindex="-1"><code>ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING</code> <a class="header-anchor" href="#err_vm_dynamic_import_callback_missing" aria-label="Permalink to “ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING”">​</a></h3><p>動的インポートコールバックが指定されていません。</p><h3 id="err_vm_dynamic_import_callback_missing_flag" tabindex="-1"><code>ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING_FLAG</code> <a class="header-anchor" href="#err_vm_dynamic_import_callback_missing_flag" aria-label="Permalink to “ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING_FLAG”">​</a></h3><p><code>--experimental-vm-modules</code> なしで動的インポートコールバックが呼び出されました。</p><h3 id="err_vm_module_already_linked" tabindex="-1"><code>ERR_VM_MODULE_ALREADY_LINKED</code> <a class="header-anchor" href="#err_vm_module_already_linked" aria-label="Permalink to “ERR_VM_MODULE_ALREADY_LINKED”">​</a></h3><p>リンクしようとしたモジュールは、次のいずれかの理由によりリンクできません。</p><ul><li>既にリンクされている (<code>linkingStatus</code> が <code>&#39;linked&#39;</code> である)</li><li>リンク中である (<code>linkingStatus</code> が <code>&#39;linking&#39;</code> である)</li><li>このモジュールのリンクに失敗した (<code>linkingStatus</code> が <code>&#39;errored&#39;</code> である)</li></ul><h3 id="err_vm_module_cached_data_rejected" tabindex="-1"><code>ERR_VM_MODULE_CACHED_DATA_REJECTED</code> <a class="header-anchor" href="#err_vm_module_cached_data_rejected" aria-label="Permalink to “ERR_VM_MODULE_CACHED_DATA_REJECTED”">​</a></h3><p>モジュールコンストラクターに渡された <code>cachedData</code> オプションが無効です。</p><h3 id="err_vm_module_cannot_create_cached_data" tabindex="-1"><code>ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA</code> <a class="header-anchor" href="#err_vm_module_cannot_create_cached_data" aria-label="Permalink to “ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA”">​</a></h3><p>評価済みのモジュールに対してキャッシュされたデータを作成することはできません。</p><h3 id="err_vm_module_different_context" tabindex="-1"><code>ERR_VM_MODULE_DIFFERENT_CONTEXT</code> <a class="header-anchor" href="#err_vm_module_different_context" aria-label="Permalink to “ERR_VM_MODULE_DIFFERENT_CONTEXT”">​</a></h3><p>リンカー関数から返されるモジュールが、親モジュールとは異なるコンテキストからのものです。リンクされたモジュールは同じコンテキストを共有する必要があります。</p><h3 id="err_vm_module_link_failure" tabindex="-1"><code>ERR_VM_MODULE_LINK_FAILURE</code> <a class="header-anchor" href="#err_vm_module_link_failure" aria-label="Permalink to “ERR_VM_MODULE_LINK_FAILURE”">​</a></h3><p>モジュールは、失敗のためリンクできませんでした。</p><h3 id="err_vm_module_not_module" tabindex="-1"><code>ERR_VM_MODULE_NOT_MODULE</code> <a class="header-anchor" href="#err_vm_module_not_module" aria-label="Permalink to “ERR_VM_MODULE_NOT_MODULE”">​</a></h3><p>リンクプロミスの fulfilled 値は <code>vm.Module</code> オブジェクトではありません。</p><h3 id="err_vm_module_status" tabindex="-1"><code>ERR_VM_MODULE_STATUS</code> <a class="header-anchor" href="#err_vm_module_status" aria-label="Permalink to “ERR_VM_MODULE_STATUS”">​</a></h3><p>現在のモジュールのステータスでは、この操作は許可されていません。エラーの具体的な意味は、特定の関数によって異なります。</p><h3 id="err_wasi_already_started" tabindex="-1"><code>ERR_WASI_ALREADY_STARTED</code> <a class="header-anchor" href="#err_wasi_already_started" aria-label="Permalink to “ERR_WASI_ALREADY_STARTED”">​</a></h3><p>WASI インスタンスは既に開始されています。</p><h3 id="err_wasi_not_started" tabindex="-1"><code>ERR_WASI_NOT_STARTED</code> <a class="header-anchor" href="#err_wasi_not_started" aria-label="Permalink to “ERR_WASI_NOT_STARTED”">​</a></h3><p>WASI インスタンスは開始されていません。</p><h3 id="err_webassembly_response" tabindex="-1"><code>ERR_WEBASSEMBLY_RESPONSE</code> <a class="header-anchor" href="#err_webassembly_response" aria-label="Permalink to “ERR_WEBASSEMBLY_RESPONSE”">​</a></h3><p><strong>Added in: v18.1.0</strong></p><p><code>WebAssembly.compileStreaming</code> または <code>WebAssembly.instantiateStreaming</code> に渡された <code>Response</code> が有効な WebAssembly レスポンスではありません。</p><h3 id="err_worker_init_failed" tabindex="-1"><code>ERR_WORKER_INIT_FAILED</code> <a class="header-anchor" href="#err_worker_init_failed" aria-label="Permalink to “ERR_WORKER_INIT_FAILED”">​</a></h3><p><code>Worker</code> の初期化に失敗しました。</p><h3 id="err_worker_invalid_exec_argv" tabindex="-1"><code>ERR_WORKER_INVALID_EXEC_ARGV</code> <a class="header-anchor" href="#err_worker_invalid_exec_argv" aria-label="Permalink to “ERR_WORKER_INVALID_EXEC_ARGV”">​</a></h3><p><code>Worker</code> コンストラクターに渡された <code>execArgv</code> オプションに無効なフラグが含まれています。</p><h3 id="err_worker_messaging_errored" tabindex="-1"><code>ERR_WORKER_MESSAGING_ERRORED</code> <a class="header-anchor" href="#err_worker_messaging_errored" aria-label="Permalink to “ERR_WORKER_MESSAGING_ERRORED”">​</a></h3><p><strong>Added in: v22.5.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a>.1 - 活発な開発</p></div><p><a href="/ja/nodejs/api/worker_threads#workerpostmessagetothreadthreadid-value-transferlist-timeout"><code>postMessageToThread()</code></a> 経由で送信されたメッセージの処理中に、宛先スレッドがエラーをスローしました。</p><h3 id="err_worker_messaging_failed" tabindex="-1"><code>ERR_WORKER_MESSAGING_FAILED</code> <a class="header-anchor" href="#err_worker_messaging_failed" aria-label="Permalink to “ERR_WORKER_MESSAGING_FAILED”">​</a></h3><p><strong>Added in: v22.5.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a>.1 - 活発な開発</p></div><p><a href="/ja/nodejs/api/worker_threads#workerpostmessagetothreadthreadid-value-transferlist-timeout"><code>postMessageToThread()</code></a> で要求されたスレッドが無効であるか、<code>workerMessage</code> リスナーがありません。</p><h3 id="err_worker_messaging_same_thread" tabindex="-1"><code>ERR_WORKER_MESSAGING_SAME_THREAD</code> <a class="header-anchor" href="#err_worker_messaging_same_thread" aria-label="Permalink to “ERR_WORKER_MESSAGING_SAME_THREAD”">​</a></h3><p><strong>Added in: v22.5.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a>.1 - 活発な開発</p></div><p><a href="/ja/nodejs/api/worker_threads#workerpostmessagetothreadthreadid-value-transferlist-timeout"><code>postMessageToThread()</code></a> で要求されたスレッド ID が現在のスレッド ID です。</p><h3 id="err_worker_messaging_timeout" tabindex="-1"><code>ERR_WORKER_MESSAGING_TIMEOUT</code> <a class="header-anchor" href="#err_worker_messaging_timeout" aria-label="Permalink to “ERR_WORKER_MESSAGING_TIMEOUT”">​</a></h3><p><strong>Added in: v22.5.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a>.1 - 活発な開発</p></div><p><a href="/ja/nodejs/api/worker_threads#workerpostmessagetothreadthreadid-value-transferlist-timeout"><code>postMessageToThread()</code></a> を介したメッセージの送信がタイムアウトしました。</p><h3 id="err_worker_not_running" tabindex="-1"><code>ERR_WORKER_NOT_RUNNING</code> <a class="header-anchor" href="#err_worker_not_running" aria-label="Permalink to “ERR_WORKER_NOT_RUNNING”">​</a></h3><p>操作は、<code>Worker</code> インスタンスが現在実行されていないため失敗しました。</p><h3 id="err_worker_out_of_memory" tabindex="-1"><code>ERR_WORKER_OUT_OF_MEMORY</code> <a class="header-anchor" href="#err_worker_out_of_memory" aria-label="Permalink to “ERR_WORKER_OUT_OF_MEMORY”">​</a></h3><p><code>Worker</code> インスタンスは、メモリ制限に達したため終了しました。</p><h3 id="err_worker_path" tabindex="-1"><code>ERR_WORKER_PATH</code> <a class="header-anchor" href="#err_worker_path" aria-label="Permalink to “ERR_WORKER_PATH”">​</a></h3><p>ワーカーのメインスクリプトのパスは、絶対パスでも <code>./</code> または <code>../</code> で始まる相対パスでもありません。</p><h3 id="err_worker_unserializable_error" tabindex="-1"><code>ERR_WORKER_UNSERIALIZABLE_ERROR</code> <a class="header-anchor" href="#err_worker_unserializable_error" aria-label="Permalink to “ERR_WORKER_UNSERIALIZABLE_ERROR”">​</a></h3><p>ワーカー スレッドからのキャッチされない例外をシリアル化するすべての試みが失敗しました。</p><h3 id="err_worker_unsupported_operation" tabindex="-1"><code>ERR_WORKER_UNSUPPORTED_OPERATION</code> <a class="header-anchor" href="#err_worker_unsupported_operation" aria-label="Permalink to “ERR_WORKER_UNSUPPORTED_OPERATION”">​</a></h3><p>要求された機能は、ワーカー スレッドではサポートされていません。</p><h3 id="err_zlib_initialization_failed" tabindex="-1"><code>ERR_ZLIB_INITIALIZATION_FAILED</code> <a class="header-anchor" href="#err_zlib_initialization_failed" aria-label="Permalink to “ERR_ZLIB_INITIALIZATION_FAILED”">​</a></h3><p>不正な設定のため、<a href="/ja/nodejs/api/zlib"><code>zlib</code></a> オブジェクトの作成に失敗しました。</p><h3 id="hpe_chunk_extensions_overflow" tabindex="-1"><code>HPE_CHUNK_EXTENSIONS_OVERFLOW</code> <a class="header-anchor" href="#hpe_chunk_extensions_overflow" aria-label="Permalink to “HPE_CHUNK_EXTENSIONS_OVERFLOW”">​</a></h3><p><strong>Added in: v21.6.2, v20.11.1, v18.19.1</strong></p><p>チャンク拡張機能に対して受信されたデータが多すぎます。 悪意のあるクライアントまたは誤って構成されたクライアントから保護するために、16 KiB を超えるデータを受信した場合、このコードのエラーが発行されます。</p><h3 id="hpe_header_overflow" tabindex="-1"><code>HPE_HEADER_OVERFLOW</code> <a class="header-anchor" href="#hpe_header_overflow" aria-label="Permalink to “HPE_HEADER_OVERFLOW”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v11.4.0, v10.15.0</td><td><code>http_parser</code> の最大ヘッダーサイズが 8 KiB に設定されました。</td></tr></tbody></table></div><p>HTTPヘッダーデータが多すぎます。悪意のあるクライアントや誤った設定のクライアントから保護するために、<code>maxHeaderSize</code> を超えるHTTPヘッダーデータを受信した場合、HTTP解析はリクエストまたはレスポンスオブジェクトを作成せずに中止され、このコードを持つ <code>Error</code> が発行されます。</p><h3 id="hpe_unexpected_content_length" tabindex="-1"><code>HPE_UNEXPECTED_CONTENT_LENGTH</code> <a class="header-anchor" href="#hpe_unexpected_content_length" aria-label="Permalink to “HPE_UNEXPECTED_CONTENT_LENGTH”">​</a></h3><p>サーバーが <code>Content-Length</code> ヘッダーと <code>Transfer-Encoding: chunked</code> の両方を送信しています。</p><p><code>Transfer-Encoding: chunked</code> を使用すると、サーバーは動的に生成されたコンテンツのHTTP永続接続を維持できます。この場合、<code>Content-Length</code> HTTPヘッダーは使用できません。</p><p><code>Content-Length</code> または <code>Transfer-Encoding: chunked</code> を使用してください。</p><h3 id="module_not_found" tabindex="-1"><code>MODULE_NOT_FOUND</code> <a class="header-anchor" href="#module_not_found" aria-label="Permalink to “MODULE_NOT_FOUND”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v12.0.0</td><td><code>requireStack</code> プロパティが追加されました。</td></tr></tbody></table></div><p><a href="/ja/nodejs/api/modules#requireid"><code>require()</code></a> 操作を実行しようとしたとき、またはプログラムのエントリーポイントをロードするときに、CommonJSモジュールローダーがモジュールファイルを解決できませんでした。</p><h2 id="legacy-nodejs-error-codes" tabindex="-1">レガシー Node.js エラーコード <a class="header-anchor" href="#legacy-nodejs-error-codes" aria-label="Permalink to “レガシー Node.js エラーコード”">​</a></h2><div class="danger custom-block"><p class="custom-block-title">[安定: 0 - 非推奨]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定: 0</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 0</a> - 非推奨。これらのエラーコードは一貫性がないか、削除されています。</p></div><h3 id="err_cannot_transfer_object" tabindex="-1"><code>ERR_CANNOT_TRANSFER_OBJECT</code> <a class="header-anchor" href="#err_cannot_transfer_object" aria-label="Permalink to “ERR_CANNOT_TRANSFER_OBJECT”">​</a></h3><p><strong>追加: v10.5.0</strong></p><p><strong>削除: v12.5.0</strong></p><p><code>postMessage()</code> に渡された値に、転送がサポートされていないオブジェクトが含まれていました。</p><h3 id="err_cpu_usage" tabindex="-1"><code>ERR_CPU_USAGE</code> <a class="header-anchor" href="#err_cpu_usage" aria-label="Permalink to “ERR_CPU_USAGE”">​</a></h3><p><strong>削除: v15.0.0</strong></p><p><code>process.cpuUsage</code> からのネイティブ呼び出しを処理できませんでした。</p><h3 id="err_crypto_hash_digest_no_utf16" tabindex="-1"><code>ERR_CRYPTO_HASH_DIGEST_NO_UTF16</code> <a class="header-anchor" href="#err_crypto_hash_digest_no_utf16" aria-label="Permalink to “ERR_CRYPTO_HASH_DIGEST_NO_UTF16”">​</a></h3><p><strong>追加: v9.0.0</strong></p><p><strong>削除: v12.12.0</strong></p><p>UTF-16エンコーディングが <a href="/ja/nodejs/api/crypto#hashdigestencoding"><code>hash.digest()</code></a> で使用されました。 <code>hash.digest()</code> メソッドは、メソッドが <code>Buffer</code> ではなく文字列を返すようにする <code>encoding</code> 引数を渡すことができますが、UTF-16エンコーディング (例: <code>ucs</code> または <code>utf16le</code>) はサポートされていません。</p><h3 id="err_crypto_scrypt_invalid_parameter" tabindex="-1"><code>ERR_CRYPTO_SCRYPT_INVALID_PARAMETER</code> <a class="header-anchor" href="#err_crypto_scrypt_invalid_parameter" aria-label="Permalink to “ERR_CRYPTO_SCRYPT_INVALID_PARAMETER”">​</a></h3><p><strong>削除: v23.0.0</strong></p><p>互換性のないオプションの組み合わせが<a href="/ja/nodejs/api/crypto#cryptoscryptpassword-salt-keylen-options-callback"><code>crypto.scrypt()</code></a>または<a href="/ja/nodejs/api/crypto#cryptoscryptsyncpassword-salt-keylen-options"><code>crypto.scryptSync()</code></a>に渡されました。 新しいバージョンのNode.jsでは、代わりにエラーコード<a href="/ja/nodejs/api/errors#err-incompatible-option-pair"><code>ERR_INCOMPATIBLE_OPTION_PAIR</code></a>が使用されます。これは他のAPIと一貫性があります。</p><h3 id="err_fs_invalid_symlink_type" tabindex="-1"><code>ERR_FS_INVALID_SYMLINK_TYPE</code> <a class="header-anchor" href="#err_fs_invalid_symlink_type" aria-label="Permalink to “ERR_FS_INVALID_SYMLINK_TYPE”">​</a></h3><p><strong>削除: v23.0.0</strong></p><p>無効なシンボリックリンクタイプが<a href="/ja/nodejs/api/fs#fssymlinktarget-path-type-callback"><code>fs.symlink()</code></a>または<a href="/ja/nodejs/api/fs#fssymlinksynctarget-path-type"><code>fs.symlinkSync()</code></a>メソッドに渡されました。</p><h3 id="err_http2_frame_error" tabindex="-1"><code>ERR_HTTP2_FRAME_ERROR</code> <a class="header-anchor" href="#err_http2_frame_error" aria-label="Permalink to “ERR_HTTP2_FRAME_ERROR”">​</a></h3><p><strong>追加: v9.0.0</strong></p><p><strong>削除: v10.0.0</strong></p><p>HTTP/2セッションで個々のフレームの送信に失敗した場合に使用されます。</p><h3 id="err_http2_headers_object" tabindex="-1"><code>ERR_HTTP2_HEADERS_OBJECT</code> <a class="header-anchor" href="#err_http2_headers_object" aria-label="Permalink to “ERR_HTTP2_HEADERS_OBJECT”">​</a></h3><p><strong>追加: v9.0.0</strong></p><p><strong>削除: v10.0.0</strong></p><p>HTTP/2 Headersオブジェクトが期待される場合に使用されます。</p><h3 id="err_http2_header_required" tabindex="-1"><code>ERR_HTTP2_HEADER_REQUIRED</code> <a class="header-anchor" href="#err_http2_header_required" aria-label="Permalink to “ERR_HTTP2_HEADER_REQUIRED”">​</a></h3><p><strong>追加: v9.0.0</strong></p><p><strong>削除: v10.0.0</strong></p><p>HTTP/2メッセージで必要なヘッダーが見つからない場合に使用されます。</p><h3 id="err_http2_info_headers_after_respond" tabindex="-1"><code>ERR_HTTP2_INFO_HEADERS_AFTER_RESPOND</code> <a class="header-anchor" href="#err_http2_info_headers_after_respond" aria-label="Permalink to “ERR_HTTP2_INFO_HEADERS_AFTER_RESPOND”">​</a></h3><p><strong>追加: v9.0.0</strong></p><p><strong>削除: v10.0.0</strong></p><p>HTTP/2情報ヘッダーは、<code>Http2Stream.prototype.respond()</code>メソッドを呼び出す<em>前</em>にのみ送信する必要があります。</p><h3 id="err_http2_stream_closed" tabindex="-1"><code>ERR_HTTP2_STREAM_CLOSED</code> <a class="header-anchor" href="#err_http2_stream_closed" aria-label="Permalink to “ERR_HTTP2_STREAM_CLOSED”">​</a></h3><p><strong>追加: v9.0.0</strong></p><p><strong>削除: v10.0.0</strong></p><p>既に閉じられているHTTP/2ストリームに対してアクションが実行された場合に使用されます。</p><h3 id="err_http_invalid_char" tabindex="-1"><code>ERR_HTTP_INVALID_CHAR</code> <a class="header-anchor" href="#err_http_invalid_char" aria-label="Permalink to “ERR_HTTP_INVALID_CHAR”">​</a></h3><p><strong>追加: v9.0.0</strong></p><p><strong>削除: v10.0.0</strong></p><p>HTTP応答ステータスメッセージ（理由句）に無効な文字が見つかった場合に使用されます。</p><h3 id="err_import_assertion_type_failed" tabindex="-1"><code>ERR_IMPORT_ASSERTION_TYPE_FAILED</code> <a class="header-anchor" href="#err_import_assertion_type_failed" aria-label="Permalink to “ERR_IMPORT_ASSERTION_TYPE_FAILED”">​</a></h3><p><strong>追加: v17.1.0, v16.14.0</strong></p><p><strong>削除: v21.1.0</strong></p><p>インポートアサーションが失敗し、指定されたモジュールをインポートできません。</p><h3 id="err_import_assertion_type_missing" tabindex="-1"><code>ERR_IMPORT_ASSERTION_TYPE_MISSING</code> <a class="header-anchor" href="#err_import_assertion_type_missing" aria-label="Permalink to “ERR_IMPORT_ASSERTION_TYPE_MISSING”">​</a></h3><p><strong>追加: v17.1.0, v16.14.0</strong></p><p><strong>削除: v21.1.0</strong></p><p>インポートアサーションが欠落しているため、指定されたモジュールをインポートできません。</p><h3 id="err_import_assertion_type_unsupported" tabindex="-1"><code>ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED</code> <a class="header-anchor" href="#err_import_assertion_type_unsupported" aria-label="Permalink to “ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED”">​</a></h3><p><strong>追加: v17.1.0, v16.14.0</strong></p><p><strong>削除: v21.1.0</strong></p><p>インポート属性が、このバージョンのNode.jsでサポートされていません。</p><h3 id="err_index_out_of_range" tabindex="-1"><code>ERR_INDEX_OUT_OF_RANGE</code> <a class="header-anchor" href="#err_index_out_of_range" aria-label="Permalink to “ERR_INDEX_OUT_OF_RANGE”">​</a></h3><p><strong>追加: v10.0.0</strong></p><p><strong>削除: v11.0.0</strong></p><p>指定されたインデックスが、許可された範囲外でした（例：負のオフセット）。</p><h3 id="err_invalid_opt_value" tabindex="-1"><code>ERR_INVALID_OPT_VALUE</code> <a class="header-anchor" href="#err_invalid_opt_value" aria-label="Permalink to “ERR_INVALID_OPT_VALUE”">​</a></h3><p><strong>追加: v8.0.0</strong></p><p><strong>削除: v15.0.0</strong></p><p>オプションオブジェクトで、無効または予期しない値が渡されました。</p><h3 id="err_invalid_opt_value_encoding" tabindex="-1"><code>ERR_INVALID_OPT_VALUE_ENCODING</code> <a class="header-anchor" href="#err_invalid_opt_value_encoding" aria-label="Permalink to “ERR_INVALID_OPT_VALUE_ENCODING”">​</a></h3><p><strong>追加: v9.0.0</strong></p><p><strong>削除: v15.0.0</strong></p><p>無効または不明なファイルエンコーディングが渡されました。</p><h3 id="err_invalid_performance_mark" tabindex="-1"><code>ERR_INVALID_PERFORMANCE_MARK</code> <a class="header-anchor" href="#err_invalid_performance_mark" aria-label="Permalink to “ERR_INVALID_PERFORMANCE_MARK”">​</a></h3><p><strong>追加: v8.5.0</strong></p><p><strong>削除: v16.7.0</strong></p><p>Performance Timing API（<code>perf_hooks</code>）を使用中に、パフォーマンスマークが無効です。</p><h3 id="err_invalid_transfer_object" tabindex="-1"><code>ERR_INVALID_TRANSFER_OBJECT</code> <a class="header-anchor" href="#err_invalid_transfer_object" aria-label="Permalink to “ERR_INVALID_TRANSFER_OBJECT”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v21.0.0</td><td>代わりに <code>DOMException</code> がスローされます。</td></tr><tr><td>v21.0.0</td><td>削除: v21.0.0</td></tr></tbody></table></div><p>無効な転送オブジェクトが <code>postMessage()</code> に渡されました。</p><h3 id="err_manifest_assert_integrity" tabindex="-1"><code>ERR_MANIFEST_ASSERT_INTEGRITY</code> <a class="header-anchor" href="#err_manifest_assert_integrity" aria-label="Permalink to “ERR_MANIFEST_ASSERT_INTEGRITY”">​</a></h3><p><strong>削除: v22.2.0</strong></p><p>リソースをロードしようとしましたが、リソースがポリシーマニフェストで定義された整合性と一致しませんでした。詳細については、ポリシーマニフェストのドキュメントを参照してください。</p><h3 id="err_manifest_dependency_missing" tabindex="-1"><code>ERR_MANIFEST_DEPENDENCY_MISSING</code> <a class="header-anchor" href="#err_manifest_dependency_missing" aria-label="Permalink to “ERR_MANIFEST_DEPENDENCY_MISSING”">​</a></h3><p><strong>削除: v22.2.0</strong></p><p>リソースをロードしようとしましたが、リソースはそれをロードしようとした場所からの依存関係としてリストされていませんでした。詳細については、ポリシーマニフェストのドキュメントを参照してください。</p><h3 id="err_manifest_integrity_mismatch" tabindex="-1"><code>ERR_MANIFEST_INTEGRITY_MISMATCH</code> <a class="header-anchor" href="#err_manifest_integrity_mismatch" aria-label="Permalink to “ERR_MANIFEST_INTEGRITY_MISMATCH”">​</a></h3><p><strong>削除: v22.2.0</strong></p><p>ポリシーマニフェストをロードしようとしましたが、マニフェストにリソースに対して一致しない複数のエントリがありました。このエラーを解決するには、マニフェストエントリが一致するように更新してください。詳細については、ポリシーマニフェストのドキュメントを参照してください。</p><h3 id="err_manifest_invalid_resource_field" tabindex="-1"><code>ERR_MANIFEST_INVALID_RESOURCE_FIELD</code> <a class="header-anchor" href="#err_manifest_invalid_resource_field" aria-label="Permalink to “ERR_MANIFEST_INVALID_RESOURCE_FIELD”">​</a></h3><p><strong>削除: v22.2.0</strong></p><p>ポリシーマニフェストリソースのフィールドの1つに無効な値がありました。このエラーを解決するには、マニフェストエントリが一致するように更新してください。詳細については、ポリシーマニフェストのドキュメントを参照してください。</p><h3 id="err_manifest_invalid_specifier" tabindex="-1"><code>ERR_MANIFEST_INVALID_SPECIFIER</code> <a class="header-anchor" href="#err_manifest_invalid_specifier" aria-label="Permalink to “ERR_MANIFEST_INVALID_SPECIFIER”">​</a></h3><p><strong>Removed in: v22.2.0</strong></p><p>ポリシーマニフェストリソースに、依存関係のマッピングの無効な値がありました。このエラーを解決するには、マニフェストエントリを一致するように更新してください。詳細については、ポリシーマニフェストのドキュメントを参照してください。</p><h3 id="err_manifest_parse_policy" tabindex="-1"><code>ERR_MANIFEST_PARSE_POLICY</code> <a class="header-anchor" href="#err_manifest_parse_policy" aria-label="Permalink to “ERR_MANIFEST_PARSE_POLICY”">​</a></h3><p><strong>Removed in: v22.2.0</strong></p><p>ポリシーマニフェストをロードしようとしましたが、マニフェストを解析できませんでした。詳細については、ポリシーマニフェストのドキュメントを参照してください。</p><h3 id="err_manifest_tdz" tabindex="-1"><code>ERR_MANIFEST_TDZ</code> <a class="header-anchor" href="#err_manifest_tdz" aria-label="Permalink to “ERR_MANIFEST_TDZ”">​</a></h3><p><strong>Removed in: v22.2.0</strong></p><p>ポリシーマニフェストから読み取ろうとしましたが、マニフェストの初期化がまだ行われていません。これは Node.js のバグである可能性があります。</p><h3 id="err_manifest_unknown_onerror" tabindex="-1"><code>ERR_MANIFEST_UNKNOWN_ONERROR</code> <a class="header-anchor" href="#err_manifest_unknown_onerror" aria-label="Permalink to “ERR_MANIFEST_UNKNOWN_ONERROR”">​</a></h3><p><strong>Removed in: v22.2.0</strong></p><p>ポリシーマニフェストがロードされましたが、&quot;onerror&quot; の動作に不明な値がありました。詳細については、ポリシーマニフェストのドキュメントを参照してください。</p><h3 id="err_missing_message_port_in_transfer_list" tabindex="-1"><code>ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST</code> <a class="header-anchor" href="#err_missing_message_port_in_transfer_list" aria-label="Permalink to “ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST”">​</a></h3><p><strong>Removed in: v15.0.0</strong></p><p>このエラーコードは、Node.js v15.0.0 で <a href="/ja/nodejs/api/errors#err-missing-transferable-in-transfer-list"><code>ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST</code></a> に置き換えられました。これは、他の種類の転送可能なオブジェクトも存在するようになったため、もはや正確ではないためです。</p><h3 id="err_missing_transferable_in_transfer_list" tabindex="-1"><code>ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST</code> <a class="header-anchor" href="#err_missing_transferable_in_transfer_list" aria-label="Permalink to “ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v21.0.0</td><td><code>DOMException</code> が代わりにスローされます。</td></tr><tr><td>v21.0.0</td><td>Removed in: v21.0.0</td></tr><tr><td>v15.0.0</td><td>Added in: v15.0.0</td></tr></tbody></table></div><p><code>transferList</code> 引数に明示的にリストする必要があるオブジェクトが、<a href="/ja/nodejs/api/worker_threads#portpostmessagevalue-transferlist"><code>postMessage()</code></a> 呼び出しに渡されるオブジェクト内にありますが、その呼び出しの <code>transferList</code> には提供されていません。通常、これは <code>MessagePort</code> です。</p><p>Node.js の v15.0.0 より前のバージョンでは、ここで使用されていたエラーコードは <a href="/ja/nodejs/api/errors#err-missing-message-port-in-transfer-list"><code>ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST</code></a> でした。ただし、転送可能なオブジェクトの種類のセットは、<code>MessagePort</code> よりも多くの種類をカバーするように拡張されました。</p><h3 id="err_napi_cons_prototype_object" tabindex="-1"><code>ERR_NAPI_CONS_PROTOTYPE_OBJECT</code> <a class="header-anchor" href="#err_napi_cons_prototype_object" aria-label="Permalink to “ERR_NAPI_CONS_PROTOTYPE_OBJECT”">​</a></h3><p><strong>Added in: v9.0.0</strong></p><p><strong>Removed in: v10.0.0</strong></p><p><code>Constructor.prototype</code> がオブジェクトでない場合に <code>Node-API</code> によって使用されます。</p><h3 id="err_napi_tsfn_start_idle_loop" tabindex="-1"><code>ERR_NAPI_TSFN_START_IDLE_LOOP</code> <a class="header-anchor" href="#err_napi_tsfn_start_idle_loop" aria-label="Permalink to “ERR_NAPI_TSFN_START_IDLE_LOOP”">​</a></h3><p><strong>Added in: v10.6.0, v8.16.0</strong></p><p><strong>Removed in: v14.2.0, v12.17.0</strong></p><p>メインスレッドで、スレッドセーフ関数に関連付けられたキューから値がアイドルループで削除されます。このエラーは、ループの開始を試みるときにエラーが発生したことを示します。</p><h3 id="err_napi_tsfn_stop_idle_loop" tabindex="-1"><code>ERR_NAPI_TSFN_STOP_IDLE_LOOP</code> <a class="header-anchor" href="#err_napi_tsfn_stop_idle_loop" aria-label="Permalink to “ERR_NAPI_TSFN_STOP_IDLE_LOOP”">​</a></h3><p><strong>Added in: v10.6.0, v8.16.0</strong></p><p><strong>Removed in: v14.2.0, v12.17.0</strong></p><p>キューにアイテムが残っていない場合、アイドルループは中断される必要があります。このエラーは、アイドルループが停止に失敗したことを示します。</p><h3 id="err_no_longer_supported" tabindex="-1"><code>ERR_NO_LONGER_SUPPORTED</code> <a class="header-anchor" href="#err_no_longer_supported" aria-label="Permalink to “ERR_NO_LONGER_SUPPORTED”">​</a></h3><p>Node.js APIがサポートされていない方法で呼び出されました。たとえば、<code>Buffer.write(string, encoding, offset[, length])</code> などです。</p><h3 id="err_outofmemory" tabindex="-1"><code>ERR_OUTOFMEMORY</code> <a class="header-anchor" href="#err_outofmemory" aria-label="Permalink to “ERR_OUTOFMEMORY”">​</a></h3><p><strong>Added in: v9.0.0</strong></p><p><strong>Removed in: v10.0.0</strong></p><p>操作がメモリ不足の状態を引き起こしたことを特定するために一般的に使用されます。</p><h3 id="err_parse_history_data" tabindex="-1"><code>ERR_PARSE_HISTORY_DATA</code> <a class="header-anchor" href="#err_parse_history_data" aria-label="Permalink to “ERR_PARSE_HISTORY_DATA”">​</a></h3><p><strong>Added in: v9.0.0</strong></p><p><strong>Removed in: v10.0.0</strong></p><p><code>node:repl</code> モジュールがREPL履歴ファイルからデータを解析できませんでした。</p><h3 id="err_socket_cannot_send" tabindex="-1"><code>ERR_SOCKET_CANNOT_SEND</code> <a class="header-anchor" href="#err_socket_cannot_send" aria-label="Permalink to “ERR_SOCKET_CANNOT_SEND”">​</a></h3><p><strong>Added in: v9.0.0</strong></p><p><strong>Removed in: v14.0.0</strong></p><p>ソケットでデータを送信できませんでした。</p><h3 id="err_stderr_close" tabindex="-1"><code>ERR_STDERR_CLOSE</code> <a class="header-anchor" href="#err_stderr_close" aria-label="Permalink to “ERR_STDERR_CLOSE”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v10.12.0</td><td>エラーを発生させる代わりに、<code>process.stderr.end()</code> はストリーム側のみを閉じ、基になるリソースは閉じなくなり、このエラーは廃止されました。</td></tr><tr><td>v10.12.0</td><td>Removed in: v10.12.0</td></tr></tbody></table></div><p><code>process.stderr</code> ストリームを閉じようとしました。設計上、Node.jsでは、ユーザーコードが <code>stdout</code> または <code>stderr</code> ストリームを閉じることはできません。</p><h3 id="err_stdout_close" tabindex="-1"><code>ERR_STDOUT_CLOSE</code> <a class="header-anchor" href="#err_stdout_close" aria-label="Permalink to “ERR_STDOUT_CLOSE”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v10.12.0</td><td>エラーを発生させる代わりに、<code>process.stderr.end()</code> はストリーム側のみを閉じ、基になるリソースは閉じなくなり、このエラーは廃止されました。</td></tr><tr><td>v10.12.0</td><td>Removed in: v10.12.0</td></tr></tbody></table></div><p><code>process.stdout</code> ストリームを閉じようとしました。設計上、Node.jsでは、ユーザーコードが <code>stdout</code> または <code>stderr</code> ストリームを閉じることはできません。</p><h3 id="err_stream_read_not_implemented" tabindex="-1"><code>ERR_STREAM_READ_NOT_IMPLEMENTED</code> <a class="header-anchor" href="#err_stream_read_not_implemented" aria-label="Permalink to “ERR_STREAM_READ_NOT_IMPLEMENTED”">​</a></h3><p><strong>Added in: v9.0.0</strong></p><p><strong>Removed in: v10.0.0</strong></p><p><a href="/ja/nodejs/api/stream#readable-readsize"><code>readable._read()</code></a> を実装していないReadableストリームを使用しようとした場合に使用されます。</p><h3 id="err_tls_renegotiation_failed" tabindex="-1"><code>ERR_TLS_RENEGOTIATION_FAILED</code> <a class="header-anchor" href="#err_tls_renegotiation_failed" aria-label="Permalink to “ERR_TLS_RENEGOTIATION_FAILED”">​</a></h3><p><strong>Added in: v9.0.0</strong></p><p><strong>Removed in: v10.0.0</strong></p><p>TLS再ネゴシエーションリクエストが特定できない方法で失敗した場合に使用されます。</p><h3 id="err_transferring_externalized_sharedarraybuffer" tabindex="-1"><code>ERR_TRANSFERRING_EXTERNALIZED_SHAREDARRAYBUFFER</code> <a class="header-anchor" href="#err_transferring_externalized_sharedarraybuffer" aria-label="Permalink to “ERR_TRANSFERRING_EXTERNALIZED_SHAREDARRAYBUFFER”">​</a></h3><p><strong>Added in: v10.5.0</strong></p><p><strong>Removed in: v14.0.0</strong></p><p>JavaScriptエンジンまたはNode.jsによってメモリが管理されていない<code>SharedArrayBuffer</code>が、シリアライズ中に検出されました。このような<code>SharedArrayBuffer</code>はシリアライズできません。</p><p>これは、ネイティブアドオンが「外部化」モードで<code>SharedArrayBuffer</code>を作成するか、既存の<code>SharedArrayBuffer</code>を外部化モードにした場合にのみ発生する可能性があります。</p><h3 id="err_unknown_stdin_type" tabindex="-1"><code>ERR_UNKNOWN_STDIN_TYPE</code> <a class="header-anchor" href="#err_unknown_stdin_type" aria-label="Permalink to “ERR_UNKNOWN_STDIN_TYPE”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>Removed in: v11.7.0</strong></p><p>不明な<code>stdin</code>ファイルタイプでNode.jsプロセスを起動しようとしました。このエラーは通常、Node.js自体のバグを示していますが、ユーザーコードがトリガーする可能性もあります。</p><h3 id="err_unknown_stream_type" tabindex="-1"><code>ERR_UNKNOWN_STREAM_TYPE</code> <a class="header-anchor" href="#err_unknown_stream_type" aria-label="Permalink to “ERR_UNKNOWN_STREAM_TYPE”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>Removed in: v11.7.0</strong></p><p>不明な<code>stdout</code>または<code>stderr</code>ファイルタイプでNode.jsプロセスを起動しようとしました。このエラーは通常、Node.js自体のバグを示していますが、ユーザーコードがトリガーする可能性もあります。</p><h3 id="err_v8breakiterator" tabindex="-1"><code>ERR_V8BREAKITERATOR</code> <a class="header-anchor" href="#err_v8breakiterator" aria-label="Permalink to “ERR_V8BREAKITERATOR”">​</a></h3><p>V8 <code>BreakIterator</code> APIが使用されましたが、完全なICUデータセットがインストールされていません。</p><h3 id="err_value_out_of_range" tabindex="-1"><code>ERR_VALUE_OUT_OF_RANGE</code> <a class="header-anchor" href="#err_value_out_of_range" aria-label="Permalink to “ERR_VALUE_OUT_OF_RANGE”">​</a></h3><p><strong>Added in: v9.0.0</strong></p><p><strong>Removed in: v10.0.0</strong></p><p>指定された値が許容範囲外の場合に使用されます。</p><h3 id="err_vm_module_linking_errored" tabindex="-1"><code>ERR_VM_MODULE_LINKING_ERRORED</code> <a class="header-anchor" href="#err_vm_module_linking_errored" aria-label="Permalink to “ERR_VM_MODULE_LINKING_ERRORED”">​</a></h3><p><strong>Added in: v10.0.0</strong></p><p><strong>Removed in: v18.1.0, v16.17.0</strong></p><p>リンカー関数が、リンキングに失敗したモジュールを返しました。</p><h3 id="err_vm_module_not_linked" tabindex="-1"><code>ERR_VM_MODULE_NOT_LINKED</code> <a class="header-anchor" href="#err_vm_module_not_linked" aria-label="Permalink to “ERR_VM_MODULE_NOT_LINKED”">​</a></h3><p>インスタンス化する前に、モジュールを正常にリンクする必要があります。</p><h3 id="err_worker_unsupported_extension" tabindex="-1"><code>ERR_WORKER_UNSUPPORTED_EXTENSION</code> <a class="header-anchor" href="#err_worker_unsupported_extension" aria-label="Permalink to “ERR_WORKER_UNSUPPORTED_EXTENSION”">​</a></h3><p><strong>Added in: v11.0.0</strong></p><p><strong>Removed in: v16.9.0</strong></p><p>ワーカーのメインスクリプトに使用されたパス名に、不明なファイル拡張子があります。</p><h3 id="err_zlib_binding_closed" tabindex="-1"><code>ERR_ZLIB_BINDING_CLOSED</code> <a class="header-anchor" href="#err_zlib_binding_closed" aria-label="Permalink to “ERR_ZLIB_BINDING_CLOSED”">​</a></h3><p><strong>Added in: v9.0.0</strong></p><p><strong>Removed in: v10.0.0</strong></p><p>すでに閉じられている<code>zlib</code>オブジェクトを使用しようとした場合に使用されます。</p><h2 id="openssl-error-codes" tabindex="-1">OpenSSL エラーコード <a class="header-anchor" href="#openssl-error-codes" aria-label="Permalink to “OpenSSL エラーコード”">​</a></h2><h3 id="time-validity-errors" tabindex="-1">時間の有効性エラー <a class="header-anchor" href="#time-validity-errors" aria-label="Permalink to “時間の有効性エラー”">​</a></h3><h4 id="cert_not_yet_valid" tabindex="-1"><code>CERT_NOT_YET_VALID</code> <a class="header-anchor" href="#cert_not_yet_valid" aria-label="Permalink to “CERT_NOT_YET_VALID”">​</a></h4><p>証明書はまだ有効ではありません。notBefore 日付が現在時刻より後です。</p><h4 id="cert_has_expired" tabindex="-1"><code>CERT_HAS_EXPIRED</code> <a class="header-anchor" href="#cert_has_expired" aria-label="Permalink to “CERT_HAS_EXPIRED”">​</a></h4><p>証明書は期限切れです。notAfter 日付が現在時刻より前です。</p><h4 id="crl_not_yet_valid" tabindex="-1"><code>CRL_NOT_YET_VALID</code> <a class="header-anchor" href="#crl_not_yet_valid" aria-label="Permalink to “CRL_NOT_YET_VALID”">​</a></h4><p>証明書失効リスト (CRL) の発行日が未来です。</p><h4 id="crl_has_expired" tabindex="-1"><code>CRL_HAS_EXPIRED</code> <a class="header-anchor" href="#crl_has_expired" aria-label="Permalink to “CRL_HAS_EXPIRED”">​</a></h4><p>証明書失効リスト (CRL) は期限切れです。</p><h4 id="cert_revoked" tabindex="-1"><code>CERT_REVOKED</code> <a class="header-anchor" href="#cert_revoked" aria-label="Permalink to “CERT_REVOKED”">​</a></h4><p>証明書は失効しています。証明書失効リスト (CRL) に記載されています。</p><h3 id="trust-or-chain-related-errors" tabindex="-1">信頼またはチェーン関連のエラー <a class="header-anchor" href="#trust-or-chain-related-errors" aria-label="Permalink to “信頼またはチェーン関連のエラー”">​</a></h3><h4 id="unable_to_get_issuer_cert" tabindex="-1"><code>UNABLE_TO_GET_ISSUER_CERT</code> <a class="header-anchor" href="#unable_to_get_issuer_cert" aria-label="Permalink to “UNABLE_TO_GET_ISSUER_CERT”">​</a></h4><p>検索された証明書の発行者証明書が見つかりませんでした。これは通常、信頼できる証明書のリストが完全ではないことを意味します。</p><h4 id="unable_to_get_issuer_cert_locally" tabindex="-1"><code>UNABLE_TO_GET_ISSUER_CERT_LOCALLY</code> <a class="header-anchor" href="#unable_to_get_issuer_cert_locally" aria-label="Permalink to “UNABLE_TO_GET_ISSUER_CERT_LOCALLY”">​</a></h4><p>証明書の発行者が不明です。これは、発行者が信頼できる証明書リストに含まれていない場合に発生します。</p><h4 id="depth_zero_self_signed_cert" tabindex="-1"><code>DEPTH_ZERO_SELF_SIGNED_CERT</code> <a class="header-anchor" href="#depth_zero_self_signed_cert" aria-label="Permalink to “DEPTH_ZERO_SELF_SIGNED_CERT”">​</a></h4><p>渡された証明書は自己署名であり、同じ証明書が信頼できる証明書のリストに見つかりません。</p><h4 id="self_signed_cert_in_chain" tabindex="-1"><code>SELF_SIGNED_CERT_IN_CHAIN</code> <a class="header-anchor" href="#self_signed_cert_in_chain" aria-label="Permalink to “SELF_SIGNED_CERT_IN_CHAIN”">​</a></h4><p>証明書の発行者が不明です。これは、発行者が信頼できる証明書リストに含まれていない場合に発生します。</p><h4 id="cert_chain_too_long" tabindex="-1"><code>CERT_CHAIN_TOO_LONG</code> <a class="header-anchor" href="#cert_chain_too_long" aria-label="Permalink to “CERT_CHAIN_TOO_LONG”">​</a></h4><p>証明書チェーンの長さが最大深度を超えています。</p><h4 id="unable_to_get_crl" tabindex="-1"><code>UNABLE_TO_GET_CRL</code> <a class="header-anchor" href="#unable_to_get_crl" aria-label="Permalink to “UNABLE_TO_GET_CRL”">​</a></h4><p>証明書によって参照される CRL が見つかりませんでした。</p><h4 id="unable_to_verify_leaf_signature" tabindex="-1"><code>UNABLE_TO_VERIFY_LEAF_SIGNATURE</code> <a class="header-anchor" href="#unable_to_verify_leaf_signature" aria-label="Permalink to “UNABLE_TO_VERIFY_LEAF_SIGNATURE”">​</a></h4><p>チェーンに証明書が 1 つしか含まれておらず、自己署名ではないため、署名を検証できませんでした。</p><h4 id="cert_untrusted" tabindex="-1"><code>CERT_UNTRUSTED</code> <a class="header-anchor" href="#cert_untrusted" aria-label="Permalink to “CERT_UNTRUSTED”">​</a></h4><p>ルート認証局 (CA) は、指定された目的のために信頼できるものとしてマークされていません。</p><h3 id="basic-extension-errors" tabindex="-1">基本拡張エラー <a class="header-anchor" href="#basic-extension-errors" aria-label="Permalink to “基本拡張エラー”">​</a></h3><h4 id="invalid_ca" tabindex="-1"><code>INVALID_CA</code> <a class="header-anchor" href="#invalid_ca" aria-label="Permalink to “INVALID_CA”">​</a></h4><p>CA 証明書が無効です。CA でないか、拡張機能が指定された目的に一致していません。</p><h4 id="path_length_exceeded" tabindex="-1"><code>PATH_LENGTH_EXCEEDED</code> <a class="header-anchor" href="#path_length_exceeded" aria-label="Permalink to “PATH_LENGTH_EXCEEDED”">​</a></h4><p>basicConstraints pathlength パラメータを超えました。</p><h3 id="name-related-errors" tabindex="-1">名前関連のエラー <a class="header-anchor" href="#name-related-errors" aria-label="Permalink to “名前関連のエラー”">​</a></h3><h4 id="hostname_mismatch" tabindex="-1"><code>HOSTNAME_MISMATCH</code> <a class="header-anchor" href="#hostname_mismatch" aria-label="Permalink to “HOSTNAME_MISMATCH”">​</a></h4><p>証明書が提供された名前と一致しません。</p><h3 id="usage-and-policy-errors" tabindex="-1">使用法とポリシーのエラー <a class="header-anchor" href="#usage-and-policy-errors" aria-label="Permalink to “使用法とポリシーのエラー”">​</a></h3><h4 id="invalid_purpose" tabindex="-1"><code>INVALID_PURPOSE</code> <a class="header-anchor" href="#invalid_purpose" aria-label="Permalink to “INVALID_PURPOSE”">​</a></h4><p>指定された目的のために、提供された証明書を使用できません。</p><h4 id="cert_rejected" tabindex="-1"><code>CERT_REJECTED</code> <a class="header-anchor" href="#cert_rejected" aria-label="Permalink to “CERT_REJECTED”">​</a></h4><p>ルートCAは、指定された目的を拒否するようにマークされています。</p><h3 id="formatting-errors" tabindex="-1">フォーマットエラー <a class="header-anchor" href="#formatting-errors" aria-label="Permalink to “フォーマットエラー”">​</a></h3><h4 id="cert_signature_failure" tabindex="-1"><code>CERT_SIGNATURE_FAILURE</code> <a class="header-anchor" href="#cert_signature_failure" aria-label="Permalink to “CERT_SIGNATURE_FAILURE”">​</a></h4><p>証明書の署名が無効です。</p><h4 id="crl_signature_failure" tabindex="-1"><code>CRL_SIGNATURE_FAILURE</code> <a class="header-anchor" href="#crl_signature_failure" aria-label="Permalink to “CRL_SIGNATURE_FAILURE”">​</a></h4><p>証明書失効リスト (CRL) の署名が無効です。</p><h4 id="error_in_cert_not_before_field" tabindex="-1"><code>ERROR_IN_CERT_NOT_BEFORE_FIELD</code> <a class="header-anchor" href="#error_in_cert_not_before_field" aria-label="Permalink to “ERROR_IN_CERT_NOT_BEFORE_FIELD”">​</a></h4><p>証明書の notBefore フィールドに無効な時間が含まれています。</p><h4 id="error_in_cert_not_after_field" tabindex="-1"><code>ERROR_IN_CERT_NOT_AFTER_FIELD</code> <a class="header-anchor" href="#error_in_cert_not_after_field" aria-label="Permalink to “ERROR_IN_CERT_NOT_AFTER_FIELD”">​</a></h4><p>証明書の notAfter フィールドに無効な時間が含まれています。</p><h4 id="error_in_crl_last_update_field" tabindex="-1"><code>ERROR_IN_CRL_LAST_UPDATE_FIELD</code> <a class="header-anchor" href="#error_in_crl_last_update_field" aria-label="Permalink to “ERROR_IN_CRL_LAST_UPDATE_FIELD”">​</a></h4><p>CRL の lastUpdate フィールドに無効な時間が含まれています。</p><h4 id="error_in_crl_next_update_field" tabindex="-1"><code>ERROR_IN_CRL_NEXT_UPDATE_FIELD</code> <a class="header-anchor" href="#error_in_crl_next_update_field" aria-label="Permalink to “ERROR_IN_CRL_NEXT_UPDATE_FIELD”">​</a></h4><p>CRL の nextUpdate フィールドに無効な時間が含まれています。</p><h4 id="unable_to_decrypt_cert_signature" tabindex="-1"><code>UNABLE_TO_DECRYPT_CERT_SIGNATURE</code> <a class="header-anchor" href="#unable_to_decrypt_cert_signature" aria-label="Permalink to “UNABLE_TO_DECRYPT_CERT_SIGNATURE”">​</a></h4><p>証明書の署名を復号化できませんでした。これは、期待される値と一致しないのではなく、実際の署名値を判別できなかったことを意味します。これは RSA キーに対してのみ意味があります。</p><h4 id="unable_to_decrypt_crl_signature" tabindex="-1"><code>UNABLE_TO_DECRYPT_CRL_SIGNATURE</code> <a class="header-anchor" href="#unable_to_decrypt_crl_signature" aria-label="Permalink to “UNABLE_TO_DECRYPT_CRL_SIGNATURE”">​</a></h4><p>証明書失効リスト (CRL) の署名を復号化できませんでした。これは、期待される値と一致しないのではなく、実際の署名値を判別できなかったことを意味します。</p><h4 id="unable_to_decode_issuer_public_key" tabindex="-1"><code>UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY</code> <a class="header-anchor" href="#unable_to_decode_issuer_public_key" aria-label="Permalink to “UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY”">​</a></h4><p>証明書の SubjectPublicKeyInfo の公開鍵を読み取ることができませんでした。</p><h3 id="other-openssl-errors" tabindex="-1">その他の OpenSSL エラー <a class="header-anchor" href="#other-openssl-errors" aria-label="Permalink to “その他の OpenSSL エラー”">​</a></h3><h4 id="out_of_mem" tabindex="-1"><code>OUT_OF_MEM</code> <a class="header-anchor" href="#out_of_mem" aria-label="Permalink to “OUT_OF_MEM”">​</a></h4><p>メモリを割り当てようとしてエラーが発生しました。これは決して起こりません。</p>`,1159)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};