import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js의 process.nextTick() 이해","description":"Node.js의 process.nextTick()의 동작과 setImmediate() 및 setTimeout()과의 차이를 학습합니다. 이벤트 루프와 nextTick()를 사용하여 코드를 비동기적으로 실행하는 방법을 이해합니다.","frontmatter":{"title":"Node.js의 process.nextTick() 이해","description":"Node.js의 process.nextTick()의 동작과 setImmediate() 및 setTimeout()과의 차이를 학습합니다. 이벤트 루프와 nextTick()를 사용하여 코드를 비동기적으로 실행하는 방법을 이해합니다.","head":[["meta",{"name":"og:title","content":"Node.js의 process.nextTick() 이해 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js의 process.nextTick()의 동작과 setImmediate() 및 setTimeout()과의 차이를 학습합니다. 이벤트 루프와 nextTick()를 사용하여 코드를 비동기적으로 실행하는 방법을 이해합니다."}],["meta",{"name":"twitter:title","content":"Node.js의 process.nextTick() 이해 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js의 process.nextTick()의 동작과 setImmediate() 및 setTimeout()과의 차이를 학습합니다. 이벤트 루프와 nextTick()를 사용하여 코드를 비동기적으로 실행하는 방법을 이해합니다."}],["link",{"rel":"canonical","href":"https://idoc.dev/ko/nodejs/guide/understanding-process-nexttick"}],["meta",{"property":"og:url","content":"https://idoc.dev/ko/nodejs/guide/understanding-process-nexttick"}]]},"headers":[],"relativePath":"ko/nodejs/guide/understanding-process-nexttick.md","filePath":"ko/nodejs/guide/understanding-process-nexttick.md","lastUpdated":1749464498000}`),a={name:`ko/nodejs/guide/understanding-process-nexttick.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="process-nexttick-이해하기" tabindex="-1"><code>process.nextTick()</code> 이해하기 <a class="header-anchor" href="#process-nexttick-이해하기" aria-label="Permalink to “process.nextTick() 이해하기”">​</a></h1><p>Node.js 이벤트 루프를 이해하려고 할 때 중요한 부분 중 하나는 <code>process.nextTick()</code>입니다. 이벤트 루프가 완전히 한 바퀴 도는 것을 틱이라고 부릅니다.</p><p>함수를 process.nextTick()에 전달하면 엔진에게 현재 작업이 끝날 때, 다음 이벤트 루프 틱이 시작되기 전에 이 함수를 호출하도록 지시합니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>이벤트 루프는 현재 함수 코드를 처리하느라 바쁩니다. 이 작업이 끝나면 JS 엔진은 해당 작업 중에 <code>nextTick</code> 호출에 전달된 모든 함수를 실행합니다.</p><p>JS 엔진에게 함수를 비동기적으로 (현재 함수 이후에) 처리하되, 가능한 한 빨리 큐에 넣지 않도록 지시하는 방법입니다.</p><p><code>setTimeout(() =&gt; {}, 0)</code>을 호출하면 다음 틱이 끝날 때 함수가 실행됩니다. 이는 <code>nextTick()</code>을 사용하여 호출을 우선 순위화하고 다음 틱이 시작되기 직전에 실행하는 것보다 훨씬 늦습니다.</p><p>다음 이벤트 루프 반복에서 코드가 이미 실행되었는지 확인하고 싶을 때 <code>nextTick()</code>을 사용하십시오.</p><h2 id="이벤트-순서-예시" tabindex="-1">이벤트 순서 예시: <a class="header-anchor" href="#이벤트-순서-예시" aria-label="Permalink to “이벤트 순서 예시:”">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello =&gt; number 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Running before the timeout =&gt; number 3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The timeout running last =&gt; number 4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Running at next tick =&gt; number 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="예시-출력" tabindex="-1">예시 출력: <a class="header-anchor" href="#예시-출력" aria-label="Permalink to “예시 출력:”">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Running</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> next</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Running</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> before</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> running</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> last</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>정확한 출력은 실행할 때마다 다를 수 있습니다.</p>`,13)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};