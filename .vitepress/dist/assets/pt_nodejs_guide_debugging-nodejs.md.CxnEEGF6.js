import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Depuração do Node.js","description":"Opções de depuração do Node.js, incluindo --inspect, --inspect-brk e --debug, assim como cenários de depuração remota e informações sobre o depurador legado.","frontmatter":{"title":"Depuração do Node.js","description":"Opções de depuração do Node.js, incluindo --inspect, --inspect-brk e --debug, assim como cenários de depuração remota e informações sobre o depurador legado.","head":[["meta",{"name":"og:title","content":"Depuração do Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Opções de depuração do Node.js, incluindo --inspect, --inspect-brk e --debug, assim como cenários de depuração remota e informações sobre o depurador legado."}],["meta",{"name":"twitter:title","content":"Depuração do Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Opções de depuração do Node.js, incluindo --inspect, --inspect-brk e --debug, assim como cenários de depuração remota e informações sobre o depurador legado."}],["link",{"rel":"canonical","href":"https://idoc.dev/pt/nodejs/guide/debugging-nodejs"}],["meta",{"property":"og:url","content":"https://idoc.dev/pt/nodejs/guide/debugging-nodejs"}]]},"headers":[],"relativePath":"pt/nodejs/guide/debugging-nodejs.md","filePath":"pt/nodejs/guide/debugging-nodejs.md","lastUpdated":1749464498000}`),a={name:`pt/nodejs/guide/debugging-nodejs.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="depurando-node-js" tabindex="-1">Depurando Node.js <a class="header-anchor" href="#depurando-node-js" aria-label="Permalink to “Depurando Node.js”">​</a></h1><p>Este guia ajudará você a começar a depurar seus aplicativos e scripts Node.js.</p><h2 id="habilitar-o-inspetor" tabindex="-1">Habilitar o Inspetor <a class="header-anchor" href="#habilitar-o-inspetor" aria-label="Permalink to “Habilitar o Inspetor”">​</a></h2><p>Quando iniciado com a chave <code>--inspect</code>, um processo Node.js fica à escuta de um cliente de depuração. Por padrão, ele escutará no host e na porta <code>127.0.0.1:9229</code>. Cada processo também recebe um UUID exclusivo.</p><p>Os clientes do Inspetor devem conhecer e especificar o endereço do host, a porta e o UUID para se conectar. Um URL completo terá a seguinte aparência: <code>ws://127.0.0.1:9229/0f2c936f-b1cd-4ac9-aab3-f63b0f33d55e</code>.</p><p>O Node.js também começará a escutar mensagens de depuração se receber um sinal <code>SIGUSR1</code>. (O <code>SIGUSR1</code> não está disponível no Windows.) No Node.js 7 e versões anteriores, isso ativa a API de Depurador legado. No Node.js 8 e versões posteriores, ele ativará a API do Inspetor.</p><h2 id="implicacoes-de-seguranca" tabindex="-1">Implicações de Segurança <a class="header-anchor" href="#implicacoes-de-seguranca" aria-label="Permalink to “Implicações de Segurança”">​</a></h2><p>Como o depurador tem acesso total ao ambiente de execução do Node.js, um agente malicioso capaz de se conectar a esta porta pode ser capaz de executar código arbitrário em nome do processo Node.js. É importante entender as implicações de segurança de expor a porta do depurador em redes públicas e privadas.</p><h3 id="expor-a-porta-de-depuracao-publicamente-nao-e-seguro" tabindex="-1">Expor a porta de depuração publicamente não é seguro <a class="header-anchor" href="#expor-a-porta-de-depuracao-publicamente-nao-e-seguro" aria-label="Permalink to “Expor a porta de depuração publicamente não é seguro”">​</a></h3><p>Se o depurador estiver vinculado a um endereço IP público, ou a 0.0.0.0, quaisquer clientes que possam alcançar seu endereço IP poderão se conectar ao depurador sem qualquer restrição e poderão executar código arbitrário.</p><p>Por padrão, <code>node --inspect</code> se vincula a 127.0.0.1. Você precisa fornecer explicitamente um endereço IP público ou 0.0.0.0, etc., se pretende permitir conexões externas ao depurador. Fazer isso pode expô-lo a uma ameaça de segurança potencialmente significativa. Sugerimos que você garanta que firewalls e controles de acesso apropriados estejam em vigor para evitar uma exposição à segurança.</p><p>Consulte a seção sobre &#39;<a href="/pt/nodejs/guide/debugging-nodejs#enabling-remote-debugging-scenarios">Habilitando cenários de depuração remota</a>&#39; para obter alguns conselhos sobre como permitir com segurança que clientes de depuração remota se conectem.</p><h3 id="aplicativos-locais-tem-acesso-total-ao-inspetor" tabindex="-1">Aplicativos locais têm acesso total ao inspetor <a class="header-anchor" href="#aplicativos-locais-tem-acesso-total-ao-inspetor" aria-label="Permalink to “Aplicativos locais têm acesso total ao inspetor”">​</a></h3><p>Mesmo se você vincular a porta do inspetor a 127.0.0.1 (o padrão), qualquer aplicativo em execução localmente em sua máquina terá acesso irrestrito. Isso é por design para permitir que depuradores locais consigam se conectar convenientemente.</p><h3 id="navegadores-websockets-e-politica-de-mesma-origem" tabindex="-1">Navegadores, WebSockets e política de mesma origem <a class="header-anchor" href="#navegadores-websockets-e-politica-de-mesma-origem" aria-label="Permalink to “Navegadores, WebSockets e política de mesma origem”">​</a></h3><p>Websites abertos em um navegador web podem fazer requisições WebSocket e HTTP sob o modelo de segurança do navegador. Uma conexão HTTP inicial é necessária para obter um ID de sessão de depurador único. A política de mesma origem impede que os websites possam fazer esta conexão HTTP. Para segurança adicional contra <a href="https://en.wikipedia.org/wiki/DNS_rebinding" target="_blank" rel="noreferrer">ataques de DNS rebinding</a>, o Node.js verifica se os cabeçalhos &#39;Host&#39; para a conexão especificam um endereço IP ou <code>localhost</code> precisamente.</p><p>Estas políticas de segurança não permitem a conexão com um servidor de depuração remoto especificando o nome do host. Você pode contornar esta restrição especificando o endereço IP ou usando túneis SSH como descrito abaixo.</p><h2 id="clientes-do-inspector" tabindex="-1">Clientes do Inspector <a class="header-anchor" href="#clientes-do-inspector" aria-label="Permalink to “Clientes do Inspector”">​</a></h2><p>Um depurador CLI mínimo está disponível com node inspect myscript.js. Várias ferramentas comerciais e de código aberto também podem se conectar ao Node.js Inspector.</p><h3 id="chrome-devtools-55-microsoft-edge" tabindex="-1">Chrome DevTools 55+, Microsoft Edge <a class="header-anchor" href="#chrome-devtools-55-microsoft-edge" aria-label="Permalink to “Chrome DevTools 55+, Microsoft Edge”">​</a></h3><ul><li><strong>Opção 1</strong>: Abra <code>chrome://inspect</code> em um navegador baseado no Chromium ou <code>edge://inspect</code> no Edge. Clique no botão Configure e certifique-se de que seu host e porta de destino estejam listados.</li><li><strong>Opção 2</strong>: Copie o <code>devtoolsFrontendUrl</code> da saída de <code>/json/list</code> (veja acima) ou o texto de dica <code>--inspect</code> e cole no Chrome.</li></ul><p>Veja <a href="https://github.com/ChromeDevTools/devtools-frontend" target="_blank" rel="noreferrer">https://github.com/ChromeDevTools/devtools-frontend</a>, <a href="https://www.microsoftedgeinsider.com" target="_blank" rel="noreferrer">https://www.microsoftedgeinsider.com</a> para mais informações.</p><h3 id="visual-studio-code-1-10" tabindex="-1">Visual Studio Code 1.10+ <a class="header-anchor" href="#visual-studio-code-1-10" aria-label="Permalink to “Visual Studio Code 1.10+”">​</a></h3><ul><li>No painel Debug, clique no ícone de configurações para abrir <code>.vscode/launch.json</code>. Selecione &quot;Node.js&quot; para a configuração inicial.</li></ul><p>Veja <a href="https://github.com/microsoft/vscode" target="_blank" rel="noreferrer">https://github.com/microsoft/vscode</a> para mais informações.</p><h3 id="jetbrains-webstorm-e-outras-ides-jetbrains" tabindex="-1">JetBrains WebStorm e outras IDEs JetBrains <a class="header-anchor" href="#jetbrains-webstorm-e-outras-ides-jetbrains" aria-label="Permalink to “JetBrains WebStorm e outras IDEs JetBrains”">​</a></h3><ul><li>Crie uma nova configuração de depuração Node.js e clique em Debug. <code>--inspect</code> será usado por padrão para Node.js 7+. Para desativar, desmarque <code>js.debugger.node.use.inspect</code> no Registro da IDE. Para saber mais sobre como executar e depurar Node.js no WebStorm e em outras IDEs JetBrains, confira a <a href="https://www.jetbrains.com/help/webstorm/running-and-debugging-node-js.html" target="_blank" rel="noreferrer">ajuda online do WebStorm</a>.</li></ul><h3 id="chrome-remote-interface" tabindex="-1">chrome-remote-interface <a class="header-anchor" href="#chrome-remote-interface" aria-label="Permalink to “chrome-remote-interface”">​</a></h3><ul><li>Biblioteca para facilitar as conexões aos endpoints do <a href="https://chromedevtools.github.io/debugger-protocol-viewer/v8/" target="_blank" rel="noreferrer">Protocolo Inspector</a>. Veja <a href="https://github.com/cyrus-and/chrome-remote-interface" target="_blank" rel="noreferrer">https://github.com/cyrus-and/chrome-remote-interface</a> para mais informações.</li></ul><h3 id="gitpod" tabindex="-1">Gitpod <a class="header-anchor" href="#gitpod" aria-label="Permalink to “Gitpod”">​</a></h3><ul><li>Inicie uma configuração de depuração do Node.js a partir da view <code>Debug</code> ou pressione <code>F5</code>. Instruções detalhadas</li></ul><p>Veja <a href="https://www.gitpod.io" target="_blank" rel="noreferrer">https://www.gitpod.io</a> para mais informações.</p><h3 id="eclipse-ide-com-a-extensao-eclipse-wild-web-developer" tabindex="-1">Eclipse IDE com a extensão Eclipse Wild Web Developer <a class="header-anchor" href="#eclipse-ide-com-a-extensao-eclipse-wild-web-developer" aria-label="Permalink to “Eclipse IDE com a extensão Eclipse Wild Web Developer”">​</a></h3><ul><li>A partir de um arquivo <code>.js</code>, escolha <code>Debug As... &gt; Node program</code>, ou Crie uma Configuração de Depuração para anexar o depurador ao aplicativo Node.js em execução (já iniciado com <code>--inspect</code>).</li></ul><p>Veja <a href="https://eclipse.org/eclipseide" target="_blank" rel="noreferrer">https://eclipse.org/eclipseide</a> para mais informações.</p><h2 id="opcoes-de-linha-de-comando" tabindex="-1">Opções de linha de comando <a class="header-anchor" href="#opcoes-de-linha-de-comando" aria-label="Permalink to “Opções de linha de comando”">​</a></h2><p>A tabela a seguir lista o impacto de várias flags de tempo de execução na depuração:</p><table tabindex="0"><thead><tr><th>Flag</th><th>Significado</th></tr></thead><tbody><tr><td><code>--inspect</code></td><td>Ativa a depuração com o Inspector do Node.js. Escuta no endereço e porta padrão (127.0.0.1:9229)</td></tr><tr><td><code>--inspect-brk</code></td><td>Ativa a depuração com o Inspector do Node.js. Escuta no endereço e porta padrão (127.0.0.1:9229); Interrompe antes que o código do usuário comece</td></tr><tr><td><code>--inspect=[host:port]</code></td><td>Ativa o agente do inspector; Vincula ao endereço ou nome do host (padrão: 127.0.0.1); Escuta na porta (padrão: 9229)</td></tr><tr><td><code>--inspect-brk=[host:port]</code></td><td>Ativa o agente do inspector; Vincula ao endereço ou nome do host (padrão: 127.0.0.1); Escuta na porta (padrão: 9229); Interrompe antes que o código do usuário comece</td></tr><tr><td><code>--inspect-wait</code></td><td>Ativa o agente do inspector; Escuta no endereço e porta padrão (127.0.0.1:9229); Aguarda que o depurador seja anexado.</td></tr><tr><td><code>--inspect-wait=[host:port]</code></td><td>Ativa o agente do inspector; Vincula ao endereço ou nome do host (padrão: 127.0.0.1); Escuta na porta (padrão: 9229); Aguarda que o depurador seja anexado.</td></tr><tr><td><code>node inspect script.js</code></td><td>Gera um processo filho para executar o script do usuário sob a flag --inspect; e usa o processo principal para executar o depurador CLI.</td></tr><tr><td><code>node inspect --port=xxxx script.js</code></td><td>Gera um processo filho para executar o script do usuário sob a flag --inspect; e usa o processo principal para executar o depurador CLI. Escuta na porta (padrão: 9229)</td></tr></tbody></table><h2 id="habilitando-cenarios-de-depuracao-remota" tabindex="-1">Habilitando cenários de depuração remota <a class="header-anchor" href="#habilitando-cenarios-de-depuracao-remota" aria-label="Permalink to “Habilitando cenários de depuração remota”">​</a></h2><p>Recomendamos que você nunca deixe o depurador escutar em um endereço IP público. Se você precisar permitir conexões de depuração remota, recomendamos o uso de túneis SSH. Fornecemos o exemplo a seguir apenas para fins ilustrativos. Por favor, compreenda o risco de segurança de permitir acesso remoto a um serviço privilegiado antes de prosseguir.</p><p>Digamos que você esteja executando o Node.js em uma máquina remota, remote.example.com, que você deseja depurar. Nessa máquina, você deve iniciar o processo do node com o inspetor escutando apenas o localhost (o padrão).</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Agora, em sua máquina local de onde você deseja iniciar uma conexão de cliente de depuração, você pode configurar um túnel SSH:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9225:localhost:9229</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote.example.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Isso inicia uma sessão de túnel SSH onde uma conexão com a porta 9221 em sua máquina local será encaminhada para a porta 9229 em remote.example.com. Agora você pode anexar um depurador como o Chrome DevTools ou o Visual Studio Code a localhost:9221, que deve ser capaz de depurar como se o aplicativo Node.js estivesse sendo executado localmente.</p><h2 id="depurador-legado" tabindex="-1">Depurador Legado <a class="header-anchor" href="#depurador-legado" aria-label="Permalink to “Depurador Legado”">​</a></h2><p><strong>O depurador legado foi descontinuado a partir do Node.js 7.7.0. Por favor, use --inspect e Inspector em vez disso.</strong></p><p>Quando iniciado com as opções <code>--debug</code> ou <code>--debug-brk</code> na versão 7 e anteriores, o Node.js escuta comandos de depuração definidos pelo descontinuado V8 Debugging Protocol em uma porta TCP, por padrão <code>5858</code>. Qualquer cliente de depuração que fale este protocolo pode se conectar e depurar o processo em execução; alguns populares estão listados abaixo.</p><p>O V8 Debugging Protocol não é mais mantido ou documentado.</p><h3 id="depurador-embutido" tabindex="-1">Depurador Embutido <a class="header-anchor" href="#depurador-embutido" aria-label="Permalink to “Depurador Embutido”">​</a></h3><p>Inicie <code>node debug script_name.js</code> para iniciar seu script sob o depurador de linha de comando embutido. Seu script é iniciado em outro processo Node.js iniciado com a opção <code>--debug-brk</code>, e o processo Node.js inicial executa o script <code>_debugger.js</code> e se conecta ao seu alvo. Consulte <a href="/pt/nodejs/api/debugger">docs</a> para mais informações.</p><h3 id="node-inspector" tabindex="-1">node-inspector <a class="header-anchor" href="#node-inspector" aria-label="Permalink to “node-inspector”">​</a></h3><p>Depure o seu aplicativo Node.js com o Chrome DevTools usando um processo intermediário que traduz o <a href="https://chromedevtools.github.io/debugger-protocol-viewer/v8/" target="_blank" rel="noreferrer">Inspector Protocol</a> usado no Chromium para o protocolo V8 Debugger usado no Node.js. Veja <a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="noreferrer">https://github.com/node-inspector/node-inspector</a> para mais informações.</p>`,53)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};