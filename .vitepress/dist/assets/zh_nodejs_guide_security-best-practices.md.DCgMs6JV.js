import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 应用程序的安全最佳实践","description":"本文提供了一个全面指南，用于保护 Node.js 应用程序，涵盖了威胁建模、最佳实践以及缓解常见漏洞的方法，例如拒绝服务、DNS 重绑定和敏感信息泄露。","frontmatter":{"title":"Node.js 应用程序的安全最佳实践","description":"本文提供了一个全面指南，用于保护 Node.js 应用程序，涵盖了威胁建模、最佳实践以及缓解常见漏洞的方法，例如拒绝服务、DNS 重绑定和敏感信息泄露。","head":[["meta",{"name":"og:title","content":"Node.js 应用程序的安全最佳实践 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"本文提供了一个全面指南，用于保护 Node.js 应用程序，涵盖了威胁建模、最佳实践以及缓解常见漏洞的方法，例如拒绝服务、DNS 重绑定和敏感信息泄露。"}],["meta",{"name":"twitter:title","content":"Node.js 应用程序的安全最佳实践 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"本文提供了一个全面指南，用于保护 Node.js 应用程序，涵盖了威胁建模、最佳实践以及缓解常见漏洞的方法，例如拒绝服务、DNS 重绑定和敏感信息泄露。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/guide/security-best-practices"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/guide/security-best-practices"}]]},"headers":[],"relativePath":"zh/nodejs/guide/security-best-practices.md","filePath":"zh/nodejs/guide/security-best-practices.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/guide/security-best-practices.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="安全最佳实践" tabindex="-1">安全最佳实践 <a class="header-anchor" href="#安全最佳实践" aria-label="Permalink to “安全最佳实践”">​</a></h1><h3 id="意图" tabindex="-1">意图 <a class="header-anchor" href="#意图" aria-label="Permalink to “意图”">​</a></h3><p>本文档旨在扩展当前的<a href="/zh/nodejs/guide/security-best-practices#threat-model">威胁模型</a>，并提供关于如何保护 Node.js 应用程序的详细指南。</p><h2 id="文档内容" tabindex="-1">文档内容 <a class="header-anchor" href="#文档内容" aria-label="Permalink to “文档内容”">​</a></h2><ul><li>最佳实践：一种简化和凝练的方式来查看最佳实践。我们可以使用<a href="https://github.com/nodejs/security-wg/issues/488" target="_blank" rel="noreferrer">这个 issue</a> 或<a href="https://github.com/goldbergyoni/nodebestpractices" target="_blank" rel="noreferrer">这个指南</a> 作为起点。重要的是要注意，本文档专门针对 Node.js，如果您正在寻找更广泛的内容，请考虑 <a href="https://github.com/ossf/wg-best-practices-os-developers" target="_blank" rel="noreferrer">OSSF 最佳实践</a>。</li><li>攻击解释：用简单的英语，并尽可能用一些代码示例，来说明和记录我们在威胁模型中提到的攻击。</li><li>第三方库：定义威胁（拼写错误攻击、恶意包...）和关于 node 模块依赖等的最佳实践...</li></ul><h2 id="威胁列表" tabindex="-1">威胁列表 <a class="header-anchor" href="#威胁列表" aria-label="Permalink to “威胁列表”">​</a></h2><h3 id="http-服务器拒绝服务-cwe-400" tabindex="-1">HTTP 服务器拒绝服务 (CWE-400) <a class="header-anchor" href="#http-服务器拒绝服务-cwe-400" aria-label="Permalink to “HTTP 服务器拒绝服务 (CWE-400)”">​</a></h3><p>这是一种攻击，由于处理传入 HTTP 请求的方式，应用程序变得不可用于其设计的目的。这些请求不必由恶意行为者故意制作：配置错误或有错误的客户端也可能向服务器发送导致拒绝服务的请求模式。</p><p>HTTP 请求由 Node.js HTTP 服务器接收，并通过注册的请求处理程序传递给应用程序代码。服务器不解析请求正文的内容。因此，在请求正文的内容传递给请求处理程序之后引起的任何 DoS 都不是 Node.js 本身的漏洞，因为正确处理它是应用程序代码的责任。</p><p>确保 WebServer 正确处理套接字错误，例如，当创建服务器时没有错误处理程序，它将容易受到 DoS 攻击。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:net&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // socket.on(&#39;error&#39;, console.error)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 这可以防止服务器崩溃</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Echo server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(socket)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0.0.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><em>如果执行了错误的请求，服务器可能会崩溃。</em></p><p>Slowloris 是一种并非由请求内容引起的 DoS 攻击的例子。 在此攻击中，HTTP 请求发送缓慢且碎片化，一次发送一个片段。在完整请求传递之前，服务器将保持专用于正在进行的请求的资源。 如果同时发送足够的这些请求，并发连接的数量将很快达到最大值，从而导致拒绝服务。 这就是攻击如何不依赖于请求的内容，而是依赖于发送到服务器的请求的定时和模式。</p><h4 id="缓解措施" tabindex="-1">缓解措施 <a class="header-anchor" href="#缓解措施" aria-label="Permalink to “缓解措施”">​</a></h4><ul><li>使用反向代理来接收并将请求转发到 Node.js 应用程序。反向代理可以提供缓存、负载均衡、IP 黑名单等功能，从而降低 DoS 攻击的有效性。</li><li>正确配置服务器超时，以便可以丢弃空闲或请求到达速度过慢的连接。请参阅 <code>http.Server</code> 中的不同超时设置，特别是 <code>headersTimeout</code>、<code>requestTimeout</code>、<code>timeout</code> 和 <code>keepAliveTimeout</code>。</li><li>限制每个主机和总共的打开套接字数量。请参阅 <a href="/zh/nodejs/api/http">http 文档</a>，特别是 <code>agent.maxSockets</code>、<code>agent.maxTotalSockets</code>、<code>agent.maxFreeSockets</code> 和 <code>server.maxRequestsPerSocket</code>。</li></ul><h3 id="dns-重绑定-cwe-346" tabindex="-1">DNS 重绑定 (CWE-346) <a class="header-anchor" href="#dns-重绑定-cwe-346" aria-label="Permalink to “DNS 重绑定 (CWE-346)”">​</a></h3><p>这是一种攻击，它可以使用 <a href="/zh/nodejs/guide/debugging-nodejs">--inspect 开关</a> 针对启用调试检查器的 Node.js 应用程序。</p><p>由于在 Web 浏览器中打开的网站可以发出 WebSocket 和 HTTP 请求，因此它们可以针对本地运行的调试检查器。这通常会被现代浏览器实现的<a href="/zh/nodejs/guide/debugging-nodejs">同源策略</a>阻止，该策略禁止脚本访问来自不同来源的资源（这意味着恶意网站无法读取从本地 IP 地址请求的数据）。</p><p>但是，通过 DNS 重绑定，攻击者可以暂时控制其请求的来源，使其看起来像是来自本地 IP 地址。这是通过控制一个网站和用于解析其 IP 地址的 DNS 服务器来实现的。有关更多详细信息，请参阅 <a href="https://en.wikipedia.org/wiki/DNS_rebinding" target="_blank" rel="noreferrer">DNS 重绑定 wiki</a>。</p><h4 id="缓解措施-1" tabindex="-1">缓解措施 <a class="header-anchor" href="#缓解措施-1" aria-label="Permalink to “缓解措施”">​</a></h4><ul><li>通过附加 <code>process.on(‘SIGUSR1’, …)</code> 监听器到它，在 SIGUSR1 信号上禁用检查器。</li><li>不要在生产环境中运行检查器协议。</li></ul><h3 id="将敏感信息暴露给未经授权的行为者-cwe-552" tabindex="-1">将敏感信息暴露给未经授权的行为者 (CWE-552) <a class="header-anchor" href="#将敏感信息暴露给未经授权的行为者-cwe-552" aria-label="Permalink to “将敏感信息暴露给未经授权的行为者 (CWE-552)”">​</a></h3><p>当前目录中包含的所有文件和文件夹都会在软件包发布期间推送到 npm 注册表。</p><p>有一些机制可以通过使用 <code>.npmignore</code> 和 <code>.gitignore</code> 定义一个黑名单，或者在 <code>package.json</code> 中定义一个白名单来控制此行为。</p><h4 id="缓解措施-2" tabindex="-1">缓解措施 <a class="header-anchor" href="#缓解措施-2" aria-label="Permalink to “缓解措施”">​</a></h4><ul><li>使用 <code>npm publish --dry-run</code> 列出所有要发布的文件。 确保在发布软件包之前检查内容。</li><li>创建和维护忽略文件（如 <code>.gitignore</code> 和 <code>.npmignore</code>）也很重要。 通过这些文件，您可以指定不应发布哪些文件/文件夹。 <code>package.json</code> 中的 <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#files" target="_blank" rel="noreferrer">files 属性</a> 允许反向操作 – 允许列表。</li><li>如果发生泄露，请务必<a href="https://docs.npmjs.com/unpublishing-packages-from-the-registry" target="_blank" rel="noreferrer">取消发布软件包</a>。</li></ul><h3 id="http-请求走私-cwe-444" tabindex="-1">HTTP 请求走私 (CWE-444) <a class="header-anchor" href="#http-请求走私-cwe-444" aria-label="Permalink to “HTTP 请求走私 (CWE-444)”">​</a></h3><p>这是一种涉及两个 HTTP 服务器（通常是代理和 Node.js 应用程序）的攻击。 客户端发送一个 HTTP 请求，该请求首先通过前端服务器（代理），然后重定向到后端服务器（应用程序）。 当前端和后端以不同的方式解释模糊的 HTTP 请求时，攻击者有可能发送前端看不到但后端会看到的恶意消息，从而有效地将恶意消息“走私”通过代理服务器。</p><p>有关更详细的描述和示例，请参见 <a href="https://cwe.mitre.org/data/definitions/444.html" target="_blank" rel="noreferrer">CWE-444</a>。</p><p>由于此攻击取决于 Node.js 以不同于（任意）HTTP 服务器的方式解释 HTTP 请求，因此成功的攻击可能是由于 Node.js、前端服务器或两者中的漏洞造成的。 如果 Node.js 解释请求的方式与 HTTP 规范一致（请参阅 <a href="https://datatracker.ietf.org/doc/html/rfc7230#section-3" target="_blank" rel="noreferrer">RFC7230</a>），则它不被认为是 Node.js 中的漏洞。</p><h4 id="缓解措施-3" tabindex="-1">缓解措施 <a class="header-anchor" href="#缓解措施-3" aria-label="Permalink to “缓解措施”">​</a></h4><ul><li>创建 HTTP 服务器时，请勿使用 <code>insecureHTTPParser</code> 选项。</li><li>配置前端服务器以标准化模糊的请求。</li><li>持续监控 Node.js 和所选前端服务器中新的 HTTP 请求走私漏洞。</li><li>如果可能，请使用端到端的 HTTP/2 并禁用 HTTP 降级。</li></ul><h3 id="通过时间攻击暴露信息-cwe-208" tabindex="-1">通过时间攻击暴露信息 (CWE-208) <a class="header-anchor" href="#通过时间攻击暴露信息-cwe-208" aria-label="Permalink to “通过时间攻击暴露信息 (CWE-208)”">​</a></h3><p>这是一种攻击，攻击者可以通过测量应用程序响应请求所需的时间来了解潜在的敏感信息。 这种攻击并非 Node.js 独有，几乎可以针对所有运行时环境。</p><p>当应用程序在时间敏感的操作（例如，分支）中使用密钥时，这种攻击是可能的。 考虑在典型应用程序中处理身份验证。 在这里，基本身份验证方法包括电子邮件和密码作为凭据。 用户信息是从用户提供的输入中检索的，理想情况下是从 DBMS 中检索的。 检索到用户信息后，将密码与从数据库检索到的用户信息进行比较。 对于相同长度的值，使用内置的字符串比较需要更长的时间。 当此比较运行在可接受的范围内时，会无意中增加请求的响应时间。 通过比较请求响应时间，攻击者可以在大量请求中猜测密码的长度和值。</p><h4 id="缓解措施-4" tabindex="-1">缓解措施 <a class="header-anchor" href="#缓解措施-4" aria-label="Permalink to “缓解措施”">​</a></h4><ul><li>crypto API 公开了一个函数 <code>timingSafeEqual</code>，用于使用恒定时间算法比较实际和预期的敏感值。</li><li>对于密码比较，您可以使用 <a href="/zh/nodejs/api/crypto">scrypt</a>，它也可以在原生 crypto 模块上使用。</li><li>更一般地说，应避免在可变时间操作中使用密钥。 这包括基于密钥进行分支，以及当攻击者可能位于同一基础设施上（例如，同一云机器）时，使用密钥作为内存索引。 用 JavaScript 编写恒定时间代码很困难（部分原因是 JIT）。 对于加密应用程序，请使用内置的 crypto API 或 WebAssembly（对于本地未实现的算法）。</li></ul><h3 id="恶意第三方模块-cwe-1357" tabindex="-1">恶意第三方模块 (CWE-1357) <a class="header-anchor" href="#恶意第三方模块-cwe-1357" aria-label="Permalink to “恶意第三方模块 (CWE-1357)”">​</a></h3><p>目前，在 Node.js 中，任何包都可以访问强大的资源，例如网络访问。 此外，由于它们也可以访问文件系统，因此它们可以将任何数据发送到任何地方。</p><p>运行到节点进程中的所有代码都有能力通过使用 <code>eval()</code>（或其等价物）加载和运行额外的任意代码。 所有具有文件系统写入权限的代码都可以通过写入新的或现有的加载文件来实现相同的目的。</p><p>Node.js 有一个实验性的¹ <a href="/zh/nodejs/api/permissions">策略机制</a>，用于将加载的资源声明为不受信任或受信任。 但是，默认情况下未启用此策略。 请务必锁定依赖项版本，并使用常用工作流程或 npm 脚本运行自动漏洞检查。 在安装软件包之前，请确保维护该软件包并包含您期望的所有内容。 请注意，GitHub 源代码并不总是与发布的源代码相同，请在 <code>node_modules</code> 中进行验证。</p><h4 id="供应链攻击" tabindex="-1">供应链攻击 <a class="header-anchor" href="#供应链攻击" aria-label="Permalink to “供应链攻击”">​</a></h4><p>针对 Node.js 应用程序的供应链攻击是指其依赖项（直接或传递依赖）之一受到破坏。这可能是由于应用程序对依赖项的规范过于宽松（允许不必要的更新）和/或规范中的常见拼写错误（容易受到<a href="https://en.wikipedia.org/wiki/Typosquatting" target="_blank" rel="noreferrer">域名抢注</a>的影响）。</p><p>控制上游软件包的攻击者可以发布一个包含恶意代码的新版本。如果 Node.js 应用程序依赖于该软件包，但未严格限制使用哪个版本是安全的，则该软件包可以自动更新到最新的恶意版本，从而危及应用程序。</p><p>在 <code>package.json</code> 文件中指定的依赖项可以具有精确的版本号或范围。但是，当将依赖项锁定到精确版本时，其传递依赖项本身并未锁定。这仍然使应用程序容易受到不必要/意外的更新。</p><p>可能的攻击向量：</p><ul><li>域名抢注攻击</li><li>Lockfile 中毒</li><li>受损的维护者</li><li>恶意软件包</li><li>依赖项混淆</li></ul><h5 id="防御措施" tabindex="-1">防御措施 <a class="header-anchor" href="#防御措施" aria-label="Permalink to “防御措施”">​</a></h5><ul><li>使用 <code>--ignore-scripts</code> 阻止 npm 执行任意脚本 <ul><li>此外，您可以使用 <code>npm config set ignore-scripts true</code> 全局禁用它</li></ul></li><li>将依赖项版本固定到特定的不可变版本，而不是范围或来自可变源的版本。</li><li>使用 lockfile，它会固定每个依赖项（直接的和传递的）。 <ul><li>使用 <a href="https://blog.ulisesgascon.com/lockfile-posioned" target="_blank" rel="noreferrer">Lockfile 中毒的缓解措施</a>。</li></ul></li><li>使用 CI 自动化检查新漏洞，使用诸如 <a href="https://www.npmjs.com/package/npm-audit" target="_blank" rel="noreferrer">npm-audit</a> 之类的工具。 <ul><li>诸如 <code>Socket</code> 之类的工具可用于使用静态分析来分析软件包，以查找风险行为，例如网络或文件系统访问。</li></ul></li><li>使用 <code>npm ci</code> 而不是 <code>npm install</code>。这强制执行 lockfile，因此 lockfile 和 <code>package.json</code> 文件之间的不一致会导致错误（而不是默默地忽略 lockfile 而倾向于 <code>package.json</code>）。</li><li>仔细检查 <code>package.json</code> 文件，查找依赖项名称中的错误/拼写错误。</li></ul><h3 id="内存访问违规-cwe-284" tabindex="-1">内存访问违规 (CWE-284) <a class="header-anchor" href="#内存访问违规-cwe-284" aria-label="Permalink to “内存访问违规 (CWE-284)”">​</a></h3><p>基于内存或堆的攻击依赖于内存管理错误和可利用的内存分配器的组合。像所有运行时一样，如果您的项目在共享机器上运行，Node.js 很容易受到这些攻击。 使用安全的堆有助于防止由于指针溢出和下溢导致敏感信息泄露。</p><p>不幸的是，Windows 上没有安全的堆。 更多信息可以在 Node.js <a href="/zh/nodejs/api/cli">secure-heap 文档</a>中找到。</p><h4 id="缓解措施-5" tabindex="-1">缓解措施 <a class="header-anchor" href="#缓解措施-5" aria-label="Permalink to “缓解措施”">​</a></h4><ul><li>根据您的应用程序使用 <code>--secure-heap=n</code>，其中 n 是分配的最大字节大小。</li><li>不要在共享机器上运行您的生产应用程序。</li></ul><h3 id="monkey-patching-cwe-349" tabindex="-1">Monkey Patching (CWE-349) <a class="header-anchor" href="#monkey-patching-cwe-349" aria-label="Permalink to “Monkey Patching (CWE-349)”">​</a></h3><p>Monkey patching 指的是在运行时修改属性以改变现有行为。 例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// eslint-disable-next-line no-extend-native</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // overriding the global [].push</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="缓解措施-6" tabindex="-1">缓解措施 <a class="header-anchor" href="#缓解措施-6" aria-label="Permalink to “缓解措施”">​</a></h4><p><code>--frozen-intrinsics</code> 标志启用了实验性的¹冻结内建函数，这意味着所有内置的 JavaScript 对象和函数都被递归冻结。 因此，以下代码段将不会覆盖 <code>Array.prototype.push</code> 的默认行为</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// eslint-disable-next-line no-extend-native</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // overriding the global [].push</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uncaught:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError &lt;Object &lt;Object &lt;[Object: null prototype] {}&gt;&gt;&gt;:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Cannot assign to read only property &#39;push&#39; of object &#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>但是，重要的是要提到您仍然可以使用 <code>globalThis</code> 定义新的全局变量并替换现有的全局变量</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalThis.foo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> still</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> define</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> globals</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalThis.Array</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> However,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> also</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> replace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> existing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> globals</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>因此，可以使用 <code>Object.freeze(globalThis)</code> 来保证不会替换任何全局变量。</p><h3 id="原型污染攻击-cwe-1321" tabindex="-1">原型污染攻击 (CWE-1321) <a class="header-anchor" href="#原型污染攻击-cwe-1321" aria-label="Permalink to “原型污染攻击 (CWE-1321)”">​</a></h3><p>原型污染指的是通过滥用 _<em>proto</em>、_constructor、prototype 以及从内置原型继承的其他属性来修改或将属性注入 Javascript 语言项目的可能性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;__proto__&quot;: { &quot;polluted&quot;: true}}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, a, data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c.polluted) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Potential DoS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;__proto__&quot;: null}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, data2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasOwnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uncaught TypeError: d.hasOwnProperty is not a function</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这是从 JavaScript 语言继承的潜在漏洞。</p><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to “示例”">​</a></h4><ul><li><a href="https://www.cvedetails.com/cve/CVE-2022-21824/" target="_blank" rel="noreferrer">CVE-2022-21824</a> (Node.js)</li><li><a href="https://www.cvedetails.com/cve/CVE-2018-3721/" target="_blank" rel="noreferrer">CVE-2018-3721</a> (第三方库: Lodash)</li></ul><h4 id="缓解措施-7" tabindex="-1">缓解措施 <a class="header-anchor" href="#缓解措施-7" aria-label="Permalink to “缓解措施”">​</a></h4><ul><li>避免<a href="https://gist.github.com/DaniAkash/b3d7159fddcff0a9ee035bd10e34b277#file-unsafe-merge-js" target="_blank" rel="noreferrer">不安全的递归合并</a>，参见 <a href="https://www.cve.org/CVERecord?id=CVE-2018-16487" target="_blank" rel="noreferrer">CVE-2018-16487</a>。</li><li>为外部/不受信任的请求实现 JSON Schema 验证。</li><li>使用 <code>Object.create(null)</code> 创建没有原型链的对象。</li><li>冻结原型链: <code>Object.freeze(MyObject.prototype)</code>。</li><li>使用 <code>--disable-proto</code> 标志禁用 <code>Object.prototype.__proto__</code> 属性。</li><li>检查属性是否直接存在于对象上，而不是从原型链上获取，使用 <code>Object.hasOwn(obj, keyFromObj)</code>。</li><li>避免使用 <code>Object.prototype</code> 中的方法。</li></ul><h3 id="不受控制的搜索路径元素-cwe-427" tabindex="-1">不受控制的搜索路径元素 (CWE-427) <a class="header-anchor" href="#不受控制的搜索路径元素-cwe-427" aria-label="Permalink to “不受控制的搜索路径元素 (CWE-427)”">​</a></h3><p>Node.js 遵循 <a href="/zh/nodejs/api/modules">模块解析算法</a> 加载模块。 因此，它假定请求（require）模块的目录是可信的。</p><p>由此，意味着期望以下应用程序行为。假设以下目录结构：</p><ul><li>app/ <ul><li>server.js</li><li>auth.js</li><li>auth</li></ul></li></ul><p>如果 server.js 使用 <code>require(&#39;./auth&#39;)</code>，它将遵循模块解析算法并加载 auth 而不是 <code>auth.js</code>。</p><h4 id="缓解措施-8" tabindex="-1">缓解措施 <a class="header-anchor" href="#缓解措施-8" aria-label="Permalink to “缓解措施”">​</a></h4><p>使用实验性的¹ <a href="/zh/nodejs/api/permissions">带有完整性检查的策略机制</a> 可以避免上述威胁。 对于上述目录，可以使用以下 <code>policy.json</code></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./app/auth.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;integrity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-iuGZ6SFVFpMuHUcJciQTIKpIyaQVigMZlvg9Lx66HV8=&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./app/server.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;./auth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./app/auth.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;integrity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-NPtLCQ0ntPPWgfVEgX46ryTNpdvTWdQPoZO3kHo0bKI=&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>因此，当需要 auth 模块时，系统将验证完整性，如果与预期不符，则会抛出错误。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">»</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --experimental-policy=policy.json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app/server.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node:internal/policy/sri:65</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      throw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ERR_SRI_PARSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">str,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> str[prevIndex],</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prevIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SyntaxError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ERR_SRI_PARSE]: Subresource Integrity string </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-iuGZ6SFVFpMuHUcJciQTIKpIyaQVigMZlvg9Lx66HV8=%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> had an unexpected </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> at position 51</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NodeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/errors:393:5)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Object.parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/policy/sri:65:13)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> processEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/policy/manifest:581:38)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Manifest.assertIntegrity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/policy/manifest:588:32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1119:21)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._extensions..js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1213:10)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module.load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1037:32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:878:12)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module.require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1061:19)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/helpers:99:18) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  code:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_SRI_PARSE&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>请注意，始终建议使用 <code>--policy-integrity</code> 以避免策略突变。</p><h2 id="在生产环境中使用实验性功能" tabindex="-1">在生产环境中使用实验性功能 <a class="header-anchor" href="#在生产环境中使用实验性功能" aria-label="Permalink to “在生产环境中使用实验性功能”">​</a></h2><p>不建议在生产环境中使用实验性功能。 实验性功能可能会在需要时遭受重大更改，并且其功能在安全上不稳定。 尽管如此，我们非常感谢您的反馈。</p><h2 id="openssf-工具" tabindex="-1">OpenSSF 工具 <a class="header-anchor" href="#openssf-工具" aria-label="Permalink to “OpenSSF 工具”">​</a></h2><p><a href="https://www.openssf.org" target="_blank" rel="noreferrer">OpenSSF</a> 正在领导一些非常有用的倡议，特别是如果您计划发布 npm 包。 这些倡议包括：</p><ul><li><a href="https://securityscorecards.dev/" target="_blank" rel="noreferrer">OpenSSF Scorecard</a> Scorecard 使用一系列自动化的安全风险检查来评估开源项目。 您可以使用它来主动评估代码库中的漏洞和依赖项，并就接受漏洞做出明智的决定。</li><li><a href="https://bestpractices.coreinfrastructure.org/en" target="_blank" rel="noreferrer">OpenSSF 最佳实践徽章计划</a> 项目可以通过描述它们如何遵守每个最佳实践来自愿进行自我认证。 这将生成一个可以添加到项目的徽章。</li></ul>`,87)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};