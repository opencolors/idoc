import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Документация по пакетам Node.js","description":"Изучите официальную документацию Node.js по пакетам, включая управление, создание и публикацию пакетов, а также детали о package.json, зависимостях и инструментах управления пакетами.","frontmatter":{"title":"Документация по пакетам Node.js","description":"Изучите официальную документацию Node.js по пакетам, включая управление, создание и публикацию пакетов, а также детали о package.json, зависимостях и инструментах управления пакетами.","head":[["meta",{"name":"og:title","content":"Документация по пакетам Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Изучите официальную документацию Node.js по пакетам, включая управление, создание и публикацию пакетов, а также детали о package.json, зависимостях и инструментах управления пакетами."}],["meta",{"name":"twitter:title","content":"Документация по пакетам Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Изучите официальную документацию Node.js по пакетам, включая управление, создание и публикацию пакетов, а также детали о package.json, зависимостях и инструментах управления пакетами."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/api/packages"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/api/packages"}]]},"headers":[],"relativePath":"ru/nodejs/api/packages.md","filePath":"ru/nodejs/api/packages.md","lastUpdated":null}`),a={name:`ru/nodejs/api/packages.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="modules-packages" tabindex="-1">Модули: Пакеты <a class="header-anchor" href="#modules-packages" aria-label="Permalink to “Модули: Пакеты”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v14.13.0, v12.20.0</td><td>Добавлена поддержка шаблонов <code>&quot;exports&quot;</code>.</td></tr><tr><td>v14.6.0, v12.19.0</td><td>Добавлено поле <code>&quot;imports&quot;</code> пакета.</td></tr><tr><td>v13.7.0, v12.17.0</td><td>Сняты флаги условного экспорта.</td></tr><tr><td>v13.7.0, v12.16.0</td><td>Удалена опция <code>--experimental-conditional-exports</code>. В версии 12.16.0 условный экспорт по-прежнему находится за флагом <code>--experimental-modules</code>.</td></tr><tr><td>v13.6.0, v12.16.0</td><td>Снят флаг самоссылки на пакет с использованием его имени.</td></tr><tr><td>v12.7.0</td><td>Представлено поле <code>&quot;exports&quot;</code> в <code>package.json</code> в качестве более мощной альтернативы классическому полю <code>&quot;main&quot;</code>.</td></tr><tr><td>v12.0.0</td><td>Добавлена поддержка ES-модулей, использующих расширение файла <code>.js</code>, через поле <code>&quot;type&quot;</code> в <code>package.json</code>.</td></tr></tbody></table></div><h2 id="introduction" tabindex="-1">Введение <a class="header-anchor" href="#introduction" aria-label="Permalink to “Введение”">​</a></h2><p>Пакет — это древовидная структура каталогов, описанная файлом <code>package.json</code>. Пакет состоит из каталога, содержащего файл <code>package.json</code>, и всех подкаталогов до следующего каталога, содержащего другой файл <code>package.json</code>, или каталога с именем <code>node_modules</code>.</p><p>Эта страница содержит рекомендации для авторов пакетов, пишущих файлы <code>package.json</code>, а также справочник по полям <a href="/ru/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a>, определённым Node.js.</p><h2 id="determining-module-system" tabindex="-1">Определение модульной системы <a class="header-anchor" href="#determining-module-system" aria-label="Permalink to “Определение модульной системы”">​</a></h2><h3 id="introduction_1" tabindex="-1">Введение <a class="header-anchor" href="#introduction_1" aria-label="Permalink to “Введение”">​</a></h3><p>Node.js будет обрабатывать следующее как <a href="/ru/nodejs/api/esm">ES-модули</a>, когда передаётся в <code>node</code> в качестве начального ввода, или когда на них ссылаются операторы <code>import</code> или выражения <code>import()</code>:</p><ul><li>Файлы с расширением <code>.mjs</code>.</li><li>Файлы с расширением <code>.js</code>, когда ближайший родительский файл <code>package.json</code> содержит поле верхнего уровня <a href="/ru/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> со значением <code>&quot;module&quot;</code>.</li><li>Строки, переданные в качестве аргумента в <code>--eval</code> или переданные в <code>node</code> через <code>STDIN</code> с флагом <code>--input-type=module</code>.</li><li>Код, содержащий синтаксис, который успешно разбирается только как <a href="/ru/nodejs/api/esm">ES-модули</a>, например, операторы <code>import</code> или <code>export</code> или <code>import.meta</code>, без явного указания того, как его следует интерпретировать. Явные маркеры — это расширения <code>.mjs</code> или <code>.cjs</code>, поля <code>&quot;type&quot;</code> в <code>package.json</code> со значениями <code>&quot;module&quot;</code> или <code>&quot;commonjs&quot;</code> или флаг <code>--input-type</code>. Динамические выражения <code>import()</code> поддерживаются как в CommonJS, так и в ES-модулях и не заставят файл обрабатываться как ES-модуль. См. <a href="/ru/nodejs/api/packages#syntax-detection">Определение синтаксиса</a>.</li></ul><p>Node.js будет обрабатывать следующее как <a href="/ru/nodejs/api/modules">CommonJS</a>, когда передаётся в <code>node</code> в качестве начального ввода, или когда на них ссылаются операторы <code>import</code> или выражения <code>import()</code>:</p><ul><li>Файлы с расширением <code>.cjs</code>.</li><li>Файлы с расширением <code>.js</code>, когда ближайший родительский файл <code>package.json</code> содержит поле верхнего уровня <a href="/ru/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> со значением <code>&quot;commonjs&quot;</code>.</li><li>Строки, переданные в качестве аргумента в <code>--eval</code> или <code>--print</code>, или переданные в <code>node</code> через <code>STDIN</code> с флагом <code>--input-type=commonjs</code>.</li><li>Файлы с расширением <code>.js</code> без родительского файла <code>package.json</code> или где ближайший родительский файл <code>package.json</code> не имеет поля <code>type</code>, и где код может быть успешно оценён как CommonJS. Другими словами, Node.js сначала пытается запустить такие «двусмысленные» файлы как CommonJS, и повторно пытается оценить их как ES-модули, если оценка как CommonJS завершается неудачей, поскольку анализатор обнаружил синтаксис ES-модуля.</li></ul><p>Написание синтаксиса ES-модуля в «двусмысленных» файлах влечёт за собой снижение производительности, поэтому рекомендуется, чтобы авторы по возможности были явными. В частности, авторы пакетов всегда должны включать поле <a href="/ru/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> в свои файлы <code>package.json</code>, даже в пакетах, где все источники являются CommonJS. Явное указание типа пакета обезопасит пакет на случай, если тип Node.js по умолчанию когда-либо изменится, а также облегчит работу инструментам сборки и загрузчикам при определении того, как следует интерпретировать файлы в пакете.</p><h3 id="syntax-detection" tabindex="-1">Обнаружение синтаксиса <a class="header-anchor" href="#syntax-detection" aria-label="Permalink to “Обнаружение синтаксиса”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v22.7.0</td><td>Обнаружение синтаксиса включено по умолчанию.</td></tr><tr><td>v21.1.0, v20.10.0</td><td>Добавлено в: v21.1.0, v20.10.0</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[Стабильно: 1 - Экспериментально]</p><p><a href="/ru/nodejs/api/documentation#stability-index">Стабильно: 1</a> <a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 1</a>.2 - Кандидат на выпуск</p></div><p>Node.js будет анализировать исходный код неоднозначного ввода, чтобы определить, содержит ли он синтаксис модуля ES; если такой синтаксис обнаружен, ввод будет рассматриваться как модуль ES.</p><p>Неоднозначный ввод определяется как:</p><ul><li>Файлы с расширением <code>.js</code> или без расширения; и либо без управляющего файла <code>package.json</code>, либо с файлом, в котором отсутствует поле <code>type</code>.</li><li>Строковый ввод (<code>--eval</code> или <code>STDIN</code>), когда <code>--input-type</code> не указан.</li></ul><p>Синтаксис модуля ES определяется как синтаксис, который выдаст ошибку при оценке как CommonJS. Это включает в себя следующее:</p><ul><li>Операторы <code>import</code> (но <em>не</em> выражения <code>import()</code>, которые допустимы в CommonJS).</li><li>Операторы <code>export</code>.</li><li>Ссылки на <code>import.meta</code>.</li><li><code>await</code> на верхнем уровне модуля.</li><li>Лексические переобъявления переменных-обёрток CommonJS (<code>require</code>, <code>module</code>, <code>exports</code>, <code>__dirname</code>, <code>__filename</code>).</li></ul><h3 id="modules-loaders" tabindex="-1">Загрузчики модулей <a class="header-anchor" href="#modules-loaders" aria-label="Permalink to “Загрузчики модулей”">​</a></h3><p>Node.js имеет две системы для разрешения спецификатора и загрузки модулей.</p><p>Существует загрузчик модулей CommonJS:</p><ul><li>Он полностью синхронный.</li><li>Он отвечает за обработку вызовов <code>require()</code>.</li><li>Его можно исправлять (monkey patchable).</li><li>Он поддерживает <a href="/ru/nodejs/api/modules#folders-as-modules">папки как модули</a>.</li><li>При разрешении спецификатора, если точное соответствие не найдено, он попытается добавить расширения (<code>.js</code>, <code>.json</code> и, наконец, <code>.node</code>), а затем попытается разрешить <a href="/ru/nodejs/api/modules#folders-as-modules">папки как модули</a>.</li><li>Он рассматривает <code>.json</code> как текстовые файлы JSON.</li><li>Файлы <code>.node</code> интерпретируются как скомпилированные модули-дополнения, загруженные с помощью <code>process.dlopen()</code>.</li><li>Он рассматривает все файлы без расширений <code>.json</code> или <code>.node</code> как текстовые файлы JavaScript.</li><li>Он может использоваться только для <a href="/ru/nodejs/api/modules#loading-ecmascript-modules-using-require">загрузки модулей ECMAScript из модулей CommonJS</a>, если граф модулей синхронный (то есть не содержит <code>await</code> верхнего уровня). При использовании для загрузки текстового файла JavaScript, который не является модулем ECMAScript, файл будет загружен как модуль CommonJS.</li></ul><p>Существует загрузчик модулей ECMAScript:</p><ul><li>Он асинхронный, если только он не используется для загрузки модулей для <code>require()</code>.</li><li>Он отвечает за обработку операторов <code>import</code> и выражений <code>import()</code>.</li><li>Его нельзя исправлять (monkey patchable), его можно настроить с помощью <a href="/ru/nodejs/api/esm#loaders">хуков загрузчика</a>.</li><li>Он не поддерживает папки как модули, индексы каталогов (например, <code>&#39;./startup/index.js&#39;</code>) должны быть указаны полностью.</li><li>Он не выполняет поиск расширений. Расширение файла должно быть указано, когда спецификатор является относительным или абсолютным URL-адресом файла.</li><li>Он может загружать модули JSON, но требуется атрибут типа импорта.</li><li>Он принимает только расширения <code>.js</code>, <code>.mjs</code> и <code>.cjs</code> для текстовых файлов JavaScript.</li><li>Он может использоваться для загрузки модулей JavaScript CommonJS. Такие модули передаются через <code>cjs-module-lexer</code>, чтобы попытаться идентифицировать именованные экспорты, которые доступны, если их можно определить с помощью статического анализа. URL-адреса импортированных модулей CommonJS преобразуются в абсолютные пути, а затем загружаются через загрузчик модулей CommonJS.</li></ul><h3 id="packagejson-and-file-extensions" tabindex="-1"><code>package.json</code> и расширения файлов <a class="header-anchor" href="#packagejson-and-file-extensions" aria-label="Permalink to “package.json и расширения файлов”">​</a></h3><p>Внутри пакета поле <a href="/ru/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> в <a href="/ru/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> определяет, как Node.js должен интерпретировать <code>.js</code> файлы. Если в файле <code>package.json</code> отсутствует поле <code>&quot;type&quot;</code>, <code>.js</code> файлы обрабатываются как <a href="/ru/nodejs/api/modules">CommonJS</a>.</p><p>Значение <code>&quot;module&quot;</code> поля <code>&quot;type&quot;</code> в <code>package.json</code> указывает Node.js интерпретировать <code>.js</code> файлы внутри этого пакета, используя синтаксис <a href="/ru/nodejs/api/esm">ES module</a>.</p><p>Поле <code>&quot;type&quot;</code> применяется не только к начальным точкам входа (<code>node my-app.js</code>), но и к файлам, на которые ссылаются операторы <code>import</code> и выражения <code>import()</code>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// my-app.js, обрабатывается как ES модуль, потому что в той же папке</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// находится файл package.json с &quot;type&quot;: &quot;module&quot;.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./startup/init.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Загружается как ES модуль, поскольку ./startup не содержит файл package.json,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// и, следовательно, наследует значение &quot;type&quot; с одного уровня выше.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;commonjs-package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Загружается как CommonJS, поскольку ./node_modules/commonjs-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// не имеет поля &quot;type&quot; или содержит &quot;type&quot;: &quot;commonjs&quot;.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./node_modules/commonjs-package/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Загружается как CommonJS, поскольку ./node_modules/commonjs-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// не имеет поля &quot;type&quot; или содержит &quot;type&quot;: &quot;commonjs&quot;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Файлы, заканчивающиеся на <code>.mjs</code>, всегда загружаются как <a href="/ru/nodejs/api/esm">ES modules</a> независимо от ближайшего родительского <code>package.json</code>.</p><p>Файлы, заканчивающиеся на <code>.cjs</code>, всегда загружаются как <a href="/ru/nodejs/api/modules">CommonJS</a> независимо от ближайшего родительского <code>package.json</code>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./legacy-file.cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Загружается как CommonJS, поскольку .cjs всегда загружается как CommonJS.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;commonjs-package/src/index.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Загружается как ES модуль, поскольку .mjs всегда загружается как ES модуль.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Расширения <code>.mjs</code> и <code>.cjs</code> можно использовать для смешивания типов внутри одного пакета:</p><ul><li>В пакете с <code>&quot;type&quot;: &quot;module&quot;</code> Node.js может быть настроен для интерпретации конкретного файла как <a href="/ru/nodejs/api/modules">CommonJS</a>, присвоив ему расширение <code>.cjs</code> (поскольку файлы <code>.js</code> и <code>.mjs</code> обрабатываются как ES модули внутри пакета <code>&quot;module&quot;</code>).</li><li>В пакете с <code>&quot;type&quot;: &quot;commonjs&quot;</code> Node.js может быть настроен для интерпретации конкретного файла как <a href="/ru/nodejs/api/esm">ES module</a>, присвоив ему расширение <code>.mjs</code> (поскольку файлы <code>.js</code> и <code>.cjs</code> обрабатываются как CommonJS внутри пакета <code>&quot;commonjs&quot;</code>).</li></ul><h3 id="--input-type-flag" tabindex="-1">Флаг <code>--input-type</code> <a class="header-anchor" href="#--input-type-flag" aria-label="Permalink to “Флаг --input-type”">​</a></h3><p><strong>Добавлено в: v12.0.0</strong></p><p>Строки, переданные в качестве аргумента в <code>--eval</code> (или <code>-e</code>) или переданные в <code>node</code> через <code>STDIN</code>, обрабатываются как <a href="/ru/nodejs/api/esm">ES-модули</a>, если установлен флаг <code>--input-type=module</code>.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --input-type=module</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --eval</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;import { sep } from &#39;node:path&#39;; console.log(sep);&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;import { sep } from &#39;node:path&#39;; console.log(sep);&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --input-type=module</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Для полноты также существует <code>--input-type=commonjs</code> для явного запуска строкового ввода как CommonJS. Это поведение по умолчанию, если <code>--input-type</code> не указан.</p><h2 id="determining-package-manager" tabindex="-1">Определение менеджера пакетов <a class="header-anchor" href="#determining-package-manager" aria-label="Permalink to “Определение менеджера пакетов”">​</a></h2><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ru/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 1</a> - Экспериментально</p></div><p>Хотя все проекты Node.js должны быть устанавливаемыми всеми менеджерами пакетов после публикации, их командам разработчиков часто требуется использовать один конкретный менеджер пакетов. Чтобы упростить этот процесс, Node.js поставляется с инструментом под названием <a href="/ru/nodejs/api/corepack">Corepack</a>, который призван сделать все менеджеры пакетов прозрачно доступными в вашей среде - при условии, что у вас установлен Node.js.</p><p>По умолчанию Corepack не будет принудительно использовать какой-либо конкретный менеджер пакетов и будет использовать общие версии &quot;Last Known Good&quot;, связанные с каждым выпуском Node.js, но вы можете улучшить этот опыт, установив поле <a href="/ru/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> в <code>package.json</code> вашего проекта.</p><h2 id="package-entry-points" tabindex="-1">Точки входа пакета <a class="header-anchor" href="#package-entry-points" aria-label="Permalink to “Точки входа пакета”">​</a></h2><p>В файле <code>package.json</code> пакета два поля могут определять точки входа для пакета: <a href="/ru/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> и <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>. Оба поля применяются как к ES-модулям, так и к модулям CommonJS.</p><p>Поле <a href="/ru/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> поддерживается во всех версиях Node.js, но его возможности ограничены: оно определяет только основную точку входа пакета.</p><p>Поле <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> предоставляет современную альтернативу <a href="/ru/nodejs/api/packages#main"><code>&quot;main&quot;</code></a>, позволяющую определять несколько точек входа, поддерживать разрешение условных точек входа между средами и <strong>предотвращать любые другие точки входа, кроме тех, которые определены в <a href="#exports"><code>&quot;exports&quot;</code></a></strong>. Эта инкапсуляция позволяет авторам модулей четко определять общедоступный интерфейс для своего пакета.</p><p>Для новых пакетов, предназначенных для текущих поддерживаемых версий Node.js, рекомендуется использовать поле <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>. Для пакетов, поддерживающих Node.js 10 и ниже, требуется поле <a href="/ru/nodejs/api/packages#main"><code>&quot;main&quot;</code></a>. Если определены и <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>, и <a href="/ru/nodejs/api/packages#main"><code>&quot;main&quot;</code></a>, поле <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> имеет приоритет над <a href="/ru/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> в поддерживаемых версиях Node.js.</p><p><a href="/ru/nodejs/api/packages#conditional-exports">Условные экспорты</a> могут использоваться в <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> для определения различных точек входа пакета для каждой среды, включая то, как пакет вызывается: через <code>require</code> или через <code>import</code>. Для получения дополнительной информации о поддержке как CommonJS, так и ES-модулей в одном пакете, обратитесь к <a href="/ru/nodejs/api/packages#dual-commonjses-module-packages">разделу о двойных пакетах CommonJS/ES-модулей</a>.</p><p>Существующие пакеты, вводящие поле <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>, не позволят потребителям пакета использовать какие-либо точки входа, которые не определены, включая <a href="/ru/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> (например, <code>require(&#39;your-package/package.json&#39;)</code>). <strong>Это скорее всего, будет критическим изменением.</strong></p><p>Чтобы сделать введение <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> некритическим, убедитесь, что экспортируется каждая ранее поддерживаемая точка входа. Лучше всего явно указывать точки входа, чтобы общедоступный API пакета был четко определен. Например, проект, который ранее экспортировал <code>main</code>, <code>lib</code>, <code>feature</code> и <code>package.json</code>, может использовать следующие <code>package.exports</code>:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./package.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>В качестве альтернативы проект может экспортировать целые папки как с расширенными, так и без расширенных подпутей, используя шаблоны экспорта:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./package.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./package.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>При этом обеспечивается обратная совместимость для любых младших версий пакета, а будущее основное изменение для пакета может правильно ограничить экспорты только определенными экспортируемыми функциями:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature/internal/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="main-entry-point-export" tabindex="-1">Экспорт основной точки входа <a class="header-anchor" href="#main-entry-point-export" aria-label="Permalink to “Экспорт основной точки входа”">​</a></h3><p>При написании нового пакета рекомендуется использовать поле <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Когда определено поле <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>, все подпути пакета инкапсулируются и становятся недоступными для импортеров. Например, <code>require(&#39;pkg/subpath.js&#39;)</code> вызывает ошибку <a href="/ru/nodejs/api/errors#err-package-path-not-exported"><code>ERR_PACKAGE_PATH_NOT_EXPORTED</code></a>.</p><p>Эта инкапсуляция экспорта обеспечивает более надежные гарантии в отношении интерфейсов пакета для инструментов и при обработке semver-обновлений для пакета. Это не строгая инкапсуляция, поскольку прямой вызов любого абсолютного подпути пакета, например <code>require(&#39;/path/to/node_modules/pkg/subpath.js&#39;)</code>, все равно загрузит <code>subpath.js</code>.</p><p>Все поддерживаемые в настоящее время версии Node.js и современные инструменты сборки поддерживают поле <code>&quot;exports&quot;</code>. Для проектов, использующих более старую версию Node.js или связанный инструмент сборки, совместимость может быть достигнута путем включения поля <code>&quot;main&quot;</code> вместе с <code>&quot;exports&quot;</code>, указывающего на тот же модуль:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="subpath-exports" tabindex="-1">Экспорт подпутей <a class="header-anchor" href="#subpath-exports" aria-label="Permalink to “Экспорт подпутей”">​</a></h3><p><strong>Добавлено в: v12.7.0</strong></p><p>При использовании поля <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> пользовательские подпути могут быть определены вместе с основной точкой входа, рассматривая основную точку входа как подпуть <code>&quot;.&quot;</code>:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./submodule.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/submodule.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Теперь потребитель может импортировать только определенный подпуть в <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> submodule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/submodule.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Загружает ./node_modules/es-module-package/src/submodule.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>В то время как другие подпути выдадут ошибку:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> submodule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/private-module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Выбрасывает ERR_PACKAGE_PATH_NOT_EXPORTED</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="extensions-in-subpaths" tabindex="-1">Расширения в подпутях <a class="header-anchor" href="#extensions-in-subpaths" aria-label="Permalink to “Расширения в подпутях”">​</a></h4><p>Авторам пакетов следует предоставлять подпути с расширениями (<code>import &#39;pkg/subpath.js&#39;</code>) или без расширений (<code>import &#39;pkg/subpath&#39;</code>) в своих экспортах. Это гарантирует, что для каждого экспортируемого модуля существует только один подпуть, чтобы все зависимые импортировали один и тот же согласованный спецификатор, сохраняя контракт пакета ясным для потребителей и упрощая завершение подпутей пакета.</p><p>Традиционно пакеты, как правило, использовали стиль без расширений, который имеет преимущества в удобочитаемости и маскировке истинного пути к файлу внутри пакета.</p><p>Поскольку <a href="https://github.com/WICG/import-maps" target="_blank" rel="noreferrer">карты импорта</a> теперь предоставляют стандарт для разрешения пакетов в браузерах и других средах выполнения JavaScript, использование стиля без расширений может привести к раздутым определениям карт импорта. Явные расширения файлов могут избежать этой проблемы, позволяя карте импорта использовать <a href="https://github.com/WICG/import-maps#packages-via-trailing-slashes" target="_blank" rel="noreferrer">сопоставление папок пакетов</a> для сопоставления нескольких подпутей, где это возможно, вместо отдельной записи карты для каждого экспорта подпути пакета. Это также отражает требование использования <a href="/ru/nodejs/api/esm#mandatory-file-extensions">полного пути спецификатора</a> в относительных и абсолютных спецификаторах импорта.</p><h3 id="exports-sugar" tabindex="-1">Упрощение экспорта <a class="header-anchor" href="#exports-sugar" aria-label="Permalink to “Упрощение экспорта”">​</a></h3><p><strong>Добавлено в версии: v12.11.0</strong></p><p>Если экспорт <code>&quot;.&quot;</code> является единственным экспортом, поле <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> предоставляет упрощенный синтаксис, когда его значением является непосредственное значение поля <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Можно записать как:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="subpath-imports" tabindex="-1">Субпути импорта <a class="header-anchor" href="#subpath-imports" aria-label="Permalink to “Субпути импорта”">​</a></h3><p><strong>Добавлено в версии: v14.6.0, v12.19.0</strong></p><p>В дополнение к полю <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>, существует поле <code>&quot;imports&quot;</code> пакета для создания частных отображений, которые применяются только к спецификаторам импорта изнутри самого пакета.</p><p>Записи в поле <code>&quot;imports&quot;</code> всегда должны начинаться с <code>#</code>, чтобы отличать их от спецификаторов внешних пакетов.</p><p>Например, поле <code>imports</code> можно использовать для получения преимуществ условного экспорта для внутренних модулей:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#dep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dep-polyfill.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>где <code>import &#39;#dep&#39;</code> не получает разрешение внешнего пакета <code>dep-node-native</code> (включая, в свою очередь, его экспорты), а получает локальный файл <code>./dep-polyfill.js</code> относительно пакета в других средах.</p><p>В отличие от поля <code>&quot;exports&quot;</code>, поле <code>&quot;imports&quot;</code> разрешает отображение на внешние пакеты.</p><p>Правила разрешения для поля <code>imports</code> в остальном аналогичны полю <code>exports</code>.</p><h3 id="subpath-patterns" tabindex="-1">Шаблоны субпутей <a class="header-anchor" href="#subpath-patterns" aria-label="Permalink to “Шаблоны субпутей”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v16.10.0, v14.19.0</td><td>Поддержка концевых частей шаблонов в поле &quot;imports&quot;.</td></tr><tr><td>v16.9.0, v14.19.0</td><td>Поддержка концевых частей шаблонов.</td></tr><tr><td>v14.13.0, v12.20.0</td><td>Добавлено в версии: v14.13.0, v12.20.0</td></tr></tbody></table></div><p>Для пакетов с небольшим количеством экспортов или импортов мы рекомендуем явно перечислять каждую запись субпути экспорта. Но для пакетов, у которых большое количество субпутей, это может привести к раздуванию <code>package.json</code> и проблемам с обслуживанием.</p><p>Для этих случаев можно использовать шаблоны экспорта субпутей:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/features/*.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#internal/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/internal/*.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong><code>*</code> в отображениях раскрывает вложенные субпути, поскольку это синтаксис только замены строки.</strong></p><p>Все экземпляры <code>*</code> в правой части затем будут заменены этим значением, в том числе если оно содержит какие-либо разделители <code>/</code>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/x.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Загружает ./node_modules/es-module-package/src/features/x.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/y/y.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Загружает ./node_modules/es-module-package/src/features/y/y.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> internalZ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;#internal/z.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Загружает ./node_modules/es-module-package/src/internal/z.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Это прямое статическое сопоставление и замена без какой-либо специальной обработки расширений файлов. Включение <code>&quot;*.js&quot;</code> с обеих сторон сопоставления ограничивает экспорты пакета только файлами JS.</p><p>Свойство экспортов быть статически перечислимыми сохраняется с шаблонами экспортов, поскольку отдельные экспорты для пакета можно определить, рассматривая целевой шаблон правой части как глоб <code>**</code> по отношению к списку файлов внутри пакета. Поскольку пути <code>node_modules</code> запрещены в целях экспорта, это расширение зависит только от файлов самого пакета.</p><p>Чтобы исключить частные подпапки из шаблонов, можно использовать цели <code>null</code>:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/features/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./features/private-internal/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureInternal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/private-internal/m.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Выбрасывает: ERR_PACKAGE_PATH_NOT_EXPORTED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> featureX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;es-module-package/features/x.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Загружает ./node_modules/es-module-package/src/features/x.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="conditional-exports" tabindex="-1">Условные экспорты <a class="header-anchor" href="#conditional-exports" aria-label="Permalink to “Условные экспорты”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v13.7.0, v12.16.0</td><td>Сняты флаги условных экспортов.</td></tr><tr><td>v13.2.0, v12.16.0</td><td>Добавлено в: v13.2.0, v12.16.0</td></tr></tbody></table></div><p>Условные экспорты предоставляют способ сопоставления с различными путями в зависимости от определенных условий. Они поддерживаются как для импорта CommonJS, так и для импорта модулей ES.</p><p>Например, пакет, который хочет предоставить разные экспорты модулей ES для <code>require()</code> и <code>import</code>, можно записать так:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index-module.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index-require.cjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Node.js реализует следующие условия, перечисленные в порядке от наиболее конкретного к наименее конкретному, поскольку условия должны быть определены:</p><ul><li><code>&quot;node-addons&quot;</code> — аналогично <code>&quot;node&quot;</code> и соответствует любой среде Node.js. Это условие можно использовать для предоставления точки входа, которая использует собственные C++-аддоны, в отличие от точки входа, которая является более универсальной и не зависит от собственных аддонов. Это условие можно отключить с помощью флага <a href="/ru/nodejs/api/cli#no-addons"><code>--no-addons</code></a>.</li><li><code>&quot;node&quot;</code> — соответствует любой среде Node.js. Может быть файлом CommonJS или модулем ES. <em>В большинстве случаев явно указывать платформу Node.js не обязательно.</em></li><li><code>&quot;import&quot;</code> — соответствует, когда пакет загружается через <code>import</code> или <code>import()</code>, или через любую операцию импорта или разрешения верхнего уровня загрузчиком модулей ECMAScript. Применяется независимо от формата модуля целевого файла. <em>Всегда взаимоисключает с <code>&quot;require&quot;</code>.</em></li><li><code>&quot;require&quot;</code> — соответствует, когда пакет загружается через <code>require()</code>. На файл, на который ссылаются, можно загрузить с помощью <code>require()</code>, хотя условие соответствует независимо от формата модуля целевого файла. Ожидаемые форматы включают CommonJS, JSON, собственные аддоны и модули ES. <em>Всегда взаимоисключает с <code>&quot;import&quot;</code>.</em></li><li><code>&quot;module-sync&quot;</code> — соответствует независимо от того, загружается ли пакет через <code>import</code>, <code>import()</code> или <code>require()</code>. Ожидается, что формат будет модулем ES, который не содержит await верхнего уровня в своем графе модулей — если это так, будет выброшено <code>ERR_REQUIRE_ASYNC_MODULE</code>, когда модуль будет <code>require()</code>-ен.</li><li><code>&quot;default&quot;</code> — универсальный резервный вариант, который всегда соответствует. Может быть файлом CommonJS или модулем ES. <em>Это условие всегда должно быть последним.</em></li></ul><p>Внутри объекта <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> порядок ключей имеет значение. Во время сопоставления условий более ранние записи имеют более высокий приоритет и имеют приоритет над более поздними записями. <em>Общее правило состоит в том, что условия должны быть от наиболее конкретных к наименее конкретным в порядке объектов</em>.</p><p>Использование условий <code>&quot;import&quot;</code> и <code>&quot;require&quot;</code> может привести к некоторым опасностям, которые более подробно объяснены в <a href="/ru/nodejs/api/packages#dual-commonjses-module-packages">разделе о двойных пакетах CommonJS/ES-модулей</a>.</p><p>Условие <code>&quot;node-addons&quot;</code> можно использовать для предоставления точки входа, которая использует собственные C++-аддоны. Однако это условие можно отключить с помощью флага <a href="/ru/nodejs/api/cli#no-addons"><code>--no-addons</code></a>. При использовании <code>&quot;node-addons&quot;</code> рекомендуется рассматривать <code>&quot;default&quot;</code> как улучшение, которое предоставляет более универсальную точку входа, например, с использованием WebAssembly вместо собственного аддона.</p><p>Условные экспорты также можно распространить на подпути экспорта, например:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./feature.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Определяет пакет, где <code>require(&#39;pkg/feature.js&#39;)</code> и <code>import &#39;pkg/feature.js&#39;)</code> могут предоставлять различные реализации между Node.js и другими средами JS.</p><p>При использовании ветвей среды всегда включайте условие <code>&quot;default&quot;</code>, где это возможно. Предоставление условия <code>&quot;default&quot;</code> гарантирует, что любые неизвестные среды JS смогут использовать эту универсальную реализацию, что помогает избежать того, чтобы эти среды JS притворялись существующими средами, чтобы поддерживать пакеты с условными экспортами. По этой причине использование ветвей условий <code>&quot;node&quot;</code> и <code>&quot;default&quot;</code> обычно предпочтительнее, чем использование ветвей условий <code>&quot;node&quot;</code> и <code>&quot;browser&quot;</code>.</p><h3 id="nested-conditions" tabindex="-1">Вложенные условия <a class="header-anchor" href="#nested-conditions" aria-label="Permalink to “Вложенные условия”">​</a></h3><p>В дополнение к прямым соответствиям, Node.js также поддерживает вложенные объекты условий.</p><p>Например, чтобы определить пакет, который имеет только точки входа двойного режима для использования в Node.js, но не в браузере:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature-node.cjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./feature.mjs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Условия продолжают сопоставляться в том же порядке, что и плоские условия. Если вложенное условие не имеет никакого соответствия, оно продолжит проверять оставшиеся условия родительского условия. Таким образом, вложенные условия ведут себя аналогично вложенным операторам <code>if</code> в JavaScript.</p><h3 id="resolving-user-conditions" tabindex="-1">Разрешение пользовательских условий <a class="header-anchor" href="#resolving-user-conditions" aria-label="Permalink to “Разрешение пользовательских условий”">​</a></h3><p><strong>Добавлено в: v14.9.0, v12.19.0</strong></p><p>При запуске Node.js пользовательские условия могут быть добавлены с помощью флага <code>--conditions</code>:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --conditions=development</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>который затем разрешит условие <code>&quot;development&quot;</code> в импорте и экспорте пакетов, одновременно разрешая существующие условия <code>&quot;node&quot;</code>, <code>&quot;node-addons&quot;</code>, <code>&quot;default&quot;</code>, <code>&quot;import&quot;</code> и <code>&quot;require&quot;</code> в соответствии с требованиями.</p><p>Любое количество пользовательских условий может быть установлено с помощью повторяющихся флагов.</p><p>Типичные условия должны содержать только буквенно-цифровые символы, используя &quot;:&quot;, &quot;-&quot; или &quot;=&quot; в качестве разделителей, если это необходимо. Все остальное может привести к проблемам совместимости за пределами Node.</p><p>В Node условия имеют очень мало ограничений, но конкретно они включают:</p><h3 id="community-conditions-definitions" tabindex="-1">Определения условий сообщества <a class="header-anchor" href="#community-conditions-definitions" aria-label="Permalink to “Определения условий сообщества”">​</a></h3><p>Строки условий, отличные от условий <code>&quot;import&quot;</code>, <code>&quot;require&quot;</code>, <code>&quot;node&quot;</code>, <code>&quot;module-sync&quot;</code>, <code>&quot;node-addons&quot;</code> и <code>&quot;default&quot;</code>, <a href="/ru/nodejs/api/packages#conditional-exports">реализованных в ядре Node.js</a>, по умолчанию игнорируются.</p><p>Другие платформы могут реализовывать другие условия, а пользовательские условия могут быть включены в Node.js с помощью флага <a href="/ru/nodejs/api/packages#resolving-user-conditions"><code>--conditions</code> / <code>-C</code></a>.</p><p>Поскольку пользовательские условия пакета требуют четких определений для обеспечения правильного использования, ниже приведен список общих известных условий пакета и их строгие определения, чтобы помочь в координации экосистемы.</p><ul><li><code>&quot;types&quot;</code> - может использоваться системами типизации для разрешения файла типизации для данного экспорта. <em>Это условие всегда должно быть включено первым.</em></li><li><code>&quot;browser&quot;</code> - любая среда веб-браузера.</li><li><code>&quot;development&quot;</code> - может использоваться для определения точки входа только для среды разработки, например, для предоставления дополнительного контекста отладки, такого как улучшенные сообщения об ошибках при запуске в режиме разработки. <em>Всегда должен быть взаимно исключающим с <code>&quot;production&quot;</code>.</em></li><li><code>&quot;production&quot;</code> - может использоваться для определения точки входа производственной среды. <em>Всегда должен быть взаимно исключающим с <code>&quot;development&quot;</code>.</em></li></ul><p>Для других сред выполнения определения ключей условий, специфичных для платформы, поддерживаются <a href="https://wintercg.org/" target="_blank" rel="noreferrer">WinterCG</a> в спецификации предложения <a href="https://runtime-keys.proposal.wintercg.org/" target="_blank" rel="noreferrer">Runtime Keys</a>.</p><p>Новые определения условий могут быть добавлены в этот список путем создания запроса на включение в <a href="https://github.com/nodejs/node/blob/HEAD/doc/api/packages.md#conditions-definitions" target="_blank" rel="noreferrer">документацию Node.js для этого раздела</a>. Требования для внесения нового определения условия в список здесь следующие:</p><ul><li>Определение должно быть четким и недвусмысленным для всех разработчиков.</li><li>Необходимо четко обосновать вариант использования, для чего необходимо условие.</li><li>Должно существовать достаточное количество существующих реализаций.</li><li>Имя условия не должно конфликтовать с другим определением условия или условием, широко используемым.</li><li>Перечисление определения условия должно обеспечивать координационное преимущество для экосистемы, которое в противном случае было бы невозможно. Например, это не обязательно относится к условиям, специфичным для компании или приложения.</li><li>Условие должно быть таким, чтобы пользователь Node.js ожидал его увидеть в основной документации Node.js. Условие <code>&quot;types&quot;</code> является хорошим примером: оно не совсем уместно в предложении <a href="https://runtime-keys.proposal.wintercg.org/" target="_blank" rel="noreferrer">Runtime Keys</a>, но хорошо подходит здесь, в документации Node.js.</li></ul><p>Вышеуказанные определения могут быть перенесены в специальный реестр условий в надлежащее время.</p><h3 id="self-referencing-a-package-using-its-name" tabindex="-1">Самообращение к пакету по его имени <a class="header-anchor" href="#self-referencing-a-package-using-its-name" aria-label="Permalink to “Самообращение к пакету по его имени”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v13.6.0, v12.16.0</td><td>Снято ограничение на самообращение к пакету по его имени.</td></tr><tr><td>v13.1.0, v12.16.0</td><td>Добавлено в: v13.1.0, v12.16.0</td></tr></tbody></table></div><p>Внутри пакета значения, определенные в поле <code>package.json</code> пакета <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>, могут быть указаны через имя пакета. Например, если предположить, что <code>package.json</code> выглядит следующим образом:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./foo.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./foo.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Тогда любой модуль <em>в этом пакете</em> может ссылаться на экспорт в самом пакете:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./a-module.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { something } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a-package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Импортирует &quot;something&quot; из ./index.mjs.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Самообращение доступно только если <code>package.json</code> имеет <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>, и позволит импортировать только то, что <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> (в <code>package.json</code>) разрешает. Таким образом, приведенный ниже код, учитывая предыдущий пакет, вызовет ошибку во время выполнения:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./another-module.mjs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Импортирует &quot;another&quot; из ./m.mjs. Ошибка, потому что</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// поле &quot;exports&quot; в &quot;package.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// не предоставляет экспорт с именем &quot;./m.mjs&quot;.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { another } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a-package/m.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Самообращение также доступно при использовании <code>require</code>, как в ES-модуле, так и в CommonJS. Например, этот код также будет работать:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./a-module.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">something</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a-package/foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Загружает из ./foo.js.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Наконец, самообращение также работает с пакетами с областью видимости. Например, этот код также будет работать:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@my/package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./index.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./other.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@my/package&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> other.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="dual-commonjs/es-module-packages" tabindex="-1">Двойные пакеты CommonJS/ES module <a class="header-anchor" href="#dual-commonjs/es-module-packages" aria-label="Permalink to “Двойные пакеты CommonJS/ES module”">​</a></h2><p>Подробности смотрите в <a href="https://github.com/nodejs/package-examples" target="_blank" rel="noreferrer">репозитории примеров пакетов</a>.</p><h2 id="nodejs-packagejson-field-definitions" tabindex="-1">Определения полей <code>package.json</code> Node.js <a class="header-anchor" href="#nodejs-packagejson-field-definitions" aria-label="Permalink to “Определения полей package.json Node.js”">​</a></h2><p>В этом разделе описываются поля, используемые средой выполнения Node.js. Другие инструменты (например, <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json" target="_blank" rel="noreferrer">npm</a>) используют дополнительные поля, которые игнорируются Node.js и не документированы здесь.</p><p>В Node.js используются следующие поля в файлах <code>package.json</code>:</p><ul><li><a href="/ru/nodejs/api/packages#name"><code>&quot;name&quot;</code></a> - Актуально при использовании именованных импортов внутри пакета. Также используется менеджерами пакетов в качестве имени пакета.</li><li><a href="/ru/nodejs/api/packages#main"><code>&quot;main&quot;</code></a> - Модуль по умолчанию при загрузке пакета, если не указан exports, и в версиях Node.js до появления exports.</li><li><a href="/ru/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> - Менеджер пакетов, рекомендуемый при внесении вклада в пакет. Используется прокладками <a href="/ru/nodejs/api/corepack">Corepack</a>.</li><li><a href="/ru/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> - Тип пакета, определяющий, загружать ли файлы <code>.js</code> как модули CommonJS или ES.</li><li><a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> - Экспорт пакетов и условный экспорт. При наличии ограничивает, какие подмодули можно загружать из пакета.</li><li><a href="/ru/nodejs/api/packages#imports"><code>&quot;imports&quot;</code></a> - Импорт пакетов для использования модулями внутри самого пакета.</li></ul><h3 id="name" tabindex="-1"><code>&quot;name&quot;</code> <a class="header-anchor" href="#name" aria-label="Permalink to “&quot;name&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v13.6.0, v12.16.0</td><td>Удалена опция <code>--experimental-resolve-self</code>.</td></tr><tr><td>v13.1.0, v12.16.0</td><td>Добавлено в: v13.1.0, v12.16.0</td></tr></tbody></table></div><ul><li>Тип: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;имя-пакета&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Поле <code>&quot;name&quot;</code> определяет имя вашего пакета. Публикация в реестре <em>npm</em> требует имени, которое удовлетворяет <a href="https://docs.npmjs.com/files/package.json#name" target="_blank" rel="noreferrer">определенным требованиям</a>.</p><p>Поле <code>&quot;name&quot;</code> может быть использовано в дополнение к полю <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> для <a href="/ru/nodejs/api/packages#self-referencing-a-package-using-its-name">самостоятельной ссылки</a> на пакет, используя его имя.</p><h3 id="main" tabindex="-1"><code>&quot;main&quot;</code> <a class="header-anchor" href="#main" aria-label="Permalink to “&quot;main&quot;”">​</a></h3><p><strong>Добавлено в: v0.4.0</strong></p><ul><li>Тип: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Поле <code>&quot;main&quot;</code> определяет точку входа в пакет при импорте по имени через поиск в <code>node_modules</code>. Его значение - это путь.</p><p>Когда пакет имеет поле <a href="/ru/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>, оно будет иметь приоритет над полем <code>&quot;main&quot;</code> при импорте пакета по имени.</p><p>Он также определяет скрипт, который используется, когда <a href="/ru/nodejs/api/modules#folders-as-modules">каталог пакета загружается через <code>require()</code></a>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Разрешается в ./path/to/directory/index.js.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./path/to/directory&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="packagemanager" tabindex="-1"><code>&quot;packageManager&quot;</code> <a class="header-anchor" href="#packagemanager" aria-label="Permalink to “&quot;packageManager&quot;”">​</a></h3><p><strong>Добавлено в: v16.9.0, v14.19.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Стабильность: 1 - Экспериментально]</p><p><a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 1</a> <a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 1</a> - Экспериментально</p></div><ul><li>Тип: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;packageManager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;имя менеджера пакетов&gt;@&lt;версия&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Поле <code>&quot;packageManager&quot;</code> определяет, какой менеджер пакетов должен использоваться при работе над текущим проектом. Его можно установить для любого из <a href="/ru/nodejs/api/corepack#supported-package-managers">поддерживаемых менеджеров пакетов</a> и гарантировать, что ваши команды будут использовать точно такие же версии менеджеров пакетов без необходимости устанавливать что-либо, кроме Node.js.</p><p>Это поле в настоящее время является экспериментальным и требует включения; подробности о процедуре смотрите на странице <a href="/ru/nodejs/api/corepack">Corepack</a>.</p><h3 id="type" tabindex="-1"><code>&quot;type&quot;</code> <a class="header-anchor" href="#type" aria-label="Permalink to “&quot;type&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v13.2.0, v12.17.0</td><td>Снят флаг <code>--experimental-modules</code>.</td></tr><tr><td>v12.0.0</td><td>Добавлено в: v12.0.0</td></tr></tbody></table></div><ul><li>Тип: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>Поле <code>&quot;type&quot;</code> определяет формат модуля, который Node.js использует для всех файлов <code>.js</code>, для которых этот файл <code>package.json</code> является ближайшим родительским.</p><p>Файлы, заканчивающиеся на <code>.js</code>, загружаются как модули ES, когда ближайший родительский файл <code>package.json</code> содержит поле верхнего уровня <code>&quot;type&quot;</code> со значением <code>&quot;module&quot;</code>.</p><p>Ближайший родительский <code>package.json</code> определяется как первый <code>package.json</code>, найденный при поиске в текущей папке, родительской папке этой папки и так далее до тех пор, пока не будет достигнута папка node_modules или корневой каталог тома.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># В той же папке, что и предыдущий package.json {#in-same-folder-as-preceding-packagejson}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Запускается как модуль ES</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Если ближайший родительский <code>package.json</code> не содержит поле <code>&quot;type&quot;</code> или содержит <code>&quot;type&quot;: &quot;commonjs&quot;</code>, файлы <code>.js</code> обрабатываются как <a href="/ru/nodejs/api/modules">CommonJS</a>. Если достигнут корневой каталог тома и не найден <code>package.json</code>, файлы <code>.js</code> обрабатываются как <a href="/ru/nodejs/api/modules">CommonJS</a>.</p><p>Операторы <code>import</code> в файлах <code>.js</code> обрабатываются как модули ES, если ближайший родительский <code>package.json</code> содержит <code>&quot;type&quot;: &quot;module&quot;</code>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// my-app.js, часть того же примера, что и выше</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./startup.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Загружается как модуль ES из-за package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Независимо от значения поля <code>&quot;type&quot;</code>, файлы <code>.mjs</code> всегда обрабатываются как модули ES, а файлы <code>.cjs</code> всегда обрабатываются как CommonJS.</p><h3 id="exports" tabindex="-1"><code>&quot;exports&quot;</code> <a class="header-anchor" href="#exports" aria-label="Permalink to “&quot;exports&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v14.13.0, v12.20.0</td><td>Добавлена поддержка паттернов <code>&quot;exports&quot;</code>.</td></tr><tr><td>v13.7.0, v12.17.0</td><td>Снят флаг условных экспортов.</td></tr><tr><td>v13.7.0, v12.16.0</td><td>Реализован логический порядок условных экспортов.</td></tr><tr><td>v13.7.0, v12.16.0</td><td>Удалена опция <code>--experimental-conditional-exports</code>. В версии 12.16.0 условные экспорты по-прежнему находятся за <code>--experimental-modules</code>.</td></tr><tr><td>v13.2.0, v12.16.0</td><td>Реализованы условные экспорты.</td></tr><tr><td>v12.7.0</td><td>Добавлено в: v12.7.0</td></tr></tbody></table></div><ul><li>Тип: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Поле <code>&quot;exports&quot;</code> позволяет определять <a href="/ru/nodejs/api/packages#package-entry-points">точки входа</a> пакета при импорте по имени, загруженного либо через поиск в <code>node_modules</code>, либо через <a href="/ru/nodejs/api/packages#self-referencing-a-package-using-its-name">само-ссылку</a> на собственное имя. Оно поддерживается в Node.js 12+ как альтернатива <a href="/ru/nodejs/api/packages#main"><code>&quot;main&quot;</code></a>, которая может поддерживать определение <a href="/ru/nodejs/api/packages#subpath-exports">экспортов подпутей</a> и <a href="/ru/nodejs/api/packages#conditional-exports">условных экспортов</a>, инкапсулируя при этом внутренние неэкспортируемые модули.</p><p><a href="/ru/nodejs/api/packages#conditional-exports">Условные экспорты</a> также можно использовать в <code>&quot;exports&quot;</code> для определения различных точек входа пакета для каждой среды, в том числе независимо от того, на пакет ссылаются через <code>require</code> или через <code>import</code>.</p><p>Все пути, определенные в <code>&quot;exports&quot;</code>, должны быть относительными URL-адресами файлов, начинающимися с <code>./</code>.</p><h3 id="imports" tabindex="-1"><code>&quot;imports&quot;</code> <a class="header-anchor" href="#imports" aria-label="Permalink to “&quot;imports&quot;”">​</a></h3><p><strong>Добавлено в версии: v14.6.0, v12.19.0</strong></p><ul><li>Тип: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;#dep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dep-polyfill.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dep-node-native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Записи в поле imports должны быть строками, начинающимися с <code>#</code>.</p><p>Package imports позволяют сопоставлять с внешними пакетами.</p><p>Это поле определяет <a href="/ru/nodejs/api/packages#subpath-imports">subpath imports</a> для текущего пакета.</p>`,209)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};