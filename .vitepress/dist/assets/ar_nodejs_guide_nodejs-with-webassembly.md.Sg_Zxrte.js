import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js مع WebAssembly","description":"WebAssembly هو لغة تجميع عالية الأداء يمكن تجميعها من لغات مختلفة، بما في ذلك C/C++ وRust وAssemblyScript. يوفر Node.js واجهات برمجة التطبيقات اللازمة عبر كائن WebAssembly العالمي للتواصل مع WebAssembly.","frontmatter":{"title":"Node.js مع WebAssembly","description":"WebAssembly هو لغة تجميع عالية الأداء يمكن تجميعها من لغات مختلفة، بما في ذلك C/C++ وRust وAssemblyScript. يوفر Node.js واجهات برمجة التطبيقات اللازمة عبر كائن WebAssembly العالمي للتواصل مع WebAssembly.","head":[["meta",{"name":"og:title","content":"Node.js مع WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"WebAssembly هو لغة تجميع عالية الأداء يمكن تجميعها من لغات مختلفة، بما في ذلك C/C++ وRust وAssemblyScript. يوفر Node.js واجهات برمجة التطبيقات اللازمة عبر كائن WebAssembly العالمي للتواصل مع WebAssembly."}],["meta",{"name":"twitter:title","content":"Node.js مع WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"WebAssembly هو لغة تجميع عالية الأداء يمكن تجميعها من لغات مختلفة، بما في ذلك C/C++ وRust وAssemblyScript. يوفر Node.js واجهات برمجة التطبيقات اللازمة عبر كائن WebAssembly العالمي للتواصل مع WebAssembly."}],["link",{"rel":"canonical","href":"https://idoc.dev/ar/nodejs/guide/nodejs-with-webassembly"}],["meta",{"property":"og:url","content":"https://idoc.dev/ar/nodejs/guide/nodejs-with-webassembly"}]]},"headers":[],"relativePath":"ar/nodejs/guide/nodejs-with-webassembly.md","filePath":"ar/nodejs/guide/nodejs-with-webassembly.md","lastUpdated":null}`),a={name:`ar/nodejs/guide/nodejs-with-webassembly.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-مع-webassembly" tabindex="-1">Node.js مع WebAssembly <a class="header-anchor" href="#node-js-مع-webassembly" aria-label="Permalink to “Node.js مع WebAssembly”">​</a></h1><p><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> هي لغة تجميع عالية الأداء يمكن تجميعها من لغات مختلفة، بما في ذلك C/C++ و Rust و AssemblyScript. وهي مدعومة حاليًا من قبل Chrome و Firefox و Safari و Edge و Node.js!</p><p>تحدد مواصفات WebAssembly تنسيقين للملفات، تنسيق ثنائي يسمى WebAssembly Module بامتداد <code>.wasm</code> وتمثيل نصي مطابق يسمى WebAssembly Text format بامتداد <code>.wat</code>.</p><h2 id="المفاهيم-الأساسية" tabindex="-1">المفاهيم الأساسية <a class="header-anchor" href="#المفاهيم-الأساسية" aria-label="Permalink to “المفاهيم الأساسية”">​</a></h2><ul><li>الوحدة (Module) - ملف WebAssembly ثنائي مُجمَّع، أي ملف <code>.wasm</code>.</li><li>الذاكرة (Memory) - ArrayBuffer قابلة لتغيير الحجم.</li><li>الجدول (Table) - مصفوفة مكتوبة قابلة لتغيير الحجم من المراجع غير المخزنة في الذاكرة.</li><li>المثيل (Instance) - إنشاء لوحدة (Module) بذاكرتها وجدولها ومتغيراتها.</li></ul><p>من أجل استخدام WebAssembly، تحتاج إلى ملف ثنائي <code>.wasm</code> ومجموعة من واجهات برمجة التطبيقات للتواصل مع WebAssembly. يوفر Node.js واجهات برمجة التطبيقات الضرورية عبر الكائن العام <code>WebAssembly</code>.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebAssembly)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Object [WebAssembly] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  compile: [Function: compile],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  validate: [Function: validate],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  instantiate: [Function: instantiate]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="إنشاء-وحدات-webassembly" tabindex="-1">إنشاء وحدات WebAssembly <a class="header-anchor" href="#إنشاء-وحدات-webassembly" aria-label="Permalink to “إنشاء وحدات WebAssembly”">​</a></h2><p>توجد طرق متعددة لإنشاء ملفات WebAssembly الثنائية بما في ذلك:</p><ul><li>كتابة WebAssembly (<code>.wat</code>) يدويًا وتحويلها إلى تنسيق ثنائي باستخدام أدوات مثل <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a>.</li><li>استخدام <a href="https://github.com/emscripten-core/emscripten" target="_blank" rel="noreferrer">emscripten</a> مع تطبيق C/C++</li><li>استخدام <a href="https://github.com/rustwasm/wasm-pack" target="_blank" rel="noreferrer">wasm-pack</a> مع تطبيق Rust</li><li>استخدام <a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noreferrer">AssemblyScript</a> إذا كنت تفضل تجربة شبيهة بـ TypeScript</li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong>تقوم بعض هذه الأدوات بإنشاء ليس فقط الملف الثنائي، ولكن أيضًا رمز JavaScript &quot;اللاصق&quot; وملفات HTML المقابلة لتشغيلها في المتصفح.</strong></p></div><h2 id="كيفية-استخدامها" tabindex="-1">كيفية استخدامها <a class="header-anchor" href="#كيفية-استخدامها" aria-label="Permalink to “كيفية استخدامها”">​</a></h2><p>بمجرد أن يكون لديك وحدة WebAssembly، يمكنك استخدام كائن <code>WebAssembly</code> الخاص بـ Node.js لإنشاء مثيل له.</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/add.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasmBuffer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wasmModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // دالة مصدَّرة تعيش تحت instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmModule.instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// الإخراج: 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="التفاعل-مع-نظام-التشغيل" tabindex="-1">التفاعل مع نظام التشغيل <a class="header-anchor" href="#التفاعل-مع-نظام-التشغيل" aria-label="Permalink to “التفاعل مع نظام التشغيل”">​</a></h2><p>لا يمكن لوحدات WebAssembly الوصول مباشرة إلى وظائف نظام التشغيل بمفردها. يمكن استخدام أداة طرف ثالث <a href="https://github.bytecodealliance/wasmtime" target="_blank" rel="noreferrer">Wasmtime</a> للوصول إلى هذه الوظائف. تستخدم <code>Wasmtime</code> واجهة برمجة التطبيقات <a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a> للوصول إلى وظائف نظام التشغيل.</p><h2 id="مصادر" tabindex="-1">مصادر <a class="header-anchor" href="#مصادر" aria-label="Permalink to “مصادر”">​</a></h2><ul><li><a href="https://webassembly.org/" target="_blank" rel="noreferrer">معلومات عامة حول WebAssembly</a></li><li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noreferrer">وثائق MDN</a></li><li><a href="https://webassembly.github.io/spec/core/text/index.html" target="_blank" rel="noreferrer">كتابة WebAssembly يدويًا</a></li></ul>`,18)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};