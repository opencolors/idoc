import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Introdução ao Node.js","description":"Node.js é um ambiente de execução de JavaScript de código aberto e multiplataforma que permite aos desenvolvedores executar JavaScript no lado do servidor, oferecendo alto desempenho e escalabilidade.","frontmatter":{"title":"Introdução ao Node.js","description":"Node.js é um ambiente de execução de JavaScript de código aberto e multiplataforma que permite aos desenvolvedores executar JavaScript no lado do servidor, oferecendo alto desempenho e escalabilidade.","head":[["meta",{"name":"og:title","content":"Introdução ao Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js é um ambiente de execução de JavaScript de código aberto e multiplataforma que permite aos desenvolvedores executar JavaScript no lado do servidor, oferecendo alto desempenho e escalabilidade."}],["meta",{"name":"twitter:title","content":"Introdução ao Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js é um ambiente de execução de JavaScript de código aberto e multiplataforma que permite aos desenvolvedores executar JavaScript no lado do servidor, oferecendo alto desempenho e escalabilidade."}],["link",{"rel":"canonical","href":"https://idoc.dev/pt/nodejs/guide/what-is-nodejs"}],["meta",{"property":"og:url","content":"https://idoc.dev/pt/nodejs/guide/what-is-nodejs"}]]},"headers":[],"relativePath":"pt/nodejs/guide/what-is-nodejs.md","filePath":"pt/nodejs/guide/what-is-nodejs.md","lastUpdated":null}`),a={name:`pt/nodejs/guide/what-is-nodejs.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="introducao-ao-node-js" tabindex="-1">Introdução ao Node.js <a class="header-anchor" href="#introducao-ao-node-js" aria-label="Permalink to “Introdução ao Node.js”">​</a></h1><p>Node.js é um ambiente de tempo de execução JavaScript de código aberto e multiplataforma. É uma ferramenta popular para quase todo tipo de projeto!</p><p>Node.js executa o motor JavaScript V8, o núcleo do Google Chrome, fora do navegador. Isso permite que o Node.js tenha um ótimo desempenho.</p><p>Um aplicativo Node.js é executado em um único processo, sem criar uma nova thread para cada solicitação. O Node.js fornece um conjunto de primitivas assíncronas de E/S em sua biblioteca padrão que evitam que o código JavaScript seja bloqueado e, geralmente, as bibliotecas em Node.js são escritas usando paradigmas não bloqueantes, tornando o comportamento de bloqueio a exceção, e não a norma.</p><p>Quando o Node.js executa uma operação de E/S, como ler da rede, acessar um banco de dados ou o sistema de arquivos, em vez de bloquear a thread e desperdiçar ciclos de CPU esperando, o Node.js retomará as operações quando a resposta retornar.</p><p>Isso permite que o Node.js lide com milhares de conexões simultâneas com um único servidor, sem introduzir o fardo de gerenciar a concorrência de threads, o que pode ser uma fonte significativa de bugs.</p><p>O Node.js tem uma vantagem única porque milhões de desenvolvedores de frontend que escrevem JavaScript para o navegador agora são capazes de escrever o código do lado do servidor, além do código do lado do cliente, sem a necessidade de aprender uma linguagem completamente diferente.</p><p>No Node.js, os novos padrões ECMAScript podem ser usados sem problemas, pois você não precisa esperar que todos os seus usuários atualizem seus navegadores - você está encarregado de decidir qual versão do ECMAScript usar, alterando a versão do Node.js, e você também pode habilitar recursos experimentais específicos executando o Node.js com flags.</p><h2 id="um-exemplo-de-aplicativo-node-js" tabindex="-1">Um Exemplo de Aplicativo Node.js <a class="header-anchor" href="#um-exemplo-de-aplicativo-node-js" aria-label="Permalink to “Um Exemplo de Aplicativo Node.js”">​</a></h2><p>O exemplo mais comum de Hello World do Node.js é um servidor web:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createServer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hostname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;127.0.0.1&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port, hostname, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Servidor rodando em http://\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hostname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Para executar este trecho, salve-o como um arquivo <code>server.js</code> e execute <code>node server.js</code> em seu terminal. Se você usar a versão mjs do código, você deve salvá-lo como um arquivo <code>server.mjs</code> e executar <code>node server.mjs</code> em seu terminal.</p><p>Este código primeiro inclui o <a href="/pt/nodejs/api/http">módulo http</a> do Node.js.</p><p>O Node.js tem uma <a href="/pt/nodejs/api/synopsis">biblioteca padrão</a> fantástica, incluindo suporte de primeira classe para rede.</p><p>O método <code>createServer()</code> de <code>http</code> cria um novo servidor HTTP e o retorna.</p><p>O servidor é configurado para ouvir na porta e nome de host especificados. Quando o servidor está pronto, a função de callback é chamada, neste caso, informando-nos que o servidor está em execução.</p><p>Sempre que uma nova solicitação é recebida, o <a href="/pt/nodejs/api/http">evento request</a> é chamado, fornecendo dois objetos: uma solicitação (um objeto <code>http.IncomingMessage</code>) e uma resposta (um objeto <code>http.ServerResponse</code>).</p><p>Esses 2 objetos são essenciais para lidar com a chamada HTTP.</p><p>O primeiro fornece os detalhes da solicitação. Neste exemplo simples, isso não é usado, mas você pode acessar os cabeçalhos e os dados da solicitação.</p><p>O segundo é usado para retornar dados ao chamador.</p><p>Neste caso com:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>definimos a propriedade statusCode para 200, para indicar uma resposta bem-sucedida.</p><p>Definimos o cabeçalho Content-Type:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>e fechamos a resposta, adicionando o conteúdo como um argumento para <code>end()</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Isso enviará a resposta para o cliente.</p>`,28)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};