import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js TTY 文档","description":"Node.js 的 TTY 模块提供了一个与 TTY（电传打字机）设备交互的接口，包括检查流是否为 TTY、获取窗口大小以及处理终端事件的方法。","frontmatter":{"title":"Node.js TTY 文档","description":"Node.js 的 TTY 模块提供了一个与 TTY（电传打字机）设备交互的接口，包括检查流是否为 TTY、获取窗口大小以及处理终端事件的方法。","head":[["meta",{"name":"og:title","content":"Node.js TTY 文档 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js 的 TTY 模块提供了一个与 TTY（电传打字机）设备交互的接口，包括检查流是否为 TTY、获取窗口大小以及处理终端事件的方法。"}],["meta",{"name":"twitter:title","content":"Node.js TTY 文档 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js 的 TTY 模块提供了一个与 TTY（电传打字机）设备交互的接口，包括检查流是否为 TTY、获取窗口大小以及处理终端事件的方法。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/tty"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/tty"}]]},"headers":[],"relativePath":"zh/nodejs/api/tty.md","filePath":"zh/nodejs/api/tty.md","lastUpdated":null}`),a={name:`zh/nodejs/api/tty.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="tty" tabindex="-1">TTY <a class="header-anchor" href="#tty" aria-label="Permalink to “TTY”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定</p></div><p><strong>源代码:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/tty.js" target="_blank" rel="noreferrer">lib/tty.js</a></p><p><code>node:tty</code> 模块提供了 <code>tty.ReadStream</code> 和 <code>tty.WriteStream</code> 类。在大多数情况下，没有必要或不可能直接使用此模块。但是，可以通过以下方式访问它：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:tty&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当 Node.js 检测到它正在与连接的文本终端（&quot;TTY&quot;）一起运行时，默认情况下，<a href="/zh/nodejs/api/process#processstdin"><code>process.stdin</code></a> 将被初始化为 <code>tty.ReadStream</code> 的实例，并且默认情况下，<a href="/zh/nodejs/api/process#processstdout"><code>process.stdout</code></a> 和 <a href="/zh/nodejs/api/process#processstderr"><code>process.stderr</code></a> 都将是 <code>tty.WriteStream</code> 的实例。确定 Node.js 是否在 TTY 上下文中运行的首选方法是检查 <code>process.stdout.isTTY</code> 属性的值是否为 <code>true</code>：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Boolean(process.stdout.isTTY)&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Boolean(process.stdout.isTTY)&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cat</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在大多数情况下，应用程序几乎没有理由手动创建 <code>tty.ReadStream</code> 和 <code>tty.WriteStream</code> 类的实例。</p><h2 id="class-ttyreadstream" tabindex="-1">类: <code>tty.ReadStream</code> <a class="header-anchor" href="#class-ttyreadstream" aria-label="Permalink to “类: tty.ReadStream”">​</a></h2><p><strong>新增于: v0.5.8</strong></p><ul><li>继承自: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>表示 TTY 的可读端。在正常情况下，<a href="/zh/nodejs/api/process#processstdin"><code>process.stdin</code></a> 将是 Node.js 进程中唯一的 <code>tty.ReadStream</code> 实例，并且没有理由创建额外的实例。</p><h3 id="readstreamisraw" tabindex="-1"><code>readStream.isRaw</code> <a class="header-anchor" href="#readstreamisraw" aria-label="Permalink to “readStream.isRaw”">​</a></h3><p><strong>新增于: v0.7.7</strong></p><p>一个 <code>boolean</code> 值，如果 TTY 当前配置为作为原始设备运行，则为 <code>true</code>。</p><p>即使终端以原始模式运行，此标志在进程启动时始终为 <code>false</code>。它的值将随着后续对 <code>setRawMode</code> 的调用而改变。</p><h3 id="readstreamistty" tabindex="-1"><code>readStream.isTTY</code> <a class="header-anchor" href="#readstreamistty" aria-label="Permalink to “readStream.isTTY”">​</a></h3><p><strong>新增于: v0.5.8</strong></p><p>一个 <code>boolean</code> 值，对于 <code>tty.ReadStream</code> 实例始终为 <code>true</code>。</p><h3 id="readstreamsetrawmodemode" tabindex="-1"><code>readStream.setRawMode(mode)</code> <a class="header-anchor" href="#readstreamsetrawmodemode" aria-label="Permalink to “readStream.setRawMode(mode)”">​</a></h3><p><strong>新增于: v0.7.7</strong></p><ul><li><code>mode</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果为 <code>true</code>，则配置 <code>tty.ReadStream</code> 以作为原始设备运行。 如果为 <code>false</code>，则配置 <code>tty.ReadStream</code> 以其默认模式运行。 <code>readStream.isRaw</code> 属性将被设置为结果模式。</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a> 读取流实例。</li></ul><p>允许配置 <code>tty.ReadStream</code>，使其作为原始设备运行。</p><p>在原始模式下，输入始终以字符为单位提供，不包括修饰符。 此外，终端对字符的所有特殊处理都将被禁用，包括回显输入字符。 在此模式下，+ 将不再导致 <code>SIGINT</code>。</p><h2 id="class-ttywritestream" tabindex="-1">Class: <code>tty.WriteStream</code> <a class="header-anchor" href="#class-ttywritestream" aria-label="Permalink to “Class: tty.WriteStream”">​</a></h2><p><strong>新增于: v0.5.8</strong></p><ul><li>继承: <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>表示 TTY 的可写端。 在正常情况下，<a href="/zh/nodejs/api/process#processstdout"><code>process.stdout</code></a> 和 <a href="/zh/nodejs/api/process#processstderr"><code>process.stderr</code></a> 将是为 Node.js 进程创建的唯一 <code>tty.WriteStream</code> 实例，并且没有理由创建其他实例。</p><h3 id="new-ttyreadstreamfd-options" tabindex="-1"><code>new tty.ReadStream(fd[, options])</code> <a class="header-anchor" href="#new-ttyreadstreamfd-options" aria-label="Permalink to “new tty.ReadStream(fd[, options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v0.9.4</td><td>支持 <code>options</code> 参数。</td></tr><tr><td>v0.5.8</td><td>新增于: v0.5.8</td></tr></tbody></table></div><ul><li><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 与 TTY 关联的文件描述符。</li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 传递给父 <code>net.Socket</code> 的选项，请参见 <a href="/zh/nodejs/api/net#new-netsocketoptions"><code>net.Socket</code> 构造函数</a> 的 <code>options</code>。</li><li>返回 <a href="/zh/nodejs/api/tty#class-ttyreadstream">&lt;tty.ReadStream&gt;</a></li></ul><p>为与 TTY 关联的 <code>fd</code> 创建一个 <code>ReadStream</code>。</p><h3 id="new-ttywritestreamfd" tabindex="-1"><code>new tty.WriteStream(fd)</code> <a class="header-anchor" href="#new-ttywritestreamfd" aria-label="Permalink to “new tty.WriteStream(fd)”">​</a></h3><p><strong>新增于: v0.5.8</strong></p><ul><li><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 与 TTY 关联的文件描述符。</li><li>返回 <a href="/zh/nodejs/api/tty#class-ttywritestream">&lt;tty.WriteStream&gt;</a></li></ul><p>为与 TTY 关联的 <code>fd</code> 创建一个 <code>WriteStream</code>。</p><h3 id="event-resize" tabindex="-1">事件: <code>&#39;resize&#39;</code> <a class="header-anchor" href="#event-resize" aria-label="Permalink to “事件: &#39;resize&#39;”">​</a></h3><p><strong>新增于: v0.7.7</strong></p><p>每当 <code>writeStream.columns</code> 或 <code>writeStream.rows</code> 属性发生更改时，就会触发 <code>&#39;resize&#39;</code> 事件。 调用时，不会将任何参数传递给监听器回调。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;屏幕尺寸已更改!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">columns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}x\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rows</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="writestreamclearlinedir-callback" tabindex="-1"><code>writeStream.clearLine(dir[, callback])</code> <a class="header-anchor" href="#writestreamclearlinedir-callback" aria-label="Permalink to “writeStream.clearLine(dir[, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.7.0</td><td>公开了流的 write() 回调和返回值。</td></tr><tr><td>v0.7.7</td><td>新增于: v0.7.7</td></tr></tbody></table></div><ul><li><p><code>dir</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></p><ul><li><code>-1</code>: 从光标到左侧</li><li><code>1</code>: 从光标到右侧</li><li><code>0</code>: 整行</li></ul></li><li><p><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 操作完成后调用。</p></li><li><p>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果流希望调用代码在继续写入其他数据之前等待发出 <code>&#39;drain&#39;</code> 事件，则为 <code>false</code>； 否则为 <code>true</code>。</p></li></ul><p><code>writeStream.clearLine()</code> 清除此 <code>WriteStream</code> 中由 <code>dir</code> 标识的方向上的当前行。</p><h3 id="writestreamclearscreendowncallback" tabindex="-1"><code>writeStream.clearScreenDown([callback])</code> <a class="header-anchor" href="#writestreamclearscreendowncallback" aria-label="Permalink to “writeStream.clearScreenDown([callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.7.0</td><td>公开了流的 write() 回调和返回值。</td></tr><tr><td>v0.7.7</td><td>新增于: v0.7.7</td></tr></tbody></table></div><ul><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 操作完成后调用。</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果流希望调用代码在继续写入其他数据之前等待发出 <code>&#39;drain&#39;</code> 事件，则为 <code>false</code>； 否则为 <code>true</code>。</li></ul><p><code>writeStream.clearScreenDown()</code> 从当前光标向下清除此 <code>WriteStream</code>。</p><h3 id="writestreamcolumns" tabindex="-1"><code>writeStream.columns</code> <a class="header-anchor" href="#writestreamcolumns" aria-label="Permalink to “writeStream.columns”">​</a></h3><p><strong>新增于: v0.7.7</strong></p><p>一个 <code>number</code>，指定了 TTY 当前拥有的列数。此属性在每次发出 <code>&#39;resize&#39;</code> 事件时都会更新。</p><h3 id="writestreamcursortox-y-callback" tabindex="-1"><code>writeStream.cursorTo(x[, y][, callback])</code> <a class="header-anchor" href="#writestreamcursortox-y-callback" aria-label="Permalink to “writeStream.cursorTo(x[, y][, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.7.0</td><td>stream 的 write() 回调和返回值被暴露。</td></tr><tr><td>v0.7.7</td><td>新增于: v0.7.7</td></tr></tbody></table></div><ul><li><code>x</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>y</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 操作完成后调用。</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果流希望调用代码在继续写入其他数据之前等待 <code>&#39;drain&#39;</code> 事件发出，则返回 <code>false</code>；否则返回 <code>true</code>。</li></ul><p><code>writeStream.cursorTo()</code> 将此 <code>WriteStream</code> 的光标移动到指定位置。</p><h3 id="writestreamgetcolordepthenv" tabindex="-1"><code>writeStream.getColorDepth([env])</code> <a class="header-anchor" href="#writestreamgetcolordepthenv" aria-label="Permalink to “writeStream.getColorDepth([env])”">​</a></h3><p><strong>新增于: v9.9.0</strong></p><ul><li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 包含要检查的环境变量的对象。 这使得能够模拟特定终端的使用。 <strong>默认值:</strong> <code>process.env</code>。</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>返回：</p><ul><li><code>1</code> 表示支持 2 种颜色，</li><li><code>4</code> 表示支持 16 种颜色，</li><li><code>8</code> 表示支持 256 种颜色，</li><li><code>24</code> 表示支持 16,777,216 种颜色。</li></ul><p>使用此方法来确定终端支持哪些颜色。 由于终端中颜色的性质，可能存在误报或漏报。 这取决于进程信息和可能谎报所用终端的环境变量。 可以传入一个 <code>env</code> 对象来模拟特定终端的使用。 这对于检查特定环境设置的行为方式很有用。</p><p>要强制执行特定的颜色支持，请使用以下环境设置之一。</p><ul><li>2 种颜色：<code>FORCE_COLOR = 0</code>（禁用颜色）</li><li>16 种颜色：<code>FORCE_COLOR = 1</code></li><li>256 种颜色：<code>FORCE_COLOR = 2</code></li><li>16,777,216 种颜色：<code>FORCE_COLOR = 3</code></li></ul><p>也可以使用 <code>NO_COLOR</code> 和 <code>NODE_DISABLE_COLORS</code> 环境变量来禁用颜色支持。</p><h3 id="writestreamgetwindowsize" tabindex="-1"><code>writeStream.getWindowSize()</code> <a class="header-anchor" href="#writestreamgetwindowsize" aria-label="Permalink to “writeStream.getWindowSize()”">​</a></h3><p><strong>Added in: v0.7.7</strong></p><ul><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number[]&gt;</a></li></ul><p><code>writeStream.getWindowSize()</code> 返回与此 <code>WriteStream</code> 对应的 TTY 的大小。该数组的类型为 <code>[numColumns, numRows]</code>，其中 <code>numColumns</code> 和 <code>numRows</code> 分别表示相应 TTY 中的列数和行数。</p><h3 id="writestreamhascolorscount-env" tabindex="-1"><code>writeStream.hasColors([count][, env])</code> <a class="header-anchor" href="#writestreamhascolorscount-env" aria-label="Permalink to “writeStream.hasColors([count][, env])”">​</a></h3><p><strong>Added in: v11.13.0, v10.16.0</strong></p><ul><li><code>count</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> 请求的颜色数量（最少 2 种）。<strong>默认值:</strong> 16.</li><li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 包含要检查的环境变量的对象。这使得可以模拟特定终端的使用。<strong>默认值:</strong> <code>process.env</code>。</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果 <code>writeStream</code> 支持至少与 <code>count</code> 中提供的颜色一样多的颜色，则返回 <code>true</code>。最低支持为 2 种颜色（黑色和白色）。</p><p>这具有与 <a href="/zh/nodejs/api/tty#writestreamgetcolordepthenv"><code>writeStream.getColorDepth()</code></a> 中描述的相同的误报和漏报。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根据 \`stdout\` 是否支持至少 16 种颜色，返回 true 或 false。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根据 \`stdout\` 是否支持至少 256 种颜色，返回 true 或 false。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ TMUX: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 true。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { TMUX: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 false（环境设置假装支持 2 ** 8 种颜色）。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="writestreamistty" tabindex="-1"><code>writeStream.isTTY</code> <a class="header-anchor" href="#writestreamistty" aria-label="Permalink to “writeStream.isTTY”">​</a></h3><p><strong>Added in: v0.5.8</strong></p><p>一个始终为 <code>true</code> 的 <code>boolean</code> 值。</p><h3 id="writestreammovecursordx-dy-callback" tabindex="-1"><code>writeStream.moveCursor(dx, dy[, callback])</code> <a class="header-anchor" href="#writestreammovecursordx-dy-callback" aria-label="Permalink to “writeStream.moveCursor(dx, dy[, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.7.0</td><td>stream 的 write() 回调和返回值被公开。</td></tr><tr><td>v0.7.7</td><td>添加于: v0.7.7</td></tr></tbody></table></div><ul><li><code>dx</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>dy</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 操作完成后调用。</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果流希望调用代码在继续写入其他数据之前等待发出 <code>&#39;drain&#39;</code> 事件，则为 <code>false</code>；否则为 <code>true</code>。</li></ul><p><code>writeStream.moveCursor()</code> 将此 <code>WriteStream</code> 的光标<em>相对于</em>其当前位置移动。</p><h3 id="writestreamrows" tabindex="-1"><code>writeStream.rows</code> <a class="header-anchor" href="#writestreamrows" aria-label="Permalink to “writeStream.rows”">​</a></h3><p><strong>加入于: v0.7.7</strong></p><p>一个 <code>number</code>，指定 TTY 当前具有的行数。每当发出 <code>&#39;resize&#39;</code> 事件时，此属性都会更新。</p><h2 id="ttyisattyfd" tabindex="-1"><code>tty.isatty(fd)</code> <a class="header-anchor" href="#ttyisattyfd" aria-label="Permalink to “tty.isatty(fd)”">​</a></h2><p><strong>加入于: v0.5.8</strong></p><ul><li><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 一个数字文件描述符</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果给定的 <code>fd</code> 与 TTY 相关联，则 <code>tty.isatty()</code> 方法返回 <code>true</code>，如果不是，则返回 <code>false</code>，包括当 <code>fd</code> 不是非负整数时。</p>`,88)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};