import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"فهم حلقة الأحداث في Node.js","description":"حلقة الأحداث هي جوهر Node.js، مما يسمح له بأداء العمليات غير المتزامنة. إنها حلقة ذات خيط واحد تقوم بتحميل العمليات إلى نواة النظام عند الإمكان.","frontmatter":{"title":"فهم حلقة الأحداث في Node.js","description":"حلقة الأحداث هي جوهر Node.js، مما يسمح له بأداء العمليات غير المتزامنة. إنها حلقة ذات خيط واحد تقوم بتحميل العمليات إلى نواة النظام عند الإمكان.","head":[["meta",{"name":"og:title","content":"فهم حلقة الأحداث في Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"حلقة الأحداث هي جوهر Node.js، مما يسمح له بأداء العمليات غير المتزامنة. إنها حلقة ذات خيط واحد تقوم بتحميل العمليات إلى نواة النظام عند الإمكان."}],["meta",{"name":"twitter:title","content":"فهم حلقة الأحداث في Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"حلقة الأحداث هي جوهر Node.js، مما يسمح له بأداء العمليات غير المتزامنة. إنها حلقة ذات خيط واحد تقوم بتحميل العمليات إلى نواة النظام عند الإمكان."}],["link",{"rel":"canonical","href":"https://idoc.dev/ar/nodejs/guide/nodejs-event-loop"}],["meta",{"property":"og:url","content":"https://idoc.dev/ar/nodejs/guide/nodejs-event-loop"}]]},"headers":[],"relativePath":"ar/nodejs/guide/nodejs-event-loop.md","filePath":"ar/nodejs/guide/nodejs-event-loop.md","lastUpdated":null}`),a={name:`ar/nodejs/guide/nodejs-event-loop.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="حلقة-الأحداث-في-node-js" tabindex="-1">حلقة الأحداث في Node.js <a class="header-anchor" href="#حلقة-الأحداث-في-node-js" aria-label="Permalink to “حلقة الأحداث في Node.js”">​</a></h1><h2 id="ما-هي-حلقة-الأحداث؟" tabindex="-1">ما هي حلقة الأحداث؟ <a class="header-anchor" href="#ما-هي-حلقة-الأحداث؟" aria-label="Permalink to “ما هي حلقة الأحداث؟”">​</a></h2><p>حلقة الأحداث هي ما يسمح لـ Node.js بتنفيذ عمليات الإدخال/الإخراج غير المحظورة - على الرغم من حقيقة أن سلسلة JavaScript واحدة تُستخدم افتراضيًا - عن طريق تفريغ العمليات إلى نواة النظام كلما أمكن ذلك.</p><p>نظرًا لأن معظم النوى الحديثة متعددة الخيوط، يمكنها التعامل مع عمليات متعددة يتم تنفيذها في الخلفية. عندما تكتمل إحدى هذه العمليات، تخبر النواة Node.js بحيث يمكن إضافة الاستدعاء المناسب إلى قائمة الانتظار الخاصة بالاستقصاء ليتم تنفيذه في النهاية. سنشرح هذا بمزيد من التفصيل لاحقًا في هذا الموضوع.</p><h2 id="شرح-حلقة-الأحداث" tabindex="-1">شرح حلقة الأحداث <a class="header-anchor" href="#شرح-حلقة-الأحداث" aria-label="Permalink to “شرح حلقة الأحداث”">​</a></h2><p>عندما تبدأ Node.js، فإنها تهيئ حلقة الأحداث، وتعالج البرنامج النصي المُدخل (أو تنتقل إلى REPL، والذي لم تتم تغطيته في هذه الوثيقة) والذي قد يُجري استدعاءات API غير متزامنة، أو يجدول المؤقتات، أو يستدعي process.nextTick()، ثم تبدأ في معالجة حلقة الأحداث.</p><p>يوضح الرسم التخطيطي التالي نظرة عامة مبسطة على ترتيب عمليات حلقة الأحداث.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ┌───────────────────────────┐</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">┌─</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           timers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └─────────────┬─────────────┘</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ┌─────────────┴─────────────┐</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     pending</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> callbacks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └─────────────┬─────────────┘</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ┌─────────────┴─────────────┐</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       idle,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prepare</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └─────────────┬─────────────┘</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      ┌───────────────┐</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ┌─────────────┴─────────────┐</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   incoming:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           poll</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            │</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">─────┤</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  connections,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └─────────────┬─────────────┘</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   data,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> etc.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ┌─────────────┴─────────────┐</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      └───────────────┘</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           check</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └─────────────┬─────────────┘</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ┌─────────────┴─────────────┐</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──┤</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      close</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> callbacks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   └───────────────────────────┘</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>سيُشار إلى كل مربع على أنه &quot;مرحلة&quot; من حلقة الأحداث.</p></div><p>تحتوي كل مرحلة على قائمة انتظار FIFO للاستدعاءات المراد تنفيذها. في حين أن كل مرحلة خاصة بطريقتها الخاصة، بشكل عام، عندما تدخل حلقة الأحداث مرحلة معينة، فإنها ستنفذ أي عمليات خاصة بتلك المرحلة، ثم تنفذ الاستدعاءات في قائمة الانتظار الخاصة بتلك المرحلة حتى يتم استنفاد قائمة الانتظار أو يتم تنفيذ الحد الأقصى لعدد الاستدعاءات. عندما يتم استنفاد قائمة الانتظار أو يتم الوصول إلى حد الاستدعاء، ستنتقل حلقة الأحداث إلى المرحلة التالية، وهكذا.</p><p>نظرًا لأن أيًا من هذه العمليات قد يجدول المزيد من العمليات ويتم وضع الأحداث الجديدة التي تتم معالجتها في مرحلة <strong>الاستقصاء</strong> في قائمة الانتظار بواسطة النواة، يمكن وضع أحداث الاستقصاء في قائمة الانتظار أثناء معالجة أحداث الاستقصاء. نتيجة لذلك، يمكن أن تسمح الاستدعاءات طويلة الأمد لمرحلة الاستقصاء بالتشغيل لفترة أطول بكثير من عتبة المؤقت. راجع قسمي المؤقتات والاستقصاء لمزيد من التفاصيل.</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>هناك اختلاف طفيف بين تطبيق Windows و Unix/Linux، ولكن هذا ليس مهمًا لهذا العرض التوضيحي. الأجزاء الأكثر أهمية موجودة هنا. هناك بالفعل سبع أو ثماني خطوات، ولكن تلك التي نهتم بها - تلك التي تستخدمها Node.js بالفعل - هي تلك المذكورة أعلاه.</p></div><h2 id="نظرة-عامة-على-المراحل" tabindex="-1">نظرة عامة على المراحل <a class="header-anchor" href="#نظرة-عامة-على-المراحل" aria-label="Permalink to “نظرة عامة على المراحل”">​</a></h2><ul><li><strong>المؤقتات</strong>: تنفذ هذه المرحلة ردود الاتصال المجدولة بواسطة <code>setTimeout()</code> و <code>setInterval()</code>.</li><li><strong>ردود الاتصال المعلقة</strong>: تنفذ ردود اتصال الإدخال/الإخراج المؤجلة إلى التكرار التالي للحلقة.</li><li><strong>الخمول، التحضير</strong>: تستخدم داخليًا فقط.</li><li><strong>الاستقصاء</strong>: استرداد أحداث الإدخال/الإخراج الجديدة؛ تنفيذ ردود الاتصال المتعلقة بالإدخال/الإخراج (تقريبًا كلها باستثناء ردود اتصال الإغلاق، وتلك المجدولة بواسطة المؤقتات، و <code>setImmediate()</code>)؛ ستحظر العقدة هنا عند الاقتضاء.</li><li><strong>التحقق</strong>: يتم استدعاء ردود اتصال <code>setImmediate()</code> هنا.</li><li><strong>ردود اتصال الإغلاق</strong>: بعض ردود اتصال الإغلاق، على سبيل المثال <code>socket.on(&#39;close&#39;, ...)</code>.</li></ul><p>بين كل تشغيل لحلقة الأحداث، تتحقق Node.js مما إذا كانت تنتظر أي إدخال/إخراج غير متزامن أو مؤقتات وتتوقف بشكل نظيف إذا لم يكن هناك أي منها.</p><h2 id="المراحل-بالتفصيل" tabindex="-1">المراحل بالتفصيل <a class="header-anchor" href="#المراحل-بالتفصيل" aria-label="Permalink to “المراحل بالتفصيل”">​</a></h2><h3 id="المؤقتات" tabindex="-1">المؤقتات <a class="header-anchor" href="#المؤقتات" aria-label="Permalink to “المؤقتات”">​</a></h3><p>يحدد المؤقت <strong>الحد الأدنى</strong> الذي بعده يمكن تنفيذ رد اتصال مقدم بدلاً من الوقت <strong>الدقيق</strong> الذي يرغب الشخص <em>في تنفيذه</em>. سيتم تشغيل ردود اتصال المؤقتات في أقرب وقت ممكن بعد انقضاء الفترة الزمنية المحددة؛ ومع ذلك، قد يؤدي جدولة نظام التشغيل أو تشغيل ردود اتصال أخرى إلى تأخيرها.</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>من الناحية الفنية، تتحكم مرحلة <a href="/ar/nodejs/guide/nodejs-event-loop#poll">الاستقصاء</a> في وقت تنفيذ المؤقتات.</p></div><p>على سبيل المثال، لنفترض أنك جدولت مهلة للتنفيذ بعد حد 100 مللي ثانية، ثم يبدأ البرنامج النصي الخاص بك بشكل غير متزامن في قراءة ملف يستغرق 95 مللي ثانية:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someAsyncOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // افترض أن هذا يستغرق 95 مللي ثانية لإكماله</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, callback);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeoutScheduled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> delay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeoutScheduled;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">delay</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}ms have passed since I was scheduled\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// قم بتشغيل someAsyncOperation الذي يستغرق 95 مللي ثانية لإكماله</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">someAsyncOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> startCallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // قم بفعل شيء سيستغرق 10 مللي ثانية...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startCallback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // لا تفعل شيئًا</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>عندما تدخل حلقة الأحداث مرحلة <strong>الاستقصاء</strong>، يكون لديها قائمة انتظار فارغة (<code>fs.readFile()</code> لم يكتمل)، لذلك ستنتظر عدد المللي ثانية المتبقية حتى يتم الوصول إلى الحد الأدنى للمؤقت الأقرب. أثناء الانتظار، تمر 95 مللي ثانية، وينتهي <code>fs.readFile()</code> من قراءة الملف ويتم إضافة رد الاتصال الخاص به الذي يستغرق 10 مللي ثانية لإكماله إلى قائمة انتظار الاستقصاء وتنفيذه. عند انتهاء رد الاتصال، لا توجد المزيد من ردود الاتصال في قائمة الانتظار، لذلك سترى حلقة الأحداث أن الحد الأدنى للمؤقت الأقرب قد تم الوصول إليه ثم تعود إلى مرحلة المؤقتات لتنفيذ رد اتصال المؤقت. في هذا المثال، سترى أن إجمالي التأخير بين جدولة المؤقت وتنفيذ رد الاتصال الخاص به سيكون 105 مللي ثانية.</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>لمنع مرحلة الاستقصاء من تجويع حلقة الأحداث، فإن <a href="https://libuv.org/" target="_blank" rel="noreferrer">libuv</a> (مكتبة C التي تنفذ حلقة أحداث Node.js وجميع السلوكيات غير المتزامنة للنظام الأساسي) لديها أيضًا حد أقصى صارم (يعتمد على النظام) قبل أن تتوقف عن استقصاء المزيد من الأحداث.</p></div><h2 id="ردود-الاتصال-المعلقة" tabindex="-1">ردود الاتصال المعلقة <a class="header-anchor" href="#ردود-الاتصال-المعلقة" aria-label="Permalink to “ردود الاتصال المعلقة”">​</a></h2><p>تقوم هذه المرحلة بتنفيذ ردود الاتصال لبعض عمليات النظام مثل أنواع أخطاء TCP. على سبيل المثال، إذا تلقى مقبس TCP رمز <code>ECONNREFUSED</code> عند محاولة الاتصال، فإن بعض أنظمة *nix ترغب في الانتظار للإبلاغ عن الخطأ. سيتم وضع هذا في قائمة الانتظار للتنفيذ في مرحلة <strong>ردود الاتصال المعلقة</strong>.</p><h3 id="الاستقصاء" tabindex="-1">الاستقصاء <a class="header-anchor" href="#الاستقصاء" aria-label="Permalink to “الاستقصاء”">​</a></h3><p>لمرحلة <strong>الاستقصاء</strong> وظيفتان رئيسيتان:</p><ol><li>حساب المدة التي يجب أن تحظرها وتستقصيها للإدخال/الإخراج، ثم</li><li>معالجة الأحداث في قائمة انتظار <strong>الاستقصاء</strong>.</li></ol><p>عندما تدخل حلقة الأحداث مرحلة <strong>الاستقصاء</strong> ولا توجد مؤقتات مجدولة، سيحدث أحد أمرين:</p><ul><li><p>إذا كانت قائمة انتظار <em><strong>الاستقصاء</strong></em> <em><strong>غير فارغة</strong></em>، فستقوم حلقة الأحداث بالتكرار خلال قائمة انتظار ردود الاتصال الخاصة بها وتنفيذها بشكل متزامن حتى يتم استنفاد قائمة الانتظار، أو يتم الوصول إلى الحد الأقصى الثابت المعتمد على النظام.</p></li><li><p>إذا كانت قائمة انتظار <em><strong>الاستقصاء</strong></em> <em><strong>فارغة</strong></em>، فسيحدث أحد أمرين آخرين:</p><ul><li><p>إذا تمت جدولة البرامج النصية بواسطة <code>setImmediate()</code>، فستنهي حلقة الأحداث مرحلة <strong>الاستقصاء</strong> وتنتقل إلى مرحلة التحقق لتنفيذ تلك البرامج النصية المجدولة.</p></li><li><p>إذا <strong>لم</strong> يتم جدولة البرامج النصية بواسطة <code>setImmediate()</code>، فستنتظر حلقة الأحداث حتى تتم إضافة ردود الاتصال إلى قائمة الانتظار، ثم تقوم بتنفيذها على الفور.</p></li></ul></li></ul><p>بمجرد أن تصبح قائمة انتظار <strong>الاستقصاء</strong> فارغة، ستتحقق حلقة الأحداث من المؤقتات <em>التي تم الوصول إلى عتباتها الزمنية</em>. إذا كان هناك مؤقت واحد أو أكثر جاهزًا، فستعود حلقة الأحداث إلى مرحلة <strong>المؤقتات</strong> لتنفيذ ردود الاتصال الخاصة بتلك المؤقتات.</p><h3 id="التحقق" tabindex="-1">التحقق <a class="header-anchor" href="#التحقق" aria-label="Permalink to “التحقق”">​</a></h3><p>تسمح هذه المرحلة للشخص بتنفيذ ردود الاتصال فور اكتمال مرحلة <strong>الاستقصاء</strong>. إذا أصبحت مرحلة <strong>الاستقصاء</strong> خاملة وتم وضع البرامج النصية في قائمة الانتظار باستخدام <code>setImmediate()</code>، فقد تستمر حلقة الأحداث إلى مرحلة التحقق بدلاً من الانتظار.</p><p><code>setImmediate()</code> هو في الواقع مؤقت خاص يعمل في مرحلة منفصلة من حلقة الأحداث. يستخدم واجهة برمجة تطبيقات libuv التي تجدول ردود الاتصال للتنفيذ بعد اكتمال مرحلة <strong>الاستقصاء</strong>.</p><p>بشكل عام، أثناء تنفيذ التعليمات البرمجية، ستصل حلقة الأحداث في النهاية إلى مرحلة <strong>الاستقصاء</strong> حيث ستنتظر اتصالًا واردًا أو طلبًا وما إلى ذلك. ومع ذلك، إذا تم جدولة رد اتصال باستخدام <code>setImmediate()</code> وأصبحت مرحلة <strong>الاستقصاء</strong> خاملة، فستنتهي وتستمر إلى مرحلة <strong>التحقق</strong> بدلاً من انتظار أحداث <strong>الاستقصاء</strong>.</p><h3 id="close-callbacks" tabindex="-1">close callbacks <a class="header-anchor" href="#close-callbacks" aria-label="Permalink to “close callbacks”">​</a></h3><p>إذا تم إغلاق مقبس أو معالج بشكل مفاجئ (على سبيل المثال، <code>socket.destroy()</code>)، فسيتم إصدار حدث <code>&#39;close&#39;</code> في هذه المرحلة. وإلا فسيتم إصداره عبر <code>process.nextTick()</code>.</p><h2 id="setimmediate-مقابل-settimeout" tabindex="-1"><code>setImmediate()</code> مقابل <code>setTimeout()</code> <a class="header-anchor" href="#setimmediate-مقابل-settimeout" aria-label="Permalink to “setImmediate() مقابل setTimeout()”">​</a></h2><p>تتشابه <code>setImmediate()</code> و <code>setTimeout()</code>، ولكنهما تتصرفان بطرق مختلفة اعتمادًا على وقت استدعائهما.</p><ul><li>تم تصميم <code>setImmediate()</code> لتنفيذ برنامج نصي بمجرد انتهاء مرحلة <strong>الاستقصاء</strong> الحالية.</li><li>تحدد <code>setTimeout()</code> جدولاً لتشغيل برنامج نصي بعد انقضاء حد أدنى بالمللي ثانية.</li></ul><p>سيختلف ترتيب تنفيذ المؤقتات اعتمادًا على السياق الذي يتم استدعاؤها فيه. إذا تم استدعاؤهما معًا من داخل الوحدة الرئيسية، فسيكون التوقيت مرتبطًا بأداء العملية (والذي يمكن أن يتأثر بالتطبيقات الأخرى التي تعمل على الجهاز).</p><p>على سبيل المثال، إذا قمنا بتشغيل البرنامج النصي التالي الذي لا يقع ضمن دورة إدخال/إخراج (أي الوحدة الرئيسية)، فإن ترتيب تنفيذ المؤقتين غير حتمي، لأنه مرتبط بأداء العملية:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-198" id="tab-199" checked><label data-title="JS" for="tab-199">JS</label><input type="radio" name="group-198" id="tab-200"><label data-title="BASH" for="tab-200">BASH</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// timeout_vs_immediate.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;immediate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout_vs_immediate.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeout</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">immediate</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout_vs_immediate.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">immediate</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeout</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div></div><p>ومع ذلك، إذا قمت بنقل الاستدعاءين إلى داخل دورة إدخال/إخراج، فسيتم دائمًا تنفيذ رد الاتصال الفوري أولاً:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-205" id="tab-206" checked><label data-title="JS" for="tab-206">JS</label><input type="radio" name="group-205" id="tab-207"><label data-title="BASH" for="tab-207">BASH</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// timeout_vs_immediate.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;immediate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout_vs_immediate.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">immediate</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeout</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout_vs_immediate.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">immediate</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeout</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div></div><p>الميزة الرئيسية لاستخدام <code>setImmediate()</code> على <code>setTimeout()</code> هي أن <code>setImmediate()</code> سيتم تنفيذه دائمًا قبل أي مؤقتات إذا تم تحديده ضمن دورة إدخال/إخراج، بغض النظر عن عدد المؤقتات الموجودة.</p><h2 id="process-nexttick" tabindex="-1"><code>process.nextTick()</code> <a class="header-anchor" href="#process-nexttick" aria-label="Permalink to “process.nextTick()”">​</a></h2><h3 id="فهم-process-nexttick" tabindex="-1">فهم <code>process.nextTick()</code> <a class="header-anchor" href="#فهم-process-nexttick" aria-label="Permalink to “فهم process.nextTick()”">​</a></h3><p>ربما لاحظت أن <code>process.nextTick()</code> لم يتم عرضه في الرسم التخطيطي، على الرغم من أنه جزء من واجهة برمجة التطبيقات غير المتزامنة. وذلك لأن <code>process.nextTick()</code> ليس جزءًا تقنيًا من حلقة الأحداث. بدلاً من ذلك، ستتم معالجة <code>nextTickQueue</code> بعد اكتمال العملية الحالية، بغض النظر عن المرحلة الحالية من حلقة الأحداث. هنا، يتم تعريف العملية على أنها انتقال من معالج C/C++ الأساسي، ومعالجة JavaScript التي تحتاج إلى التنفيذ.</p><p>بالنظر إلى الرسم التخطيطي الخاص بنا، في أي وقت تقوم فيه باستدعاء <code>process.nextTick()</code> في مرحلة معينة، سيتم حل جميع عمليات الاسترجاع التي تم تمريرها إلى <code>process.nextTick()</code> قبل أن تستمر حلقة الأحداث. يمكن أن يخلق هذا بعض المواقف السيئة لأنه <strong>يسمح لك &quot;بتجويع&quot; الإدخال/الإخراج الخاص بك عن طريق إجراء استدعاءات</strong> <code>process.nextTick()</code> متكررة، مما يمنع حلقة الأحداث من الوصول إلى مرحلة <strong>الاستقصاء</strong>.</p><h3 id="لماذا-يُسمح-بذلك؟" tabindex="-1">لماذا يُسمح بذلك؟ <a class="header-anchor" href="#لماذا-يُسمح-بذلك؟" aria-label="Permalink to “لماذا يُسمح بذلك؟”">​</a></h3><p>لماذا يتم تضمين شيء كهذا في Node.js؟ جزء من ذلك هو فلسفة تصميم حيث يجب أن تكون واجهة برمجة التطبيقات دائمًا غير متزامنة حتى في الحالات التي لا يجب أن تكون فيها كذلك. خذ مقتطف الشفرة هذا على سبيل المثال:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apiCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      callback,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;argument should be string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>يقوم المقتطف بفحص الوسيطة وإذا لم يكن صحيحًا، فسوف يقوم بتمرير الخطأ إلى الاسترجاع. تم تحديث واجهة برمجة التطبيقات مؤخرًا للسماح بتمرير الوسائط إلى <code>process.nextTick()</code> مما يسمح لها بأخذ أي وسيطات يتم تمريرها بعد الاسترجاع ليتم نشرها كوسيطات إلى الاسترجاع حتى لا تضطر إلى تداخل الوظائف.</p><p>ما نفعله هو إعادة خطأ إلى المستخدم ولكن فقط بعد أن سمحنا لبقية رمز المستخدم بالتنفيذ. باستخدام <code>process.nextTick()</code> نضمن أن <code>apiCall()</code> يقوم دائمًا بتشغيل الاسترجاع الخاص به بعد بقية رمز المستخدم وقبل السماح لحلقة الأحداث بالمتابعة. لتحقيق ذلك، يُسمح لمكدس استدعاء JS بالتراجع ثم تنفيذ الاسترجاع المقدم على الفور مما يسمح للشخص بإجراء استدعاءات متكررة لـ <code>process.nextTick()</code> دون الوصول إلى <code>RangeError: Maximum call stack size exceeded from v8</code>.</p><p>يمكن أن تؤدي هذه الفلسفة إلى بعض المواقف التي يحتمل أن تكون إشكالية. خذ هذا المقتطف على سبيل المثال:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// هذا له توقيع غير متزامن، لكنه يستدعي الاسترجاع بشكل متزامن</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someAsyncApiCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// يتم استدعاء الاسترجاع قبل اكتمال \`someAsyncApiCall\`.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">someAsyncApiCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // نظرًا لأن someAsyncApiCall لم يكتمل، لم يتم تعيين أي قيمة لـ bar</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bar); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// غير معرف</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>يعرف المستخدم <code>someAsyncApiCall()</code> بحيث يكون له توقيع غير متزامن، ولكنه يعمل فعليًا بشكل متزامن. عند استدعائه، يتم استدعاء الاسترجاع المقدم إلى <code>someAsyncApiCall()</code> في نفس مرحلة حلقة الأحداث لأن <code>someAsyncApiCall()</code> لا يفعل أي شيء بشكل غير متزامن. نتيجة لذلك، يحاول الاسترجاع الرجوع إلى bar على الرغم من أنه قد لا يحتوي على هذا المتغير في النطاق حتى الآن، لأن البرنامج النصي لم يتمكن من التشغيل حتى الاكتمال.</p><p>عن طريق وضع الاسترجاع في <code>process.nextTick()</code>، لا يزال البرنامج النصي لديه القدرة على التشغيل حتى الاكتمال، مما يسمح بتهيئة جميع المتغيرات والدالات وما إلى ذلك قبل استدعاء الاسترجاع. كما أن لديها ميزة عدم السماح لحلقة الأحداث بالاستمرار. قد يكون من المفيد تنبيه المستخدم إلى وجود خطأ قبل السماح لحلقة الأحداث بالاستمرار. إليك المثال السابق باستخدام <code>process.nextTick()</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someAsyncApiCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callback);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">someAsyncApiCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bar); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>إليك مثال آخر من العالم الحقيقي:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;listening&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>عندما يتم تمرير منفذ فقط، يتم ربط المنفذ على الفور. لذلك، يمكن استدعاء الاسترجاع <code>&#39;listening&#39;</code> على الفور. المشكلة هي أن الاسترجاع <code>.on(&#39;listening&#39;)</code> لن يتم تعيينه بحلول ذلك الوقت.</p><p>لتجنب ذلك، يتم وضع حدث <code>&#39;listening&#39;</code> في قائمة الانتظار في <code>nextTick()</code> للسماح للبرنامج النصي بالتشغيل حتى الاكتمال. يتيح ذلك للمستخدم تعيين أي معالجات أحداث يريدها.</p><h2 id="process-nexttick-مقابل-setimmediate" tabindex="-1"><code>process.nextTick()</code> مقابل <code>setImmediate()</code> <a class="header-anchor" href="#process-nexttick-مقابل-setimmediate" aria-label="Permalink to “process.nextTick() مقابل setImmediate()”">​</a></h2><p>لدينا استدعاءان متشابهان بقدر ما يتعلق الأمر بالمستخدمين، لكن أسماءهما مربكة.</p><ul><li>يتم تشغيل <code>process.nextTick()</code> على الفور في نفس المرحلة</li><li>يتم تشغيل <code>setImmediate()</code> في التكرار التالي أو <code>&#39;tick&#39;</code> لدورة الأحداث</li></ul><p>بمعنى آخر، يجب تبديل الأسماء. يتم تشغيل <code>process.nextTick()</code> على الفور أكثر من <code>setImmediate()</code>، لكن هذا من آثار الماضي ومن غير المرجح أن يتغير. سيؤدي إجراء هذا التبديل إلى كسر نسبة كبيرة من الحزم الموجودة على npm. يتم إضافة المزيد من الوحدات النمطية الجديدة كل يوم، مما يعني أنه كل يوم ننتظره، تحدث المزيد من الأعطال المحتملة. على الرغم من أنها مربكة، إلا أن الأسماء نفسها لن تتغير.</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>نوصي المطورين باستخدام <code>setImmediate()</code> في جميع الحالات لأنه من الأسهل التفكير فيه.</p></div><h2 id="لماذا-نستخدم-process-nexttick-؟" tabindex="-1">لماذا نستخدم <code>process.nextTick()</code>؟ <a class="header-anchor" href="#لماذا-نستخدم-process-nexttick-؟" aria-label="Permalink to “لماذا نستخدم process.nextTick()؟”">​</a></h2><p>هناك سببان رئيسيان:</p><ol><li><p>السماح للمستخدمين بمعالجة الأخطاء أو تنظيف أي موارد غير ضرورية ثم محاولة الطلب مرة أخرى قبل أن تستمر دورة الأحداث.</p></li><li><p>في بعض الأحيان يكون من الضروري السماح بتشغيل رد نداء بعد فك مكدس الاستدعاءات ولكن قبل أن تستمر دورة الأحداث.</p></li></ol><p>أحد الأمثلة هو مطابقة توقعات المستخدم. مثال بسيط:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">conn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;listening&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>لنفترض أن <code>listen()</code> يتم تشغيله في بداية دورة الأحداث، ولكن يتم وضع رد نداء الاستماع في <code>setImmediate()</code>. ما لم يتم تمرير اسم مضيف، سيحدث الربط بالمنفذ على الفور. لكي تتقدم دورة الأحداث، يجب أن تصل إلى مرحلة الاستقصاء، مما يعني أن هناك فرصة غير صفرية لتلقي اتصال يسمح بتشغيل حدث الاتصال قبل حدث الاستماع.</p><p>مثال آخر هو توسيع <code>EventEmitter</code> وإصدار حدث من داخل الدالة الإنشائية:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EventEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:events&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myEmitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;an event occurred!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>لا يمكنك إصدار حدث من الدالة الإنشائية على الفور لأن البرنامج النصي لن يكون قد تمت معالجته إلى النقطة التي يعين فيها المستخدم رد نداء لهذا الحدث. لذلك، داخل الدالة الإنشائية نفسها، يمكنك استخدام <code>process.nextTick()</code> لتعيين رد نداء لإصدار الحدث بعد انتهاء الدالة الإنشائية، مما يوفر النتائج المتوقعة:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EventEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:events&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // use nextTick to emit the event once a handler is assigned</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myEmitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;an event occurred!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,79)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};