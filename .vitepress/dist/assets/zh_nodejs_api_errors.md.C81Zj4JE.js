import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 文档 - 错误","description":"Node.js 文档的这一部分详细介绍了错误处理，包括错误类、错误代码以及如何在 Node.js 应用程序中处理错误。","frontmatter":{"title":"Node.js 文档 - 错误","description":"Node.js 文档的这一部分详细介绍了错误处理，包括错误类、错误代码以及如何在 Node.js 应用程序中处理错误。","head":[["meta",{"name":"og:title","content":"Node.js 文档 - 错误 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js 文档的这一部分详细介绍了错误处理，包括错误类、错误代码以及如何在 Node.js 应用程序中处理错误。"}],["meta",{"name":"twitter:title","content":"Node.js 文档 - 错误 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js 文档的这一部分详细介绍了错误处理，包括错误类、错误代码以及如何在 Node.js 应用程序中处理错误。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/errors"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/errors"}]]},"headers":[],"relativePath":"zh/nodejs/api/errors.md","filePath":"zh/nodejs/api/errors.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/api/errors.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="errors" tabindex="-1">错误 <a class="header-anchor" href="#errors" aria-label="Permalink to “错误”">​</a></h1><p>在 Node.js 中运行的应用程序通常会遇到以下四类错误：</p><ul><li>标准 JavaScript 错误，例如 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError" target="_blank" rel="noreferrer">&lt;EvalError&gt;</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" target="_blank" rel="noreferrer">&lt;SyntaxError&gt;</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError" target="_blank" rel="noreferrer">&lt;RangeError&gt;</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError" target="_blank" rel="noreferrer">&lt;ReferenceError&gt;</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noreferrer">&lt;TypeError&gt;</a>, 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError" target="_blank" rel="noreferrer">&lt;URIError&gt;</a>。</li><li>由底层操作系统约束触发的系统错误，例如尝试打开不存在的文件或尝试通过关闭的套接字发送数据。</li><li>由应用程序代码触发的用户指定错误。</li><li><code>AssertionError</code> 是一种特殊的错误，当 Node.js 检测到不应发生的异常逻辑违规时，可以触发这种错误。 这些通常由 <code>node:assert</code> 模块引发。</li></ul><p>Node.js 引发的所有 JavaScript 和系统错误都继承自标准 JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a> 类，或者属于该类的实例，并且保证 <em>至少</em> 提供该类上可用的属性。</p><h2 id="error-propagation-and-interception" tabindex="-1">错误传播和拦截 <a class="header-anchor" href="#error-propagation-and-interception" aria-label="Permalink to “错误传播和拦截”">​</a></h2><p>Node.js 支持多种机制来传播和处理应用程序运行时发生的错误。 如何报告和处理这些错误完全取决于 <code>Error</code> 的类型和所调用 API 的样式。</p><p>所有 JavaScript 错误都作为异常处理，这些异常会使用标准 JavaScript <code>throw</code> 机制 <em>立即</em> 生成并抛出错误。 这些错误使用 JavaScript 语言提供的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch" target="_blank" rel="noreferrer"><code>try…catch</code> 结构</a> 进行处理。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出 ReferenceError，因为 z 未定义。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在这里处理错误。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>任何使用 JavaScript <code>throw</code> 机制都会引发一个异常，该异常 <em>必须</em> 被处理，否则 Node.js 进程将立即退出。</p><p>除了少数例外，<em>同步</em> API（任何不返回 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a> 也不接受 <code>callback</code> 函数的阻塞方法，例如 <a href="/zh/nodejs/api/fs#fsreadfilesyncpath-options"><code>fs.readFileSync</code></a>），将使用 <code>throw</code> 来报告错误。</p><p><em>异步 API</em> 中发生的错误可以通过多种方式报告：</p><ul><li>一些异步方法返回一个 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a>，你应该始终考虑到它可能会被拒绝。 有关进程如何对未处理的 promise 拒绝做出反应，请参阅 <a href="/zh/nodejs/api/cli#unhandled-rejectionsmode"><code>--unhandled-rejections</code></a> 标志。</li><li>大多数接受 <code>callback</code> 函数的异步方法都会接受一个 <code>Error</code> 对象，该对象作为该函数的第一个参数传递。 如果第一个参数不是 <code>null</code> 并且是 <code>Error</code> 的一个实例，则表示发生了应该处理的错误。</li><li>当在一个属于 <a href="/zh/nodejs/api/events#class-eventemitter"><code>EventEmitter</code></a> 的对象上调用异步方法时，错误可以被路由到该对象的 <code>&#39;error&#39;</code> 事件。</li><li>Node.js API 中少数通常是异步的方法仍然可以使用 <code>throw</code> 机制来引发必须使用 <code>try…catch</code> 处理的异常。 没有此类方法的完整列表； 请参阅每个方法的文档以确定所需的适当错误处理机制。</li></ul><p>对于 <a href="/zh/nodejs/api/stream">基于流</a> 和 <a href="/zh/nodejs/api/events#class-eventemitter">基于事件发射器</a> 的 API，使用 <code>&#39;error&#39;</code> 事件机制最为常见，它们本身代表了一系列随时间推移的异步操作（而不是可能通过或失败的单个操作）。</p><p>对于 <em>所有</em> <a href="/zh/nodejs/api/events#class-eventemitter"><code>EventEmitter</code></a> 对象，如果没有提供 <code>&#39;error&#39;</code> 事件处理程序，该错误将被抛出，导致 Node.js 进程报告未捕获的异常并崩溃，除非：已为 <a href="/zh/nodejs/api/process#event-uncaughtexception"><code>&#39;uncaughtException&#39;</code></a> 事件注册了一个处理程序，或者使用了已弃用的 <a href="/zh/nodejs/api/domain"><code>node:domain</code></a> 模块。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EventEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:events&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ee</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这将导致进程崩溃，因为没有添加“error”事件处理程序。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ee.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This will crash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>以这种方式生成的错误 <em>无法</em> 使用 <code>try…catch</code> 拦截，因为它们是在调用代码已经退出 <em>之后</em> 抛出的。</p><p>开发人员必须参考每个方法的文档，以确定这些方法引发的错误如何传播。</p><h2 id="class-error" tabindex="-1">类: <code>Error</code> <a class="header-anchor" href="#class-error" aria-label="Permalink to “类: Error”">​</a></h2><p>一个通用的 JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a> 对象，它不表示发生错误的任何特定情况。 <code>Error</code> 对象捕获一个“堆栈跟踪”，详细说明代码中实例化 <code>Error</code> 的位置，并且可以提供错误的文本描述。</p><p>由 Node.js 生成的所有错误，包括所有系统和 JavaScript 错误，都将是 <code>Error</code> 类的实例或继承自该类。</p><h3 id="new-errormessage-options" tabindex="-1"><code>new Error(message[, options])</code> <a class="header-anchor" href="#new-errormessage-options" aria-label="Permalink to “new Error(message[, options])”">​</a></h3><ul><li><code>message</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>cause</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a> 导致新创建的错误的错误。</li></ul></li></ul><p>创建一个新的 <code>Error</code> 对象并将 <code>error.message</code> 属性设置为提供的文本消息。 如果传递一个对象作为 <code>message</code>，则通过调用 <code>String(message)</code> 生成文本消息。 如果提供了 <code>cause</code> 选项，则将其分配给 <code>error.cause</code> 属性。 <code>error.stack</code> 属性将表示代码中调用 <code>new Error()</code> 的位置。 堆栈跟踪取决于 <a href="https://v8.dev/docs/stack-trace-api" target="_blank" rel="noreferrer">V8 的堆栈跟踪 API</a>。 堆栈跟踪仅扩展到 (a) <em>同步代码执行</em> 的开始，或 (b) 由属性 <code>Error.stackTraceLimit</code> 给定的帧数，以较小者为准。</p><h3 id="errorcapturestacktracetargetobject-constructoropt" tabindex="-1"><code>Error.captureStackTrace(targetObject[, constructorOpt])</code> <a class="header-anchor" href="#errorcapturestacktracetargetobject-constructoropt" aria-label="Permalink to “Error.captureStackTrace(targetObject[, constructorOpt])”">​</a></h3><ul><li><code>targetObject</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li><li><code>constructorOpt</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li></ul><p>在 <code>targetObject</code> 上创建一个 <code>.stack</code> 属性，当访问该属性时，它会返回一个字符串，表示代码中调用 <code>Error.captureStackTrace()</code> 的位置。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Error.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">captureStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myObject);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myObject.stack;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类似于 \`new Error().stack\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>跟踪的第一行将以 <code>\${myObject.name}: \${myObject.message}</code> 为前缀。</p><p>可选的 <code>constructorOpt</code> 参数接受一个函数。 如果给定，则 <code>constructorOpt</code> 之上的所有帧（包括 <code>constructorOpt</code>）将从生成的堆栈跟踪中省略。</p><p><code>constructorOpt</code> 参数对于从用户那里隐藏错误生成的实现细节很有用。 例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 创建一个没有堆栈跟踪的错误，以避免计算两次堆栈跟踪。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stackTraceLimit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Error;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Error.stackTraceLimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Error.stackTraceLimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stackTraceLimit;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 捕获函数 b 之上的堆栈跟踪</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Error.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">captureStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error, b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 函数 c 和 b 都不包含在堆栈跟踪中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="errorstacktracelimit" tabindex="-1"><code>Error.stackTraceLimit</code> <a class="header-anchor" href="#errorstacktracelimit" aria-label="Permalink to “Error.stackTraceLimit”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p><code>Error.stackTraceLimit</code> 属性指定堆栈跟踪收集的堆栈帧的数量（无论是通过 <code>new Error().stack</code> 还是 <code>Error.captureStackTrace(obj)</code> 生成）。</p><p>默认值为 <code>10</code>，但可以设置为任何有效的 JavaScript 数字。更改将影响<em>在</em>值更改后捕获的任何堆栈跟踪。</p><p>如果设置为非数字值或设置为负数，堆栈跟踪将不会捕获任何帧。</p><h3 id="errorcause" tabindex="-1"><code>error.cause</code> <a class="header-anchor" href="#errorcause" aria-label="Permalink to “error.cause”">​</a></h3><p><strong>添加于: v16.9.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a></li></ul><p>如果存在，<code>error.cause</code> 属性是 <code>Error</code> 的根本原因。 它用于捕获错误并抛出一个带有不同消息或代码的新错误，以便仍然可以访问原始错误。</p><p><code>error.cause</code> 属性通常通过调用 <code>new Error(message, { cause })</code> 来设置。 如果未提供 <code>cause</code> 选项，则构造函数不会设置它。</p><p>此属性允许链接错误。 序列化 <code>Error</code> 对象时，如果设置了 <code>error.cause</code>，<a href="/zh/nodejs/api/util#utilinspectobject-options"><code>util.inspect()</code></a> 会递归序列化 <code>error.cause</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cause</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The remote HTTP server responded with a 500 status&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> symptom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The message failed to send&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { cause });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symptom);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   Error: The message failed to send</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at REPL2:1:17</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Script.runInThisContext (node:vm:130:12)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       ... 7 lines matching cause stack trace ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at [_line] [as _line] (node:internal/readline/interface:886:18) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     [cause]: Error: The remote HTTP server responded with a 500 status</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at REPL1:1:15</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at Script.runInThisContext (node:vm:130:12)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at REPLServer.defaultEval (node:repl:574:29)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at bound (node:domain:426:15)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at REPLServer.runBound [as eval] (node:domain:437:12)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at REPLServer.onLine (node:repl:902:10)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at REPLServer.emit (node:events:549:35)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at REPLServer.emit (node:domain:482:12)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at [_onLine] [as _onLine] (node:internal/readline/interface:425:12)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         at [_line] [as _line] (node:internal/readline/interface:886:18)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="errorcode" tabindex="-1"><code>error.code</code> <a class="header-anchor" href="#errorcode" aria-label="Permalink to “error.code”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>error.code</code> 属性是一个字符串标签，用于标识错误的类型。<code>error.code</code> 是识别错误最稳定的方法。它只会在 Node.js 的主要版本之间发生变化。相比之下，<code>error.message</code> 字符串可能在任何 Node.js 版本之间发生变化。有关特定代码的详细信息，请参阅 <a href="/zh/nodejs/api/errors#nodejs-error-codes">Node.js 错误代码</a>。</p><h3 id="errormessage" tabindex="-1"><code>error.message</code> <a class="header-anchor" href="#errormessage" aria-label="Permalink to “error.message”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>error.message</code> 属性是由调用 <code>new Error(message)</code> 设置的错误的字符串描述。 传递给构造函数的 <code>message</code> 也会出现在 <code>Error</code> 的堆栈跟踪的第一行中，但是，在创建 <code>Error</code> 对象后更改此属性 <em>可能不会</em> 更改堆栈跟踪的第一行（例如，在更改此属性之前读取 <code>error.stack</code> 时）。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.message);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints: The message</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="errorstack" tabindex="-1"><code>error.stack</code> <a class="header-anchor" href="#errorstack" aria-label="Permalink to “error.stack”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>error.stack</code> 属性是一个字符串，描述了代码中实例化 <code>Error</code> 的位置。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Things</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> happening!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/gbusey/file.js:525:2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Frobnicator.refrobulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (/home/gbusey/business-logic.js:424:21)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Actor.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">anonymou</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (/home/gbusey/actors.js:400:8)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> increaseSynergy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (/home/gbusey/actors.js:701:6)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>第一行格式为 <code>\\&lt;错误类名\\&gt;: \\&lt;错误消息\\&gt;</code>，后跟一系列堆栈帧（每行以 &quot;at &quot; 开头）。 每个帧描述了代码中导致生成错误的调用点。 V8 尝试显示每个函数的名称（通过变量名、函数名或对象方法名），但有时它无法找到合适的名称。 如果 V8 无法确定函数的名称，则只会显示该帧的位置信息。 否则，将显示确定的函数名称，并在括号中附加位置信息。</p><p>帧仅为 JavaScript 函数生成。 例如，如果执行同步地通过一个名为 <code>cheetahify</code> 的 C++ 插件函数，该函数本身调用一个 JavaScript 函数，则表示 <code>cheetahify</code> 调用的帧将不会出现在堆栈跟踪中：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cheetahify</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./native-binding.node&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeFaster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // \`cheetahify()\` *synchronously* calls speedy.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cheetahify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> speedy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;oh no!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">makeFaster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will throw:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   /home/gbusey/file.js:6</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       throw new Error(&#39;oh no!&#39;);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//           ^</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   Error: oh no!</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at speedy (/home/gbusey/file.js:6:11)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at makeFaster (/home/gbusey/file.js:5:3)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Object.&lt;anonymous&gt; (/home/gbusey/file.js:10:1)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Module._compile (module.js:456:26)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Object.Module._extensions..js (module.js:474:10)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Module.load (module.js:356:32)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Function.Module._load (module.js:312:12)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at Function.Module.runMain (module.js:497:10)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at startup (node.js:119:16)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       at node.js:906:3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>位置信息将是以下之一：</p><ul><li><code>native</code>，如果帧表示 V8 内部的调用（如 <code>[].forEach</code>）。</li><li><code>plain-filename.js:line:column</code>，如果帧表示 Node.js 内部的调用。</li><li><code>/absolute/path/to/file.js:line:column</code>，如果帧表示用户程序（使用 CommonJS 模块系统）或其依赖项中的调用。</li><li><code>\\&lt;传输协议\\&gt;:///url/to/module/file.mjs:line:column</code>，如果帧表示用户程序（使用 ES 模块系统）或其依赖项中的调用。</li></ul><p>表示堆栈跟踪的字符串在<strong>访问</strong> <code>error.stack</code> 属性时才会被延迟生成。</p><p>堆栈跟踪捕获的帧数受 <code>Error.stackTraceLimit</code> 或当前事件循环滴答中可用帧数的较小者的限制。</p><h2 id="class-assertionerror" tabindex="-1">类: <code>AssertionError</code> <a class="header-anchor" href="#class-assertionerror" aria-label="Permalink to “类: AssertionError”">​</a></h2><ul><li>继承: <a href="/zh/nodejs/api/errors#class-error">&lt;errors.Error&gt;</a></li></ul><p>表示断言失败。 有关详细信息，请参阅 <a href="/zh/nodejs/api/assert#class-assertassertionerror"><code>类: assert.AssertionError</code></a>。</p><h2 id="class-rangeerror" tabindex="-1">类: <code>RangeError</code> <a class="header-anchor" href="#class-rangeerror" aria-label="Permalink to “类: RangeError”">​</a></h2><ul><li>继承: <a href="/zh/nodejs/api/errors#class-error">&lt;errors.Error&gt;</a></li></ul><p>表示提供的参数不在函数的允许值集合或范围内； 无论那是数值范围，还是给定函数参数的选项集之外。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出 &quot;RangeError: &quot;port&quot; option should be &gt;= 0 and &lt; 65536: -1&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Node.js 将<em>立即</em>生成并抛出 <code>RangeError</code> 实例，作为一种参数验证形式。</p><h2 id="class-referenceerror" tabindex="-1">类: <code>ReferenceError</code> <a class="header-anchor" href="#class-referenceerror" aria-label="Permalink to “类: ReferenceError”">​</a></h2><ul><li>继承: <a href="/zh/nodejs/api/errors#class-error">&lt;errors.Error&gt;</a></li></ul><p>表示试图访问未定义的变量。 此类错误通常表示代码中存在拼写错误，或者程序以其他方式损坏。</p><p>虽然客户端代码可以生成和传播这些错误，但在实践中，只有 V8 会这样做。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doesNotExist;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出 ReferenceError，doesNotExist 不是此程序中的变量。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>除非应用程序正在动态生成和运行代码，否则 <code>ReferenceError</code> 实例表示代码或其依赖项中存在错误。</p><h2 id="class-syntaxerror" tabindex="-1">类: <code>SyntaxError</code> <a class="header-anchor" href="#class-syntaxerror" aria-label="Permalink to “类: SyntaxError”">​</a></h2><ul><li>继承: <a href="/zh/nodejs/api/errors#class-error">&lt;errors.Error&gt;</a></li></ul><p>表示程序不是有效的 JavaScript。 这些错误可能仅在代码评估后生成和传播。 代码评估可能因 <code>eval</code>、<code>Function</code>、<code>require</code> 或 <a href="/zh/nodejs/api/vm">vm</a> 而发生。 这些错误几乎总是表明程序已损坏。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:vm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runInThisContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;binary ! isNotOk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &#39;err&#39; 将是 SyntaxError。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>SyntaxError</code> 实例在其创建的上下文中是不可恢复的 - 它们只能被其他上下文捕获。</p><h2 id="class-systemerror" tabindex="-1">类: <code>SystemError</code> <a class="header-anchor" href="#class-systemerror" aria-label="Permalink to “类: SystemError”">​</a></h2><ul><li>继承: <a href="/zh/nodejs/api/errors#class-error">&lt;errors.Error&gt;</a></li></ul><p>当 Node.js 运行时环境中发生异常时，Node.js 会生成系统错误。 这些通常发生在应用程序违反操作系统约束时。 例如，如果应用程序尝试读取不存在的文件，则会发生系统错误。</p><ul><li><code>address</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 如果存在，则网络连接失败的地址</li><li><code>code</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 字符串错误代码</li><li><code>dest</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 如果存在，则报告文件系统错误时的文件路径目标</li><li><code>errno</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 系统提供的错误号</li><li><code>info</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 如果存在，有关错误情况的额外详细信息</li><li><code>message</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 系统提供的错误的人工可读描述</li><li><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 如果存在，则报告文件系统错误时的文件路径</li><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 如果存在，则不可用的网络连接端口</li><li><code>syscall</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 触发错误的系统调用的名称</li></ul><h3 id="erroraddress" tabindex="-1"><code>error.address</code> <a class="header-anchor" href="#erroraddress" aria-label="Permalink to “error.address”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>如果存在，<code>error.address</code> 是一个字符串，描述网络连接失败的地址。</p><h3 id="errorcode_1" tabindex="-1"><code>error.code</code> <a class="header-anchor" href="#errorcode_1" aria-label="Permalink to “error.code”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>error.code</code> 属性是一个表示错误码的字符串。</p><h3 id="errordest" tabindex="-1"><code>error.dest</code> <a class="header-anchor" href="#errordest" aria-label="Permalink to “error.dest”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>如果存在，<code>error.dest</code> 是报告文件系统错误时的文件路径目标。</p><h3 id="errorerrno" tabindex="-1"><code>error.errno</code> <a class="header-anchor" href="#errorerrno" aria-label="Permalink to “error.errno”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p><code>error.errno</code> 属性是一个负数，对应于 <a href="https://docs.libuv.org/en/v1.x/errors" target="_blank" rel="noreferrer"><code>libuv 错误处理</code></a> 中定义的错误码。</p><p>在 Windows 上，系统提供的错误号会被 libuv 标准化。</p><p>要获取错误码的字符串表示，请使用 <a href="/zh/nodejs/api/util#utilgetsystemerrornameerr"><code>util.getSystemErrorName(error.errno)</code></a>。</p><h3 id="errorinfo" tabindex="-1"><code>error.info</code> <a class="header-anchor" href="#errorinfo" aria-label="Permalink to “error.info”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>如果存在，<code>error.info</code> 是一个包含错误条件详细信息的对象。</p><h3 id="errormessage_1" tabindex="-1"><code>error.message</code> <a class="header-anchor" href="#errormessage_1" aria-label="Permalink to “error.message”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>error.message</code> 是系统提供的、人类可读的错误描述。</p><h3 id="errorpath" tabindex="-1"><code>error.path</code> <a class="header-anchor" href="#errorpath" aria-label="Permalink to “error.path”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>如果存在，<code>error.path</code> 是一个包含相关无效路径名的字符串。</p><h3 id="errorport" tabindex="-1"><code>error.port</code> <a class="header-anchor" href="#errorport" aria-label="Permalink to “error.port”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>如果存在，<code>error.port</code> 是不可用的网络连接端口。</p><h3 id="errorsyscall" tabindex="-1"><code>error.syscall</code> <a class="header-anchor" href="#errorsyscall" aria-label="Permalink to “error.syscall”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>error.syscall</code> 属性是一个字符串，描述失败的 <a href="https://man7.org/linux/man-pages/man2/syscalls.2" target="_blank" rel="noreferrer">syscall</a>。</p><h3 id="common-system-errors" tabindex="-1">常见系统错误 <a class="header-anchor" href="#common-system-errors" aria-label="Permalink to “常见系统错误”">​</a></h3><p>以下是在编写 Node.js 程序时经常遇到的一些系统错误列表。 有关完整列表，请参阅 <a href="https://man7.org/linux/man-pages/man3/errno.3" target="_blank" rel="noreferrer"><code>errno</code>(3) man page</a>。</p><ul><li><code>EACCES</code>（权限被拒绝）：试图以文件访问权限禁止的方式访问文件。</li><li><code>EADDRINUSE</code>（地址已被使用）：由于本地系统上的另一个服务器已占用该地址，因此尝试将服务器（<a href="/zh/nodejs/api/net"><code>net</code></a>、<a href="/zh/nodejs/api/http"><code>http</code></a> 或 <a href="/zh/nodejs/api/https"><code>https</code></a>）绑定到本地地址失败。</li><li><code>ECONNREFUSED</code>（连接被拒绝）：无法建立连接，因为目标机器主动拒绝了连接。 这通常是由于尝试连接到外地主机上处于非活动状态的服务而导致的。</li><li><code>ECONNRESET</code>（连接被对等方重置）：连接被对等方强制关闭。 这通常是由于超时或重新启动导致远程套接字上的连接丢失而导致的。 经常通过 <a href="/zh/nodejs/api/http"><code>http</code></a> 和 <a href="/zh/nodejs/api/net"><code>net</code></a> 模块遇到。</li><li><code>EEXIST</code>（文件已存在）：现有文件是需要目标不存在的操作的目标。</li><li><code>EISDIR</code>（是目录）：操作需要文件，但给定的路径名是目录。</li><li><code>EMFILE</code>（系统中打开的文件过多）：已达到系统上允许的<a href="https://en.wikipedia.org/wiki/File_descriptor" target="_blank" rel="noreferrer">文件描述符</a>的最大数量，并且在至少关闭一个描述符之前，无法满足对另一个描述符的请求。 当并行一次打开许多文件时会遇到这种情况，尤其是在进程的文件描述符限制较低的系统（尤其是 macOS）上。 要解决较低的限制，请在将运行 Node.js 进程的同一 shell 中运行 <code>ulimit -n 2048</code>。</li><li><code>ENOENT</code>（没有这个文件或目录）：通常由 <a href="/zh/nodejs/api/fs"><code>fs</code></a> 操作引发，以指示指定的路径名的组件不存在。 找不到给定路径的实体（文件或目录）。</li><li><code>ENOTDIR</code>（不是目录）：给定路径名的组件存在，但不是预期的目录。 通常由 <a href="/zh/nodejs/api/fs#fsreaddirpath-options-callback"><code>fs.readdir</code></a> 引发。</li><li><code>ENOTEMPTY</code>（目录非空）：包含条目的目录是需要空目录的操作的目标，通常是 <a href="/zh/nodejs/api/fs#fsunlinkpath-callback"><code>fs.unlink</code></a>。</li><li><code>ENOTFOUND</code>（DNS 查找失败）：指示 <code>EAI_NODATA</code> 或 <code>EAI_NONAME</code> 的 DNS 故障。 这不是标准的 POSIX 错误。</li><li><code>EPERM</code>（不允许操作）：试图执行需要提升的权限的操作。</li><li><code>EPIPE</code>（管道损坏）：在没有进程读取数据的管道、套接字或 FIFO 上写入。 经常在 <a href="/zh/nodejs/api/net"><code>net</code></a> 和 <a href="/zh/nodejs/api/http"><code>http</code></a> 层遇到，表示要写入的流的远程端已关闭。</li><li><code>ETIMEDOUT</code>（操作超时）：连接或发送请求失败，因为连接方在一段时间后没有正确响应。 通常由 <a href="/zh/nodejs/api/http"><code>http</code></a> 或 <a href="/zh/nodejs/api/net"><code>net</code></a> 遇到。 通常是未正确调用 <code>socket.end()</code> 的标志。</li></ul><h2 id="class-typeerror" tabindex="-1">类: <code>TypeError</code> <a class="header-anchor" href="#class-typeerror" aria-label="Permalink to “类: TypeError”">​</a></h2><ul><li>继承自 <a href="/zh/nodejs/api/errors#class-error">&lt;errors.Error&gt;</a></li></ul><p>表示提供的参数不是允许的类型。 例如，将函数传递给需要字符串的参数将引发 <code>TypeError</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出 TypeError，因为它需要一个字符串。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Node.js 将作为参数验证的一种形式<em>立即</em>生成并抛出 <code>TypeError</code> 实例。</p><h2 id="exceptions-vs-errors" tabindex="-1">异常 vs. 错误 <a class="header-anchor" href="#exceptions-vs-errors" aria-label="Permalink to “异常 vs. 错误”">​</a></h2><p>JavaScript 异常是一个值，该值是由于无效操作或作为 <code>throw</code> 语句的目标而抛出的。 虽然不要求这些值是 <code>Error</code> 的实例或继承自 <code>Error</code> 的类，但 Node.js 或 JavaScript 运行时抛出的所有异常<em>都将</em>是 <code>Error</code> 的实例。</p><p>某些异常在 JavaScript 层是<em>不可恢复的</em>。 这样的异常将<em>始终</em>导致 Node.js 进程崩溃。 示例包括 C++ 层中的 <code>assert()</code> 检查或 <code>abort()</code> 调用。</p><h2 id="openssl-errors" tabindex="-1">OpenSSL 错误 <a class="header-anchor" href="#openssl-errors" aria-label="Permalink to “OpenSSL 错误”">​</a></h2><p>源自 <code>crypto</code> 或 <code>tls</code> 的错误属于 <code>Error</code> 类，除了标准的 <code>.code</code> 和 <code>.message</code> 属性外，可能还具有一些额外的 OpenSSL 特有属性。</p><h3 id="erroropensslerrorstack" tabindex="-1"><code>error.opensslErrorStack</code> <a class="header-anchor" href="#erroropensslerrorstack" aria-label="Permalink to “error.opensslErrorStack”">​</a></h3><p>一个错误数组，可以提供有关错误来自 OpenSSL 库中哪个位置的上下文。</p><h3 id="errorfunction" tabindex="-1"><code>error.function</code> <a class="header-anchor" href="#errorfunction" aria-label="Permalink to “error.function”">​</a></h3><p>错误源自的 OpenSSL 函数。</p><h3 id="errorlibrary" tabindex="-1"><code>error.library</code> <a class="header-anchor" href="#errorlibrary" aria-label="Permalink to “error.library”">​</a></h3><p>错误源自的 OpenSSL 库。</p><h3 id="errorreason" tabindex="-1"><code>error.reason</code> <a class="header-anchor" href="#errorreason" aria-label="Permalink to “error.reason”">​</a></h3><p>一个人类可读的字符串，描述了错误的原因。</p><h2 id="nodejs-error-codes" tabindex="-1">Node.js 错误码 <a class="header-anchor" href="#nodejs-error-codes" aria-label="Permalink to “Node.js 错误码”">​</a></h2><h3 id="abort_err" tabindex="-1"><code>ABORT_ERR</code> <a class="header-anchor" href="#abort_err" aria-label="Permalink to “ABORT_ERR”">​</a></h3><p><strong>加入于: v15.0.0</strong></p><p>当操作被中止时使用（通常使用 <code>AbortController</code>）。</p><p><em>不</em>使用 <code>AbortSignal</code> 的 API 通常不会引发带有此代码的错误。</p><p>此代码未使用 Node.js 错误使用的常规 <code>ERR_*</code> 约定，以便与 Web 平台的 <code>AbortError</code> 兼容。</p><h3 id="err_access_denied" tabindex="-1"><code>ERR_ACCESS_DENIED</code> <a class="header-anchor" href="#err_access_denied" aria-label="Permalink to “ERR_ACCESS_DENIED”">​</a></h3><p>每当 Node.js 尝试访问受<a href="/zh/nodejs/api/permissions#permission-model">权限模型</a>限制的资源时触发的一种特殊类型的错误。</p><h3 id="err_ambiguous_argument" tabindex="-1"><code>ERR_AMBIGUOUS_ARGUMENT</code> <a class="header-anchor" href="#err_ambiguous_argument" aria-label="Permalink to “ERR_AMBIGUOUS_ARGUMENT”">​</a></h3><p>函数参数的使用方式暗示可能对函数签名存在误解。当 <code>node:assert</code> 模块中的 <code>assert.throws(block, message)</code> 的 <code>message</code> 参数与 <code>block</code> 抛出的错误消息匹配时，会抛出此错误。这是因为这种用法表明用户认为 <code>message</code> 是期望的消息，而不是当 <code>block</code> 未抛出错误时 <code>AssertionError</code> 将显示的消息。</p><h3 id="err_arg_not_iterable" tabindex="-1"><code>ERR_ARG_NOT_ITERABLE</code> <a class="header-anchor" href="#err_arg_not_iterable" aria-label="Permalink to “ERR_ARG_NOT_ITERABLE”">​</a></h3><p>Node.js API 需要一个可迭代参数（即，一个适用于 <code>for...of</code> 循环的值），但未提供。</p><h3 id="err_assertion" tabindex="-1"><code>ERR_ASSERTION</code> <a class="header-anchor" href="#err_assertion" aria-label="Permalink to “ERR_ASSERTION”">​</a></h3><p>一种特殊的错误类型，当 Node.js 检测到不应发生的异常逻辑违规时会触发。通常由 <code>node:assert</code> 模块引发。</p><h3 id="err_async_callback" tabindex="-1"><code>ERR_ASYNC_CALLBACK</code> <a class="header-anchor" href="#err_async_callback" aria-label="Permalink to “ERR_ASYNC_CALLBACK”">​</a></h3><p>试图将非函数注册为 <code>AsyncHooks</code> 回调。</p><h3 id="err_async_type" tabindex="-1"><code>ERR_ASYNC_TYPE</code> <a class="header-anchor" href="#err_async_type" aria-label="Permalink to “ERR_ASYNC_TYPE”">​</a></h3><p>异步资源的类型无效。如果使用公共嵌入器 API，用户也可以定义自己的类型。</p><h3 id="err_brotli_compression_failed" tabindex="-1"><code>ERR_BROTLI_COMPRESSION_FAILED</code> <a class="header-anchor" href="#err_brotli_compression_failed" aria-label="Permalink to “ERR_BROTLI_COMPRESSION_FAILED”">​</a></h3><p>传递给 Brotli 流的数据未成功压缩。</p><h3 id="err_brotli_invalid_param" tabindex="-1"><code>ERR_BROTLI_INVALID_PARAM</code> <a class="header-anchor" href="#err_brotli_invalid_param" aria-label="Permalink to “ERR_BROTLI_INVALID_PARAM”">​</a></h3><p>在 Brotli 流的构造过程中传递了无效的参数键。</p><h3 id="err_buffer_context_not_available" tabindex="-1"><code>ERR_BUFFER_CONTEXT_NOT_AVAILABLE</code> <a class="header-anchor" href="#err_buffer_context_not_available" aria-label="Permalink to “ERR_BUFFER_CONTEXT_NOT_AVAILABLE”">​</a></h3><p>试图从插件或嵌入器代码创建一个 Node.js <code>Buffer</code> 实例，但此时位于未与 Node.js 实例关联的 JS 引擎上下文中。传递给 <code>Buffer</code> 方法的数据将在该方法返回时被释放。</p><p>当遇到此错误时，创建 <code>Buffer</code> 实例的一个可能的替代方案是创建一个普通的 <code>Uint8Array</code>，它仅在结果对象的原型上有所不同。<code>Uint8Array</code> 通常被 Node.js 核心 API 接受，就像 <code>Buffer</code> 一样；它们在所有上下文中都可用。</p><h3 id="err_buffer_out_of_bounds" tabindex="-1"><code>ERR_BUFFER_OUT_OF_BOUNDS</code> <a class="header-anchor" href="#err_buffer_out_of_bounds" aria-label="Permalink to “ERR_BUFFER_OUT_OF_BOUNDS”">​</a></h3><p>试图执行超出 <code>Buffer</code> 边界的操作。</p><h3 id="err_buffer_too_large" tabindex="-1"><code>ERR_BUFFER_TOO_LARGE</code> <a class="header-anchor" href="#err_buffer_too_large" aria-label="Permalink to “ERR_BUFFER_TOO_LARGE”">​</a></h3><p>试图创建一个大于允许最大大小的 <code>Buffer</code>。</p><h3 id="err_cannot_watch_sigint" tabindex="-1"><code>ERR_CANNOT_WATCH_SIGINT</code> <a class="header-anchor" href="#err_cannot_watch_sigint" aria-label="Permalink to “ERR_CANNOT_WATCH_SIGINT”">​</a></h3><p>Node.js 无法监听 <code>SIGINT</code> 信号。</p><h3 id="err_child_closed_before_reply" tabindex="-1"><code>ERR_CHILD_CLOSED_BEFORE_REPLY</code> <a class="header-anchor" href="#err_child_closed_before_reply" aria-label="Permalink to “ERR_CHILD_CLOSED_BEFORE_REPLY”">​</a></h3><p>子进程在父进程收到回复之前关闭。</p><h3 id="err_child_process_ipc_required" tabindex="-1"><code>ERR_CHILD_PROCESS_IPC_REQUIRED</code> <a class="header-anchor" href="#err_child_process_ipc_required" aria-label="Permalink to “ERR_CHILD_PROCESS_IPC_REQUIRED”">​</a></h3><p>当派生子进程时未指定 IPC 通道时使用。</p><h3 id="err_child_process_stdio_maxbuffer" tabindex="-1"><code>ERR_CHILD_PROCESS_STDIO_MAXBUFFER</code> <a class="header-anchor" href="#err_child_process_stdio_maxbuffer" aria-label="Permalink to “ERR_CHILD_PROCESS_STDIO_MAXBUFFER”">​</a></h3><p>当主进程试图从子进程的 STDERR/STDOUT 读取数据，并且数据的长度大于 <code>maxBuffer</code> 选项时使用。</p><h3 id="err_closed_message_port" tabindex="-1"><code>ERR_CLOSED_MESSAGE_PORT</code> <a class="header-anchor" href="#err_closed_message_port" aria-label="Permalink to “ERR_CLOSED_MESSAGE_PORT”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v16.2.0, v14.17.1</td><td>重新引入了错误消息。</td></tr><tr><td>v11.12.0</td><td>移除了错误消息。</td></tr><tr><td>v10.5.0</td><td>添加于: v10.5.0</td></tr></tbody></table></div><p>尝试使用处于关闭状态的 <code>MessagePort</code> 实例，通常在调用 <code>.close()</code> 之后。</p><h3 id="err_console_writable_stream" tabindex="-1"><code>ERR_CONSOLE_WRITABLE_STREAM</code> <a class="header-anchor" href="#err_console_writable_stream" aria-label="Permalink to “ERR_CONSOLE_WRITABLE_STREAM”">​</a></h3><p>实例化 <code>Console</code> 时没有 <code>stdout</code> 流，或者 <code>Console</code> 有一个不可写的 <code>stdout</code> 或 <code>stderr</code> 流。</p><h3 id="err_construct_call_invalid" tabindex="-1"><code>ERR_CONSTRUCT_CALL_INVALID</code> <a class="header-anchor" href="#err_construct_call_invalid" aria-label="Permalink to “ERR_CONSTRUCT_CALL_INVALID”">​</a></h3><p><strong>添加于: v12.5.0</strong></p><p>调用了一个不可调用的类构造函数。</p><h3 id="err_construct_call_required" tabindex="-1"><code>ERR_CONSTRUCT_CALL_REQUIRED</code> <a class="header-anchor" href="#err_construct_call_required" aria-label="Permalink to “ERR_CONSTRUCT_CALL_REQUIRED”">​</a></h3><p>调用类的构造函数时没有使用 <code>new</code>。</p><h3 id="err_context_not_initialized" tabindex="-1"><code>ERR_CONTEXT_NOT_INITIALIZED</code> <a class="header-anchor" href="#err_context_not_initialized" aria-label="Permalink to “ERR_CONTEXT_NOT_INITIALIZED”">​</a></h3><p>传递给 API 的 vm 上下文尚未初始化。 这可能发生在创建上下文期间发生错误（并被捕获）时，例如，当分配失败或在创建上下文时达到最大调用堆栈大小。</p><h3 id="err_crypto_custom_engine_not_supported" tabindex="-1"><code>ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED</code> <a class="header-anchor" href="#err_crypto_custom_engine_not_supported" aria-label="Permalink to “ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED”">​</a></h3><p>请求了一个 OpenSSL 引擎（例如，通过 <code>clientCertEngine</code> 或 <code>privateKeyEngine</code> TLS 选项），但该引擎不受正在使用的 OpenSSL 版本支持，这可能是由于编译时标志 <code>OPENSSL_NO_ENGINE</code>。</p><h3 id="err_crypto_ecdh_invalid_format" tabindex="-1"><code>ERR_CRYPTO_ECDH_INVALID_FORMAT</code> <a class="header-anchor" href="#err_crypto_ecdh_invalid_format" aria-label="Permalink to “ERR_CRYPTO_ECDH_INVALID_FORMAT”">​</a></h3><p>传递给 <code>crypto.ECDH()</code> 类的 <code>getPublicKey()</code> 方法的 <code>format</code> 参数的值无效。</p><h3 id="err_crypto_ecdh_invalid_public_key" tabindex="-1"><code>ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY</code> <a class="header-anchor" href="#err_crypto_ecdh_invalid_public_key" aria-label="Permalink to “ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY”">​</a></h3><p>传递给 <code>crypto.ECDH()</code> 类的 <code>computeSecret()</code> 方法的 <code>key</code> 参数的值无效。 这意味着公钥位于椭圆曲线之外。</p><h3 id="err_crypto_engine_unknown" tabindex="-1"><code>ERR_CRYPTO_ENGINE_UNKNOWN</code> <a class="header-anchor" href="#err_crypto_engine_unknown" aria-label="Permalink to “ERR_CRYPTO_ENGINE_UNKNOWN”">​</a></h3><p>传递给 <a href="/zh/nodejs/api/crypto#cryptosetengineengine-flags"><code>require(&#39;node:crypto&#39;).setEngine()</code></a> 的密码引擎标识符无效。</p><h3 id="err_crypto_fips_forced" tabindex="-1"><code>ERR_CRYPTO_FIPS_FORCED</code> <a class="header-anchor" href="#err_crypto_fips_forced" aria-label="Permalink to “ERR_CRYPTO_FIPS_FORCED”">​</a></h3><p>使用了 <a href="/zh/nodejs/api/cli#force-fips"><code>--force-fips</code></a> 命令行参数，但尝试在 <code>node:crypto</code> 模块中启用或禁用 FIPS 模式。</p><h3 id="err_crypto_fips_unavailable" tabindex="-1"><code>ERR_CRYPTO_FIPS_UNAVAILABLE</code> <a class="header-anchor" href="#err_crypto_fips_unavailable" aria-label="Permalink to “ERR_CRYPTO_FIPS_UNAVAILABLE”">​</a></h3><p>尝试启用或禁用 FIPS 模式，但 FIPS 模式不可用。</p><h3 id="err_crypto_hash_finalized" tabindex="-1"><code>ERR_CRYPTO_HASH_FINALIZED</code> <a class="header-anchor" href="#err_crypto_hash_finalized" aria-label="Permalink to “ERR_CRYPTO_HASH_FINALIZED”">​</a></h3><p>多次调用了 <a href="/zh/nodejs/api/crypto#hashdigestencoding"><code>hash.digest()</code></a>。 每个 <code>Hash</code> 对象的实例只能调用一次 <code>hash.digest()</code> 方法。</p><h3 id="err_crypto_hash_update_failed" tabindex="-1"><code>ERR_CRYPTO_HASH_UPDATE_FAILED</code> <a class="header-anchor" href="#err_crypto_hash_update_failed" aria-label="Permalink to “ERR_CRYPTO_HASH_UPDATE_FAILED”">​</a></h3><p><a href="/zh/nodejs/api/crypto#hashupdatedata-inputencoding"><code>hash.update()</code></a> 因任何原因失败。 这应该很少发生，甚至根本不发生。</p><h3 id="err_crypto_incompatible_key" tabindex="-1"><code>ERR_CRYPTO_INCOMPATIBLE_KEY</code> <a class="header-anchor" href="#err_crypto_incompatible_key" aria-label="Permalink to “ERR_CRYPTO_INCOMPATIBLE_KEY”">​</a></h3><p>给定的加密密钥与尝试的操作不兼容。</p><h3 id="err_crypto_incompatible_key_options" tabindex="-1"><code>ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS</code> <a class="header-anchor" href="#err_crypto_incompatible_key_options" aria-label="Permalink to “ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS”">​</a></h3><p>所选的公钥或私钥编码与其他选项不兼容。</p><h3 id="err_crypto_initialization_failed" tabindex="-1"><code>ERR_CRYPTO_INITIALIZATION_FAILED</code> <a class="header-anchor" href="#err_crypto_initialization_failed" aria-label="Permalink to “ERR_CRYPTO_INITIALIZATION_FAILED”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>加密子系统初始化失败。</p><h3 id="err_crypto_invalid_auth_tag" tabindex="-1"><code>ERR_CRYPTO_INVALID_AUTH_TAG</code> <a class="header-anchor" href="#err_crypto_invalid_auth_tag" aria-label="Permalink to “ERR_CRYPTO_INVALID_AUTH_TAG”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>提供了无效的认证标签。</p><h3 id="err_crypto_invalid_counter" tabindex="-1"><code>ERR_CRYPTO_INVALID_COUNTER</code> <a class="header-anchor" href="#err_crypto_invalid_counter" aria-label="Permalink to “ERR_CRYPTO_INVALID_COUNTER”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>为计数器模式密码提供了无效的计数器。</p><h3 id="err_crypto_invalid_curve" tabindex="-1"><code>ERR_CRYPTO_INVALID_CURVE</code> <a class="header-anchor" href="#err_crypto_invalid_curve" aria-label="Permalink to “ERR_CRYPTO_INVALID_CURVE”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>提供了无效的椭圆曲线。</p><h3 id="err_crypto_invalid_digest" tabindex="-1"><code>ERR_CRYPTO_INVALID_DIGEST</code> <a class="header-anchor" href="#err_crypto_invalid_digest" aria-label="Permalink to “ERR_CRYPTO_INVALID_DIGEST”">​</a></h3><p>指定了无效的<a href="/zh/nodejs/api/crypto#cryptogethashes">加密摘要算法</a>。</p><h3 id="err_crypto_invalid_iv" tabindex="-1"><code>ERR_CRYPTO_INVALID_IV</code> <a class="header-anchor" href="#err_crypto_invalid_iv" aria-label="Permalink to “ERR_CRYPTO_INVALID_IV”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>提供了无效的初始化向量。</p><h3 id="err_crypto_invalid_jwk" tabindex="-1"><code>ERR_CRYPTO_INVALID_JWK</code> <a class="header-anchor" href="#err_crypto_invalid_jwk" aria-label="Permalink to “ERR_CRYPTO_INVALID_JWK”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>提供了无效的 JSON Web 密钥。</p><h3 id="err_crypto_invalid_keylen" tabindex="-1"><code>ERR_CRYPTO_INVALID_KEYLEN</code> <a class="header-anchor" href="#err_crypto_invalid_keylen" aria-label="Permalink to “ERR_CRYPTO_INVALID_KEYLEN”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>提供了无效的密钥长度。</p><h3 id="err_crypto_invalid_keypair" tabindex="-1"><code>ERR_CRYPTO_INVALID_KEYPAIR</code> <a class="header-anchor" href="#err_crypto_invalid_keypair" aria-label="Permalink to “ERR_CRYPTO_INVALID_KEYPAIR”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>提供了无效的密钥对。</p><h3 id="err_crypto_invalid_keytype" tabindex="-1"><code>ERR_CRYPTO_INVALID_KEYTYPE</code> <a class="header-anchor" href="#err_crypto_invalid_keytype" aria-label="Permalink to “ERR_CRYPTO_INVALID_KEYTYPE”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>提供了无效的密钥类型。</p><h3 id="err_crypto_invalid_key_object_type" tabindex="-1"><code>ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE</code> <a class="header-anchor" href="#err_crypto_invalid_key_object_type" aria-label="Permalink to “ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE”">​</a></h3><p>给定的密码密钥对象的类型对于尝试的操作无效。</p><h3 id="err_crypto_invalid_messagelen" tabindex="-1"><code>ERR_CRYPTO_INVALID_MESSAGELEN</code> <a class="header-anchor" href="#err_crypto_invalid_messagelen" aria-label="Permalink to “ERR_CRYPTO_INVALID_MESSAGELEN”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>提供了无效的消息长度。</p><h3 id="err_crypto_invalid_scrypt_params" tabindex="-1"><code>ERR_CRYPTO_INVALID_SCRYPT_PARAMS</code> <a class="header-anchor" href="#err_crypto_invalid_scrypt_params" aria-label="Permalink to “ERR_CRYPTO_INVALID_SCRYPT_PARAMS”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>一个或多个 <a href="/zh/nodejs/api/crypto#cryptoscryptpassword-salt-keylen-options-callback"><code>crypto.scrypt()</code></a> 或 <a href="/zh/nodejs/api/crypto#cryptoscryptsyncpassword-salt-keylen-options"><code>crypto.scryptSync()</code></a> 参数超出其合法范围。</p><h3 id="err_crypto_invalid_state" tabindex="-1"><code>ERR_CRYPTO_INVALID_STATE</code> <a class="header-anchor" href="#err_crypto_invalid_state" aria-label="Permalink to “ERR_CRYPTO_INVALID_STATE”">​</a></h3><p>一个密码方法在一个处于无效状态的对象上使用。 例如，在调用 <code>cipher.final()</code> 之前调用 <a href="/zh/nodejs/api/crypto#ciphergetauthtag"><code>cipher.getAuthTag()</code></a>。</p><h3 id="err_crypto_invalid_tag_length" tabindex="-1"><code>ERR_CRYPTO_INVALID_TAG_LENGTH</code> <a class="header-anchor" href="#err_crypto_invalid_tag_length" aria-label="Permalink to “ERR_CRYPTO_INVALID_TAG_LENGTH”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>提供了无效的身份验证标签长度。</p><h3 id="err_crypto_job_init_failed" tabindex="-1"><code>ERR_CRYPTO_JOB_INIT_FAILED</code> <a class="header-anchor" href="#err_crypto_job_init_failed" aria-label="Permalink to “ERR_CRYPTO_JOB_INIT_FAILED”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>异步密码操作初始化失败。</p><h3 id="err_crypto_jwk_unsupported_curve" tabindex="-1"><code>ERR_CRYPTO_JWK_UNSUPPORTED_CURVE</code> <a class="header-anchor" href="#err_crypto_jwk_unsupported_curve" aria-label="Permalink to “ERR_CRYPTO_JWK_UNSUPPORTED_CURVE”">​</a></h3><p>密钥的椭圆曲线未在 <a href="https://www.iana.org/assignments/jose/jose.xhtml#web-key-elliptic-curve" target="_blank" rel="noreferrer">JSON Web 密钥椭圆曲线注册表</a> 中注册以供使用。</p><h3 id="err_crypto_jwk_unsupported_key_type" tabindex="-1"><code>ERR_CRYPTO_JWK_UNSUPPORTED_KEY_TYPE</code> <a class="header-anchor" href="#err_crypto_jwk_unsupported_key_type" aria-label="Permalink to “ERR_CRYPTO_JWK_UNSUPPORTED_KEY_TYPE”">​</a></h3><p>密钥的非对称密钥类型未在 <a href="https://www.iana.org/assignments/jose/jose.xhtml#web-key-types" target="_blank" rel="noreferrer">JSON Web 密钥类型注册表</a> 中注册以供使用。</p><h3 id="err_crypto_operation_failed" tabindex="-1"><code>ERR_CRYPTO_OPERATION_FAILED</code> <a class="header-anchor" href="#err_crypto_operation_failed" aria-label="Permalink to “ERR_CRYPTO_OPERATION_FAILED”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>由于其他未指定的原因，密码操作失败。</p><h3 id="err_crypto_pbkdf2_error" tabindex="-1"><code>ERR_CRYPTO_PBKDF2_ERROR</code> <a class="header-anchor" href="#err_crypto_pbkdf2_error" aria-label="Permalink to “ERR_CRYPTO_PBKDF2_ERROR”">​</a></h3><p>PBKDF2 算法由于未指定的原因而失败。 OpenSSL 不提供更多详细信息，因此 Node.js 也不提供。</p><h3 id="err_crypto_scrypt_not_supported" tabindex="-1"><code>ERR_CRYPTO_SCRYPT_NOT_SUPPORTED</code> <a class="header-anchor" href="#err_crypto_scrypt_not_supported" aria-label="Permalink to “ERR_CRYPTO_SCRYPT_NOT_SUPPORTED”">​</a></h3><p>Node.js 在编译时未启用 <code>scrypt</code> 支持。 官方发布的二进制文件不可能出现这种情况，但自定义构建（包括发行版构建）可能会出现。</p><h3 id="err_crypto_sign_key_required" tabindex="-1"><code>ERR_CRYPTO_SIGN_KEY_REQUIRED</code> <a class="header-anchor" href="#err_crypto_sign_key_required" aria-label="Permalink to “ERR_CRYPTO_SIGN_KEY_REQUIRED”">​</a></h3><p>未向 <a href="/zh/nodejs/api/crypto#signsignprivatekey-outputencoding"><code>sign.sign()</code></a> 方法提供签名 <code>key</code>。</p><h3 id="err_crypto_timing_safe_equal_length" tabindex="-1"><code>ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH</code> <a class="header-anchor" href="#err_crypto_timing_safe_equal_length" aria-label="Permalink to “ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH”">​</a></h3><p>使用不同长度的 <code>Buffer</code>、<code>TypedArray</code> 或 <code>DataView</code> 参数调用了 <a href="/zh/nodejs/api/crypto#cryptotimingsafeequala-b"><code>crypto.timingSafeEqual()</code></a>。</p><h3 id="err_crypto_unknown_cipher" tabindex="-1"><code>ERR_CRYPTO_UNKNOWN_CIPHER</code> <a class="header-anchor" href="#err_crypto_unknown_cipher" aria-label="Permalink to “ERR_CRYPTO_UNKNOWN_CIPHER”">​</a></h3><p>指定了一个未知的密码。</p><h3 id="err_crypto_unknown_dh_group" tabindex="-1"><code>ERR_CRYPTO_UNKNOWN_DH_GROUP</code> <a class="header-anchor" href="#err_crypto_unknown_dh_group" aria-label="Permalink to “ERR_CRYPTO_UNKNOWN_DH_GROUP”">​</a></h3><p>给出了一个未知的 Diffie-Hellman 组名。 有效的组名列表，请参阅 <a href="/zh/nodejs/api/crypto#cryptogetdiffiehellmangroupname"><code>crypto.getDiffieHellman()</code></a>。</p><h3 id="err_crypto_unsupported_operation" tabindex="-1"><code>ERR_CRYPTO_UNSUPPORTED_OPERATION</code> <a class="header-anchor" href="#err_crypto_unsupported_operation" aria-label="Permalink to “ERR_CRYPTO_UNSUPPORTED_OPERATION”">​</a></h3><p><strong>新增于: v15.0.0, v14.18.0</strong></p><p>尝试调用不支持的加密操作。</p><h3 id="err_debugger_error" tabindex="-1"><code>ERR_DEBUGGER_ERROR</code> <a class="header-anchor" href="#err_debugger_error" aria-label="Permalink to “ERR_DEBUGGER_ERROR”">​</a></h3><p><strong>新增于: v16.4.0, v14.17.4</strong></p><p><a href="/zh/nodejs/api/debugger">调试器</a>发生错误。</p><h3 id="err_debugger_startup_error" tabindex="-1"><code>ERR_DEBUGGER_STARTUP_ERROR</code> <a class="header-anchor" href="#err_debugger_startup_error" aria-label="Permalink to “ERR_DEBUGGER_STARTUP_ERROR”">​</a></h3><p><strong>新增于: v16.4.0, v14.17.4</strong></p><p><a href="/zh/nodejs/api/debugger">调试器</a>等待所需的主机/端口空闲超时。</p><h3 id="err_dir_closed" tabindex="-1"><code>ERR_DIR_CLOSED</code> <a class="header-anchor" href="#err_dir_closed" aria-label="Permalink to “ERR_DIR_CLOSED”">​</a></h3><p><a href="/zh/nodejs/api/fs#class-fsdir"><code>fs.Dir</code></a> 之前已关闭。</p><h3 id="err_dir_concurrent_operation" tabindex="-1"><code>ERR_DIR_CONCURRENT_OPERATION</code> <a class="header-anchor" href="#err_dir_concurrent_operation" aria-label="Permalink to “ERR_DIR_CONCURRENT_OPERATION”">​</a></h3><p><strong>新增于: v14.3.0</strong></p><p>尝试在有正在进行的异步操作的 <a href="/zh/nodejs/api/fs#class-fsdir"><code>fs.Dir</code></a> 上进行同步读取或关闭调用。</p><h3 id="err_dlopen_disabled" tabindex="-1"><code>ERR_DLOPEN_DISABLED</code> <a class="header-anchor" href="#err_dlopen_disabled" aria-label="Permalink to “ERR_DLOPEN_DISABLED”">​</a></h3><p><strong>新增于: v16.10.0, v14.19.0</strong></p><p>使用 <a href="/zh/nodejs/api/cli#no-addons"><code>--no-addons</code></a> 已禁用加载原生插件。</p><h3 id="err_dlopen_failed" tabindex="-1"><code>ERR_DLOPEN_FAILED</code> <a class="header-anchor" href="#err_dlopen_failed" aria-label="Permalink to “ERR_DLOPEN_FAILED”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>对 <code>process.dlopen()</code> 的调用失败。</p><h3 id="err_dns_set_servers_failed" tabindex="-1"><code>ERR_DNS_SET_SERVERS_FAILED</code> <a class="header-anchor" href="#err_dns_set_servers_failed" aria-label="Permalink to “ERR_DNS_SET_SERVERS_FAILED”">​</a></h3><p><code>c-ares</code> 无法设置 DNS 服务器。</p><h3 id="err_domain_callback_not_available" tabindex="-1"><code>ERR_DOMAIN_CALLBACK_NOT_AVAILABLE</code> <a class="header-anchor" href="#err_domain_callback_not_available" aria-label="Permalink to “ERR_DOMAIN_CALLBACK_NOT_AVAILABLE”">​</a></h3><p><code>node:domain</code> 模块不可用，因为它无法建立所需的错误处理钩子，因为在早些时候调用了 <a href="/zh/nodejs/api/process#processsetuncaughtexceptioncapturecallbackfn"><code>process.setUncaughtExceptionCaptureCallback()</code></a>。</p><h3 id="err_domain_cannot_set_uncaught_exception_capture" tabindex="-1"><code>ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE</code> <a class="header-anchor" href="#err_domain_cannot_set_uncaught_exception_capture" aria-label="Permalink to “ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE”">​</a></h3><p>无法调用 <a href="/zh/nodejs/api/process#processsetuncaughtexceptioncapturecallbackfn"><code>process.setUncaughtExceptionCaptureCallback()</code></a>，因为 <code>node:domain</code> 模块已经在较早的时间点加载。</p><p>堆栈跟踪已扩展，以包含加载 <code>node:domain</code> 模块的时间点。</p><h3 id="err_duplicate_startup_snapshot_main_function" tabindex="-1"><code>ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION</code> <a class="header-anchor" href="#err_duplicate_startup_snapshot_main_function" aria-label="Permalink to “ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION”">​</a></h3><p>无法调用 <a href="/zh/nodejs/api/v8#v8startupsnapshotsetdeserializemainfunctioncallback-data"><code>v8.startupSnapshot.setDeserializeMainFunction()</code></a>，因为它之前已经被调用过。</p><h3 id="err_encoding_invalid_encoded_data" tabindex="-1"><code>ERR_ENCODING_INVALID_ENCODED_DATA</code> <a class="header-anchor" href="#err_encoding_invalid_encoded_data" aria-label="Permalink to “ERR_ENCODING_INVALID_ENCODED_DATA”">​</a></h3><p>提供给 <code>TextDecoder()</code> API 的数据根据提供的编码无效。</p><h3 id="err_encoding_not_supported" tabindex="-1"><code>ERR_ENCODING_NOT_SUPPORTED</code> <a class="header-anchor" href="#err_encoding_not_supported" aria-label="Permalink to “ERR_ENCODING_NOT_SUPPORTED”">​</a></h3><p>提供给 <code>TextDecoder()</code> API 的编码不是 <a href="/zh/nodejs/api/util#whatwg-supported-encodings">WHATWG 支持的编码</a>之一。</p><h3 id="err_eval_esm_cannot_print" tabindex="-1"><code>ERR_EVAL_ESM_CANNOT_PRINT</code> <a class="header-anchor" href="#err_eval_esm_cannot_print" aria-label="Permalink to “ERR_EVAL_ESM_CANNOT_PRINT”">​</a></h3><p><code>--print</code> 不能与 ESM 输入一起使用。</p><h3 id="err_event_recursion" tabindex="-1"><code>ERR_EVENT_RECURSION</code> <a class="header-anchor" href="#err_event_recursion" aria-label="Permalink to “ERR_EVENT_RECURSION”">​</a></h3><p>当尝试在 <code>EventTarget</code> 上递归派发事件时抛出。</p><h3 id="err_execution_environment_not_available" tabindex="-1"><code>ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE</code> <a class="header-anchor" href="#err_execution_environment_not_available" aria-label="Permalink to “ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE”">​</a></h3><p>JS 执行上下文未与 Node.js 环境关联。 当 Node.js 用作嵌入式库并且 JS 引擎的某些钩子未正确设置时，可能会发生这种情况。</p><h3 id="err_falsy_value_rejection" tabindex="-1"><code>ERR_FALSY_VALUE_REJECTION</code> <a class="header-anchor" href="#err_falsy_value_rejection" aria-label="Permalink to “ERR_FALSY_VALUE_REJECTION”">​</a></h3><p>通过 <code>util.callbackify()</code> 回调化的 <code>Promise</code> 被一个 falsy 值拒绝。</p><h3 id="err_feature_unavailable_on_platform" tabindex="-1"><code>ERR_FEATURE_UNAVAILABLE_ON_PLATFORM</code> <a class="header-anchor" href="#err_feature_unavailable_on_platform" aria-label="Permalink to “ERR_FEATURE_UNAVAILABLE_ON_PLATFORM”">​</a></h3><p><strong>添加于: v14.0.0</strong></p><p>当使用当前运行 Node.js 的平台不可用的功能时使用。</p><h3 id="err_fs_cp_dir_to_non_dir" tabindex="-1"><code>ERR_FS_CP_DIR_TO_NON_DIR</code> <a class="header-anchor" href="#err_fs_cp_dir_to_non_dir" aria-label="Permalink to “ERR_FS_CP_DIR_TO_NON_DIR”">​</a></h3><p><strong>添加于: v16.7.0</strong></p><p>尝试使用 <a href="/zh/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> 将目录复制到非目录（文件、符号链接等）。</p><h3 id="err_fs_cp_eexist" tabindex="-1"><code>ERR_FS_CP_EEXIST</code> <a class="header-anchor" href="#err_fs_cp_eexist" aria-label="Permalink to “ERR_FS_CP_EEXIST”">​</a></h3><p><strong>添加于: v16.7.0</strong></p><p>尝试使用 <a href="/zh/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> 覆盖已经存在的文件，并且 <code>force</code> 和 <code>errorOnExist</code> 设置为 <code>true</code>。</p><h3 id="err_fs_cp_einval" tabindex="-1"><code>ERR_FS_CP_EINVAL</code> <a class="header-anchor" href="#err_fs_cp_einval" aria-label="Permalink to “ERR_FS_CP_EINVAL”">​</a></h3><p><strong>添加于: v16.7.0</strong></p><p>当使用 <a href="/zh/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> 时，<code>src</code> 或 <code>dest</code> 指向无效路径。</p><h3 id="err_fs_cp_fifo_pipe" tabindex="-1"><code>ERR_FS_CP_FIFO_PIPE</code> <a class="header-anchor" href="#err_fs_cp_fifo_pipe" aria-label="Permalink to “ERR_FS_CP_FIFO_PIPE”">​</a></h3><p><strong>添加于: v16.7.0</strong></p><p>尝试使用 <a href="/zh/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> 复制命名管道。</p><h3 id="err_fs_cp_non_dir_to_dir" tabindex="-1"><code>ERR_FS_CP_NON_DIR_TO_DIR</code> <a class="header-anchor" href="#err_fs_cp_non_dir_to_dir" aria-label="Permalink to “ERR_FS_CP_NON_DIR_TO_DIR”">​</a></h3><p><strong>添加于: v16.7.0</strong></p><p>尝试使用 <a href="/zh/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> 将非目录（文件、符号链接等）复制到目录。</p><h3 id="err_fs_cp_socket" tabindex="-1"><code>ERR_FS_CP_SOCKET</code> <a class="header-anchor" href="#err_fs_cp_socket" aria-label="Permalink to “ERR_FS_CP_SOCKET”">​</a></h3><p><strong>添加于: v16.7.0</strong></p><p>尝试使用 <a href="/zh/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> 复制到套接字。</p><h3 id="err_fs_cp_symlink_to_subdirectory" tabindex="-1"><code>ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY</code> <a class="header-anchor" href="#err_fs_cp_symlink_to_subdirectory" aria-label="Permalink to “ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY”">​</a></h3><p><strong>Added in: v16.7.0</strong></p><p>当使用 <a href="/zh/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> 时，<code>dest</code> 中的一个符号链接指向 <code>src</code> 的一个子目录。</p><h3 id="err_fs_cp_unknown" tabindex="-1"><code>ERR_FS_CP_UNKNOWN</code> <a class="header-anchor" href="#err_fs_cp_unknown" aria-label="Permalink to “ERR_FS_CP_UNKNOWN”">​</a></h3><p><strong>Added in: v16.7.0</strong></p><p>尝试使用 <a href="/zh/nodejs/api/fs#fscpsrc-dest-options-callback"><code>fs.cp()</code></a> 复制到未知文件类型。</p><h3 id="err_fs_eisdir" tabindex="-1"><code>ERR_FS_EISDIR</code> <a class="header-anchor" href="#err_fs_eisdir" aria-label="Permalink to “ERR_FS_EISDIR”">​</a></h3><p>路径是一个目录。</p><h3 id="err_fs_file_too_large" tabindex="-1"><code>ERR_FS_FILE_TOO_LARGE</code> <a class="header-anchor" href="#err_fs_file_too_large" aria-label="Permalink to “ERR_FS_FILE_TOO_LARGE”">​</a></h3><p>尝试读取一个文件，该文件的大小大于 <code>Buffer</code> 允许的最大大小。</p><h3 id="err_http2_altsvc_invalid_origin" tabindex="-1"><code>ERR_HTTP2_ALTSVC_INVALID_ORIGIN</code> <a class="header-anchor" href="#err_http2_altsvc_invalid_origin" aria-label="Permalink to “ERR_HTTP2_ALTSVC_INVALID_ORIGIN”">​</a></h3><p>HTTP/2 ALTSVC 帧需要一个有效的 origin。</p><h3 id="err_http2_altsvc_length" tabindex="-1"><code>ERR_HTTP2_ALTSVC_LENGTH</code> <a class="header-anchor" href="#err_http2_altsvc_length" aria-label="Permalink to “ERR_HTTP2_ALTSVC_LENGTH”">​</a></h3><p>HTTP/2 ALTSVC 帧限制为最多 16,382 字节的有效负载。</p><h3 id="err_http2_connect_authority" tabindex="-1"><code>ERR_HTTP2_CONNECT_AUTHORITY</code> <a class="header-anchor" href="#err_http2_connect_authority" aria-label="Permalink to “ERR_HTTP2_CONNECT_AUTHORITY”">​</a></h3><p>对于使用 <code>CONNECT</code> 方法的 HTTP/2 请求，需要 <code>:authority</code> 伪标头。</p><h3 id="err_http2_connect_path" tabindex="-1"><code>ERR_HTTP2_CONNECT_PATH</code> <a class="header-anchor" href="#err_http2_connect_path" aria-label="Permalink to “ERR_HTTP2_CONNECT_PATH”">​</a></h3><p>对于使用 <code>CONNECT</code> 方法的 HTTP/2 请求，禁止使用 <code>:path</code> 伪标头。</p><h3 id="err_http2_connect_scheme" tabindex="-1"><code>ERR_HTTP2_CONNECT_SCHEME</code> <a class="header-anchor" href="#err_http2_connect_scheme" aria-label="Permalink to “ERR_HTTP2_CONNECT_SCHEME”">​</a></h3><p>对于使用 <code>CONNECT</code> 方法的 HTTP/2 请求，禁止使用 <code>:scheme</code> 伪标头。</p><h3 id="err_http2_error" tabindex="-1"><code>ERR_HTTP2_ERROR</code> <a class="header-anchor" href="#err_http2_error" aria-label="Permalink to “ERR_HTTP2_ERROR”">​</a></h3><p>发生了一个非特定的 HTTP/2 错误。</p><h3 id="err_http2_goaway_session" tabindex="-1"><code>ERR_HTTP2_GOAWAY_SESSION</code> <a class="header-anchor" href="#err_http2_goaway_session" aria-label="Permalink to “ERR_HTTP2_GOAWAY_SESSION”">​</a></h3><p>在 <code>Http2Session</code> 收到来自连接对端的 <code>GOAWAY</code> 帧后，不能打开新的 HTTP/2 流。</p><h3 id="err_http2_headers_after_respond" tabindex="-1"><code>ERR_HTTP2_HEADERS_AFTER_RESPOND</code> <a class="header-anchor" href="#err_http2_headers_after_respond" aria-label="Permalink to “ERR_HTTP2_HEADERS_AFTER_RESPOND”">​</a></h3><p>在 HTTP/2 响应启动后指定了额外的标头。</p><h3 id="err_http2_headers_sent" tabindex="-1"><code>ERR_HTTP2_HEADERS_SENT</code> <a class="header-anchor" href="#err_http2_headers_sent" aria-label="Permalink to “ERR_HTTP2_HEADERS_SENT”">​</a></h3><p>尝试发送多个响应标头。</p><h3 id="err_http2_header_single_value" tabindex="-1"><code>ERR_HTTP2_HEADER_SINGLE_VALUE</code> <a class="header-anchor" href="#err_http2_header_single_value" aria-label="Permalink to “ERR_HTTP2_HEADER_SINGLE_VALUE”">​</a></h3><p>为需要只有一个值的 HTTP/2 标头字段提供了多个值。</p><h3 id="err_http2_info_status_not_allowed" tabindex="-1"><code>ERR_HTTP2_INFO_STATUS_NOT_ALLOWED</code> <a class="header-anchor" href="#err_http2_info_status_not_allowed" aria-label="Permalink to “ERR_HTTP2_INFO_STATUS_NOT_ALLOWED”">​</a></h3><p>信息性 HTTP 状态码 (<code>1xx</code>) 不能设置为 HTTP/2 响应的响应状态码。</p><h3 id="err_http2_invalid_connection_headers" tabindex="-1"><code>ERR_HTTP2_INVALID_CONNECTION_HEADERS</code> <a class="header-anchor" href="#err_http2_invalid_connection_headers" aria-label="Permalink to “ERR_HTTP2_INVALID_CONNECTION_HEADERS”">​</a></h3><p>HTTP/1 连接特定的标头禁止在 HTTP/2 请求和响应中使用。</p><h3 id="err_http2_invalid_header_value" tabindex="-1"><code>ERR_HTTP2_INVALID_HEADER_VALUE</code> <a class="header-anchor" href="#err_http2_invalid_header_value" aria-label="Permalink to “ERR_HTTP2_INVALID_HEADER_VALUE”">​</a></h3><p>指定了一个无效的 HTTP/2 标头值。</p><h3 id="err_http2_invalid_info_status" tabindex="-1"><code>ERR_HTTP2_INVALID_INFO_STATUS</code> <a class="header-anchor" href="#err_http2_invalid_info_status" aria-label="Permalink to “ERR_HTTP2_INVALID_INFO_STATUS”">​</a></h3><p>指定了无效的 HTTP 信息状态码。信息状态码必须是介于 <code>100</code> 和 <code>199</code> (包括) 之间的整数。</p><h3 id="err_http2_invalid_origin" tabindex="-1"><code>ERR_HTTP2_INVALID_ORIGIN</code> <a class="header-anchor" href="#err_http2_invalid_origin" aria-label="Permalink to “ERR_HTTP2_INVALID_ORIGIN”">​</a></h3><p>HTTP/2 <code>ORIGIN</code> 帧需要有效的来源。</p><h3 id="err_http2_invalid_packed_settings_length" tabindex="-1"><code>ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH</code> <a class="header-anchor" href="#err_http2_invalid_packed_settings_length" aria-label="Permalink to “ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH”">​</a></h3><p>传递给 <code>http2.getUnpackedSettings()</code> API 的 <code>Buffer</code> 和 <code>Uint8Array</code> 实例的长度必须是 6 的倍数。</p><h3 id="err_http2_invalid_pseudoheader" tabindex="-1"><code>ERR_HTTP2_INVALID_PSEUDOHEADER</code> <a class="header-anchor" href="#err_http2_invalid_pseudoheader" aria-label="Permalink to “ERR_HTTP2_INVALID_PSEUDOHEADER”">​</a></h3><p>只能使用有效的 HTTP/2 伪标头（<code>:status</code>、<code>:path</code>、<code>:authority</code>、<code>:scheme</code> 和 <code>:method</code>）。</p><h3 id="err_http2_invalid_session" tabindex="-1"><code>ERR_HTTP2_INVALID_SESSION</code> <a class="header-anchor" href="#err_http2_invalid_session" aria-label="Permalink to “ERR_HTTP2_INVALID_SESSION”">​</a></h3><p>对已被销毁的 <code>Http2Session</code> 对象执行了操作。</p><h3 id="err_http2_invalid_setting_value" tabindex="-1"><code>ERR_HTTP2_INVALID_SETTING_VALUE</code> <a class="header-anchor" href="#err_http2_invalid_setting_value" aria-label="Permalink to “ERR_HTTP2_INVALID_SETTING_VALUE”">​</a></h3><p>为 HTTP/2 设置指定了无效值。</p><h3 id="err_http2_invalid_stream" tabindex="-1"><code>ERR_HTTP2_INVALID_STREAM</code> <a class="header-anchor" href="#err_http2_invalid_stream" aria-label="Permalink to “ERR_HTTP2_INVALID_STREAM”">​</a></h3><p>对已被销毁的流执行了操作。</p><h3 id="err_http2_max_pending_settings_ack" tabindex="-1"><code>ERR_HTTP2_MAX_PENDING_SETTINGS_ACK</code> <a class="header-anchor" href="#err_http2_max_pending_settings_ack" aria-label="Permalink to “ERR_HTTP2_MAX_PENDING_SETTINGS_ACK”">​</a></h3><p>每当向已连接的对等方发送 HTTP/2 <code>SETTINGS</code> 帧时，该对等方都需要发送确认收到并应用新 <code>SETTINGS</code> 的确认。 默认情况下，在任何给定时间可以发送的最大未确认 <code>SETTINGS</code> 帧数是有限制的。 达到该限制时会使用此错误代码。</p><h3 id="err_http2_nested_push" tabindex="-1"><code>ERR_HTTP2_NESTED_PUSH</code> <a class="header-anchor" href="#err_http2_nested_push" aria-label="Permalink to “ERR_HTTP2_NESTED_PUSH”">​</a></h3><p>尝试从推送流内部启动新的推送流。 不允许嵌套推送流。</p><h3 id="err_http2_no_mem" tabindex="-1"><code>ERR_HTTP2_NO_MEM</code> <a class="header-anchor" href="#err_http2_no_mem" aria-label="Permalink to “ERR_HTTP2_NO_MEM”">​</a></h3><p>使用 <code>http2session.setLocalWindowSize(windowSize)</code> API 时内存不足。</p><h3 id="err_http2_no_socket_manipulation" tabindex="-1"><code>ERR_HTTP2_NO_SOCKET_MANIPULATION</code> <a class="header-anchor" href="#err_http2_no_socket_manipulation" aria-label="Permalink to “ERR_HTTP2_NO_SOCKET_MANIPULATION”">​</a></h3><p>尝试直接操作（读取、写入、暂停、恢复等）附加到 <code>Http2Session</code> 的套接字。</p><h3 id="err_http2_origin_length" tabindex="-1"><code>ERR_HTTP2_ORIGIN_LENGTH</code> <a class="header-anchor" href="#err_http2_origin_length" aria-label="Permalink to “ERR_HTTP2_ORIGIN_LENGTH”">​</a></h3><p>HTTP/2 <code>ORIGIN</code> 帧的长度限制为 16382 字节。</p><h3 id="err_http2_out_of_streams" tabindex="-1"><code>ERR_HTTP2_OUT_OF_STREAMS</code> <a class="header-anchor" href="#err_http2_out_of_streams" aria-label="Permalink to “ERR_HTTP2_OUT_OF_STREAMS”">​</a></h3><p>在单个 HTTP/2 会话上创建的流数量达到了最大限制。</p><h3 id="err_http2_payload_forbidden" tabindex="-1"><code>ERR_HTTP2_PAYLOAD_FORBIDDEN</code> <a class="header-anchor" href="#err_http2_payload_forbidden" aria-label="Permalink to “ERR_HTTP2_PAYLOAD_FORBIDDEN”">​</a></h3><p>为禁止有效负载的 HTTP 响应代码指定了消息有效负载。</p><h3 id="err_http2_ping_cancel" tabindex="-1"><code>ERR_HTTP2_PING_CANCEL</code> <a class="header-anchor" href="#err_http2_ping_cancel" aria-label="Permalink to “ERR_HTTP2_PING_CANCEL”">​</a></h3><p>一个 HTTP/2 ping 已被取消。</p><h3 id="err_http2_ping_length" tabindex="-1"><code>ERR_HTTP2_PING_LENGTH</code> <a class="header-anchor" href="#err_http2_ping_length" aria-label="Permalink to “ERR_HTTP2_PING_LENGTH”">​</a></h3><p>HTTP/2 ping 负载的长度必须正好是 8 个字节。</p><h3 id="err_http2_pseudoheader_not_allowed" tabindex="-1"><code>ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED</code> <a class="header-anchor" href="#err_http2_pseudoheader_not_allowed" aria-label="Permalink to “ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED”">​</a></h3><p>一个 HTTP/2 伪头部被不恰当地使用。伪头部是头部键名，以 <code>:</code> 前缀开头。</p><h3 id="err_http2_push_disabled" tabindex="-1"><code>ERR_HTTP2_PUSH_DISABLED</code> <a class="header-anchor" href="#err_http2_push_disabled" aria-label="Permalink to “ERR_HTTP2_PUSH_DISABLED”">​</a></h3><p>试图创建一个推送流，但已被客户端禁用。</p><h3 id="err_http2_send_file" tabindex="-1"><code>ERR_HTTP2_SEND_FILE</code> <a class="header-anchor" href="#err_http2_send_file" aria-label="Permalink to “ERR_HTTP2_SEND_FILE”">​</a></h3><p>试图使用 <code>Http2Stream.prototype.responseWithFile()</code> API 来发送一个目录。</p><h3 id="err_http2_send_file_noseek" tabindex="-1"><code>ERR_HTTP2_SEND_FILE_NOSEEK</code> <a class="header-anchor" href="#err_http2_send_file_noseek" aria-label="Permalink to “ERR_HTTP2_SEND_FILE_NOSEEK”">​</a></h3><p>试图使用 <code>Http2Stream.prototype.responseWithFile()</code> API 来发送除常规文件之外的其他内容，但提供了 <code>offset</code> 或 <code>length</code> 选项。</p><h3 id="err_http2_session_error" tabindex="-1"><code>ERR_HTTP2_SESSION_ERROR</code> <a class="header-anchor" href="#err_http2_session_error" aria-label="Permalink to “ERR_HTTP2_SESSION_ERROR”">​</a></h3><p><code>Http2Session</code> 以非零错误代码关闭。</p><h3 id="err_http2_settings_cancel" tabindex="-1"><code>ERR_HTTP2_SETTINGS_CANCEL</code> <a class="header-anchor" href="#err_http2_settings_cancel" aria-label="Permalink to “ERR_HTTP2_SETTINGS_CANCEL”">​</a></h3><p><code>Http2Session</code> 设置已取消。</p><h3 id="err_http2_socket_bound" tabindex="-1"><code>ERR_HTTP2_SOCKET_BOUND</code> <a class="header-anchor" href="#err_http2_socket_bound" aria-label="Permalink to “ERR_HTTP2_SOCKET_BOUND”">​</a></h3><p>试图将一个 <code>Http2Session</code> 对象连接到一个已经绑定到另一个 <code>Http2Session</code> 对象的 <code>net.Socket</code> 或 <code>tls.TLSSocket</code>。</p><h3 id="err_http2_socket_unbound" tabindex="-1"><code>ERR_HTTP2_SOCKET_UNBOUND</code> <a class="header-anchor" href="#err_http2_socket_unbound" aria-label="Permalink to “ERR_HTTP2_SOCKET_UNBOUND”">​</a></h3><p>试图使用已关闭的 <code>Http2Session</code> 的 <code>socket</code> 属性。</p><h3 id="err_http2_status_101" tabindex="-1"><code>ERR_HTTP2_STATUS_101</code> <a class="header-anchor" href="#err_http2_status_101" aria-label="Permalink to “ERR_HTTP2_STATUS_101”">​</a></h3><p>在 HTTP/2 中禁止使用 <code>101</code> 信息性状态代码。</p><h3 id="err_http2_status_invalid" tabindex="-1"><code>ERR_HTTP2_STATUS_INVALID</code> <a class="header-anchor" href="#err_http2_status_invalid" aria-label="Permalink to “ERR_HTTP2_STATUS_INVALID”">​</a></h3><p>已指定无效的 HTTP 状态代码。状态代码必须是介于 <code>100</code> 和 <code>599</code>（包括）之间的整数。</p><h3 id="err_http2_stream_cancel" tabindex="-1"><code>ERR_HTTP2_STREAM_CANCEL</code> <a class="header-anchor" href="#err_http2_stream_cancel" aria-label="Permalink to “ERR_HTTP2_STREAM_CANCEL”">​</a></h3><p>在任何数据传输到连接的对等方之前，<code>Http2Stream</code> 被销毁。</p><h3 id="err_http2_stream_error" tabindex="-1"><code>ERR_HTTP2_STREAM_ERROR</code> <a class="header-anchor" href="#err_http2_stream_error" aria-label="Permalink to “ERR_HTTP2_STREAM_ERROR”">​</a></h3><p>一个非零错误代码已在 <code>RST_STREAM</code> 帧中被指定。</p><h3 id="err_http2_stream_self_dependency" tabindex="-1"><code>ERR_HTTP2_STREAM_SELF_DEPENDENCY</code> <a class="header-anchor" href="#err_http2_stream_self_dependency" aria-label="Permalink to “ERR_HTTP2_STREAM_SELF_DEPENDENCY”">​</a></h3><p>当设置 HTTP/2 流的优先级时，该流可以被标记为父流的依赖项。当试图将一个流标记为自身的依赖项时，将使用此错误代码。</p><h3 id="err_http2_too_many_custom_settings" tabindex="-1"><code>ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS</code> <a class="header-anchor" href="#err_http2_too_many_custom_settings" aria-label="Permalink to “ERR_HTTP2_TOO_MANY_CUSTOM_SETTINGS”">​</a></h3><p>支持的自定义设置数量（10）已超过。</p><h3 id="err_http2_too_many_invalid_frames" tabindex="-1"><code>ERR_HTTP2_TOO_MANY_INVALID_FRAMES</code> <a class="header-anchor" href="#err_http2_too_many_invalid_frames" aria-label="Permalink to “ERR_HTTP2_TOO_MANY_INVALID_FRAMES”">​</a></h3><p><strong>Added in: v15.14.0</strong></p><p>对等方发送的可接受的无效 HTTP/2 协议帧数量已超过限制，该限制通过 <code>maxSessionInvalidFrames</code> 选项指定。</p><h3 id="err_http2_trailers_already_sent" tabindex="-1"><code>ERR_HTTP2_TRAILERS_ALREADY_SENT</code> <a class="header-anchor" href="#err_http2_trailers_already_sent" aria-label="Permalink to “ERR_HTTP2_TRAILERS_ALREADY_SENT”">​</a></h3><p>尾部标头已在 <code>Http2Stream</code> 上发送。</p><h3 id="err_http2_trailers_not_ready" tabindex="-1"><code>ERR_HTTP2_TRAILERS_NOT_READY</code> <a class="header-anchor" href="#err_http2_trailers_not_ready" aria-label="Permalink to “ERR_HTTP2_TRAILERS_NOT_READY”">​</a></h3><p>在 <code>Http2Stream</code> 对象上发出 <code>&#39;wantTrailers&#39;</code> 事件之后，才能调用 <code>http2stream.sendTrailers()</code> 方法。 只有为 <code>Http2Stream</code> 设置了 <code>waitForTrailers</code> 选项，才会发出 <code>&#39;wantTrailers&#39;</code> 事件。</p><h3 id="err_http2_unsupported_protocol" tabindex="-1"><code>ERR_HTTP2_UNSUPPORTED_PROTOCOL</code> <a class="header-anchor" href="#err_http2_unsupported_protocol" aria-label="Permalink to “ERR_HTTP2_UNSUPPORTED_PROTOCOL”">​</a></h3><p><code>http2.connect()</code> 被传递了一个使用 <code>http:</code> 或 <code>https:</code> 以外任何协议的 URL。</p><h3 id="err_http_body_not_allowed" tabindex="-1"><code>ERR_HTTP_BODY_NOT_ALLOWED</code> <a class="header-anchor" href="#err_http_body_not_allowed" aria-label="Permalink to “ERR_HTTP_BODY_NOT_ALLOWED”">​</a></h3><p>尝试写入不允许内容的 HTTP 响应时会抛出错误。</p><h3 id="err_http_content_length_mismatch" tabindex="-1"><code>ERR_HTTP_CONTENT_LENGTH_MISMATCH</code> <a class="header-anchor" href="#err_http_content_length_mismatch" aria-label="Permalink to “ERR_HTTP_CONTENT_LENGTH_MISMATCH”">​</a></h3><p>响应主体大小与指定的 content-length 标头值不匹配。</p><h3 id="err_http_headers_sent" tabindex="-1"><code>ERR_HTTP_HEADERS_SENT</code> <a class="header-anchor" href="#err_http_headers_sent" aria-label="Permalink to “ERR_HTTP_HEADERS_SENT”">​</a></h3><p>在标头已经发送之后，试图添加更多标头。</p><h3 id="err_http_invalid_header_value" tabindex="-1"><code>ERR_HTTP_INVALID_HEADER_VALUE</code> <a class="header-anchor" href="#err_http_invalid_header_value" aria-label="Permalink to “ERR_HTTP_INVALID_HEADER_VALUE”">​</a></h3><p>指定了无效的 HTTP 标头值。</p><h3 id="err_http_invalid_status_code" tabindex="-1"><code>ERR_HTTP_INVALID_STATUS_CODE</code> <a class="header-anchor" href="#err_http_invalid_status_code" aria-label="Permalink to “ERR_HTTP_INVALID_STATUS_CODE”">​</a></h3><p>状态码超出了常规状态码范围 (100-999)。</p><h3 id="err_http_request_timeout" tabindex="-1"><code>ERR_HTTP_REQUEST_TIMEOUT</code> <a class="header-anchor" href="#err_http_request_timeout" aria-label="Permalink to “ERR_HTTP_REQUEST_TIMEOUT”">​</a></h3><p>客户端未在允许的时间内发送整个请求。</p><h3 id="err_http_socket_assigned" tabindex="-1"><code>ERR_HTTP_SOCKET_ASSIGNED</code> <a class="header-anchor" href="#err_http_socket_assigned" aria-label="Permalink to “ERR_HTTP_SOCKET_ASSIGNED”">​</a></h3><p>给定的 <a href="/zh/nodejs/api/http#class-httpserverresponse"><code>ServerResponse</code></a> 已经分配了一个 socket。</p><h3 id="err_http_socket_encoding" tabindex="-1"><code>ERR_HTTP_SOCKET_ENCODING</code> <a class="header-anchor" href="#err_http_socket_encoding" aria-label="Permalink to “ERR_HTTP_SOCKET_ENCODING”">​</a></h3><p>根据 <a href="https://tools.ietf.org/html/rfc7230#section-3" target="_blank" rel="noreferrer">RFC 7230 Section 3</a>，不允许更改 socket 编码。</p><h3 id="err_http_trailer_invalid" tabindex="-1"><code>ERR_HTTP_TRAILER_INVALID</code> <a class="header-anchor" href="#err_http_trailer_invalid" aria-label="Permalink to “ERR_HTTP_TRAILER_INVALID”">​</a></h3><p>即使传输编码不支持，也设置了 <code>Trailer</code> 标头。</p><h3 id="err_illegal_constructor" tabindex="-1"><code>ERR_ILLEGAL_CONSTRUCTOR</code> <a class="header-anchor" href="#err_illegal_constructor" aria-label="Permalink to “ERR_ILLEGAL_CONSTRUCTOR”">​</a></h3><p>试图使用非公共构造函数构造对象。</p><h3 id="err_import_attribute_missing" tabindex="-1"><code>ERR_IMPORT_ATTRIBUTE_MISSING</code> <a class="header-anchor" href="#err_import_attribute_missing" aria-label="Permalink to “ERR_IMPORT_ATTRIBUTE_MISSING”">​</a></h3><p><strong>Added in: v21.1.0</strong></p><p>缺少导入属性，阻止导入指定的模块。</p><h3 id="err_import_attribute_type_incompatible" tabindex="-1"><code>ERR_IMPORT_ATTRIBUTE_TYPE_INCOMPATIBLE</code> <a class="header-anchor" href="#err_import_attribute_type_incompatible" aria-label="Permalink to “ERR_IMPORT_ATTRIBUTE_TYPE_INCOMPATIBLE”">​</a></h3><p><strong>加入于: v21.1.0</strong></p><p>提供了一个 import <code>type</code> 属性，但指定的模块类型不匹配。</p><h3 id="err_import_attribute_unsupported" tabindex="-1"><code>ERR_IMPORT_ATTRIBUTE_UNSUPPORTED</code> <a class="header-anchor" href="#err_import_attribute_unsupported" aria-label="Permalink to “ERR_IMPORT_ATTRIBUTE_UNSUPPORTED”">​</a></h3><p><strong>加入于: v21.0.0, v20.10.0, v18.19.0</strong></p><p>此版本的 Node.js 不支持 import 属性。</p><h3 id="err_incompatible_option_pair" tabindex="-1"><code>ERR_INCOMPATIBLE_OPTION_PAIR</code> <a class="header-anchor" href="#err_incompatible_option_pair" aria-label="Permalink to “ERR_INCOMPATIBLE_OPTION_PAIR”">​</a></h3><p>一个选项对彼此不兼容，不能同时使用。</p><h3 id="err_input_type_not_allowed" tabindex="-1"><code>ERR_INPUT_TYPE_NOT_ALLOWED</code> <a class="header-anchor" href="#err_input_type_not_allowed" aria-label="Permalink to “ERR_INPUT_TYPE_NOT_ALLOWED”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性</p></div><p>使用了 <code>--input-type</code> 标志尝试执行文件。 此标志只能用于通过 <code>--eval</code>、<code>--print</code> 或 <code>STDIN</code> 的输入。</p><h3 id="err_inspector_already_activated" tabindex="-1"><code>ERR_INSPECTOR_ALREADY_ACTIVATED</code> <a class="header-anchor" href="#err_inspector_already_activated" aria-label="Permalink to “ERR_INSPECTOR_ALREADY_ACTIVATED”">​</a></h3><p>在使用 <code>node:inspector</code> 模块时，尝试激活检查器，但检查器已经开始监听端口。 请在使用不同的地址激活它之前，使用 <code>inspector.close()</code> 关闭。</p><h3 id="err_inspector_already_connected" tabindex="-1"><code>ERR_INSPECTOR_ALREADY_CONNECTED</code> <a class="header-anchor" href="#err_inspector_already_connected" aria-label="Permalink to “ERR_INSPECTOR_ALREADY_CONNECTED”">​</a></h3><p>在使用 <code>node:inspector</code> 模块时，尝试连接，但检查器已经连接。</p><h3 id="err_inspector_closed" tabindex="-1"><code>ERR_INSPECTOR_CLOSED</code> <a class="header-anchor" href="#err_inspector_closed" aria-label="Permalink to “ERR_INSPECTOR_CLOSED”">​</a></h3><p>在使用 <code>node:inspector</code> 模块时，尝试在使用会话已经关闭后使用检查器。</p><h3 id="err_inspector_command" tabindex="-1"><code>ERR_INSPECTOR_COMMAND</code> <a class="header-anchor" href="#err_inspector_command" aria-label="Permalink to “ERR_INSPECTOR_COMMAND”">​</a></h3><p>通过 <code>node:inspector</code> 模块发出命令时发生错误。</p><h3 id="err_inspector_not_active" tabindex="-1"><code>ERR_INSPECTOR_NOT_ACTIVE</code> <a class="header-anchor" href="#err_inspector_not_active" aria-label="Permalink to “ERR_INSPECTOR_NOT_ACTIVE”">​</a></h3><p>当调用 <code>inspector.waitForDebugger()</code> 时，<code>inspector</code> 未激活。</p><h3 id="err_inspector_not_available" tabindex="-1"><code>ERR_INSPECTOR_NOT_AVAILABLE</code> <a class="header-anchor" href="#err_inspector_not_available" aria-label="Permalink to “ERR_INSPECTOR_NOT_AVAILABLE”">​</a></h3><p><code>node:inspector</code> 模块不可用。</p><h3 id="err_inspector_not_connected" tabindex="-1"><code>ERR_INSPECTOR_NOT_CONNECTED</code> <a class="header-anchor" href="#err_inspector_not_connected" aria-label="Permalink to “ERR_INSPECTOR_NOT_CONNECTED”">​</a></h3><p>在使用 <code>node:inspector</code> 模块时，尝试在使用检查器连接之前使用它。</p><h3 id="err_inspector_not_worker" tabindex="-1"><code>ERR_INSPECTOR_NOT_WORKER</code> <a class="header-anchor" href="#err_inspector_not_worker" aria-label="Permalink to “ERR_INSPECTOR_NOT_WORKER”">​</a></h3><p>在主线程上调用了一个只能从工作线程使用的 API。</p><h3 id="err_internal_assertion" tabindex="-1"><code>ERR_INTERNAL_ASSERTION</code> <a class="header-anchor" href="#err_internal_assertion" aria-label="Permalink to “ERR_INTERNAL_ASSERTION”">​</a></h3><p>Node.js 中存在一个错误，或者对 Node.js 内部组件的使用不正确。 要修复该错误，请在 <a href="https://github.com/nodejs/node/issues" target="_blank" rel="noreferrer">https://github.com/nodejs/node/issues</a> 上提出问题。</p><h3 id="err_invalid_address" tabindex="-1"><code>ERR_INVALID_ADDRESS</code> <a class="header-anchor" href="#err_invalid_address" aria-label="Permalink to “ERR_INVALID_ADDRESS”">​</a></h3><p>提供的地址 Node.js API 无法识别。</p><h3 id="err_invalid_address_family" tabindex="-1"><code>ERR_INVALID_ADDRESS_FAMILY</code> <a class="header-anchor" href="#err_invalid_address_family" aria-label="Permalink to “ERR_INVALID_ADDRESS_FAMILY”">​</a></h3><p>提供的地址族 Node.js API 无法识别。</p><h3 id="err_invalid_arg_type" tabindex="-1"><code>ERR_INVALID_ARG_TYPE</code> <a class="header-anchor" href="#err_invalid_arg_type" aria-label="Permalink to “ERR_INVALID_ARG_TYPE”">​</a></h3><p>传递给 Node.js API 的参数类型错误。</p><h3 id="err_invalid_arg_value" tabindex="-1"><code>ERR_INVALID_ARG_VALUE</code> <a class="header-anchor" href="#err_invalid_arg_value" aria-label="Permalink to “ERR_INVALID_ARG_VALUE”">​</a></h3><p>为给定的参数传递了无效或不支持的值。</p><h3 id="err_invalid_async_id" tabindex="-1"><code>ERR_INVALID_ASYNC_ID</code> <a class="header-anchor" href="#err_invalid_async_id" aria-label="Permalink to “ERR_INVALID_ASYNC_ID”">​</a></h3><p>使用 <code>AsyncHooks</code> 传递了无效的 <code>asyncId</code> 或 <code>triggerAsyncId</code>。 小于 -1 的 id 永远不应该发生。</p><h3 id="err_invalid_buffer_size" tabindex="-1"><code>ERR_INVALID_BUFFER_SIZE</code> <a class="header-anchor" href="#err_invalid_buffer_size" aria-label="Permalink to “ERR_INVALID_BUFFER_SIZE”">​</a></h3><p>对 <code>Buffer</code> 执行了交换，但其大小与该操作不兼容。</p><h3 id="err_invalid_char" tabindex="-1"><code>ERR_INVALID_CHAR</code> <a class="header-anchor" href="#err_invalid_char" aria-label="Permalink to “ERR_INVALID_CHAR”">​</a></h3><p>在标头中检测到无效字符。</p><h3 id="err_invalid_cursor_pos" tabindex="-1"><code>ERR_INVALID_CURSOR_POS</code> <a class="header-anchor" href="#err_invalid_cursor_pos" aria-label="Permalink to “ERR_INVALID_CURSOR_POS”">​</a></h3><p>在没有指定列的情况下，无法将给定流上的光标移动到指定的行。</p><h3 id="err_invalid_fd" tabindex="-1"><code>ERR_INVALID_FD</code> <a class="header-anchor" href="#err_invalid_fd" aria-label="Permalink to “ERR_INVALID_FD”">​</a></h3><p>文件描述符 (&#39;fd&#39;) 无效（例如，它是一个负值）。</p><h3 id="err_invalid_fd_type" tabindex="-1"><code>ERR_INVALID_FD_TYPE</code> <a class="header-anchor" href="#err_invalid_fd_type" aria-label="Permalink to “ERR_INVALID_FD_TYPE”">​</a></h3><p>文件描述符 (&#39;fd&#39;) 类型无效。</p><h3 id="err_invalid_file_url_host" tabindex="-1"><code>ERR_INVALID_FILE_URL_HOST</code> <a class="header-anchor" href="#err_invalid_file_url_host" aria-label="Permalink to “ERR_INVALID_FILE_URL_HOST”">​</a></h3><p>使用 <code>file:</code> URL 的 Node.js API（例如 <a href="/zh/nodejs/api/fs"><code>fs</code></a> 模块中的某些函数）遇到了具有不兼容主机的 file URL。 这种情况只能在类似 Unix 的系统上发生，这些系统仅支持 <code>localhost</code> 或空主机。</p><h3 id="err_invalid_file_url_path" tabindex="-1"><code>ERR_INVALID_FILE_URL_PATH</code> <a class="header-anchor" href="#err_invalid_file_url_path" aria-label="Permalink to “ERR_INVALID_FILE_URL_PATH”">​</a></h3><p>使用 <code>file:</code> URL 的 Node.js API（例如 <a href="/zh/nodejs/api/fs"><code>fs</code></a> 模块中的某些函数）遇到了具有不兼容路径的 file URL。 确定是否可以使用路径的确切语义取决于平台。</p><h3 id="err_invalid_handle_type" tabindex="-1"><code>ERR_INVALID_HANDLE_TYPE</code> <a class="header-anchor" href="#err_invalid_handle_type" aria-label="Permalink to “ERR_INVALID_HANDLE_TYPE”">​</a></h3><p>尝试通过 IPC 通信通道将不受支持的“句柄”发送到子进程。 有关更多信息，请参见 <a href="/zh/nodejs/api/child_process#subprocesssendmessage-sendhandle-options-callback"><code>subprocess.send()</code></a> 和 <a href="/zh/nodejs/api/process#processsendmessage-sendhandle-options-callback"><code>process.send()</code></a>。</p><h3 id="err_invalid_http_token" tabindex="-1"><code>ERR_INVALID_HTTP_TOKEN</code> <a class="header-anchor" href="#err_invalid_http_token" aria-label="Permalink to “ERR_INVALID_HTTP_TOKEN”">​</a></h3><p>提供了无效的 HTTP 令牌。</p><h3 id="err_invalid_ip_address" tabindex="-1"><code>ERR_INVALID_IP_ADDRESS</code> <a class="header-anchor" href="#err_invalid_ip_address" aria-label="Permalink to “ERR_INVALID_IP_ADDRESS”">​</a></h3><p>IP 地址无效。</p><h3 id="err_invalid_mime_syntax" tabindex="-1"><code>ERR_INVALID_MIME_SYNTAX</code> <a class="header-anchor" href="#err_invalid_mime_syntax" aria-label="Permalink to “ERR_INVALID_MIME_SYNTAX”">​</a></h3><p>MIME 的语法无效。</p><h3 id="err_invalid_module" tabindex="-1"><code>ERR_INVALID_MODULE</code> <a class="header-anchor" href="#err_invalid_module" aria-label="Permalink to “ERR_INVALID_MODULE”">​</a></h3><p><strong>新增于: v15.0.0, v14.18.0</strong></p><p>试图加载一个不存在或以其他方式无效的模块。</p><h3 id="err_invalid_module_specifier" tabindex="-1"><code>ERR_INVALID_MODULE_SPECIFIER</code> <a class="header-anchor" href="#err_invalid_module_specifier" aria-label="Permalink to “ERR_INVALID_MODULE_SPECIFIER”">​</a></h3><p>导入的模块字符串是无效的 URL、包名或包子路径说明符。</p><h3 id="err_invalid_object_define_property" tabindex="-1"><code>ERR_INVALID_OBJECT_DEFINE_PROPERTY</code> <a class="header-anchor" href="#err_invalid_object_define_property" aria-label="Permalink to “ERR_INVALID_OBJECT_DEFINE_PROPERTY”">​</a></h3><p>在设置对象属性上的无效属性时发生错误。</p><h3 id="err_invalid_package_config" tabindex="-1"><code>ERR_INVALID_PACKAGE_CONFIG</code> <a class="header-anchor" href="#err_invalid_package_config" aria-label="Permalink to “ERR_INVALID_PACKAGE_CONFIG”">​</a></h3><p>一个无效的 <a href="/zh/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> 文件解析失败。</p><h3 id="err_invalid_package_target" tabindex="-1"><code>ERR_INVALID_PACKAGE_TARGET</code> <a class="header-anchor" href="#err_invalid_package_target" aria-label="Permalink to “ERR_INVALID_PACKAGE_TARGET”">​</a></h3><p><code>package.json</code> 的 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段包含用于尝试的模块解析的无效目标映射值。</p><h3 id="err_invalid_protocol" tabindex="-1"><code>ERR_INVALID_PROTOCOL</code> <a class="header-anchor" href="#err_invalid_protocol" aria-label="Permalink to “ERR_INVALID_PROTOCOL”">​</a></h3><p>传递给 <code>http.request()</code> 的 <code>options.protocol</code> 无效。</p><h3 id="err_invalid_repl_eval_config" tabindex="-1"><code>ERR_INVALID_REPL_EVAL_CONFIG</code> <a class="header-anchor" href="#err_invalid_repl_eval_config" aria-label="Permalink to “ERR_INVALID_REPL_EVAL_CONFIG”">​</a></h3><p>在 <a href="/zh/nodejs/api/repl"><code>REPL</code></a> 配置中同时设置了 <code>breakEvalOnSigint</code> 和 <code>eval</code> 选项，这是不支持的。</p><h3 id="err_invalid_repl_input" tabindex="-1"><code>ERR_INVALID_REPL_INPUT</code> <a class="header-anchor" href="#err_invalid_repl_input" aria-label="Permalink to “ERR_INVALID_REPL_INPUT”">​</a></h3><p>输入可能无法在 <a href="/zh/nodejs/api/repl"><code>REPL</code></a> 中使用。 使用此错误的条件在 <a href="/zh/nodejs/api/repl"><code>REPL</code></a> 文档中进行了描述。</p><h3 id="err_invalid_return_property" tabindex="-1"><code>ERR_INVALID_RETURN_PROPERTY</code> <a class="header-anchor" href="#err_invalid_return_property" aria-label="Permalink to “ERR_INVALID_RETURN_PROPERTY”">​</a></h3><p>如果函数选项在执行时没有为其返回的对象属性之一提供有效值，则抛出此错误。</p><h3 id="err_invalid_return_property_value" tabindex="-1"><code>ERR_INVALID_RETURN_PROPERTY_VALUE</code> <a class="header-anchor" href="#err_invalid_return_property_value" aria-label="Permalink to “ERR_INVALID_RETURN_PROPERTY_VALUE”">​</a></h3><p>如果函数选项在执行时没有为其返回的对象属性之一提供预期的值类型，则抛出此错误。</p><h3 id="err_invalid_return_value" tabindex="-1"><code>ERR_INVALID_RETURN_VALUE</code> <a class="header-anchor" href="#err_invalid_return_value" aria-label="Permalink to “ERR_INVALID_RETURN_VALUE”">​</a></h3><p>如果函数选项在执行时没有返回预期的值类型，例如当期望函数返回 promise 时，则抛出此错误。</p><h3 id="err_invalid_state" tabindex="-1"><code>ERR_INVALID_STATE</code> <a class="header-anchor" href="#err_invalid_state" aria-label="Permalink to “ERR_INVALID_STATE”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>表示由于无效状态而无法完成操作。 例如，对象可能已被销毁，或者可能正在执行另一项操作。</p><h3 id="err_invalid_sync_fork_input" tabindex="-1"><code>ERR_INVALID_SYNC_FORK_INPUT</code> <a class="header-anchor" href="#err_invalid_sync_fork_input" aria-label="Permalink to “ERR_INVALID_SYNC_FORK_INPUT”">​</a></h3><p>已将 <code>Buffer</code>、<code>TypedArray</code>、<code>DataView</code> 或 <code>string</code> 作为 stdio 输入提供给异步 fork。 有关更多信息，请参见 <a href="/zh/nodejs/api/child_process"><code>child_process</code></a> 模块的文档。</p><h3 id="err_invalid_this" tabindex="-1"><code>ERR_INVALID_THIS</code> <a class="header-anchor" href="#err_invalid_this" aria-label="Permalink to “ERR_INVALID_THIS”">​</a></h3><p>一个 Node.js API 函数被调用时，使用了不兼容的 <code>this</code> 值。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> urlSearchParams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URLSearchParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo=bar&amp;baz=new&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urlSearchParams.has.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出一个类型错误，错误码为 &#39;ERR_INVALID_THIS&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="err_invalid_tuple" tabindex="-1"><code>ERR_INVALID_TUPLE</code> <a class="header-anchor" href="#err_invalid_tuple" aria-label="Permalink to “ERR_INVALID_TUPLE”">​</a></h3><p>提供给 <a href="/zh/nodejs/api/url#the-whatwg-url-api">WHATWG</a> <a href="/zh/nodejs/api/url#new-urlsearchparamsiterable"><code>URLSearchParams</code> 构造函数</a> 的 <code>iterable</code> 中的一个元素，不代表一个 <code>[name, value]</code> 元组 —— 也就是说，如果一个元素不可迭代，或者不恰好包含两个元素。</p><h3 id="err_invalid_typescript_syntax" tabindex="-1"><code>ERR_INVALID_TYPESCRIPT_SYNTAX</code> <a class="header-anchor" href="#err_invalid_typescript_syntax" aria-label="Permalink to “ERR_INVALID_TYPESCRIPT_SYNTAX”">​</a></h3><p><strong>新增于: v23.0.0</strong></p><p>提供的 TypeScript 语法无效或不受支持。 当使用需要使用 <a href="/zh/nodejs/api/typescript#type-stripping">类型剥离</a> 进行转换的 TypeScript 语法时，可能会发生这种情况。</p><h3 id="err_invalid_uri" tabindex="-1"><code>ERR_INVALID_URI</code> <a class="header-anchor" href="#err_invalid_uri" aria-label="Permalink to “ERR_INVALID_URI”">​</a></h3><p>传递了一个无效的 URI。</p><h3 id="err_invalid_url" tabindex="-1"><code>ERR_INVALID_URL</code> <a class="header-anchor" href="#err_invalid_url" aria-label="Permalink to “ERR_INVALID_URL”">​</a></h3><p>将一个无效的 URL 传递给 <a href="/zh/nodejs/api/url#the-whatwg-url-api">WHATWG</a> <a href="/zh/nodejs/api/url#new-urlinput-base"><code>URL</code> 构造函数</a> 或旧版的 <a href="/zh/nodejs/api/url#urlparseurlstring-parsequerystring-slashesdenotehost"><code>url.parse()</code></a> 进行解析。 抛出的错误对象通常具有一个额外的属性 <code>&#39;input&#39;</code>，其中包含未能解析的 URL。</p><h3 id="err_invalid_url_scheme" tabindex="-1"><code>ERR_INVALID_URL_SCHEME</code> <a class="header-anchor" href="#err_invalid_url_scheme" aria-label="Permalink to “ERR_INVALID_URL_SCHEME”">​</a></h3><p>尝试将与特定用途不兼容的方案（协议）的 URL 用于特定目的。 它仅用于 <a href="/zh/nodejs/api/fs"><code>fs</code></a> 模块中的 <a href="/zh/nodejs/api/url#the-whatwg-url-api">WHATWG URL API</a> 支持（仅接受具有 <code>&#39;file&#39;</code> 方案的 URL），但将来也可能在其他 Node.js API 中使用。</p><h3 id="err_ipc_channel_closed" tabindex="-1"><code>ERR_IPC_CHANNEL_CLOSED</code> <a class="header-anchor" href="#err_ipc_channel_closed" aria-label="Permalink to “ERR_IPC_CHANNEL_CLOSED”">​</a></h3><p>尝试使用已经关闭的 IPC 通信通道。</p><h3 id="err_ipc_disconnected" tabindex="-1"><code>ERR_IPC_DISCONNECTED</code> <a class="header-anchor" href="#err_ipc_disconnected" aria-label="Permalink to “ERR_IPC_DISCONNECTED”">​</a></h3><p>尝试断开一个已经断开连接的 IPC 通信通道。 有关更多信息，请参阅 <a href="/zh/nodejs/api/child_process"><code>child_process</code></a> 模块的文档。</p><h3 id="err_ipc_one_pipe" tabindex="-1"><code>ERR_IPC_ONE_PIPE</code> <a class="header-anchor" href="#err_ipc_one_pipe" aria-label="Permalink to “ERR_IPC_ONE_PIPE”">​</a></h3><p>尝试创建一个使用多个 IPC 通信通道的子 Node.js 进程。 有关更多信息，请参阅 <a href="/zh/nodejs/api/child_process"><code>child_process</code></a> 模块的文档。</p><h3 id="err_ipc_sync_fork" tabindex="-1"><code>ERR_IPC_SYNC_FORK</code> <a class="header-anchor" href="#err_ipc_sync_fork" aria-label="Permalink to “ERR_IPC_SYNC_FORK”">​</a></h3><p>试图打开与同步 fork 的 Node.js 进程的 IPC 通信通道。 更多信息请参考 <a href="/zh/nodejs/api/child_process"><code>child_process</code></a> 模块的文档。</p><h3 id="err_ip_blocked" tabindex="-1"><code>ERR_IP_BLOCKED</code> <a class="header-anchor" href="#err_ip_blocked" aria-label="Permalink to “ERR_IP_BLOCKED”">​</a></h3><p>IP 被 <code>net.BlockList</code> 阻止。</p><h3 id="err_loader_chain_incomplete" tabindex="-1"><code>ERR_LOADER_CHAIN_INCOMPLETE</code> <a class="header-anchor" href="#err_loader_chain_incomplete" aria-label="Permalink to “ERR_LOADER_CHAIN_INCOMPLETE”">​</a></h3><p><strong>新增于: v18.6.0, v16.17.0</strong></p><p>一个 ESM 加载器钩子返回时，没有调用 <code>next()</code> 也没有显式地发出短路信号。</p><h3 id="err_load_sqlite_extension" tabindex="-1"><code>ERR_LOAD_SQLITE_EXTENSION</code> <a class="header-anchor" href="#err_load_sqlite_extension" aria-label="Permalink to “ERR_LOAD_SQLITE_EXTENSION”">​</a></h3><p><strong>新增于: v23.5.0</strong></p><p>加载 SQLite 扩展时发生错误。</p><h3 id="err_memory_allocation_failed" tabindex="-1"><code>ERR_MEMORY_ALLOCATION_FAILED</code> <a class="header-anchor" href="#err_memory_allocation_failed" aria-label="Permalink to “ERR_MEMORY_ALLOCATION_FAILED”">​</a></h3><p>试图分配内存（通常在 C++ 层），但失败了。</p><h3 id="err_message_target_context_unavailable" tabindex="-1"><code>ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE</code> <a class="header-anchor" href="#err_message_target_context_unavailable" aria-label="Permalink to “ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE”">​</a></h3><p><strong>新增于: v14.5.0, v12.19.0</strong></p><p>发布到 <a href="/zh/nodejs/api/worker_threads#class-messageport"><code>MessagePort</code></a> 的消息无法在目标 <a href="/zh/nodejs/api/vm">vm</a> <code>Context</code> 中反序列化。 目前并非所有 Node.js 对象都可以成功地在任何上下文中实例化，在这种情况下，尝试使用 <code>postMessage()</code> 传输它们可能会在接收端失败。</p><h3 id="err_method_not_implemented" tabindex="-1"><code>ERR_METHOD_NOT_IMPLEMENTED</code> <a class="header-anchor" href="#err_method_not_implemented" aria-label="Permalink to “ERR_METHOD_NOT_IMPLEMENTED”">​</a></h3><p>需要一个方法但未实现。</p><h3 id="err_missing_args" tabindex="-1"><code>ERR_MISSING_ARGS</code> <a class="header-anchor" href="#err_missing_args" aria-label="Permalink to “ERR_MISSING_ARGS”">​</a></h3><p>未传递 Node.js API 的必需参数。 这仅用于严格遵守 API 规范（在某些情况下可能接受 <code>func(undefined)</code> 但不接受 <code>func()</code>）。 在大多数原生 Node.js API 中，<code>func(undefined)</code> 和 <code>func()</code> 被视为相同，并且可能会改用 <a href="/zh/nodejs/api/errors#err-invalid-arg-type"><code>ERR_INVALID_ARG_TYPE</code></a> 错误代码。</p><h3 id="err_missing_option" tabindex="-1"><code>ERR_MISSING_OPTION</code> <a class="header-anchor" href="#err_missing_option" aria-label="Permalink to “ERR_MISSING_OPTION”">​</a></h3><p>对于接受选项对象的 API，某些选项可能是强制性的。 如果缺少必需的选项，则会抛出此代码。</p><h3 id="err_missing_passphrase" tabindex="-1"><code>ERR_MISSING_PASSPHRASE</code> <a class="header-anchor" href="#err_missing_passphrase" aria-label="Permalink to “ERR_MISSING_PASSPHRASE”">​</a></h3><p>试图读取加密密钥，但未指定密码。</p><h3 id="err_missing_platform_for_worker" tabindex="-1"><code>ERR_MISSING_PLATFORM_FOR_WORKER</code> <a class="header-anchor" href="#err_missing_platform_for_worker" aria-label="Permalink to “ERR_MISSING_PLATFORM_FOR_WORKER”">​</a></h3><p>此 Node.js 实例使用的 V8 平台不支持创建 Workers。 这是由于缺少对 Workers 的嵌入器支持造成的。 特别是，此错误不会发生在 Node.js 的标准构建中。</p><h3 id="err_module_not_found" tabindex="-1"><code>ERR_MODULE_NOT_FOUND</code> <a class="header-anchor" href="#err_module_not_found" aria-label="Permalink to “ERR_MODULE_NOT_FOUND”">​</a></h3><p>在尝试执行 <code>import</code> 操作或加载程序入口点时，ECMAScript 模块加载器无法解析模块文件。</p><h3 id="err_multiple_callback" tabindex="-1"><code>ERR_MULTIPLE_CALLBACK</code> <a class="header-anchor" href="#err_multiple_callback" aria-label="Permalink to “ERR_MULTIPLE_CALLBACK”">​</a></h3><p>一个回调被多次调用。</p><p>回调几乎总是只应该被调用一次，因为查询要么被满足，要么被拒绝，而不能同时发生。 后者可以通过多次调用回调来实现。</p><h3 id="err_napi_cons_function" tabindex="-1"><code>ERR_NAPI_CONS_FUNCTION</code> <a class="header-anchor" href="#err_napi_cons_function" aria-label="Permalink to “ERR_NAPI_CONS_FUNCTION”">​</a></h3><p>在使用 <code>Node-API</code> 时，传递的构造函数不是一个函数。</p><h3 id="err_napi_invalid_dataview_args" tabindex="-1"><code>ERR_NAPI_INVALID_DATAVIEW_ARGS</code> <a class="header-anchor" href="#err_napi_invalid_dataview_args" aria-label="Permalink to “ERR_NAPI_INVALID_DATAVIEW_ARGS”">​</a></h3><p>在调用 <code>napi_create_dataview()</code> 时，给定的 <code>offset</code> 超出了 dataview 的范围，或者 <code>offset + length</code> 大于给定 <code>buffer</code> 的长度。</p><h3 id="err_napi_invalid_typedarray_alignment" tabindex="-1"><code>ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT</code> <a class="header-anchor" href="#err_napi_invalid_typedarray_alignment" aria-label="Permalink to “ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT”">​</a></h3><p>在调用 <code>napi_create_typedarray()</code> 时，提供的 <code>offset</code> 不是元素大小的倍数。</p><h3 id="err_napi_invalid_typedarray_length" tabindex="-1"><code>ERR_NAPI_INVALID_TYPEDARRAY_LENGTH</code> <a class="header-anchor" href="#err_napi_invalid_typedarray_length" aria-label="Permalink to “ERR_NAPI_INVALID_TYPEDARRAY_LENGTH”">​</a></h3><p>在调用 <code>napi_create_typedarray()</code> 时，<code>(length * size_of_element) + byte_offset</code> 大于给定 <code>buffer</code> 的长度。</p><h3 id="err_napi_tsfn_call_js" tabindex="-1"><code>ERR_NAPI_TSFN_CALL_JS</code> <a class="header-anchor" href="#err_napi_tsfn_call_js" aria-label="Permalink to “ERR_NAPI_TSFN_CALL_JS”">​</a></h3><p>在调用线程安全函数的 JavaScript 部分时发生错误。</p><h3 id="err_napi_tsfn_get_undefined" tabindex="-1"><code>ERR_NAPI_TSFN_GET_UNDEFINED</code> <a class="header-anchor" href="#err_napi_tsfn_get_undefined" aria-label="Permalink to “ERR_NAPI_TSFN_GET_UNDEFINED”">​</a></h3><p>在尝试检索 JavaScript <code>undefined</code> 值时发生错误。</p><h3 id="err_non_context_aware_disabled" tabindex="-1"><code>ERR_NON_CONTEXT_AWARE_DISABLED</code> <a class="header-anchor" href="#err_non_context_aware_disabled" aria-label="Permalink to “ERR_NON_CONTEXT_AWARE_DISABLED”">​</a></h3><p>一个非上下文感知的原生插件在一个禁止它们的进程中被加载。</p><h3 id="err_not_building_snapshot" tabindex="-1"><code>ERR_NOT_BUILDING_SNAPSHOT</code> <a class="header-anchor" href="#err_not_building_snapshot" aria-label="Permalink to “ERR_NOT_BUILDING_SNAPSHOT”">​</a></h3><p>尝试使用只能在构建 V8 启动快照时使用的操作，即使 Node.js 没有构建快照。</p><h3 id="err_not_in_single_executable_application" tabindex="-1"><code>ERR_NOT_IN_SINGLE_EXECUTABLE_APPLICATION</code> <a class="header-anchor" href="#err_not_in_single_executable_application" aria-label="Permalink to “ERR_NOT_IN_SINGLE_EXECUTABLE_APPLICATION”">​</a></h3><p><strong>添加于: v21.7.0, v20.12.0</strong></p><p>该操作无法在单可执行应用程序中执行。</p><h3 id="err_not_supported_in_snapshot" tabindex="-1"><code>ERR_NOT_SUPPORTED_IN_SNAPSHOT</code> <a class="header-anchor" href="#err_not_supported_in_snapshot" aria-label="Permalink to “ERR_NOT_SUPPORTED_IN_SNAPSHOT”">​</a></h3><p>尝试执行构建启动快照时不支持的操作。</p><h3 id="err_no_crypto" tabindex="-1"><code>ERR_NO_CRYPTO</code> <a class="header-anchor" href="#err_no_crypto" aria-label="Permalink to “ERR_NO_CRYPTO”">​</a></h3><p>尝试使用加密功能，但 Node.js 在编译时没有包含 OpenSSL 加密支持。</p><h3 id="err_no_icu" tabindex="-1"><code>ERR_NO_ICU</code> <a class="header-anchor" href="#err_no_icu" aria-label="Permalink to “ERR_NO_ICU”">​</a></h3><p>尝试使用需要 <a href="/zh/nodejs/api/intl#internationalization-support">ICU</a> 的功能，但 Node.js 在编译时未启用 ICU 支持。</p><h3 id="err_no_typescript" tabindex="-1"><code>ERR_NO_TYPESCRIPT</code> <a class="header-anchor" href="#err_no_typescript" aria-label="Permalink to “ERR_NO_TYPESCRIPT”">​</a></h3><p><strong>新增于: v23.0.0</strong></p><p>尝试使用需要 <a href="/zh/nodejs/api/typescript#type-stripping">原生 TypeScript 支持</a> 的功能，但 Node.js 在编译时未启用 TypeScript 支持。</p><h3 id="err_operation_failed" tabindex="-1"><code>ERR_OPERATION_FAILED</code> <a class="header-anchor" href="#err_operation_failed" aria-label="Permalink to “ERR_OPERATION_FAILED”">​</a></h3><p><strong>新增于: v15.0.0</strong></p><p>操作失败。 这通常用于指示异步操作的一般性失败。</p><h3 id="err_out_of_range" tabindex="-1"><code>ERR_OUT_OF_RANGE</code> <a class="header-anchor" href="#err_out_of_range" aria-label="Permalink to “ERR_OUT_OF_RANGE”">​</a></h3><p>给定的值超出可接受的范围。</p><h3 id="err_package_import_not_defined" tabindex="-1"><code>ERR_PACKAGE_IMPORT_NOT_DEFINED</code> <a class="header-anchor" href="#err_package_import_not_defined" aria-label="Permalink to “ERR_PACKAGE_IMPORT_NOT_DEFINED”">​</a></h3><p><code>package.json</code> 的 <a href="/zh/nodejs/api/packages#imports"><code>&quot;imports&quot;</code></a> 字段未定义给定的内部包说明符映射。</p><h3 id="err_package_path_not_exported" tabindex="-1"><code>ERR_PACKAGE_PATH_NOT_EXPORTED</code> <a class="header-anchor" href="#err_package_path_not_exported" aria-label="Permalink to “ERR_PACKAGE_PATH_NOT_EXPORTED”">​</a></h3><p><code>package.json</code> 的 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段未导出请求的子路径。 因为导出是封装的，所以未导出的私有内部模块无法通过包解析导入，除非使用绝对 URL。</p><h3 id="err_parse_args_invalid_option_value" tabindex="-1"><code>ERR_PARSE_ARGS_INVALID_OPTION_VALUE</code> <a class="header-anchor" href="#err_parse_args_invalid_option_value" aria-label="Permalink to “ERR_PARSE_ARGS_INVALID_OPTION_VALUE”">​</a></h3><p><strong>新增于: v18.3.0, v16.17.0</strong></p><p>当 <code>strict</code> 设置为 <code>true</code> 时，如果为 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 类型的选项提供了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 值，或者为 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 类型的选项提供了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 值，则由 <a href="/zh/nodejs/api/util#utilparseargsconfig"><code>util.parseArgs()</code></a> 抛出。</p><h3 id="err_parse_args_unexpected_positional" tabindex="-1"><code>ERR_PARSE_ARGS_UNEXPECTED_POSITIONAL</code> <a class="header-anchor" href="#err_parse_args_unexpected_positional" aria-label="Permalink to “ERR_PARSE_ARGS_UNEXPECTED_POSITIONAL”">​</a></h3><p><strong>新增于: v18.3.0, v16.17.0</strong></p><p>当提供位置参数并且 <code>allowPositionals</code> 设置为 <code>false</code> 时，由 <a href="/zh/nodejs/api/util#utilparseargsconfig"><code>util.parseArgs()</code></a> 抛出。</p><h3 id="err_parse_args_unknown_option" tabindex="-1"><code>ERR_PARSE_ARGS_UNKNOWN_OPTION</code> <a class="header-anchor" href="#err_parse_args_unknown_option" aria-label="Permalink to “ERR_PARSE_ARGS_UNKNOWN_OPTION”">​</a></h3><p><strong>新增于: v18.3.0, v16.17.0</strong></p><p>当 <code>strict</code> 设置为 <code>true</code> 时，如果参数未在 <code>options</code> 中配置，则由 <a href="/zh/nodejs/api/util#utilparseargsconfig"><code>util.parseArgs()</code></a> 抛出。</p><h3 id="err_performance_invalid_timestamp" tabindex="-1"><code>ERR_PERFORMANCE_INVALID_TIMESTAMP</code> <a class="header-anchor" href="#err_performance_invalid_timestamp" aria-label="Permalink to “ERR_PERFORMANCE_INVALID_TIMESTAMP”">​</a></h3><p>为性能标记或度量提供了无效的时间戳值。</p><h3 id="err_performance_measure_invalid_options" tabindex="-1"><code>ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS</code> <a class="header-anchor" href="#err_performance_measure_invalid_options" aria-label="Permalink to “ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS”">​</a></h3><p>为性能度量提供了无效的选项。</p><h3 id="err_proto_access" tabindex="-1"><code>ERR_PROTO_ACCESS</code> <a class="header-anchor" href="#err_proto_access" aria-label="Permalink to “ERR_PROTO_ACCESS”">​</a></h3><p>使用 <a href="/zh/nodejs/api/cli#disable-protomode"><code>--disable-proto=throw</code></a> 禁止访问 <code>Object.prototype.__proto__</code>。应该使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf" target="_blank" rel="noreferrer"><code>Object.getPrototypeOf</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" target="_blank" rel="noreferrer"><code>Object.setPrototypeOf</code></a> 来获取和设置对象的原型。</p><h3 id="err_quic_application_error" tabindex="-1"><code>ERR_QUIC_APPLICATION_ERROR</code> <a class="header-anchor" href="#err_quic_application_error" aria-label="Permalink to “ERR_QUIC_APPLICATION_ERROR”">​</a></h3><p><strong>添加于: v23.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> - 实验性</p></div><p>发生 QUIC 应用程序错误。</p><h3 id="err_quic_connection_failed" tabindex="-1"><code>ERR_QUIC_CONNECTION_FAILED</code> <a class="header-anchor" href="#err_quic_connection_failed" aria-label="Permalink to “ERR_QUIC_CONNECTION_FAILED”">​</a></h3><p><strong>添加于: v23.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> - 实验性</p></div><p>建立 QUIC 连接失败。</p><h3 id="err_quic_endpoint_closed" tabindex="-1"><code>ERR_QUIC_ENDPOINT_CLOSED</code> <a class="header-anchor" href="#err_quic_endpoint_closed" aria-label="Permalink to “ERR_QUIC_ENDPOINT_CLOSED”">​</a></h3><p><strong>添加于: v23.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> - 实验性</p></div><p>QUIC 端点因错误而关闭。</p><h3 id="err_quic_open_stream_failed" tabindex="-1"><code>ERR_QUIC_OPEN_STREAM_FAILED</code> <a class="header-anchor" href="#err_quic_open_stream_failed" aria-label="Permalink to “ERR_QUIC_OPEN_STREAM_FAILED”">​</a></h3><p><strong>添加于: v23.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> - 实验性</p></div><p>打开 QUIC 流失败。</p><h3 id="err_quic_transport_error" tabindex="-1"><code>ERR_QUIC_TRANSPORT_ERROR</code> <a class="header-anchor" href="#err_quic_transport_error" aria-label="Permalink to “ERR_QUIC_TRANSPORT_ERROR”">​</a></h3><p><strong>添加于: v23.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> - 实验性</p></div><p>发生 QUIC 传输错误。</p><h3 id="err_quic_version_negotiation_error" tabindex="-1"><code>ERR_QUIC_VERSION_NEGOTIATION_ERROR</code> <a class="header-anchor" href="#err_quic_version_negotiation_error" aria-label="Permalink to “ERR_QUIC_VERSION_NEGOTIATION_ERROR”">​</a></h3><p><strong>添加于: v23.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> - 实验性</p></div><p>QUIC 会话失败，因为需要版本协商。</p><h3 id="err_require_async_module" tabindex="-1"><code>ERR_REQUIRE_ASYNC_MODULE</code> <a class="header-anchor" href="#err_require_async_module" aria-label="Permalink to “ERR_REQUIRE_ASYNC_MODULE”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性</p></div><p>当尝试 <code>require()</code> 一个 <a href="/zh/nodejs/api/esm">ES 模块</a>时，该模块最终是异步的。 也就是说，它包含顶层 await。</p><p>要查看顶层 await 的位置，请使用 <code>--experimental-print-required-tla</code>（这将在查找顶层 await 之前执行模块）。</p><h3 id="err_require_cycle_module" tabindex="-1"><code>ERR_REQUIRE_CYCLE_MODULE</code> <a class="header-anchor" href="#err_require_cycle_module" aria-label="Permalink to “ERR_REQUIRE_CYCLE_MODULE”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性</p></div><p>当尝试 <code>require()</code> 一个 <a href="/zh/nodejs/api/esm">ES 模块</a> 时，CommonJS 到 ESM 或 ESM 到 CommonJS 的边缘参与了一个直接的循环。 这是不允许的，因为 ES 模块在已经被评估时不能被评估。</p><p>为了避免循环，循环中涉及的 <code>require()</code> 调用不应该发生在 ES 模块（通过 <code>createRequire()</code>）或 CommonJS 模块的顶层，并且应该在内部函数中延迟完成。</p><h3 id="err_require_esm" tabindex="-1"><code>ERR_REQUIRE_ESM</code> <a class="header-anchor" href="#err_require_esm" aria-label="Permalink to “ERR_REQUIRE_ESM”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v23.0.0</td><td><code>require()</code> 现在默认支持加载同步 ES 模块。</td></tr></tbody></table></div><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 已弃用</p></div><p>试图 <code>require()</code> 一个 <a href="/zh/nodejs/api/esm">ES 模块</a>。</p><p>自从 <code>require()</code> 现在支持加载同步 ES 模块以来，此错误已被弃用。 当 <code>require()</code> 遇到包含顶层 <code>await</code> 的 ES 模块时，它将抛出 <a href="/zh/nodejs/api/errors#err-require-async-module"><code>ERR_REQUIRE_ASYNC_MODULE</code></a> 错误。</p><h3 id="err_script_execution_interrupted" tabindex="-1"><code>ERR_SCRIPT_EXECUTION_INTERRUPTED</code> <a class="header-anchor" href="#err_script_execution_interrupted" aria-label="Permalink to “ERR_SCRIPT_EXECUTION_INTERRUPTED”">​</a></h3><p>脚本执行被 <code>SIGINT</code> 中断（例如，按下了 + 键。）</p><h3 id="err_script_execution_timeout" tabindex="-1"><code>ERR_SCRIPT_EXECUTION_TIMEOUT</code> <a class="header-anchor" href="#err_script_execution_timeout" aria-label="Permalink to “ERR_SCRIPT_EXECUTION_TIMEOUT”">​</a></h3><p>脚本执行超时，可能是由于正在执行的脚本中存在错误。</p><h3 id="err_server_already_listen" tabindex="-1"><code>ERR_SERVER_ALREADY_LISTEN</code> <a class="header-anchor" href="#err_server_already_listen" aria-label="Permalink to “ERR_SERVER_ALREADY_LISTEN”">​</a></h3><p>当 <code>net.Server</code> 已经在监听时，调用了 <a href="/zh/nodejs/api/net#serverlisten"><code>server.listen()</code></a> 方法。 这适用于 <code>net.Server</code> 的所有实例，包括 HTTP、HTTPS 和 HTTP/2 <code>Server</code> 实例。</p><h3 id="err_server_not_running" tabindex="-1"><code>ERR_SERVER_NOT_RUNNING</code> <a class="header-anchor" href="#err_server_not_running" aria-label="Permalink to “ERR_SERVER_NOT_RUNNING”">​</a></h3><p>当 <code>net.Server</code> 未运行时，调用了 <a href="/zh/nodejs/api/net#serverclosecallback"><code>server.close()</code></a> 方法。 这适用于 <code>net.Server</code> 的所有实例，包括 HTTP、HTTPS 和 HTTP/2 <code>Server</code> 实例。</p><h3 id="err_single_executable_application_asset_not_found" tabindex="-1"><code>ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND</code> <a class="header-anchor" href="#err_single_executable_application_asset_not_found" aria-label="Permalink to “ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND”">​</a></h3><p><strong>添加于: v21.7.0, v20.12.0</strong></p><p>传递给单可执行文件应用程序 API 的一个键，用于标识资源，但找不到匹配项。</p><h3 id="err_socket_already_bound" tabindex="-1"><code>ERR_SOCKET_ALREADY_BOUND</code> <a class="header-anchor" href="#err_socket_already_bound" aria-label="Permalink to “ERR_SOCKET_ALREADY_BOUND”">​</a></h3><p>试图绑定一个已经绑定的套接字。</p><h3 id="err_socket_bad_buffer_size" tabindex="-1"><code>ERR_SOCKET_BAD_BUFFER_SIZE</code> <a class="header-anchor" href="#err_socket_bad_buffer_size" aria-label="Permalink to “ERR_SOCKET_BAD_BUFFER_SIZE”">​</a></h3><p>在 <a href="/zh/nodejs/api/dgram#dgramcreatesocketoptions-callback"><code>dgram.createSocket()</code></a> 中为 <code>recvBufferSize</code> 或 <code>sendBufferSize</code> 选项传递了一个无效（负数）的大小。</p><h3 id="err_socket_bad_port" tabindex="-1"><code>ERR_SOCKET_BAD_PORT</code> <a class="header-anchor" href="#err_socket_bad_port" aria-label="Permalink to “ERR_SOCKET_BAD_PORT”">​</a></h3><p>期望端口 &gt;= 0 且 &lt; 65536 的 API 函数接收到一个无效值。</p><h3 id="err_socket_bad_type" tabindex="-1"><code>ERR_SOCKET_BAD_TYPE</code> <a class="header-anchor" href="#err_socket_bad_type" aria-label="Permalink to “ERR_SOCKET_BAD_TYPE”">​</a></h3><p>期望套接字类型（<code>udp4</code> 或 <code>udp6</code>）的 API 函数接收到一个无效值。</p><h3 id="err_socket_buffer_size" tabindex="-1"><code>ERR_SOCKET_BUFFER_SIZE</code> <a class="header-anchor" href="#err_socket_buffer_size" aria-label="Permalink to “ERR_SOCKET_BUFFER_SIZE”">​</a></h3><p>使用 <a href="/zh/nodejs/api/dgram#dgramcreatesocketoptions-callback"><code>dgram.createSocket()</code></a> 时，无法确定接收或发送 <code>Buffer</code> 的大小。</p><h3 id="err_socket_closed" tabindex="-1"><code>ERR_SOCKET_CLOSED</code> <a class="header-anchor" href="#err_socket_closed" aria-label="Permalink to “ERR_SOCKET_CLOSED”">​</a></h3><p>试图对一个已经关闭的套接字进行操作。</p><h3 id="err_socket_closed_before_connection" tabindex="-1"><code>ERR_SOCKET_CLOSED_BEFORE_CONNECTION</code> <a class="header-anchor" href="#err_socket_closed_before_connection" aria-label="Permalink to “ERR_SOCKET_CLOSED_BEFORE_CONNECTION”">​</a></h3><p>在连接套接字上调用 <a href="/zh/nodejs/api/net#socketwritedata-encoding-callback"><code>net.Socket.write()</code></a> 且套接字在连接建立之前关闭时。</p><h3 id="err_socket_connection_timeout" tabindex="-1"><code>ERR_SOCKET_CONNECTION_TIMEOUT</code> <a class="header-anchor" href="#err_socket_connection_timeout" aria-label="Permalink to “ERR_SOCKET_CONNECTION_TIMEOUT”">​</a></h3><p>当使用族自动选择算法时，套接字无法在允许的超时时间内连接到 DNS 返回的任何地址。</p><h3 id="err_socket_dgram_is_connected" tabindex="-1"><code>ERR_SOCKET_DGRAM_IS_CONNECTED</code> <a class="header-anchor" href="#err_socket_dgram_is_connected" aria-label="Permalink to “ERR_SOCKET_DGRAM_IS_CONNECTED”">​</a></h3><p>在已连接的套接字上调用了 <a href="/zh/nodejs/api/dgram#socketconnectport-address-callback"><code>dgram.connect()</code></a>。</p><h3 id="err_socket_dgram_not_connected" tabindex="-1"><code>ERR_SOCKET_DGRAM_NOT_CONNECTED</code> <a class="header-anchor" href="#err_socket_dgram_not_connected" aria-label="Permalink to “ERR_SOCKET_DGRAM_NOT_CONNECTED”">​</a></h3><p>在断开连接的套接字上调用了 <a href="/zh/nodejs/api/dgram#socketdisconnect"><code>dgram.disconnect()</code></a> 或 <a href="/zh/nodejs/api/dgram#socketremoteaddress"><code>dgram.remoteAddress()</code></a>。</p><h3 id="err_socket_dgram_not_running" tabindex="-1"><code>ERR_SOCKET_DGRAM_NOT_RUNNING</code> <a class="header-anchor" href="#err_socket_dgram_not_running" aria-label="Permalink to “ERR_SOCKET_DGRAM_NOT_RUNNING”">​</a></h3><p>进行了调用，但 UDP 子系统未运行。</p><h3 id="err_source_map_corrupt" tabindex="-1"><code>ERR_SOURCE_MAP_CORRUPT</code> <a class="header-anchor" href="#err_source_map_corrupt" aria-label="Permalink to “ERR_SOURCE_MAP_CORRUPT”">​</a></h3><p>由于源映射不存在或已损坏，无法解析。</p><h3 id="err_source_map_missing_source" tabindex="-1"><code>ERR_SOURCE_MAP_MISSING_SOURCE</code> <a class="header-anchor" href="#err_source_map_missing_source" aria-label="Permalink to “ERR_SOURCE_MAP_MISSING_SOURCE”">​</a></h3><p>从源映射导入的文件未找到。</p><h3 id="err_sqlite_error" tabindex="-1"><code>ERR_SQLITE_ERROR</code> <a class="header-anchor" href="#err_sqlite_error" aria-label="Permalink to “ERR_SQLITE_ERROR”">​</a></h3><p><strong>添加于: v22.5.0</strong></p><p>从 <a href="/zh/nodejs/api/sqlite">SQLite</a> 返回了一个错误。</p><h3 id="err_sri_parse" tabindex="-1"><code>ERR_SRI_PARSE</code> <a class="header-anchor" href="#err_sri_parse" aria-label="Permalink to “ERR_SRI_PARSE”">​</a></h3><p>为子资源完整性检查提供了一个字符串，但无法解析。 通过查看 <a href="https://www.w3.org/TR/SRI/#the-integrity-attribute" target="_blank" rel="noreferrer">子资源完整性规范</a> 来检查 integrity 属性的格式。</p><h3 id="err_stream_already_finished" tabindex="-1"><code>ERR_STREAM_ALREADY_FINISHED</code> <a class="header-anchor" href="#err_stream_already_finished" aria-label="Permalink to “ERR_STREAM_ALREADY_FINISHED”">​</a></h3><p>调用了一个流方法，该方法无法完成，因为流已完成。</p><h3 id="err_stream_cannot_pipe" tabindex="-1"><code>ERR_STREAM_CANNOT_PIPE</code> <a class="header-anchor" href="#err_stream_cannot_pipe" aria-label="Permalink to “ERR_STREAM_CANNOT_PIPE”">​</a></h3><p>尝试在 <a href="/zh/nodejs/api/stream#class-streamwritable"><code>Writable</code></a> 流上调用 <a href="/zh/nodejs/api/stream#readablepipedestination-options"><code>stream.pipe()</code></a>。</p><h3 id="err_stream_destroyed" tabindex="-1"><code>ERR_STREAM_DESTROYED</code> <a class="header-anchor" href="#err_stream_destroyed" aria-label="Permalink to “ERR_STREAM_DESTROYED”">​</a></h3><p>调用了一个流方法，该方法无法完成，因为流已使用 <code>stream.destroy()</code> 销毁。</p><h3 id="err_stream_null_values" tabindex="-1"><code>ERR_STREAM_NULL_VALUES</code> <a class="header-anchor" href="#err_stream_null_values" aria-label="Permalink to “ERR_STREAM_NULL_VALUES”">​</a></h3><p>尝试使用 <code>null</code> 块调用 <a href="/zh/nodejs/api/stream#writablewritechunk-encoding-callback"><code>stream.write()</code></a>。</p><h3 id="err_stream_premature_close" tabindex="-1"><code>ERR_STREAM_PREMATURE_CLOSE</code> <a class="header-anchor" href="#err_stream_premature_close" aria-label="Permalink to “ERR_STREAM_PREMATURE_CLOSE”">​</a></h3><p>当流或管道非正常结束且没有明确的错误时，由 <code>stream.finished()</code> 和 <code>stream.pipeline()</code> 返回的错误。</p><h3 id="err_stream_push_after_eof" tabindex="-1"><code>ERR_STREAM_PUSH_AFTER_EOF</code> <a class="header-anchor" href="#err_stream_push_after_eof" aria-label="Permalink to “ERR_STREAM_PUSH_AFTER_EOF”">​</a></h3><p>在将 <code>null</code> (EOF) 推送到流后，尝试调用 <a href="/zh/nodejs/api/stream#readablepushchunk-encoding"><code>stream.push()</code></a>。</p><h3 id="err_stream_unable_to_pipe" tabindex="-1"><code>ERR_STREAM_UNABLE_TO_PIPE</code> <a class="header-anchor" href="#err_stream_unable_to_pipe" aria-label="Permalink to “ERR_STREAM_UNABLE_TO_PIPE”">​</a></h3><p>尝试在管道中管道传输到已关闭或已销毁的流。</p><h3 id="err_stream_unshift_after_end_event" tabindex="-1"><code>ERR_STREAM_UNSHIFT_AFTER_END_EVENT</code> <a class="header-anchor" href="#err_stream_unshift_after_end_event" aria-label="Permalink to “ERR_STREAM_UNSHIFT_AFTER_END_EVENT”">​</a></h3><p>尝试在发出 <code>&#39;end&#39;</code> 事件后调用 <a href="/zh/nodejs/api/stream#readableunshiftchunk-encoding"><code>stream.unshift()</code></a>。</p><h3 id="err_stream_wrap" tabindex="-1"><code>ERR_STREAM_WRAP</code> <a class="header-anchor" href="#err_stream_wrap" aria-label="Permalink to “ERR_STREAM_WRAP”">​</a></h3><p>如果 Socket 上设置了字符串解码器，或者解码器处于 <code>objectMode</code>，则阻止中止。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).Socket;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="err_stream_write_after_end" tabindex="-1"><code>ERR_STREAM_WRITE_AFTER_END</code> <a class="header-anchor" href="#err_stream_write_after_end" aria-label="Permalink to “ERR_STREAM_WRITE_AFTER_END”">​</a></h3><p>在调用 <code>stream.end()</code> 之后，尝试调用 <a href="/zh/nodejs/api/stream#writablewritechunk-encoding-callback"><code>stream.write()</code></a>。</p><h3 id="err_string_too_long" tabindex="-1"><code>ERR_STRING_TOO_LONG</code> <a class="header-anchor" href="#err_string_too_long" aria-label="Permalink to “ERR_STRING_TOO_LONG”">​</a></h3><p>尝试创建一个长度超过允许最大值的字符串。</p><h3 id="err_synthetic" tabindex="-1"><code>ERR_SYNTHETIC</code> <a class="header-anchor" href="#err_synthetic" aria-label="Permalink to “ERR_SYNTHETIC”">​</a></h3><p>一个用于捕获诊断报告调用堆栈的人工错误对象。</p><h3 id="err_system_error" tabindex="-1"><code>ERR_SYSTEM_ERROR</code> <a class="header-anchor" href="#err_system_error" aria-label="Permalink to “ERR_SYSTEM_ERROR”">​</a></h3><p>在 Node.js 进程中发生了一个未指定或不具体的系统错误。该错误对象将具有一个 <code>err.info</code> 对象属性，其中包含其他详细信息。</p><h3 id="err_tap_lexer_error" tabindex="-1"><code>ERR_TAP_LEXER_ERROR</code> <a class="header-anchor" href="#err_tap_lexer_error" aria-label="Permalink to “ERR_TAP_LEXER_ERROR”">​</a></h3><p>一个表示词法分析器状态失败的错误。</p><h3 id="err_tap_parser_error" tabindex="-1"><code>ERR_TAP_PARSER_ERROR</code> <a class="header-anchor" href="#err_tap_parser_error" aria-label="Permalink to “ERR_TAP_PARSER_ERROR”">​</a></h3><p>一个表示解析器状态失败的错误。有关导致错误的令牌的更多信息，可通过 <code>cause</code> 属性获得。</p><h3 id="err_tap_validation_error" tabindex="-1"><code>ERR_TAP_VALIDATION_ERROR</code> <a class="header-anchor" href="#err_tap_validation_error" aria-label="Permalink to “ERR_TAP_VALIDATION_ERROR”">​</a></h3><p>此错误表示 TAP 验证失败。</p><h3 id="err_test_failure" tabindex="-1"><code>ERR_TEST_FAILURE</code> <a class="header-anchor" href="#err_test_failure" aria-label="Permalink to “ERR_TEST_FAILURE”">​</a></h3><p>此错误表示测试失败。有关失败的更多信息，可通过 <code>cause</code> 属性获得。<code>failureType</code> 属性指定测试在发生故障时正在执行的操作。</p><h3 id="err_tls_alpn_callback_invalid_result" tabindex="-1"><code>ERR_TLS_ALPN_CALLBACK_INVALID_RESULT</code> <a class="header-anchor" href="#err_tls_alpn_callback_invalid_result" aria-label="Permalink to “ERR_TLS_ALPN_CALLBACK_INVALID_RESULT”">​</a></h3><p>当 <code>ALPNCallback</code> 返回的值不在客户端提供的 ALPN 协议列表中时，会抛出此错误。</p><h3 id="err_tls_alpn_callback_with_protocols" tabindex="-1"><code>ERR_TLS_ALPN_CALLBACK_WITH_PROTOCOLS</code> <a class="header-anchor" href="#err_tls_alpn_callback_with_protocols" aria-label="Permalink to “ERR_TLS_ALPN_CALLBACK_WITH_PROTOCOLS”">​</a></h3><p>如果在创建 <code>TLSServer</code> 时，TLS 选项同时包含 <code>ALPNProtocols</code> 和 <code>ALPNCallback</code>，则会抛出此错误。这些选项是互斥的。</p><h3 id="err_tls_cert_altname_format" tabindex="-1"><code>ERR_TLS_CERT_ALTNAME_FORMAT</code> <a class="header-anchor" href="#err_tls_cert_altname_format" aria-label="Permalink to “ERR_TLS_CERT_ALTNAME_FORMAT”">​</a></h3><p>如果用户提供的 <code>subjectaltname</code> 属性违反了编码规则，则 <code>checkServerIdentity</code> 会抛出此错误。Node.js 本身生成的证书对象始终符合编码规则，因此永远不会导致此错误。</p><h3 id="err_tls_cert_altname_invalid" tabindex="-1"><code>ERR_TLS_CERT_ALTNAME_INVALID</code> <a class="header-anchor" href="#err_tls_cert_altname_invalid" aria-label="Permalink to “ERR_TLS_CERT_ALTNAME_INVALID”">​</a></h3><p>在使用 TLS 时，对等方的主机名/IP 与其证书中的任何 <code>subjectAltNames</code> 都不匹配。</p><h3 id="err_tls_dh_param_size" tabindex="-1"><code>ERR_TLS_DH_PARAM_SIZE</code> <a class="header-anchor" href="#err_tls_dh_param_size" aria-label="Permalink to “ERR_TLS_DH_PARAM_SIZE”">​</a></h3><p>在使用 TLS 时，为 Diffie-Hellman (<code>DH</code>) 密钥协商协议提供的参数太小。默认情况下，为了避免漏洞，密钥长度必须大于或等于 1024 位，即使强烈建议使用 2048 位或更大的密钥以获得更强的安全性。</p><h3 id="err_tls_handshake_timeout" tabindex="-1"><code>ERR_TLS_HANDSHAKE_TIMEOUT</code> <a class="header-anchor" href="#err_tls_handshake_timeout" aria-label="Permalink to “ERR_TLS_HANDSHAKE_TIMEOUT”">​</a></h3><p>TLS/SSL 握手超时。 在这种情况下，服务器也必须中止连接。</p><h3 id="err_tls_invalid_context" tabindex="-1"><code>ERR_TLS_INVALID_CONTEXT</code> <a class="header-anchor" href="#err_tls_invalid_context" aria-label="Permalink to “ERR_TLS_INVALID_CONTEXT”">​</a></h3><p><strong>新增于: v13.3.0</strong></p><p>上下文必须是 <code>SecureContext</code>。</p><h3 id="err_tls_invalid_protocol_method" tabindex="-1"><code>ERR_TLS_INVALID_PROTOCOL_METHOD</code> <a class="header-anchor" href="#err_tls_invalid_protocol_method" aria-label="Permalink to “ERR_TLS_INVALID_PROTOCOL_METHOD”">​</a></h3><p>指定的 <code>secureProtocol</code> 方法无效。 它要么是未知的，要么是因为不安全而被禁用。</p><h3 id="err_tls_invalid_protocol_version" tabindex="-1"><code>ERR_TLS_INVALID_PROTOCOL_VERSION</code> <a class="header-anchor" href="#err_tls_invalid_protocol_version" aria-label="Permalink to “ERR_TLS_INVALID_PROTOCOL_VERSION”">​</a></h3><p>有效的 TLS 协议版本为 <code>&#39;TLSv1&#39;</code>、<code>&#39;TLSv1.1&#39;</code> 或 <code>&#39;TLSv1.2&#39;</code>。</p><h3 id="err_tls_invalid_state" tabindex="-1"><code>ERR_TLS_INVALID_STATE</code> <a class="header-anchor" href="#err_tls_invalid_state" aria-label="Permalink to “ERR_TLS_INVALID_STATE”">​</a></h3><p><strong>新增于: v13.10.0, v12.17.0</strong></p><p>TLS 套接字必须已连接并安全地建立。 确保在继续之前发出 &#39;secure&#39; 事件。</p><h3 id="err_tls_protocol_version_conflict" tabindex="-1"><code>ERR_TLS_PROTOCOL_VERSION_CONFLICT</code> <a class="header-anchor" href="#err_tls_protocol_version_conflict" aria-label="Permalink to “ERR_TLS_PROTOCOL_VERSION_CONFLICT”">​</a></h3><p>尝试设置 TLS 协议 <code>minVersion</code> 或 <code>maxVersion</code> 与尝试显式设置 <code>secureProtocol</code> 冲突。 使用一种机制或另一种机制。</p><h3 id="err_tls_psk_set_identity_hint_failed" tabindex="-1"><code>ERR_TLS_PSK_SET_IDENTITY_HINT_FAILED</code> <a class="header-anchor" href="#err_tls_psk_set_identity_hint_failed" aria-label="Permalink to “ERR_TLS_PSK_SET_IDENTITY_HINT_FAILED”">​</a></h3><p>设置 PSK 身份提示失败。 提示可能太长。</p><h3 id="err_tls_renegotiation_disabled" tabindex="-1"><code>ERR_TLS_RENEGOTIATION_DISABLED</code> <a class="header-anchor" href="#err_tls_renegotiation_disabled" aria-label="Permalink to “ERR_TLS_RENEGOTIATION_DISABLED”">​</a></h3><p>尝试在禁用重新协商的套接字实例上重新协商 TLS。</p><h3 id="err_tls_required_server_name" tabindex="-1"><code>ERR_TLS_REQUIRED_SERVER_NAME</code> <a class="header-anchor" href="#err_tls_required_server_name" aria-label="Permalink to “ERR_TLS_REQUIRED_SERVER_NAME”">​</a></h3><p>在使用 TLS 时，调用了 <code>server.addContext()</code> 方法，但未在第一个参数中提供主机名。</p><h3 id="err_tls_session_attack" tabindex="-1"><code>ERR_TLS_SESSION_ATTACK</code> <a class="header-anchor" href="#err_tls_session_attack" aria-label="Permalink to “ERR_TLS_SESSION_ATTACK”">​</a></h3><p>检测到过多的 TLS 重新协商，这可能是拒绝服务攻击的潜在向量。</p><h3 id="err_tls_sni_from_server" tabindex="-1"><code>ERR_TLS_SNI_FROM_SERVER</code> <a class="header-anchor" href="#err_tls_sni_from_server" aria-label="Permalink to “ERR_TLS_SNI_FROM_SERVER”">​</a></h3><p>尝试从 TLS 服务器端套接字发出服务器名称指示，这仅对客户端有效。</p><h3 id="err_trace_events_category_required" tabindex="-1"><code>ERR_TRACE_EVENTS_CATEGORY_REQUIRED</code> <a class="header-anchor" href="#err_trace_events_category_required" aria-label="Permalink to “ERR_TRACE_EVENTS_CATEGORY_REQUIRED”">​</a></h3><p><code>trace_events.createTracing()</code> 方法至少需要一个跟踪事件类别。</p><h3 id="err_trace_events_unavailable" tabindex="-1"><code>ERR_TRACE_EVENTS_UNAVAILABLE</code> <a class="header-anchor" href="#err_trace_events_unavailable" aria-label="Permalink to “ERR_TRACE_EVENTS_UNAVAILABLE”">​</a></h3><p>由于 Node.js 是使用 <code>--without-v8-platform</code> 标志编译的，因此无法加载 <code>node:trace_events</code> 模块。</p><h3 id="err_transform_already_transforming" tabindex="-1"><code>ERR_TRANSFORM_ALREADY_TRANSFORMING</code> <a class="header-anchor" href="#err_transform_already_transforming" aria-label="Permalink to “ERR_TRANSFORM_ALREADY_TRANSFORMING”">​</a></h3><p><code>Transform</code> 流在仍在转换时完成。</p><h3 id="err_transform_with_length_0" tabindex="-1"><code>ERR_TRANSFORM_WITH_LENGTH_0</code> <a class="header-anchor" href="#err_transform_with_length_0" aria-label="Permalink to “ERR_TRANSFORM_WITH_LENGTH_0”">​</a></h3><p><code>Transform</code> 流在写入缓冲区中仍有数据的情况下完成。</p><h3 id="err_tty_init_failed" tabindex="-1"><code>ERR_TTY_INIT_FAILED</code> <a class="header-anchor" href="#err_tty_init_failed" aria-label="Permalink to “ERR_TTY_INIT_FAILED”">​</a></h3><p>由于系统错误，TTY 的初始化失败。</p><h3 id="err_unavailable_during_exit" tabindex="-1"><code>ERR_UNAVAILABLE_DURING_EXIT</code> <a class="header-anchor" href="#err_unavailable_during_exit" aria-label="Permalink to “ERR_UNAVAILABLE_DURING_EXIT”">​</a></h3><p>函数在 <a href="/zh/nodejs/api/process#event-exit"><code>process.on(&#39;exit&#39;)</code></a> 处理程序中被调用，但该函数不应该在 <a href="/zh/nodejs/api/process#event-exit"><code>process.on(&#39;exit&#39;)</code></a> 处理程序中被调用。</p><h3 id="err_uncaught_exception_capture_already_set" tabindex="-1"><code>ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET</code> <a class="header-anchor" href="#err_uncaught_exception_capture_already_set" aria-label="Permalink to “ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET”">​</a></h3><p><a href="/zh/nodejs/api/process#processsetuncaughtexceptioncapturecallbackfn"><code>process.setUncaughtExceptionCaptureCallback()</code></a> 被调用了两次，但没有先将回调重置为 <code>null</code>。</p><p>此错误旨在防止意外覆盖从另一个模块注册的回调。</p><h3 id="err_unescaped_characters" tabindex="-1"><code>ERR_UNESCAPED_CHARACTERS</code> <a class="header-anchor" href="#err_unescaped_characters" aria-label="Permalink to “ERR_UNESCAPED_CHARACTERS”">​</a></h3><p>收到了包含未转义字符的字符串。</p><h3 id="err_unhandled_error" tabindex="-1"><code>ERR_UNHANDLED_ERROR</code> <a class="header-anchor" href="#err_unhandled_error" aria-label="Permalink to “ERR_UNHANDLED_ERROR”">​</a></h3><p>发生了未处理的错误（例如，当 <a href="/zh/nodejs/api/events#class-eventemitter"><code>EventEmitter</code></a> 发出 <code>&#39;error&#39;</code> 事件但未注册 <code>&#39;error&#39;</code> 处理程序时）。</p><h3 id="err_unknown_builtin_module" tabindex="-1"><code>ERR_UNKNOWN_BUILTIN_MODULE</code> <a class="header-anchor" href="#err_unknown_builtin_module" aria-label="Permalink to “ERR_UNKNOWN_BUILTIN_MODULE”">​</a></h3><p>用于标识一种特定的内部 Node.js 错误，通常不应由用户代码触发。此错误的实例指向 Node.js 二进制文件本身的内部错误。</p><h3 id="err_unknown_credential" tabindex="-1"><code>ERR_UNKNOWN_CREDENTIAL</code> <a class="header-anchor" href="#err_unknown_credential" aria-label="Permalink to “ERR_UNKNOWN_CREDENTIAL”">​</a></h3><p>传递了一个不存在的 Unix 组或用户标识符。</p><h3 id="err_unknown_encoding" tabindex="-1"><code>ERR_UNKNOWN_ENCODING</code> <a class="header-anchor" href="#err_unknown_encoding" aria-label="Permalink to “ERR_UNKNOWN_ENCODING”">​</a></h3><p>传递给 API 的编码选项无效或未知。</p><h3 id="err_unknown_file_extension" tabindex="-1"><code>ERR_UNKNOWN_FILE_EXTENSION</code> <a class="header-anchor" href="#err_unknown_file_extension" aria-label="Permalink to “ERR_UNKNOWN_FILE_EXTENSION”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> - 实验性</p></div><p>尝试加载具有未知或不支持的文件扩展名的模块。</p><h3 id="err_unknown_module_format" tabindex="-1"><code>ERR_UNKNOWN_MODULE_FORMAT</code> <a class="header-anchor" href="#err_unknown_module_format" aria-label="Permalink to “ERR_UNKNOWN_MODULE_FORMAT”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> - 实验性</p></div><p>尝试加载具有未知或不支持的格式的模块。</p><h3 id="err_unknown_signal" tabindex="-1"><code>ERR_UNKNOWN_SIGNAL</code> <a class="header-anchor" href="#err_unknown_signal" aria-label="Permalink to “ERR_UNKNOWN_SIGNAL”">​</a></h3><p>传递给期望有效信号的 API（例如 <a href="/zh/nodejs/api/child_process#subprocesskillsignal"><code>subprocess.kill()</code></a>）的进程信号无效或未知。</p><h3 id="err_unsupported_dir_import" tabindex="-1"><code>ERR_UNSUPPORTED_DIR_IMPORT</code> <a class="header-anchor" href="#err_unsupported_dir_import" aria-label="Permalink to “ERR_UNSUPPORTED_DIR_IMPORT”">​</a></h3><p>不支持 <code>import</code> 目录 URL。 请<a href="/zh/nodejs/api/packages#self-referencing-a-package-using-its-name">使用其名称自引用包</a>并在 <a href="/zh/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> 文件的 <a href="/zh/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a> 字段中<a href="/zh/nodejs/api/packages#subpath-exports">定义自定义子路径</a>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不支持</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 支持</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;package-name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 支持</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="err_unsupported_esm_url_scheme" tabindex="-1"><code>ERR_UNSUPPORTED_ESM_URL_SCHEME</code> <a class="header-anchor" href="#err_unsupported_esm_url_scheme" aria-label="Permalink to “ERR_UNSUPPORTED_ESM_URL_SCHEME”">​</a></h3><p>不支持使用 <code>file</code> 和 <code>data</code> 以外的 URL 方案进行 <code>import</code>。</p><h3 id="err_unsupported_node_modules_type_stripping" tabindex="-1"><code>ERR_UNSUPPORTED_NODE_MODULES_TYPE_STRIPPING</code> <a class="header-anchor" href="#err_unsupported_node_modules_type_stripping" aria-label="Permalink to “ERR_UNSUPPORTED_NODE_MODULES_TYPE_STRIPPING”">​</a></h3><p><strong>添加于: v22.6.0</strong></p><p>不支持从属于 <code>node_modules</code> 目录的文件进行类型剥离。</p><h3 id="err_unsupported_resolve_request" tabindex="-1"><code>ERR_UNSUPPORTED_RESOLVE_REQUEST</code> <a class="header-anchor" href="#err_unsupported_resolve_request" aria-label="Permalink to “ERR_UNSUPPORTED_RESOLVE_REQUEST”">​</a></h3><p>尝试解析无效的模块引用者。 当导入或使用以下任一项调用 <code>import.meta.resolve()</code> 时，可能会发生这种情况：</p><ul><li>来自 URL 方案不是 <code>file</code> 的模块的，不是内置模块的裸标识符。</li><li>来自 URL 方案不是<a href="https://url.spec.whatwg.org/#special-scheme" target="_blank" rel="noreferrer">特殊方案</a>的模块的<a href="https://url.spec.whatwg.org/#relative-url-string" target="_blank" rel="noreferrer">相对 URL</a>。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 尝试从 \`data:\` URL 模块导入包 &#39;bare-specifier&#39;:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data:text/javascript,import &quot;bare-specifier&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.code); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ERR_UNSUPPORTED_RESOLVE_REQUEST</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="err_use_after_close" tabindex="-1"><code>ERR_USE_AFTER_CLOSE</code> <a class="header-anchor" href="#err_use_after_close" aria-label="Permalink to “ERR_USE_AFTER_CLOSE”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> - 实验性</p></div><p>尝试使用已经关闭的东西。</p><h3 id="err_valid_performance_entry_type" tabindex="-1"><code>ERR_VALID_PERFORMANCE_ENTRY_TYPE</code> <a class="header-anchor" href="#err_valid_performance_entry_type" aria-label="Permalink to “ERR_VALID_PERFORMANCE_ENTRY_TYPE”">​</a></h3><p>当使用性能计时 API (<code>perf_hooks</code>) 时，未找到有效的性能条目类型。</p><h3 id="err_vm_dynamic_import_callback_missing" tabindex="-1"><code>ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING</code> <a class="header-anchor" href="#err_vm_dynamic_import_callback_missing" aria-label="Permalink to “ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING”">​</a></h3><p>未指定动态导入回调。</p><h3 id="err_vm_dynamic_import_callback_missing_flag" tabindex="-1"><code>ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING_FLAG</code> <a class="header-anchor" href="#err_vm_dynamic_import_callback_missing_flag" aria-label="Permalink to “ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING_FLAG”">​</a></h3><p>在没有 <code>--experimental-vm-modules</code> 的情况下调用了动态导入回调。</p><h3 id="err_vm_module_already_linked" tabindex="-1"><code>ERR_VM_MODULE_ALREADY_LINKED</code> <a class="header-anchor" href="#err_vm_module_already_linked" aria-label="Permalink to “ERR_VM_MODULE_ALREADY_LINKED”">​</a></h3><p>由于以下原因之一，尝试链接的模块不符合链接条件：</p><ul><li>它已经被链接（<code>linkingStatus</code> 为 <code>&#39;linked&#39;</code>）</li><li>它正在被链接（<code>linkingStatus</code> 为 <code>&#39;linking&#39;</code>）</li><li>此模块的链接失败（<code>linkingStatus</code> 为 <code>&#39;errored&#39;</code>）</li></ul><h3 id="err_vm_module_cached_data_rejected" tabindex="-1"><code>ERR_VM_MODULE_CACHED_DATA_REJECTED</code> <a class="header-anchor" href="#err_vm_module_cached_data_rejected" aria-label="Permalink to “ERR_VM_MODULE_CACHED_DATA_REJECTED”">​</a></h3><p>传递给模块构造函数的 <code>cachedData</code> 选项无效。</p><h3 id="err_vm_module_cannot_create_cached_data" tabindex="-1"><code>ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA</code> <a class="header-anchor" href="#err_vm_module_cannot_create_cached_data" aria-label="Permalink to “ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA”">​</a></h3><p>无法为已经评估过的模块创建缓存数据。</p><h3 id="err_vm_module_different_context" tabindex="-1"><code>ERR_VM_MODULE_DIFFERENT_CONTEXT</code> <a class="header-anchor" href="#err_vm_module_different_context" aria-label="Permalink to “ERR_VM_MODULE_DIFFERENT_CONTEXT”">​</a></h3><p>从链接器函数返回的模块与父模块的上下文不同。链接的模块必须共享相同的上下文。</p><h3 id="err_vm_module_link_failure" tabindex="-1"><code>ERR_VM_MODULE_LINK_FAILURE</code> <a class="header-anchor" href="#err_vm_module_link_failure" aria-label="Permalink to “ERR_VM_MODULE_LINK_FAILURE”">​</a></h3><p>由于失败，模块无法链接。</p><h3 id="err_vm_module_not_module" tabindex="-1"><code>ERR_VM_MODULE_NOT_MODULE</code> <a class="header-anchor" href="#err_vm_module_not_module" aria-label="Permalink to “ERR_VM_MODULE_NOT_MODULE”">​</a></h3><p>链接 Promise 的 fulfilled 值不是 <code>vm.Module</code> 对象。</p><h3 id="err_vm_module_status" tabindex="-1"><code>ERR_VM_MODULE_STATUS</code> <a class="header-anchor" href="#err_vm_module_status" aria-label="Permalink to “ERR_VM_MODULE_STATUS”">​</a></h3><p>当前模块的状态不允许此操作。 错误的具体含义取决于具体的函数。</p><h3 id="err_wasi_already_started" tabindex="-1"><code>ERR_WASI_ALREADY_STARTED</code> <a class="header-anchor" href="#err_wasi_already_started" aria-label="Permalink to “ERR_WASI_ALREADY_STARTED”">​</a></h3><p>WASI 实例已启动。</p><h3 id="err_wasi_not_started" tabindex="-1"><code>ERR_WASI_NOT_STARTED</code> <a class="header-anchor" href="#err_wasi_not_started" aria-label="Permalink to “ERR_WASI_NOT_STARTED”">​</a></h3><p>WASI 实例尚未启动。</p><h3 id="err_webassembly_response" tabindex="-1"><code>ERR_WEBASSEMBLY_RESPONSE</code> <a class="header-anchor" href="#err_webassembly_response" aria-label="Permalink to “ERR_WEBASSEMBLY_RESPONSE”">​</a></h3><p><strong>新增于: v18.1.0</strong></p><p>传递给 <code>WebAssembly.compileStreaming</code> 或 <code>WebAssembly.instantiateStreaming</code> 的 <code>Response</code> 不是有效的 WebAssembly 响应。</p><h3 id="err_worker_init_failed" tabindex="-1"><code>ERR_WORKER_INIT_FAILED</code> <a class="header-anchor" href="#err_worker_init_failed" aria-label="Permalink to “ERR_WORKER_INIT_FAILED”">​</a></h3><p><code>Worker</code> 初始化失败。</p><h3 id="err_worker_invalid_exec_argv" tabindex="-1"><code>ERR_WORKER_INVALID_EXEC_ARGV</code> <a class="header-anchor" href="#err_worker_invalid_exec_argv" aria-label="Permalink to “ERR_WORKER_INVALID_EXEC_ARGV”">​</a></h3><p>传递给 <code>Worker</code> 构造函数的 <code>execArgv</code> 选项包含无效的标志。</p><h3 id="err_worker_messaging_errored" tabindex="-1"><code>ERR_WORKER_MESSAGING_ERRORED</code> <a class="header-anchor" href="#err_worker_messaging_errored" aria-label="Permalink to “ERR_WORKER_MESSAGING_ERRORED”">​</a></h3><p><strong>新增于: v22.5.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定性: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a>.1 - 积极开发</p></div><p>目标线程在处理通过 <a href="/zh/nodejs/api/worker_threads#workerpostmessagetothreadthreadid-value-transferlist-timeout"><code>postMessageToThread()</code></a> 发送的消息时抛出了错误。</p><h3 id="err_worker_messaging_failed" tabindex="-1"><code>ERR_WORKER_MESSAGING_FAILED</code> <a class="header-anchor" href="#err_worker_messaging_failed" aria-label="Permalink to “ERR_WORKER_MESSAGING_FAILED”">​</a></h3><p><strong>Added in: v22.5.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">Stability: 1</a>.1 - 积极开发中</p></div><p><a href="/zh/nodejs/api/worker_threads#workerpostmessagetothreadthreadid-value-transferlist-timeout"><code>postMessageToThread()</code></a> 中请求的线程无效或没有 <code>workerMessage</code> 监听器。</p><h3 id="err_worker_messaging_same_thread" tabindex="-1"><code>ERR_WORKER_MESSAGING_SAME_THREAD</code> <a class="header-anchor" href="#err_worker_messaging_same_thread" aria-label="Permalink to “ERR_WORKER_MESSAGING_SAME_THREAD”">​</a></h3><p><strong>Added in: v22.5.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">Stability: 1</a>.1 - 积极开发中</p></div><p><a href="/zh/nodejs/api/worker_threads#workerpostmessagetothreadthreadid-value-transferlist-timeout"><code>postMessageToThread()</code></a> 中请求的线程 ID 是当前线程 ID。</p><h3 id="err_worker_messaging_timeout" tabindex="-1"><code>ERR_WORKER_MESSAGING_TIMEOUT</code> <a class="header-anchor" href="#err_worker_messaging_timeout" aria-label="Permalink to “ERR_WORKER_MESSAGING_TIMEOUT”">​</a></h3><p><strong>Added in: v22.5.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">Stability: 1</a>.1 - 积极开发中</p></div><p>通过 <a href="/zh/nodejs/api/worker_threads#workerpostmessagetothreadthreadid-value-transferlist-timeout"><code>postMessageToThread()</code></a> 发送消息超时。</p><h3 id="err_worker_not_running" tabindex="-1"><code>ERR_WORKER_NOT_RUNNING</code> <a class="header-anchor" href="#err_worker_not_running" aria-label="Permalink to “ERR_WORKER_NOT_RUNNING”">​</a></h3><p>由于 <code>Worker</code> 实例当前未运行，操作失败。</p><h3 id="err_worker_out_of_memory" tabindex="-1"><code>ERR_WORKER_OUT_OF_MEMORY</code> <a class="header-anchor" href="#err_worker_out_of_memory" aria-label="Permalink to “ERR_WORKER_OUT_OF_MEMORY”">​</a></h3><p><code>Worker</code> 实例因达到其内存限制而终止。</p><h3 id="err_worker_path" tabindex="-1"><code>ERR_WORKER_PATH</code> <a class="header-anchor" href="#err_worker_path" aria-label="Permalink to “ERR_WORKER_PATH”">​</a></h3><p>worker 的主脚本的路径既不是绝对路径，也不是以 <code>./</code> 或 <code>../</code> 开头的相对路径。</p><h3 id="err_worker_unserializable_error" tabindex="-1"><code>ERR_WORKER_UNSERIALIZABLE_ERROR</code> <a class="header-anchor" href="#err_worker_unserializable_error" aria-label="Permalink to “ERR_WORKER_UNSERIALIZABLE_ERROR”">​</a></h3><p>从 worker 线程序列化未捕获异常的所有尝试均失败。</p><h3 id="err_worker_unsupported_operation" tabindex="-1"><code>ERR_WORKER_UNSUPPORTED_OPERATION</code> <a class="header-anchor" href="#err_worker_unsupported_operation" aria-label="Permalink to “ERR_WORKER_UNSUPPORTED_OPERATION”">​</a></h3><p>worker 线程不支持所请求的功能。</p><h3 id="err_zlib_initialization_failed" tabindex="-1"><code>ERR_ZLIB_INITIALIZATION_FAILED</code> <a class="header-anchor" href="#err_zlib_initialization_failed" aria-label="Permalink to “ERR_ZLIB_INITIALIZATION_FAILED”">​</a></h3><p>由于配置不正确，<a href="/zh/nodejs/api/zlib"><code>zlib</code></a> 对象的创建失败。</p><h3 id="hpe_chunk_extensions_overflow" tabindex="-1"><code>HPE_CHUNK_EXTENSIONS_OVERFLOW</code> <a class="header-anchor" href="#hpe_chunk_extensions_overflow" aria-label="Permalink to “HPE_CHUNK_EXTENSIONS_OVERFLOW”">​</a></h3><p><strong>Added in: v21.6.2, v20.11.1, v18.19.1</strong></p><p>接收到的块扩展数据过多。 为了防止恶意或配置错误的客户端，如果接收到的数据超过 16 KiB，则会发出带有此代码的 <code>Error</code>。</p><h3 id="hpe_header_overflow" tabindex="-1"><code>HPE_HEADER_OVERFLOW</code> <a class="header-anchor" href="#hpe_header_overflow" aria-label="Permalink to “HPE_HEADER_OVERFLOW”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v11.4.0, v10.15.0</td><td><code>http_parser</code> 中的最大头部大小设置为 8 KiB。</td></tr></tbody></table></div><p>收到了过多的 HTTP 头部数据。 为了防止恶意或配置错误的客户端，如果接收到的 HTTP 头部数据超过 <code>maxHeaderSize</code>，则 HTTP 解析将中止，且不会创建请求或响应对象，并会发出带有此代码的 <code>Error</code>。</p><h3 id="hpe_unexpected_content_length" tabindex="-1"><code>HPE_UNEXPECTED_CONTENT_LENGTH</code> <a class="header-anchor" href="#hpe_unexpected_content_length" aria-label="Permalink to “HPE_UNEXPECTED_CONTENT_LENGTH”">​</a></h3><p>服务器同时发送了 <code>Content-Length</code> 头部和 <code>Transfer-Encoding: chunked</code>。</p><p><code>Transfer-Encoding: chunked</code> 允许服务器为动态生成的内容维护 HTTP 持久连接。 在这种情况下，无法使用 <code>Content-Length</code> HTTP 头部。</p><p>请使用 <code>Content-Length</code> 或 <code>Transfer-Encoding: chunked</code>。</p><h3 id="module_not_found" tabindex="-1"><code>MODULE_NOT_FOUND</code> <a class="header-anchor" href="#module_not_found" aria-label="Permalink to “MODULE_NOT_FOUND”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>添加了 <code>requireStack</code> 属性。</td></tr></tbody></table></div><p>在尝试 <a href="/zh/nodejs/api/modules#requireid"><code>require()</code></a> 操作或加载程序入口点时，CommonJS 模块加载器无法解析模块文件。</p><h2 id="legacy-nodejs-error-codes" tabindex="-1">遗留 Node.js 错误码 <a class="header-anchor" href="#legacy-nodejs-error-codes" aria-label="Permalink to “遗留 Node.js 错误码”">​</a></h2><div class="danger custom-block"><p class="custom-block-title">[稳定度: 0 - 已弃用]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定度: 0</a> - 已弃用。 这些错误码要么是不一致的，要么已被移除。</p></div><h3 id="err_cannot_transfer_object" tabindex="-1"><code>ERR_CANNOT_TRANSFER_OBJECT</code> <a class="header-anchor" href="#err_cannot_transfer_object" aria-label="Permalink to “ERR_CANNOT_TRANSFER_OBJECT”">​</a></h3><p><strong>添加于: v10.5.0</strong></p><p><strong>移除于: v12.5.0</strong></p><p>传递给 <code>postMessage()</code> 的值包含一个不支持传输的对象。</p><h3 id="err_cpu_usage" tabindex="-1"><code>ERR_CPU_USAGE</code> <a class="header-anchor" href="#err_cpu_usage" aria-label="Permalink to “ERR_CPU_USAGE”">​</a></h3><p><strong>移除于: v15.0.0</strong></p><p>来自 <code>process.cpuUsage</code> 的原生调用无法处理。</p><h3 id="err_crypto_hash_digest_no_utf16" tabindex="-1"><code>ERR_CRYPTO_HASH_DIGEST_NO_UTF16</code> <a class="header-anchor" href="#err_crypto_hash_digest_no_utf16" aria-label="Permalink to “ERR_CRYPTO_HASH_DIGEST_NO_UTF16”">​</a></h3><p><strong>添加于: v9.0.0</strong></p><p><strong>移除于: v12.12.0</strong></p><p>UTF-16 编码被用于 <a href="/zh/nodejs/api/crypto#hashdigestencoding"><code>hash.digest()</code></a>。 虽然 <code>hash.digest()</code> 方法确实允许传入一个 <code>encoding</code> 参数，导致该方法返回一个字符串而不是 <code>Buffer</code>，但不支持 UTF-16 编码（例如 <code>ucs</code> 或 <code>utf16le</code>）。</p><h3 id="err_crypto_scrypt_invalid_parameter" tabindex="-1"><code>ERR_CRYPTO_SCRYPT_INVALID_PARAMETER</code> <a class="header-anchor" href="#err_crypto_scrypt_invalid_parameter" aria-label="Permalink to “ERR_CRYPTO_SCRYPT_INVALID_PARAMETER”">​</a></h3><p><strong>已移除：v23.0.0</strong></p><p>传递给 <a href="/zh/nodejs/api/crypto#cryptoscryptpassword-salt-keylen-options-callback"><code>crypto.scrypt()</code></a> 或 <a href="/zh/nodejs/api/crypto#cryptoscryptsyncpassword-salt-keylen-options"><code>crypto.scryptSync()</code></a> 的选项组合不兼容。 新版本的 Node.js 使用错误代码 <a href="/zh/nodejs/api/errors#err-incompatible-option-pair"><code>ERR_INCOMPATIBLE_OPTION_PAIR</code></a> 代替，这与其他 API 一致。</p><h3 id="err_fs_invalid_symlink_type" tabindex="-1"><code>ERR_FS_INVALID_SYMLINK_TYPE</code> <a class="header-anchor" href="#err_fs_invalid_symlink_type" aria-label="Permalink to “ERR_FS_INVALID_SYMLINK_TYPE”">​</a></h3><p><strong>已移除：v23.0.0</strong></p><p>传递给 <a href="/zh/nodejs/api/fs#fssymlinktarget-path-type-callback"><code>fs.symlink()</code></a> 或 <a href="/zh/nodejs/api/fs#fssymlinksynctarget-path-type"><code>fs.symlinkSync()</code></a> 方法的符号链接类型无效。</p><h3 id="err_http2_frame_error" tabindex="-1"><code>ERR_HTTP2_FRAME_ERROR</code> <a class="header-anchor" href="#err_http2_frame_error" aria-label="Permalink to “ERR_HTTP2_FRAME_ERROR”">​</a></h3><p><strong>已添加：v9.0.0</strong></p><p><strong>已移除：v10.0.0</strong></p><p>当在 HTTP/2 会话上发送单个帧时发生故障时使用。</p><h3 id="err_http2_headers_object" tabindex="-1"><code>ERR_HTTP2_HEADERS_OBJECT</code> <a class="header-anchor" href="#err_http2_headers_object" aria-label="Permalink to “ERR_HTTP2_HEADERS_OBJECT”">​</a></h3><p><strong>已添加：v9.0.0</strong></p><p><strong>已移除：v10.0.0</strong></p><p>当需要 HTTP/2 标头对象时使用。</p><h3 id="err_http2_header_required" tabindex="-1"><code>ERR_HTTP2_HEADER_REQUIRED</code> <a class="header-anchor" href="#err_http2_header_required" aria-label="Permalink to “ERR_HTTP2_HEADER_REQUIRED”">​</a></h3><p><strong>已添加：v9.0.0</strong></p><p><strong>已移除：v10.0.0</strong></p><p>当 HTTP/2 消息中缺少必需的标头时使用。</p><h3 id="err_http2_info_headers_after_respond" tabindex="-1"><code>ERR_HTTP2_INFO_HEADERS_AFTER_RESPOND</code> <a class="header-anchor" href="#err_http2_info_headers_after_respond" aria-label="Permalink to “ERR_HTTP2_INFO_HEADERS_AFTER_RESPOND”">​</a></h3><p><strong>已添加：v9.0.0</strong></p><p><strong>已移除：v10.0.0</strong></p><p>HTTP/2 信息性标头必须仅在调用 <code>Http2Stream.prototype.respond()</code> 方法<em>之前</em>发送。</p><h3 id="err_http2_stream_closed" tabindex="-1"><code>ERR_HTTP2_STREAM_CLOSED</code> <a class="header-anchor" href="#err_http2_stream_closed" aria-label="Permalink to “ERR_HTTP2_STREAM_CLOSED”">​</a></h3><p><strong>已添加：v9.0.0</strong></p><p><strong>已移除：v10.0.0</strong></p><p>当已对已关闭的 HTTP/2 流执行操作时使用。</p><h3 id="err_http_invalid_char" tabindex="-1"><code>ERR_HTTP_INVALID_CHAR</code> <a class="header-anchor" href="#err_http_invalid_char" aria-label="Permalink to “ERR_HTTP_INVALID_CHAR”">​</a></h3><p><strong>已添加：v9.0.0</strong></p><p><strong>已移除：v10.0.0</strong></p><p>当在 HTTP 响应状态消息（原因短语）中找到无效字符时使用。</p><h3 id="err_import_assertion_type_failed" tabindex="-1"><code>ERR_IMPORT_ASSERTION_TYPE_FAILED</code> <a class="header-anchor" href="#err_import_assertion_type_failed" aria-label="Permalink to “ERR_IMPORT_ASSERTION_TYPE_FAILED”">​</a></h3><p><strong>已添加：v17.1.0, v16.14.0</strong></p><p><strong>已移除：v21.1.0</strong></p><p>导入断言失败，阻止导入指定的模块。</p><h3 id="err_import_assertion_type_missing" tabindex="-1"><code>ERR_IMPORT_ASSERTION_TYPE_MISSING</code> <a class="header-anchor" href="#err_import_assertion_type_missing" aria-label="Permalink to “ERR_IMPORT_ASSERTION_TYPE_MISSING”">​</a></h3><p><strong>已添加：v17.1.0, v16.14.0</strong></p><p><strong>已移除：v21.1.0</strong></p><p>缺少导入断言，阻止导入指定的模块。</p><h3 id="err_import_assertion_type_unsupported" tabindex="-1"><code>ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED</code> <a class="header-anchor" href="#err_import_assertion_type_unsupported" aria-label="Permalink to “ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED”">​</a></h3><p><strong>加入于: v17.1.0, v16.14.0</strong></p><p><strong>移除于: v21.1.0</strong></p><p>此 Node.js 版本不支持导入断言。</p><h3 id="err_index_out_of_range" tabindex="-1"><code>ERR_INDEX_OUT_OF_RANGE</code> <a class="header-anchor" href="#err_index_out_of_range" aria-label="Permalink to “ERR_INDEX_OUT_OF_RANGE”">​</a></h3><p><strong>加入于: v10.0.0</strong></p><p><strong>移除于: v11.0.0</strong></p><p>给定的索引超出了可接受的范围（例如，负偏移）。</p><h3 id="err_invalid_opt_value" tabindex="-1"><code>ERR_INVALID_OPT_VALUE</code> <a class="header-anchor" href="#err_invalid_opt_value" aria-label="Permalink to “ERR_INVALID_OPT_VALUE”">​</a></h3><p><strong>加入于: v8.0.0</strong></p><p><strong>移除于: v15.0.0</strong></p><p>在 options 对象中传递了无效或意外的值。</p><h3 id="err_invalid_opt_value_encoding" tabindex="-1"><code>ERR_INVALID_OPT_VALUE_ENCODING</code> <a class="header-anchor" href="#err_invalid_opt_value_encoding" aria-label="Permalink to “ERR_INVALID_OPT_VALUE_ENCODING”">​</a></h3><p><strong>加入于: v9.0.0</strong></p><p><strong>移除于: v15.0.0</strong></p><p>传递了无效或未知的文件编码。</p><h3 id="err_invalid_performance_mark" tabindex="-1"><code>ERR_INVALID_PERFORMANCE_MARK</code> <a class="header-anchor" href="#err_invalid_performance_mark" aria-label="Permalink to “ERR_INVALID_PERFORMANCE_MARK”">​</a></h3><p><strong>加入于: v8.5.0</strong></p><p><strong>移除于: v16.7.0</strong></p><p>使用 Performance Timing API (<code>perf_hooks</code>) 时，性能标记无效。</p><h3 id="err_invalid_transfer_object" tabindex="-1"><code>ERR_INVALID_TRANSFER_OBJECT</code> <a class="header-anchor" href="#err_invalid_transfer_object" aria-label="Permalink to “ERR_INVALID_TRANSFER_OBJECT”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v21.0.0</td><td>抛出 <code>DOMException</code> 代替。</td></tr><tr><td>v21.0.0</td><td>移除于: v21.0.0</td></tr></tbody></table></div><p>传递给 <code>postMessage()</code> 的传输对象无效。</p><h3 id="err_manifest_assert_integrity" tabindex="-1"><code>ERR_MANIFEST_ASSERT_INTEGRITY</code> <a class="header-anchor" href="#err_manifest_assert_integrity" aria-label="Permalink to “ERR_MANIFEST_ASSERT_INTEGRITY”">​</a></h3><p><strong>移除于: v22.2.0</strong></p><p>尝试加载资源，但该资源与策略清单定义的完整性不匹配。 有关更多信息，请参见策略清单的文档。</p><h3 id="err_manifest_dependency_missing" tabindex="-1"><code>ERR_MANIFEST_DEPENDENCY_MISSING</code> <a class="header-anchor" href="#err_manifest_dependency_missing" aria-label="Permalink to “ERR_MANIFEST_DEPENDENCY_MISSING”">​</a></h3><p><strong>移除于: v22.2.0</strong></p><p>尝试加载资源，但该资源未被列为尝试加载它的位置的依赖项。 有关更多信息，请参见策略清单的文档。</p><h3 id="err_manifest_integrity_mismatch" tabindex="-1"><code>ERR_MANIFEST_INTEGRITY_MISMATCH</code> <a class="header-anchor" href="#err_manifest_integrity_mismatch" aria-label="Permalink to “ERR_MANIFEST_INTEGRITY_MISMATCH”">​</a></h3><p><strong>移除于: v22.2.0</strong></p><p>尝试加载策略清单，但该清单对于不匹配的资源具有多个条目。 更新清单条目以匹配，从而解决此错误。 有关更多信息，请参见策略清单的文档。</p><h3 id="err_manifest_invalid_resource_field" tabindex="-1"><code>ERR_MANIFEST_INVALID_RESOURCE_FIELD</code> <a class="header-anchor" href="#err_manifest_invalid_resource_field" aria-label="Permalink to “ERR_MANIFEST_INVALID_RESOURCE_FIELD”">​</a></h3><p><strong>移除于: v22.2.0</strong></p><p>策略清单资源对于其某个字段具有无效值。 更新清单条目以匹配，从而解决此错误。 有关更多信息，请参见策略清单的文档。</p><h3 id="err_manifest_invalid_specifier" tabindex="-1"><code>ERR_MANIFEST_INVALID_SPECIFIER</code> <a class="header-anchor" href="#err_manifest_invalid_specifier" aria-label="Permalink to “ERR_MANIFEST_INVALID_SPECIFIER”">​</a></h3><p><strong>已移除：v22.2.0</strong></p><p>一个策略清单资源对其依赖映射具有无效值。更新清单条目以匹配即可解决此错误。有关更多信息，请参阅策略清单的文档。</p><h3 id="err_manifest_parse_policy" tabindex="-1"><code>ERR_MANIFEST_PARSE_POLICY</code> <a class="header-anchor" href="#err_manifest_parse_policy" aria-label="Permalink to “ERR_MANIFEST_PARSE_POLICY”">​</a></h3><p><strong>已移除：v22.2.0</strong></p><p>尝试加载策略清单，但无法解析该清单。有关更多信息，请参阅策略清单的文档。</p><h3 id="err_manifest_tdz" tabindex="-1"><code>ERR_MANIFEST_TDZ</code> <a class="header-anchor" href="#err_manifest_tdz" aria-label="Permalink to “ERR_MANIFEST_TDZ”">​</a></h3><p><strong>已移除：v22.2.0</strong></p><p>尝试从策略清单中读取，但尚未进行清单初始化。这可能是 Node.js 中的一个错误。</p><h3 id="err_manifest_unknown_onerror" tabindex="-1"><code>ERR_MANIFEST_UNKNOWN_ONERROR</code> <a class="header-anchor" href="#err_manifest_unknown_onerror" aria-label="Permalink to “ERR_MANIFEST_UNKNOWN_ONERROR”">​</a></h3><p><strong>已移除：v22.2.0</strong></p><p>加载了策略清单，但其“onerror”行为的值未知。有关更多信息，请参阅策略清单的文档。</p><h3 id="err_missing_message_port_in_transfer_list" tabindex="-1"><code>ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST</code> <a class="header-anchor" href="#err_missing_message_port_in_transfer_list" aria-label="Permalink to “ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST”">​</a></h3><p><strong>已移除：v15.0.0</strong></p><p>此错误代码已在 Node.js v15.0.0 中被 <a href="/zh/nodejs/api/errors#err-missing-transferable-in-transfer-list"><code>ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST</code></a> 替换，因为它不再准确，因为现在也存在其他类型的可传输对象。</p><h3 id="err_missing_transferable_in_transfer_list" tabindex="-1"><code>ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST</code> <a class="header-anchor" href="#err_missing_transferable_in_transfer_list" aria-label="Permalink to “ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v21.0.0</td><td>抛出一个 <code>DOMException</code> 代替。</td></tr><tr><td>v21.0.0</td><td>已移除：v21.0.0</td></tr><tr><td>v15.0.0</td><td>添加于：v15.0.0</td></tr></tbody></table></div><p>需要在 <code>transferList</code> 参数中显式列出的对象位于传递给 <a href="/zh/nodejs/api/worker_threads#portpostmessagevalue-transferlist"><code>postMessage()</code></a> 调用的对象中，但未在该调用的 <code>transferList</code> 中提供。通常，这是一个 <code>MessagePort</code>。</p><p>在 v15.0.0 之前的 Node.js 版本中，此处使用的错误代码是 <a href="/zh/nodejs/api/errors#err-missing-message-port-in-transfer-list"><code>ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST</code></a>。但是，可传输对象类型的集合已扩展到涵盖比 <code>MessagePort</code> 更多的类型。</p><h3 id="err_napi_cons_prototype_object" tabindex="-1"><code>ERR_NAPI_CONS_PROTOTYPE_OBJECT</code> <a class="header-anchor" href="#err_napi_cons_prototype_object" aria-label="Permalink to “ERR_NAPI_CONS_PROTOTYPE_OBJECT”">​</a></h3><p><strong>添加于：v9.0.0</strong></p><p><strong>已移除：v10.0.0</strong></p><p>当 <code>Constructor.prototype</code> 不是对象时，由 <code>Node-API</code> 使用。</p><h3 id="err_napi_tsfn_start_idle_loop" tabindex="-1"><code>ERR_NAPI_TSFN_START_IDLE_LOOP</code> <a class="header-anchor" href="#err_napi_tsfn_start_idle_loop" aria-label="Permalink to “ERR_NAPI_TSFN_START_IDLE_LOOP”">​</a></h3><p><strong>添加于: v10.6.0, v8.16.0</strong></p><p><strong>移除于: v14.2.0, v12.17.0</strong></p><p>在主线程上，值会从与线程安全函数相关联的队列中在一个空闲循环中移除。此错误表示在尝试启动循环时发生了错误。</p><h3 id="err_napi_tsfn_stop_idle_loop" tabindex="-1"><code>ERR_NAPI_TSFN_STOP_IDLE_LOOP</code> <a class="header-anchor" href="#err_napi_tsfn_stop_idle_loop" aria-label="Permalink to “ERR_NAPI_TSFN_STOP_IDLE_LOOP”">​</a></h3><p><strong>添加于: v10.6.0, v8.16.0</strong></p><p><strong>移除于: v14.2.0, v12.17.0</strong></p><p>一旦队列中没有剩余项目，空闲循环必须暂停。此错误表示空闲循环未能停止。</p><h3 id="err_no_longer_supported" tabindex="-1"><code>ERR_NO_LONGER_SUPPORTED</code> <a class="header-anchor" href="#err_no_longer_supported" aria-label="Permalink to “ERR_NO_LONGER_SUPPORTED”">​</a></h3><p>以不受支持的方式调用了 Node.js API，例如 <code>Buffer.write(string, encoding, offset[, length])</code>。</p><h3 id="err_outofmemory" tabindex="-1"><code>ERR_OUTOFMEMORY</code> <a class="header-anchor" href="#err_outofmemory" aria-label="Permalink to “ERR_OUTOFMEMORY”">​</a></h3><p><strong>添加于: v9.0.0</strong></p><p><strong>移除于: v10.0.0</strong></p><p>通常用于标识操作导致内存不足的情况。</p><h3 id="err_parse_history_data" tabindex="-1"><code>ERR_PARSE_HISTORY_DATA</code> <a class="header-anchor" href="#err_parse_history_data" aria-label="Permalink to “ERR_PARSE_HISTORY_DATA”">​</a></h3><p><strong>添加于: v9.0.0</strong></p><p><strong>移除于: v10.0.0</strong></p><p><code>node:repl</code> 模块无法解析来自 REPL 历史记录文件的数据。</p><h3 id="err_socket_cannot_send" tabindex="-1"><code>ERR_SOCKET_CANNOT_SEND</code> <a class="header-anchor" href="#err_socket_cannot_send" aria-label="Permalink to “ERR_SOCKET_CANNOT_SEND”">​</a></h3><p><strong>添加于: v9.0.0</strong></p><p><strong>移除于: v14.0.0</strong></p><p>无法在套接字上发送数据。</p><h3 id="err_stderr_close" tabindex="-1"><code>ERR_STDERR_CLOSE</code> <a class="header-anchor" href="#err_stderr_close" aria-label="Permalink to “ERR_STDERR_CLOSE”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.12.0</td><td><code>process.stderr.end()</code> 现在仅关闭流的一侧，而不关闭底层资源，从而使此错误过时，而不是发出错误。</td></tr><tr><td>v10.12.0</td><td>移除于: v10.12.0</td></tr></tbody></table></div><p>尝试关闭 <code>process.stderr</code> 流。 根据设计，Node.js 不允许用户代码关闭 <code>stdout</code> 或 <code>stderr</code> 流。</p><h3 id="err_stdout_close" tabindex="-1"><code>ERR_STDOUT_CLOSE</code> <a class="header-anchor" href="#err_stdout_close" aria-label="Permalink to “ERR_STDOUT_CLOSE”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.12.0</td><td><code>process.stderr.end()</code> 现在仅关闭流的一侧，而不关闭底层资源，从而使此错误过时，而不是发出错误。</td></tr><tr><td>v10.12.0</td><td>移除于: v10.12.0</td></tr></tbody></table></div><p>尝试关闭 <code>process.stdout</code> 流。 根据设计，Node.js 不允许用户代码关闭 <code>stdout</code> 或 <code>stderr</code> 流。</p><h3 id="err_stream_read_not_implemented" tabindex="-1"><code>ERR_STREAM_READ_NOT_IMPLEMENTED</code> <a class="header-anchor" href="#err_stream_read_not_implemented" aria-label="Permalink to “ERR_STREAM_READ_NOT_IMPLEMENTED”">​</a></h3><p><strong>添加于: v9.0.0</strong></p><p><strong>移除于: v10.0.0</strong></p><p>当尝试使用未实现 <a href="/zh/nodejs/api/stream#readable-readsize"><code>readable._read()</code></a> 的可读流时使用。</p><h3 id="err_tls_renegotiation_failed" tabindex="-1"><code>ERR_TLS_RENEGOTIATION_FAILED</code> <a class="header-anchor" href="#err_tls_renegotiation_failed" aria-label="Permalink to “ERR_TLS_RENEGOTIATION_FAILED”">​</a></h3><p><strong>Added in: v9.0.0</strong></p><p><strong>Removed in: v10.0.0</strong></p><p>当 TLS 重新协商请求以非特定方式失败时使用。</p><h3 id="err_transferring_externalized_sharedarraybuffer" tabindex="-1"><code>ERR_TRANSFERRING_EXTERNALIZED_SHAREDARRAYBUFFER</code> <a class="header-anchor" href="#err_transferring_externalized_sharedarraybuffer" aria-label="Permalink to “ERR_TRANSFERRING_EXTERNALIZED_SHAREDARRAYBUFFER”">​</a></h3><p><strong>Added in: v10.5.0</strong></p><p><strong>Removed in: v14.0.0</strong></p><p>在序列化期间遇到一个内存不由 JavaScript 引擎或 Node.js 管理的 <code>SharedArrayBuffer</code>。 这样的 <code>SharedArrayBuffer</code> 无法被序列化。</p><p>这只会发生在原生插件以“外部化”模式创建 <code>SharedArrayBuffer</code>，或将现有的 <code>SharedArrayBuffer</code> 放入外部化模式时。</p><h3 id="err_unknown_stdin_type" tabindex="-1"><code>ERR_UNKNOWN_STDIN_TYPE</code> <a class="header-anchor" href="#err_unknown_stdin_type" aria-label="Permalink to “ERR_UNKNOWN_STDIN_TYPE”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>Removed in: v11.7.0</strong></p><p>尝试使用未知的 <code>stdin</code> 文件类型启动 Node.js 进程。 此错误通常表明 Node.js 本身存在错误，尽管用户代码也可能触发它。</p><h3 id="err_unknown_stream_type" tabindex="-1"><code>ERR_UNKNOWN_STREAM_TYPE</code> <a class="header-anchor" href="#err_unknown_stream_type" aria-label="Permalink to “ERR_UNKNOWN_STREAM_TYPE”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p><strong>Removed in: v11.7.0</strong></p><p>尝试使用未知的 <code>stdout</code> 或 <code>stderr</code> 文件类型启动 Node.js 进程。 此错误通常表明 Node.js 本身存在错误，尽管用户代码也可能触发它。</p><h3 id="err_v8breakiterator" tabindex="-1"><code>ERR_V8BREAKITERATOR</code> <a class="header-anchor" href="#err_v8breakiterator" aria-label="Permalink to “ERR_V8BREAKITERATOR”">​</a></h3><p>使用了 V8 <code>BreakIterator</code> API，但未安装完整的 ICU 数据集。</p><h3 id="err_value_out_of_range" tabindex="-1"><code>ERR_VALUE_OUT_OF_RANGE</code> <a class="header-anchor" href="#err_value_out_of_range" aria-label="Permalink to “ERR_VALUE_OUT_OF_RANGE”">​</a></h3><p><strong>Added in: v9.0.0</strong></p><p><strong>Removed in: v10.0.0</strong></p><p>当给定的值超出接受范围时使用。</p><h3 id="err_vm_module_linking_errored" tabindex="-1"><code>ERR_VM_MODULE_LINKING_ERRORED</code> <a class="header-anchor" href="#err_vm_module_linking_errored" aria-label="Permalink to “ERR_VM_MODULE_LINKING_ERRORED”">​</a></h3><p><strong>Added in: v10.0.0</strong></p><p><strong>Removed in: v18.1.0, v16.17.0</strong></p><p>链接器函数返回一个链接失败的模块。</p><h3 id="err_vm_module_not_linked" tabindex="-1"><code>ERR_VM_MODULE_NOT_LINKED</code> <a class="header-anchor" href="#err_vm_module_not_linked" aria-label="Permalink to “ERR_VM_MODULE_NOT_LINKED”">​</a></h3><p>模块必须在实例化之前成功链接。</p><h3 id="err_worker_unsupported_extension" tabindex="-1"><code>ERR_WORKER_UNSUPPORTED_EXTENSION</code> <a class="header-anchor" href="#err_worker_unsupported_extension" aria-label="Permalink to “ERR_WORKER_UNSUPPORTED_EXTENSION”">​</a></h3><p><strong>Added in: v11.0.0</strong></p><p><strong>Removed in: v16.9.0</strong></p><p>用于 Worker 主脚本的路径名具有未知的文件扩展名。</p><h3 id="err_zlib_binding_closed" tabindex="-1"><code>ERR_ZLIB_BINDING_CLOSED</code> <a class="header-anchor" href="#err_zlib_binding_closed" aria-label="Permalink to “ERR_ZLIB_BINDING_CLOSED”">​</a></h3><p><strong>Added in: v9.0.0</strong></p><p><strong>Removed in: v10.0.0</strong></p><p>当尝试在使用 <code>zlib</code> 对象之后使用它时，该对象已被关闭。</p><h2 id="openssl-error-codes" tabindex="-1">OpenSSL 错误代码 <a class="header-anchor" href="#openssl-error-codes" aria-label="Permalink to “OpenSSL 错误代码”">​</a></h2><h3 id="time-validity-errors" tabindex="-1">时间有效性错误 <a class="header-anchor" href="#time-validity-errors" aria-label="Permalink to “时间有效性错误”">​</a></h3><h4 id="cert_not_yet_valid" tabindex="-1"><code>CERT_NOT_YET_VALID</code> <a class="header-anchor" href="#cert_not_yet_valid" aria-label="Permalink to “CERT_NOT_YET_VALID”">​</a></h4><p>证书尚未生效：notBefore 日期晚于当前时间。</p><h4 id="cert_has_expired" tabindex="-1"><code>CERT_HAS_EXPIRED</code> <a class="header-anchor" href="#cert_has_expired" aria-label="Permalink to “CERT_HAS_EXPIRED”">​</a></h4><p>证书已过期：notAfter 日期早于当前时间。</p><h4 id="crl_not_yet_valid" tabindex="-1"><code>CRL_NOT_YET_VALID</code> <a class="header-anchor" href="#crl_not_yet_valid" aria-label="Permalink to “CRL_NOT_YET_VALID”">​</a></h4><p>证书吊销列表（CRL）具有将来的发布日期。</p><h4 id="crl_has_expired" tabindex="-1"><code>CRL_HAS_EXPIRED</code> <a class="header-anchor" href="#crl_has_expired" aria-label="Permalink to “CRL_HAS_EXPIRED”">​</a></h4><p>证书吊销列表（CRL）已过期。</p><h4 id="cert_revoked" tabindex="-1"><code>CERT_REVOKED</code> <a class="header-anchor" href="#cert_revoked" aria-label="Permalink to “CERT_REVOKED”">​</a></h4><p>证书已被吊销；它位于证书吊销列表（CRL）上。</p><h3 id="trust-or-chain-related-errors" tabindex="-1">信任或链相关错误 <a class="header-anchor" href="#trust-or-chain-related-errors" aria-label="Permalink to “信任或链相关错误”">​</a></h3><h4 id="unable_to_get_issuer_cert" tabindex="-1"><code>UNABLE_TO_GET_ISSUER_CERT</code> <a class="header-anchor" href="#unable_to_get_issuer_cert" aria-label="Permalink to “UNABLE_TO_GET_ISSUER_CERT”">​</a></h4><p>无法找到已查找证书的颁发者证书。 这通常意味着受信任证书的列表不完整。</p><h4 id="unable_to_get_issuer_cert_locally" tabindex="-1"><code>UNABLE_TO_GET_ISSUER_CERT_LOCALLY</code> <a class="header-anchor" href="#unable_to_get_issuer_cert_locally" aria-label="Permalink to “UNABLE_TO_GET_ISSUER_CERT_LOCALLY”">​</a></h4><p>证书的颁发者未知。 如果颁发者未包含在受信任证书列表中，则会发生这种情况。</p><h4 id="depth_zero_self_signed_cert" tabindex="-1"><code>DEPTH_ZERO_SELF_SIGNED_CERT</code> <a class="header-anchor" href="#depth_zero_self_signed_cert" aria-label="Permalink to “DEPTH_ZERO_SELF_SIGNED_CERT”">​</a></h4><p>传递的证书是自签名的，并且在受信任证书的列表中找不到相同的证书。</p><h4 id="self_signed_cert_in_chain" tabindex="-1"><code>SELF_SIGNED_CERT_IN_CHAIN</code> <a class="header-anchor" href="#self_signed_cert_in_chain" aria-label="Permalink to “SELF_SIGNED_CERT_IN_CHAIN”">​</a></h4><p>证书的颁发者未知。 如果颁发者未包含在受信任证书列表中，则会发生这种情况。</p><h4 id="cert_chain_too_long" tabindex="-1"><code>CERT_CHAIN_TOO_LONG</code> <a class="header-anchor" href="#cert_chain_too_long" aria-label="Permalink to “CERT_CHAIN_TOO_LONG”">​</a></h4><p>证书链的长度大于最大深度。</p><h4 id="unable_to_get_crl" tabindex="-1"><code>UNABLE_TO_GET_CRL</code> <a class="header-anchor" href="#unable_to_get_crl" aria-label="Permalink to “UNABLE_TO_GET_CRL”">​</a></h4><p>找不到证书引用的 CRL。</p><h4 id="unable_to_verify_leaf_signature" tabindex="-1"><code>UNABLE_TO_VERIFY_LEAF_SIGNATURE</code> <a class="header-anchor" href="#unable_to_verify_leaf_signature" aria-label="Permalink to “UNABLE_TO_VERIFY_LEAF_SIGNATURE”">​</a></h4><p>无法验证任何签名，因为链中仅包含一个证书且该证书不是自签名的。</p><h4 id="cert_untrusted" tabindex="-1"><code>CERT_UNTRUSTED</code> <a class="header-anchor" href="#cert_untrusted" aria-label="Permalink to “CERT_UNTRUSTED”">​</a></h4><p>根证书颁发机构（CA）未被标记为可信以用于指定目的。</p><h3 id="basic-extension-errors" tabindex="-1">基本扩展错误 <a class="header-anchor" href="#basic-extension-errors" aria-label="Permalink to “基本扩展错误”">​</a></h3><h4 id="invalid_ca" tabindex="-1"><code>INVALID_CA</code> <a class="header-anchor" href="#invalid_ca" aria-label="Permalink to “INVALID_CA”">​</a></h4><p>CA 证书无效。 它不是 CA，或者其扩展与提供的目的不一致。</p><h4 id="path_length_exceeded" tabindex="-1"><code>PATH_LENGTH_EXCEEDED</code> <a class="header-anchor" href="#path_length_exceeded" aria-label="Permalink to “PATH_LENGTH_EXCEEDED”">​</a></h4><p>已超过 basicConstraints pathlength 参数。</p><h3 id="name-related-errors" tabindex="-1">名称相关错误 <a class="header-anchor" href="#name-related-errors" aria-label="Permalink to “名称相关错误”">​</a></h3><h4 id="hostname_mismatch" tabindex="-1"><code>HOSTNAME_MISMATCH</code> <a class="header-anchor" href="#hostname_mismatch" aria-label="Permalink to “HOSTNAME_MISMATCH”">​</a></h4><p>证书与提供的名称不匹配。</p><h3 id="usage-and-policy-errors" tabindex="-1">用途和策略错误 <a class="header-anchor" href="#usage-and-policy-errors" aria-label="Permalink to “用途和策略错误”">​</a></h3><h4 id="invalid_purpose" tabindex="-1"><code>INVALID_PURPOSE</code> <a class="header-anchor" href="#invalid_purpose" aria-label="Permalink to “INVALID_PURPOSE”">​</a></h4><p>提供的证书不能用于指定的目的。</p><h4 id="cert_rejected" tabindex="-1"><code>CERT_REJECTED</code> <a class="header-anchor" href="#cert_rejected" aria-label="Permalink to “CERT_REJECTED”">​</a></h4><p>根 CA 被标记为拒绝指定的目的。</p><h3 id="formatting-errors" tabindex="-1">格式错误 <a class="header-anchor" href="#formatting-errors" aria-label="Permalink to “格式错误”">​</a></h3><h4 id="cert_signature_failure" tabindex="-1"><code>CERT_SIGNATURE_FAILURE</code> <a class="header-anchor" href="#cert_signature_failure" aria-label="Permalink to “CERT_SIGNATURE_FAILURE”">​</a></h4><p>证书的签名无效。</p><h4 id="crl_signature_failure" tabindex="-1"><code>CRL_SIGNATURE_FAILURE</code> <a class="header-anchor" href="#crl_signature_failure" aria-label="Permalink to “CRL_SIGNATURE_FAILURE”">​</a></h4><p>证书吊销列表 (CRL) 的签名无效。</p><h4 id="error_in_cert_not_before_field" tabindex="-1"><code>ERROR_IN_CERT_NOT_BEFORE_FIELD</code> <a class="header-anchor" href="#error_in_cert_not_before_field" aria-label="Permalink to “ERROR_IN_CERT_NOT_BEFORE_FIELD”">​</a></h4><p>证书 notBefore 字段包含无效的时间。</p><h4 id="error_in_cert_not_after_field" tabindex="-1"><code>ERROR_IN_CERT_NOT_AFTER_FIELD</code> <a class="header-anchor" href="#error_in_cert_not_after_field" aria-label="Permalink to “ERROR_IN_CERT_NOT_AFTER_FIELD”">​</a></h4><p>证书 notAfter 字段包含无效的时间。</p><h4 id="error_in_crl_last_update_field" tabindex="-1"><code>ERROR_IN_CRL_LAST_UPDATE_FIELD</code> <a class="header-anchor" href="#error_in_crl_last_update_field" aria-label="Permalink to “ERROR_IN_CRL_LAST_UPDATE_FIELD”">​</a></h4><p>CRL lastUpdate 字段包含无效的时间。</p><h4 id="error_in_crl_next_update_field" tabindex="-1"><code>ERROR_IN_CRL_NEXT_UPDATE_FIELD</code> <a class="header-anchor" href="#error_in_crl_next_update_field" aria-label="Permalink to “ERROR_IN_CRL_NEXT_UPDATE_FIELD”">​</a></h4><p>CRL nextUpdate 字段包含无效的时间。</p><h4 id="unable_to_decrypt_cert_signature" tabindex="-1"><code>UNABLE_TO_DECRYPT_CERT_SIGNATURE</code> <a class="header-anchor" href="#unable_to_decrypt_cert_signature" aria-label="Permalink to “UNABLE_TO_DECRYPT_CERT_SIGNATURE”">​</a></h4><p>无法解密证书签名。 这意味着无法确定实际签名值，而不是它与预期值不匹配，这仅对 RSA 密钥有意义。</p><h4 id="unable_to_decrypt_crl_signature" tabindex="-1"><code>UNABLE_TO_DECRYPT_CRL_SIGNATURE</code> <a class="header-anchor" href="#unable_to_decrypt_crl_signature" aria-label="Permalink to “UNABLE_TO_DECRYPT_CRL_SIGNATURE”">​</a></h4><p>无法解密证书吊销列表 (CRL) 签名：这意味着无法确定实际签名值，而不是它与预期值不匹配。</p><h4 id="unable_to_decode_issuer_public_key" tabindex="-1"><code>UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY</code> <a class="header-anchor" href="#unable_to_decode_issuer_public_key" aria-label="Permalink to “UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY”">​</a></h4><p>无法读取证书 SubjectPublicKeyInfo 中的公钥。</p><h3 id="other-openssl-errors" tabindex="-1">其他 OpenSSL 错误 <a class="header-anchor" href="#other-openssl-errors" aria-label="Permalink to “其他 OpenSSL 错误”">​</a></h3><h4 id="out_of_mem" tabindex="-1"><code>OUT_OF_MEM</code> <a class="header-anchor" href="#out_of_mem" aria-label="Permalink to “OUT_OF_MEM”">​</a></h4><p>尝试分配内存时发生错误。 这不应该发生。</p>`,1159)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};