import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Comprendre process.nextTick() dans Node.js","description":"Découvrez comment fonctionne process.nextTick() dans Node.js et comment il diffère de setImmediate() et setTimeout(). Comprenez la boucle d'événements et comment utiliser nextTick() pour exécuter du code de manière asynchrone.","frontmatter":{"title":"Comprendre process.nextTick() dans Node.js","description":"Découvrez comment fonctionne process.nextTick() dans Node.js et comment il diffère de setImmediate() et setTimeout(). Comprenez la boucle d'événements et comment utiliser nextTick() pour exécuter du code de manière asynchrone.","head":[["meta",{"name":"og:title","content":"Comprendre process.nextTick() dans Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Découvrez comment fonctionne process.nextTick() dans Node.js et comment il diffère de setImmediate() et setTimeout(). Comprenez la boucle d'événements et comment utiliser nextTick() pour exécuter du code de manière asynchrone."}],["meta",{"name":"twitter:title","content":"Comprendre process.nextTick() dans Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Découvrez comment fonctionne process.nextTick() dans Node.js et comment il diffère de setImmediate() et setTimeout(). Comprenez la boucle d'événements et comment utiliser nextTick() pour exécuter du code de manière asynchrone."}],["link",{"rel":"canonical","href":"https://idoc.dev/fr/nodejs/guide/understanding-process-nexttick"}],["meta",{"property":"og:url","content":"https://idoc.dev/fr/nodejs/guide/understanding-process-nexttick"}]]},"headers":[],"relativePath":"fr/nodejs/guide/understanding-process-nexttick.md","filePath":"fr/nodejs/guide/understanding-process-nexttick.md","lastUpdated":null}`),a={name:`fr/nodejs/guide/understanding-process-nexttick.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="comprendre-process-nexttick" tabindex="-1">Comprendre <code>process.nextTick()</code> <a class="header-anchor" href="#comprendre-process-nexttick" aria-label="Permalink to “Comprendre process.nextTick()”">​</a></h1><p>Lorsque vous essayez de comprendre la boucle d&#39;événements Node.js, une partie importante est <code>process.nextTick()</code>. Chaque fois que la boucle d&#39;événements effectue un cycle complet, nous l&#39;appelons un tick.</p><p>Lorsque nous passons une fonction à process.nextTick(), nous demandons au moteur d&#39;invoquer cette fonction à la fin de l&#39;opération en cours, avant le début du prochain tick de la boucle d&#39;événements\xA0:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // faire quelque chose</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>La boucle d&#39;événements est occupée à traiter le code de la fonction en cours. Une fois cette opération terminée, le moteur JS exécute toutes les fonctions passées aux appels <code>nextTick</code> pendant cette opération.</p><p>C&#39;est la façon dont nous pouvons dire au moteur JS de traiter une fonction de manière asynchrone (après la fonction actuelle), mais dès que possible, sans la mettre en file d&#39;attente.</p><p>L&#39;appel de <code>setTimeout(() =&gt; {}, 0)</code> exécutera la fonction à la fin du prochain tick, beaucoup plus tard que lors de l&#39;utilisation de <code>nextTick()</code> qui priorise l&#39;appel et l&#39;exécute juste avant le début du prochain tick.</p><p>Utilisez <code>nextTick()</code> lorsque vous voulez vous assurer que lors de la prochaine itération de la boucle d&#39;événements, le code est déjà exécuté.</p><h2 id="un-exemple-de-l-ordre-des-evenements" tabindex="-1">Un exemple de l&#39;ordre des événements\xA0: <a class="header-anchor" href="#un-exemple-de-l-ordre-des-evenements" aria-label="Permalink to “Un exemple de l&#39;ordre des événements\xA0:”">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Bonjour =&gt; numéro 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;S</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exécute avant le timeout =&gt; numéro 3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Le timeout s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exécute en dernier =&gt; numéro 4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;S</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exécute au prochain tick =&gt; numéro 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="exemple-de-sortie" tabindex="-1">Exemple de sortie\xA0: <a class="header-anchor" href="#exemple-de-sortie" aria-label="Permalink to “Exemple de sortie\xA0:”">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bonjour</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> numéro</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">S</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;exécute au prochain tick =&gt; numéro 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">S&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exécute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> avant</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> le</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> numéro</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Le</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timeout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s&#39;exécute en dernier =&gt; numéro 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>La sortie exacte peut différer d&#39;une exécution à l&#39;autre.</p>`,13)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};