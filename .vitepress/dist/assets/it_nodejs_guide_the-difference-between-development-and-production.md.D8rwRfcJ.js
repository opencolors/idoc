import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"La differenza tra sviluppo e produzione in Node.js","description":"Comprendere il ruolo di NODE_ENV in Node.js e il suo impatto sugli ambienti di sviluppo e produzione.","frontmatter":{"title":"La differenza tra sviluppo e produzione in Node.js","description":"Comprendere il ruolo di NODE_ENV in Node.js e il suo impatto sugli ambienti di sviluppo e produzione.","head":[["meta",{"name":"og:title","content":"La differenza tra sviluppo e produzione in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Comprendere il ruolo di NODE_ENV in Node.js e il suo impatto sugli ambienti di sviluppo e produzione."}],["meta",{"name":"twitter:title","content":"La differenza tra sviluppo e produzione in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Comprendere il ruolo di NODE_ENV in Node.js e il suo impatto sugli ambienti di sviluppo e produzione."}],["link",{"rel":"canonical","href":"https://idoc.dev/it/nodejs/guide/the-difference-between-development-and-production"}],["meta",{"property":"og:url","content":"https://idoc.dev/it/nodejs/guide/the-difference-between-development-and-production"}]]},"headers":[],"relativePath":"it/nodejs/guide/the-difference-between-development-and-production.md","filePath":"it/nodejs/guide/the-difference-between-development-and-production.md","lastUpdated":null}`),a={name:`it/nodejs/guide/the-difference-between-development-and-production.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-la-differenza-tra-sviluppo-e-produzione" tabindex="-1">Node.js, la differenza tra sviluppo e produzione <a class="header-anchor" href="#node-js-la-differenza-tra-sviluppo-e-produzione" aria-label="Permalink to “Node.js, la differenza tra sviluppo e produzione”">​</a></h1><p><code>Non c&#39;è differenza tra sviluppo e produzione in Node.js</code>, ovvero, non ci sono impostazioni specifiche che devi applicare per far funzionare Node.js in una configurazione di produzione. Tuttavia, alcune librerie nel registro npm riconoscono l&#39;utilizzo della variabile <code>NODE_ENV</code> e la impostano di default su <code>development</code>. Esegui sempre il tuo Node.js con <code>NODE_ENV=production</code> impostato.</p><p>Un modo popolare per configurare la tua applicazione è utilizzare la <a href="https://12factor.net" target="_blank" rel="noreferrer">metodologia dei dodici fattori</a>.</p><h2 id="node-env-in-express" tabindex="-1">NODE_ENV in Express <a class="header-anchor" href="#node-env-in-express" aria-label="Permalink to “NODE_ENV in Express”">​</a></h2><p>Nel popolarissimo framework <a href="https://expressjs.com" target="_blank" rel="noreferrer">express</a>, impostare NODE_ENV su production generalmente garantisce che:</p><ul><li>la registrazione (logging) sia mantenuta al livello minimo ed essenziale</li><li>vengano eseguiti più livelli di caching per ottimizzare le prestazioni</li></ul><p>Questo di solito viene fatto eseguendo il comando</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">production</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>nella shell, ma è meglio metterlo nel file di configurazione della shell (ad es. <code>.bash_profile</code> con la shell Bash) perché altrimenti l&#39;impostazione non persiste in caso di riavvio del sistema.</p><p>Puoi anche applicare la variabile d&#39;ambiente anteponendola al comando di inizializzazione dell&#39;applicazione:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Ad esempio, in un&#39;app Express, puoi usarlo per impostare diversi gestori di errori per ambiente:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ dumpExceptions: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, showStack: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Ad esempio <a href="https://pugjs.org" target="_blank" rel="noreferrer">Pug</a>, la libreria di templating utilizzata da <a href="https://expressjs.com" target="_blank" rel="noreferrer">Express.js</a>, compila in modalità debug se <code>NODE_ENV</code> non è impostato su <code>production</code>. Le viste Express vengono compilate in ogni richiesta in modalità di sviluppo, mentre in produzione vengono memorizzate nella cache. Ci sono molti altri esempi.</p><p><code>Questa variabile d&#39;ambiente è una convenzione ampiamente utilizzata nelle librerie esterne, ma non all&#39;interno di Node.js stesso.</code></p><h2 id="perche-node-env-e-considerato-un-antipattern" tabindex="-1">Perché NODE_ENV è considerato un antipattern? <a class="header-anchor" href="#perche-node-env-e-considerato-un-antipattern" aria-label="Permalink to “Perché NODE_ENV è considerato un antipattern?”">​</a></h2><p>Un ambiente è una piattaforma digitale o un sistema in cui gli ingegneri possono costruire, testare, distribuire e gestire prodotti software. Convenzionalmente, ci sono quattro fasi o tipi di ambienti in cui viene eseguita la nostra applicazione:</p><ul><li>Sviluppo</li><li>Staging</li><li>Produzione</li><li>Test</li></ul><p>Il problema fondamentale di <code>NODE_ENV</code> deriva dal fatto che gli sviluppatori combinano ottimizzazioni e comportamento del software con l&#39;ambiente in cui il loro software è in esecuzione. Il risultato è codice come il seguente:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;staging&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;testing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Sebbene possa sembrare innocuo, rende gli ambienti di produzione e staging diversi, rendendo quindi impossibile un test affidabile. Ad esempio, un test e quindi una funzionalità del tuo prodotto potrebbero passare quando <code>NODE_ENV</code> è impostato su <code>development</code> ma fallire quando si imposta <code>NODE_ENV</code> su <code>production</code>. Pertanto, impostare <code>NODE_ENV</code> su qualcosa di diverso da <code>production</code> è considerato un antipattern.</p>`,21)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};