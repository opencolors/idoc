import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js with WebAssembly","description":"WebAssembly は、高パフォーマンスのアセンブリ言語で、C/C++、Rust、AssemblyScript などのさまざまな言語からコンパイルできます。Node.js は、WebAssembly オブジェクトを介して WebAssembly と通信するために必要な API を提供します。","frontmatter":{"title":"Node.js with WebAssembly","description":"WebAssembly は、高パフォーマンスのアセンブリ言語で、C/C++、Rust、AssemblyScript などのさまざまな言語からコンパイルできます。Node.js は、WebAssembly オブジェクトを介して WebAssembly と通信するために必要な API を提供します。","head":[["meta",{"name":"og:title","content":"Node.js with WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"WebAssembly は、高パフォーマンスのアセンブリ言語で、C/C++、Rust、AssemblyScript などのさまざまな言語からコンパイルできます。Node.js は、WebAssembly オブジェクトを介して WebAssembly と通信するために必要な API を提供します。"}],["meta",{"name":"twitter:title","content":"Node.js with WebAssembly | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"WebAssembly は、高パフォーマンスのアセンブリ言語で、C/C++、Rust、AssemblyScript などのさまざまな言語からコンパイルできます。Node.js は、WebAssembly オブジェクトを介して WebAssembly と通信するために必要な API を提供します。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/guide/nodejs-with-webassembly"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/guide/nodejs-with-webassembly"}]]},"headers":[],"relativePath":"ja/nodejs/guide/nodejs-with-webassembly.md","filePath":"ja/nodejs/guide/nodejs-with-webassembly.md","lastUpdated":null}`),a={name:`ja/nodejs/guide/nodejs-with-webassembly.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="webassemblyを使ったnode-js" tabindex="-1">WebAssemblyを使ったNode.js <a class="header-anchor" href="#webassemblyを使ったnode-js" aria-label="Permalink to “WebAssemblyを使ったNode.js”">​</a></h1><p><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> は、C/C++、Rust、AssemblyScriptなど、様々な言語からコンパイルできる高性能なアセンブリのような言語です。現在、Chrome、Firefox、Safari、Edge、そしてNode.jsでサポートされています!</p><p>WebAssemblyの仕様では、2つのファイル形式が詳細に定められています。<code>.wasm</code>という拡張子を持つWebAssemblyモジュールと呼ばれるバイナリ形式と、<code>.wat</code>という拡張子を持つWebAssemblyテキスト形式と呼ばれる対応するテキスト表現です。</p><h2 id="主要な概念" tabindex="-1">主要な概念 <a class="header-anchor" href="#主要な概念" aria-label="Permalink to “主要な概念”">​</a></h2><ul><li>Module - コンパイルされたWebAssemblyバイナリ、つまり <code>.wasm</code> ファイル。</li><li>Memory - サイズ変更可能なArrayBuffer。</li><li>Table - Memoryに格納されていない参照のサイズ変更可能な型付き配列。</li><li>Instance - Memory、Table、および変数を持つModuleのインスタンス化。</li></ul><p>WebAssemblyを使用するには、<code>.wasm</code>バイナリファイルとWebAssemblyと通信するためのAPIのセットが必要です。Node.jsは、グローバルな<code>WebAssembly</code>オブジェクトを通じて必要なAPIを提供します。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebAssembly)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Object [WebAssembly] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  compile: [Function: compile],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  validate: [Function: validate],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  instantiate: [Function: instantiate]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="webassemblyモジュールの生成" tabindex="-1">WebAssemblyモジュールの生成 <a class="header-anchor" href="#webassemblyモジュールの生成" aria-label="Permalink to “WebAssemblyモジュールの生成”">​</a></h2><p>WebAssemblyバイナリファイルを生成するには、次のようないくつかの方法があります。</p><ul><li>WebAssembly (<code>.wat</code>)を手書きし、<a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a>などのツールを使用してバイナリ形式に変換する。</li><li>C/C++アプリケーションで<a href="https://github.com/emscripten-core/emscripten" target="_blank" rel="noreferrer">emscripten</a>を使用する。</li><li>Rustアプリケーションで<a href="https://github.com/rustwasm/wasm-pack" target="_blank" rel="noreferrer">wasm-pack</a>を使用する。</li><li>TypeScriptのようなエクスペリエンスを好む場合は、<a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noreferrer">AssemblyScript</a>を使用する。</li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p><strong>これらのツールの中には、バイナリファイルだけでなく、ブラウザで実行するためのJavaScriptの「グルー」コードと対応するHTMLファイルも生成するものがあります。</strong></p></div><h2 id="使い方" tabindex="-1">使い方 <a class="header-anchor" href="#使い方" aria-label="Permalink to “使い方”">​</a></h2><p>WebAssemblyモジュールを入手したら、Node.jsの<code>WebAssembly</code>オブジェクトを使用してインスタンス化できます。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasmBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/add.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasmBuffer).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wasmModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // エクスポートされた関数は instance.exports の下に存在します</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmModule.instance.exports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="os-とのやり取り" tabindex="-1">OS とのやり取り <a class="header-anchor" href="#os-とのやり取り" aria-label="Permalink to “OS とのやり取り”">​</a></h2><p>WebAssembly モジュールは、単独では OS の機能に直接アクセスできません。サードパーティ製のツールである <a href="https://github.com/bytecodealliance/wasmtime" target="_blank" rel="noreferrer">Wasmtime</a> を使用すると、この機能にアクセスできます。 <code>Wasmtime</code> は、OS の機能にアクセスするために <a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a> API を利用します。</p><h2 id="参考資料" tabindex="-1">参考資料 <a class="header-anchor" href="#参考資料" aria-label="Permalink to “参考資料”">​</a></h2><ul><li><a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly の一般的な情報</a></li><li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly" target="_blank" rel="noreferrer">MDN ドキュメント</a></li><li><a href="https://webassembly.github.io/spec/core/text/index.html" target="_blank" rel="noreferrer">WebAssembly を手書きする</a></li></ul>`,18)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};