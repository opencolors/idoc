import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js Debugging","description":"Node.js debugging options, including --inspect, --inspect-brk, and --debug, as well as remote debugging scenarios and legacy debugger information.","frontmatter":{"title":"Node.js Debugging","description":"Node.js debugging options, including --inspect, --inspect-brk, and --debug, as well as remote debugging scenarios and legacy debugger information.","head":[["meta",{"name":"og:title","content":"Node.js Debugging | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js debugging options, including --inspect, --inspect-brk, and --debug, as well as remote debugging scenarios and legacy debugger information."}],["meta",{"name":"twitter:title","content":"Node.js Debugging | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js debugging options, including --inspect, --inspect-brk, and --debug, as well as remote debugging scenarios and legacy debugger information."}],["link",{"rel":"canonical","href":"https://idoc.dev/nodejs/guide/debugging-nodejs"}],["meta",{"property":"og:url","content":"https://idoc.dev/nodejs/guide/debugging-nodejs"}]]},"headers":[],"relativePath":"nodejs/guide/debugging-nodejs.md","filePath":"en/nodejs/guide/debugging-nodejs.md","lastUpdated":null}`),a={name:`nodejs/guide/debugging-nodejs.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="debugging-node-js" tabindex="-1">Debugging Node.js <a class="header-anchor" href="#debugging-node-js" aria-label="Permalink to “Debugging Node.js”">​</a></h1><p>This guide will help you get started debugging your Node.js apps and scripts.</p><h2 id="enable-inspector" tabindex="-1">Enable Inspector <a class="header-anchor" href="#enable-inspector" aria-label="Permalink to “Enable Inspector”">​</a></h2><p>When started with the <code>--inspect</code> switch, a Node.js process listens for a debugging client. By default, it will listen at host and port <code>127.0.0.1:9229</code>. Each process is also assigned a unique UUID.</p><p>Inspector clients must know and specify host address, port, and UUID to connect. A full URL will look something like <code>ws://127.0.0.1:9229/0f2c936f-b1cd-4ac9-aab3-f63b0f33d55e</code>.</p><p>Node.js will also start listening for debugging messages if it receives a <code>SIGUSR1</code> signal. (<code>SIGUSR1</code> is not available on Windows.) In Node.js 7 and earlier, this activates the legacy Debugger API. In Node.js 8 and later, it will activate the Inspector API.</p><h2 id="security-implications" tabindex="-1">Security Implications <a class="header-anchor" href="#security-implications" aria-label="Permalink to “Security Implications”">​</a></h2><p>Since the debugger has full access to the Node.js execution environment, a malicious actor able to connect to this port may be able to execute arbitrary code on behalf of the Node.js process. It is important to understand the security implications of exposing the debugger port on public and private networks.</p><h3 id="exposing-the-debug-port-publicly-is-unsafe" tabindex="-1">Exposing the debug port publicly is unsafe <a class="header-anchor" href="#exposing-the-debug-port-publicly-is-unsafe" aria-label="Permalink to “Exposing the debug port publicly is unsafe”">​</a></h3><p>If the debugger is bound to a public IP address, or to 0.0.0.0, any clients that can reach your IP address will be able to connect to the debugger without any restriction and will be able to run arbitrary code.</p><p>By default <code>node --inspect</code> binds to 127.0.0.1. You explicitly need to provide a public IP address or 0.0.0.0, etc., if you intend to allow external connections to the debugger. Doing so may expose you to a potentially significant security threat. We suggest you ensure appropriate firewalls and access controls in place to prevent a security exposure.</p><p>See the section on &#39;<a href="/nodejs/guide/debugging-nodejs#enabling-remote-debugging-scenarios">Enabling remote debugging scenarios</a>&#39; on some advice on how to safely allow remote debugger clients to connect.</p><h3 id="local-applications-have-full-access-to-the-inspector" tabindex="-1">Local applications have full access to the inspector <a class="header-anchor" href="#local-applications-have-full-access-to-the-inspector" aria-label="Permalink to “Local applications have full access to the inspector”">​</a></h3><p>Even if you bind the inspector port to 127.0.0.1 (the default), any applications running locally on your machine will have unrestricted access. This is by design to allow local debuggers to be able to attach conveniently.</p><h3 id="browsers-websockets-and-same-origin-policy" tabindex="-1">Browsers, WebSockets and same-origin policy <a class="header-anchor" href="#browsers-websockets-and-same-origin-policy" aria-label="Permalink to “Browsers, WebSockets and same-origin policy”">​</a></h3><p>Websites open in a web-browser can make WebSocket and HTTP requests under the browser security model. An initial HTTP connection is necessary to obtain a unique debugger session id. The same-origin-policy prevents websites from being able to make this HTTP connection. For additional security against <a href="https://en.wikipedia.org/wiki/DNS_rebinding" target="_blank" rel="noreferrer">DNS rebinding attacks</a>, Node.js verifies that the &#39;Host&#39; headers for the connection either specify an IP address or <code>localhost</code> precisely.</p><p>These security policies disallow connecting to a remote debug server by specifying the hostname. You can work-around this restriction by specifying either the IP address or by using ssh tunnels as described below.</p><h2 id="inspector-clients" tabindex="-1">Inspector Clients <a class="header-anchor" href="#inspector-clients" aria-label="Permalink to “Inspector Clients”">​</a></h2><p>A minimal CLI debugger is available with node inspect myscript.js. Several commercial and open source tools can also connect to the Node.js Inspector.</p><h3 id="chrome-devtools-55-microsoft-edge" tabindex="-1">Chrome DevTools 55+, Microsoft Edge <a class="header-anchor" href="#chrome-devtools-55-microsoft-edge" aria-label="Permalink to “Chrome DevTools 55+, Microsoft Edge”">​</a></h3><ul><li><strong>Option 1</strong>: Open <code>chrome://inspect</code> in a Chromium-based browser or <code>edge://inspect</code> in Edge. Click the Configure button and ensure your target host and port are listed.</li><li><strong>Option 2</strong>: Copy the <code>devtoolsFrontendUrl</code> from the output of <code>/json/list</code> (see above) or the <code>--inspect</code> hint text and paste into Chrome.</li></ul><p>See <a href="https://github.com/ChromeDevTools/devtools-frontend" target="_blank" rel="noreferrer">https://github.com/ChromeDevTools/devtools-frontend</a>, <a href="https://www.microsoftedgeinsider.com" target="_blank" rel="noreferrer">https://www.microsoftedgeinsider.com</a> for more information.</p><h3 id="visual-studio-code-1-10" tabindex="-1">Visual Studio Code 1.10+ <a class="header-anchor" href="#visual-studio-code-1-10" aria-label="Permalink to “Visual Studio Code 1.10+”">​</a></h3><ul><li>In the Debug panel, click the settings icon to open <code>.vscode/launch.json</code>. Select &quot;Node.js&quot; for initial setup.</li></ul><p>See <a href="https://github.com/microsoft/vscode" target="_blank" rel="noreferrer">https://github.com/microsoft/vscode</a> for more information.</p><h3 id="jetbrains-webstorm-and-other-jetbrains-ides" tabindex="-1">JetBrains WebStorm and other JetBrains IDEs <a class="header-anchor" href="#jetbrains-webstorm-and-other-jetbrains-ides" aria-label="Permalink to “JetBrains WebStorm and other JetBrains IDEs”">​</a></h3><ul><li>Create a new Node.js debug configuration and hit Debug. <code>--inspect</code> will be used by default for Node.js 7+. To disable uncheck <code>js.debugger.node.use.inspect</code> in the IDE Registry. To learn more about running and debugging Node.js in WebStorm and other JetBrains IDEs, check out <a href="https://www.jetbrains.com/help/webstorm/running-and-debugging-node-js.html" target="_blank" rel="noreferrer">WebStorm online help</a>.</li></ul><h3 id="chrome-remote-interface" tabindex="-1">chrome-remote-interface <a class="header-anchor" href="#chrome-remote-interface" aria-label="Permalink to “chrome-remote-interface”">​</a></h3><ul><li>Library to ease connections to <a href="https://chromedevtools.github.io/debugger-protocol-viewer/v8/" target="_blank" rel="noreferrer">Inspector Protocol</a> endpoints. See <a href="https://github.com/cyrus-and/chrome-remote-interface" target="_blank" rel="noreferrer">https://github.com/cyrus-and/chrome-remote-interface</a> for more information.</li></ul><h3 id="gitpod" tabindex="-1">Gitpod <a class="header-anchor" href="#gitpod" aria-label="Permalink to “Gitpod”">​</a></h3><ul><li>Start a Node.js debug configuration from the <code>Debug</code> view or hit <code>F5</code>. Detailed instructions</li></ul><p>See <a href="https://www.gitpod.io" target="_blank" rel="noreferrer">https://www.gitpod.io</a> for more information.</p><h3 id="eclipse-ide-with-eclipse-wild-web-developer-extension" tabindex="-1">Eclipse IDE with Eclipse Wild Web Developer extension <a class="header-anchor" href="#eclipse-ide-with-eclipse-wild-web-developer-extension" aria-label="Permalink to “Eclipse IDE with Eclipse Wild Web Developer extension”">​</a></h3><ul><li>From a <code>.js</code> file, choose <code>Debug As... &gt; Node program</code>, or Create a Debug Configuration to attach debugger to running Node.js application (already started with <code>--inspect</code>).</li></ul><p>See <a href="https://eclipse.org/eclipseide" target="_blank" rel="noreferrer">https://eclipse.org/eclipseide</a> for more information.</p><h2 id="command-line-options" tabindex="-1">Command-line options <a class="header-anchor" href="#command-line-options" aria-label="Permalink to “Command-line options”">​</a></h2><p>The following table lists the impact of various runtime flags on debugging:</p><table tabindex="0"><thead><tr><th>Flag</th><th>Meaning</th></tr></thead><tbody><tr><td><code>--inspect</code></td><td>Enable debugging with the Node.js Inspector. Listen on default address and port (127.0.0.1:9229)</td></tr><tr><td><code>--inspect-brk</code></td><td>Enable debugging with the Node.js Inspector. Listen on default address and port (127.0.0.1:9229); Break before user code starts</td></tr><tr><td><code>--inspect=[host:port]</code></td><td>Enable inspector agent; Bind to address or hostname host (default: 127.0.0.1); Listen on port port (default: 9229)</td></tr><tr><td><code>--inspect-brk=[host:port]</code></td><td>Enable inspector agent; Bind to address or hostname host (default: 127.0.0.1); Listen on port port (default: 9229); Break before user code starts</td></tr><tr><td><code>--inspect-wait</code></td><td>Enable inspector agent; Listen on default address and port (127.0.0.1:9229); Wait for debugger to be attached.</td></tr><tr><td><code>--inspect-wait=[host:port]</code></td><td>Enable inspector agent; Bind to address or hostname host (default: 127.0.0.1); Listen on port port (default: 9229); Wait for debugger to be attached.</td></tr><tr><td><code>node inspect script.js</code></td><td>Spawn child process to run user&#39;s script under --inspect flag; and use main process to run CLI debugger.</td></tr><tr><td><code>node inspect --port=xxxx script.js</code></td><td>Spawn child process to run user&#39;s script under --inspect flag; and use main process to run CLI debugger. Listen on port port (default: 9229)</td></tr></tbody></table><h2 id="enabling-remote-debugging-scenarios" tabindex="-1">Enabling remote debugging scenarios <a class="header-anchor" href="#enabling-remote-debugging-scenarios" aria-label="Permalink to “Enabling remote debugging scenarios”">​</a></h2><p>We recommend that you never have the debugger listen on a public IP address. If you need to allow remote debugging connections we recommend the use of ssh tunnels instead. We provide the following example for illustrative purposes only. Please understand the security risk of allowing remote access to a privileged service before proceeding.</p><p>Let&#39;s say you are running Node.js on a remote machine, remote.example.com, that you want to be able to debug. On that machine, you should start the node process with the inspector listening only to localhost (the default).</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Now, on your local machine from where you want to initiate a debug client connection, you can setup an ssh tunnel:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9225:localhost:9229</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote.example.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This starts a ssh tunnel session where a connection to port 9221 on your local machine will be forwarded to port 9229 on remote.example.com. You can now attach a debugger such as Chrome DevTools or Visual Studio Code to localhost:9221, which should be able to debug as if the Node.js application was running locally.</p><h2 id="legacy-debugger" tabindex="-1">Legacy Debugger <a class="header-anchor" href="#legacy-debugger" aria-label="Permalink to “Legacy Debugger”">​</a></h2><p><strong>The legacy debugger has been deprecated as of Node.js 7.7.0. Please use --inspect and Inspector instead.</strong></p><p>When started with the <code>--debug</code> or <code>--debug-brk</code> switches in version 7 and earlier, Node.js listens for debugging commands defined by the discontinued V8 Debugging Protocol on a TCP port, by default <code>5858</code>. Any debugger client which speaks this protocol can connect to and debug the running process; a couple popular ones are listed below.</p><p>The V8 Debugging Protocol is no longer maintained or documented.</p><h3 id="built-in-debugger" tabindex="-1">Built-in Debugger <a class="header-anchor" href="#built-in-debugger" aria-label="Permalink to “Built-in Debugger”">​</a></h3><p>Start <code>node debug script_name.js</code> to start your script under the builtin command-line debugger. Your script starts in another Node.js process started with the <code>--debug-brk</code> option, and the initial Node.js process runs the <code>_debugger.js</code> script and connects to your target. See <a href="/nodejs/api/debugger">docs</a> for more information.</p><h3 id="node-inspector" tabindex="-1">node-inspector <a class="header-anchor" href="#node-inspector" aria-label="Permalink to “node-inspector”">​</a></h3><p>Debug your Node.js app with Chrome DevTools by using an intermediary process which translates the <a href="https://chromedevtools.github.io/debugger-protocol-viewer/v8/" target="_blank" rel="noreferrer">Inspector Protocol</a> used in Chromium to the V8 Debugger protocol used in Node.js. See <a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="noreferrer">https://github.com/node-inspector/node-inspector</a> for more information.</p>`,53)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};