import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 문서 - 쿼리 문자열","description":"이 Node.js 문서의 섹션에서는 URL 쿼리 문자열을 분석하고 형식화하기 위한 유틸리티를 제공하는 querystring 모듈에 대해 자세히 설명합니다. 특수 문자의 이스케이프 및 언이스케이프, 중첩된 객체 처리, 쿼리 문자열 직렬화 관리 방법이 포함됩니다.","frontmatter":{"title":"Node.js 문서 - 쿼리 문자열","description":"이 Node.js 문서의 섹션에서는 URL 쿼리 문자열을 분석하고 형식화하기 위한 유틸리티를 제공하는 querystring 모듈에 대해 자세히 설명합니다. 특수 문자의 이스케이프 및 언이스케이프, 중첩된 객체 처리, 쿼리 문자열 직렬화 관리 방법이 포함됩니다.","head":[["meta",{"name":"og:title","content":"Node.js 문서 - 쿼리 문자열 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"이 Node.js 문서의 섹션에서는 URL 쿼리 문자열을 분석하고 형식화하기 위한 유틸리티를 제공하는 querystring 모듈에 대해 자세히 설명합니다. 특수 문자의 이스케이프 및 언이스케이프, 중첩된 객체 처리, 쿼리 문자열 직렬화 관리 방법이 포함됩니다."}],["meta",{"name":"twitter:title","content":"Node.js 문서 - 쿼리 문자열 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"이 Node.js 문서의 섹션에서는 URL 쿼리 문자열을 분석하고 형식화하기 위한 유틸리티를 제공하는 querystring 모듈에 대해 자세히 설명합니다. 특수 문자의 이스케이프 및 언이스케이프, 중첩된 객체 처리, 쿼리 문자열 직렬화 관리 방법이 포함됩니다."}],["link",{"rel":"canonical","href":"https://idoc.dev/ko/nodejs/api/querystring"}],["meta",{"property":"og:url","content":"https://idoc.dev/ko/nodejs/api/querystring"}]]},"headers":[],"relativePath":"ko/nodejs/api/querystring.md","filePath":"ko/nodejs/api/querystring.md","lastUpdated":null}`),a={name:`ko/nodejs/api/querystring.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="query-string" tabindex="-1">쿼리 스트링 <a class="header-anchor" href="#query-string" aria-label="Permalink to “쿼리 스트링”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[안정성: 2 - 안정적]</p><p><a href="/ko/nodejs/api/documentation#stability-index">안정성: 2</a> <a href="/ko/nodejs/api/documentation#stability-index">안정성: 2</a> - 안정적</p></div><p><strong>소스 코드:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/querystring.js" target="_blank" rel="noreferrer">lib/querystring.js</a></p><p><code>node:querystring</code> 모듈은 URL 쿼리 문자열을 파싱하고 포맷하는 유틸리티를 제공합니다. 다음과 같이 액세스할 수 있습니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:querystring&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>querystring</code>은 <a href="/ko/nodejs/api/url#class-urlsearchparams">&lt;URLSearchParams&gt;</a>보다 성능이 좋지만 표준화된 API는 아닙니다. 성능이 중요하지 않거나 브라우저 코드와의 호환성이 필요한 경우 <a href="/ko/nodejs/api/url#class-urlsearchparams">&lt;URLSearchParams&gt;</a>를 사용하십시오.</p><h2 id="querystringdecode" tabindex="-1"><code>querystring.decode()</code> <a class="header-anchor" href="#querystringdecode" aria-label="Permalink to “querystring.decode()”">​</a></h2><p><strong>추가된 버전: v0.1.99</strong></p><p><code>querystring.decode()</code> 함수는 <code>querystring.parse()</code>의 별칭입니다.</p><h2 id="querystringencode" tabindex="-1"><code>querystring.encode()</code> <a class="header-anchor" href="#querystringencode" aria-label="Permalink to “querystring.encode()”">​</a></h2><p><strong>추가된 버전: v0.1.99</strong></p><p><code>querystring.encode()</code> 함수는 <code>querystring.stringify()</code>의 별칭입니다.</p><h2 id="querystringescapestr" tabindex="-1"><code>querystring.escape(str)</code> <a class="header-anchor" href="#querystringescapestr" aria-label="Permalink to “querystring.escape(str)”">​</a></h2><p><strong>추가된 버전: v0.1.25</strong></p><ul><li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>querystring.escape()</code> 메서드는 URL 쿼리 문자열의 특정 요구 사항에 최적화된 방식으로 주어진 <code>str</code>에 대해 URL 퍼센트 인코딩을 수행합니다.</p><p><code>querystring.escape()</code> 메서드는 <code>querystring.stringify()</code>에 의해 사용되며 일반적으로 직접 사용될 것으로 예상되지 않습니다. 애플리케이션 코드가 필요한 경우 <code>querystring.escape</code>를 대체 함수에 할당하여 대체 퍼센트 인코딩 구현을 제공할 수 있도록 주로 내보내집니다.</p><h2 id="querystringparsestr-sep-eq-options" tabindex="-1"><code>querystring.parse(str[, sep[, eq[, options]]])</code> <a class="header-anchor" href="#querystringparsestr-sep-eq-options" aria-label="Permalink to “querystring.parse(str[, sep[, eq[, options]]])”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[히스토리]</p><table tabindex="0"><thead><tr><th>버전</th><th>변경 사항</th></tr></thead><tbody><tr><td>v8.0.0</td><td>여러 개의 빈 항목이 올바르게 파싱됩니다 (예: <code>&amp;=&amp;=</code>).</td></tr><tr><td>v6.0.0</td><td>반환된 객체는 더 이상 <code>Object.prototype</code>에서 상속되지 않습니다.</td></tr><tr><td>v6.0.0, v4.2.4</td><td><code>eq</code> 매개변수의 길이가 <code>1</code>보다 클 수 있습니다.</td></tr><tr><td>v0.1.25</td><td>추가된 버전: v0.1.25</td></tr></tbody></table></div><ul><li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 파싱할 URL 쿼리 문자열</li><li><code>sep</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 쿼리 문자열에서 키와 값 쌍을 구분하는 데 사용되는 부분 문자열입니다. <strong>기본값:</strong> <code>&#39;&amp;&#39;</code>.</li><li><code>eq</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a>. 쿼리 문자열에서 키와 값을 구분하는 데 사용되는 부분 문자열입니다. <strong>기본값:</strong> <code>&#39;=&#39;</code>.</li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>decodeURIComponent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 쿼리 문자열에서 퍼센트 인코딩된 문자를 디코딩할 때 사용할 함수입니다. <strong>기본값:</strong> <code>querystring.unescape()</code>.</li><li><code>maxKeys</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 파싱할 최대 키 수를 지정합니다. 키 계산 제한을 제거하려면 <code>0</code>을 지정합니다. <strong>기본값:</strong> <code>1000</code>.</li></ul></li></ul><p><code>querystring.parse()</code> 메서드는 URL 쿼리 문자열(<code>str</code>)을 키와 값 쌍의 컬렉션으로 파싱합니다.</p><p>예를 들어, 쿼리 문자열 <code>&#39;foo=bar&amp;abc=xyz&amp;abc=123&#39;</code>은 다음과 같이 파싱됩니다.</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xyz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>querystring.parse()</code> 메서드에 의해 반환된 객체는 JavaScript <code>Object</code>에서 원형적으로 상속되지 <em>않습니다</em>. 즉, <code>obj.toString()</code>, <code>obj.hasOwnProperty()</code> 등과 같은 일반적인 <code>Object</code> 메서드는 정의되지 않았으며 <em>작동하지 않습니다</em>.</p><p>기본적으로 쿼리 문자열 내의 퍼센트 인코딩된 문자는 UTF-8 인코딩을 사용하는 것으로 간주됩니다. 대체 문자 인코딩이 사용되는 경우 대체 <code>decodeURIComponent</code> 옵션을 지정해야 합니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// gbkDecodeURIComponent 함수가 이미 존재하는 것으로 가정...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;w=%D6%D0%CE%C4&amp;foo=bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  { decodeURIComponent: gbkDecodeURIComponent });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="querystringstringifyobj-sep-eq-options" tabindex="-1"><code>querystring.stringify(obj[, sep[, eq[, options]]])</code> <a class="header-anchor" href="#querystringstringifyobj-sep-eq-options" aria-label="Permalink to “querystring.stringify(obj[, sep[, eq[, options]]])”">​</a></h2><p><strong>추가된 버전: v0.1.25</strong></p><ul><li><code>obj</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> URL 쿼리 문자열로 직렬화할 객체</li><li><code>sep</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 쿼리 문자열에서 키와 값 쌍을 구분하는 데 사용되는 하위 문자열입니다. <strong>기본값:</strong> <code>&#39;&amp;&#39;</code>.</li><li><code>eq</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a>. 쿼리 문자열에서 키와 값을 구분하는 데 사용되는 하위 문자열입니다. <strong>기본값:</strong> <code>&#39;=&#39;</code>.</li><li><code>options</code><ul><li><code>encodeURIComponent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> URL에 안전하지 않은 문자를 쿼리 문자열에서 퍼센트 인코딩으로 변환할 때 사용할 함수입니다. <strong>기본값:</strong> <code>querystring.escape()</code>.</li></ul></li></ul><p><code>querystring.stringify()</code> 메서드는 객체의 &quot;고유 속성&quot;을 반복하여 주어진 <code>obj</code>에서 URL 쿼리 문자열을 생성합니다.</p><p>다음에 나오는 <code>obj</code>에 전달된 값 유형을 직렬화합니다. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noreferrer">&lt;bigint&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noreferrer">&lt;bigint[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean[]&gt;</a> 숫자 값은 유한해야 합니다. 다른 입력 값은 빈 문자열로 강제 변환됩니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, baz: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;qux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;quux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], corge: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 반환: &#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, baz: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;qux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 반환: &#39;foo:bar;baz:qux&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>기본적으로 쿼리 문자열 내에서 퍼센트 인코딩이 필요한 문자는 UTF-8로 인코딩됩니다. 대체 인코딩이 필요한 경우 대체 <code>encodeURIComponent</code> 옵션을 지정해야 합니다.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// gbkEncodeURIComponent 함수가 이미 있다고 가정,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ w: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;中文&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      { encodeURIComponent: gbkEncodeURIComponent });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="querystringunescapestr" tabindex="-1"><code>querystring.unescape(str)</code> <a class="header-anchor" href="#querystringunescapestr" aria-label="Permalink to “querystring.unescape(str)”">​</a></h2><p><strong>Added in: v0.1.25</strong></p><ul><li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>querystring.unescape()</code> 메서드는 주어진 <code>str</code>에 대해 URL 퍼센트 인코딩된 문자의 디코딩을 수행합니다.</p><p><code>querystring.unescape()</code> 메서드는 <code>querystring.parse()</code>에 의해 사용되며 일반적으로 직접적으로 사용될 것으로 예상되지 않습니다. 이 메서드는 주로 애플리케이션 코드가 필요한 경우 <code>querystring.unescape</code>를 대체 함수에 할당하여 대체 디코딩 구현을 제공할 수 있도록 내보내집니다.</p><p>기본적으로 <code>querystring.unescape()</code> 메서드는 JavaScript 내장 <code>decodeURIComponent()</code> 메서드를 사용하여 디코딩을 시도합니다. 실패할 경우 잘못된 URL에서 오류를 발생시키지 않는 더 안전한 동등한 방법이 사용됩니다.</p>`,40)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};