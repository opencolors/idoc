import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js HTTP 模块文档","description":"Node.js 官方 HTTP 模块的文档，详细介绍如何创建 HTTP 服务器和客户端，处理请求和响应，以及管理各种 HTTP 方法和头信息。","frontmatter":{"title":"Node.js HTTP 模块文档","description":"Node.js 官方 HTTP 模块的文档，详细介绍如何创建 HTTP 服务器和客户端，处理请求和响应，以及管理各种 HTTP 方法和头信息。","head":[["meta",{"name":"og:title","content":"Node.js HTTP 模块文档 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js 官方 HTTP 模块的文档，详细介绍如何创建 HTTP 服务器和客户端，处理请求和响应，以及管理各种 HTTP 方法和头信息。"}],["meta",{"name":"twitter:title","content":"Node.js HTTP 模块文档 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js 官方 HTTP 模块的文档，详细介绍如何创建 HTTP 服务器和客户端，处理请求和响应，以及管理各种 HTTP 方法和头信息。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/http"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/http"}]]},"headers":[],"relativePath":"zh/nodejs/api/http.md","filePath":"zh/nodejs/api/http.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/api/http.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to “HTTP”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[稳定度: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定</p></div><p><strong>源代码:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/http.js" target="_blank" rel="noreferrer">lib/http.js</a></p><p>此模块包含客户端和服务器，可以通过 <code>require(&#39;node:http&#39;)</code> (CommonJS) 或 <code>import * as http from &#39;node:http&#39;</code> (ES 模块) 导入。</p><p>Node.js 中的 HTTP 接口旨在支持协议的许多传统上难以使用的功能。 特别是，大型的，可能采用分块编码的消息。 该接口非常小心，永远不会缓冲整个请求或响应，因此用户能够流式传输数据。</p><p>HTTP 消息头由如下对象表示：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;content-length&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;content-type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/plain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;connection&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;keep-alive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;accept&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>键是小写的。 值不会被修改。</p><p>为了支持所有可能的 HTTP 应用程序，Node.js HTTP API 非常底层。 它只处理流处理和消息解析。 它将消息解析为标头和主体，但不解析实际的标头或主体。</p><p>有关如何处理重复标头的详细信息，请参阅 <a href="/zh/nodejs/api/http#messageheaders"><code>message.headers</code></a>。</p><p>原始标头（按接收时的样子）保留在 <code>rawHeaders</code> 属性中，该属性是 <code>[key, value, key2, value2, ...]</code> 的数组。 例如，先前的消息头对象可能具有如下 <code>rawHeaders</code> 列表：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ConTent-Length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123456&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;content-LENGTH&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;content-type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;CONNECTION&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;keep-alive&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;Host&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;accepT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*/*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="class-httpagent" tabindex="-1">类: <code>http.Agent</code> <a class="header-anchor" href="#class-httpagent" aria-label="Permalink to “类: http.Agent”">​</a></h2><p><strong>加入于: v0.3.4</strong></p><p><code>Agent</code> 负责管理 HTTP 客户端的连接持久性和重用。 它维护给定主机和端口的挂起请求队列，为每个请求重用单个套接字连接，直到队列为空为止，此时套接字将被销毁或放入池中，以供再次用于对同一主机和端口的请求。 它是被销毁还是被放入池中取决于 <code>keepAlive</code> <a href="/zh/nodejs/api/http#new-agentoptions">选项</a>。</p><p>池化连接启用了 TCP Keep-Alive，但服务器仍然可以关闭空闲连接，在这种情况下，它们将从池中删除，并且当为该主机和端口发出新的 HTTP 请求时，将建立新的连接。 服务器也可能拒绝允许通过同一连接发送多个请求，在这种情况下，必须为每个请求重新建立连接，并且无法进行池化。 <code>Agent</code> 仍将向该服务器发出请求，但每个请求都将通过新连接进行。</p><p>当连接被客户端或服务器关闭时，它将从池中删除。 池中任何未使用的套接字都将被取消引用，以便在没有未完成的请求时不会使 Node.js 进程保持运行。 （请参阅 <a href="/zh/nodejs/api/net#socketunref"><code>socket.unref()</code></a>）。</p><p>最佳实践是在不再使用 <code>Agent</code> 实例时 <a href="/zh/nodejs/api/http#agentdestroy"><code>destroy()</code></a> 它，因为未使用的套接字会消耗操作系统资源。</p><p>当套接字发出 <code>&#39;close&#39;</code> 事件或 <code>&#39;agentRemove&#39;</code> 事件时，将从代理中删除套接字。 当打算保持一个 HTTP 请求打开很长时间而不将其保留在代理中时，可以执行以下操作：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Do stuff</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;socket&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;agentRemove&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>代理也可以用于单个请求。 通过将 <code>{agent: false}</code> 作为选项提供给 <code>http.get()</code> 或 <code>http.request()</code> 函数，将使用具有默认选项的一次性使用 <code>Agent</code> 用于客户端连接。</p><p><code>agent:false</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hostname: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  agent: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create a new agent just for this one request</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Do stuff with response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="new-agentoptions" tabindex="-1"><code>new Agent([options])</code> <a class="header-anchor" href="#new-agentoptions" aria-label="Permalink to “new Agent([options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.6.0, v14.17.0</td><td>将默认调度从 &#39;fifo&#39; 更改为 &#39;lifo&#39;。</td></tr><tr><td>v14.5.0, v12.20.0</td><td>添加 <code>scheduling</code> 选项以指定空闲套接字调度策略。</td></tr><tr><td>v14.5.0, v12.19.0</td><td>向 agent 构造函数添加 <code>maxTotalSockets</code> 选项。</td></tr><tr><td>v0.3.4</td><td>添加于: v0.3.4</td></tr></tbody></table></div><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 在 agent 上设置的可配置选项集。可以有以下字段： <ul><li><code>keepAlive</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 即使没有未完成的请求，也保持套接字处于打开状态，以便它们可以用于未来的请求，而无需重新建立 TCP 连接。不要与 <code>Connection</code> 标头的 <code>keep-alive</code> 值混淆。使用 agent 时，始终发送 <code>Connection: keep-alive</code> 标头，除非显式指定 <code>Connection</code> 标头，或者分别将 <code>keepAlive</code> 和 <code>maxSockets</code> 选项设置为 <code>false</code> 和 <code>Infinity</code>，在这种情况下将使用 <code>Connection: close</code>。<strong>默认值:</strong> <code>false</code>。</li><li><code>keepAliveMsecs</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 当使用 <code>keepAlive</code> 选项时，指定 TCP Keep-Alive 数据包的<a href="/zh/nodejs/api/net#socketsetkeepaliveenable-initialdelay">初始延迟</a>。当 <code>keepAlive</code> 选项为 <code>false</code> 或 <code>undefined</code> 时，将被忽略。<strong>默认值:</strong> <code>1000</code>。</li><li><code>maxSockets</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 每个主机允许的最大套接字数。如果同一主机打开多个并发连接，则每个请求将使用新的套接字，直到达到 <code>maxSockets</code> 值。如果主机尝试打开比 <code>maxSockets</code> 更多的连接，则其他请求将进入待处理请求队列，并在现有连接终止时进入活动连接状态。这确保在任何时间点，来自给定主机的活动连接最多为 <code>maxSockets</code> 个。<strong>默认值:</strong> <code>Infinity</code>。</li><li><code>maxTotalSockets</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 所有主机总共允许的最大套接字数。每个请求将使用一个新的套接字，直到达到最大值。<strong>默认值:</strong> <code>Infinity</code>。</li><li><code>maxFreeSockets</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 每个主机在空闲状态下保持打开的最大套接字数。仅当 <code>keepAlive</code> 设置为 <code>true</code> 时才相关。<strong>默认值:</strong> <code>256</code>。</li><li><code>scheduling</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 选择下一个要使用的空闲套接字时要应用的调度策略。它可以是 <code>&#39;fifo&#39;</code> 或 <code>&#39;lifo&#39;</code>。两种调度策略的主要区别在于 <code>&#39;lifo&#39;</code> 选择最近使用的套接字，而 <code>&#39;fifo&#39;</code> 选择最近最少使用的套接字。在每秒请求速率较低的情况下，<code>&#39;lifo&#39;</code> 调度将降低选择可能因不活动而被服务器关闭的套接字的风险。在每秒请求速率较高的情况下，<code>&#39;fifo&#39;</code> 调度将最大化打开的套接字数，而 <code>&#39;lifo&#39;</code> 调度将使其保持尽可能低。<strong>默认值:</strong> <code>&#39;lifo&#39;</code>。</li><li><code>timeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 套接字超时（以毫秒为单位）。这将在创建套接字时设置超时。</li></ul></li></ul><p><code>socket.connect()</code> 中的 <code>options</code> 也支持。</p><p>要配置其中的任何一个，必须创建一个自定义的 <a href="/zh/nodejs/api/http#class-httpagent"><code>http.Agent</code></a> 实例。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-164" id="tab-165" checked><label data-title="ESM" for="tab-165">ESM</label><input type="radio" name="group-164" id="tab-166"><label data-title="CJS" for="tab-166">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Agent, request } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> keepAliveAgent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ keepAlive: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options.agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keepAliveAgent;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, onResponseCallback);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> keepAliveAgent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ keepAlive: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options.agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keepAliveAgent;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, onResponseCallback);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div></div><h3 id="agentcreateconnectionoptions-callback" tabindex="-1"><code>agent.createConnection(options[, callback])</code> <a class="header-anchor" href="#agentcreateconnectionoptions-callback" aria-label="Permalink to “agent.createConnection(options[, callback])”">​</a></h3><p><strong>加入于: v0.11.4</strong></p><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 包含连接详情的选项。有关选项的格式，请查看 <a href="/zh/nodejs/api/net#netcreateconnectionoptions-connectlistener"><code>net.createConnection()</code></a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 接收已创建套接字的函数回调</li><li>返回: <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>产生一个用于 HTTP 请求的套接字/流。</p><p>默认情况下，此函数与 <a href="/zh/nodejs/api/net#netcreateconnectionoptions-connectlistener"><code>net.createConnection()</code></a> 相同。 但是，如果需要更大的灵活性，自定义代理可能会覆盖此方法。</p><p>可以通过两种方式提供套接字/流：通过从此函数返回套接字/流，或通过将套接字/流传递给 <code>callback</code>。</p><p>保证此方法返回 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 类的一个实例，它是 <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的一个子类，除非用户指定了 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 以外的套接字类型。</p><p><code>callback</code> 的签名为 <code>(err, stream)</code>。</p><h3 id="agentkeepsocketalivesocket" tabindex="-1"><code>agent.keepSocketAlive(socket)</code> <a class="header-anchor" href="#agentkeepsocketalivesocket" aria-label="Permalink to “agent.keepSocketAlive(socket)”">​</a></h3><p><strong>加入于: v8.1.0</strong></p><ul><li><code>socket</code> <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>当 <code>socket</code> 从请求中分离并且可以被 <code>Agent</code> 持久化时调用。 默认行为是：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setKeepAlive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.keepAliveMsecs);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以通过特定的 <code>Agent</code> 子类覆盖此方法。 如果此方法返回一个假值，则套接字将被销毁，而不是为了与下一个请求一起使用而保留它。</p><p><code>socket</code> 参数可以是 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 的一个实例，它是 <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的一个子类。</p><h3 id="agentreusesocketsocket-request" tabindex="-1"><code>agent.reuseSocket(socket, request)</code> <a class="header-anchor" href="#agentreusesocketsocket-request" aria-label="Permalink to “agent.reuseSocket(socket, request)”">​</a></h3><p><strong>加入于: v8.1.0</strong></p><ul><li><code>socket</code> <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li><li><code>request</code> <a href="/zh/nodejs/api/http#class-httpclientrequest">&lt;http.ClientRequest&gt;</a></li></ul><p>由于 keep-alive 选项，在 <code>socket</code> 被持久化后附加到 <code>request</code> 时调用。 默认行为是：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以通过特定的 <code>Agent</code> 子类覆盖此方法。</p><p><code>socket</code> 参数可以是 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 的一个实例，它是 <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的一个子类。</p><h3 id="agentdestroy" tabindex="-1"><code>agent.destroy()</code> <a class="header-anchor" href="#agentdestroy" aria-label="Permalink to “agent.destroy()”">​</a></h3><p><strong>添加于: v0.11.4</strong></p><p>销毁代理当前正在使用的任何套接字。</p><p>通常不需要这样做。但是，如果使用启用了 <code>keepAlive</code> 的代理，则最好在不再需要该代理时显式关闭它。否则，套接字可能会保持打开状态很长时间，直到服务器终止它们。</p><h3 id="agentfreesockets" tabindex="-1"><code>agent.freeSockets</code> <a class="header-anchor" href="#agentfreesockets" aria-label="Permalink to “agent.freeSockets”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v16.0.0</td><td>该属性现在具有 <code>null</code> 原型。</td></tr><tr><td>v0.11.4</td><td>添加于: v0.11.4</td></tr></tbody></table></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>一个对象，其中包含当 <code>keepAlive</code> 启用时，代理当前正在等待使用的套接字数组。不要修改。</p><p><code>freeSockets</code> 列表中的套接字将被自动销毁，并在 <code>&#39;timeout&#39;</code> 时从数组中移除。</p><h3 id="agentgetnameoptions" tabindex="-1"><code>agent.getName([options])</code> <a class="header-anchor" href="#agentgetnameoptions" aria-label="Permalink to “agent.getName([options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v17.7.0, v16.15.0</td><td><code>options</code> 参数现在是可选的。</td></tr><tr><td>v0.11.4</td><td>添加于: v0.11.4</td></tr></tbody></table></div><ul><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 一组选项，提供用于名称生成的信息</p><ul><li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 要向其发出请求的服务器的域名或 IP 地址</li><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 远程服务器的端口</li><li><code>localAddress</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 发出请求时要绑定到网络连接的本地接口</li><li><code>family</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> 如果它不等于 <code>undefined</code>，则必须是 4 或 6。</li></ul></li><li><p>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></p></li></ul><p>获取一组请求选项的唯一名称，以确定是否可以重复使用连接。 对于 HTTP 代理，这将返回 <code>host:port:localAddress</code> 或 <code>host:port:localAddress:family</code>。 对于 HTTPS 代理，该名称包括 CA、证书、密码和其他 HTTPS/TLS 特定的选项，这些选项决定了套接字的可重用性。</p><h3 id="agentmaxfreesockets" tabindex="-1"><code>agent.maxFreeSockets</code> <a class="header-anchor" href="#agentmaxfreesockets" aria-label="Permalink to “agent.maxFreeSockets”">​</a></h3><p><strong>Added in: v0.11.7</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>默认值为 256。对于启用了 <code>keepAlive</code> 的代理，此设置将指定空闲状态下保持打开的最大套接字数。</p><h3 id="agentmaxsockets" tabindex="-1"><code>agent.maxSockets</code> <a class="header-anchor" href="#agentmaxsockets" aria-label="Permalink to “agent.maxSockets”">​</a></h3><p><strong>Added in: v0.3.6</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>默认值为 <code>Infinity</code>。确定代理可以为每个源打开的并发套接字数。源是 <a href="/zh/nodejs/api/http#agentgetnameoptions"><code>agent.getName()</code></a> 返回的值。</p><h3 id="agentmaxtotalsockets" tabindex="-1"><code>agent.maxTotalSockets</code> <a class="header-anchor" href="#agentmaxtotalsockets" aria-label="Permalink to “agent.maxTotalSockets”">​</a></h3><p><strong>Added in: v14.5.0, v12.19.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>默认值为 <code>Infinity</code>。确定代理可以打开的并发套接字数。与 <code>maxSockets</code> 不同，此参数适用于所有源。</p><h3 id="agentrequests" tabindex="-1"><code>agent.requests</code> <a class="header-anchor" href="#agentrequests" aria-label="Permalink to “agent.requests”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>更改</th></tr></thead><tbody><tr><td>v16.0.0</td><td>该属性现在有一个 <code>null</code> 原型。</td></tr><tr><td>v0.5.9</td><td>Added in: v0.5.9</td></tr></tbody></table></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>一个对象，其中包含尚未分配给套接字的请求队列。请勿修改。</p><h3 id="agentsockets" tabindex="-1"><code>agent.sockets</code> <a class="header-anchor" href="#agentsockets" aria-label="Permalink to “agent.sockets”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>更改</th></tr></thead><tbody><tr><td>v16.0.0</td><td>该属性现在有一个 <code>null</code> 原型。</td></tr><tr><td>v0.3.6</td><td>Added in: v0.3.6</td></tr></tbody></table></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>一个对象，其中包含代理当前正在使用的套接字数组。请勿修改。</p><h2 id="class-httpclientrequest" tabindex="-1">类: <code>http.ClientRequest</code> <a class="header-anchor" href="#class-httpclientrequest" aria-label="Permalink to “类: http.ClientRequest”">​</a></h2><p><strong>Added in: v0.1.17</strong></p><ul><li>继承自: <a href="/zh/nodejs/api/http#class-httpoutgoingmessage">&lt;http.OutgoingMessage&gt;</a></li></ul><p>此对象在内部创建并从 <a href="/zh/nodejs/api/http#httprequestoptions-callback"><code>http.request()</code></a> 返回。它表示一个 <em>正在进行中</em> 的请求，其标头已经排队。可以使用 <a href="/zh/nodejs/api/http#requestsetheadername-value"><code>setHeader(name, value)</code></a>, <a href="/zh/nodejs/api/http#requestgetheadername"><code>getHeader(name)</code></a>, <a href="/zh/nodejs/api/http#requestremoveheadername"><code>removeHeader(name)</code></a> API 修改标头。实际的标头将与第一个数据块一起发送，或者在调用 <a href="/zh/nodejs/api/http#requestenddata-encoding-callback"><code>request.end()</code></a> 时发送。</p><p>要获取响应，请向请求对象添加 <a href="/zh/nodejs/api/http#event-response"><code>&#39;response&#39;</code></a> 的监听器。当接收到响应头时，将从请求对象发出 <a href="/zh/nodejs/api/http#event-response"><code>&#39;response&#39;</code></a>。<a href="/zh/nodejs/api/http#event-response"><code>&#39;response&#39;</code></a> 事件使用一个参数执行，该参数是 <a href="/zh/nodejs/api/http#class-httpincomingmessage"><code>http.IncomingMessage</code></a> 的实例。</p><p>在 <a href="/zh/nodejs/api/http#event-response"><code>&#39;response&#39;</code></a> 事件期间，可以向响应对象添加监听器；特别是监听 <code>&#39;data&#39;</code> 事件。</p><p>如果未添加任何 <a href="/zh/nodejs/api/http#event-response"><code>&#39;response&#39;</code></a> 处理程序，则响应将被完全丢弃。但是，如果添加了 <a href="/zh/nodejs/api/http#event-response"><code>&#39;response&#39;</code></a> 事件处理程序，则<strong>必须</strong>消耗响应对象中的数据，可以通过在每次出现 <code>&#39;readable&#39;</code> 事件时调用 <code>response.read()</code>，或者通过添加 <code>&#39;data&#39;</code> 处理程序，或者通过调用 <code>.resume()</code> 方法来实现。在消耗数据之前，<code>&#39;end&#39;</code> 事件不会触发。此外，在读取数据之前，它将消耗内存，最终可能导致“进程内存不足”错误。</p><p>为了向后兼容，<code>res</code> 只有在注册了 <code>&#39;error&#39;</code> 监听器时才会发出 <code>&#39;error&#39;</code>。</p><p>设置 <code>Content-Length</code> 标头以限制响应主体大小。如果 <a href="/zh/nodejs/api/http#responsestrictcontentlength"><code>response.strictContentLength</code></a> 设置为 <code>true</code>，则 <code>Content-Length</code> 标头值不匹配将导致抛出 <code>Error</code>，并通过 <code>code:</code> <a href="/zh/nodejs/api/errors#err-http-content-length-mismatch"><code>&#39;ERR_HTTP_CONTENT_LENGTH_MISMATCH&#39;</code></a> 识别。</p><p><code>Content-Length</code> 值应以字节为单位，而不是字符。使用 <a href="/zh/nodejs/api/buffer#static-method-bufferbytelengthstring-encoding"><code>Buffer.byteLength()</code></a> 确定主体长度（以字节为单位）。</p><h3 id="event-abort" tabindex="-1">事件: <code>&#39;abort&#39;</code> <a class="header-anchor" href="#event-abort" aria-label="Permalink to “事件: &#39;abort&#39;”">​</a></h3><p><strong>新增于: v1.4.1</strong></p><p><strong>自以下版本弃用: v17.0.0, v16.12.0</strong></p><div class="danger custom-block"><p class="custom-block-title">[稳定度: 0 - 已弃用]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 已弃用。请监听 <code>&#39;close&#39;</code> 事件。</p></div><p>当客户端中止请求时触发。 此事件仅在第一次调用 <code>abort()</code> 时触发。</p><h3 id="event-close" tabindex="-1">事件: <code>&#39;close&#39;</code> <a class="header-anchor" href="#event-close" aria-label="Permalink to “事件: &#39;close&#39;”">​</a></h3><p><strong>新增于: v0.5.4</strong></p><p>表明请求已完成，或者其底层连接过早终止（在响应完成之前）。</p><h3 id="event-connect" tabindex="-1">事件: <code>&#39;connect&#39;</code> <a class="header-anchor" href="#event-connect" aria-label="Permalink to “事件: &#39;connect&#39;”">​</a></h3><p><strong>新增于: v0.7.0</strong></p><ul><li><code>response</code> <a href="/zh/nodejs/api/http#class-httpincomingmessage">&lt;http.IncomingMessage&gt;</a></li><li><code>socket</code> <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li><li><code>head</code> <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul><p>每次服务器使用 <code>CONNECT</code> 方法响应请求时触发。 如果未监听此事件，则接收 <code>CONNECT</code> 方法的客户端将关闭其连接。</p><p>此事件保证传递一个 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 类的实例，它是 <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的子类，除非用户指定了 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 之外的套接字类型。</p><p>一个客户端和服务器的例子，演示了如何监听 <code>&#39;connect&#39;</code> 事件：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-619" id="tab-620" checked><label data-title="ESM" for="tab-620">ESM</label><input type="radio" name="group-619" id="tab-621"><label data-title="CJS" for="tab-621">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createServer, request } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { connect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { URL } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个 HTTP 隧道代理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;okay&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connect&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">clientSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 连接到源服务器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hostname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`http://\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> serverSocket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hostname, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clientSocket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HTTP/1.1 200 Connection Established</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &#39;Proxy-agent: Node.js-Proxy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    serverSocket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(head);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    serverSocket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clientSocket);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clientSocket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(serverSocket);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在代理正在运行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1337</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 向隧道代理发出请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1337</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;CONNECT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;www.google.com:80&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connect&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;got connected!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通过 HTTP 隧道发出请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET / HTTP/1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                 &#39;Host: www.google.com:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                 &#39;Connection: close</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                 &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> net</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:net&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个 HTTP 隧道代理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;okay&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connect&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">clientSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 连接到源服务器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hostname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`http://\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> serverSocket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hostname, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clientSocket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HTTP/1.1 200 Connection Established</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &#39;Proxy-agent: Node.js-Proxy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    serverSocket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(head);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    serverSocket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clientSocket);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clientSocket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(serverSocket);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在代理正在运行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1337</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 向隧道代理发出请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1337</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;CONNECT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;www.google.com:80&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connect&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;got connected!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通过 HTTP 隧道发出请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET / HTTP/1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                 &#39;Host: www.google.com:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                 &#39;Connection: close</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                 &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div></div></div><h3 id="event-continue" tabindex="-1">事件: <code>&#39;continue&#39;</code> <a class="header-anchor" href="#event-continue" aria-label="Permalink to “事件: &#39;continue&#39;”">​</a></h3><p><strong>新增于: v0.3.2</strong></p><p>当服务器发送“100 Continue”HTTP 响应时触发，通常是因为请求包含“Expect: 100-continue”。这是一个客户端应该发送请求体的指令。</p><h3 id="event-finish" tabindex="-1">事件: <code>&#39;finish&#39;</code> <a class="header-anchor" href="#event-finish" aria-label="Permalink to “事件: &#39;finish&#39;”">​</a></h3><p><strong>新增于: v0.3.6</strong></p><p>当请求已发送时触发。更具体地说，此事件在响应头和主体的最后一段已交给操作系统，以便通过网络传输时触发。这并不意味着服务器已经接收到任何东西。</p><h3 id="event-information" tabindex="-1">事件: <code>&#39;information&#39;</code> <a class="header-anchor" href="#event-information" aria-label="Permalink to “事件: &#39;information&#39;”">​</a></h3><p><strong>新增于: v10.0.0</strong></p><ul><li><code>info</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>httpVersion</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>httpVersionMajor</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a></li><li><code>httpVersionMinor</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a></li><li><code>statusCode</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a></li><li><code>statusMessage</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>headers</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li><li><code>rawHeaders</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul></li></ul><p>当服务器发送 1xx 中间响应（不包括 101 Upgrade）时触发。此事件的监听器将接收到一个对象，其中包含 HTTP 版本、状态码、状态消息、键值对 header 对象，以及一个包含原始 header 名称及其对应值的数组。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-694" id="tab-695" checked><label data-title="ESM" for="tab-695">ESM</label><input type="radio" name="group-694" id="tab-696"><label data-title="CJS" for="tab-696">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/length_request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Make a request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;information&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Got information prior to main response: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statusCode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/length_request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Make a request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;information&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Got information prior to main response: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statusCode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></div></div><p>101 Upgrade 状态不会触发此事件，因为它们与传统的 HTTP 请求/响应链断裂，例如 web sockets、就地 TLS 升级或 HTTP 2.0。要获得 101 Upgrade 通知，请监听 <a href="/zh/nodejs/api/http#event-upgrade"><code>&#39;upgrade&#39;</code></a> 事件。</p><h3 id="event-response" tabindex="-1">事件: <code>&#39;response&#39;</code> <a class="header-anchor" href="#event-response" aria-label="Permalink to “事件: &#39;response&#39;”">​</a></h3><p><strong>加入版本: v0.1.0</strong></p><ul><li><code>response</code> <a href="/zh/nodejs/api/http#class-httpincomingmessage">&lt;http.IncomingMessage&gt;</a></li></ul><p>当收到对此请求的响应时触发。此事件仅触发一次。</p><h3 id="event-socket" tabindex="-1">事件: <code>&#39;socket&#39;</code> <a class="header-anchor" href="#event-socket" aria-label="Permalink to “事件: &#39;socket&#39;”">​</a></h3><p><strong>加入版本: v0.5.3</strong></p><ul><li><code>socket</code> <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>此事件保证传递一个 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 类的实例，它是 <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的子类，除非用户指定了除 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 之外的套接字类型。</p><h3 id="event-timeout" tabindex="-1">事件: <code>&#39;timeout&#39;</code> <a class="header-anchor" href="#event-timeout" aria-label="Permalink to “事件: &#39;timeout&#39;”">​</a></h3><p><strong>加入版本: v0.7.8</strong></p><p>当底层套接字因不活动而超时时发出。 这仅通知套接字已空闲。 必须手动销毁请求。</p><p>另见: <a href="/zh/nodejs/api/http#requestsettimeouttimeout-callback"><code>request.setTimeout()</code></a>。</p><h3 id="event-upgrade" tabindex="-1">事件: <code>&#39;upgrade&#39;</code> <a class="header-anchor" href="#event-upgrade" aria-label="Permalink to “事件: &#39;upgrade&#39;”">​</a></h3><p><strong>加入版本: v0.1.94</strong></p><ul><li><code>response</code> <a href="/zh/nodejs/api/http#class-httpincomingmessage">&lt;http.IncomingMessage&gt;</a></li><li><code>socket</code> <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li><li><code>head</code> <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a></li></ul><p>每次服务器响应升级请求时发出。 如果没有监听此事件且响应状态码为 101 Switching Protocols，则接收升级标头的客户端将关闭其连接。</p><p>此事件保证传递一个 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 类的实例，它是 <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的子类，除非用户指定了除 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 之外的套接字类型。</p><p>一个客户端服务器对，演示如何监听 <code>&#39;upgrade&#39;</code> 事件。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-777" id="tab-778" checked><label data-title="ESM" for="tab-778">ESM</label><input type="radio" name="group-777" id="tab-779"><label data-title="CJS" for="tab-779">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个 HTTP 服务器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;okay&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;upgrade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HTTP/1.1 101 Web Socket Protocol Handshake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &#39;Upgrade: WebSocket</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &#39;Connection: Upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(socket); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// echo back</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在服务器正在运行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1337</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 发送一个请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1337</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;Connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Upgrade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;Upgrade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;websocket&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;upgrade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">upgradeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;got upgraded!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个 HTTP 服务器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;okay&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;upgrade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HTTP/1.1 101 Web Socket Protocol Handshake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &#39;Upgrade: WebSocket</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &#39;Connection: Upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(socket); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// echo back</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在服务器正在运行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1337</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 发送一个请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1337</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;Connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Upgrade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;Upgrade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;websocket&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;upgrade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">upgradeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;got upgraded!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div></div></div><h3 id="requestabort" tabindex="-1"><code>request.abort()</code> <a class="header-anchor" href="#requestabort" aria-label="Permalink to “request.abort()”">​</a></h3><p><strong>Added in: v0.3.8</strong></p><p><strong>Deprecated since: v14.1.0, v13.14.0</strong></p><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 弃用: 请改用 <a href="/zh/nodejs/api/http#requestdestroyerror"><code>request.destroy()</code></a>。</p></div><p>将请求标记为中止。调用此方法将导致响应中剩余的数据被丢弃，并且套接字将被销毁。</p><h3 id="requestaborted" tabindex="-1"><code>request.aborted</code> <a class="header-anchor" href="#requestaborted" aria-label="Permalink to “request.aborted”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v17.0.0, v16.12.0</td><td>Deprecated since: v17.0.0, v16.12.0</td></tr><tr><td>v11.0.0</td><td>The <code>aborted</code> property is no longer a timestamp number.</td></tr><tr><td>v11.0.0</td><td><code>aborted</code> 属性不再是时间戳数字。</td></tr><tr><td>v0.11.14</td><td>Added in: v0.11.14</td></tr></tbody></table></div><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 弃用。请检查 <a href="/zh/nodejs/api/http#requestdestroyed"><code>request.destroyed</code></a> 代替。</p></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果请求已被中止，则 <code>request.aborted</code> 属性将为 <code>true</code>。</p><h3 id="requestconnection" tabindex="-1"><code>request.connection</code> <a class="header-anchor" href="#requestconnection" aria-label="Permalink to “request.connection”">​</a></h3><p><strong>Added in: v0.3.0</strong></p><p><strong>Deprecated since: v13.0.0</strong></p><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 弃用。请使用 <a href="/zh/nodejs/api/http#requestsocket"><code>request.socket</code></a>。</p></div><ul><li><a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>参见 <a href="/zh/nodejs/api/http#requestsocket"><code>request.socket</code></a>。</p><h3 id="requestcork" tabindex="-1"><code>request.cork()</code> <a class="header-anchor" href="#requestcork" aria-label="Permalink to “request.cork()”">​</a></h3><p><strong>Added in: v13.2.0, v12.16.0</strong></p><p>参见 <a href="/zh/nodejs/api/stream#writablecork"><code>writable.cork()</code></a>。</p><h3 id="requestenddata-encoding-callback" tabindex="-1"><code>request.end([data[, encoding]][, callback])</code> <a class="header-anchor" href="#requestenddata-encoding-callback" aria-label="Permalink to “request.end([data[, encoding]][, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v15.0.0</td><td>The <code>data</code> parameter can now be a <code>Uint8Array</code>.</td></tr><tr><td>v15.0.0</td><td><code>data</code> 参数现在可以是 <code>Uint8Array</code>。</td></tr><tr><td>v10.0.0</td><td>This method now returns a reference to <code>ClientRequest</code>.</td></tr><tr><td>v10.0.0</td><td>此方法现在返回对 <code>ClientRequest</code> 的引用。</td></tr><tr><td>v0.1.90</td><td>Added in: v0.1.90</td></tr></tbody></table></div><ul><li><code>data</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">&lt;Uint8Array&gt;</a></li><li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a></li></ul><p>完成发送请求。如果主体的任何部分未发送，它会将它们刷新到流。如果请求是分块的，这将发送终止符 <code>&#39;0\\r\\n\\r\\n&#39;</code>。</p><p>如果指定了 <code>data</code>，它等效于调用 <a href="/zh/nodejs/api/http#requestwritechunk-encoding-callback"><code>request.write(data, encoding)</code></a> 之后调用 <code>request.end(callback)</code>。</p><p>如果指定了 <code>callback</code>，它将在请求流完成时被调用。</p><h3 id="requestdestroyerror" tabindex="-1"><code>request.destroy([error])</code> <a class="header-anchor" href="#requestdestroyerror" aria-label="Permalink to “request.destroy([error])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.5.0</td><td>为了与其他 Readable 流保持一致，该函数返回 <code>this</code>。</td></tr><tr><td>v0.3.0</td><td>添加于：v0.3.0</td></tr></tbody></table></div><ul><li><code>error</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a> 可选，一个随 <code>&#39;error&#39;</code> 事件发出的错误。</li><li>返回值: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a></li></ul><p>销毁请求。 可选地发出一个 <code>&#39;error&#39;</code> 事件，并发出一个 <code>&#39;close&#39;</code> 事件。 调用此方法将导致响应中的剩余数据被丢弃，并且套接字被销毁。</p><p>有关更多详细信息，请参阅 <a href="/zh/nodejs/api/stream#writabledestroyerror"><code>writable.destroy()</code></a>。</p><h4 id="requestdestroyed" tabindex="-1"><code>request.destroyed</code> <a class="header-anchor" href="#requestdestroyed" aria-label="Permalink to “request.destroyed”">​</a></h4><p><strong>添加于: v14.1.0, v13.14.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果 <a href="/zh/nodejs/api/http#requestdestroyerror"><code>request.destroy()</code></a> 已被调用，则为 <code>true</code>。</p><p>有关更多详细信息，请参阅 <a href="/zh/nodejs/api/stream#writabledestroyed"><code>writable.destroyed</code></a>。</p><h3 id="requestfinished" tabindex="-1"><code>request.finished</code> <a class="header-anchor" href="#requestfinished" aria-label="Permalink to “request.finished”">​</a></h3><p><strong>添加于: v0.0.1</strong></p><p><strong>已弃用: v13.4.0, v12.16.0</strong></p><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - 弃用]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 已弃用。 使用 <a href="/zh/nodejs/api/http#requestwritableended"><code>request.writableEnded</code></a>。</p></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果 <a href="/zh/nodejs/api/http#requestenddata-encoding-callback"><code>request.end()</code></a> 已被调用，则 <code>request.finished</code> 属性将为 <code>true</code>。 如果请求是通过 <a href="/zh/nodejs/api/http#httpgetoptions-callback"><code>http.get()</code></a> 发起的，则会自动调用 <code>request.end()</code>。</p><h3 id="requestflushheaders" tabindex="-1"><code>request.flushHeaders()</code> <a class="header-anchor" href="#requestflushheaders" aria-label="Permalink to “request.flushHeaders()”">​</a></h3><p><strong>添加于: v1.6.0</strong></p><p>刷新请求头。</p><p>出于效率原因，Node.js 通常会缓冲请求头，直到调用 <code>request.end()</code> 或写入第一个请求数据块。 然后，它会尝试将请求头和数据打包到单个 TCP 数据包中。</p><p>这通常是期望的（它可以节省 TCP 往返行程），但并非在可能很晚才发送第一个数据时。 <code>request.flushHeaders()</code> 绕过优化并启动请求。</p><h3 id="requestgetheadername" tabindex="-1"><code>request.getHeader(name)</code> <a class="header-anchor" href="#requestgetheadername" aria-label="Permalink to “request.getHeader(name)”">​</a></h3><p><strong>Added in: v1.6.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a></li></ul><p>读取请求中的一个头部。名称不区分大小写。返回值的类型取决于提供给 <a href="/zh/nodejs/api/http#requestsetheadername-value"><code>request.setHeader()</code></a> 的参数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content-type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">byteLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;type=ninja&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;language=javascript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> contentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;contentType&#39; 是 &#39;text/html&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> contentLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;contentLength&#39; 是 number 类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;cookie&#39; 是 string[] 类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="requestgetheadernames" tabindex="-1"><code>request.getHeaderNames()</code> <a class="header-anchor" href="#requestgetheadernames" aria-label="Permalink to “request.getHeaderNames()”">​</a></h3><p><strong>Added in: v7.7.0</strong></p><ul><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>返回一个数组，包含当前传出头部的唯一名称。所有头部名称都是小写的。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo=bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar=baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headerNames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeaderNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// headerNames === [&#39;foo&#39;, &#39;cookie&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="requestgetheaders" tabindex="-1"><code>request.getHeaders()</code> <a class="header-anchor" href="#requestgetheaders" aria-label="Permalink to “request.getHeaders()”">​</a></h3><p><strong>Added in: v7.7.0</strong></p><ul><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>返回当前传出头部的浅拷贝。 由于使用了浅拷贝，因此可以修改数组值，而无需额外调用各种与头部相关的 http 模块方法。 返回对象的键是头部名称，值是相应的头部值。 所有头部名称都是小写的。</p><p><code>request.getHeaders()</code> 方法返回的对象<em>不是</em>从 JavaScript <code>Object</code> 原型继承的。 这意味着典型的 <code>Object</code> 方法（例如 <code>obj.toString()</code>、<code>obj.hasOwnProperty()</code> 等）未定义且<em>不起作用</em>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo=bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar=baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// headers === { foo: &#39;bar&#39;, &#39;cookie&#39;: [&#39;foo=bar&#39;, &#39;bar=baz&#39;] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="requestgetrawheadernames" tabindex="-1"><code>request.getRawHeaderNames()</code> <a class="header-anchor" href="#requestgetrawheadernames" aria-label="Permalink to “request.getRawHeaderNames()”">​</a></h3><p><strong>加入于: v15.13.0, v14.17.0</strong></p><ul><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>返回一个数组，其中包含当前传出的原始标头的唯一名称。标头名称以其精确的大小写设置返回。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Set-Cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo=bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar=baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headerNames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRawHeaderNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// headerNames === [&#39;Foo&#39;, &#39;Set-Cookie&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="requesthasheadername" tabindex="-1"><code>request.hasHeader(name)</code> <a class="header-anchor" href="#requesthasheadername" aria-label="Permalink to “request.hasHeader(name)”">​</a></h3><p><strong>加入于: v7.7.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果传出标头中当前设置了由 <code>name</code> 标识的标头，则返回 <code>true</code>。 标头名称匹配不区分大小写。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasContentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content-type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="requestmaxheaderscount" tabindex="-1"><code>request.maxHeadersCount</code> <a class="header-anchor" href="#requestmaxheaderscount" aria-label="Permalink to “request.maxHeadersCount”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <strong>默认值:</strong> <code>2000</code></li></ul><p>限制最大响应标头计数。 如果设置为 0，则不应用任何限制。</p><h3 id="requestpath" tabindex="-1"><code>request.path</code> <a class="header-anchor" href="#requestpath" aria-label="Permalink to “request.path”">​</a></h3><p><strong>加入于: v0.4.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 请求路径。</li></ul><h3 id="requestmethod" tabindex="-1"><code>request.method</code> <a class="header-anchor" href="#requestmethod" aria-label="Permalink to “request.method”">​</a></h3><p><strong>加入于: v0.1.97</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 请求方法。</li></ul><h3 id="requesthost" tabindex="-1"><code>request.host</code> <a class="header-anchor" href="#requesthost" aria-label="Permalink to “request.host”">​</a></h3><p><strong>加入于: v14.5.0, v12.19.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 请求主机。</li></ul><h3 id="requestprotocol" tabindex="-1"><code>request.protocol</code> <a class="header-anchor" href="#requestprotocol" aria-label="Permalink to “request.protocol”">​</a></h3><p><strong>加入于: v14.5.0, v12.19.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 请求协议。</li></ul><h3 id="requestremoveheadername" tabindex="-1"><code>request.removeHeader(name)</code> <a class="header-anchor" href="#requestremoveheadername" aria-label="Permalink to “request.removeHeader(name)”">​</a></h3><p><strong>加入于: v1.6.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>删除已在标头对象中定义的标头。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="requestreusedsocket" tabindex="-1"><code>request.reusedSocket</code> <a class="header-anchor" href="#requestreusedsocket" aria-label="Permalink to “request.reusedSocket”">​</a></h3><p><strong>新增于: v13.0.0, v12.16.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 请求是否通过重用套接字发送。</li></ul><p>当通过启用 keep-alive 的代理发送请求时，底层的套接字可能会被重用。但是，如果服务器在不适当的时候关闭连接，客户端可能会遇到 &#39;ECONNRESET&#39; 错误。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-1294" id="tab-1295" checked><label data-title="ESM" for="tab-1295">ESM</label><input type="radio" name="group-1294" id="tab-1296"><label data-title="CJS" for="tab-1296">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认情况下，服务器具有 5 秒的 keep-alive 超时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 适配一个 keep-alive 代理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:3000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { agent }, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 什么也不做</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以 5 秒的间隔发送请求，因此很容易达到空闲超时</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认情况下，服务器具有 5 秒的 keep-alive 超时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 适配一个 keep-alive 代理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:3000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { agent }, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 什么也不做</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以 5 秒的间隔发送请求，因此很容易达到空闲超时</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></div></div><p>通过标记请求是否重用了套接字，我们可以基于它进行自动错误重试。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-1301" id="tab-1302" checked><label data-title="ESM" for="tab-1302">ESM</label><input type="radio" name="group-1301" id="tab-1303"><label data-title="CJS" for="tab-1303">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ keepAlive: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> retriableRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:3000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { agent }, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 检查是否需要重试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (req.reusedSocket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ECONNRESET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        retriableRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retriableRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ keepAlive: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> retriableRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:3000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { agent }, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 检查是否需要重试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (req.reusedSocket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ECONNRESET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        retriableRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retriableRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></div></div><h3 id="requestsetheadername-value" tabindex="-1"><code>request.setHeader(name, value)</code> <a class="header-anchor" href="#requestsetheadername-value" aria-label="Permalink to “request.setHeader(name, value)”">​</a></h3><p><strong>添加于: v1.6.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a></li></ul><p>为 headers 对象设置单个 header 值。 如果此 header 已经存在于待发送的 headers 中，则其值将被替换。 在此处使用字符串数组可以发送具有相同名称的多个 headers。 非字符串值将不经修改地存储。 因此，<a href="/zh/nodejs/api/http#requestgetheadername"><code>request.getHeader()</code></a> 可能会返回非字符串值。 但是，非字符串值将在网络传输时转换为字符串。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;type=ninja&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;language=javascript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当 value 是字符串时，如果它包含 <code>latin1</code> 编码之外的字符，则会抛出异常。</p><p>如果需要在 value 中传递 UTF-8 字符，请使用 <a href="https://www.rfc-editor.org/rfc/rfc8187.txt" target="_blank" rel="noreferrer">RFC 8187</a> 标准对 value 进行编码。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Rock 🎵.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Disposition&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`attachment; filename*=utf-8&#39;&#39;\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeURIComponent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="requestsetnodelaynodelay" tabindex="-1"><code>request.setNoDelay([noDelay])</code> <a class="header-anchor" href="#requestsetnodelaynodelay" aria-label="Permalink to “request.setNoDelay([noDelay])”">​</a></h3><p><strong>添加于: v0.5.9</strong></p><ul><li><code>noDelay</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>一旦将 socket 分配给此请求并建立连接，将调用 <a href="/zh/nodejs/api/net#socketsetnodelaynodelay"><code>socket.setNoDelay()</code></a>。</p><h3 id="requestsetsocketkeepaliveenable-initialdelay" tabindex="-1"><code>request.setSocketKeepAlive([enable][, initialDelay])</code> <a class="header-anchor" href="#requestsetsocketkeepaliveenable-initialdelay" aria-label="Permalink to “request.setSocketKeepAlive([enable][, initialDelay])”">​</a></h3><p><strong>添加于: v0.5.9</strong></p><ul><li><code>enable</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li><li><code>initialDelay</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>一旦将 socket 分配给此请求并建立连接，将调用 <a href="/zh/nodejs/api/net#socketsetkeepaliveenable-initialdelay"><code>socket.setKeepAlive()</code></a>。</p><h3 id="requestsettimeouttimeout-callback" tabindex="-1"><code>request.setTimeout(timeout[, callback])</code> <a class="header-anchor" href="#requestsettimeouttimeout-callback" aria-label="Permalink to “request.setTimeout(timeout[, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v9.0.0</td><td>仅在套接字连接时才一致地设置套接字超时。</td></tr><tr><td>v0.5.9</td><td>添加于: v0.5.9</td></tr></tbody></table></div><ul><li><code>timeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 请求超时的毫秒数。</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 超时发生时要调用的可选函数。 与绑定到 <code>&#39;timeout&#39;</code> 事件相同。</li><li>返回: <a href="/zh/nodejs/api/http#class-httpclientrequest">&lt;http.ClientRequest&gt;</a></li></ul><p>一旦将套接字分配给此请求并连接后，将调用 <a href="/zh/nodejs/api/net#socketsettimeouttimeout-callback"><code>socket.setTimeout()</code></a>。</p><h3 id="requestsocket" tabindex="-1"><code>request.socket</code> <a class="header-anchor" href="#requestsocket" aria-label="Permalink to “request.socket”">​</a></h3><p><strong>添加于: v0.3.0</strong></p><ul><li><a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>对底层套接字的引用。 通常，用户不会希望访问此属性。 特别是，由于协议解析器附加到套接字的方式，套接字不会发出 <code>&#39;readable&#39;</code> 事件。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-1446" id="tab-1447" checked><label data-title="ESM" for="tab-1447">ESM</label><input type="radio" name="group-1446" id="tab-1448"><label data-title="CJS" for="tab-1448">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;www.google.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">once</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;response&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.socket.localAddress;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.socket.localPort;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Your IP address is \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} and your source port is \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Consume response object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;www.google.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">once</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;response&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.socket.localAddress;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.socket.localPort;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Your IP address is \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} and your source port is \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Consume response object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div></div><p>除非用户指定了 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 之外的套接字类型，否则此属性保证是 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 类的实例，<a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的子类。</p><h3 id="requestuncork" tabindex="-1"><code>request.uncork()</code> <a class="header-anchor" href="#requestuncork" aria-label="Permalink to “request.uncork()”">​</a></h3><p><strong>Added in: v13.2.0, v12.16.0</strong></p><p>参见 <a href="/zh/nodejs/api/stream#writableuncork"><code>writable.uncork()</code></a>。</p><h3 id="requestwritableended" tabindex="-1"><code>request.writableEnded</code> <a class="header-anchor" href="#requestwritableended" aria-label="Permalink to “request.writableEnded”">​</a></h3><p><strong>Added in: v12.9.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果 <a href="/zh/nodejs/api/http#requestenddata-encoding-callback"><code>request.end()</code></a> 已经被调用，则为 <code>true</code>。此属性不指示数据是否已刷新，要判断数据是否已刷新请使用 <a href="/zh/nodejs/api/http#requestwritablefinished"><code>request.writableFinished</code></a> 代替。</p><h3 id="requestwritablefinished" tabindex="-1"><code>request.writableFinished</code> <a class="header-anchor" href="#requestwritablefinished" aria-label="Permalink to “request.writableFinished”">​</a></h3><p><strong>Added in: v12.7.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果所有数据都已刷新到底层系统，则为 <code>true</code>，紧接在发出 <a href="/zh/nodejs/api/http#event-finish"><code>&#39;finish&#39;</code></a> 事件之前。</p><h3 id="requestwritechunk-encoding-callback" tabindex="-1"><code>request.write(chunk[, encoding][, callback])</code> <a class="header-anchor" href="#requestwritechunk-encoding-callback" aria-label="Permalink to “request.write(chunk[, encoding][, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>更改</th></tr></thead><tbody><tr><td>v15.0.0</td><td><code>chunk</code> 参数现在可以是 <code>Uint8Array</code>。</td></tr><tr><td>v0.1.29</td><td>添加于: v0.1.29</td></tr></tbody></table></div><ul><li><code>chunk</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">&lt;Uint8Array&gt;</a></li><li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>发送正文的一个数据块。 此方法可以多次调用。 如果未设置 <code>Content-Length</code>，则数据将自动以 HTTP 分块传输编码进行编码，以便服务器知道数据何时结束。 将添加 <code>Transfer-Encoding: chunked</code> 标头。 需要调用 <a href="/zh/nodejs/api/http#requestenddata-encoding-callback"><code>request.end()</code></a> 来完成请求的发送。</p><p><code>encoding</code> 参数是可选的，仅在 <code>chunk</code> 是字符串时适用。 默认为 <code>&#39;utf8&#39;</code>。</p><p><code>callback</code> 参数是可选的，并且仅当数据块为非空时，才会在刷新此数据块时调用该参数。</p><p>如果整个数据成功刷新到内核缓冲区，则返回 <code>true</code>。 如果全部或部分数据在用户内存中排队，则返回 <code>false</code>。 当缓冲区再次空闲时，将发出 <code>&#39;drain&#39;</code>。</p><p>当使用空字符串或缓冲区调用 <code>write</code> 函数时，它不执行任何操作并等待更多输入。</p><h2 id="class-httpserver" tabindex="-1">类：<code>http.Server</code> <a class="header-anchor" href="#class-httpserver" aria-label="Permalink to “类：http.Server”">​</a></h2><p><strong>添加于：v0.1.17</strong></p><ul><li>继承自：<a href="/zh/nodejs/api/net#class-netserver">&lt;net.Server&gt;</a></li></ul><h3 id="event-checkcontinue" tabindex="-1">事件：<code>&#39;checkContinue&#39;</code> <a class="header-anchor" href="#event-checkcontinue" aria-label="Permalink to “事件：&#39;checkContinue&#39;”">​</a></h3><p><strong>添加于：v0.3.0</strong></p><ul><li><code>request</code> <a href="/zh/nodejs/api/http#class-httpincomingmessage">&lt;http.IncomingMessage&gt;</a></li><li><code>response</code> <a href="/zh/nodejs/api/http#class-httpserverresponse">&lt;http.ServerResponse&gt;</a></li></ul><p>每次收到带有 HTTP <code>Expect: 100-continue</code> 的请求时触发。 如果未监听此事件，服务器将自动响应 <code>100 Continue</code> (如果适用)。</p><p>处理此事件包括调用 <a href="/zh/nodejs/api/http#responsewritecontinue"><code>response.writeContinue()</code></a>，如果客户端应继续发送请求体，或者生成适当的 HTTP 响应（例如 400 Bad Request），如果客户端不应继续发送请求体。</p><p>当此事件被触发和处理时，<code>&#39;request&#39;</code> 事件（[/api/http#event-request]）将不会被触发。</p><h3 id="event-checkexpectation" tabindex="-1">事件：<code>&#39;checkExpectation&#39;</code> <a class="header-anchor" href="#event-checkexpectation" aria-label="Permalink to “事件：&#39;checkExpectation&#39;”">​</a></h3><p><strong>添加于：v5.5.0</strong></p><ul><li><code>request</code> <a href="/zh/nodejs/api/http#class-httpincomingmessage">&lt;http.IncomingMessage&gt;</a></li><li><code>response</code> <a href="/zh/nodejs/api/http#class-httpserverresponse">&lt;http.ServerResponse&gt;</a></li></ul><p>每次收到带有 HTTP <code>Expect</code> 头的请求时触发，其中该值不是 <code>100-continue</code>。 如果未监听此事件，服务器将自动响应 <code>417 Expectation Failed</code> (如果适用)。</p><p>当此事件被触发和处理时，<code>&#39;request&#39;</code> 事件（[/api/http#event-request]）将不会被触发。</p><h3 id="event-clienterror" tabindex="-1">事件：<code>&#39;clientError&#39;</code> <a class="header-anchor" href="#event-clienterror" aria-label="Permalink to “事件：&#39;clientError&#39;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v12.0.0</td><td>如果发生 HPE_HEADER_OVERFLOW 错误，默认行为将返回 431 Request Header Fields Too Large。</td></tr><tr><td>v9.4.0</td><td><code>rawPacket</code> 是刚解析的当前缓冲区。 将此缓冲区添加到 <code>&#39;clientError&#39;</code> 事件的错误对象中，使开发人员可以记录损坏的数据包。</td></tr><tr><td>v6.0.0</td><td>如果附加了 <code>&#39;clientError&#39;</code> 的监听器，则不再执行在 <code>socket</code> 上调用 <code>.destroy()</code> 的默认操作。</td></tr><tr><td>v0.1.94</td><td>添加于：v0.1.94</td></tr></tbody></table></div><ul><li><code>exception</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a></li><li><code>socket</code> <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>如果客户端连接发出 <code>&#39;error&#39;</code> 事件，它将转发到此处。 此事件的监听器负责关闭/销毁底层套接字。 例如，人们可能希望使用自定义 HTTP 响应更优雅地关闭套接字，而不是突然断开连接。 套接字<strong>必须在监听器结束之前关闭或销毁</strong>。</p><p>保证此事件传递一个 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 类的实例，它是 <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的子类，除非用户指定了除 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 之外的套接字类型。</p><p>默认行为是尝试使用 HTTP &#39;400 Bad Request&#39; 关闭套接字，或者在出现 <a href="/zh/nodejs/api/errors#hpe-header-overflow"><code>HPE_HEADER_OVERFLOW</code></a> 错误的情况下，使用 HTTP &#39;431 Request Header Fields Too Large&#39; 关闭套接字。 如果套接字不可写或当前附加的 <a href="/zh/nodejs/api/http#class-httpserverresponse"><code>http.ServerResponse</code></a> 的标头已发送，则立即销毁它。</p><p><code>socket</code> 是发生错误的 <a href="/zh/nodejs/api/net#class-netsocket"><code>net.Socket</code></a> 对象。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-1705" id="tab-1706" checked><label data-title="ESM" for="tab-1706">ESM</label><input type="radio" name="group-1705" id="tab-1707"><label data-title="CJS" for="tab-1707">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;clientError&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HTTP/1.1 400 Bad Request</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;clientError&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HTTP/1.1 400 Bad Request</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div></div><p>当 <code>&#39;clientError&#39;</code> 事件发生时，没有 <code>request</code> 或 <code>response</code> 对象，因此发送的任何 HTTP 响应，包括响应头和有效负载，<em>必须</em>直接写入 <code>socket</code> 对象。 必须小心确保响应是格式正确的 HTTP 响应消息。</p><p><code>err</code> 是 <code>Error</code> 的一个实例，带有两个额外的列：</p><ul><li><code>bytesParsed</code>：Node.js 可能已正确解析的请求数据包的字节数计数；</li><li><code>rawPacket</code>：当前请求的原始数据包。</li></ul><p>在某些情况下，客户端已经收到响应，并且/或者套接字已经被销毁，例如在 <code>ECONNRESET</code> 错误的情况下。 在尝试向套接字发送数据之前，最好检查它是否仍然可写。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;clientError&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ECONNRESET&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.writable) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HTTP/1.1 400 Bad Request</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="event-close_1" tabindex="-1">Event: <code>&#39;close&#39;</code> <a class="header-anchor" href="#event-close_1" aria-label="Permalink to “Event: &#39;close&#39;”">​</a></h3><p><strong>添加于: v0.1.4</strong></p><p>服务器关闭时触发。</p><h3 id="event-connect_1" tabindex="-1">Event: <code>&#39;connect&#39;</code> <a class="header-anchor" href="#event-connect_1" aria-label="Permalink to “Event: &#39;connect&#39;”">​</a></h3><p><strong>添加于: v0.7.0</strong></p><ul><li><code>request</code> <a href="/zh/nodejs/api/http#class-httpincomingmessage">&lt;http.IncomingMessage&gt;</a> HTTP 请求的参数，与 <a href="/zh/nodejs/api/http#event-request"><code>&#39;request&#39;</code></a> 事件中的参数相同。</li><li><code>socket</code> <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 服务器和客户端之间的网络套接字</li><li><code>head</code> <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> 隧道流的第一个数据包（可能为空）</li></ul><p>每次客户端请求 HTTP <code>CONNECT</code> 方法时都会触发。 如果没有监听此事件，则请求 <code>CONNECT</code> 方法的客户端的连接将被关闭。</p><p>保证此事件传递的是 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 类的一个实例，它是 <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的一个子类，除非用户指定了 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 以外的套接字类型。</p><p>在此事件发出后，请求的套接字将没有 <code>&#39;data&#39;</code> 事件监听器，这意味着需要绑定它才能处理发送到该套接字上服务器的数据。</p><h3 id="event-connection" tabindex="-1">Event: <code>&#39;connection&#39;</code> <a class="header-anchor" href="#event-connection" aria-label="Permalink to “Event: &#39;connection&#39;”">​</a></h3><p><strong>添加于: v0.1.0</strong></p><ul><li><code>socket</code> <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>当建立新的 TCP 流时，将触发此事件。 <code>socket</code> 通常是 <a href="/zh/nodejs/api/net#class-netsocket"><code>net.Socket</code></a> 类型的对象。 通常，用户不希望访问此事件。 特别是，由于协议解析器如何附加到套接字，因此套接字不会发出 <code>&#39;readable&#39;</code> 事件。 也可以在 <code>request.socket</code> 访问该 <code>socket</code>。</p><p>用户也可以显式地触发此事件，以将连接注入到 HTTP 服务器中。 在这种情况下，可以传递任何 <a href="/zh/nodejs/api/stream#class-streamduplex"><code>Duplex</code></a> 流。</p><p>如果在此处调用 <code>socket.setTimeout()</code>，则当套接字处理完一个请求时，超时将被 <code>server.keepAliveTimeout</code> 替换（如果 <code>server.keepAliveTimeout</code> 非零）。</p><p>保证此事件传递的是 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 类的一个实例，它是 <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的一个子类，除非用户指定了 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 以外的套接字类型。</p><h3 id="event-droprequest" tabindex="-1">事件: <code>&#39;dropRequest&#39;</code> <a class="header-anchor" href="#event-droprequest" aria-label="Permalink to “事件: &#39;dropRequest&#39;”">​</a></h3><p><strong>加入于: v18.7.0, v16.17.0</strong></p><ul><li><code>request</code> <a href="/zh/nodejs/api/http#class-httpincomingmessage">&lt;http.IncomingMessage&gt;</a> HTTP 请求的参数，与 <a href="/zh/nodejs/api/http#event-request"><code>&#39;request&#39;</code></a> 事件中的参数相同</li><li><code>socket</code> <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 服务器和客户端之间的网络套接字</li></ul><p>当套接字上的请求数达到 <code>server.maxRequestsPerSocket</code> 的阈值时，服务器将丢弃新请求并发出 <code>&#39;dropRequest&#39;</code> 事件，然后向客户端发送 <code>503</code>。</p><h3 id="event-request" tabindex="-1">事件: <code>&#39;request&#39;</code> <a class="header-anchor" href="#event-request" aria-label="Permalink to “事件: &#39;request&#39;”">​</a></h3><p><strong>加入于: v0.1.0</strong></p><ul><li><code>request</code> <a href="/zh/nodejs/api/http#class-httpincomingmessage">&lt;http.IncomingMessage&gt;</a></li><li><code>response</code> <a href="/zh/nodejs/api/http#class-httpserverresponse">&lt;http.ServerResponse&gt;</a></li></ul><p>每次收到请求时都会触发。 每个连接可能有多个请求（在 HTTP Keep-Alive 连接的情况下）。</p><h3 id="event-upgrade_1" tabindex="-1">事件: <code>&#39;upgrade&#39;</code> <a class="header-anchor" href="#event-upgrade_1" aria-label="Permalink to “事件: &#39;upgrade&#39;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.0.0</td><td>如果客户端发送 Upgrade 标头，则不再监听此事件将不会导致套接字被销毁。</td></tr><tr><td>v0.1.94</td><td>加入于: v0.1.94</td></tr></tbody></table></div><ul><li><code>request</code> <a href="/zh/nodejs/api/http#class-httpincomingmessage">&lt;http.IncomingMessage&gt;</a> HTTP 请求的参数，与 <a href="/zh/nodejs/api/http#event-request"><code>&#39;request&#39;</code></a> 事件中的参数相同</li><li><code>socket</code> <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 服务器和客户端之间的网络套接字</li><li><code>head</code> <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> 升级流的第一个数据包（可能为空）</li></ul><p>每次客户端请求 HTTP 升级时都会触发。 监听此事件是可选的，客户端不能坚持协议更改。</p><p>在此事件发出后，请求的套接字将没有 <code>&#39;data&#39;</code> 事件侦听器，这意味着需要绑定它才能处理通过该套接字发送到服务器的数据。</p><p>保证此事件传递一个 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 类的实例，它是 <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的子类，除非用户指定了 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 之外的套接字类型。</p><h3 id="serverclosecallback" tabindex="-1"><code>server.close([callback])</code> <a class="header-anchor" href="#serverclosecallback" aria-label="Permalink to “server.close([callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v19.0.0</td><td>此方法在返回前关闭空闲连接。</td></tr><tr><td>v0.1.90</td><td>添加于: v0.1.90</td></tr></tbody></table></div><ul><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li></ul><p>停止服务器接受新的连接，并关闭所有连接到此服务器的连接，这些连接未发送请求或等待响应。 参见 <a href="/zh/nodejs/api/net#serverclosecallback"><code>net.Server.close()</code></a>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ keepAliveTimeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10 秒后关闭服务器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server on port 8000 closed successfully&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="servercloseallconnections" tabindex="-1"><code>server.closeAllConnections()</code> <a class="header-anchor" href="#servercloseallconnections" aria-label="Permalink to “server.closeAllConnections()”">​</a></h3><p><strong>添加于: v18.2.0</strong></p><p>关闭所有已建立的连接到此服务器的 HTTP(S) 连接，包括发送请求或等待响应的活动连接。 这 <em>不</em> 会销毁升级到不同协议的套接字，例如 WebSocket 或 HTTP/2。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ keepAliveTimeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10 秒后关闭服务器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server on port 8000 closed successfully&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 关闭所有连接，确保服务器成功关闭</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeAllConnections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="servercloseidleconnections" tabindex="-1"><code>server.closeIdleConnections()</code> <a class="header-anchor" href="#servercloseidleconnections" aria-label="Permalink to “server.closeIdleConnections()”">​</a></h3><p><strong>添加于: v18.2.0</strong></p><p>关闭所有连接到此服务器的连接，这些连接未发送请求或等待响应。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ keepAliveTimeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10 秒后关闭服务器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server on port 8000 closed successfully&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 关闭空闲连接，例如 keep-alive 连接。 一旦剩余的活动连接终止，服务器将关闭</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeIdleConnections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="serverheaderstimeout" tabindex="-1"><code>server.headersTimeout</code> <a class="header-anchor" href="#serverheaderstimeout" aria-label="Permalink to “server.headersTimeout”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v19.4.0, v18.14.0</td><td>默认值现在设置为 60000（60 秒）或 <code>requestTimeout</code> 中的最小值。</td></tr><tr><td>v11.3.0, v10.14.0</td><td>添加于: v11.3.0, v10.14.0</td></tr></tbody></table></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <strong>默认值:</strong> <a href="/zh/nodejs/api/http#serverrequesttimeout"><code>server.requestTimeout</code></a> 或 <code>60000</code> 中的最小值。</li></ul><p>限制解析器等待接收完整 HTTP 标头的时间量。</p><p>如果超时到期，服务器将响应状态 408，而不会将请求转发到请求侦听器，然后关闭连接。</p><p>必须将其设置为非零值（例如 120 秒），以防止在服务器部署时前面没有反向代理的情况下，可能发生的拒绝服务攻击。</p><h3 id="serverlisten" tabindex="-1"><code>server.listen()</code> <a class="header-anchor" href="#serverlisten" aria-label="Permalink to “server.listen()”">​</a></h3><p>启动 HTTP 服务器以侦听连接。 此方法与 <a href="/zh/nodejs/api/net#class-netserver"><code>net.Server</code></a> 中的 <a href="/zh/nodejs/api/net#serverlisten"><code>server.listen()</code></a> 相同。</p><h3 id="serverlistening" tabindex="-1"><code>server.listening</code> <a class="header-anchor" href="#serverlistening" aria-label="Permalink to “server.listening”">​</a></h3><p><strong>添加于: v5.7.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 指示服务器是否正在侦听连接。</li></ul><h3 id="servermaxheaderscount" tabindex="-1"><code>server.maxHeadersCount</code> <a class="header-anchor" href="#servermaxheaderscount" aria-label="Permalink to “server.maxHeadersCount”">​</a></h3><p><strong>添加于: v0.7.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <strong>默认值:</strong> <code>2000</code></li></ul><p>限制最大传入标头计数。 如果设置为 0，则不应用任何限制。</p><h3 id="serverrequesttimeout" tabindex="-1"><code>server.requestTimeout</code> <a class="header-anchor" href="#serverrequesttimeout" aria-label="Permalink to “server.requestTimeout”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v18.0.0</td><td>默认请求超时从无超时更改为 300 秒（5 分钟）。</td></tr><tr><td>v14.11.0</td><td>添加于: v14.11.0</td></tr></tbody></table></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <strong>默认值:</strong> <code>300000</code></li></ul><p>设置从客户端接收整个请求的超时值（以毫秒为单位）。</p><p>如果超时到期，服务器将响应状态 408，而不会将请求转发到请求侦听器，然后关闭连接。</p><p>必须将其设置为非零值（例如 120 秒），以防止在服务器部署时前面没有反向代理的情况下，可能发生的拒绝服务攻击。</p><h3 id="serversettimeoutmsecs-callback" tabindex="-1"><code>server.setTimeout([msecs][, callback])</code> <a class="header-anchor" href="#serversettimeoutmsecs-callback" aria-label="Permalink to “server.setTimeout([msecs][, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v13.0.0</td><td>默认超时时间从 120 秒更改为 0 (无超时)。</td></tr><tr><td>v0.9.12</td><td>加入于: v0.9.12</td></tr></tbody></table></div><ul><li><code>msecs</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <strong>默认值:</strong> 0 (无超时)</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="/zh/nodejs/api/http#class-httpserver">&lt;http.Server&gt;</a></li></ul><p>设置套接字的超时值，并在 Server 对象上触发 <code>&#39;timeout&#39;</code> 事件，如果发生超时，则将套接字作为参数传递。</p><p>如果 Server 对象上有 <code>&#39;timeout&#39;</code> 事件侦听器，则将使用超时的套接字作为参数调用它。</p><p>默认情况下，Server 不会使套接字超时。 但是，如果将回调分配给 Server 的 <code>&#39;timeout&#39;</code> 事件，则必须显式处理超时。</p><h3 id="servermaxrequestspersocket" tabindex="-1"><code>server.maxRequestsPerSocket</code> <a class="header-anchor" href="#servermaxrequestspersocket" aria-label="Permalink to “server.maxRequestsPerSocket”">​</a></h3><p><strong>加入于: v16.10.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 每个套接字的请求数。 <strong>默认值:</strong> 0 (无限制)</li></ul><p>套接字在关闭 keep alive 连接之前可以处理的最大请求数。</p><p>值为 <code>0</code> 将禁用限制。</p><p>达到限制时，它会将 <code>Connection</code> 标头值设置为 <code>close</code>，但实际上不会关闭连接，达到限制后发送的后续请求将获得 <code>503 Service Unavailable</code> 作为响应。</p><h3 id="servertimeout" tabindex="-1"><code>server.timeout</code> <a class="header-anchor" href="#servertimeout" aria-label="Permalink to “server.timeout”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v13.0.0</td><td>默认超时时间从 120 秒更改为 0 (无超时)。</td></tr><tr><td>v0.9.12</td><td>加入于: v0.9.12</td></tr></tbody></table></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 超时时间，以毫秒为单位。 <strong>默认值:</strong> 0 (无超时)</li></ul><p>在假定套接字已超时之前的不活动毫秒数。</p><p>值为 <code>0</code> 将禁用传入连接的超时行为。</p><p>套接字超时逻辑是在连接时设置的，因此更改此值只会影响到服务器的新连接，而不会影响任何现有连接。</p><h3 id="serverkeepalivetimeout" tabindex="-1"><code>server.keepAliveTimeout</code> <a class="header-anchor" href="#serverkeepalivetimeout" aria-label="Permalink to “server.keepAliveTimeout”">​</a></h3><p><strong>新增于: v8.0.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 超时时间，单位为毫秒。 <strong>默认值:</strong> <code>5000</code> (5 秒)。</li></ul><p>服务器在完成写入最后一个响应后，需要等待额外传入数据的非活动毫秒数，超过此时间后，套接字将被销毁。 如果服务器在 keep-alive 超时触发之前收到新数据，它将重置常规的非活动超时，即 <a href="/zh/nodejs/api/http#servertimeout"><code>server.timeout</code></a>。</p><p>值为 <code>0</code> 将禁用传入连接上的 keep-alive 超时行为。 值为 <code>0</code> 使 http 服务器的行为类似于 Node.js 8.0.0 之前的版本，这些版本没有 keep-alive 超时。</p><p>套接字超时逻辑是在连接时设置的，因此更改此值只会影响到服务器的新连接，而不会影响任何现有连接。</p><h3 id="serversymbolasyncdispose" tabindex="-1"><code>server[Symbol.asyncDispose]()</code> <a class="header-anchor" href="#serversymbolasyncdispose" aria-label="Permalink to “server[Symbol.asyncDispose]()”">​</a></h3><p><strong>新增于: v20.4.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性</p></div><p>调用 <a href="/zh/nodejs/api/http#serverclosecallback"><code>server.close()</code></a> 并返回一个在服务器关闭时完成的 promise。</p><h2 id="class-httpserverresponse" tabindex="-1">类: <code>http.ServerResponse</code> <a class="header-anchor" href="#class-httpserverresponse" aria-label="Permalink to “类: http.ServerResponse”">​</a></h2><p><strong>新增于: v0.1.17</strong></p><ul><li>继承自: <a href="/zh/nodejs/api/http#class-httpoutgoingmessage">&lt;http.OutgoingMessage&gt;</a></li></ul><p>此对象由 HTTP 服务器在内部创建，而不是由用户创建。 它作为第二个参数传递给 <a href="/zh/nodejs/api/http#event-request"><code>&#39;request&#39;</code></a> 事件。</p><h3 id="event-close_2" tabindex="-1">事件: <code>&#39;close&#39;</code> <a class="header-anchor" href="#event-close_2" aria-label="Permalink to “事件: &#39;close&#39;”">​</a></h3><p><strong>新增于: v0.6.7</strong></p><p>表明响应已完成，或其底层连接已提前终止（在响应完成之前）。</p><h3 id="event-finish_1" tabindex="-1">事件: <code>&#39;finish&#39;</code> <a class="header-anchor" href="#event-finish_1" aria-label="Permalink to “事件: &#39;finish&#39;”">​</a></h3><p><strong>新增于: v0.3.6</strong></p><p>当响应已发送时触发。 更具体地说，当响应头和主体的最后一段已交给操作系统以便通过网络传输时，会触发此事件。 这并不意味着客户端已经收到了任何东西。</p><h3 id="responseaddtrailersheaders" tabindex="-1"><code>response.addTrailers(headers)</code> <a class="header-anchor" href="#responseaddtrailersheaders" aria-label="Permalink to “response.addTrailers(headers)”">​</a></h3><p><strong>新增于: v0.3.0</strong></p><ul><li><code>headers</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>此方法向响应添加 HTTP 尾部标头（位于消息末尾的标头）。</p><p>仅当响应使用分块编码时才会发出尾部；如果不是（例如，如果请求是 HTTP/1.0），则它们将被静默丢弃。</p><p>HTTP 要求发送 <code>Trailer</code> 标头才能发出尾部，并在其值中包含标头字段列表。例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                          &#39;Trailer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-MD5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTrailers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-MD5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;7895bf4b8828b55ceaf47747b4bca667&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>尝试设置包含无效字符的标头字段名称或值将导致抛出 <a href="/zh/nodejs/api/errors#class-typeerror"><code>TypeError</code></a>。</p><h3 id="responseconnection" tabindex="-1"><code>response.connection</code> <a class="header-anchor" href="#responseconnection" aria-label="Permalink to “response.connection”">​</a></h3><p><strong>新增于: v0.3.0</strong></p><p><strong>自 v13.0.0 起已弃用</strong></p><div class="danger custom-block"><p class="custom-block-title">[稳定: 0 - 已弃用]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 已弃用。使用 <a href="/zh/nodejs/api/http#responsesocket"><code>response.socket</code></a>。</p></div><ul><li><a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>参见 <a href="/zh/nodejs/api/http#responsesocket"><code>response.socket</code></a>。</p><h3 id="responsecork" tabindex="-1"><code>response.cork()</code> <a class="header-anchor" href="#responsecork" aria-label="Permalink to “response.cork()”">​</a></h3><p><strong>新增于: v13.2.0, v12.16.0</strong></p><p>参见 <a href="/zh/nodejs/api/stream#writablecork"><code>writable.cork()</code></a>。</p><h3 id="responseenddata-encoding-callback" tabindex="-1"><code>response.end([data[, encoding]][, callback])</code> <a class="header-anchor" href="#responseenddata-encoding-callback" aria-label="Permalink to “response.end([data[, encoding]][, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.0.0</td><td><code>data</code> 参数现在可以是 <code>Uint8Array</code>。</td></tr><tr><td>v10.0.0</td><td>此方法现在返回对 <code>ServerResponse</code> 的引用。</td></tr><tr><td>v0.1.90</td><td>新增于: v0.1.90</td></tr></tbody></table></div><ul><li><code>data</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">&lt;Uint8Array&gt;</a></li><li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a></li></ul><p>此方法向服务器发出信号，表明所有响应标头和正文都已发送；服务器应认为此消息已完成。 必须在每个响应上调用方法 <code>response.end()</code>。</p><p>如果指定了 <code>data</code>，则其效果类似于调用 <a href="/zh/nodejs/api/http#responsewritechunk-encoding-callback"><code>response.write(data, encoding)</code></a>，然后调用 <code>response.end(callback)</code>。</p><p>如果指定了 <code>callback</code>，则当响应流完成时将调用它。</p><h3 id="responsefinished" tabindex="-1"><code>response.finished</code> <a class="header-anchor" href="#responsefinished" aria-label="Permalink to “response.finished”">​</a></h3><p><strong>添加于: v0.0.2</strong></p><p><strong>自 v13.4.0, v12.16.0 起已弃用</strong></p><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 已弃用。 使用 <a href="/zh/nodejs/api/http#responsewritableended"><code>response.writableEnded</code></a>。</p></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果 <a href="/zh/nodejs/api/http#responseenddata-encoding-callback"><code>response.end()</code></a> 已被调用，<code>response.finished</code> 属性将为 <code>true</code>。</p><h3 id="responseflushheaders" tabindex="-1"><code>response.flushHeaders()</code> <a class="header-anchor" href="#responseflushheaders" aria-label="Permalink to “response.flushHeaders()”">​</a></h3><p><strong>添加于: v1.6.0</strong></p><p>刷新响应头。 另请参阅: <a href="/zh/nodejs/api/http#requestflushheaders"><code>request.flushHeaders()</code></a>。</p><h3 id="responsegetheadername" tabindex="-1"><code>response.getHeader(name)</code> <a class="header-anchor" href="#responsegetheadername" aria-label="Permalink to “response.getHeader(name)”">​</a></h3><p><strong>添加于: v0.4.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a></li></ul><p>读取一个已经排队但尚未发送给客户端的标头。 名称不区分大小写。 返回值的类型取决于提供给 <a href="/zh/nodejs/api/http#responsesetheadername-value"><code>response.setHeader()</code></a> 的参数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">byteLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Set-Cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;type=ninja&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;language=javascript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> contentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content-type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// contentType is &#39;text/html&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> contentLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// contentLength is of type number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setCookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;set-cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// setCookie is of type string[]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="responsegetheadernames" tabindex="-1"><code>response.getHeaderNames()</code> <a class="header-anchor" href="#responsegetheadernames" aria-label="Permalink to “response.getHeaderNames()”">​</a></h3><p><strong>添加于: v7.7.0</strong></p><ul><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>返回一个数组，其中包含当前传出标头的唯一名称。 所有标头名称均为小写。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Set-Cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo=bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar=baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headerNames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeaderNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// headerNames === [&#39;foo&#39;, &#39;set-cookie&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="responsegetheaders" tabindex="-1"><code>response.getHeaders()</code> <a class="header-anchor" href="#responsegetheaders" aria-label="Permalink to “response.getHeaders()”">​</a></h3><p><strong>新增于: v7.7.0</strong></p><ul><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>返回当前传出标头的浅拷贝。由于使用了浅拷贝，数组值可能会被修改，而无需额外调用各种与标头相关的 http 模块方法。返回对象的键是标头名称，值是相应的标头值。所有标头名称都是小写的。</p><p><code>response.getHeaders()</code> 方法返回的对象 <em>不</em> 以原型方式继承自 JavaScript <code>Object</code>。 这意味着典型的 <code>Object</code> 方法，例如 <code>obj.toString()</code>、<code>obj.hasOwnProperty()</code> 等未定义且 <em>不起作用</em>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Set-Cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo=bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar=baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// headers === { foo: &#39;bar&#39;, &#39;set-cookie&#39;: [&#39;foo=bar&#39;, &#39;bar=baz&#39;] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="responsehasheadername" tabindex="-1"><code>response.hasHeader(name)</code> <a class="header-anchor" href="#responsehasheadername" aria-label="Permalink to “response.hasHeader(name)”">​</a></h3><p><strong>新增于: v7.7.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果传出标头中当前设置了由 <code>name</code> 标识的标头，则返回 <code>true</code>。 标头名称匹配不区分大小写。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasContentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content-type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="responseheaderssent" tabindex="-1"><code>response.headersSent</code> <a class="header-anchor" href="#responseheaderssent" aria-label="Permalink to “response.headersSent”">​</a></h3><p><strong>新增于: v0.9.3</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>布尔值（只读）。 如果已发送标头，则为 true，否则为 false。</p><h3 id="responseremoveheadername" tabindex="-1"><code>response.removeHeader(name)</code> <a class="header-anchor" href="#responseremoveheadername" aria-label="Permalink to “response.removeHeader(name)”">​</a></h3><p><strong>新增于: v0.4.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>删除排队等待隐式发送的标头。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Encoding&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="responsereq" tabindex="-1"><code>response.req</code> <a class="header-anchor" href="#responsereq" aria-label="Permalink to “response.req”">​</a></h3><p><strong>新增于: v15.7.0</strong></p><ul><li><a href="/zh/nodejs/api/http#class-httpincomingmessage">&lt;http.IncomingMessage&gt;</a></li></ul><p>对原始 HTTP <code>request</code> 对象的引用。</p><h3 id="responsesenddate" tabindex="-1"><code>response.sendDate</code> <a class="header-anchor" href="#responsesenddate" aria-label="Permalink to “response.sendDate”">​</a></h3><p><strong>新增于: v0.7.5</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果日期标头尚未出现在标头中，则当为 true 时，将在响应中自动生成并发送日期标头。默认为 true。</p><p>仅应在测试时禁用此项；HTTP 要求响应中包含 Date 标头。</p><h3 id="responsesetheadername-value" tabindex="-1"><code>response.setHeader(name, value)</code> <a class="header-anchor" href="#responsesetheadername-value" aria-label="Permalink to “response.setHeader(name, value)”">​</a></h3><p><strong>新增于: v0.4.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a></li><li>返回: <a href="/zh/nodejs/api/http#class-httpserverresponse">&lt;http.ServerResponse&gt;</a></li></ul><p>返回响应对象。</p><p>为隐式标头设置单个标头值。 如果要发送的标头中已存在此标头，则其值将被替换。 在此处使用字符串数组以发送具有相同名称的多个标头。 非字符串值将未经修改地存储。 因此，<a href="/zh/nodejs/api/http#responsegetheadername"><code>response.getHeader()</code></a> 可能会返回非字符串值。 但是，非字符串值将转换为字符串以进行网络传输。 将相同的响应对象返回给调用者，以启用调用链。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Set-Cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;type=ninja&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;language=javascript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>尝试设置包含无效字符的标头字段名称或值将导致抛出 <a href="/zh/nodejs/api/errors#class-typeerror"><code>TypeError</code></a>。</p><p>当使用 <a href="/zh/nodejs/api/http#responsesetheadername-value"><code>response.setHeader()</code></a> 设置标头时，它们将与传递给 <a href="/zh/nodejs/api/http#responsewriteheadstatuscode-statusmessage-headers"><code>response.writeHead()</code></a> 的任何标头合并，传递给 <a href="/zh/nodejs/api/http#responsewriteheadstatuscode-statusmessage-headers"><code>response.writeHead()</code></a> 的标头优先。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 content-type = text/plain</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;X-Foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ok&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果调用了 <a href="/zh/nodejs/api/http#responsewriteheadstatuscode-statusmessage-headers"><code>response.writeHead()</code></a> 方法并且尚未调用此方法，它将直接将提供的标头值写入网络通道，而不在内部进行缓存，并且标头上的 <a href="/zh/nodejs/api/http#responsegetheadername"><code>response.getHeader()</code></a> 将不会产生预期的结果。 如果需要逐步填充标头，并可能在将来进行检索和修改，请使用 <a href="/zh/nodejs/api/http#responsesetheadername-value"><code>response.setHeader()</code></a> 而不是 <a href="/zh/nodejs/api/http#responsewriteheadstatuscode-statusmessage-headers"><code>response.writeHead()</code></a>。</p><h3 id="responsesettimeoutmsecs-callback" tabindex="-1"><code>response.setTimeout(msecs[, callback])</code> <a class="header-anchor" href="#responsesettimeoutmsecs-callback" aria-label="Permalink to “response.setTimeout(msecs[, callback])”">​</a></h3><p><strong>加入于: v0.9.12</strong></p><ul><li><code>msecs</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="/zh/nodejs/api/http#class-httpserverresponse">&lt;http.ServerResponse&gt;</a></li></ul><p>设置 Socket 的超时值为 <code>msecs</code>。 如果提供了回调函数，则会将其作为侦听器添加到响应对象上的 <code>&#39;timeout&#39;</code> 事件。</p><p>如果没有将 <code>&#39;timeout&#39;</code> 侦听器添加到请求、响应或服务器，则套接字会在超时时被销毁。 如果将处理程序分配给请求、响应或服务器的 <code>&#39;timeout&#39;</code> 事件，则必须显式处理超时的套接字。</p><h3 id="responsesocket" tabindex="-1"><code>response.socket</code> <a class="header-anchor" href="#responsesocket" aria-label="Permalink to “response.socket”">​</a></h3><p><strong>加入于: v0.3.0</strong></p><ul><li><a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>引用底层套接字。 通常用户不希望访问此属性。 特别是，由于协议解析器附加到套接字的方式，套接字不会发出 <code>&#39;readable&#39;</code> 事件。 <code>response.end()</code> 之后，该属性将为空。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-2711" id="tab-2712" checked><label data-title="ESM" for="tab-2712">ESM</label><input type="radio" name="group-2711" id="tab-2713"><label data-title="CJS" for="tab-2713">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.socket.remoteAddress;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.socket.remotePort;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Your IP address is \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} and your source port is \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.socket.remoteAddress;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.socket.remotePort;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Your IP address is \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} and your source port is \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div></div><p>除非用户指定了 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 之外的套接字类型，否则此属性保证是 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 类的实例，它是 <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的子类。</p><h3 id="responsestatuscode" tabindex="-1"><code>response.statusCode</code> <a class="header-anchor" href="#responsestatuscode" aria-label="Permalink to “response.statusCode”">​</a></h3><p><strong>加入于: v0.4.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <strong>默认:</strong> <code>200</code></li></ul><p>当使用隐式标头（不显式调用 <a href="/zh/nodejs/api/http#responsewriteheadstatuscode-statusmessage-headers"><code>response.writeHead()</code></a>）时，此属性控制在刷新标头时将发送到客户端的状态码。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 404</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在将响应标头发送到客户端之后，此属性指示已发送出的状态码。</p><h3 id="responsestatusmessage" tabindex="-1"><code>response.statusMessage</code> <a class="header-anchor" href="#responsestatusmessage" aria-label="Permalink to “response.statusMessage”">​</a></h3><p><strong>加入版本: v0.11.8</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>当使用隐式标头（未显式调用 <a href="/zh/nodejs/api/http#responsewriteheadstatuscode-statusmessage-headers"><code>response.writeHead()</code></a>）时，此属性控制在刷新标头时将发送给客户端的状态消息。如果将其保留为 <code>undefined</code>，则将使用状态代码的标准消息。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.statusMessage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Not found&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在将响应标头发送到客户端后，此属性指示已发送出的状态消息。</p><h3 id="responsestrictcontentlength" tabindex="-1"><code>response.strictContentLength</code> <a class="header-anchor" href="#responsestrictcontentlength" aria-label="Permalink to “response.strictContentLength”">​</a></h3><p><strong>加入版本: v18.10.0, v16.18.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <strong>默认值:</strong> <code>false</code></li></ul><p>如果设置为 <code>true</code>，Node.js 将检查 <code>Content-Length</code> 标头值和正文的大小（以字节为单位）是否相等。如果 <code>Content-Length</code> 标头值不匹配，则会抛出 <code>Error</code>，其 <code>code:</code> 为 <a href="/zh/nodejs/api/errors#err-http-content-length-mismatch"><code>&#39;ERR_HTTP_CONTENT_LENGTH_MISMATCH&#39;</code></a>。</p><h3 id="responseuncork" tabindex="-1"><code>response.uncork()</code> <a class="header-anchor" href="#responseuncork" aria-label="Permalink to “response.uncork()”">​</a></h3><p><strong>加入版本: v13.2.0, v12.16.0</strong></p><p>参见 <a href="/zh/nodejs/api/stream#writableuncork"><code>writable.uncork()</code></a>。</p><h3 id="responsewritableended" tabindex="-1"><code>response.writableEnded</code> <a class="header-anchor" href="#responsewritableended" aria-label="Permalink to “response.writableEnded”">​</a></h3><p><strong>加入版本: v12.9.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>在调用 <a href="/zh/nodejs/api/http#responseenddata-encoding-callback"><code>response.end()</code></a> 后为 <code>true</code>。此属性不指示数据是否已刷新，为此请改用 <a href="/zh/nodejs/api/http#responsewritablefinished"><code>response.writableFinished</code></a>。</p><h3 id="responsewritablefinished" tabindex="-1"><code>response.writableFinished</code> <a class="header-anchor" href="#responsewritablefinished" aria-label="Permalink to “response.writableFinished”">​</a></h3><p><strong>加入版本: v12.7.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果所有数据都已刷新到底层系统，则为 <code>true</code>，紧接在发出 <a href="/zh/nodejs/api/http#event-finish"><code>&#39;finish&#39;</code></a> 事件之前。</p><h3 id="responsewritechunk-encoding-callback" tabindex="-1"><code>response.write(chunk[, encoding][, callback])</code> <a class="header-anchor" href="#responsewritechunk-encoding-callback" aria-label="Permalink to “response.write(chunk[, encoding][, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th style="text-align:left;">版本</th><th style="text-align:left;">变更</th></tr></thead><tbody><tr><td style="text-align:left;">v15.0.0</td><td style="text-align:left;"><code>chunk</code> 参数现在可以是 <code>Uint8Array</code>。</td></tr><tr><td style="text-align:left;">v0.1.29</td><td style="text-align:left;">加入版本: v0.1.29</td></tr></tbody></table></div><ul><li><code>chunk</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">&lt;Uint8Array&gt;</a></li><li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <strong>默认值:</strong> <code>&#39;utf8&#39;</code></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果调用此方法且尚未调用 <a href="/zh/nodejs/api/http#responsewriteheadstatuscode-statusmessage-headers"><code>response.writeHead()</code></a>，它将切换到隐式标头模式并刷新隐式标头。</p><p>这会发送响应正文的块。可以多次调用此方法以提供正文的后续部分。</p><p>如果在 <code>createServer</code> 中将 <code>rejectNonStandardBodyWrites</code> 设置为 true，则当请求方法或响应状态不支持内容时，不允许写入正文。如果尝试为 HEAD 请求或作为 <code>204</code> 或 <code>304</code> 响应的一部分写入正文，则会同步抛出一个代码为 <code>ERR_HTTP_BODY_NOT_ALLOWED</code> 的 <code>Error</code>。</p><p><code>chunk</code> 可以是字符串或缓冲区。 如果 <code>chunk</code> 是字符串，则第二个参数指定如何将其编码为字节流。 <code>callback</code> 将在此数据块刷新时被调用。</p><p>这是原始的 HTTP 正文，与可能使用的高级多部分正文编码无关。</p><p>第一次调用 <a href="/zh/nodejs/api/http#responsewritechunk-encoding-callback"><code>response.write()</code></a> 时，它会将缓冲的标头信息和正文的第一个块发送到客户端。 第二次调用 <a href="/zh/nodejs/api/http#responsewritechunk-encoding-callback"><code>response.write()</code></a> 时，Node.js 假定数据将被流式传输，并单独发送新数据。 也就是说，响应会被缓冲到正文的第一个块。</p><p>如果所有数据都已成功刷新到内核缓冲区，则返回 <code>true</code>。 如果所有或部分数据都在用户内存中排队，则返回 <code>false</code>。 当缓冲区再次空闲时，将发出 <code>&#39;drain&#39;</code>。</p><h3 id="responsewritecontinue" tabindex="-1"><code>response.writeContinue()</code> <a class="header-anchor" href="#responsewritecontinue" aria-label="Permalink to “response.writeContinue()”">​</a></h3><p><strong>Added in: v0.3.0</strong></p><p>向客户端发送一个 HTTP/1.1 100 Continue 消息，表明请求体应该被发送。参见 <code>Server</code> 上的 <a href="/zh/nodejs/api/http#event-checkcontinue"><code>&#39;checkContinue&#39;</code></a> 事件。</p><h3 id="responsewriteearlyhintshints-callback" tabindex="-1"><code>response.writeEarlyHints(hints[, callback])</code> <a class="header-anchor" href="#responsewriteearlyhintshints-callback" aria-label="Permalink to “response.writeEarlyHints(hints[, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v18.11.0</td><td>允许将提示作为对象传递。</td></tr><tr><td>v18.11.0</td><td>添加于：v18.11.0</td></tr></tbody></table></div><ul><li><code>hints</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li></ul><p>向客户端发送带有 Link 标头的 HTTP/1.1 103 Early Hints 消息，表明用户代理可以预加载/预连接链接的资源。 <code>hints</code> 是一个包含要随早期提示消息发送的标头值的对象。 当响应消息已写入时，将调用可选的 <code>callback</code> 参数。</p><p><strong>示例</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> earlyHintsLink</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;/styles.css&gt;; rel=preload; as=style&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeEarlyHints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;link&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: earlyHintsLink,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> earlyHintsLinks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;&lt;/styles.css&gt;; rel=preload; as=style&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;&lt;/scripts.js&gt;; rel=preload; as=script&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeEarlyHints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;link&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: earlyHintsLinks,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;x-trace-id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id for diagnostics&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> earlyHintsCallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;early hints message sent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeEarlyHints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;link&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: earlyHintsLinks,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, earlyHintsCallback);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="responsewriteheadstatuscode-statusmessage-headers" tabindex="-1"><code>response.writeHead(statusCode[, statusMessage][, headers])</code> <a class="header-anchor" href="#responsewriteheadstatuscode-statusmessage-headers" aria-label="Permalink to “response.writeHead(statusCode[, statusMessage][, headers])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v14.14.0</td><td>允许将标头作为数组传递。</td></tr><tr><td>v11.10.0, v10.17.0</td><td>从 <code>writeHead()</code> 返回 <code>this</code>，以允许与 <code>end()</code> 链接。</td></tr><tr><td>v5.11.0, v4.4.5</td><td>如果 <code>statusCode</code> 不是 <code>[100, 999]</code> 范围内的数字，则会抛出 <code>RangeError</code>。</td></tr><tr><td>v0.1.30</td><td>添加于：v0.1.30</td></tr></tbody></table></div><ul><li><code>statusCode</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>statusMessage</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>headers</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">&lt;Array&gt;</a></li><li>返回: <a href="/zh/nodejs/api/http#class-httpserverresponse">&lt;http.ServerResponse&gt;</a></li></ul><p>向请求发送响应标头。 状态码是一个 3 位数的 HTTP 状态码，例如 <code>404</code>。 最后一个参数 <code>headers</code> 是响应头。 可选地，可以将人类可读的 <code>statusMessage</code> 作为第二个参数给出。</p><p><code>headers</code> 可以是一个 <code>Array</code>，其中键和值在同一个列表中。 它 <em>不是</em> 元组的列表。 因此，偶数偏移量是键值，奇数偏移量是关联值。 数组的格式与 <code>request.rawHeaders</code> 相同。</p><p>返回对 <code>ServerResponse</code> 的引用，以便可以链接调用。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Content-Length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">byteLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此方法只能在消息上调用一次，并且必须在调用 <a href="/zh/nodejs/api/http#responseenddata-encoding-callback"><code>response.end()</code></a> 之前调用。</p><p>如果在调用此方法之前调用了 <a href="/zh/nodejs/api/http#responsewritechunk-encoding-callback"><code>response.write()</code></a> 或 <a href="/zh/nodejs/api/http#responseenddata-encoding-callback"><code>response.end()</code></a>，则将计算隐式/可变标头并调用此函数。</p><p>当使用 <a href="/zh/nodejs/api/http#responsesetheadername-value"><code>response.setHeader()</code></a> 设置标头时，它们将与传递给 <a href="/zh/nodejs/api/http#responsewriteheadstatuscode-statusmessage-headers"><code>response.writeHead()</code></a> 的任何标头合并，并且传递给 <a href="/zh/nodejs/api/http#responsewriteheadstatuscode-statusmessage-headers"><code>response.writeHead()</code></a> 的标头具有优先权。</p><p>如果调用此方法并且尚未调用 <a href="/zh/nodejs/api/http#responsesetheadername-value"><code>response.setHeader()</code></a>，它将直接将提供的标头值写入网络通道，而无需在内部缓存，并且标头上的 <a href="/zh/nodejs/api/http#responsegetheadername"><code>response.getHeader()</code></a> 将不会产生预期的结果。 如果需要逐步填充标头，并可能在将来检索和修改，请改用 <a href="/zh/nodejs/api/http#responsesetheadername-value"><code>response.setHeader()</code></a>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 content-type = text/plain</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;X-Foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ok&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>Content-Length</code> 以字节而不是字符读取。 使用 <a href="/zh/nodejs/api/buffer#static-method-bufferbytelengthstring-encoding"><code>Buffer.byteLength()</code></a> 确定正文的字节长度。 Node.js 将检查 <code>Content-Length</code> 与已传输的正文的长度是否相等。</p><p>尝试设置包含无效字符的标头字段名称或值将导致抛出 [<code>Error</code>][]。</p><h3 id="responsewriteprocessing" tabindex="-1"><code>response.writeProcessing()</code> <a class="header-anchor" href="#responsewriteprocessing" aria-label="Permalink to “response.writeProcessing()”">​</a></h3><p><strong>Added in: v10.0.0</strong></p><p>向客户端发送 HTTP/1.1 102 Processing 消息，指示应该发送请求体。</p><h2 id="class-httpincomingmessage" tabindex="-1">类: <code>http.IncomingMessage</code> <a class="header-anchor" href="#class-httpincomingmessage" aria-label="Permalink to “类: http.IncomingMessage”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.5.0</td><td>在传入数据被消耗后，<code>destroyed</code> 值返回 <code>true</code>。</td></tr><tr><td>v13.1.0, v12.16.0</td><td><code>readableHighWaterMark</code> 值反映了套接字的值。</td></tr><tr><td>v0.1.17</td><td>添加于: v0.1.17</td></tr></tbody></table></div><ul><li>继承自: <a href="/zh/nodejs/api/stream#class-streamreadable">&lt;stream.Readable&gt;</a></li></ul><p><code>IncomingMessage</code> 对象由 <a href="/zh/nodejs/api/http#class-httpserver"><code>http.Server</code></a> 或 <a href="/zh/nodejs/api/http#class-httpclientrequest"><code>http.ClientRequest</code></a> 创建，并分别作为第一个参数传递给 <a href="/zh/nodejs/api/http#event-request"><code>&#39;request&#39;</code></a> 和 <a href="/zh/nodejs/api/http#event-response"><code>&#39;response&#39;</code></a> 事件。它可用于访问响应状态、标头和数据。</p><p>与它的 <code>socket</code> 值（<a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的子类）不同，<code>IncomingMessage</code> 本身继承自 <a href="/zh/nodejs/api/stream#class-streamreadable">&lt;stream.Readable&gt;</a>，并被单独创建以解析和发出传入的 HTTP 标头和有效负载，因为在保持活动的情况下，底层套接字可能会被多次重用。</p><h3 id="event-aborted" tabindex="-1">事件: <code>&#39;aborted&#39;</code> <a class="header-anchor" href="#event-aborted" aria-label="Permalink to “事件: &#39;aborted&#39;”">​</a></h3><p><strong>Added in: v0.3.8</strong></p><p><strong>Deprecated since: v17.0.0, v16.12.0</strong></p><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - 废弃]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 废弃。 监听 <code>&#39;close&#39;</code> 事件代替。</p></div><p>当请求被中止时发出。</p><h3 id="event-close_3" tabindex="-1">事件: <code>&#39;close&#39;</code> <a class="header-anchor" href="#event-close_3" aria-label="Permalink to “事件: &#39;close&#39;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v16.0.0</td><td>当请求已完成时（而不是在底层套接字关闭时），现在会发出 close 事件。</td></tr><tr><td>v0.4.2</td><td>添加于: v0.4.2</td></tr></tbody></table></div><p>当请求已完成时发出。</p><h3 id="messageaborted" tabindex="-1"><code>message.aborted</code> <a class="header-anchor" href="#messageaborted" aria-label="Permalink to “message.aborted”">​</a></h3><p><strong>Added in: v10.1.0</strong></p><p><strong>Deprecated since: v17.0.0, v16.12.0</strong></p><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - 废弃]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 废弃。 从 <a href="/zh/nodejs/api/stream#class-streamreadable">&lt;stream.Readable&gt;</a> 检查 <code>message.destroyed</code>。</p></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果请求已被中止，则 <code>message.aborted</code> 属性将为 <code>true</code>。</p><h3 id="messagecomplete" tabindex="-1"><code>message.complete</code> <a class="header-anchor" href="#messagecomplete" aria-label="Permalink to “message.complete”">​</a></h3><p><strong>Added in: v0.3.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果已接收到完整的 HTTP 消息并已成功解析，则 <code>message.complete</code> 属性将为 <code>true</code>。</p><p>此属性特别有用，可以用来确定客户端或服务器在连接终止之前是否完全传输了消息：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.complete)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;连接在消息仍在发送时终止&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="messageconnection" tabindex="-1"><code>message.connection</code> <a class="header-anchor" href="#messageconnection" aria-label="Permalink to “message.connection”">​</a></h3><p><strong>Added in: v0.1.90</strong></p><p><strong>Deprecated since: v16.0.0</strong></p><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 已弃用。 请使用 <a href="/zh/nodejs/api/http#messagesocket"><code>message.socket</code></a>。</p></div><p><a href="/zh/nodejs/api/http#messagesocket"><code>message.socket</code></a> 的别名。</p><h3 id="messagedestroyerror" tabindex="-1"><code>message.destroy([error])</code> <a class="header-anchor" href="#messagedestroyerror" aria-label="Permalink to “message.destroy([error])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v14.5.0, v12.19.0</td><td>此函数返回 <code>this</code>，与其他可读流保持一致。</td></tr><tr><td>v0.3.0</td><td>Added in: v0.3.0</td></tr></tbody></table></div><ul><li><code>error</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a></li></ul><p>在接收到 <code>IncomingMessage</code> 的套接字上调用 <code>destroy()</code>。 如果提供了 <code>error</code>，则会在套接字上发出 <code>&#39;error&#39;</code> 事件，并将 <code>error</code> 作为参数传递给该事件上的任何侦听器。</p><h3 id="messageheaders" tabindex="-1"><code>message.headers</code> <a class="header-anchor" href="#messageheaders" aria-label="Permalink to “message.headers”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v19.5.0, v18.14.0</td><td><code>http.request()</code> 和 <code>http.createServer()</code> 函数中的 <code>joinDuplicateHeaders</code> 选项确保不会丢弃重复的标头，而是根据 RFC 9110 第 5.3 节的规定，使用逗号分隔符组合在一起。</td></tr><tr><td>v15.1.0</td><td>现在使用原型上的访问器属性延迟计算 <code>message.headers</code>，并且不再可枚举。</td></tr><tr><td>v0.1.5</td><td>Added in: v0.1.5</td></tr></tbody></table></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>请求/响应标头对象。</p><p>标头名称和值的键值对。 标头名称为小写。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印类似于：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { &#39;user-agent&#39;: &#39;curl/7.22.0&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   host: &#39;127.0.0.1:8000&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   accept: &#39;*/*&#39; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request.headers);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>根据标头名称，以下列方式处理原始标头中的重复项：</p><ul><li>丢弃 <code>age</code>、<code>authorization</code>、<code>content-length</code>、<code>content-type</code>、<code>etag</code>、<code>expires</code>、<code>from</code>、<code>host</code>、<code>if-modified-since</code>、<code>if-unmodified-since</code>、<code>last-modified</code>、<code>location</code>、<code>max-forwards</code>、<code>proxy-authorization</code>、<code>referer</code>、<code>retry-after</code>、<code>server</code> 或 <code>user-agent</code> 的重复项。 要允许联接上面列出的标头的重复值，请在 <a href="/zh/nodejs/api/http#httprequestoptions-callback"><code>http.request()</code></a> 和 <a href="/zh/nodejs/api/http#httpcreateserveroptions-requestlistener"><code>http.createServer()</code></a> 中使用选项 <code>joinDuplicateHeaders</code>。 有关更多信息，请参见 RFC 9110 第 5.3 节。</li><li><code>set-cookie</code> 始终是一个数组。 将重复项添加到数组中。</li><li>对于重复的 <code>cookie</code> 标头，这些值使用 <code>; </code> 连接在一起。</li><li>对于所有其他标头，这些值使用 <code>, </code> 连接在一起。</li></ul><h3 id="messageheadersdistinct" tabindex="-1"><code>message.headersDistinct</code> <a class="header-anchor" href="#messageheadersdistinct" aria-label="Permalink to “message.headersDistinct”">​</a></h3><p><strong>新增于: v18.3.0, v16.17.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>类似于 <a href="/zh/nodejs/api/http#messageheaders"><code>message.headers</code></a>，但没有连接逻辑，并且这些值始终是字符串数组，即使对于只接收一次的标头也是如此。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印如下内容：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { &#39;user-agent&#39;: [&#39;curl/7.22.0&#39;],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   host: [&#39;127.0.0.1:8000&#39;],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   accept: [&#39;*/*&#39;] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request.headersDistinct);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="messagehttpversion" tabindex="-1"><code>message.httpVersion</code> <a class="header-anchor" href="#messagehttpversion" aria-label="Permalink to “message.httpVersion”">​</a></h3><p><strong>新增于: v0.1.1</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p>如果是服务器请求，则为客户端发送的 HTTP 版本。 如果是客户端响应，则为连接到的服务器的 HTTP 版本。 可能是 <code>&#39;1.1&#39;</code> 或 <code>&#39;1.0&#39;</code>。</p><p>此外，<code>message.httpVersionMajor</code> 是第一个整数，<code>message.httpVersionMinor</code> 是第二个整数。</p><h3 id="messagemethod" tabindex="-1"><code>message.method</code> <a class="header-anchor" href="#messagemethod" aria-label="Permalink to “message.method”">​</a></h3><p><strong>新增于: v0.1.1</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><strong>仅对从 <a href="#class-httpserver"><code>http.Server</code></a> 获取的请求有效。</strong></p><p>请求方法作为字符串。 只读。 示例：<code>&#39;GET&#39;</code>，<code>&#39;DELETE&#39;</code>。</p><h3 id="messagerawheaders" tabindex="-1"><code>message.rawHeaders</code> <a class="header-anchor" href="#messagerawheaders" aria-label="Permalink to “message.rawHeaders”">​</a></h3><p><strong>新增于: v0.11.6</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>原始的请求/响应标头列表，与接收到的完全一样。</p><p>键和值在同一个列表中。 它<em>不是</em>元组列表。 因此，偶数偏移量是键值，奇数偏移量是关联的值。</p><p>标头名称未小写，并且重复项未合并。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印如下内容：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ &#39;user-agent&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &#39;this is invalid because there can be only one&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &#39;User-Agent&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &#39;curl/7.22.0&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &#39;Host&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &#39;127.0.0.1:8000&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &#39;ACCEPT&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &#39;*/*&#39; ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request.rawHeaders);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="messagerawtrailers" tabindex="-1"><code>message.rawTrailers</code> <a class="header-anchor" href="#messagerawtrailers" aria-label="Permalink to “message.rawTrailers”">​</a></h3><p><strong>新增于: v0.11.6</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>原始的请求/响应尾部键和值，与接收到的完全一样。 仅在 <code>&#39;end&#39;</code> 事件中填充。</p><h3 id="messagesettimeoutmsecs-callback" tabindex="-1"><code>message.setTimeout(msecs[, callback])</code> <a class="header-anchor" href="#messagesettimeoutmsecs-callback" aria-label="Permalink to “message.setTimeout(msecs[, callback])”">​</a></h3><p><strong>加入于: v0.5.9</strong></p><ul><li><code>msecs</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="/zh/nodejs/api/http#class-httpincomingmessage">&lt;http.IncomingMessage&gt;</a></li></ul><p>调用 <code>message.socket.setTimeout(msecs, callback)</code>。</p><h3 id="messagesocket" tabindex="-1"><code>message.socket</code> <a class="header-anchor" href="#messagesocket" aria-label="Permalink to “message.socket”">​</a></h3><p><strong>加入于: v0.3.0</strong></p><ul><li><a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>与连接关联的 <a href="/zh/nodejs/api/net#class-netsocket"><code>net.Socket</code></a> 对象。</p><p>通过 HTTPS 支持，使用 <a href="/zh/nodejs/api/tls#tlssocketgetpeercertificatedetailed"><code>request.socket.getPeerCertificate()</code></a> 获取客户端的身份验证详情。</p><p>除非用户指定了除 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 之外的套接字类型或内部置空，否则此属性保证是 <a href="/zh/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a> 类的实例，它是 <a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a> 的子类。</p><h3 id="messagestatuscode" tabindex="-1"><code>message.statusCode</code> <a class="header-anchor" href="#messagestatuscode" aria-label="Permalink to “message.statusCode”">​</a></h3><p><strong>加入于: v0.1.1</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p><strong>仅对从 <a href="#class-httpclientrequest"><code>http.ClientRequest</code></a> 获取的响应有效。</strong></p><p>3 位 HTTP 响应状态码。 例如 <code>404</code>。</p><h3 id="messagestatusmessage" tabindex="-1"><code>message.statusMessage</code> <a class="header-anchor" href="#messagestatusmessage" aria-label="Permalink to “message.statusMessage”">​</a></h3><p><strong>加入于: v0.11.10</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><strong>仅对从 <a href="#class-httpclientrequest"><code>http.ClientRequest</code></a> 获取的响应有效。</strong></p><p>HTTP 响应状态消息（原因短语）。 例如 <code>OK</code> 或 <code>Internal Server Error</code>。</p><h3 id="messagetrailers" tabindex="-1"><code>message.trailers</code> <a class="header-anchor" href="#messagetrailers" aria-label="Permalink to “message.trailers”">​</a></h3><p><strong>加入于: v0.3.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>请求/响应 trailers 对象。 仅在 <code>&#39;end&#39;</code> 事件时填充。</p><h3 id="messagetrailersdistinct" tabindex="-1"><code>message.trailersDistinct</code> <a class="header-anchor" href="#messagetrailersdistinct" aria-label="Permalink to “message.trailersDistinct”">​</a></h3><p><strong>加入于: v18.3.0, v16.17.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>类似于 <a href="/zh/nodejs/api/http#messagetrailers"><code>message.trailers</code></a>，但没有连接逻辑，并且这些值始终是字符串数组，即使对于只收到一次的标头也是如此。 仅在 <code>&#39;end&#39;</code> 事件时填充。</p><h3 id="messageurl" tabindex="-1"><code>message.url</code> <a class="header-anchor" href="#messageurl" aria-label="Permalink to “message.url”">​</a></h3><p><strong>添加于: v0.1.90</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><strong>仅对从 <a href="#class-httpserver"><code>http.Server</code></a> 获取的请求有效。</strong></p><p>请求 URL 字符串。 这仅包含实际 HTTP 请求中存在的 URL。 以下面的请求为例：</p><p>GET /status?name=ryan HTTP/1.1 Accept: text/plain</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>要将 URL 解析为其各个部分：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`js [ESM]</span></span>
<span class="line"><span>new URL(\`http://\${process.env.HOST ?? &#39;localhost&#39;}\${request.url}\`);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当 <code>request.url</code> 为 <code>&#39;/status?name=ryan&#39;</code> 且 <code>process.env.HOST</code> 未定义时：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> new URL(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{process.env.HOST ?? &#39;localhost&#39;}\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">URL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  href:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://localhost/status?name=ryan&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  origin:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://localhost&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  protocol:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http:&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  username:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  password:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  host:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;localhost&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  hostname:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;localhost&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  port:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pathname:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/status&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  search:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;?name=ryan&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  searchParams:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> URLSearchParams</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ryan&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  hash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>确保将 <code>process.env.HOST</code> 设置为服务器的主机名，或者考虑完全替换此部分。 如果使用 <code>req.headers.host</code>，请确保使用正确的验证，因为客户端可能会指定自定义 <code>Host</code> 标头。</p><h2 id="class-httpoutgoingmessage" tabindex="-1">类: <code>http.OutgoingMessage</code> <a class="header-anchor" href="#class-httpoutgoingmessage" aria-label="Permalink to “类: http.OutgoingMessage”">​</a></h2><p><strong>添加于: v0.1.17</strong></p><ul><li>继承自: <a href="/zh/nodejs/api/stream#stream">&lt;Stream&gt;</a></li></ul><p>此类是 <a href="/zh/nodejs/api/http#class-httpclientrequest"><code>http.ClientRequest</code></a> 和 <a href="/zh/nodejs/api/http#class-httpserverresponse"><code>http.ServerResponse</code></a> 的父类。 从 HTTP 事务参与者的角度来看，它是一个抽象的传出消息。</p><h3 id="event-drain" tabindex="-1">事件: <code>&#39;drain&#39;</code> <a class="header-anchor" href="#event-drain" aria-label="Permalink to “事件: &#39;drain&#39;”">​</a></h3><p><strong>添加于: v0.3.6</strong></p><p>当消息的缓冲区再次空闲时触发。</p><h3 id="event-finish_2" tabindex="-1">事件: <code>&#39;finish&#39;</code> <a class="header-anchor" href="#event-finish_2" aria-label="Permalink to “事件: &#39;finish&#39;”">​</a></h3><p><strong>添加于: v0.1.17</strong></p><p>当传输成功完成时触发。</p><h3 id="event-prefinish" tabindex="-1">事件: <code>&#39;prefinish&#39;</code> <a class="header-anchor" href="#event-prefinish" aria-label="Permalink to “事件: &#39;prefinish&#39;”">​</a></h3><p><strong>添加于: v0.11.6</strong></p><p>在调用 <code>outgoingMessage.end()</code> 之后触发。 触发此事件时，所有数据都已处理，但不一定完全刷新。</p><h3 id="outgoingmessageaddtrailersheaders" tabindex="-1"><code>outgoingMessage.addTrailers(headers)</code> <a class="header-anchor" href="#outgoingmessageaddtrailersheaders" aria-label="Permalink to “outgoingMessage.addTrailers(headers)”">​</a></h3><p><strong>添加于: v0.3.0</strong></p><ul><li><code>headers</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>将 HTTP 尾部（消息末尾的头部）添加到消息中。</p><p>只有当消息是分块编码时，才会发出尾部。 否则，尾部将被静默丢弃。</p><p>HTTP 要求发送 <code>Trailer</code> 头部才能发出尾部，其值包含头部字段名称的列表，例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                         &#39;Trailer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-MD5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTrailers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-MD5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;7895bf4b8828b55ceaf47747b4bca667&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>尝试设置包含无效字符的头部字段名称或值将导致抛出 <code>TypeError</code>。</p><h3 id="outgoingmessageappendheadername-value" tabindex="-1"><code>outgoingMessage.appendHeader(name, value)</code> <a class="header-anchor" href="#outgoingmessageappendheadername-value" aria-label="Permalink to “outgoingMessage.appendHeader(name, value)”">​</a></h3><p><strong>添加于: v18.3.0, v16.17.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 头部名称</li><li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> 头部值</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a></li></ul><p>将单个头部值附加到头部对象。</p><p>如果该值是一个数组，则相当于多次调用此方法。</p><p>如果该头部之前没有值，则相当于调用 <a href="/zh/nodejs/api/http#outgoingmessagesetheadername-value"><code>outgoingMessage.setHeader(name, value)</code></a>。</p><p>根据创建客户端请求或服务器时 <code>options.uniqueHeaders</code> 的值，这将导致头部被多次发送，或者使用 <code>; </code> 连接的值单次发送。</p><h3 id="outgoingmessageconnection" tabindex="-1"><code>outgoingMessage.connection</code> <a class="header-anchor" href="#outgoingmessageconnection" aria-label="Permalink to “outgoingMessage.connection”">​</a></h3><p><strong>添加于: v0.3.0</strong></p><p><strong>已弃用: v15.12.0, v14.17.1</strong></p><div class="danger custom-block"><p class="custom-block-title">[Stable: 0 - Deprecated]</p><p><a href="/zh/nodejs/api/documentation#stability-index">Stable: 0</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 0</a> - 已弃用: 请改用 <a href="/zh/nodejs/api/http#outgoingmessagesocket"><code>outgoingMessage.socket</code></a>。</p></div><p><a href="/zh/nodejs/api/http#outgoingmessagesocket"><code>outgoingMessage.socket</code></a> 的别名。</p><h3 id="outgoingmessagecork" tabindex="-1"><code>outgoingMessage.cork()</code> <a class="header-anchor" href="#outgoingmessagecork" aria-label="Permalink to “outgoingMessage.cork()”">​</a></h3><p><strong>新增于: v13.2.0, v12.16.0</strong></p><p>参见 <a href="/zh/nodejs/api/stream#writablecork"><code>writable.cork()</code></a>。</p><h3 id="outgoingmessagedestroyerror" tabindex="-1"><code>outgoingMessage.destroy([error])</code> <a class="header-anchor" href="#outgoingmessagedestroyerror" aria-label="Permalink to “outgoingMessage.destroy([error])”">​</a></h3><p><strong>新增于: v0.3.0</strong></p><ul><li><code>error</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">&lt;Error&gt;</a> 可选，随 <code>error</code> 事件发出的错误</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a></li></ul><p>销毁消息。 一旦套接字与消息关联并连接，该套接字也将被销毁。</p><h3 id="outgoingmessageendchunk-encoding-callback" tabindex="-1"><code>outgoingMessage.end(chunk[, encoding][, callback])</code> <a class="header-anchor" href="#outgoingmessageendchunk-encoding-callback" aria-label="Permalink to “outgoingMessage.end(chunk[, encoding][, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.0.0</td><td><code>chunk</code> 参数现在可以是 <code>Uint8Array</code>。</td></tr><tr><td>v0.11.6</td><td>添加 <code>callback</code> 参数。</td></tr><tr><td>v0.1.90</td><td>新增于: v0.1.90</td></tr></tbody></table></div><ul><li><code>chunk</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">&lt;Uint8Array&gt;</a></li><li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 可选，<strong>默认:</strong> <code>utf8</code></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 可选</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a></li></ul><p>完成传出消息。 如果正文的任何部分未发送，它将刷新到底层系统。 如果消息是分块的，它将发送终止块 <code>0\\r\\n\\r\\n</code>，并发送尾部（如果有）。</p><p>如果指定了 <code>chunk</code>，则相当于调用 <code>outgoingMessage.write(chunk, encoding)</code>，然后调用 <code>outgoingMessage.end(callback)</code>。</p><p>如果提供了 <code>callback</code>，它将在消息完成时被调用（相当于 <code>&#39;finish&#39;</code> 事件的监听器）。</p><h3 id="outgoingmessageflushheaders" tabindex="-1"><code>outgoingMessage.flushHeaders()</code> <a class="header-anchor" href="#outgoingmessageflushheaders" aria-label="Permalink to “outgoingMessage.flushHeaders()”">​</a></h3><p><strong>新增于: v1.6.0</strong></p><p>刷新消息头。</p><p>出于效率原因，Node.js 通常会缓冲消息头，直到调用 <code>outgoingMessage.end()</code> 或写入第一块消息数据。 然后，它尝试将头和数据打包到单个 TCP 数据包中。</p><p>通常这是期望的（它可以节省 TCP 往返），但当第一批数据直到很久以后才发送时则不然。 <code>outgoingMessage.flushHeaders()</code> 绕过优化并启动消息。</p><h3 id="outgoingmessagegetheadername" tabindex="-1"><code>outgoingMessage.getHeader(name)</code> <a class="header-anchor" href="#outgoingmessagegetheadername" aria-label="Permalink to “outgoingMessage.getHeader(name)”">​</a></h3><p><strong>添加于: v0.4.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 头部名称</li><li>返回值: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a></li></ul><p>获取具有给定名称的 HTTP 头部的值。如果未设置该头部，则返回的值将为 <code>undefined</code>。</p><h3 id="outgoingmessagegetheadernames" tabindex="-1"><code>outgoingMessage.getHeaderNames()</code> <a class="header-anchor" href="#outgoingmessagegetheadernames" aria-label="Permalink to “outgoingMessage.getHeaderNames()”">​</a></h3><p><strong>添加于: v7.7.0</strong></p><ul><li>返回值: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>返回一个数组，其中包含当前传出标头的唯一名称。 所有名称均为小写。</p><h3 id="outgoingmessagegetheaders" tabindex="-1"><code>outgoingMessage.getHeaders()</code> <a class="header-anchor" href="#outgoingmessagegetheaders" aria-label="Permalink to “outgoingMessage.getHeaders()”">​</a></h3><p><strong>添加于: v7.7.0</strong></p><ul><li>返回值: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>返回当前传出标头的浅拷贝。 由于使用了浅拷贝，因此可以更改数组值，而无需额外调用各种与标头相关的 HTTP 模块方法。 返回对象的键是标头名称，值是相应的标头值。 所有标头名称均为小写。</p><p><code>outgoingMessage.getHeaders()</code> 方法返回的对象不以原型方式继承自 JavaScript <code>Object</code>。 这意味着典型的 <code>Object</code> 方法（例如 <code>obj.toString()</code>、<code>obj.hasOwnProperty()</code> 等）未定义且将不起作用。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outgoingMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outgoingMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Set-Cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo=bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar=baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outgoingMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// headers === { foo: &#39;bar&#39;, &#39;set-cookie&#39;: [&#39;foo=bar&#39;, &#39;bar=baz&#39;] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="outgoingmessagehasheadername" tabindex="-1"><code>outgoingMessage.hasHeader(name)</code> <a class="header-anchor" href="#outgoingmessagehasheadername" aria-label="Permalink to “outgoingMessage.hasHeader(name)”">​</a></h3><p><strong>添加于: v7.7.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li>返回值: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果传出标头中当前设置了由 <code>name</code> 标识的标头，则返回 <code>true</code>。 标头名称不区分大小写。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasContentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outgoingMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content-type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="outgoingmessageheaderssent" tabindex="-1"><code>outgoingMessage.headersSent</code> <a class="header-anchor" href="#outgoingmessageheaderssent" aria-label="Permalink to “outgoingMessage.headersSent”">​</a></h3><p><strong>加入于: v0.9.3</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>只读。如果已发送标头，则为 <code>true</code>，否则为 <code>false</code>。</p><h3 id="outgoingmessagepipe" tabindex="-1"><code>outgoingMessage.pipe()</code> <a class="header-anchor" href="#outgoingmessagepipe" aria-label="Permalink to “outgoingMessage.pipe()”">​</a></h3><p><strong>加入于: v9.0.0</strong></p><p>覆盖了从传统 <code>Stream</code> 类继承的 <code>stream.pipe()</code> 方法，该类是 <code>http.OutgoingMessage</code> 的父类。</p><p>调用此方法将抛出一个 <code>Error</code>，因为 <code>outgoingMessage</code> 是一个只写流。</p><h3 id="outgoingmessageremoveheadername" tabindex="-1"><code>outgoingMessage.removeHeader(name)</code> <a class="header-anchor" href="#outgoingmessageremoveheadername" aria-label="Permalink to “outgoingMessage.removeHeader(name)”">​</a></h3><p><strong>加入于: v0.4.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 标头名称</li></ul><p>删除已排队等待隐式发送的标头。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outgoingMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Encoding&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="outgoingmessagesetheadername-value" tabindex="-1"><code>outgoingMessage.setHeader(name, value)</code> <a class="header-anchor" href="#outgoingmessagesetheadername-value" aria-label="Permalink to “outgoingMessage.setHeader(name, value)”">​</a></h3><p><strong>加入于: v0.4.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 标头名称</li><li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a> 标头值</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a></li></ul><p>设置单个标头值。 如果标头已存在于要发送的标头中，其值将被替换。 使用字符串数组来发送具有相同名称的多个标头。</p><h3 id="outgoingmessagesetheadersheaders" tabindex="-1"><code>outgoingMessage.setHeaders(headers)</code> <a class="header-anchor" href="#outgoingmessagesetheadersheaders" aria-label="Permalink to “outgoingMessage.setHeaders(headers)”">​</a></h3><p><strong>加入于: v19.6.0, v18.15.0</strong></p><ul><li><code>headers</code> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers" target="_blank" rel="noreferrer">&lt;Headers&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="noreferrer">&lt;Map&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a></li></ul><p>为隐式标头设置多个标头值。 <code>headers</code> 必须是 <a href="/zh/nodejs/api/globals#class-headers"><code>Headers</code></a> 或 <code>Map</code> 的一个实例，如果标头已经存在于将要发送的标头中，它的值将被替换。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outgoingMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(headers);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>或者</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outgoingMessage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(headers);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当标头已经通过 <a href="/zh/nodejs/api/http#outgoingmessagesetheadersheaders"><code>outgoingMessage.setHeaders()</code></a> 设置时，它们会与任何传递给 <a href="/zh/nodejs/api/http#responsewriteheadstatuscode-statusmessage-headers"><code>response.writeHead()</code></a> 的标头合并，并且传递给 <a href="/zh/nodejs/api/http#responsewriteheadstatuscode-statusmessage-headers"><code>response.writeHead()</code></a> 的标头具有优先权。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 content-type = text/plain</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(headers);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ok&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="outgoingmessagesettimeoutmsesc-callback" tabindex="-1"><code>outgoingMessage.setTimeout(msesc[, callback])</code> <a class="header-anchor" href="#outgoingmessagesettimeoutmsesc-callback" aria-label="Permalink to “outgoingMessage.setTimeout(msesc[, callback])”">​</a></h3><p><strong>新增于: v0.9.12</strong></p><ul><li><code>msesc</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 可选函数，在发生超时时调用。 与绑定到 <code>timeout</code> 事件相同。</li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a></li></ul><p>一旦套接字与消息关联并连接，将以 <code>msecs</code> 作为第一个参数调用 <a href="/zh/nodejs/api/net#socketsettimeouttimeout-callback"><code>socket.setTimeout()</code></a>。</p><h3 id="outgoingmessagesocket" tabindex="-1"><code>outgoingMessage.socket</code> <a class="header-anchor" href="#outgoingmessagesocket" aria-label="Permalink to “outgoingMessage.socket”">​</a></h3><p><strong>新增于: v0.3.0</strong></p><ul><li><a href="/zh/nodejs/api/stream#class-streamduplex">&lt;stream.Duplex&gt;</a></li></ul><p>对底层套接字的引用。 通常，用户不希望访问此属性。</p><p>在调用 <code>outgoingMessage.end()</code> 之后，此属性将被置为 null。</p><h3 id="outgoingmessageuncork" tabindex="-1"><code>outgoingMessage.uncork()</code> <a class="header-anchor" href="#outgoingmessageuncork" aria-label="Permalink to “outgoingMessage.uncork()”">​</a></h3><p><strong>新增于: v13.2.0, v12.16.0</strong></p><p>参见 <a href="/zh/nodejs/api/stream#writableuncork"><code>writable.uncork()</code></a></p><h3 id="outgoingmessagewritablecorked" tabindex="-1"><code>outgoingMessage.writableCorked</code> <a class="header-anchor" href="#outgoingmessagewritablecorked" aria-label="Permalink to “outgoingMessage.writableCorked”">​</a></h3><p><strong>新增于: v13.2.0, v12.16.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p><code>outgoingMessage.cork()</code> 被调用的次数。</p><h3 id="outgoingmessagewritableended" tabindex="-1"><code>outgoingMessage.writableEnded</code> <a class="header-anchor" href="#outgoingmessagewritableended" aria-label="Permalink to “outgoingMessage.writableEnded”">​</a></h3><p><strong>新增于: v12.9.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果已调用 <code>outgoingMessage.end()</code>，则为 <code>true</code>。 此属性不指示数据是否已刷新。 为此，请改用 <code>message.writableFinished</code>。</p><h3 id="outgoingmessagewritablefinished" tabindex="-1"><code>outgoingMessage.writableFinished</code> <a class="header-anchor" href="#outgoingmessagewritablefinished" aria-label="Permalink to “outgoingMessage.writableFinished”">​</a></h3><p><strong>新增于: v12.7.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>如果所有数据都已刷新到基础系统，则为 <code>true</code>。</p><h3 id="outgoingmessagewritablehighwatermark" tabindex="-1"><code>outgoingMessage.writableHighWaterMark</code> <a class="header-anchor" href="#outgoingmessagewritablehighwatermark" aria-label="Permalink to “outgoingMessage.writableHighWaterMark”">​</a></h3><p><strong>新增于: v12.9.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>如果已分配，则为底层套接字的 <code>highWaterMark</code>。 否则，当 <a href="/zh/nodejs/api/stream#writablewritechunk-encoding-callback"><code>writable.write()</code></a> 开始返回 false 时的默认缓冲区级别 (<code>16384</code>)。</p><h3 id="outgoingmessagewritablelength" tabindex="-1"><code>outgoingMessage.writableLength</code> <a class="header-anchor" href="#outgoingmessagewritablelength" aria-label="Permalink to “outgoingMessage.writableLength”">​</a></h3><p><strong>Added in: v12.9.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>缓冲字节数。</p><h3 id="outgoingmessagewritableobjectmode" tabindex="-1"><code>outgoingMessage.writableObjectMode</code> <a class="header-anchor" href="#outgoingmessagewritableobjectmode" aria-label="Permalink to “outgoingMessage.writableObjectMode”">​</a></h3><p><strong>Added in: v12.9.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>始终为 <code>false</code>。</p><h3 id="outgoingmessagewritechunk-encoding-callback" tabindex="-1"><code>outgoingMessage.write(chunk[, encoding][, callback])</code> <a class="header-anchor" href="#outgoingmessagewritechunk-encoding-callback" aria-label="Permalink to “outgoingMessage.write(chunk[, encoding][, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v15.0.0</td><td><code>chunk</code> 参数现在可以是 <code>Uint8Array</code>。</td></tr><tr><td>v0.11.6</td><td>添加了 <code>callback</code> 参数。</td></tr><tr><td>v0.1.29</td><td>添加于: v0.1.29</td></tr></tbody></table></div><ul><li><code>chunk</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/buffer#class-buffer">&lt;Buffer&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">&lt;Uint8Array&gt;</a></li><li><code>encoding</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <strong>默认值:</strong> <code>utf8</code></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>发送主体的区块。 可以多次调用此方法。</p><p><code>encoding</code> 参数仅在 <code>chunk</code> 是字符串时相关。 默认为 <code>&#39;utf8&#39;</code>。</p><p><code>callback</code> 参数是可选的，将在刷新此数据块时调用。</p><p>如果整个数据已成功刷新到内核缓冲区，则返回 <code>true</code>。 如果全部或部分数据已在用户内存中排队，则返回 <code>false</code>。 当缓冲区再次空闲时，将发出 <code>&#39;drain&#39;</code> 事件。</p><h2 id="httpmethods" tabindex="-1"><code>http.METHODS</code> <a class="header-anchor" href="#httpmethods" aria-label="Permalink to “http.METHODS”">​</a></h2><p><strong>Added in: v0.11.8</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a></li></ul><p>解析器支持的 HTTP 方法的列表。</p><h2 id="httpstatus_codes" tabindex="-1"><code>http.STATUS_CODES</code> <a class="header-anchor" href="#httpstatus_codes" aria-label="Permalink to “http.STATUS_CODES”">​</a></h2><p><strong>Added in: v0.1.22</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>所有标准 HTTP 响应状态代码的集合，以及每个状态代码的简短描述。 例如，<code>http.STATUS_CODES[404] === &#39;Not Found&#39;</code>。</p><h2 id="httpcreateserveroptions-requestlistener" tabindex="-1"><code>http.createServer([options][, requestListener])</code> <a class="header-anchor" href="#httpcreateserveroptions-requestlistener" aria-label="Permalink to “http.createServer([options][, requestListener])”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v20.1.0, v18.17.0</td><td>现在支持 <code>highWaterMark</code> 选项。</td></tr><tr><td>v18.0.0</td><td>现在支持 <code>requestTimeout</code>、<code>headersTimeout</code>、<code>keepAliveTimeout</code> 和 <code>connectionsCheckingInterval</code> 选项。</td></tr><tr><td>v18.0.0</td><td><code>noDelay</code> 选项现在默认为 <code>true</code>。</td></tr><tr><td>v17.7.0, v16.15.0</td><td>现在支持 <code>noDelay</code>、<code>keepAlive</code> 和 <code>keepAliveInitialDelay</code> 选项。</td></tr><tr><td>v13.3.0</td><td>现在支持 <code>maxHeaderSize</code> 选项。</td></tr><tr><td>v13.8.0, v12.15.0, v10.19.0</td><td>现在支持 <code>insecureHTTPParser</code> 选项。</td></tr><tr><td>v9.6.0, v8.12.0</td><td>现在支持 <code>options</code> 参数。</td></tr><tr><td>v0.1.13</td><td>添加于: v0.1.13</td></tr></tbody></table></div><ul><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></p><ul><li><code>connectionsCheckingInterval</code>: 设置检查不完整请求中的请求和标头超时的间隔值，以毫秒为单位。<strong>默认值:</strong> <code>30000</code>。</li><li><code>headersTimeout</code>: 设置从客户端接收完整 HTTP 标头的超时值，以毫秒为单位。 有关更多信息，请参见 <a href="/zh/nodejs/api/http#serverheaderstimeout"><code>server.headersTimeout</code></a>。<strong>默认值:</strong> <code>60000</code>。</li><li><code>highWaterMark</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 可选地覆盖所有 <code>socket</code> 的 <code>readableHighWaterMark</code> 和 <code>writableHighWaterMark</code>。 这会影响 <code>IncomingMessage</code> 和 <code>ServerResponse</code> 的 <code>highWaterMark</code> 属性。<strong>默认值:</strong> 请参见 <a href="/zh/nodejs/api/stream#streamgetdefaulthighwatermarkobjectmode"><code>stream.getDefaultHighWaterMark()</code></a>。</li><li><code>insecureHTTPParser</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>true</code>，它将使用启用宽松标志的 HTTP 解析器。 应避免使用不安全的解析器。 有关更多信息，请参见 <a href="/zh/nodejs/api/cli#insecure-http-parser"><code>--insecure-http-parser</code></a>。<strong>默认值:</strong> <code>false</code>。</li><li><code>IncomingMessage</code> <a href="/zh/nodejs/api/http#class-httpincomingmessage">&lt;http.IncomingMessage&gt;</a> 指定要使用的 <code>IncomingMessage</code> 类。 用于扩展原始 <code>IncomingMessage</code>。<strong>默认值:</strong> <code>IncomingMessage</code>。</li><li><code>joinDuplicateHeaders</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>true</code>，则此选项允许使用逗号 (<code>, </code>) 连接请求中多个标头的字段行值，而不是丢弃重复项。 有关更多信息，请参阅 <a href="/zh/nodejs/api/http#messageheaders"><code>message.headers</code></a>。<strong>默认值:</strong> <code>false</code>。</li><li><code>keepAlive</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>true</code>，则会在收到新的传入连接后立即在套接字上启用 keep-alive 功能，类似于在 [<code>socket.setKeepAlive([enable][, initialDelay])</code>][<code>socket.setKeepAlive(enable, initialDelay)</code>] 中所做的事情。<strong>默认值:</strong> <code>false</code>。</li><li><code>keepAliveInitialDelay</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 如果设置为正数，则在空闲套接字上发送第一个 keepalive 探测之前，它会设置初始延迟。<strong>默认值:</strong> <code>0</code>。</li><li><code>keepAliveTimeout</code>: 服务器在完成写入最后一个响应后，需要等待额外传入数据不活动状态的毫秒数，之后套接字将被销毁。 有关更多信息，请参见 <a href="/zh/nodejs/api/http#serverkeepalivetimeout"><code>server.keepAliveTimeout</code></a>。<strong>默认值:</strong> <code>5000</code>。</li><li><code>maxHeaderSize</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 可选地覆盖此服务器收到的请求的 <a href="/zh/nodejs/api/cli#max-http-header-sizesize"><code>--max-http-header-size</code></a> 的值，即请求标头的最大长度（以字节为单位）。<strong>默认值:</strong> 16384 (16 KiB)。</li><li><code>noDelay</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>true</code>，则会在收到新的传入连接后立即禁用 Nagle 算法的使用。<strong>默认值:</strong> <code>true</code>。</li><li><code>requestTimeout</code>: 设置从客户端接收整个请求的超时值，以毫秒为单位。 有关更多信息，请参见 <a href="/zh/nodejs/api/http#serverrequesttimeout"><code>server.requestTimeout</code></a>。<strong>默认值:</strong> <code>300000</code>。</li><li><code>requireHostHeader</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>true</code>，它会强制服务器对任何缺少 Host 标头的 HTTP/1.1 请求消息（按照规范的要求）以 400（错误请求）状态代码进行响应。<strong>默认值:</strong> <code>true</code>。</li><li><code>ServerResponse</code> <a href="/zh/nodejs/api/http#class-httpserverresponse">&lt;http.ServerResponse&gt;</a> 指定要使用的 <code>ServerResponse</code> 类。 用于扩展原始 <code>ServerResponse</code>。<strong>默认值:</strong> <code>ServerResponse</code>。</li><li><code>uniqueHeaders</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">&lt;Array&gt;</a> 应该只发送一次的响应标头的列表。 如果标头的值是一个数组，则这些项将使用 <code>; </code> 连接。</li><li><code>rejectNonStandardBodyWrites</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>true</code>，则在写入没有主体的 HTTP 响应时会抛出错误。<strong>默认值:</strong> <code>false</code>。</li></ul></li><li><p><code>requestListener</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></p></li><li><p>返回: <a href="/zh/nodejs/api/http#class-httpserver">&lt;http.Server&gt;</a></p></li></ul><p>返回 <a href="/zh/nodejs/api/http#class-httpserver"><code>http.Server</code></a> 的新实例。</p><p><code>requestListener</code> 是一个函数，它会自动添加到 <a href="/zh/nodejs/api/http#event-request"><code>&#39;request&#39;</code></a> 事件。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-4480" id="tab-4481" checked><label data-title="ESM" for="tab-4481">ESM</label><input type="radio" name="group-4480" id="tab-4482"><label data-title="CJS" for="tab-4482">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个本地服务器来接收数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个本地服务器来接收数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div></div><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-4484" id="tab-4485" checked><label data-title="ESM" for="tab-4485">ESM</label><input type="radio" name="group-4484" id="tab-4486"><label data-title="CJS" for="tab-4486">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个本地服务器来接收数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听 request 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个本地服务器来接收数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听 request 事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></div></div><h2 id="httpgetoptions-callback" tabindex="-1"><code>http.get(options[, callback])</code> <a class="header-anchor" href="#httpgetoptions-callback" aria-label="Permalink to “http.get(options[, callback])”">​</a></h2><h2 id="httpgeturl-options-callback" tabindex="-1"><code>http.get(url[, options][, callback])</code> <a class="header-anchor" href="#httpgeturl-options-callback" aria-label="Permalink to “http.get(url[, options][, callback])”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v10.9.0</td><td><code>url</code> 参数现在可以与单独的 <code>options</code> 对象一起传递。</td></tr><tr><td>v7.5.0</td><td><code>options</code> 参数可以是 WHATWG <code>URL</code> 对象。</td></tr><tr><td>v0.3.6</td><td>添加于: v0.3.6</td></tr></tbody></table></div><ul><li><code>url</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/url#the-whatwg-url-api">&lt;URL&gt;</a></li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 接受与 <a href="/zh/nodejs/api/http#httprequestoptions-callback"><code>http.request()</code></a> 相同的 <code>options</code>，默认情况下，方法设置为 GET。</li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li><li>返回: <a href="/zh/nodejs/api/http#class-httpclientrequest">&lt;http.ClientRequest&gt;</a></li></ul><p>由于大多数请求都是没有主体的 GET 请求，因此 Node.js 提供了这个便捷的方法。 此方法与 <a href="/zh/nodejs/api/http#httprequestoptions-callback"><code>http.request()</code></a> 之间的唯一区别是它默认将方法设置为 GET 并自动调用 <code>req.end()</code>。 <code>callback</code> 必须注意使用响应数据，原因在 <a href="/zh/nodejs/api/http#class-httpclientrequest"><code>http.ClientRequest</code></a> 部分中说明。</p><p><code>callback</code> 使用单个参数调用，该参数是 <a href="/zh/nodejs/api/http#class-httpincomingmessage"><code>http.IncomingMessage</code></a> 的实例。</p><p>JSON 获取示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:8000/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">statusCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> contentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.headers[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content-type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 任何 2xx 状态码都表示响应成功，但</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这里我们只检查 200。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请求失败。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                      \`状态码: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statusCode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">application</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contentType)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;无效的内容类型。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                      \`期望 application/json 但收到 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">contentType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error.message);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用响应数据以释放内存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rawData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { rawData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunk; });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parsedData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rawData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parsedData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`出现错误: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个本地服务器来接收数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="httpglobalagent" tabindex="-1"><code>http.globalAgent</code> <a class="header-anchor" href="#httpglobalagent" aria-label="Permalink to “http.globalAgent”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v19.0.0</td><td>默认情况下，代理现在使用 HTTP Keep-Alive 和 5 秒超时。</td></tr><tr><td>v0.5.9</td><td>添加于: v0.5.9</td></tr></tbody></table></div><ul><li><a href="/zh/nodejs/api/http#class-httpagent">&lt;http.Agent&gt;</a></li></ul><p><code>Agent</code> 的全局实例，用作所有 HTTP 客户端请求的默认值。与默认 <code>Agent</code> 配置的不同之处在于，它启用了 <code>keepAlive</code> 并且 <code>timeout</code> 为 5 秒。</p><h2 id="httpmaxheadersize" tabindex="-1"><code>http.maxHeaderSize</code> <a class="header-anchor" href="#httpmaxheadersize" aria-label="Permalink to “http.maxHeaderSize”">​</a></h2><p><strong>添加于: v11.6.0, v10.15.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>只读属性，指定 HTTP 标头的最大允许大小（以字节为单位）。默认为 16 KiB。可使用 <a href="/zh/nodejs/api/cli#max-http-header-sizesize"><code>--max-http-header-size</code></a> CLI 选项进行配置。</p><p>可以通过传递 <code>maxHeaderSize</code> 选项来为服务器和客户端请求覆盖此设置。</p><h2 id="httprequestoptions-callback" tabindex="-1"><code>http.request(options[, callback])</code> <a class="header-anchor" href="#httprequestoptions-callback" aria-label="Permalink to “http.request(options[, callback])”">​</a></h2><h2 id="httprequesturl-options-callback" tabindex="-1"><code>http.request(url[, options][, callback])</code> <a class="header-anchor" href="#httprequesturl-options-callback" aria-label="Permalink to “http.request(url[, options][, callback])”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v16.7.0, v14.18.0</td><td>当使用 <code>URL</code> 对象时，解析后的用户名和密码现在将被正确地进行 URI 解码。</td></tr><tr><td>v15.3.0, v14.17.0</td><td>可以使用 AbortSignal 中止请求。</td></tr><tr><td>v13.3.0</td><td>现在支持 <code>maxHeaderSize</code> 选项。</td></tr><tr><td>v13.8.0, v12.15.0, v10.19.0</td><td>现在支持 <code>insecureHTTPParser</code> 选项。</td></tr><tr><td>v10.9.0</td><td>现在可以传递 <code>url</code> 参数以及单独的 <code>options</code> 对象。</td></tr><tr><td>v7.5.0</td><td><code>options</code> 参数可以是 WHATWG <code>URL</code> 对象。</td></tr><tr><td>v0.3.6</td><td>添加于: v0.3.6</td></tr></tbody></table></div><ul><li><p><code>url</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/zh/nodejs/api/url#the-whatwg-url-api">&lt;URL&gt;</a></p></li><li><p><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></p><ul><li><p><code>agent</code> <a href="/zh/nodejs/api/http#class-httpagent">&lt;http.Agent&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 控制 <a href="/zh/nodejs/api/http#class-httpagent"><code>Agent</code></a> 的行为。可能的值：</p></li><li><p><code>undefined</code> (默认): 对此主机和端口使用 <a href="/zh/nodejs/api/http#httpglobalagent"><code>http.globalAgent</code></a>。</p></li><li><p><code>Agent</code> 对象: 显式地使用传入的 <code>Agent</code>。</p></li><li><p><code>false</code>: 导致使用具有默认值的新 <code>Agent</code>。</p></li><li><p><code>auth</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 用于计算 Authorization 标头的基本身份验证（<code>&#39;user:password&#39;</code>）。</p></li><li><p><code>createConnection</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 一个函数，用于生成当不使用 <code>agent</code> 选项时用于请求的套接字/流。这可用于避免创建自定义 <code>Agent</code> 类，仅仅是为了覆盖默认的 <code>createConnection</code> 函数。有关更多详细信息，请参阅 <a href="/zh/nodejs/api/http#agentcreateconnectionoptions-callback"><code>agent.createConnection()</code></a>。任何 <a href="/zh/nodejs/api/stream#class-streamduplex"><code>Duplex</code></a> 流都是有效的返回值。</p></li><li><p><code>defaultPort</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 协议的默认端口。 <strong>默认:</strong> 如果使用 <code>Agent</code>，则为 <code>agent.defaultPort</code>，否则为 <code>undefined</code>。</p></li><li><p><code>family</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 解析 <code>host</code> 或 <code>hostname</code> 时要使用的 IP 地址族。有效值为 <code>4</code> 或 <code>6</code>。如果未指定，将同时使用 IP v4 和 v6。</p></li><li><p><code>headers</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 包含请求标头的对象。</p></li><li><p><code>hints</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 可选的 <a href="/zh/nodejs/api/dns#supported-getaddrinfo-flags"><code>dns.lookup()</code> 提示</a>。</p></li><li><p><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 要向其发出请求的服务器的域名或 IP 地址。 <strong>默认:</strong> <code>&#39;localhost&#39;</code>。</p></li><li><p><code>hostname</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> <code>host</code> 的别名。为了支持 <a href="/zh/nodejs/api/url#urlparseurlstring-parsequerystring-slashesdenotehost"><code>url.parse()</code></a>，如果同时指定了 <code>host</code> 和 <code>hostname</code>，则将使用 <code>hostname</code>。</p></li><li><p><code>insecureHTTPParser</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 如果设置为 <code>true</code>，它将使用启用宽松标志的 HTTP 解析器。应避免使用不安全的解析器。有关更多信息，请参见 <a href="/zh/nodejs/api/cli#insecure-http-parser"><code>--insecure-http-parser</code></a>。 <strong>默认:</strong> <code>false</code></p></li><li><p><code>joinDuplicateHeaders</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> 它在请求中用 <code>, </code> 连接多个标头的字段行值，而不是丢弃重复项。有关更多信息，请参见 <a href="/zh/nodejs/api/http#messageheaders"><code>message.headers</code></a>。 <strong>默认:</strong> <code>false</code>。</p></li><li><p><code>localAddress</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 用于网络连接的本地接口。</p></li><li><p><code>localPort</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 要从中连接的本地端口。</p></li><li><p><code>lookup</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 自定义查找函数。 <strong>默认:</strong> <a href="/zh/nodejs/api/dns#dnslookuphostname-options-callback"><code>dns.lookup()</code></a>。</p></li><li><p><code>maxHeaderSize</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 可选地覆盖从服务器收到的响应的 <a href="/zh/nodejs/api/cli#max-http-header-sizesize"><code>--max-http-header-size</code></a> 的值（响应标头的最大长度，以字节为单位）。 <strong>默认:</strong> 16384 (16 KiB)。</p></li><li><p><code>method</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 指定 HTTP 请求方法的字符串。 <strong>默认:</strong> <code>&#39;GET&#39;</code>。</p></li><li><p><code>path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 请求路径。应包括查询字符串（如果有）。例如 <code>&#39;/index.html?page=12&#39;</code>。如果请求路径包含非法字符，则会引发异常。当前，仅拒绝空格，但将来可能会更改。 <strong>默认:</strong> <code>&#39;/&#39;</code>。</p></li><li><p><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 远程服务器的端口。 <strong>默认:</strong> 如果设置了 <code>defaultPort</code>，则为 <code>defaultPort</code>，否则为 <code>80</code>。</p></li><li><p><code>protocol</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 要使用的协议。 <strong>默认:</strong> <code>&#39;http:&#39;</code>。</p></li><li><p><code>setDefaultHeaders</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a>: 指定是否自动添加默认标头，例如 <code>Connection</code>、<code>Content-Length</code>、<code>Transfer-Encoding</code> 和 <code>Host</code>。 如果设置为 <code>false</code>，则必须手动添加所有必需的标头。 默认为 <code>true</code>。</p></li><li><p><code>setHost</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a>: 指定是否自动添加 <code>Host</code> 标头。 如果提供此选项，则它会覆盖 <code>setDefaultHeaders</code>。 默认为 <code>true</code>。</p></li><li><p><code>signal</code> <a href="/zh/nodejs/api/globals#class-abortsignal">&lt;AbortSignal&gt;</a>: 可用于中止正在进行的请求的 AbortSignal。</p></li><li><p><code>socketPath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> Unix 域套接字。如果指定了 <code>host</code> 或 <code>port</code> 之一，则不能使用，因为它们指定了一个 TCP 套接字。</p></li><li><p><code>timeout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a>: 指定套接字超时的毫秒数。 这将在连接套接字之前设置超时。</p></li><li><p><code>uniqueHeaders</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">&lt;Array&gt;</a> 应该只发送一次的请求标头的列表。 如果标头的值是一个数组，则这些项将使用 <code>; </code> 连接。</p></li></ul></li><li><p><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></p></li><li><p>返回: <a href="/zh/nodejs/api/http#class-httpclientrequest">&lt;http.ClientRequest&gt;</a></p></li></ul><p>也支持 <a href="/zh/nodejs/api/net#socketconnectoptions-connectlistener"><code>socket.connect()</code></a> 中的 <code>options</code>。</p><p>Node.js 为每个服务器维护多个连接以发出 HTTP 请求。 此函数允许透明地发出请求。</p><p><code>url</code> 可以是字符串或 <a href="/zh/nodejs/api/url#the-whatwg-url-api"><code>URL</code></a> 对象。 如果 <code>url</code> 是字符串，则会自动使用 <a href="/zh/nodejs/api/url#new-urlinput-base"><code>new URL()</code></a> 进行解析。 如果它是 <a href="/zh/nodejs/api/url#the-whatwg-url-api"><code>URL</code></a> 对象，则会自动转换为普通的 <code>options</code> 对象。</p><p>如果同时指定了 <code>url</code> 和 <code>options</code>，则会将这些对象合并，并且 <code>options</code> 属性优先。</p><p>可选的 <code>callback</code> 参数将作为 <a href="/zh/nodejs/api/http#event-response"><code>&#39;response&#39;</code></a> 事件的一次性监听器添加。</p><p><code>http.request()</code> 返回 <a href="/zh/nodejs/api/http#class-httpclientrequest"><code>http.ClientRequest</code></a> 类的一个实例。 <code>ClientRequest</code> 实例是一个可写流。 如果需要使用 POST 请求上传文件，则写入 <code>ClientRequest</code> 对象。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-4890" id="tab-4891" checked><label data-title="ESM" for="tab-4891">ESM</label><input type="radio" name="group-4890" id="tab-4892"><label data-title="CJS" for="tab-4892">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Buffer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:buffer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> postData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;msg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hostname: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;www.google.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/upload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Content-Length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">byteLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(postData),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`STATUS: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statusCode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`HEADERS: \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`BODY: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chunk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;No more data in response.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`problem with request: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Write data to request body</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(postData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> postData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;msg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hostname: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;www.google.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/upload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Content-Length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">byteLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(postData),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`STATUS: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statusCode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`HEADERS: \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`BODY: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chunk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;No more data in response.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`problem with request: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Write data to request body</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(postData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div></div></div><p>在示例中调用了 <code>req.end()</code>。 使用 <code>http.request()</code> 必须始终调用 <code>req.end()</code> 以表示请求的结束 - 即使没有数据写入请求主体。</p><p>如果在请求期间遇到任何错误（无论是 DNS 解析、TCP 级别错误还是实际的 HTTP 解析错误），都会在返回的请求对象上发出 <code>&#39;error&#39;</code> 事件。 与所有 <code>&#39;error&#39;</code> 事件一样，如果没有注册监听器，则会抛出错误。</p><p>有一些特殊的标头应该注意。</p><ul><li>发送 &#39;Connection: keep-alive&#39; 将通知 Node.js，与服务器的连接应保持到下一个请求。</li><li>发送 &#39;Content-Length&#39; 标头将禁用默认的块编码。</li><li>发送 &#39;Expect&#39; 标头将立即发送请求标头。 通常，在发送 &#39;Expect: 100-continue&#39; 时，应同时设置超时和 <code>&#39;continue&#39;</code> 事件的监听器。 有关更多信息，请参见 RFC 2616 第 8.2.3 节。</li><li>发送 Authorization 标头将覆盖使用 <code>auth</code> 选项来计算基本身份验证。</li></ul><p>使用 <a href="/zh/nodejs/api/url#the-whatwg-url-api"><code>URL</code></a> 作为 <code>options</code> 的示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://abc:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在成功的请求中，将按以下顺序发出以下事件：</p><ul><li><p><code>&#39;socket&#39;</code></p></li><li><p><code>&#39;response&#39;</code></p><ul><li><code>&#39;data&#39;</code> 任意次数，在 <code>res</code> 对象上（如果响应主体为空，则根本不会发出 <code>&#39;data&#39;</code>，例如，在大多数重定向中）</li><li><code>res</code> 对象上的 <code>&#39;end&#39;</code></li></ul></li><li><p><code>&#39;close&#39;</code></p></li></ul><p>如果发生连接错误，将发出以下事件：</p><ul><li><code>&#39;socket&#39;</code></li><li><code>&#39;error&#39;</code></li><li><code>&#39;close&#39;</code></li></ul><p>如果在收到响应之前过早地关闭连接，将按以下顺序发出以下事件：</p><ul><li><code>&#39;socket&#39;</code></li><li><code>&#39;error&#39;</code>，错误消息为 <code>&#39;Error: socket hang up&#39;</code>，代码为 <code>&#39;ECONNRESET&#39;</code></li><li><code>&#39;close&#39;</code></li></ul><p>如果在收到响应后过早地关闭连接，将按以下顺序发出以下事件：</p><ul><li><p><code>&#39;socket&#39;</code></p></li><li><p><code>&#39;response&#39;</code></p><ul><li><code>&#39;data&#39;</code> 任意次数，在 <code>res</code> 对象上</li></ul></li><li><p>（在此处关闭连接）</p></li><li><p><code>res</code> 对象上的 <code>&#39;aborted&#39;</code></p></li><li><p><code>&#39;close&#39;</code></p></li><li><p><code>res</code> 对象上的 <code>&#39;error&#39;</code>，错误消息为 <code>&#39;Error: aborted&#39;</code>，代码为 <code>&#39;ECONNRESET&#39;</code></p></li><li><p><code>res</code> 对象上的 <code>&#39;close&#39;</code></p></li></ul><p>如果在分配套接字之前调用 <code>req.destroy()</code>，将按以下顺序发出以下事件：</p><p>-（在此处调用 <code>req.destroy()</code>）</p><ul><li><code>&#39;error&#39;</code>，错误消息为 <code>&#39;Error: socket hang up&#39;</code>，代码为 <code>&#39;ECONNRESET&#39;</code>，或调用 <code>req.destroy()</code> 时出现的错误</li><li><code>&#39;close&#39;</code></li></ul><p>如果在连接成功之前调用 <code>req.destroy()</code>，将按以下顺序发出以下事件：</p><ul><li><code>&#39;socket&#39;</code> -（在此处调用 <code>req.destroy()</code>）</li><li><code>&#39;error&#39;</code>，错误消息为 <code>&#39;Error: socket hang up&#39;</code>，代码为 <code>&#39;ECONNRESET&#39;</code>，或调用 <code>req.destroy()</code> 时出现的错误</li><li><code>&#39;close&#39;</code></li></ul><p>如果在收到响应后调用 <code>req.destroy()</code>，将按以下顺序发出以下事件：</p><ul><li><code>&#39;socket&#39;</code></li><li><code>&#39;response&#39;</code><ul><li><code>&#39;data&#39;</code> 任意次数，在 <code>res</code> 对象上</li></ul></li></ul><p>-（在此处调用 <code>req.destroy()</code>）</p><ul><li><code>res</code> 对象上的 <code>&#39;aborted&#39;</code></li><li><code>&#39;close&#39;</code></li><li><code>res</code> 对象上的 <code>&#39;error&#39;</code>，错误消息为 <code>&#39;Error: aborted&#39;</code>，代码为 <code>&#39;ECONNRESET&#39;</code>，或调用 <code>req.destroy()</code> 时出现的错误</li><li><code>res</code> 对象上的 <code>&#39;close&#39;</code></li></ul><p>如果在分配套接字之前调用 <code>req.abort()</code>，将按以下顺序发出以下事件：</p><p>-（在此处调用 <code>req.abort()</code>）</p><ul><li><code>&#39;abort&#39;</code></li><li><code>&#39;close&#39;</code></li></ul><p>如果在连接成功之前调用 <code>req.abort()</code>，将按以下顺序发出以下事件：</p><ul><li><code>&#39;socket&#39;</code> -（在此处调用 <code>req.abort()</code>）</li><li><code>&#39;abort&#39;</code></li><li><code>&#39;error&#39;</code>，错误消息为 <code>&#39;Error: socket hang up&#39;</code>，代码为 <code>&#39;ECONNRESET&#39;</code></li><li><code>&#39;close&#39;</code></li></ul><p>如果在收到响应后调用 <code>req.abort()</code>，将按以下顺序发出以下事件：</p><ul><li><code>&#39;socket&#39;</code></li><li><code>&#39;response&#39;</code><ul><li><code>&#39;data&#39;</code> 任意次数，在 <code>res</code> 对象上</li></ul></li></ul><p>-（在此处调用 <code>req.abort()</code>）</p><ul><li><code>&#39;abort&#39;</code></li><li><code>res</code> 对象上的 <code>&#39;aborted&#39;</code></li><li><code>res</code> 对象上的 <code>&#39;error&#39;</code>，错误消息为 <code>&#39;Error: aborted&#39;</code>，代码为 <code>&#39;ECONNRESET&#39;</code>。</li><li><code>&#39;close&#39;</code></li><li><code>res</code> 对象上的 <code>&#39;close&#39;</code></li></ul><p>设置 <code>timeout</code> 选项或使用 <code>setTimeout()</code> 函数不会中止请求，除了添加 <code>&#39;timeout&#39;</code> 事件外，什么也不会做。</p><p>传递 <code>AbortSignal</code>，然后在相应的 <code>AbortController</code> 上调用 <code>abort()</code>，其行为与在请求上调用 <code>.destroy()</code> 相同。 具体来说，<code>&#39;error&#39;</code> 事件将发出一个错误，错误消息为 <code>&#39;AbortError: The operation was aborted&#39;</code>，代码为 <code>&#39;ABORT_ERR&#39;</code> 以及 <code>cause</code>（如果提供了）。</p><h2 id="httpvalidateheadernamename-label" tabindex="-1"><code>http.validateHeaderName(name[, label])</code> <a class="header-anchor" href="#httpvalidateheadernamename-label" aria-label="Permalink to “http.validateHeaderName(name[, label])”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史记录]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v19.5.0, v18.14.0</td><td>添加了 <code>label</code> 参数。</td></tr><tr><td>v14.3.0</td><td>添加于: v14.3.0</td></tr></tbody></table></div><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>label</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 错误消息的标签。 <strong>默认值:</strong> <code>&#39;Header name&#39;</code>。</li></ul><p>对提供的 <code>name</code> 执行底层验证，这些验证在调用 <code>res.setHeader(name, value)</code> 时完成。</p><p>将非法值作为 <code>name</code> 传递将导致抛出 <a href="/zh/nodejs/api/errors#class-typeerror"><code>TypeError</code></a>，由 <code>code: &#39;ERR_INVALID_HTTP_TOKEN&#39;</code> 标识。</p><p>没有必要在将标头传递给 HTTP 请求或响应之前使用此方法。 HTTP 模块将自动验证此类标头。</p><p>例子：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-5293" id="tab-5294" checked><label data-title="ESM" for="tab-5294">ESM</label><input type="radio" name="group-5293" id="tab-5295"><label data-title="CJS" for="tab-5295">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { validateHeaderName } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  validateHeaderName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.code); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; &#39;ERR_INVALID_HTTP_TOKEN&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.message); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; &#39;Header name must be a valid HTTP token [&quot;&quot;]&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">validateHeaderName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  validateHeaderName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.code); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; &#39;ERR_INVALID_HTTP_TOKEN&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.message); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; &#39;Header name must be a valid HTTP token [&quot;&quot;]&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div></div><h2 id="httpvalidateheadervaluename-value" tabindex="-1"><code>http.validateHeaderValue(name, value)</code> <a class="header-anchor" href="#httpvalidateheadervaluename-value" aria-label="Permalink to “http.validateHeaderValue(name, value)”">​</a></h2><p><strong>添加于: v14.3.0</strong></p><ul><li><code>name</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>value</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types" target="_blank" rel="noreferrer">&lt;any&gt;</a></li></ul><p>对提供的 <code>value</code> 执行底层验证，这些验证在调用 <code>res.setHeader(name, value)</code> 时完成。</p><p>将非法值作为 <code>value</code> 传递将导致抛出 <a href="/zh/nodejs/api/errors#class-typeerror"><code>TypeError</code></a>。</p><ul><li>未定义的值错误由 <code>code: &#39;ERR_HTTP_INVALID_HEADER_VALUE&#39;</code> 标识。</li><li>无效值字符错误由 <code>code: &#39;ERR_INVALID_CHAR&#39;</code> 标识。</li></ul><p>没有必要在将标头传递给 HTTP 请求或响应之前使用此方法。 HTTP 模块将自动验证此类标头。</p><p>例子：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-5339" id="tab-5340" checked><label data-title="ESM" for="tab-5340">ESM</label><input type="radio" name="group-5339" id="tab-5341"><label data-title="CJS" for="tab-5341">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { validateHeaderValue } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  validateHeaderValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-my-header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_HTTP_INVALID_HEADER_VALUE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.message); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; &#39;Invalid value &quot;undefined&quot; for header &quot;x-my-header&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  validateHeaderValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-my-header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;oʊmɪɡə&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_INVALID_CHAR&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.message); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; &#39;Invalid character in header content [&quot;x-my-header&quot;]&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">validateHeaderValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  validateHeaderValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-my-header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_HTTP_INVALID_HEADER_VALUE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.message); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; &#39;Invalid value &quot;undefined&quot; for header &quot;x-my-header&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  validateHeaderValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x-my-header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;oʊmɪɡə&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_INVALID_CHAR&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err.message); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// --&gt; &#39;Invalid character in header content [&quot;x-my-header&quot;]&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></div></div><h2 id="httpsetmaxidlehttpparsersmax" tabindex="-1"><code>http.setMaxIdleHTTPParsers(max)</code> <a class="header-anchor" href="#httpsetmaxidlehttpparsersmax" aria-label="Permalink to “http.setMaxIdleHTTPParsers(max)”">​</a></h2><p><strong>加入于: v18.8.0, v16.18.0</strong></p><ul><li><code>max</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> <strong>默认值:</strong> <code>1000</code>.</li></ul><p>设置空闲 HTTP 解析器的最大数量。</p><h2 id="websocket" tabindex="-1"><code>WebSocket</code> <a class="header-anchor" href="#websocket" aria-label="Permalink to “WebSocket”">​</a></h2><p><strong>加入于: v22.5.0</strong></p><p>与浏览器兼容的 <a href="/zh/nodejs/api/http#websocket"><code>WebSocket</code></a> 实现。</p>`,918)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};