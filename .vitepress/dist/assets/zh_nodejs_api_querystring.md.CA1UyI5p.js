import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 文档 - 查询字符串","description":"Node.js 文档的这一部分详细介绍了 querystring 模块，该模块提供了解析和格式化 URL 查询字符串的工具。包括转义和解码特殊字符、处理嵌套对象以及管理查询字符串序列化的方法。","frontmatter":{"title":"Node.js 文档 - 查询字符串","description":"Node.js 文档的这一部分详细介绍了 querystring 模块，该模块提供了解析和格式化 URL 查询字符串的工具。包括转义和解码特殊字符、处理嵌套对象以及管理查询字符串序列化的方法。","head":[["meta",{"name":"og:title","content":"Node.js 文档 - 查询字符串 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js 文档的这一部分详细介绍了 querystring 模块，该模块提供了解析和格式化 URL 查询字符串的工具。包括转义和解码特殊字符、处理嵌套对象以及管理查询字符串序列化的方法。"}],["meta",{"name":"twitter:title","content":"Node.js 文档 - 查询字符串 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js 文档的这一部分详细介绍了 querystring 模块，该模块提供了解析和格式化 URL 查询字符串的工具。包括转义和解码特殊字符、处理嵌套对象以及管理查询字符串序列化的方法。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/querystring"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/querystring"}]]},"headers":[],"relativePath":"zh/nodejs/api/querystring.md","filePath":"zh/nodejs/api/querystring.md","lastUpdated":null}`),a={name:`zh/nodejs/api/querystring.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="query-string" tabindex="-1">查询字符串 <a class="header-anchor" href="#query-string" aria-label="Permalink to “查询字符串”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[稳定: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定</p></div><p><strong>源码:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/querystring.js" target="_blank" rel="noreferrer">lib/querystring.js</a></p><p><code>node:querystring</code> 模块提供了用于解析和格式化 URL 查询字符串的实用工具。 可以使用以下方式访问它：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> querystring</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:querystring&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>与 <a href="/zh/nodejs/api/url#class-urlsearchparams">&lt;URLSearchParams&gt;</a> 相比，<code>querystring</code> 的性能更高，但不是标准化的 API。 当性能不重要或需要与浏览器代码兼容时，请使用 <a href="/zh/nodejs/api/url#class-urlsearchparams">&lt;URLSearchParams&gt;</a>。</p><h2 id="querystringdecode" tabindex="-1"><code>querystring.decode()</code> <a class="header-anchor" href="#querystringdecode" aria-label="Permalink to “querystring.decode()”">​</a></h2><p><strong>新增于: v0.1.99</strong></p><p><code>querystring.decode()</code> 函数是 <code>querystring.parse()</code> 的别名。</p><h2 id="querystringencode" tabindex="-1"><code>querystring.encode()</code> <a class="header-anchor" href="#querystringencode" aria-label="Permalink to “querystring.encode()”">​</a></h2><p><strong>新增于: v0.1.99</strong></p><p><code>querystring.encode()</code> 函数是 <code>querystring.stringify()</code> 的别名。</p><h2 id="querystringescapestr" tabindex="-1"><code>querystring.escape(str)</code> <a class="header-anchor" href="#querystringescapestr" aria-label="Permalink to “querystring.escape(str)”">​</a></h2><p><strong>新增于: v0.1.25</strong></p><ul><li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>querystring.escape()</code> 方法以针对 URL 查询字符串的特定要求进行了优化的方式，对给定的 <code>str</code> 执行 URL 百分比编码。</p><p><code>querystring.escape()</code> 方法由 <code>querystring.stringify()</code> 使用，通常不希望直接使用。 导出它主要是为了允许应用程序代码在必要时通过将 <code>querystring.escape</code> 分配给备用函数来提供替换的百分比编码实现。</p><h2 id="querystringparsestr-sep-eq-options" tabindex="-1"><code>querystring.parse(str[, sep[, eq[, options]]])</code> <a class="header-anchor" href="#querystringparsestr-sep-eq-options" aria-label="Permalink to “querystring.parse(str[, sep[, eq[, options]]])”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[历史]</p><table tabindex="0"><thead><tr><th>版本</th><th>变更</th></tr></thead><tbody><tr><td>v8.0.0</td><td>现在可以正确解析多个空条目（例如 <code>&amp;=&amp;=</code>）。</td></tr><tr><td>v6.0.0</td><td>返回的对象不再继承自 <code>Object.prototype</code>。</td></tr><tr><td>v6.0.0, v4.2.4</td><td><code>eq</code> 参数的长度现在可能大于 <code>1</code>。</td></tr><tr><td>v0.1.25</td><td>新增于: v0.1.25</td></tr></tbody></table></div><ul><li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 要解析的 URL 查询字符串</li><li><code>sep</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 用于分隔查询字符串中的键值对的子字符串。 <strong>默认值:</strong> <code>&#39;&amp;&#39;</code>。</li><li><code>eq</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a>. 用于分隔查询字符串中的键和值的子字符串。 <strong>默认值:</strong> <code>&#39;=&#39;</code>。</li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a><ul><li><code>decodeURIComponent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 在解码查询字符串中经过百分比编码的字符时要使用的函数。 <strong>默认值:</strong> <code>querystring.unescape()</code>。</li><li><code>maxKeys</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> 指定要解析的最大键数。 指定 <code>0</code> 以删除键计数限制。 <strong>默认值:</strong> <code>1000</code>。</li></ul></li></ul><p><code>querystring.parse()</code> 方法将 URL 查询字符串 (<code>str</code>) 解析为键值对的集合。</p><p>例如，查询字符串 <code>&#39;foo=bar&amp;abc=xyz&amp;abc=123&#39;</code> 被解析为：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xyz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>querystring.parse()</code> 方法返回的对象 <em>不</em> 从 JavaScript <code>Object</code> 原型继承。 这意味着典型的 <code>Object</code> 方法（例如 <code>obj.toString()</code>、<code>obj.hasOwnProperty()</code> 等）未定义且<em>将不起作用</em>。</p><p>默认情况下，查询字符串中的百分比编码字符将被假定为使用 UTF-8 编码。 如果使用其他字符编码，则需要指定其他 <code>decodeURIComponent</code> 选项：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设 gbkDecodeURIComponent 函数已经存在...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;w=%D6%D0%CE%C4&amp;foo=bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  { decodeURIComponent: gbkDecodeURIComponent });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="querystringstringifyobj-sep-eq-options" tabindex="-1"><code>querystring.stringify(obj[, sep[, eq[, options]]])</code> <a class="header-anchor" href="#querystringstringifyobj-sep-eq-options" aria-label="Permalink to “querystring.stringify(obj[, sep[, eq[, options]]])”">​</a></h2><p><strong>Added in: v0.1.25</strong></p><ul><li><code>obj</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 要序列化为 URL 查询字符串的对象</li><li><code>sep</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 用于分隔查询字符串中键值对的子字符串。 <strong>默认值:</strong> <code>&#39;&amp;&#39;</code>。</li><li><code>eq</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a>. 用于分隔查询字符串中键和值的子字符串。 <strong>默认值:</strong> <code>&#39;=&#39;</code>。</li><li><code>options</code><ul><li><code>encodeURIComponent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> 在查询字符串中将 URL 不安全字符转换为百分比编码时使用的函数。 <strong>默认值:</strong> <code>querystring.escape()</code>。</li></ul></li></ul><p><code>querystring.stringify()</code> 方法通过迭代对象的“自有属性”来从给定的 <code>obj</code> 生成 URL 查询字符串。</p><p>它序列化在 <code>obj</code> 中传递的以下类型的值：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noreferrer">&lt;bigint&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noreferrer">&lt;bigint[]&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean[]&gt;</a> 数字值必须是有限的。 任何其他输入值都将被强制转换为空字符串。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, baz: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;qux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;quux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], corge: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 &#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, baz: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;qux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 &#39;foo:bar;baz:qux&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>默认情况下，查询字符串中需要百分比编码的字符将编码为 UTF-8。 如果需要替代编码，则需要指定替代的 <code>encodeURIComponent</code> 选项：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设 gbkEncodeURIComponent 函数已经存在，</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">querystring.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ w: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;中文&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      { encodeURIComponent: gbkEncodeURIComponent });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="querystringunescapestr" tabindex="-1"><code>querystring.unescape(str)</code> <a class="header-anchor" href="#querystringunescapestr" aria-label="Permalink to “querystring.unescape(str)”">​</a></h2><p><strong>添加于: v0.1.25</strong></p><ul><li><code>str</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li></ul><p><code>querystring.unescape()</code> 方法对给定的 <code>str</code> 执行 URL 百分号编码字符的解码。</p><p><code>querystring.unescape()</code> 方法被 <code>querystring.parse()</code> 使用，通常不应直接使用。导出它的主要目的是允许应用程序代码在必要时通过将 <code>querystring.unescape</code> 赋值给一个替代函数来提供一个替代的解码实现。</p><p>默认情况下，<code>querystring.unescape()</code> 方法将尝试使用 JavaScript 内置的 <code>decodeURIComponent()</code> 方法进行解码。 如果失败，则会使用一个更安全的等效方法，该方法不会在格式错误的 URL 上抛出异常。</p>`,40)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};