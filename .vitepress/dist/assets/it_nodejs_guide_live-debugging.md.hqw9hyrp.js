import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Debugging in diretta in Node.js","description":"Scopri come eseguire il debug in diretta di un processo Node.js per identificare e risolvere problemi con la logica e la correttezza dell'applicazione.","frontmatter":{"title":"Debugging in diretta in Node.js","description":"Scopri come eseguire il debug in diretta di un processo Node.js per identificare e risolvere problemi con la logica e la correttezza dell'applicazione.","head":[["meta",{"name":"og:title","content":"Debugging in diretta in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Scopri come eseguire il debug in diretta di un processo Node.js per identificare e risolvere problemi con la logica e la correttezza dell'applicazione."}],["meta",{"name":"twitter:title","content":"Debugging in diretta in Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Scopri come eseguire il debug in diretta di un processo Node.js per identificare e risolvere problemi con la logica e la correttezza dell'applicazione."}],["link",{"rel":"canonical","href":"https://idoc.dev/it/nodejs/guide/live-debugging"}],["meta",{"property":"og:url","content":"https://idoc.dev/it/nodejs/guide/live-debugging"}]]},"headers":[],"relativePath":"it/nodejs/guide/live-debugging.md","filePath":"it/nodejs/guide/live-debugging.md","lastUpdated":null}`),a={name:`it/nodejs/guide/live-debugging.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="debugging-in-tempo-reale" tabindex="-1">Debugging in tempo reale <a class="header-anchor" href="#debugging-in-tempo-reale" aria-label="Permalink to “Debugging in tempo reale”">​</a></h1><p>In questo documento puoi imparare come eseguire il debug in tempo reale di un processo Node.js.</p><h2 id="la-mia-applicazione-non-si-comporta-come-previsto" tabindex="-1">La mia applicazione non si comporta come previsto <a class="header-anchor" href="#la-mia-applicazione-non-si-comporta-come-previsto" aria-label="Permalink to “La mia applicazione non si comporta come previsto”">​</a></h2><h3 id="sintomi" tabindex="-1">Sintomi <a class="header-anchor" href="#sintomi" aria-label="Permalink to “Sintomi”">​</a></h3><p>L&#39;utente potrebbe osservare che l&#39;applicazione non fornisce l&#39;output previsto per determinati input, ad esempio, un server HTTP restituisce una risposta JSON dove alcuni campi sono vuoti. Diverse cose possono andare storte nel processo, ma in questo caso d&#39;uso, ci concentriamo principalmente sulla logica dell&#39;applicazione e sulla sua correttezza.</p><h3 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to “Debugging”">​</a></h3><p>In questo caso d&#39;uso, l&#39;utente vorrebbe capire il percorso del codice che la nostra applicazione esegue per un determinato trigger come una richiesta HTTP in entrata. Potrebbe anche voler scorrere il codice e controllare l&#39;esecuzione, nonché ispezionare quali valori le variabili contengono in memoria. A tale scopo, possiamo utilizzare il flag <code>--inspect</code> quando si avvia l&#39;applicazione. La documentazione sul debugging è disponibile <a href="/it/nodejs/guide/debugging-nodejs">qui</a>.</p>`,7)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};