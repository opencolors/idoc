import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js アプリケーションのセキュリティ ベスト プラクティス","description":"Node.js アプリケーションのセキュリティを確保するための包括的なガイド、脅威のモデル化、ベスト プラクティス、サービス拒否、DNS の再バインド、機密情報の公開などの一般的な脆弱性の軽減を網羅しています。","frontmatter":{"title":"Node.js アプリケーションのセキュリティ ベスト プラクティス","description":"Node.js アプリケーションのセキュリティを確保するための包括的なガイド、脅威のモデル化、ベスト プラクティス、サービス拒否、DNS の再バインド、機密情報の公開などの一般的な脆弱性の軽減を網羅しています。","head":[["meta",{"name":"og:title","content":"Node.js アプリケーションのセキュリティ ベスト プラクティス | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js アプリケーションのセキュリティを確保するための包括的なガイド、脅威のモデル化、ベスト プラクティス、サービス拒否、DNS の再バインド、機密情報の公開などの一般的な脆弱性の軽減を網羅しています。"}],["meta",{"name":"twitter:title","content":"Node.js アプリケーションのセキュリティ ベスト プラクティス | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js アプリケーションのセキュリティを確保するための包括的なガイド、脅威のモデル化、ベスト プラクティス、サービス拒否、DNS の再バインド、機密情報の公開などの一般的な脆弱性の軽減を網羅しています。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/guide/security-best-practices"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/guide/security-best-practices"}]]},"headers":[],"relativePath":"ja/nodejs/guide/security-best-practices.md","filePath":"ja/nodejs/guide/security-best-practices.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/guide/security-best-practices.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="セキュリティのベストプラクティス" tabindex="-1">セキュリティのベストプラクティス <a class="header-anchor" href="#セキュリティのベストプラクティス" aria-label="Permalink to “セキュリティのベストプラクティス”">​</a></h1><h3 id="目的" tabindex="-1">目的 <a class="header-anchor" href="#目的" aria-label="Permalink to “目的”">​</a></h3><p>このドキュメントは、現在の<a href="/ja/nodejs/guide/security-best-practices#threat-model">脅威モデル</a>を拡張し、Node.jsアプリケーションを保護する方法に関する広範なガイドラインを提供することを目的としています。</p><h2 id="ドキュメントの内容" tabindex="-1">ドキュメントの内容 <a class="header-anchor" href="#ドキュメントの内容" aria-label="Permalink to “ドキュメントの内容”">​</a></h2><ul><li>ベストプラクティス: ベストプラクティスを簡略化してまとめたものです。開始点として、<a href="https://github.com/nodejs/security-wg/issues/488" target="_blank" rel="noreferrer">このissue</a>または<a href="https://github.com/goldbergyoni/nodebestpractices" target="_blank" rel="noreferrer">このガイドライン</a>を使用できます。このドキュメントはNode.jsに固有のものであることに注意してください。広範なものを探している場合は、<a href="https://github.com/ossf/wg-best-practices-os-developers" target="_blank" rel="noreferrer">OSSF Best Practices</a>を検討してください。</li><li>攻撃の説明: 脅威モデルで言及している攻撃について、平易な英語で説明し、コード例（可能な場合）を交えて文書化します。</li><li>サードパーティライブラリ: 脅威（タイポスクワッティング攻撃、悪意のあるパッケージなど）と、Nodeモジュールの依存関係などに関するベストプラクティスを定義します。</li></ul><h2 id="脅威リスト" tabindex="-1">脅威リスト <a class="header-anchor" href="#脅威リスト" aria-label="Permalink to “脅威リスト”">​</a></h2><h3 id="httpサーバーのサービス拒否-cwe-400" tabindex="-1">HTTPサーバーのサービス拒否 (CWE-400) <a class="header-anchor" href="#httpサーバーのサービス拒否-cwe-400" aria-label="Permalink to “HTTPサーバーのサービス拒否 (CWE-400)”">​</a></h3><p>これは、受信HTTPリクエストの処理方法が原因で、アプリケーションが本来の目的で使用できなくなる攻撃です。これらのリクエストは、悪意のある行為者によって意図的に作成されたものである必要はありません。設定ミスまたはバグのあるクライアントも、サービス拒否につながるリクエストパターンをサーバーに送信する可能性があります。</p><p>HTTPリクエストはNode.js HTTPサーバーによって受信され、登録されたリクエストハンドラーを介してアプリケーションコードに渡されます。サーバーはリクエスト本文の内容を解析しません。したがって、リクエストハンドラーに渡された後の本文の内容によって引き起こされるDoSは、Node.js自体の脆弱性ではありません。正しく処理するのはアプリケーションコードの責任であるためです。</p><p>WebServerがソケットエラーを適切に処理することを確認してください。たとえば、エラーハンドラーなしでサーバーが作成された場合、DoSに対して脆弱になります。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:net&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // socket.on(&#39;error&#39;, console.error)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // これによりサーバーがクラッシュするのを防ぎます</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Echo server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(socket)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0.0.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><em>不正なリクエストが実行されると、サーバーがクラッシュする可能性があります。</em></p><p>リクエストの内容が原因ではないDoS攻撃の例として、Slowlorisがあります。この攻撃では、HTTPリクエストがゆっくりと断片化されて送信されます。リクエスト全体が配信されるまで、サーバーは進行中のリクエスト専用のリソースを保持します。これらのリクエストが同時に十分に送信されると、同時接続の数がすぐに最大に達し、サービス拒否が発生します。これが、攻撃がリクエストの内容ではなく、サーバーに送信されるリクエストのタイミングとパターンに依存する方法です。</p><h4 id="軽減策" tabindex="-1">軽減策 <a class="header-anchor" href="#軽減策" aria-label="Permalink to “軽減策”">​</a></h4><ul><li>リバースプロキシを使用して、リクエストを受信し、Node.jsアプリケーションに転送します。リバースプロキシは、キャッシング、ロードバランシング、IPブラックリストなどを提供し、DoS攻撃が効果的になる可能性を低減します。</li><li>サーバのタイムアウトを正しく構成して、アイドル状態の接続や、リクエストの到着が遅すぎる接続をドロップできるようにします。<code>http.Server</code>のさまざまなタイムアウト（特に<code>headersTimeout</code>、<code>requestTimeout</code>、<code>timeout</code>、および<code>keepAliveTimeout</code>）を参照してください。</li><li>ホストごとおよび合計のオープンソケットの数を制限します。<a href="/ja/nodejs/api/http">httpドキュメント</a>（特に<code>agent.maxSockets</code>、<code>agent.maxTotalSockets</code>、<code>agent.maxFreeSockets</code>、および<code>server.maxRequestsPerSocket</code>）を参照してください。</li></ul><h3 id="dnsリバインディング-cwe-346" tabindex="-1">DNSリバインディング (CWE-346) <a class="header-anchor" href="#dnsリバインディング-cwe-346" aria-label="Permalink to “DNSリバインディング (CWE-346)”">​</a></h3><p>これは、<a href="/ja/nodejs/guide/debugging-nodejs">--inspectスイッチ</a>を使用してデバッグインスペクターを有効にして実行されているNode.jsアプリケーションを標的にする可能性のある攻撃です。</p><p>Webブラウザで開かれたWebサイトはWebSocketおよびHTTPリクエストを行うことができるため、ローカルで実行されているデバッグインスペクターを標的にすることができます。これは通常、最新のブラウザによって実装されている<a href="/ja/nodejs/guide/debugging-nodejs">同一オリジンポリシー</a>によって防止されます。このポリシーは、スクリプトが異なるオリジンからのリソースにアクセスすることを禁止します（つまり、悪意のあるWebサイトはローカルIPアドレスからリクエストされたデータを読み取ることができません）。</p><p>ただし、DNSリバインディングを通じて、攻撃者はリクエストのオリジンを一時的に制御して、ローカルIPアドレスから発信されたように見せかけることができます。これは、WebサイトとそのIPアドレスの解決に使用されるDNSサーバーの両方を制御することで行われます。詳細については、<a href="https://en.wikipedia.org/wiki/DNS_rebinding" target="_blank" rel="noreferrer">DNS Rebinding wiki</a>を参照してください。</p><h4 id="軽減策-1" tabindex="-1">軽減策 <a class="header-anchor" href="#軽減策-1" aria-label="Permalink to “軽減策”">​</a></h4><ul><li><code>process.on(‘SIGUSR1’, …)</code>リスナーをアタッチして、SIGUSR1シグナルでインスペクターを無効にします。</li><li>本番環境ではインスペクタープロトコルを実行しないでください。</li></ul><h3 id="許可されていないアクターへの機密情報の漏洩-cwe-552" tabindex="-1">許可されていないアクターへの機密情報の漏洩 (CWE-552) <a class="header-anchor" href="#許可されていないアクターへの機密情報の漏洩-cwe-552" aria-label="Permalink to “許可されていないアクターへの機密情報の漏洩 (CWE-552)”">​</a></h3><p>現在のディレクトリに含まれるすべてのファイルとフォルダは、パッケージの公開中にnpmレジストリにプッシュされます。</p><p><code>.npmignore</code>および<code>.gitignore</code>を使用してブロックリストを定義するか、<code>package.json</code>で許可リストを定義することにより、この動作を制御するいくつかのメカニズムがあります。</p><h4 id="対策" tabindex="-1">対策 <a class="header-anchor" href="#対策" aria-label="Permalink to “対策”">​</a></h4><ul><li><code>npm publish --dry-run</code> を使用して、公開するすべてのファイルを一覧表示します。パッケージを公開する前に、内容を必ず確認してください。</li><li><code>.gitignore</code> や <code>.npmignore</code> などの無視ファイルを作成および維持することも重要です。これらのファイルを通して、公開しないファイル/フォルダを指定できます。<code>package.json</code> の <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#files" target="_blank" rel="noreferrer">files プロパティ</a> では、逆の操作（許可リスト）が可能です。</li><li>情報漏洩が発生した場合は、<a href="https://docs.npmjs.com/unpublishing-packages-from-the-registry" target="_blank" rel="noreferrer">パッケージの公開を取り消す</a> ようにしてください。</li></ul><h3 id="http-リクエストスマグリング-cwe-444" tabindex="-1">HTTP リクエストスマグリング (CWE-444) <a class="header-anchor" href="#http-リクエストスマグリング-cwe-444" aria-label="Permalink to “HTTP リクエストスマグリング (CWE-444)”">​</a></h3><p>これは、2 つの HTTP サーバー (通常はプロキシと Node.js アプリケーション) が関与する攻撃です。クライアントは、まずフロントエンドサーバー (プロキシ) を通過し、次にバックエンドサーバー (アプリケーション) にリダイレクトされる HTTP リクエストを送信します。フロントエンドとバックエンドが曖昧な HTTP リクエストを異なる方法で解釈する場合、攻撃者がフロントエンドには見えないがバックエンドには見える悪意のあるメッセージを送信し、効果的にプロキシサーバーを「スマグリング」する可能性があります。</p><p>詳細な説明と例については、<a href="https://cwe.mitre.org/data/definitions/444.html" target="_blank" rel="noreferrer">CWE-444</a> を参照してください。</p><p>この攻撃は、Node.js が HTTP リクエストを (任意の) HTTP サーバーとは異なる方法で解釈することに依存しているため、攻撃が成功するかどうかは、Node.js、フロントエンドサーバー、またはその両方の脆弱性に起因する可能性があります。Node.js によるリクエストの解釈方法が HTTP 仕様 (see <a href="https://datatracker.ietf.org/doc/html/rfc7230#section-3" target="_blank" rel="noreferrer">RFC7230</a>) と一致している場合、Node.js の脆弱性とは見なされません。</p><h4 id="対策-1" tabindex="-1">対策 <a class="header-anchor" href="#対策-1" aria-label="Permalink to “対策”">​</a></h4><ul><li>HTTP サーバーを作成する際に <code>insecureHTTPParser</code> オプションを使用しないでください。</li><li>曖昧なリクエストを正規化するようにフロントエンドサーバーを構成します。</li><li>Node.js と選択したフロントエンドサーバーの両方で、新しい HTTP リクエストスマグリングの脆弱性を継続的に監視します。</li><li>可能であれば、HTTP/2 をエンドツーエンドで使用し、HTTP のダウングレードを無効にします。</li></ul><h3 id="タイミング攻撃による情報漏洩-cwe-208" tabindex="-1">タイミング攻撃による情報漏洩 (CWE-208) <a class="header-anchor" href="#タイミング攻撃による情報漏洩-cwe-208" aria-label="Permalink to “タイミング攻撃による情報漏洩 (CWE-208)”">​</a></h3><p>これは、例えば、アプリケーションがリクエストに応答するのにかかる時間を測定することによって、攻撃者が潜在的に機密情報を学習できるようにする攻撃です。この攻撃は Node.js に特有のものではなく、ほぼすべてのランタイムを標的にすることができます。</p><p>アプリケーションがタイミングに敏感な操作（例えば、分岐）でシークレットを使用する場合に、攻撃が可能になります。典型的なアプリケーションでの認証の処理を考えてみましょう。ここで、基本的な認証方法には、電子メールとパスワードが認証情報として含まれます。ユーザー情報は、ユーザーが提供した入力から、理想的には DBMS から取得されます。ユーザー情報を取得すると、パスワードはデータベースから取得したユーザー情報と比較されます。組み込みの文字列比較を使用すると、同じ長さの値に対してより長い時間がかかります。この比較を許容範囲内で実行すると、意図せずにリクエストの応答時間が長くなります。リクエストの応答時間を比較することにより、攻撃者は大量のリクエストでパスワードの長さと値を推測できます。</p><h4 id="緩和策" tabindex="-1">緩和策 <a class="header-anchor" href="#緩和策" aria-label="Permalink to “緩和策”">​</a></h4><ul><li>crypto API は、定数時間アルゴリズムを使用して、実際の機密値と予想される機密値を比較するための関数 <code>timingSafeEqual</code> を公開しています。</li><li>パスワードの比較には、ネイティブの crypto モジュールでも利用可能な <a href="/ja/nodejs/api/crypto">scrypt</a> を使用できます。</li><li>より一般的には、可変時間操作でシークレットを使用することを避けてください。これには、シークレットでの分岐や、攻撃者が同じインフラストラクチャ（例えば、同じクラウドマシン）に配置されている可能性がある場合に、シークレットをメモリへのインデックスとして使用することが含まれます。JavaScript で定数時間コードを記述するのは困難です（一部は JIT のため）。暗号化アプリケーションの場合は、組み込みの crypto API または WebAssembly（ネイティブで実装されていないアルゴリズムの場合）を使用してください。</li></ul><h3 id="悪意のあるサードパーティ製モジュール-cwe-1357" tabindex="-1">悪意のあるサードパーティ製モジュール (CWE-1357) <a class="header-anchor" href="#悪意のあるサードパーティ製モジュール-cwe-1357" aria-label="Permalink to “悪意のあるサードパーティ製モジュール (CWE-1357)”">​</a></h3><p>現在、Node.js では、どのパッケージでもネットワークアクセスなどの強力なリソースにアクセスできます。さらに、ファイルシステムへのアクセス権もあるため、任意のデータを任意の場所に送信できます。</p><p>ノードプロセスで実行されているすべてのコードは、<code>eval()</code> (またはそれに相当するもの) を使用して、追加の任意のコードをロードして実行できます。ファイルシステムへの書き込みアクセス権を持つすべてのコードは、ロードされる新しいファイルまたは既存のファイルに書き込むことによって、同じことを実現できます。</p><p>Node.js には、ロードされたリソースを信頼されていない、または信頼されていると宣言するための試験的な¹ <a href="/ja/nodejs/api/permissions">ポリシーメカニズム</a> があります。ただし、このポリシーはデフォルトでは有効になっていません。依存関係のバージョンを固定し、一般的なワークフローまたは npm スクリプトを使用して脆弱性の自動チェックを実行してください。パッケージをインストールする前に、そのパッケージがメンテナンスされており、想定されるすべてのコンテンツが含まれていることを確認してください。GitHub のソースコードは必ずしも公開されているものと同じではないため、<code>node_modules</code> で検証してください。</p><h4 id="サプライチェーン攻撃" tabindex="-1">サプライチェーン攻撃 <a class="header-anchor" href="#サプライチェーン攻撃" aria-label="Permalink to “サプライチェーン攻撃”">​</a></h4><p>Node.jsアプリケーションに対するサプライチェーン攻撃は、その依存関係（直接的または推移的なもの）のいずれかが侵害された場合に発生します。これは、アプリケーションが依存関係の指定に関して緩すぎる（不要なアップデートを許容する）か、または指定における一般的なタイプミス（<a href="https://en.wikipedia.org/wiki/Typosquatting" target="_blank" rel="noreferrer">タイポスクワッティング</a>の影響を受けやすい）のいずれかによって発生する可能性があります。</p><p>上流のパッケージを制御する攻撃者は、悪意のあるコードを含む新しいバージョンを公開することができます。Node.jsアプリケーションが、どのバージョンが安全であるかについて厳密に指定せずにそのパッケージに依存している場合、パッケージは自動的に最新の悪意のあるバージョンに更新され、アプリケーションが侵害される可能性があります。</p><p><code>package.json</code>ファイルで指定された依存関係は、正確なバージョン番号または範囲を持つことができます。ただし、依存関係を正確なバージョンに固定しても、その推移的な依存関係自体は固定されません。これにより、アプリケーションは不要な/予期しないアップデートに対して脆弱なままになります。</p><p>考えられる攻撃ベクトル：</p><ul><li>タイポスクワッティング攻撃</li><li>ロックファイルポイズニング</li><li>侵害されたメンテナー</li><li>悪意のあるパッケージ</li><li>依存関係の混同</li></ul><h5 id="軽減策-2" tabindex="-1">軽減策 <a class="header-anchor" href="#軽減策-2" aria-label="Permalink to “軽減策”">​</a></h5><ul><li><code>--ignore-scripts</code>を使用して、npmが悪意のあるスクリプトを実行するのを防ぐ <ul><li>さらに、<code>npm config set ignore-scripts true</code>を使用してグローバルに無効にすることができます</li></ul></li><li>依存関係のバージョンを、範囲または可変ソースからのバージョンではなく、特定の不変バージョンに固定します。</li><li>すべての依存関係（直接的および推移的）を固定するロックファイルを使用します。 <ul><li><a href="https://blog.ulisesgascon.com/lockfile-posioned" target="_blank" rel="noreferrer">ロックファイルポイズニングに対する軽減策</a>を使用します。</li></ul></li><li><a href="https://www.npmjs.com/package/npm-audit" target="_blank" rel="noreferrer">npm-audit</a>のようなツールを使用して、CIを使用して新しい脆弱性のチェックを自動化します。 <ul><li><code>Socket</code>などのツールを使用して、ネットワークやファイルシステムへのアクセスなどの危険な動作を見つけるために、静的分析でパッケージを分析できます。</li></ul></li><li><code>npm install</code>の代わりに<code>npm ci</code>を使用します。これにより、ロックファイルが強制され、ロックファイルと<code>package.json</code>ファイル間の不整合が発生した場合、エラーが発生します（<code>package.json</code>を優先してロックファイルを黙って無視する代わりに）。</li><li><code>package.json</code>ファイルで、依存関係の名前のエラー/タイプミスを注意深く確認してください。</li></ul><h3 id="メモリアクセス違反-cwe-284" tabindex="-1">メモリアクセス違反 (CWE-284) <a class="header-anchor" href="#メモリアクセス違反-cwe-284" aria-label="Permalink to “メモリアクセス違反 (CWE-284)”">​</a></h3><p>メモリベースまたはヒープベースの攻撃は、メモリ管理エラーと悪用可能なメモリアロケータの組み合わせに依存します。すべてのランタイムと同様に、Node.js も、プロジェクトが共有マシン上で実行されている場合、これらの攻撃に対して脆弱です。セキュアヒープを使用することは、ポインタのオーバーランおよびアンダーランによる機密情報の漏洩を防ぐのに役立ちます。</p><p>残念ながら、セキュアヒープは Windows では利用できません。詳細については、Node.js の <a href="/ja/nodejs/api/cli">セキュアヒープのドキュメント</a> を参照してください。</p><h4 id="緩和策-1" tabindex="-1">緩和策 <a class="header-anchor" href="#緩和策-1" aria-label="Permalink to “緩和策”">​</a></h4><ul><li>アプリケーションに応じて <code>--secure-heap=n</code> を使用します。ここで n は割り当てられる最大バイトサイズです。</li><li>本番環境のアプリを共有マシン上で実行しないでください。</li></ul><h3 id="モンキーパッチ-cwe-349" tabindex="-1">モンキーパッチ (CWE-349) <a class="header-anchor" href="#モンキーパッチ-cwe-349" aria-label="Permalink to “モンキーパッチ (CWE-349)”">​</a></h3><p>モンキーパッチとは、既存の動作を変更することを目的として、実行時にプロパティを変更することを指します。例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// eslint-disable-next-line no-extend-native</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // グローバルな [].push をオーバーライドする</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="緩和策-2" tabindex="-1">緩和策 <a class="header-anchor" href="#緩和策-2" aria-label="Permalink to “緩和策”">​</a></h4><p><code>--frozen-intrinsics</code> フラグは、実験的な¹フローズンイントリンシクスを有効にします。これは、組み込みのすべての JavaScript オブジェクトと関数が再帰的にフリーズされることを意味します。したがって、次のスニペットは <code>Array.prototype.push</code> のデフォルトの動作をオーバーライドしません。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// eslint-disable-next-line no-extend-native</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // グローバルな [].push をオーバーライドする</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未捕捉:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError &lt;Object &lt;Object &lt;[Object: null prototype] {}&gt;&gt;&gt;:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// オブジェクト &#39;の読み取り専用プロパティ &#39;push&#39; に割り当てることができません</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>ただし、<code>globalThis</code> を使用して新しいグローバル変数を定義したり、既存のグローバル変数を置き換えたりできることに注意することが重要です。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalThis.foo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 新しいグローバル変数を定義できます</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globalThis.Array</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ただし、既存のグローバル変数を置き換えることもできます</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>したがって、<code>Object.freeze(globalThis)</code> を使用すると、グローバル変数が置き換えられないことを保証できます。</p><h3 id="プロトタイプ汚染攻撃-cwe-1321" tabindex="-1">プロトタイプ汚染攻撃 (CWE-1321) <a class="header-anchor" href="#プロトタイプ汚染攻撃-cwe-1321" aria-label="Permalink to “プロトタイプ汚染攻撃 (CWE-1321)”">​</a></h3><p>プロトタイプ汚染とは、_<em>proto</em>, _constructor, prototype、および組み込みプロトタイプから継承された他のプロパティの使用を悪用して、Javascript 言語アイテムのプロパティを変更または挿入する可能性を指します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;__proto__&quot;: { &quot;polluted&quot;: true}}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, a, data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c.polluted) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 潜在的な DoS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;__proto__&quot;: null}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, data2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasOwnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未捕捉 TypeError: d.hasOwnProperty is not a function</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>これは、JavaScript 言語から継承された潜在的な脆弱性です。</p><h4 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to “例”">​</a></h4><ul><li><a href="https://www.cvedetails.com/cve/CVE-2022-21824/" target="_blank" rel="noreferrer">CVE-2022-21824</a> (Node.js)</li><li><a href="https://www.cvedetails.com/cve/CVE-2018-3721/" target="_blank" rel="noreferrer">CVE-2018-3721</a> (サードパーティライブラリ: Lodash)</li></ul><h4 id="緩和策-3" tabindex="-1">緩和策 <a class="header-anchor" href="#緩和策-3" aria-label="Permalink to “緩和策”">​</a></h4><ul><li><a href="https://gist.github.com/DaniAkash/b3d7159fddcff0a9ee035bd10e34b277#file-unsafe-merge-js" target="_blank" rel="noreferrer">安全でない再帰的マージ</a>を避ける。(<a href="https://www.cve.org/CVERecord?id=CVE-2018-16487" target="_blank" rel="noreferrer">CVE-2018-16487</a>を参照)。</li><li>外部/信頼できないリクエストに対して JSON スキーマの検証を実装する。</li><li><code>Object.create(null)</code> を使用してプロトタイプなしでオブジェクトを作成する。</li><li>プロトタイプを凍結する: <code>Object.freeze(MyObject.prototype)</code>。</li><li><code>--disable-proto</code> フラグを使用して <code>Object.prototype.__proto__</code> プロパティを無効にする。</li><li>プロパティがオブジェクトに直接存在するかどうかを、<code>Object.hasOwn(obj, keyFromObj)</code> を使用してプロトタイプからではなく確認する。</li><li><code>Object.prototype</code> からのメソッドの使用を避ける。</li></ul><h3 id="制御されない検索パス要素-cwe-427" tabindex="-1">制御されない検索パス要素 (CWE-427) <a class="header-anchor" href="#制御されない検索パス要素-cwe-427" aria-label="Permalink to “制御されない検索パス要素 (CWE-427)”">​</a></h3><p>Node.js は<a href="/ja/nodejs/api/modules">モジュール解決アルゴリズム</a>に従ってモジュールをロードします。したがって、モジュールが要求 (require) されるディレクトリは信頼されていると想定します。</p><p>つまり、次のアプリケーションの動作が期待されます。次のディレクトリ構造を想定します。</p><ul><li>app/ <ul><li>server.js</li><li>auth.js</li><li>auth</li></ul></li></ul><p>server.js が <code>require(&#39;./auth&#39;)</code> を使用する場合、モジュール解決アルゴリズムに従い、<code>auth.js</code> ではなく auth をロードします。</p><h4 id="緩和策-4" tabindex="-1">緩和策 <a class="header-anchor" href="#緩和策-4" aria-label="Permalink to “緩和策”">​</a></h4><p>実験的な¹ <a href="/ja/nodejs/api/permissions">整合性チェック付きポリシーメカニズム</a>を使用すると、上記の脅威を回避できます。上記のディレクトリの場合、次の <code>policy.json</code> を使用できます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./app/auth.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;integrity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-iuGZ6SFVFpMuHUcJciQTIKpIyaQVigMZlvg9Lx66HV8=&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./app/server.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;./auth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./app/auth.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;integrity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-NPtLCQ0ntPPWgfVEgX46ryTNpdvTWdQPoZO3kHo0bKI=&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>したがって、auth モジュールを要求する場合、システムは整合性を検証し、予期されたものと一致しない場合はエラーをスローします。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">»</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --experimental-policy=policy.json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app/server.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node:internal/policy/sri:65</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      throw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ERR_SRI_PARSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">str,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> str[prevIndex],</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prevIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SyntaxError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ERR_SRI_PARSE]: Subresource Integrity string </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-iuGZ6SFVFpMuHUcJciQTIKpIyaQVigMZlvg9Lx66HV8=%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> had an unexpected </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> at position 51</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NodeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/errors:393:5)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Object.parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/policy/sri:65:13)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> processEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/policy/manifest:581:38)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Manifest.assertIntegrity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/policy/manifest:588:32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1119:21)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._extensions..js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1213:10)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module.load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1037:32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:878:12)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module.require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1061:19)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/helpers:99:18) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  code:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_SRI_PARSE&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>ポリシーの変更を避けるために、<code>--policy-integrity</code> を常に使用することをお勧めします。</p><h2 id="本番環境での実験的機能" tabindex="-1">本番環境での実験的機能 <a class="header-anchor" href="#本番環境での実験的機能" aria-label="Permalink to “本番環境での実験的機能”">​</a></h2><p>本番環境での実験的機能の使用は推奨されません。実験的機能は、必要に応じて破壊的な変更を受ける可能性があり、その機能は安全に安定していません。ただし、フィードバックは大歓迎です。</p><h2 id="openssfツール" tabindex="-1">OpenSSFツール <a class="header-anchor" href="#openssfツール" aria-label="Permalink to “OpenSSFツール”">​</a></h2><p><a href="https://www.openssf.org" target="_blank" rel="noreferrer">OpenSSF</a>は、特にnpmパッケージを公開する予定がある場合に非常に役立つ可能性のあるいくつかのイニシアチブを主導しています。これらのイニシアチブには以下が含まれます。</p><ul><li><a href="https://securityscorecards.dev/" target="_blank" rel="noreferrer">OpenSSF Scorecard</a> Scorecardは、一連の自動化されたセキュリティリスクチェックを使用して、オープンソースプロジェクトを評価します。これを使用して、コードベースの脆弱性と依存関係をプロアクティブに評価し、脆弱性を受け入れるかどうかについて情報に基づいた決定を下すことができます。</li><li><a href="https://bestpractices.coreinfrastructure.org/en" target="_blank" rel="noreferrer">OpenSSF Best Practices Badge Program</a> プロジェクトは、各ベストプラクティスにどのように準拠しているかを記述することにより、自主的に自己認証できます。これにより、プロジェクトに追加できるバッジが生成されます。</li></ul>`,87)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};