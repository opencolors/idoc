import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 文档 - 国际化","description":"Node.js 文档的这一部分介绍了国际化（Intl）模块，该模块提供了各种国际化和本地化功能的访问，包括排序、数字格式化、日期和时间格式化等。","frontmatter":{"title":"Node.js 文档 - 国际化","description":"Node.js 文档的这一部分介绍了国际化（Intl）模块，该模块提供了各种国际化和本地化功能的访问，包括排序、数字格式化、日期和时间格式化等。","head":[["meta",{"name":"og:title","content":"Node.js 文档 - 国际化 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js 文档的这一部分介绍了国际化（Intl）模块，该模块提供了各种国际化和本地化功能的访问，包括排序、数字格式化、日期和时间格式化等。"}],["meta",{"name":"twitter:title","content":"Node.js 文档 - 国际化 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js 文档的这一部分介绍了国际化（Intl）模块，该模块提供了各种国际化和本地化功能的访问，包括排序、数字格式化、日期和时间格式化等。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/intl"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/intl"}]]},"headers":[],"relativePath":"zh/nodejs/api/intl.md","filePath":"zh/nodejs/api/intl.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/api/intl.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="internationalization-support" tabindex="-1">国际化支持 <a class="header-anchor" href="#internationalization-support" aria-label="Permalink to “国际化支持”">​</a></h1><p>Node.js 拥有许多功能，可以更轻松地编写国际化的程序。 其中一些是：</p><ul><li><p><a href="https://tc39.github.io/ecma262/" target="_blank" rel="noreferrer">ECMAScript 语言规范</a> 中的区域设置敏感或支持 Unicode 的函数：</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer"><code>String.prototype.normalize()</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase" target="_blank" rel="noreferrer"><code>String.prototype.toLowerCase()</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase" target="_blank" rel="noreferrer"><code>String.prototype.toUpperCase()</code></a></li></ul></li><li><p><a href="https://tc39.github.io/ecma402/" target="_blank" rel="noreferrer">ECMAScript 国际化 API 规范</a> (又名 ECMA-402) 中描述的所有功能：</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noreferrer"><code>Intl</code></a> 对象</li><li>区域设置敏感的方法，例如 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noreferrer"><code>String.prototype.localeCompare()</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString" target="_blank" rel="noreferrer"><code>Date.prototype.toLocaleString()</code></a></li></ul></li><li><p><a href="/zh/nodejs/api/url#the-whatwg-url-api">WHATWG URL 解析器</a> 的<a href="https://en.wikipedia.org/wiki/Internationalized_domain_name" target="_blank" rel="noreferrer">国际化域名</a> (IDN) 支持</p></li><li><p><a href="/zh/nodejs/api/buffer#buffertranscodesource-fromenc-toenc"><code>require(&#39;node:buffer&#39;).transcode()</code></a></p></li><li><p>更准确的 <a href="/zh/nodejs/api/repl#repl">REPL</a> 行编辑</p></li><li><p><a href="/zh/nodejs/api/util#class-utiltextdecoder"><code>require(&#39;node:util&#39;).TextDecoder</code></a></p></li><li><p><a href="https://github.com/tc39/proposal-regexp-unicode-property-escapes" target="_blank" rel="noreferrer"><code>RegExp</code> Unicode 属性转义</a></p></li></ul><p>Node.js 和底层的 V8 引擎使用 <a href="http://site.icu-project.org/" target="_blank" rel="noreferrer">Unicode 国际组件 (ICU)</a> 在原生 C/C++ 代码中实现这些功能。 完整的 ICU 数据集默认由 Node.js 提供。 但是，由于 ICU 数据文件的大小，因此提供了几个选项，用于在构建或运行 Node.js 时自定义 ICU 数据集。</p><h2 id="options-for-building-nodejs" tabindex="-1">构建 Node.js 的选项 <a class="header-anchor" href="#options-for-building-nodejs" aria-label="Permalink to “构建 Node.js 的选项”">​</a></h2><p>为了控制 ICU 在 Node.js 中的使用方式，在编译期间有四个 <code>configure</code> 选项可用。有关如何编译 Node.js 的更多详细信息，请参见 <a href="https://github.com/nodejs/node/blob/HEAD/BUILDING.md" target="_blank" rel="noreferrer">BUILDING.md</a>。</p><ul><li><code>--with-intl=none</code>/<code>--without-intl</code></li><li><code>--with-intl=system-icu</code></li><li><code>--with-intl=small-icu</code></li><li><code>--with-intl=full-icu</code> (默认)</li></ul><p>每个 <code>configure</code> 选项可用的 Node.js 和 JavaScript 功能概述：</p><table tabindex="0"><thead><tr><th>功能</th><th><code>none</code></th><th><code>system-icu</code></th><th><code>small-icu</code></th><th><code>full-icu</code></th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer"><code>String.prototype.normalize()</code></a></td><td>无 (函数是空操作)</td><td>完整</td><td>完整</td><td>完整</td></tr><tr><td><code>String.prototype.to*Case()</code></td><td>完整</td><td>完整</td><td>完整</td><td>完整</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noreferrer"><code>Intl</code></a></td><td>无 (对象不存在)</td><td>部分/完整 (取决于操作系统)</td><td>部分 (仅限英语)</td><td>完整</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noreferrer"><code>String.prototype.localeCompare()</code></a></td><td>部分 (不感知区域设置)</td><td>完整</td><td>完整</td><td>完整</td></tr><tr><td><code>String.prototype.toLocale*Case()</code></td><td>部分 (不感知区域设置)</td><td>完整</td><td>完整</td><td>完整</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString" target="_blank" rel="noreferrer"><code>Number.prototype.toLocaleString()</code></a></td><td>部分 (不感知区域设置)</td><td>部分/完整 (取决于操作系统)</td><td>部分 (仅限英语)</td><td>完整</td></tr><tr><td><code>Date.prototype.toLocale*String()</code></td><td>部分 (不感知区域设置)</td><td>部分/完整 (取决于操作系统)</td><td>部分 (仅限英语)</td><td>完整</td></tr><tr><td><a href="/zh/nodejs/api/url#legacy-url-api">旧版 URL 解析器</a></td><td>部分 (不支持 IDN)</td><td>完整</td><td>完整</td><td>完整</td></tr><tr><td><a href="/zh/nodejs/api/url#the-whatwg-url-api">WHATWG URL 解析器</a></td><td>部分 (不支持 IDN)</td><td>完整</td><td>完整</td><td>完整</td></tr><tr><td><a href="/zh/nodejs/api/buffer#buffertranscodesource-fromenc-toenc"><code>require(&#39;node:buffer&#39;).transcode()</code></a></td><td>无 (函数不存在)</td><td>完整</td><td>完整</td><td>完整</td></tr><tr><td><a href="/zh/nodejs/api/repl#repl">REPL</a></td><td>部分 (不准确的行编辑)</td><td>完整</td><td>完整</td><td>完整</td></tr><tr><td><a href="/zh/nodejs/api/util#class-utiltextdecoder"><code>require(&#39;node:util&#39;).TextDecoder</code></a></td><td>部分 (基本编码支持)</td><td>部分/完整 (取决于操作系统)</td><td>部分 (仅限 Unicode)</td><td>完整</td></tr><tr><td><a href="https://github.com/tc39/proposal-regexp-unicode-property-escapes" target="_blank" rel="noreferrer"><code>RegExp</code> Unicode 属性转义</a></td><td>无 (无效的 <code>RegExp</code> 错误)</td><td>完整</td><td>完整</td><td>完整</td></tr></tbody></table><p>“(不感知区域设置)”的 designation 表示该函数执行其操作，就像该函数的非 <code>Locale</code> 版本（如果存在）一样。 例如，在 <code>none</code> 模式下，<code>Date.prototype.toLocaleString()</code> 的操作与 <code>Date.prototype.toString()</code> 的操作相同。</p><h3 id="disable-all-internationalization-features-none" tabindex="-1">禁用所有国际化特性 (<code>none</code>) <a class="header-anchor" href="#disable-all-internationalization-features-none" aria-label="Permalink to “禁用所有国际化特性 (none)”">​</a></h3><p>如果选择此选项，ICU 将被禁用，并且上述提到的大部分国际化特性将在生成的 <code>node</code> 二进制文件中<strong>不可用</strong>。</p><h3 id="build-with-a-pre-installed-icu-system-icu" tabindex="-1">使用预安装的 ICU 构建 (<code>system-icu</code>) <a class="header-anchor" href="#build-with-a-pre-installed-icu-system-icu" aria-label="Permalink to “使用预安装的 ICU 构建 (system-icu)”">​</a></h3><p>Node.js 可以链接到系统上已安装的 ICU 构建。事实上，大多数 Linux 发行版已经安装了 ICU，此选项可以重用操作系统中其他组件使用的数据集。</p><p>仅需要 ICU 库本身的功能，例如 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer"><code>String.prototype.normalize()</code></a> 和 <a href="/zh/nodejs/api/url#the-whatwg-url-api">WHATWG URL 解析器</a>，在 <code>system-icu</code> 下完全支持。 还需要 ICU 区域设置数据的功能，例如 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" target="_blank" rel="noreferrer"><code>Intl.DateTimeFormat</code></a> <em>可能</em>被完全或部分支持，具体取决于系统上安装的 ICU 数据的完整性。</p><h3 id="embed-a-limited-set-of-icu-data-small-icu" tabindex="-1">嵌入有限的 ICU 数据 (<code>small-icu</code>) <a class="header-anchor" href="#embed-a-limited-set-of-icu-data-small-icu" aria-label="Permalink to “嵌入有限的 ICU 数据 (small-icu)”">​</a></h3><p>此选项使生成的二进制文件静态链接到 ICU 库，并在 <code>node</code> 可执行文件中包含 ICU 数据的子集（通常仅为英语区域设置）。</p><p>仅需要 ICU 库本身的功能，例如 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer"><code>String.prototype.normalize()</code></a> 和 <a href="/zh/nodejs/api/url#the-whatwg-url-api">WHATWG URL 解析器</a>，在 <code>small-icu</code> 下完全支持。 还需要 ICU 区域设置数据的功能，例如 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" target="_blank" rel="noreferrer"><code>Intl.DateTimeFormat</code></a>，通常只适用于英语区域设置：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> january</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9e8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> english</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTimeFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;en&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { month: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;long&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> spanish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTimeFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { month: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;long&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(english.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(january));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;January&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spanish.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(january));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 small-icu 上打印 &quot;M01&quot; 或 &quot;January&quot;，具体取决于用户的默认区域设置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应该打印 &quot;enero&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>此模式在特性和二进制文件大小之间取得了平衡。</p><h4 id="providing-icu-data-at-runtime" tabindex="-1">在运行时提供 ICU 数据 <a class="header-anchor" href="#providing-icu-data-at-runtime" aria-label="Permalink to “在运行时提供 ICU 数据”">​</a></h4><p>如果使用了 <code>small-icu</code> 选项，仍然可以在运行时提供额外的语言环境数据，以便 JS 方法能够适用于所有 ICU 语言环境。假设数据文件存储在 <code>/runtime/directory/with/dat/file</code>，则可以通过以下方式使其可用于 ICU：</p><ul><li><code>--with-icu-default-data-dir</code> 配置选项：这仅将默认数据目录路径嵌入到二进制文件中。实际的数据文件将在运行时从此目录路径加载。</li><li><a href="/zh/nodejs/api/cli#node-icu-datafile"><code>NODE_ICU_DATA</code></a> 环境变量：</li><li><a href="/zh/nodejs/api/cli#icu-data-dirfile"><code>--icu-data-dir</code></a> CLI 参数：</li></ul><p>当指定了多个选项时，<code>--icu-data-dir</code> CLI 参数的优先级最高，其次是 <code>NODE_ICU_DATA</code> 环境变量，然后是 <code>--with-icu-default-data-dir</code> 配置选项。</p><p>ICU 能够自动查找和加载各种数据格式，但数据必须适合 ICU 版本，并且文件名必须正确。数据文件最常见的名称是 <code>icudtX[bl].dat</code>，其中 <code>X</code> 表示预期的 ICU 版本，<code>b</code> 或 <code>l</code> 表示系统的字节序。如果无法从指定目录读取预期的数据文件，Node.js 将无法加载。与当前 Node.js 版本对应的数据文件的名称可以使用以下方法计算：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`icudt\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">versions</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">icu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endianness</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.dat\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>请查阅 ICU 用户指南中的 <a href="http://userguide.icu-project.org/icudata" target="_blank" rel="noreferrer">&quot;ICU Data&quot;</a> 文章，以获取其他支持的格式和有关 ICU 数据的更多详细信息。</p><p><a href="https://www.npmjs.com/package/full-icu" target="_blank" rel="noreferrer">full-icu</a> npm 模块可以通过检测正在运行的 <code>node</code> 可执行文件的 ICU 版本并下载相应的数据文件来大大简化 ICU 数据的安装。通过 <code>npm i full-icu</code> 安装该模块后，数据文件将在 <code>./node_modules/full-icu</code> 中可用。然后，可以将此路径传递给 <code>NODE_ICU_DATA</code> 或 <code>--icu-data-dir</code>，如上所示，以启用完整的 <code>Intl</code> 支持。</p><h3 id="embed-the-entire-icu-full-icu" tabindex="-1">嵌入整个 ICU (<code>full-icu</code>) <a class="header-anchor" href="#embed-the-entire-icu-full-icu" aria-label="Permalink to “嵌入整个 ICU (full-icu)”">​</a></h3><p>此选项使生成的二进制文件静态链接 ICU 并包含完整的 ICU 数据集。以这种方式创建的二进制文件没有进一步的外部依赖项，并支持所有区域设置，但可能相当大。如果没有传递 <code>--with-intl</code> 标志，这是默认行为。官方二进制文件也是在这种模式下构建的。</p><h2 id="detecting-internationalization-support" tabindex="-1">检测国际化支持 <a class="header-anchor" href="#detecting-internationalization-support" aria-label="Permalink to “检测国际化支持”">​</a></h2><p>要验证是否启用了 ICU（<code>system-icu</code>、<code>small-icu</code> 或 <code>full-icu</code>），只需检查 <code>Intl</code> 是否存在即可：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasICU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者，检查 <code>process.versions.icu</code> 也可以，这是一个仅在启用 ICU 时定义的属性：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasICU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.versions.icu </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>要检查是否支持非英语区域设置（即 <code>full-icu</code> 或 <code>system-icu</code>），<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" target="_blank" rel="noreferrer"><code>Intl.DateTimeFormat</code></a> 可以是一个很好的区分因素：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasFullICU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> january</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9e8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> spanish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTimeFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { month: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;long&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> spanish.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(january) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;enero&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>对于更详细的 <code>Intl</code> 支持测试，以下资源可能会有所帮助：</p><ul><li><a href="https://github.com/srl295/btest402" target="_blank" rel="noreferrer">btest402</a>: 通常用于检查 Node.js 的 <code>Intl</code> 支持是否正确构建。</li><li><a href="https://github.com/tc39/test262/tree/HEAD/test/intl402" target="_blank" rel="noreferrer">Test262</a>: ECMAScript 的官方一致性测试套件包含一个专门针对 ECMA-402 的部分。</li></ul>`,39)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};