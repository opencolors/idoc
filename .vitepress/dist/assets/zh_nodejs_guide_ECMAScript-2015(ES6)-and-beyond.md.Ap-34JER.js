import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 中的 ECMAScript 2015（ES6）和更高版本","description":"Node.js 通过 V8 引擎支持现代 ECMAScript 特性，新特性和改进会及时引入。","frontmatter":{"title":"Node.js 中的 ECMAScript 2015（ES6）和更高版本","description":"Node.js 通过 V8 引擎支持现代 ECMAScript 特性，新特性和改进会及时引入。","head":[["meta",{"name":"og:title","content":"Node.js 中的 ECMAScript 2015（ES6）和更高版本 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js 通过 V8 引擎支持现代 ECMAScript 特性，新特性和改进会及时引入。"}],["meta",{"name":"twitter:title","content":"Node.js 中的 ECMAScript 2015（ES6）和更高版本 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js 通过 V8 引擎支持现代 ECMAScript 特性，新特性和改进会及时引入。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/guide/ECMAScript-2015(ES6)-and-beyond"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/guide/ECMAScript-2015(ES6)-and-beyond"}]]},"headers":[],"relativePath":"zh/nodejs/guide/ECMAScript-2015(ES6)-and-beyond.md","filePath":"zh/nodejs/guide/ECMAScript-2015(ES6)-and-beyond.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/guide/ECMAScript-2015(ES6)-and-beyond.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="ecmascript-2015-es6-及更高版本" tabindex="-1">ECMAScript 2015 (ES6) 及更高版本 <a class="header-anchor" href="#ecmascript-2015-es6-及更高版本" aria-label="Permalink to “ECMAScript 2015 (ES6) 及更高版本”">​</a></h1><p>Node.js 构建于 <a href="https://v8.dev/" target="_blank" rel="noreferrer">V8</a> 的现代版本之上。 通过与此引擎的最新版本保持同步，我们确保 <a href="https://tc39.es/ecma262/" target="_blank" rel="noreferrer">JavaScript ECMA-262 规范</a> 中的新功能及时提供给 Node.js 开发人员，并持续改进性能和稳定性。</p><p>所有 ECMAScript 2015 (ES6) 功能分为三个组：<code>shipping</code>、<code>staged</code> 和 <code>in progress</code> 功能：</p><ul><li>所有 <code>shipping</code> 功能（V8 认为稳定）在 <code>Node.js 上默认启用</code>，并且 <code>不需要</code> 任何类型的运行时标志。</li><li><code>Staged</code> 功能（几乎完成但 V8 团队认为不稳定的功能）需要运行时标志：<code>--harmony</code>。</li><li><code>In progress</code> 功能可以通过它们各自的 harmony 标志单独激活，尽管强烈建议不要这样做，除非用于测试目的。 注意：这些标志由 V8 公开，并且可能会在没有任何弃用通知的情况下更改。</li></ul><h2 id="哪些功能默认随哪个-node-js-版本一起提供" tabindex="-1">哪些功能默认随哪个 Node.js 版本一起提供？ <a class="header-anchor" href="#哪些功能默认随哪个-node-js-版本一起提供" aria-label="Permalink to “哪些功能默认随哪个 Node.js 版本一起提供？”">​</a></h2><p>网站 <a href="https://node.green" target="_blank" rel="noreferrer">node.green</a> 基于 kangax 的 compat-table，提供了各种 Node.js 版本中支持的 ECMAScript 功能的出色概述。</p><h2 id="哪些功能正在进行中" tabindex="-1">哪些功能正在进行中？ <a class="header-anchor" href="#哪些功能正在进行中" aria-label="Permalink to “哪些功能正在进行中？”">​</a></h2><p>新功能不断添加到 V8 引擎中。 一般来说，预计它们会在未来的 Node.js 版本中出现，但时间未知。</p><p>您可以通过搜索 <code>--v8-options</code> 参数来列出每个 Node.js 版本中可用的所有正在进行中的功能。 请注意，这些是 V8 不完整且可能损坏的功能，因此使用风险自负：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --v8-options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;in progress&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="我的基础设施已设置为利用-harmony-标志。-我应该删除它吗" tabindex="-1">我的基础设施已设置为利用 --harmony 标志。 我应该删除它吗？ <a class="header-anchor" href="#我的基础设施已设置为利用-harmony-标志。-我应该删除它吗" aria-label="Permalink to “我的基础设施已设置为利用 --harmony 标志。 我应该删除它吗？”">​</a></h2><p>Node.js 上 <code>--harmony</code> 标志的当前行为是仅启用 <code>staged</code> 功能。 毕竟，它现在是 <code>--es_staging</code> 的同义词。 如上所述，这些是已经完成但尚未被认为是稳定的功能。 如果你想安全起见，尤其是在生产环境中，请考虑删除此运行时标志，直到它默认在 V8 上发布，从而在 Node.js 上发布。 如果你保持启用状态，如果 V8 更改其语义以更紧密地遵循标准，你应该为进一步的 Node.js 升级破坏你的代码做好准备。</p><h2 id="如何找到特定-node-js-版本附带的-v8-版本" tabindex="-1">如何找到特定 Node.js 版本附带的 V8 版本？ <a class="header-anchor" href="#如何找到特定-node-js-版本附带的-v8-版本" aria-label="Permalink to “如何找到特定 Node.js 版本附带的 V8 版本？”">​</a></h2><p>Node.js 提供了一种简单的方法来列出所有依赖项以及通过 <code>process</code> 全局对象附带特定二进制文件的相应版本。对于 V8 引擎，在您的终端中键入以下内容以检索其版本：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> process.versions.v8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,15)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};