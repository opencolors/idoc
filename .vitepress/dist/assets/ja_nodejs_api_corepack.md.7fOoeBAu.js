import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js Corepack ドキュメント","description":"CorepackはNode.jsに同梱されているバイナリで、npm、pnpm、Yarnなどのパッケージマネージャを管理するための標準インターフェースを提供します。これにより、ユーザーは異なるパッケージマネージャやバージョン間で簡単に切り替えることができ、互換性を確保し、開発ワークフローを簡素化します。","frontmatter":{"title":"Node.js Corepack ドキュメント","description":"CorepackはNode.jsに同梱されているバイナリで、npm、pnpm、Yarnなどのパッケージマネージャを管理するための標準インターフェースを提供します。これにより、ユーザーは異なるパッケージマネージャやバージョン間で簡単に切り替えることができ、互換性を確保し、開発ワークフローを簡素化します。","head":[["meta",{"name":"og:title","content":"Node.js Corepack ドキュメント | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"CorepackはNode.jsに同梱されているバイナリで、npm、pnpm、Yarnなどのパッケージマネージャを管理するための標準インターフェースを提供します。これにより、ユーザーは異なるパッケージマネージャやバージョン間で簡単に切り替えることができ、互換性を確保し、開発ワークフローを簡素化します。"}],["meta",{"name":"twitter:title","content":"Node.js Corepack ドキュメント | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"CorepackはNode.jsに同梱されているバイナリで、npm、pnpm、Yarnなどのパッケージマネージャを管理するための標準インターフェースを提供します。これにより、ユーザーは異なるパッケージマネージャやバージョン間で簡単に切り替えることができ、互換性を確保し、開発ワークフローを簡素化します。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/corepack"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/corepack"}]]},"headers":[],"relativePath":"ja/nodejs/api/corepack.md","filePath":"ja/nodejs/api/corepack.md","lastUpdated":null}`),a={name:`ja/nodejs/api/corepack.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="corepack" tabindex="-1">Corepack <a class="header-anchor" href="#corepack" aria-label="Permalink to “Corepack”">​</a></h1><p><strong>追加:</strong> v16.9.0, v14.19.0</p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 試験的</p></div><p><em><a href="https://github.com/nodejs/corepack">Corepack</a></em> は、パッケージマネージャーのバージョン管理を支援する実験的なツールです。 各<a href="/ja/nodejs/api/corepack#supported-package-managers">サポートされているパッケージマネージャー</a>用のバイナリプロキシを公開しており、呼び出されると、現在のプロジェクトに設定されているパッケージマネージャーを識別し、必要に応じてダウンロードして、最後に実行します。</p><p>CorepackはNode.jsのデフォルトインストールで配布されていますが、Corepackが管理するパッケージマネージャーはNode.jsの配布物の一部ではありません。</p><ul><li>最初の使用時に、Corepackはネットワークから最新バージョンをダウンロードします。</li><li>（セキュリティ脆弱性などに関連する）必要な更新は、Node.jsプロジェクトの範囲外です。必要に応じて、エンドユーザーは自身で更新方法を見つける必要があります。</li></ul><p>この機能は、2つの中核的なワークフローを簡素化します。</p><ul><li>新規コントリビューターのオンボーディングが容易になります。システム固有のインストールプロセスに従う必要がなくなり、必要なパッケージマネージャーを入手できます。</li><li>チームの全員が、更新が必要になるたびに手動で同期する必要なく、意図したとおりにパッケージマネージャーのバージョンを正確に使用できるようになります。</li></ul><h2 id="workflows" tabindex="-1">ワークフロー <a class="header-anchor" href="#workflows" aria-label="Permalink to “ワークフロー”">​</a></h2><h3 id="enabling-the-feature" tabindex="-1">機能を有効にする <a class="header-anchor" href="#enabling-the-feature" aria-label="Permalink to “機能を有効にする”">​</a></h3><p>実験的なステータスであるため、Corepackを有効にするには、明示的に有効にする必要があります。 そのためには、<a href="https://github.com/nodejs/corepack#corepack-enable--name" target="_blank" rel="noreferrer"><code>corepack enable</code></a>を実行して、環境内の<code>node</code>バイナリの隣にシンボリックリンクを設定します（必要に応じて既存のシンボリックリンクを上書きします）。</p><p>この時点から、<a href="/ja/nodejs/api/corepack#supported-package-managers">サポートされているバイナリ</a>への呼び出しは、追加のセットアップなしで機能します。 問題が発生した場合は、<a href="https://github.com/nodejs/corepack#corepack-disable--name" target="_blank" rel="noreferrer"><code>corepack disable</code></a>を実行して、システムからプロキシを削除してください（そして、<a href="https://github.com/nodejs/corepack" target="_blank" rel="noreferrer">Corepackリポジトリ</a>で問題を提起して、お知らせください）。</p><h3 id="configuring-a-package" tabindex="-1">パッケージの設定 <a class="header-anchor" href="#configuring-a-package" aria-label="Permalink to “パッケージの設定”">​</a></h3><p>Corepackプロキシは、現在のディレクトリ階層内で最も近い<a href="/ja/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a>ファイルを探し、その<a href="/ja/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a>プロパティを抽出します。</p><p>値が<a href="/ja/nodejs/api/corepack#supported-package-managers">サポートされているパッケージマネージャー</a>に対応する場合、Corepackは、関連するバイナリへのすべての呼び出しが要求されたバージョンに対して実行されるようにします。必要に応じてオンデマンドでダウンロードし、正常に取得できない場合は中止します。</p><p><a href="https://github.com/nodejs/corepack#corepack-use-nameversion" target="_blank" rel="noreferrer"><code>corepack use</code></a>を使用すると、Corepackにローカルの<code>package.json</code>を更新して、選択したパッケージマネージャーを使用するように指示できます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # package.jsonに最新の7.xバージョンを設定します</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # package.jsonに最新バージョンを設定します</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="upgrading-the-global-versions" tabindex="-1">グローバルバージョンのアップグレード <a class="header-anchor" href="#upgrading-the-global-versions" aria-label="Permalink to “グローバルバージョンのアップグレード”">​</a></h3><p>既存のプロジェクトの外部で実行する場合（たとえば、<code>yarn init</code>を実行する場合）、Corepackはデフォルトで、各ツールの最新の安定版リリースにほぼ対応する事前定義されたバージョンを使用します。これらのバージョンは、設定するパッケージマネージャーのバージョンとともに<a href="https://github.com/nodejs/corepack#corepack-install--g--global---all--nameversion" target="_blank" rel="noreferrer"><code>corepack install</code></a>コマンドを実行することでオーバーライドできます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>または、タグまたは範囲を使用できます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn@stable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="offline-workflow" tabindex="-1">オフラインワークフロー <a class="header-anchor" href="#offline-workflow" aria-label="Permalink to “オフラインワークフロー”">​</a></h3><p>多くの本番環境にはネットワークアクセスがありません。Corepackは通常、パッケージマネージャーのリリースをレジストリから直接ダウンロードするため、このような環境と競合する可能性があります。これを回避するには、ネットワークアクセスがまだある間に（通常はデプロイイメージを準備するのと同時に）<a href="https://github.com/nodejs/corepack#corepack-pack---all--nameversion" target="_blank" rel="noreferrer"><code>corepack pack</code></a>コマンドを呼び出します。これにより、ネットワークアクセスがなくても必要なパッケージマネージャーが利用可能になります。</p><p><code>pack</code>コマンドには<a href="https://github.com/nodejs/corepack#utility-commands" target="_blank" rel="noreferrer">さまざまなフラグ</a>があります。詳細については、詳細な<a href="https://github.com/nodejs/corepack#readme" target="_blank" rel="noreferrer">Corepackドキュメント</a>を参照してください。</p><h2 id="supported-package-managers" tabindex="-1">サポートされているパッケージマネージャー <a class="header-anchor" href="#supported-package-managers" aria-label="Permalink to “サポートされているパッケージマネージャー”">​</a></h2><p>Corepackを通じて、以下のバイナリが提供されます。</p><table tabindex="0"><thead><tr><th>パッケージマネージャー</th><th>バイナリ名</th></tr></thead><tbody><tr><td><a href="https://yarnpkg.com/" target="_blank" rel="noreferrer">Yarn</a></td><td><code>yarn</code> , <code>yarnpkg</code></td></tr><tr><td><a href="https://pnpm.io/" target="_blank" rel="noreferrer">pnpm</a></td><td><code>pnpm</code> , <code>pnpx</code></td></tr></tbody></table><h2 id="common-questions" tabindex="-1">よくある質問 <a class="header-anchor" href="#common-questions" aria-label="Permalink to “よくある質問”">​</a></h2><h3 id="how-does-corepack-interact-with-npm?" tabindex="-1">Corepackはnpmとどのように連携しますか？ <a class="header-anchor" href="#how-does-corepack-interact-with-npm?" aria-label="Permalink to “Corepackはnpmとどのように連携しますか？”">​</a></h3><p>Corepackは他のパッケージマネージャーと同様にnpmをサポートできますが、そのシムはデフォルトでは有効になっていません。これにはいくつかの結果が伴います。</p><ul><li>Corepackはそれを傍受できないため、別のパッケージマネージャーで使用するように構成されたプロジェクト内で <code>npm</code> コマンドを常に実行できます。</li><li><code>npm</code> は <a href="/ja/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> プロパティの有効なオプションですが、シムがないため、グローバルnpmが使用されます。</li></ul><h3 id="running-npm-install--g-yarn-doesnt-work" tabindex="-1"><code>npm install -g yarn</code> が動作しません <a class="header-anchor" href="#running-npm-install--g-yarn-doesnt-work" aria-label="Permalink to “npm install -g yarn が動作しません”">​</a></h3><p>npmは、グローバルインストール時にCorepackバイナリを誤って上書きすることを防ぎます。この問題を回避するには、次のいずれかのオプションを検討してください。</p><ul><li>このコマンドを実行しないでください。Corepackはとにかくパッケージマネージャーのバイナリを提供し、要求されたバージョンが常に利用可能であることを保証するため、パッケージマネージャーを明示的にインストールする必要はありません。</li><li><code>npm install</code> に <code>--force</code> フラグを追加します。これにより、npmにバイナリを上書きしても問題ないことを指示しますが、その過程でCorepackのバイナリを消去します。（それらを戻すには、<a href="https://github.com/nodejs/corepack#corepack-enable--name" target="_blank" rel="noreferrer"><code>corepack enable</code></a> を実行してください。）</li></ul>`,35)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};