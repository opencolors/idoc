import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Différences entre Node.js et le navigateur","description":"Découvrez les principales différences entre la création d'applications sous Node.js et le navigateur, notamment en termes d'écosystème, de contrôle de l'environnement et de systèmes de modules.","frontmatter":{"title":"Différences entre Node.js et le navigateur","description":"Découvrez les principales différences entre la création d'applications sous Node.js et le navigateur, notamment en termes d'écosystème, de contrôle de l'environnement et de systèmes de modules.","head":[["meta",{"name":"og:title","content":"Différences entre Node.js et le navigateur | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Découvrez les principales différences entre la création d'applications sous Node.js et le navigateur, notamment en termes d'écosystème, de contrôle de l'environnement et de systèmes de modules."}],["meta",{"name":"twitter:title","content":"Différences entre Node.js et le navigateur | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Découvrez les principales différences entre la création d'applications sous Node.js et le navigateur, notamment en termes d'écosystème, de contrôle de l'environnement et de systèmes de modules."}],["link",{"rel":"canonical","href":"https://idoc.dev/fr/nodejs/guide/differences-between-node-and-browser"}],["meta",{"property":"og:url","content":"https://idoc.dev/fr/nodejs/guide/differences-between-node-and-browser"}]]},"headers":[],"relativePath":"fr/nodejs/guide/differences-between-node-and-browser.md","filePath":"fr/nodejs/guide/differences-between-node-and-browser.md","lastUpdated":1749464498000}`),a={name:`fr/nodejs/guide/differences-between-node-and-browser.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="differences-entre-node-js-et-le-navigateur" tabindex="-1">Différences entre Node.js et le navigateur <a class="header-anchor" href="#differences-entre-node-js-et-le-navigateur" aria-label="Permalink to “Différences entre Node.js et le navigateur”">​</a></h1><p>Le navigateur et Node.js utilisent JavaScript comme langage de programmation. La création d&#39;applications exécutées dans le navigateur est complètement différente de la création d&#39;une application Node.js. Bien qu&#39;il s&#39;agisse toujours de JavaScript, certaines différences clés rendent l&#39;expérience radicalement différente.</p><p>Du point de vue d&#39;un développeur frontend qui utilise intensivement JavaScript, les applications Node.js présentent un énorme avantage : le confort de programmer tout - le frontend et le backend - dans un seul langage.</p><p>Vous avez une énorme opportunité car nous savons combien il est difficile d&#39;apprendre pleinement et profondément un langage de programmation, et en utilisant le même langage pour effectuer tout votre travail sur le web - à la fois sur le client et sur le serveur, vous êtes dans une position d&#39;avantage unique.</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>Ce qui change, c&#39;est l&#39;écosystème.</p></div><p>Dans le navigateur, la plupart du temps, vous interagissez avec le DOM ou d&#39;autres API de la plateforme Web comme les Cookies. Ceux-ci n&#39;existent pas dans Node.js, bien sûr. Vous n&#39;avez pas le <code>document</code>, <code>window</code> et tous les autres objets fournis par le navigateur.</p><p>Et dans le navigateur, nous n&#39;avons pas toutes les API intéressantes que Node.js fournit via ses modules, comme la fonctionnalité d&#39;accès au système de fichiers.</p><p>Une autre grande différence est que dans Node.js, vous contrôlez l&#39;environnement. À moins que vous ne construisiez une application open source que n&#39;importe qui peut déployer n&#39;importe où, vous savez sur quelle version de Node.js vous exécuterez l&#39;application. Comparé à l&#39;environnement du navigateur, où vous n&#39;avez pas le luxe de choisir le navigateur que vos visiteurs utiliseront, c&#39;est très pratique.</p><p>Cela signifie que vous pouvez écrire tout le JavaScript moderne ES2015+ pris en charge par votre version de Node.js. Étant donné que JavaScript évolue si rapidement, mais que les navigateurs peuvent être un peu lents à se mettre à niveau, parfois sur le web, vous êtes bloqué avec l&#39;utilisation d&#39;anciennes versions de JavaScript / ECMAScript. Vous pouvez utiliser Babel pour transformer votre code afin qu&#39;il soit compatible ES5 avant de l&#39;envoyer au navigateur, mais dans Node.js, vous n&#39;en aurez pas besoin.</p><p>Une autre différence est que Node.js prend en charge les systèmes de modules CommonJS et ES (depuis Node.js v12), alors que dans le navigateur, nous commençons à voir la norme ES Modules être implémentée.</p><p>En pratique, cela signifie que vous pouvez utiliser <code>require()</code> et <code>import</code> dans Node.js, alors que vous êtes limité à <code>import</code> dans le navigateur.</p>`,11)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};