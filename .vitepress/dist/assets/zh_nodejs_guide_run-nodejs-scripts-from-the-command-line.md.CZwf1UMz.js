import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"从命令行运行 Node.js 脚本","description":"了解如何从命令行运行 Node.js 程序，包括使用 node 命令、shebang 行、可执行权限、传递字符串作为参数以及自动重启应用程序。","frontmatter":{"title":"从命令行运行 Node.js 脚本","description":"了解如何从命令行运行 Node.js 程序，包括使用 node 命令、shebang 行、可执行权限、传递字符串作为参数以及自动重启应用程序。","head":[["meta",{"name":"og:title","content":"从命令行运行 Node.js 脚本 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"了解如何从命令行运行 Node.js 程序，包括使用 node 命令、shebang 行、可执行权限、传递字符串作为参数以及自动重启应用程序。"}],["meta",{"name":"twitter:title","content":"从命令行运行 Node.js 脚本 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"了解如何从命令行运行 Node.js 程序，包括使用 node 命令、shebang 行、可执行权限、传递字符串作为参数以及自动重启应用程序。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/guide/run-nodejs-scripts-from-the-command-line"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/guide/run-nodejs-scripts-from-the-command-line"}]]},"headers":[],"relativePath":"zh/nodejs/guide/run-nodejs-scripts-from-the-command-line.md","filePath":"zh/nodejs/guide/run-nodejs-scripts-from-the-command-line.md","lastUpdated":null}`),a={name:`zh/nodejs/guide/run-nodejs-scripts-from-the-command-line.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="从命令行运行-node-js-脚本" tabindex="-1">从命令行运行 Node.js 脚本 <a class="header-anchor" href="#从命令行运行-node-js-脚本" aria-label="Permalink to “从命令行运行 Node.js 脚本”">​</a></h1><p>运行 Node.js 程序的通常方式是运行全局可用的 <code>node</code> 命令（一旦你安装了 Node.js），并传入你要执行的文件名。</p><p>如果你的 Node.js 应用程序主文件是 <code>app.js</code>，你可以通过输入以下命令来调用它：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面，你显式地告诉 shell 使用 <code>node</code> 运行你的脚本。你也可以使用 &quot;shebang&quot; 行将此信息嵌入到你的 JavaScript 文件中。&quot;Shebang&quot; 是文件中的第一行，它告诉操作系统使用哪个解释器来运行脚本。以下是 JavaScript 的第一行：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面，我们显式地给出了解释器的绝对路径。并非所有操作系统都在 <code>bin</code> 文件夹中包含 <code>node</code>，但所有操作系统都应该包含 <code>env</code>。你可以告诉操作系统运行 <code>env</code>，并将 <code>node</code> 作为参数：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env node</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你的 javascript 代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="要使用-shebang-你的文件应该具有可执行权限。" tabindex="-1">要使用 shebang，你的文件应该具有可执行权限。 <a class="header-anchor" href="#要使用-shebang-你的文件应该具有可执行权限。" aria-label="Permalink to “要使用 shebang，你的文件应该具有可执行权限。”">​</a></h2><p>你可以通过运行以下命令来授予 <code>app.js</code> 可执行权限：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> u+x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行命令时，请确保你位于包含 <code>app.js</code> 文件的同一目录中。</p><h2 id="将字符串作为参数传递给-node-而不是文件路径" tabindex="-1">将字符串作为参数传递给 node 而不是文件路径 <a class="header-anchor" href="#将字符串作为参数传递给-node-而不是文件路径" aria-label="Permalink to “将字符串作为参数传递给 node 而不是文件路径”">​</a></h2><p>要将字符串作为参数执行，你可以使用 <code>-e</code>，<code>--eval &quot;script&quot;</code>。将以下参数作为 JavaScript 求值。REPL 中预定义的模块也可以在脚本中使用。在 Windows 上，使用 <code>cmd.exe</code> 时，单引号将无法正常工作，因为它只识别双引号 <code>&quot;</code> 进行引用。在 Powershell 或 Git bash 中，<code>&quot;</code> 和 <code>&#39;</code> 都可以使用。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;console.log(123)&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="自动重启应用程序" tabindex="-1">自动重启应用程序 <a class="header-anchor" href="#自动重启应用程序" aria-label="Permalink to “自动重启应用程序”">​</a></h2><p>从 nodejs V 16 开始，有一个内置选项可以在文件更改时自动重启应用程序。这对于开发目的很有用。要使用此功能，你需要将 <code>watch</code> 标志传递给 nodejs。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样，当你更改文件时，应用程序将自动重启。阅读 --watch <a href="/zh/nodejs/api/cli#watch">标志文档</a>。</p>`,19)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};