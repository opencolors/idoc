import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js 权限 API","description":"Node.js 权限 API 文档详细介绍了如何在 Node.js 应用程序中管理和控制各种操作的权限，确保对系统资源的安全和受控访问。","frontmatter":{"title":"Node.js 权限 API","description":"Node.js 权限 API 文档详细介绍了如何在 Node.js 应用程序中管理和控制各种操作的权限，确保对系统资源的安全和受控访问。","head":[["meta",{"name":"og:title","content":"Node.js 权限 API | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js 权限 API 文档详细介绍了如何在 Node.js 应用程序中管理和控制各种操作的权限，确保对系统资源的安全和受控访问。"}],["meta",{"name":"twitter:title","content":"Node.js 权限 API | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js 权限 API 文档详细介绍了如何在 Node.js 应用程序中管理和控制各种操作的权限，确保对系统资源的安全和受控访问。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/permissions"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/permissions"}]]},"headers":[],"relativePath":"zh/nodejs/api/permissions.md","filePath":"zh/nodejs/api/permissions.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/api/permissions.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="permissions" tabindex="-1">权限 <a class="header-anchor" href="#permissions" aria-label="Permalink to “权限”">​</a></h1><p>权限可用于控制 Node.js 进程可以访问哪些系统资源，或该进程可以对这些资源执行哪些操作。</p><ul><li><a href="/zh/nodejs/api/permissions#process-based-permissions">基于进程的权限</a> 控制 Node.js 进程对资源的访问。资源可以完全允许或拒绝，或者可以控制与之相关的操作。例如，可以允许文件系统读取，同时拒绝写入。此功能不能防止恶意代码。根据 Node.js <a href="https://github.com/nodejs/node/blob/main/SECURITY.md" target="_blank" rel="noreferrer">安全策略</a>，Node.js 信任要求运行的任何代码。</li></ul><p>权限模型实现了一种“安全带”方法，它可以防止受信任的代码无意中更改文件或使用未经明确授权访问的资源。它不能在存在恶意代码的情况下提供安全保障。恶意代码可以绕过权限模型，并执行任意代码，而不受权限模型施加的限制。</p><p>如果您发现潜在的安全漏洞，请参阅我们的<a href="https://github.com/nodejs/node/blob/main/SECURITY.md" target="_blank" rel="noreferrer">安全策略</a>。</p><h2 id="process-based-permissions" tabindex="-1">基于进程的权限 <a class="header-anchor" href="#process-based-permissions" aria-label="Permalink to “基于进程的权限”">​</a></h2><h3 id="permission-model" tabindex="-1">权限模型 <a class="header-anchor" href="#permission-model" aria-label="Permalink to “权限模型”">​</a></h3><div class="tip custom-block"><p class="custom-block-title">[稳定度: 2 - 稳定]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 2</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 2</a> - 稳定。</p></div><p>Node.js 权限模型是一种在执行期间限制对特定资源访问的机制。该 API 存在于标志 <a href="/zh/nodejs/api/cli#permission"><code>--permission</code></a> 之后，启用该标志时，将限制对所有可用权限的访问。</p><p>可用权限由 <a href="/zh/nodejs/api/cli#permission"><code>--permission</code></a> 标志记录。</p><p>使用 <code>--permission</code> 启动 Node.js 时，通过 <code>fs</code> 模块访问文件系统、生成进程、使用 <code>node:worker_threads</code>、使用原生插件、使用 WASI 以及启用运行时检查器的能力将受到限制。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permission</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Access</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> has</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restricted</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:internal/main/run_main_module:23:47</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  code:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_ACCESS_DENIED&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  permission:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;FileSystemRead&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resource:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/home/user/index.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>允许访问生成进程和创建工作线程可以使用 <a href="/zh/nodejs/api/cli#allow-child-process"><code>--allow-child-process</code></a> 和 <a href="/zh/nodejs/api/cli#allow-worker"><code>--allow-worker</code></a> 分别完成。</p><p>要在使用权限模型时允许原生插件，请使用 <a href="/zh/nodejs/api/cli#allow-addons"><code>--allow-addons</code></a> 标志。 对于 WASI，请使用 <a href="/zh/nodejs/api/cli#allow-wasi"><code>--allow-wasi</code></a> 标志。</p><h4 id="runtime-api" tabindex="-1">运行时 API <a class="header-anchor" href="#runtime-api" aria-label="Permalink to “运行时 API”">​</a></h4><p>当通过 <a href="/zh/nodejs/api/cli#permission"><code>--permission</code></a> 标志启用权限模型时，一个新的属性 <code>permission</code> 会被添加到 <code>process</code> 对象中。这个属性包含一个函数：</p><h5 id="permissionhasscope-reference" tabindex="-1"><code>permission.has(scope[, reference])</code> <a class="header-anchor" href="#permissionhasscope-reference" aria-label="Permalink to “permission.has(scope[, reference])”">​</a></h5><p>用于在运行时检查权限的 API 调用 (<a href="/zh/nodejs/api/process#processpermissionhasscope-reference"><code>permission.has()</code></a>)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.permission.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.write&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.permission.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.write&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/home/rafaelgss/protected-folder&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.permission.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.read&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.permission.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.read&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/home/rafaelgss/protected-folder&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="file-system-permissions" tabindex="-1">文件系统权限 <a class="header-anchor" href="#file-system-permissions" aria-label="Permalink to “文件系统权限”">​</a></h4><p>默认情况下，权限模型通过 <code>node:fs</code> 模块限制对文件系统的访问。它不保证用户无法通过其他方式访问文件系统，例如通过 <code>node:sqlite</code> 模块。</p><p>要允许访问文件系统，请使用 <a href="/zh/nodejs/api/cli#allow-fs-read"><code>--allow-fs-read</code></a> 和 <a href="/zh/nodejs/api/cli#allow-fs-write"><code>--allow-fs-write</code></a> 标志：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permission</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-fs-read=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-fs-write=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这两个标志的有效参数是：</p><ul><li><code>*</code> - 分别允许所有 <code>FileSystemRead</code> 或 <code>FileSystemWrite</code> 操作。</li><li>以逗号（<code>,</code>）分隔的路径，分别仅允许匹配的 <code>FileSystemRead</code> 或 <code>FileSystemWrite</code> 操作。</li></ul><p>例子：</p><ul><li><code>--allow-fs-read=*</code> - 将允许所有 <code>FileSystemRead</code> 操作。</li><li><code>--allow-fs-write=*</code> - 将允许所有 <code>FileSystemWrite</code> 操作。</li><li><code>--allow-fs-write=/tmp/</code> - 将允许对 <code>/tmp/</code> 文件夹的 <code>FileSystemWrite</code> 访问。</li><li><code>--allow-fs-read=/tmp/ --allow-fs-read=/home/.gitignore</code> - 允许对 <code>/tmp/</code> 文件夹<strong>和</strong> <code>/home/.gitignore</code> 路径的 <code>FileSystemRead</code> 访问。</li></ul><p>也支持通配符：</p><ul><li><code>--allow-fs-read=/home/test*</code> 将允许读取对与通配符匹配的所有内容。例如：<code>/home/test/file1</code> 或 <code>/home/test2</code></li></ul><p>在传递通配符 (<code>*</code>) 后，所有后续字符都将被忽略。例如：<code>/home/*.js</code> 的工作方式类似于 <code>/home/*</code>。</p><p>当权限模型初始化时，如果指定的目录存在，它会自动添加一个通配符 (*)。例如，如果 <code>/home/test/files</code> 存在，它将被视为 <code>/home/test/files/*</code>。但是，如果该目录不存在，则不会添加通配符，并且访问权限将仅限于 <code>/home/test/files</code>。如果您想允许访问尚未存在的文件夹，请确保明确包含通配符：<code>/my-path/folder-do-not-exist/*</code>。</p><h4 id="permission-model-constraints" tabindex="-1">权限模型约束 <a class="header-anchor" href="#permission-model-constraints" aria-label="Permalink to “权限模型约束”">​</a></h4><p>在使用此系统之前，您需要了解一些约束：</p><ul><li><p>该模型不会继承到子节点进程或工作线程。</p></li><li><p>当使用权限模型时，以下功能将被限制：</p><ul><li>原生模块</li><li>子进程</li><li>工作线程</li><li>检查器协议</li><li>文件系统访问</li><li>WASI</li></ul></li><li><p>权限模型在 Node.js 环境设置完成后初始化。但是，某些标志（例如 <code>--env-file</code> 或 <code>--openssl-config</code>）的设计目的是在环境初始化之前读取文件。因此，此类标志不受权限模型规则的约束。通过 <code>v8.setFlagsFromString</code> 经由运行时设置的 V8 标志也同样适用。</p></li><li><p>启用权限模型后，无法在运行时请求 OpenSSL 引擎，这会影响内置的 crypto、https 和 tls 模块。</p></li><li><p>启用权限模型后，无法加载运行时可加载扩展，这会影响 sqlite 模块。</p></li><li><p>通过 <code>node:fs</code> 模块使用现有文件描述符会绕过权限模型。</p></li></ul><h4 id="limitations-and-known-issues" tabindex="-1">局限性和已知问题 <a class="header-anchor" href="#limitations-and-known-issues" aria-label="Permalink to “局限性和已知问题”">​</a></h4><ul><li>即使链接到已授权访问的路径集之外的位置，也会跟随符号链接。相对符号链接可能允许访问任意文件和目录。当启用权限模型启动应用程序时，您必须确保已授权访问的任何路径都不包含相对符号链接。</li></ul>`,36)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};