import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js Corepack 문서","description":"Corepack은 Node.js와 함께 제공되는 바이너리로, npm, pnpm, Yarn과 같은 패키지 관리자를 관리하기 위한 표준 인터페이스를 제공합니다. 이를 통해 사용자는 다양한 패키지 관리자와 버전 간에 쉽게 전환할 수 있으며, 호환성을 보장하고 개발 워크플로우를 단순화합니다.","frontmatter":{"title":"Node.js Corepack 문서","description":"Corepack은 Node.js와 함께 제공되는 바이너리로, npm, pnpm, Yarn과 같은 패키지 관리자를 관리하기 위한 표준 인터페이스를 제공합니다. 이를 통해 사용자는 다양한 패키지 관리자와 버전 간에 쉽게 전환할 수 있으며, 호환성을 보장하고 개발 워크플로우를 단순화합니다.","head":[["meta",{"name":"og:title","content":"Node.js Corepack 문서 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Corepack은 Node.js와 함께 제공되는 바이너리로, npm, pnpm, Yarn과 같은 패키지 관리자를 관리하기 위한 표준 인터페이스를 제공합니다. 이를 통해 사용자는 다양한 패키지 관리자와 버전 간에 쉽게 전환할 수 있으며, 호환성을 보장하고 개발 워크플로우를 단순화합니다."}],["meta",{"name":"twitter:title","content":"Node.js Corepack 문서 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Corepack은 Node.js와 함께 제공되는 바이너리로, npm, pnpm, Yarn과 같은 패키지 관리자를 관리하기 위한 표준 인터페이스를 제공합니다. 이를 통해 사용자는 다양한 패키지 관리자와 버전 간에 쉽게 전환할 수 있으며, 호환성을 보장하고 개발 워크플로우를 단순화합니다."}],["link",{"rel":"canonical","href":"https://idoc.dev/ko/nodejs/api/corepack"}],["meta",{"property":"og:url","content":"https://idoc.dev/ko/nodejs/api/corepack"}]]},"headers":[],"relativePath":"ko/nodejs/api/corepack.md","filePath":"ko/nodejs/api/corepack.md","lastUpdated":null}`),a={name:`ko/nodejs/api/corepack.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="corepack" tabindex="-1">Corepack <a class="header-anchor" href="#corepack" aria-label="Permalink to “Corepack”">​</a></h1><p><strong>다음 버전에서 추가됨: v16.9.0, v14.19.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[안정성: 1 - 실험적]</p><p><a href="/ko/nodejs/api/documentation#stability-index">안정성: 1</a> <a href="/ko/nodejs/api/documentation#stability-index">안정성: 1</a> - 실험적</p></div><p>*<a href="https://github.com/nodejs/corepack">Corepack</a>*은 패키지 관리자 버전을 관리하는 데 도움이 되는 실험적인 도구입니다. 이 도구는 호출 시 현재 프로젝트에 구성된 패키지 관리자를 식별하고, 필요한 경우 다운로드하고, 마지막으로 실행하는 각 <a href="/ko/nodejs/api/corepack#supported-package-managers">지원되는 패키지 관리자</a>에 대한 바이너리 프록시를 노출합니다.</p><p>Corepack은 Node.js의 기본 설치와 함께 배포되지만 Corepack에서 관리하는 패키지 관리자는 Node.js 배포의 일부가 아니며,</p><ul><li>처음 사용할 때 Corepack은 네트워크에서 최신 버전을 다운로드합니다.</li><li>보안 취약점 또는 기타 관련 업데이트는 Node.js 프로젝트의 범위를 벗어납니다. 필요한 경우 최종 사용자는 자체적으로 업데이트하는 방법을 알아내야 합니다.</li></ul><p>이 기능은 두 가지 핵심 워크플로를 단순화합니다.</p><ul><li>새로운 기여자의 온보딩을 쉽게 해줍니다. 사용자가 원하는 패키지 관리자를 사용하기 위해 시스템별 설치 프로세스를 더 이상 따를 필요가 없기 때문입니다.</li><li>팀의 모든 구성원이 업데이트해야 할 때마다 수동으로 동기화할 필요 없이 정확히 원하는 패키지 관리자 버전을 사용하도록 할 수 있습니다.</li></ul><h2 id="workflows" tabindex="-1">워크플로 <a class="header-anchor" href="#workflows" aria-label="Permalink to “워크플로”">​</a></h2><h3 id="enabling-the-feature" tabindex="-1">기능 활성화 <a class="header-anchor" href="#enabling-the-feature" aria-label="Permalink to “기능 활성화”">​</a></h3><p>실험적 상태로 인해 Corepack은 현재 효과를 내기 위해 명시적으로 활성화해야 합니다. 이를 위해 <a href="https://github.com/nodejs/corepack#corepack-enable--name" target="_blank" rel="noreferrer"><code>corepack enable</code></a>을 실행하여 <code>node</code> 바이너리 옆에 환경에 심볼릭 링크를 설정합니다(필요한 경우 기존 심볼릭 링크를 덮어씁니다).</p><p>이 시점부터 <a href="/ko/nodejs/api/corepack#supported-package-managers">지원되는 바이너리</a>에 대한 모든 호출은 추가 설정 없이 작동합니다. 문제가 발생하면 <a href="https://github.com/nodejs/corepack#corepack-disable--name" target="_blank" rel="noreferrer"><code>corepack disable</code></a>을 실행하여 시스템에서 프록시를 제거합니다(그리고 <a href="https://github.com/nodejs/corepack" target="_blank" rel="noreferrer">Corepack 저장소</a>에 문제를 열어 알려주시는 것을 고려해 주세요).</p><h3 id="configuring-a-package" tabindex="-1">패키지 구성하기 <a class="header-anchor" href="#configuring-a-package" aria-label="Permalink to “패키지 구성하기”">​</a></h3><p>Corepack 프록시는 현재 디렉터리 계층 구조에서 가장 가까운 <a href="/ko/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> 파일을 찾아 <a href="/ko/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> 속성을 추출합니다.</p><p>값이 <a href="/ko/nodejs/api/corepack#supported-package-managers">지원되는 패키지 관리자</a>에 해당하면 Corepack은 관련 바이너리에 대한 모든 호출이 요청된 버전을 대상으로 실행되도록 하고 필요한 경우 요청 시 다운로드하며, 성공적으로 검색할 수 없으면 중단합니다.</p><p><a href="https://github.com/nodejs/corepack#corepack-use-nameversion" target="_blank" rel="noreferrer"><code>corepack use</code></a>를 사용하여 Corepack에 로컬 <code>package.json</code>을 업데이트하여 원하는 패키지 관리자를 사용하도록 요청할 수 있습니다.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # package.json에 최신 7.x 버전을 설정합니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # package.json에 최신 버전을 설정합니다.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="upgrading-the-global-versions" tabindex="-1">전역 버전 업그레이드 <a class="header-anchor" href="#upgrading-the-global-versions" aria-label="Permalink to “전역 버전 업그레이드”">​</a></h3><p>기존 프로젝트 외부에서 실행할 때(예: <code>yarn init</code> 실행 시) Corepack은 기본적으로 각 도구의 최신 안정 릴리스에 대략적으로 해당하는 미리 정의된 버전을 사용합니다. 이러한 버전은 설정하려는 패키지 관리자 버전과 함께 <a href="https://github.com/nodejs/corepack#corepack-install--g--global---all--nameversion" target="_blank" rel="noreferrer"><code>corepack install</code></a> 명령을 실행하여 재정의할 수 있습니다.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>또는 태그나 범위를 사용할 수 있습니다.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn@stable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="offline-workflow" tabindex="-1">오프라인 워크플로 <a class="header-anchor" href="#offline-workflow" aria-label="Permalink to “오프라인 워크플로”">​</a></h3><p>많은 프로덕션 환경에는 네트워크 액세스 권한이 없습니다. Corepack은 일반적으로 패키지 관리자 릴리스를 레지스트리에서 직접 다운로드하므로 이러한 환경과 충돌할 수 있습니다. 이러한 충돌을 방지하려면 네트워크 액세스 권한이 있는 동안(일반적으로 배포 이미지를 준비하는 동시에) <a href="https://github.com/nodejs/corepack#corepack-pack---all--nameversion" target="_blank" rel="noreferrer"><code>corepack pack</code></a> 명령을 호출합니다. 이렇게 하면 네트워크 액세스 권한이 없어도 필요한 패키지 관리자를 사용할 수 있습니다.</p><p><code>pack</code> 명령에는 <a href="https://github.com/nodejs/corepack#utility-commands" target="_blank" rel="noreferrer">다양한 플래그</a>가 있습니다. 자세한 내용은 자세한 <a href="https://github.com/nodejs/corepack#readme" target="_blank" rel="noreferrer">Corepack 설명서</a>를 참조하십시오.</p><h2 id="supported-package-managers" tabindex="-1">지원되는 패키지 관리자 <a class="header-anchor" href="#supported-package-managers" aria-label="Permalink to “지원되는 패키지 관리자”">​</a></h2><p>다음 바이너리는 Corepack을 통해 제공됩니다.</p><table tabindex="0"><thead><tr><th>패키지 관리자</th><th>바이너리 이름</th></tr></thead><tbody><tr><td><a href="https://yarnpkg.com/" target="_blank" rel="noreferrer">Yarn</a></td><td><code>yarn</code> , <code>yarnpkg</code></td></tr><tr><td><a href="https://pnpm.io/" target="_blank" rel="noreferrer">pnpm</a></td><td><code>pnpm</code> , <code>pnpx</code></td></tr></tbody></table><h2 id="common-questions" tabindex="-1">자주 묻는 질문 <a class="header-anchor" href="#common-questions" aria-label="Permalink to “자주 묻는 질문”">​</a></h2><h3 id="how-does-corepack-interact-with-npm?" tabindex="-1">Corepack은 npm과 어떻게 상호 작용합니까? <a class="header-anchor" href="#how-does-corepack-interact-with-npm?" aria-label="Permalink to “Corepack은 npm과 어떻게 상호 작용합니까?”">​</a></h3><p>Corepack은 다른 패키지 관리자와 마찬가지로 npm을 지원할 수 있지만, 해당 shim은 기본적으로 활성화되어 있지 않습니다. 이는 다음과 같은 몇 가지 결과를 초래합니다.</p><ul><li>Corepack이 이를 가로챌 수 없으므로 다른 패키지 관리자를 사용하도록 구성된 프로젝트 내에서 <code>npm</code> 명령을 항상 실행할 수 있습니다.</li><li><code>npm</code>은 <a href="/ko/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> 속성에서 유효한 옵션이지만, shim이 없으면 글로벌 npm이 사용됩니다.</li></ul><h3 id="running-npm-install--g-yarn-doesnt-work" tabindex="-1"><code>npm install -g yarn</code>이 작동하지 않습니다. <a class="header-anchor" href="#running-npm-install--g-yarn-doesnt-work" aria-label="Permalink to “npm install -g yarn이 작동하지 않습니다.”">​</a></h3><p>npm은 글로벌 설치를 수행할 때 Corepack 바이너리를 실수로 덮어쓰는 것을 방지합니다. 이 문제를 피하려면 다음 옵션 중 하나를 고려하십시오.</p><ul><li>이 명령을 실행하지 마십시오. Corepack은 패키지 관리자 바이너리를 어쨌든 제공하고 요청된 버전이 항상 사용 가능하도록 보장하므로 패키지 관리자를 명시적으로 설치할 필요가 없습니다.</li><li><code>npm install</code>에 <code>--force</code> 플래그를 추가하십시오. 그러면 npm에 바이너리를 덮어써도 괜찮다고 알리지만, 그 과정에서 Corepack 바이너리를 지우게 됩니다. (다시 추가하려면 <a href="https://github.com/nodejs/corepack#corepack-enable--name" target="_blank" rel="noreferrer"><code>corepack enable</code></a>을 실행하십시오.)</li></ul>`,35)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};