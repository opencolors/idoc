import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"コマンドラインからNode.jsスクリプトを実行する","description":"コマンドラインからNode.jsプログラムを実行する方法を学びます。nodeコマンドの使用法、shebang行、実行権限、文字列を引数として渡す方法、自動的にアプリケーションを再起動する方法などを含みます。","frontmatter":{"title":"コマンドラインからNode.jsスクリプトを実行する","description":"コマンドラインからNode.jsプログラムを実行する方法を学びます。nodeコマンドの使用法、shebang行、実行権限、文字列を引数として渡す方法、自動的にアプリケーションを再起動する方法などを含みます。","head":[["meta",{"name":"og:title","content":"コマンドラインからNode.jsスクリプトを実行する | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"コマンドラインからNode.jsプログラムを実行する方法を学びます。nodeコマンドの使用法、shebang行、実行権限、文字列を引数として渡す方法、自動的にアプリケーションを再起動する方法などを含みます。"}],["meta",{"name":"twitter:title","content":"コマンドラインからNode.jsスクリプトを実行する | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"コマンドラインからNode.jsプログラムを実行する方法を学びます。nodeコマンドの使用法、shebang行、実行権限、文字列を引数として渡す方法、自動的にアプリケーションを再起動する方法などを含みます。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/guide/run-nodejs-scripts-from-the-command-line"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/guide/run-nodejs-scripts-from-the-command-line"}]]},"headers":[],"relativePath":"ja/nodejs/guide/run-nodejs-scripts-from-the-command-line.md","filePath":"ja/nodejs/guide/run-nodejs-scripts-from-the-command-line.md","lastUpdated":null}`),a={name:`ja/nodejs/guide/run-nodejs-scripts-from-the-command-line.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="コマンドラインから-node-js-スクリプトを実行する" tabindex="-1">コマンドラインから Node.js スクリプトを実行する <a class="header-anchor" href="#コマンドラインから-node-js-スクリプトを実行する" aria-label="Permalink to “コマンドラインから Node.js スクリプトを実行する”">​</a></h1><p>Node.js プログラムを実行する通常の方法は、グローバルに利用可能な <code>node</code> コマンドを実行し (Node.js をインストールしたら)、実行したいファイルの名前を渡すことです。</p><p>メインの Node.js アプリケーションファイルが <code>app.js</code> の場合、次のように入力して呼び出すことができます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上記では、シェルに <code>node</code> でスクリプトを実行するように明示的に指示しています。 また、JavaScript ファイルに「シバン」行を埋め込むこともできます。「シバン」はファイルの最初の行であり、スクリプトの実行に使用するインタープリターを OS に指示します。 以下は JavaScript の最初の行です。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上記では、インタープリターの絶対パスを明示的に指定しています。 すべてのオペレーティングシステムが <code>bin</code> フォルダに <code>node</code> を持っているわけではありませんが、すべて <code>env</code> を持っているはずです。 OS に <code>env</code> を <code>node</code> をパラメータとして実行するように指示できます。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env node</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// あなたの javascript コード</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="シバンを使用するには、ファイルに実行可能権限が必要です。" tabindex="-1">シバンを使用するには、ファイルに実行可能権限が必要です。 <a class="header-anchor" href="#シバンを使用するには、ファイルに実行可能権限が必要です。" aria-label="Permalink to “シバンを使用するには、ファイルに実行可能権限が必要です。”">​</a></h2><p>次のコマンドを実行して、<code>app.js</code> に実行可能権限を付与できます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> u+x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>コマンドを実行する際は、<code>app.js</code> ファイルが含まれるディレクトリにいることを確認してください。</p><h2 id="ファイルパスの代わりに文字列を引数として-node-に渡す" tabindex="-1">ファイルパスの代わりに文字列を引数として node に渡す <a class="header-anchor" href="#ファイルパスの代わりに文字列を引数として-node-に渡す" aria-label="Permalink to “ファイルパスの代わりに文字列を引数として node に渡す”">​</a></h2><p>文字列を引数として実行するには、<code>-e</code>、<code>--eval &quot;script&quot;</code> を使用できます。 次の引数を JavaScript として評価します。 REPL で定義済みのモジュールもスクリプトで使用できます。 Windows で <code>cmd.exe</code> を使用する場合、一重引用符は二重引用符 <code>&quot;</code> しか認識しないため、正しく機能しません。 Powershell または Git bash では、<code>&quot;</code> と <code>&#39;</code> の両方を使用できます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;console.log(123)&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="アプリケーションを自動的に再起動する" tabindex="-1">アプリケーションを自動的に再起動する <a class="header-anchor" href="#アプリケーションを自動的に再起動する" aria-label="Permalink to “アプリケーションを自動的に再起動する”">​</a></h2><p>nodejs V 16 以降では、ファイルが変更されたときにアプリケーションを自動的に再起動する組み込みオプションがあります。 これは開発目的で役立ちます。 この機能を使用するには、<code>watch</code> フラグを nodejs に渡す必要があります。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>したがって、ファイルを変更すると、アプリケーションは自動的に再起動されます。 --watch <a href="/ja/nodejs/api/cli#watch">フラグのドキュメント</a> を参照してください。</p>`,19)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};