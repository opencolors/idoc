import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Отладка Node.js","description":"Варианты отладки Node.js, включая --inspect, --inspect-brk и --debug, а также сценарии удаленной отладки и информация о старом отладчике.","frontmatter":{"title":"Отладка Node.js","description":"Варианты отладки Node.js, включая --inspect, --inspect-brk и --debug, а также сценарии удаленной отладки и информация о старом отладчике.","head":[["meta",{"name":"og:title","content":"Отладка Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Варианты отладки Node.js, включая --inspect, --inspect-brk и --debug, а также сценарии удаленной отладки и информация о старом отладчике."}],["meta",{"name":"twitter:title","content":"Отладка Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Варианты отладки Node.js, включая --inspect, --inspect-brk и --debug, а также сценарии удаленной отладки и информация о старом отладчике."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/guide/debugging-nodejs"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/guide/debugging-nodejs"}]]},"headers":[],"relativePath":"ru/nodejs/guide/debugging-nodejs.md","filePath":"ru/nodejs/guide/debugging-nodejs.md","lastUpdated":1749464498000}`),a={name:`ru/nodejs/guide/debugging-nodejs.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="отладка-node-js" tabindex="-1">Отладка Node.js <a class="header-anchor" href="#отладка-node-js" aria-label="Permalink to “Отладка Node.js”">​</a></h1><p>Это руководство поможет вам начать отладку ваших приложений и скриптов Node.js.</p><h2 id="включение-инспектора" tabindex="-1">Включение инспектора <a class="header-anchor" href="#включение-инспектора" aria-label="Permalink to “Включение инспектора”">​</a></h2><p>При запуске с ключом <code>--inspect</code> процесс Node.js ожидает подключения отладочного клиента. По умолчанию он будет прослушивать хост и порт <code>127.0.0.1:9229</code>. Каждому процессу также присваивается уникальный UUID.</p><p>Клиенты инспектора должны знать и указывать адрес хоста, порт и UUID для подключения. Полный URL будет выглядеть примерно так: <code>ws://127.0.0.1:9229/0f2c936f-b1cd-4ac9-aab3-f63b0f33d55e</code>.</p><p>Node.js также начнет прослушивание отладочных сообщений, если получит сигнал <code>SIGUSR1</code>. (<code>SIGUSR1</code> недоступен в Windows.) В Node.js 7 и более ранних версиях это активирует устаревший Debugger API. В Node.js 8 и более поздних версиях он активирует Inspector API.</p><h2 id="последствия-для-безопасности" tabindex="-1">Последствия для безопасности <a class="header-anchor" href="#последствия-для-безопасности" aria-label="Permalink to “Последствия для безопасности”">​</a></h2><p>Поскольку отладчик имеет полный доступ к среде выполнения Node.js, злоумышленник, способный подключиться к этому порту, может выполнить произвольный код от имени процесса Node.js. Важно понимать последствия для безопасности раскрытия порта отладчика в общедоступных и частных сетях.</p><h3 id="предоставление-доступа-к-порту-отладки-публично-небезопасно" tabindex="-1">Предоставление доступа к порту отладки публично небезопасно <a class="header-anchor" href="#предоставление-доступа-к-порту-отладки-публично-небезопасно" aria-label="Permalink to “Предоставление доступа к порту отладки публично небезопасно”">​</a></h3><p>Если отладчик привязан к общедоступному IP-адресу или к 0.0.0.0, любые клиенты, которые могут получить доступ к вашему IP-адресу, смогут подключиться к отладчику без каких-либо ограничений и смогут запускать произвольный код.</p><p>По умолчанию <code>node --inspect</code> привязывается к 127.0.0.1. Вам явно нужно указать общедоступный IP-адрес или 0.0.0.0 и т. д., если вы хотите разрешить внешние подключения к отладчику. Это может подвергнуть вас потенциально значительной угрозе безопасности. Мы рекомендуем вам убедиться, что установлены соответствующие брандмауэры и средства контроля доступа для предотвращения угрозы безопасности.</p><p>См. раздел &#39;<a href="/ru/nodejs/guide/debugging-nodejs#enabling-remote-debugging-scenarios">Включение сценариев удаленной отладки</a>&#39; с советами о том, как безопасно разрешить удаленным отладочным клиентам подключаться.</p><h3 id="локальные-приложения-имеют-полныи-доступ-к-инспектору" tabindex="-1">Локальные приложения имеют полный доступ к инспектору <a class="header-anchor" href="#локальные-приложения-имеют-полныи-доступ-к-инспектору" aria-label="Permalink to “Локальные приложения имеют полный доступ к инспектору”">​</a></h3><p>Даже если вы привяжете порт инспектора к 127.0.0.1 (по умолчанию), любые приложения, работающие локально на вашем компьютере, будут иметь неограниченный доступ. Это сделано для того, чтобы локальные отладчики могли удобно подключаться.</p><h3 id="браузеры-websockets-и-политика-одного-источника" tabindex="-1">Браузеры, WebSockets и политика одного источника <a class="header-anchor" href="#браузеры-websockets-и-политика-одного-источника" aria-label="Permalink to “Браузеры, WebSockets и политика одного источника”">​</a></h3><p>Веб-сайты, открытые в веб-браузере, могут выполнять WebSocket и HTTP-запросы в соответствии с моделью безопасности браузера. Начальное HTTP-соединение необходимо для получения уникального идентификатора сеанса отладки. Политика одного источника не позволяет веб-сайтам устанавливать это HTTP-соединение. Для дополнительной защиты от <a href="https://en.wikipedia.org/wiki/DNS_rebinding" target="_blank" rel="noreferrer">атак с перепривязкой DNS</a>, Node.js проверяет, что заголовки &#39;Host&#39; для соединения точно указывают IP-адрес или <code>localhost</code>.</p><p>Эти политики безопасности запрещают подключение к удаленному серверу отладки путем указания имени хоста. Вы можете обойти это ограничение, указав IP-адрес или используя SSH-туннели, как описано ниже.</p><h2 id="клиенты-inspector" tabindex="-1">Клиенты Inspector <a class="header-anchor" href="#клиенты-inspector" aria-label="Permalink to “Клиенты Inspector”">​</a></h2><p>Минимальный отладчик CLI доступен с <code>node inspect myscript.js</code>. Несколько коммерческих инструментов и инструментов с открытым исходным кодом также могут подключаться к Node.js Inspector.</p><h3 id="chrome-devtools-55-microsoft-edge" tabindex="-1">Chrome DevTools 55+, Microsoft Edge <a class="header-anchor" href="#chrome-devtools-55-microsoft-edge" aria-label="Permalink to “Chrome DevTools 55+, Microsoft Edge”">​</a></h3><ul><li><strong>Вариант 1</strong>: Откройте <code>chrome://inspect</code> в браузере на базе Chromium или <code>edge://inspect</code> в Edge. Нажмите кнопку Configure и убедитесь, что целевой хост и порт указаны.</li><li><strong>Вариант 2</strong>: Скопируйте <code>devtoolsFrontendUrl</code> из вывода <code>/json/list</code> (см. выше) или текста подсказки <code>--inspect</code> и вставьте в Chrome.</li></ul><p>См. <a href="https://github.com/ChromeDevTools/devtools-frontend" target="_blank" rel="noreferrer">https://github.com/ChromeDevTools/devtools-frontend</a>, <a href="https://www.microsoftedgeinsider.com" target="_blank" rel="noreferrer">https://www.microsoftedgeinsider.com</a> для получения дополнительной информации.</p><h3 id="visual-studio-code-1-10" tabindex="-1">Visual Studio Code 1.10+ <a class="header-anchor" href="#visual-studio-code-1-10" aria-label="Permalink to “Visual Studio Code 1.10+”">​</a></h3><ul><li>На панели Debug щелкните значок настроек, чтобы открыть <code>.vscode/launch.json</code>. Выберите &quot;Node.js&quot; для первоначальной настройки.</li></ul><p>См. <a href="https://github.com/microsoft/vscode" target="_blank" rel="noreferrer">https://github.com/microsoft/vscode</a> для получения дополнительной информации.</p><h3 id="jetbrains-webstorm-и-другие-ide-jetbrains" tabindex="-1">JetBrains WebStorm и другие IDE JetBrains <a class="header-anchor" href="#jetbrains-webstorm-и-другие-ide-jetbrains" aria-label="Permalink to “JetBrains WebStorm и другие IDE JetBrains”">​</a></h3><ul><li>Создайте новую конфигурацию отладки Node.js и нажмите Debug. <code>--inspect</code> будет использоваться по умолчанию для Node.js 7+. Чтобы отключить, снимите флажок <code>js.debugger.node.use.inspect</code> в реестре IDE. Чтобы узнать больше о запуске и отладке Node.js в WebStorm и других IDE JetBrains, ознакомьтесь с <a href="https://www.jetbrains.com/help/webstorm/running-and-debugging-node-js.html" target="_blank" rel="noreferrer">онлайн-справкой WebStorm</a>.</li></ul><h3 id="chrome-remote-interface" tabindex="-1">chrome-remote-interface <a class="header-anchor" href="#chrome-remote-interface" aria-label="Permalink to “chrome-remote-interface”">​</a></h3><ul><li>Библиотека для упрощения подключения к конечным точкам <a href="https://chromedevtools.github.io/debugger-protocol-viewer/v8/" target="_blank" rel="noreferrer">Inspector Protocol</a>. Дополнительную информацию см. на <a href="https://github.com/cyrus-and/chrome-remote-interface" target="_blank" rel="noreferrer">https://github.com/cyrus-and/chrome-remote-interface</a>.</li></ul><h3 id="gitpod" tabindex="-1">Gitpod <a class="header-anchor" href="#gitpod" aria-label="Permalink to “Gitpod”">​</a></h3><ul><li>Запустите конфигурацию отладки Node.js из представления <code>Debug</code> или нажмите <code>F5</code>. Подробные инструкции</li></ul><p>Дополнительную информацию см. на <a href="https://www.gitpod.io" target="_blank" rel="noreferrer">https://www.gitpod.io</a>.</p><h3 id="eclipse-ide-с-расширением-eclipse-wild-web-developer" tabindex="-1">Eclipse IDE с расширением Eclipse Wild Web Developer <a class="header-anchor" href="#eclipse-ide-с-расширением-eclipse-wild-web-developer" aria-label="Permalink to “Eclipse IDE с расширением Eclipse Wild Web Developer”">​</a></h3><ul><li>Из файла <code>.js</code> выберите <code>Debug As... &gt; Node program</code> или Создайте конфигурацию отладки для подключения отладчика к работающему приложению Node.js (уже запущенному с <code>--inspect</code>).</li></ul><p>Дополнительную информацию см. на <a href="https://eclipse.org/eclipseide" target="_blank" rel="noreferrer">https://eclipse.org/eclipseide</a>.</p><h2 id="параметры-команднои-строки" tabindex="-1">Параметры командной строки <a class="header-anchor" href="#параметры-команднои-строки" aria-label="Permalink to “Параметры командной строки”">​</a></h2><p>В следующей таблице перечислены влияния различных флагов времени выполнения на отладку:</p><table tabindex="0"><thead><tr><th>Флаг</th><th>Значение</th></tr></thead><tbody><tr><td><code>--inspect</code></td><td>Включить отладку с помощью Node.js Inspector. Прослушивать адрес и порт по умолчанию (127.0.0.1:9229)</td></tr><tr><td><code>--inspect-brk</code></td><td>Включить отладку с помощью Node.js Inspector. Прослушивать адрес и порт по умолчанию (127.0.0.1:9229); Остановить перед началом пользовательского кода</td></tr><tr><td><code>--inspect=[host:port]</code></td><td>Включить агент inspector; Привязаться к адресу или имени хоста host (по умолчанию: 127.0.0.1); Прослушивать порт port (по умолчанию: 9229)</td></tr><tr><td><code>--inspect-brk=[host:port]</code></td><td>Включить агент inspector; Привязаться к адресу или имени хоста host (по умолчанию: 127.0.0.1); Прослушивать порт port (по умолчанию: 9229); Остановить перед началом пользовательского кода</td></tr><tr><td><code>--inspect-wait</code></td><td>Включить агент inspector; Прослушивать адрес и порт по умолчанию (127.0.0.1:9229); Ожидать подключения отладчика.</td></tr><tr><td><code>--inspect-wait=[host:port]</code></td><td>Включить агент inspector; Привязаться к адресу или имени хоста host (по умолчанию: 127.0.0.1); Прослушивать порт port (по умолчанию: 9229); Ожидать подключения отладчика.</td></tr><tr><td><code>node inspect script.js</code></td><td>Создать дочерний процесс для запуска пользовательского скрипта с флагом --inspect; и использовать основной процесс для запуска отладчика CLI.</td></tr><tr><td><code>node inspect --port=xxxx script.js</code></td><td>Создать дочерний процесс для запуска пользовательского скрипта с флагом --inspect; и использовать основной процесс для запуска отладчика CLI. Прослушивать порт port (по умолчанию: 9229)</td></tr></tbody></table><h2 id="включение-сценариев-удаленнои-отладки" tabindex="-1">Включение сценариев удаленной отладки <a class="header-anchor" href="#включение-сценариев-удаленнои-отладки" aria-label="Permalink to “Включение сценариев удаленной отладки”">​</a></h2><p>Мы рекомендуем никогда не разрешать отладчику прослушивать общедоступный IP-адрес. Если вам необходимо разрешить удаленные отладочные подключения, мы рекомендуем вместо этого использовать ssh-туннели. Мы предоставляем следующий пример только в иллюстративных целях. Пожалуйста, осознайте риски безопасности, связанные с предоставлением удаленного доступа к привилегированной службе, прежде чем продолжить.</p><p>Допустим, вы запускаете Node.js на удаленной машине, remote.example.com, которую вы хотите отлаживать. На этой машине вам следует запустить процесс node с инспектором, прослушивающим только localhost (по умолчанию).</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inspect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Теперь на вашей локальной машине, с которой вы хотите инициировать отладочное клиентское соединение, вы можете настроить ssh-туннель:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9225:localhost:9229</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote.example.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Это запускает сеанс ssh-туннеля, где соединение с портом 9221 на вашей локальной машине будет перенаправлено на порт 9229 на remote.example.com. Теперь вы можете подключить отладчик, такой как Chrome DevTools или Visual Studio Code, к localhost:9221, который должен иметь возможность отлаживать так, как если бы приложение Node.js работало локально.</p><h2 id="устаревшии-отладчик" tabindex="-1">Устаревший отладчик <a class="header-anchor" href="#устаревшии-отладчик" aria-label="Permalink to “Устаревший отладчик”">​</a></h2><p><strong>Устаревший отладчик устарел с Node.js 7.7.0. Пожалуйста, используйте --inspect и Inspector вместо него.</strong></p><p>При запуске с переключателями <code>--debug</code> или <code>--debug-brk</code> в версии 7 и более ранних Node.js прослушивает отладочные команды, определенные прекращенным протоколом отладки V8, на TCP-порту, по умолчанию <code>5858</code>. Любой клиент отладчика, который поддерживает этот протокол, может подключиться и отладить запущенный процесс; ниже перечислены несколько популярных.</p><p>Протокол отладки V8 больше не поддерживается и не документируется.</p><h3 id="встроенныи-отладчик" tabindex="-1">Встроенный отладчик <a class="header-anchor" href="#встроенныи-отладчик" aria-label="Permalink to “Встроенный отладчик”">​</a></h3><p>Запустите <code>node debug script_name.js</code>, чтобы запустить свой скрипт под встроенным отладчиком командной строки. Ваш скрипт запускается в другом процессе Node.js, запущенном с опцией <code>--debug-brk</code>, а начальный процесс Node.js запускает скрипт <code>_debugger.js</code> и подключается к вашей цели. См. <a href="/ru/nodejs/api/debugger">документацию</a> для получения дополнительной информации.</p><h3 id="node-inspector" tabindex="-1">node-inspector <a class="header-anchor" href="#node-inspector" aria-label="Permalink to “node-inspector”">​</a></h3><p>Отлаживайте ваше приложение Node.js с помощью Chrome DevTools, используя промежуточный процесс, который переводит <a href="https://chromedevtools.github.io/debugger-protocol-viewer/v8/" target="_blank" rel="noreferrer">Inspector Protocol</a>, используемый в Chromium, в протокол V8 Debugger, используемый в Node.js. Подробности см. на <a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="noreferrer">https://github.com/node-inspector/node-inspector</a>.</p>`,53)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};