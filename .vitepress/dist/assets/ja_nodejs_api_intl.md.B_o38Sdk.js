import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js ドキュメント - 国際化","description":"Node.jsのこのドキュメントセクションでは、国際化（Intl）モジュールについて説明しています。このモジュールは、並べ替え、数値フォーマット、日付と時間のフォーマットなど、さまざまな国際化およびローカライズ機能へのアクセスを提供します。","frontmatter":{"title":"Node.js ドキュメント - 国際化","description":"Node.jsのこのドキュメントセクションでは、国際化（Intl）モジュールについて説明しています。このモジュールは、並べ替え、数値フォーマット、日付と時間のフォーマットなど、さまざまな国際化およびローカライズ機能へのアクセスを提供します。","head":[["meta",{"name":"og:title","content":"Node.js ドキュメント - 国際化 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.jsのこのドキュメントセクションでは、国際化（Intl）モジュールについて説明しています。このモジュールは、並べ替え、数値フォーマット、日付と時間のフォーマットなど、さまざまな国際化およびローカライズ機能へのアクセスを提供します。"}],["meta",{"name":"twitter:title","content":"Node.js ドキュメント - 国際化 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.jsのこのドキュメントセクションでは、国際化（Intl）モジュールについて説明しています。このモジュールは、並べ替え、数値フォーマット、日付と時間のフォーマットなど、さまざまな国際化およびローカライズ機能へのアクセスを提供します。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/intl"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/intl"}]]},"headers":[],"relativePath":"ja/nodejs/api/intl.md","filePath":"ja/nodejs/api/intl.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/api/intl.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="internationalization-support" tabindex="-1">国際化サポート <a class="header-anchor" href="#internationalization-support" aria-label="Permalink to “国際化サポート”">​</a></h1><p>Node.jsには、国際化されたプログラムをより簡単に記述するための多くの機能があります。そのうちのいくつかは次のとおりです。</p><ul><li><p><a href="https://tc39.github.io/ecma262/" target="_blank" rel="noreferrer">ECMAScript Language Specification</a>のロケールに依存する関数またはUnicode対応の関数:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer"><code>String.prototype.normalize()</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase" target="_blank" rel="noreferrer"><code>String.prototype.toLowerCase()</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase" target="_blank" rel="noreferrer"><code>String.prototype.toUpperCase()</code></a></li></ul></li><li><p><a href="https://tc39.github.io/ecma402/" target="_blank" rel="noreferrer">ECMAScript Internationalization API Specification</a>（別名ECMA-402）で説明されているすべての機能:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noreferrer"><code>Intl</code></a>オブジェクト</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noreferrer"><code>String.prototype.localeCompare()</code></a>や<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString" target="_blank" rel="noreferrer"><code>Date.prototype.toLocaleString()</code></a>のようなロケールに依存するメソッド</li></ul></li><li><p><a href="/ja/nodejs/api/url#the-whatwg-url-api">WHATWG URLパーサー</a>の<a href="https://en.wikipedia.org/wiki/Internationalized_domain_name" target="_blank" rel="noreferrer">国際化ドメイン名</a>（IDN）のサポート</p></li><li><p><a href="/ja/nodejs/api/buffer#buffertranscodesource-fromenc-toenc"><code>require(&#39;node:buffer&#39;).transcode()</code></a></p></li><li><p>より正確な<a href="/ja/nodejs/api/repl#repl">REPL</a>の行編集</p></li><li><p><a href="/ja/nodejs/api/util#class-utiltextdecoder"><code>require(&#39;node:util&#39;).TextDecoder</code></a></p></li><li><p><a href="https://github.com/tc39/proposal-regexp-unicode-property-escapes" target="_blank" rel="noreferrer"><code>RegExp</code> Unicodeプロパティエスケープ</a></p></li></ul><p>Node.jsと基盤となるV8エンジンは、<a href="http://site.icu-project.org/" target="_blank" rel="noreferrer">International Components for Unicode（ICU）</a>を使用して、これらの機能をネイティブC/C++コードで実装します。完全なICUデータセットは、デフォルトでNode.jsによって提供されます。ただし、ICUデータファイルのサイズが大きいため、Node.jsのビルド時または実行時にICUデータセットをカスタマイズするためのいくつかのオプションが提供されています。</p><h2 id="options-for-building-nodejs" tabindex="-1">Node.js のビルドオプション <a class="header-anchor" href="#options-for-building-nodejs" aria-label="Permalink to “Node.js のビルドオプション”">​</a></h2><p>Node.js での ICU の使用方法を制御するために、コンパイル時に 4 つの <code>configure</code> オプションを利用できます。Node.js のコンパイル方法の詳細については、<a href="https://github.com/nodejs/node/blob/HEAD/BUILDING.md" target="_blank" rel="noreferrer">BUILDING.md</a> を参照してください。</p><ul><li><code>--with-intl=none</code>/<code>--without-intl</code></li><li><code>--with-intl=system-icu</code></li><li><code>--with-intl=small-icu</code></li><li><code>--with-intl=full-icu</code> (デフォルト)</li></ul><p>各 <code>configure</code> オプションで利用可能な Node.js および JavaScript 機能の概要:</p><table tabindex="0"><thead><tr><th>機能</th><th><code>none</code></th><th><code>system-icu</code></th><th><code>small-icu</code></th><th><code>full-icu</code></th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer"><code>String.prototype.normalize()</code></a></td><td>なし (関数は no-op)</td><td>フル</td><td>フル</td><td>フル</td></tr><tr><td><code>String.prototype.to*Case()</code></td><td>フル</td><td>フル</td><td>フル</td><td>フル</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noreferrer"><code>Intl</code></a></td><td>なし (オブジェクトが存在しない)</td><td>部分的/フル (OS に依存)</td><td>部分的 (英語のみ)</td><td>フル</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noreferrer"><code>String.prototype.localeCompare()</code></a></td><td>部分的 (ロケールを認識しない)</td><td>フル</td><td>フル</td><td>フル</td></tr><tr><td><code>String.prototype.toLocale*Case()</code></td><td>部分的 (ロケールを認識しない)</td><td>フル</td><td>フル</td><td>フル</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString" target="_blank" rel="noreferrer"><code>Number.prototype.toLocaleString()</code></a></td><td>部分的 (ロケールを認識しない)</td><td>部分的/フル (OS に依存)</td><td>部分的 (英語のみ)</td><td>フル</td></tr><tr><td><code>Date.prototype.toLocale*String()</code></td><td>部分的 (ロケールを認識しない)</td><td>部分的/フル (OS に依存)</td><td>部分的 (英語のみ)</td><td>フル</td></tr><tr><td><a href="/ja/nodejs/api/url#legacy-url-api">レガシー URL パーサー</a></td><td>部分的 (IDN サポートなし)</td><td>フル</td><td>フル</td><td>フル</td></tr><tr><td><a href="/ja/nodejs/api/url#the-whatwg-url-api">WHATWG URL パーサー</a></td><td>部分的 (IDN サポートなし)</td><td>フル</td><td>フル</td><td>フル</td></tr><tr><td><a href="/ja/nodejs/api/buffer#buffertranscodesource-fromenc-toenc"><code>require(&#39;node:buffer&#39;).transcode()</code></a></td><td>なし (関数が存在しない)</td><td>フル</td><td>フル</td><td>フル</td></tr><tr><td><a href="/ja/nodejs/api/repl#repl">REPL</a></td><td>部分的 (不正確な行編集)</td><td>フル</td><td>フル</td><td>フル</td></tr><tr><td><a href="/ja/nodejs/api/util#class-utiltextdecoder"><code>require(&#39;node:util&#39;).TextDecoder</code></a></td><td>部分的 (基本的なエンコーディングをサポート)</td><td>部分的/フル (OS に依存)</td><td>部分的 (Unicode のみ)</td><td>フル</td></tr><tr><td><a href="https://github.com/tc39/proposal-regexp-unicode-property-escapes" target="_blank" rel="noreferrer"><code>RegExp</code> Unicode プロパティエスケープ</a></td><td>なし (無効な <code>RegExp</code> エラー)</td><td>フル</td><td>フル</td><td>フル</td></tr></tbody></table><p>&quot;(ロケールを認識しない)&quot; という指定は、関数が、もし存在すれば、その関数の <code>Locale</code> が付かないバージョンとまったく同じように動作を実行することを示します。たとえば、<code>none</code> モードでは、<code>Date.prototype.toLocaleString()</code> の操作は <code>Date.prototype.toString()</code> の操作と同一です。</p><h3 id="disable-all-internationalization-features-none" tabindex="-1">すべての国際化機能を無効にする (<code>none</code>) <a class="header-anchor" href="#disable-all-internationalization-features-none" aria-label="Permalink to “すべての国際化機能を無効にする (none)”">​</a></h3><p>このオプションを選択すると、ICUが無効になり、上記の国際化機能のほとんどが、結果として得られる <code>node</code> バイナリで <strong>利用できなくなり</strong> ます。</p><h3 id="build-with-a-pre-installed-icu-system-icu" tabindex="-1">プリインストールされたICUでビルドする (<code>system-icu</code>) <a class="header-anchor" href="#build-with-a-pre-installed-icu-system-icu" aria-label="Permalink to “プリインストールされたICUでビルドする (system-icu)”">​</a></h3><p>Node.jsは、システムに既にインストールされているICUビルドにリンクできます。実際、ほとんどのLinuxディストリビューションにはICUが既にインストールされており、このオプションを使用すると、OS内の他のコンポーネントで使用されているものと同じデータセットを再利用できます。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer"><code>String.prototype.normalize()</code></a> や <a href="/ja/nodejs/api/url#the-whatwg-url-api">WHATWG URLパーサー</a> など、ICUライブラリ自体のみを必要とする機能は、<code>system-icu</code> で完全にサポートされます。<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" target="_blank" rel="noreferrer"><code>Intl.DateTimeFormat</code></a> のように、ICUロケールデータをさらに必要とする機能は、システムのICUデータの完全性に応じて、完全にまたは部分的にサポートされる <em>可能性があり</em> ます。</p><h3 id="embed-a-limited-set-of-icu-data-small-icu" tabindex="-1">ICUデータの限定されたセットを埋め込む (<code>small-icu</code>) <a class="header-anchor" href="#embed-a-limited-set-of-icu-data-small-icu" aria-label="Permalink to “ICUデータの限定されたセットを埋め込む (small-icu)”">​</a></h3><p>このオプションを選択すると、結果として得られるバイナリはICUライブラリに静的にリンクされ、ICUデータのサブセット（通常は英語ロケールのみ）が <code>node</code> 実行可能ファイルに組み込まれます。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer"><code>String.prototype.normalize()</code></a> や <a href="/ja/nodejs/api/url#the-whatwg-url-api">WHATWG URLパーサー</a> など、ICUライブラリ自体のみを必要とする機能は、<code>small-icu</code> で完全にサポートされます。<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" target="_blank" rel="noreferrer"><code>Intl.DateTimeFormat</code></a> のように、ICUロケールデータをさらに必要とする機能は、一般に英語ロケールでのみ機能します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> january</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9e8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> english</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTimeFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;en&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { month: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;long&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> spanish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTimeFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { month: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;long&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(english.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(january));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;January&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spanish.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(january));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// small-icu では、ユーザーのデフォルトロケールに応じて、&quot;M01&quot; または &quot;January&quot; と表示されます。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;enero&quot; と表示されるはずです。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>このモードは、機能とバイナリサイズのバランスを提供します。</p><h4 id="providing-icu-data-at-runtime" tabindex="-1">ランタイムでの ICU データの提供 <a class="header-anchor" href="#providing-icu-data-at-runtime" aria-label="Permalink to “ランタイムでの ICU データの提供”">​</a></h4><p><code>small-icu</code> オプションが使用されている場合でも、追加のロケールデータをランタイムに提供して、JS メソッドがすべての ICU ロケールで動作するようにすることができます。データファイルが <code>/runtime/directory/with/dat/file</code> に保存されていると仮定すると、次のいずれかの方法で ICU で利用できるようにすることができます。</p><ul><li><code>--with-icu-default-data-dir</code> configure オプション: これはデフォルトのデータディレクトリパスのみをバイナリに埋め込みます。実際のデータファイルは、このディレクトリパスからランタイムにロードされます。</li><li><a href="/ja/nodejs/api/cli#node-icu-datafile"><code>NODE_ICU_DATA</code></a> 環境変数:</li><li><a href="/ja/nodejs/api/cli#icu-data-dirfile"><code>--icu-data-dir</code></a> CLI パラメータ:</li></ul><p>複数のものが指定されている場合、<code>--icu-data-dir</code> CLI パラメータが最も優先度が高く、次に <code>NODE_ICU_DATA</code> 環境変数、そして <code>--with-icu-default-data-dir</code> configure オプションとなります。</p><p>ICU は、さまざまなデータ形式を自動的に検索してロードできますが、データは ICU のバージョンに適しており、ファイル名が正しく名付けられている必要があります。データファイルの最も一般的な名前は <code>icudtX[bl].dat</code> で、<code>X</code> は対象の ICU バージョンを示し、<code>b</code> または <code>l</code> はシステムのエンディアンを示します。期待されるデータファイルを指定されたディレクトリから読み取れない場合、Node.js はロードに失敗します。現在の Node.js バージョンに対応するデータファイルの名前は、次のように計算できます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`icudt\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">versions</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">icu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endianness</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.dat\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ICU でサポートされているその他の形式や、ICU データ全般の詳細については、ICU ユーザーガイドの <a href="http://userguide.icu-project.org/icudata" target="_blank" rel="noreferrer">&quot;ICU Data&quot;</a> の記事を参照してください。</p><p><a href="https://www.npmjs.com/package/full-icu" target="_blank" rel="noreferrer">full-icu</a> npm モジュールを使用すると、実行中の <code>node</code> 実行可能ファイルの ICU バージョンを検出し、適切なデータファイルをダウンロードすることで、ICU データのインストールを大幅に簡素化できます。<code>npm i full-icu</code> でモジュールをインストールした後、データファイルは <code>./node_modules/full-icu</code> で利用できるようになります。このパスは、上記の <code>NODE_ICU_DATA</code> または <code>--icu-data-dir</code> のいずれかに渡して、完全な <code>Intl</code> サポートを有効にすることができます。</p><h3 id="embed-the-entire-icu-full-icu" tabindex="-1">ICU全体を埋め込む (<code>full-icu</code>) <a class="header-anchor" href="#embed-the-entire-icu-full-icu" aria-label="Permalink to “ICU全体を埋め込む (full-icu)”">​</a></h3><p>このオプションを指定すると、結果のバイナリは ICU に静的にリンクされ、ICU データ一式が含まれます。このようにして作成されたバイナリには、それ以上の外部依存関係はなく、すべてのロケールをサポートしますが、かなり大きくなる可能性があります。 <code>--with-intl</code> フラグが渡されなかった場合、これがデフォルトの動作です。公式バイナリもこのモードでビルドされています。</p><h2 id="detecting-internationalization-support" tabindex="-1">国際化サポートの検出 <a class="header-anchor" href="#detecting-internationalization-support" aria-label="Permalink to “国際化サポートの検出”">​</a></h2><p>ICU が有効になっているかどうか (<code>system-icu</code>、<code>small-icu</code>、または <code>full-icu</code>) を確認するには、<code>Intl</code> の存在を確認するだけで十分です。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasICU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>または、ICU が有効な場合にのみ定義されるプロパティ <code>process.versions.icu</code> を確認することもできます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasICU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.versions.icu </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>英語以外のロケール（つまり、<code>full-icu</code> または <code>system-icu</code>）のサポートを確認するには、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat" target="_blank" rel="noreferrer"><code>Intl.DateTimeFormat</code></a> が優れた識別要素になります。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hasFullICU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> january</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9e8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> spanish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTimeFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { month: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;long&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> spanish.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(january) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;enero&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>Intl</code> サポートに関するより詳細なテストについては、次のリソースが役立つ場合があります。</p><ul><li><a href="https://github.com/srl295/btest402" target="_blank" rel="noreferrer">btest402</a>: 一般に、<code>Intl</code> サポート付きの Node.js が正しくビルドされているかどうかを確認するために使用されます。</li><li><a href="https://github.com/tc39/test262/tree/HEAD/test/intl402" target="_blank" rel="noreferrer">Test262</a>: ECMAScript の公式準拠テストスイートには、ECMA-402 に特化したセクションが含まれています。</li></ul>`,39)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};