import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Documentação WASI do Node.js","description":"Explore a documentação do Node.js para a Interface de Sistema WebAssembly (WASI), detalhando como usar WASI em ambientes Node.js, incluindo APIs para operações de sistema de arquivos, variáveis de ambiente e mais.","frontmatter":{"title":"Documentação WASI do Node.js","description":"Explore a documentação do Node.js para a Interface de Sistema WebAssembly (WASI), detalhando como usar WASI em ambientes Node.js, incluindo APIs para operações de sistema de arquivos, variáveis de ambiente e mais.","head":[["meta",{"name":"og:title","content":"Documentação WASI do Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Explore a documentação do Node.js para a Interface de Sistema WebAssembly (WASI), detalhando como usar WASI em ambientes Node.js, incluindo APIs para operações de sistema de arquivos, variáveis de ambiente e mais."}],["meta",{"name":"twitter:title","content":"Documentação WASI do Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Explore a documentação do Node.js para a Interface de Sistema WebAssembly (WASI), detalhando como usar WASI em ambientes Node.js, incluindo APIs para operações de sistema de arquivos, variáveis de ambiente e mais."}],["link",{"rel":"canonical","href":"https://idoc.dev/pt/nodejs/api/wasi"}],["meta",{"property":"og:url","content":"https://idoc.dev/pt/nodejs/api/wasi"}]]},"headers":[],"relativePath":"pt/nodejs/api/wasi.md","filePath":"pt/nodejs/api/wasi.md","lastUpdated":1749464498000}`),a={name:`pt/nodejs/api/wasi.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="webassembly-system-interface-wasi" tabindex="-1">Interface do Sistema WebAssembly (WASI) <a class="header-anchor" href="#webassembly-system-interface-wasi" aria-label="Permalink to “Interface do Sistema WebAssembly (WASI)”">​</a></h1><div class="warning custom-block"><p class="custom-block-title">[Estável: 1 - Experimental]</p><p><a href="/pt/nodejs/api/documentation#stability-index">Estável: 1</a> <a href="/pt/nodejs/api/documentation#stability-index">Estabilidade: 1</a> - Experimental</p></div><p><strong>O módulo <code>node:wasi</code> atualmente não fornece as propriedades abrangentes de segurança do sistema de arquivos fornecidas por alguns runtimes WASI. O suporte total para sandboxing seguro do sistema de arquivos pode ou não ser implementado no futuro. Enquanto isso, não confie nele para executar código não confiável.</strong></p><p><strong>Código-fonte:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/wasi.js" target="_blank" rel="noreferrer">lib/wasi.js</a></p><p>A API WASI fornece uma implementação da especificação da <a href="https://wasi.dev/" target="_blank" rel="noreferrer">Interface do Sistema WebAssembly</a>. O WASI oferece aos aplicativos WebAssembly acesso ao sistema operacional subjacente por meio de uma coleção de funções semelhantes ao POSIX.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-17" id="tab-18" checked><label data-title="ESM" for="tab-18">ESM</label><input type="radio" name="group-17" id="tab-19"><label data-title="CJS" for="tab-19">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFile } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { WASI } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:wasi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { argv, env } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preview1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args: argv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preopens: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/some/real/path/that/wasm/can/access&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./demo.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasm, wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImportObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:wasi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preview1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args: argv,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preopens: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/some/real/path/that/wasm/can/access&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wasm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;demo.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wasm, wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImportObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wasi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instance);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></div></div><p>Para executar o exemplo acima, crie um novo arquivo de formato de texto WebAssembly chamado <code>demo.wat</code>:</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>(module</span></span>
<span class="line"><span>    ;; Import the required fd_write WASI function which will write the given io vectors to stdout</span></span>
<span class="line"><span>    ;; The function signature for fd_write is:</span></span>
<span class="line"><span>    ;; (File Descriptor, *iovs, iovs_len, nwritten) -&gt; Returns number of bytes written</span></span>
<span class="line"><span>    (import &quot;wasi_snapshot_preview1&quot; &quot;fd_write&quot; (func $fd_write (param i32 i32 i32 i32) (result i32)))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    (memory 1)</span></span>
<span class="line"><span>    (export &quot;memory&quot; (memory 0))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ;; Write &#39;hello world\\n&#39; to memory at an offset of 8 bytes</span></span>
<span class="line"><span>    ;; Note the trailing newline which is required for the text to appear</span></span>
<span class="line"><span>    (data (i32.const 8) &quot;hello world\\n&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    (func $main (export &quot;_start&quot;)</span></span>
<span class="line"><span>        ;; Creating a new io vector within linear memory</span></span>
<span class="line"><span>        (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - This is a pointer to the start of the &#39;hello world\\n&#39; string</span></span>
<span class="line"><span>        (i32.store (i32.const 4) (i32.const 12))  ;; iov.iov_len - The length of the &#39;hello world\\n&#39; string</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        (call $fd_write</span></span>
<span class="line"><span>            (i32.const 1) ;; file_descriptor - 1 for stdout</span></span>
<span class="line"><span>            (i32.const 0) ;; *iovs - The pointer to the iov array, which is stored at memory location 0</span></span>
<span class="line"><span>            (i32.const 1) ;; iovs_len - We&#39;re printing 1 string stored in an iov - so one.</span></span>
<span class="line"><span>            (i32.const 20) ;; nwritten - A place in memory to store the number of bytes written</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>        drop ;; Discard the number of bytes written from the top of the stack</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>Use o <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a> para compilar <code>.wat</code> para <code>.wasm</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wat2wasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> demo.wat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="security" tabindex="-1">Segurança <a class="header-anchor" href="#security" aria-label="Permalink to “Segurança”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[Histórico]</p><table tabindex="0"><thead><tr><th>Versão</th><th>Mudanças</th></tr></thead><tbody><tr><td>v21.2.0, v20.11.0</td><td>Esclarece as propriedades de segurança do WASI.</td></tr><tr><td>v21.2.0, v20.11.0</td><td>Adicionado em: v21.2.0, v20.11.0</td></tr></tbody></table></div><p>O WASI fornece um modelo baseado em capabilities através do qual os aplicativos recebem seus próprios <code>env</code>, <code>preopens</code>, <code>stdin</code>, <code>stdout</code>, <code>stderr</code> e capabilities de <code>exit</code> personalizados.</p><p><strong>O modelo de ameaças atual do Node.js não fornece sandboxing seguro como está presente em alguns runtimes do WASI.</strong></p><p>Embora os recursos de capabilities sejam suportados, eles não formam um modelo de segurança no Node.js. Por exemplo, o sandboxing do sistema de arquivos pode ser escapado com várias técnicas. O projeto está explorando se essas garantias de segurança poderiam ser adicionadas no futuro.</p><h2 id="class-wasi" tabindex="-1">Classe: <code>WASI</code> <a class="header-anchor" href="#class-wasi" aria-label="Permalink to “Classe: WASI”">​</a></h2><p><strong>Adicionado em: v13.3.0, v12.16.0</strong></p><p>A classe <code>WASI</code> fornece a API de chamada do sistema WASI e métodos de conveniência adicionais para trabalhar com aplicativos baseados em WASI. Cada instância <code>WASI</code> representa um ambiente distinto.</p><h3 id="new-wasioptions" tabindex="-1"><code>new WASI([options])</code> <a class="header-anchor" href="#new-wasioptions" aria-label="Permalink to “new WASI([options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[Histórico]</p><table tabindex="0"><thead><tr><th>Versão</th><th>Mudanças</th></tr></thead><tbody><tr><td>v20.1.0</td><td>valor padrão de returnOnExit alterado para true.</td></tr><tr><td>v20.0.0</td><td>A opção version agora é obrigatória e não tem valor padrão.</td></tr><tr><td>v19.8.0</td><td>campo version adicionado às options.</td></tr><tr><td>v13.3.0, v12.16.0</td><td>Adicionado em: v13.3.0, v12.16.0</td></tr></tbody></table></div><ul><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Objeto&gt;</a><ul><li><code>args</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">&lt;Array&gt;</a> Um array de strings que o aplicativo WebAssembly verá como argumentos de linha de comando. O primeiro argumento é o caminho virtual para o próprio comando WASI. <strong>Padrão:</strong> <code>[]</code>.</li><li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Objeto&gt;</a> Um objeto semelhante a <code>process.env</code> que o aplicativo WebAssembly verá como seu ambiente. <strong>Padrão:</strong> <code>{}</code>.</li><li><code>preopens</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Objeto&gt;</a> Este objeto representa a estrutura de diretório local do aplicativo WebAssembly. As chaves de string de <code>preopens</code> são tratadas como diretórios dentro do sistema de arquivos. Os valores correspondentes em <code>preopens</code> são os caminhos reais para esses diretórios na máquina host.</li><li><code>returnOnExit</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> Por padrão, quando os aplicativos WASI chamam <code>__wasi_proc_exit()</code>, <code>wasi.start()</code> retornará com o código de saída especificado, em vez de encerrar o processo. Definir esta opção como <code>false</code> fará com que o processo do Node.js seja encerrado com o código de saída especificado. <strong>Padrão:</strong> <code>true</code>.</li><li><code>stdin</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> O descritor de arquivo usado como entrada padrão no aplicativo WebAssembly. <strong>Padrão:</strong> <code>0</code>.</li><li><code>stdout</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> O descritor de arquivo usado como saída padrão no aplicativo WebAssembly. <strong>Padrão:</strong> <code>1</code>.</li><li><code>stderr</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> O descritor de arquivo usado como erro padrão no aplicativo WebAssembly. <strong>Padrão:</strong> <code>2</code>.</li><li><code>version</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> A versão do WASI solicitada. Atualmente, as únicas versões suportadas são <code>unstable</code> e <code>preview1</code>. Esta opção é obrigatória.</li></ul></li></ul><h3 id="wasigetimportobject" tabindex="-1"><code>wasi.getImportObject()</code> <a class="header-anchor" href="#wasigetimportobject" aria-label="Permalink to “wasi.getImportObject()”">​</a></h3><p><strong>Adicionado em: v19.8.0</strong></p><p>Retorna um objeto de importação que pode ser passado para <code>WebAssembly.instantiate()</code> se nenhuma outra importação WASM for necessária além daquelas fornecidas pelo WASI.</p><p>Se a versão <code>unstable</code> foi passada para o construtor, ele retornará:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi_unstable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi.wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Se a versão <code>preview1</code> foi passada para o construtor ou nenhuma versão foi especificada, ele retornará:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi_snapshot_preview1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">wasi.wasiImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="wasistartinstance" tabindex="-1"><code>wasi.start(instance)</code> <a class="header-anchor" href="#wasistartinstance" aria-label="Permalink to “wasi.start(instance)”">​</a></h3><p><strong>Adicionado em: v13.3.0, v12.16.0</strong></p><ul><li><code>instance</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer">&lt;WebAssembly.Instance&gt;</a></li></ul><p>Tenta iniciar a execução de <code>instance</code> como um comando WASI invocando sua exportação <code>_start()</code>. Se <code>instance</code> não contiver uma exportação <code>_start()</code>, ou se <code>instance</code> contiver uma exportação <code>_initialize()</code>, então uma exceção é lançada.</p><p><code>start()</code> requer que <code>instance</code> exporte um <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory" target="_blank" rel="noreferrer"><code>WebAssembly.Memory</code></a> nomeado <code>memory</code>. Se <code>instance</code> não tiver uma exportação <code>memory</code>, uma exceção é lançada.</p><p>Se <code>start()</code> for chamado mais de uma vez, uma exceção é lançada.</p><h3 id="wasiinitializeinstance" tabindex="-1"><code>wasi.initialize(instance)</code> <a class="header-anchor" href="#wasiinitializeinstance" aria-label="Permalink to “wasi.initialize(instance)”">​</a></h3><p><strong>Adicionado em: v14.6.0, v12.19.0</strong></p><ul><li><code>instance</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer">&lt;WebAssembly.Instance&gt;</a></li></ul><p>Tenta inicializar <code>instance</code> como um reator WASI invocando sua exportação <code>_initialize()</code>, se estiver presente. Se <code>instance</code> contiver uma exportação <code>_start()</code>, então uma exceção é lançada.</p><p><code>initialize()</code> requer que <code>instance</code> exporte um <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory" target="_blank" rel="noreferrer"><code>WebAssembly.Memory</code></a> nomeado <code>memory</code>. Se <code>instance</code> não tiver uma exportação <code>memory</code>, uma exceção é lançada.</p><p>Se <code>initialize()</code> for chamado mais de uma vez, uma exceção é lançada.</p><h3 id="wasiwasiimport" tabindex="-1"><code>wasi.wasiImport</code> <a class="header-anchor" href="#wasiwasiimport" aria-label="Permalink to “wasi.wasiImport”">​</a></h3><p><strong>Adicionado em: v13.3.0, v12.16.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><code>wasiImport</code> é um objeto que implementa a API de chamada de sistema WASI. Este objeto deve ser passado como a importação <code>wasi_snapshot_preview1</code> durante a instanciação de um <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance" target="_blank" rel="noreferrer"><code>WebAssembly.Instance</code></a>.</p>`,44)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};