import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js CLI オプション","description":"このページでは、Node.jsで利用可能なコマンドラインオプションについての包括的なガイドを提供し、実行環境の設定、デバッグの管理、実行動作の制御に使用するさまざまなフラグや引数の使い方を詳述しています。","frontmatter":{"title":"Node.js CLI オプション","description":"このページでは、Node.jsで利用可能なコマンドラインオプションについての包括的なガイドを提供し、実行環境の設定、デバッグの管理、実行動作の制御に使用するさまざまなフラグや引数の使い方を詳述しています。","head":[["meta",{"name":"og:title","content":"Node.js CLI オプション | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"このページでは、Node.jsで利用可能なコマンドラインオプションについての包括的なガイドを提供し、実行環境の設定、デバッグの管理、実行動作の制御に使用するさまざまなフラグや引数の使い方を詳述しています。"}],["meta",{"name":"twitter:title","content":"Node.js CLI オプション | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"このページでは、Node.jsで利用可能なコマンドラインオプションについての包括的なガイドを提供し、実行環境の設定、デバッグの管理、実行動作の制御に使用するさまざまなフラグや引数の使い方を詳述しています。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/cli"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/cli"}]]},"headers":[],"relativePath":"ja/nodejs/api/cli.md","filePath":"ja/nodejs/api/cli.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/api/cli.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="command-line-api" tabindex="-1">コマンドライン API <a class="header-anchor" href="#command-line-api" aria-label="Permalink to “コマンドライン API”">​</a></h1><p>Node.js には様々な CLI オプションが付属しています。これらのオプションは、組み込みのデバッグ機能、スクリプトを実行する複数の方法、およびその他の役立つランタイムオプションを公開します。</p><p>このドキュメントをターミナルでマニュアルページとして表示するには、<code>man node</code> を実行してください。</p><h2 id="synopsis" tabindex="-1">概要 <a class="header-anchor" href="#synopsis" aria-label="Permalink to “概要”">​</a></h2><p><code>node [options] [V8 options] [\\&lt;program-entry-point\\&gt; | -e &quot;script&quot; | -] [--] [arguments]</code></p><p><code>node inspect [\\&lt;program-entry-point\\&gt; | -e &quot;script&quot; | \\&lt;host\\&gt;:\\&lt;port\\&gt;] …</code></p><p><code>node --v8-options</code></p><p>引数なしで実行すると、<a href="/ja/nodejs/api/repl">REPL</a> が起動します。</p><p><code>node inspect</code> の詳細については、<a href="/ja/nodejs/api/debugger">デバッガ</a> のドキュメントを参照してください。</p><h2 id="program-entry-point" tabindex="-1">プログラムエントリポイント <a class="header-anchor" href="#program-entry-point" aria-label="Permalink to “プログラムエントリポイント”">​</a></h2><p>プログラムエントリポイントは、仕様のような文字列です。文字列が絶対パスでない場合、現在の作業ディレクトリからの相対パスとして解決されます。そのパスは、<a href="/ja/nodejs/api/modules">CommonJS</a> モジュールローダーによって解決されます。対応するファイルが見つからない場合、エラーがスローされます。</p><p>ファイルが見つかった場合、そのパスは、次のいずれかの条件の下で、<a href="/ja/nodejs/api/packages#modules-loaders">ES モジュールローダー</a>に渡されます。</p><ul><li>プログラムが、<code>--import</code> などの ECMAScript モジュールローダーでエントリポイントを強制的にロードするコマンドラインフラグで開始された。</li><li>ファイルに <code>.mjs</code> 拡張子が付いている。</li><li>ファイルに <code>.cjs</code> 拡張子が付いておらず、最も近い親の <code>package.json</code> ファイルに、値が <code>&quot;module&quot;</code> のトップレベルの <a href="/ja/nodejs/api/packages#type"><code>&quot;type&quot;</code></a> フィールドが含まれている。</li></ul><p>それ以外の場合、ファイルは CommonJS モジュールローダーを使用してロードされます。詳細については、<a href="/ja/nodejs/api/packages#modules-loaders">モジュールローダー</a>を参照してください。</p><h3 id="ecmascript-modules-loader-entry-point-caveat" tabindex="-1">ECMAScript モジュールローダーのエントリポイントの注意点 <a class="header-anchor" href="#ecmascript-modules-loader-entry-point-caveat" aria-label="Permalink to “ECMAScript モジュールローダーのエントリポイントの注意点”">​</a></h3><p>ロード時、<a href="/ja/nodejs/api/packages#modules-loaders">ES モジュールローダー</a>はプログラムエントリポイントをロードしますが、<code>node</code> コマンドは、<code>.js</code>、<code>.mjs</code>、または <code>.cjs</code> 拡張子を持つファイル、および <a href="/ja/nodejs/api/cli#experimental-wasm-modules"><code>--experimental-wasm-modules</code></a> が有効になっている場合は <code>.wasm</code> 拡張子を持つファイルのみを入力として受け入れます。</p><h2 id="options" tabindex="-1">オプション <a class="header-anchor" href="#options" aria-label="Permalink to “オプション”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v10.12.0</td><td>Node.js オプションでも、V8 オプションに加えて、ダッシュの代わりにアンダースコアを使用できるようになりました。</td></tr></tbody></table></div><p>V8 オプションを含むすべてのオプションで、単語はダッシュ (<code>-</code>) とアンダースコア (<code>_</code>) の両方で区切ることができます。たとえば、<code>--pending-deprecation</code> は <code>--pending_deprecation</code> と同等です。</p><p><code>--max-http-header-size</code> などの単一の値を取るオプションが複数回渡された場合、最後に渡された値が使用されます。コマンドラインからのオプションは、<a href="/ja/nodejs/api/cli#node-optionsoptions"><code>NODE_OPTIONS</code></a> 環境変数を介して渡されたオプションよりも優先されます。</p><h3 id="-" tabindex="-1"><code>-</code> <a class="header-anchor" href="#-" aria-label="Permalink to “-”">​</a></h3><p><strong>追加:</strong> v8.0.0</p><p>stdin のエイリアス。 他のコマンドラインユーティリティでの <code>-</code> の使用と同様に、スクリプトが stdin から読み込まれ、残りのオプションがそのスクリプトに渡されることを意味します。</p><h3 id="--" tabindex="-1"><code>--</code> <a class="header-anchor" href="#--" aria-label="Permalink to “--”">​</a></h3><p><strong>追加:</strong> v6.11.0</p><p>Node.js オプションの終わりを示します。 残りの引数をスクリプトに渡します。 これより前にスクリプトファイル名または eval/print スクリプトが指定されていない場合、次の引数がスクリプトファイル名として使用されます。</p><h3 id="--abort-on-uncaught-exception" tabindex="-1"><code>--abort-on-uncaught-exception</code> <a class="header-anchor" href="#--abort-on-uncaught-exception" aria-label="Permalink to “--abort-on-uncaught-exception”">​</a></h3><p><strong>追加:</strong> v0.10.8</p><p>終了する代わりにアボートすると、デバッガ（<code>lldb</code>、<code>gdb</code>、<code>mdb</code>など）を使用した事後分析のためにコアファイルが生成されます。</p><p>このフラグが渡された場合でも、<a href="/ja/nodejs/api/process#processsetuncaughtexceptioncapturecallbackfn"><code>process.setUncaughtExceptionCaptureCallback()</code></a>（およびそれを使用する <code>node:domain</code> モジュールの使用を通じて）を通じて、アボートしないように動作を設定できます。</p><h3 id="--allow-addons" tabindex="-1"><code>--allow-addons</code> <a class="header-anchor" href="#--allow-addons" aria-label="Permalink to “--allow-addons”">​</a></h3><p><strong>追加:</strong> v21.6.0, v20.12.0</p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a>.1 - 活発な開発</p></div><p><a href="/ja/nodejs/api/permissions#permission-model">Permission Model</a>を使用する場合、プロセスはデフォルトでネイティブアドオンを使用できません。 これを試みると、Node.js の起動時にユーザーが明示的に <code>--allow-addons</code> フラグを渡さない限り、<code>ERR_DLOPEN_DISABLED</code> がスローされます。</p><p>例:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ネイティブアドオンを require しようとします</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nodejs-addon-example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permission</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-fs-read=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node:internal/modules/cjs/loader:1319</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> process.dlopen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> path.toNamespacedPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                 ^</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Cannot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> addon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> because</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> loading</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> addons</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disabled.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._extensions..node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1319:18)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module.load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1091:32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:938:12)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module.require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1115:19)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/helpers:130:18)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Object.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">anonymou</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (/home/index.js:1:15)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1233:14)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._extensions..js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1287:10)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module.load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1091:32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:938:12) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  code:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_DLOPEN_DISABLED&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="--allow-child-process" tabindex="-1"><code>--allow-child-process</code> <a class="header-anchor" href="#--allow-child-process" aria-label="Permalink to “--allow-child-process”">​</a></h3><p><strong>Added in: v20.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a>.1 - 活発な開発</p></div><p><a href="/ja/nodejs/api/permissions#permission-model">Permission Model</a>を使用する場合、プロセスはデフォルトでは子プロセスを生成できません。Node.jsの起動時にユーザーが明示的に<code>--allow-child-process</code>フラグを渡さない限り、子プロセスを生成しようとすると<code>ERR_ACCESS_DENIED</code>がスローされます。</p><p>例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> childProcess</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:child_process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// パーミッションを回避しようとします</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">childProcess.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spawn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-e&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;require(&quot;fs&quot;).writeFileSync(&quot;/new-file&quot;, &quot;example&quot;)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permission</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-fs-read=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node:internal/child_process:388</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> err</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this._handle.spawn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                           ^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Access</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> has</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restricted</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ChildProcess.spawn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/child_process:388:28)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Object.spawn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:child_process:723:9)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Object.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">anonymou</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (/home/index.js:3:14)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1120:14)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._extensions..js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:1174:10)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module.load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:998:32)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Module._load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/cjs/loader:839:12)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Function.executeUserEntryPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [as </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">runMain]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/modules/run_main:81:12)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:internal/main/run_main_module:17:47</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  code:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_ACCESS_DENIED&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  permission:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ChildProcess&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="--allow-fs-read" tabindex="-1"><code>--allow-fs-read</code> <a class="header-anchor" href="#--allow-fs-read" aria-label="Permalink to “--allow-fs-read”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v23.5.0</td><td>Permission Modelと--allow-fsフラグが安定版になりました。</td></tr><tr><td>v20.7.0</td><td>カンマ（<code>,</code>）で区切られたパスは許可されなくなりました。</td></tr><tr><td>v20.0.0</td><td>Added in: v20.0.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 2</a> - 安定版。</p></div><p>このフラグは、<a href="/ja/nodejs/api/permissions#permission-model">Permission Model</a>を使用して、ファイルシステムの読み取りパーミッションを設定します。</p><p><code>--allow-fs-read</code>フラグの有効な引数は次のとおりです。</p><ul><li><code>*</code> - すべての<code>FileSystemRead</code>操作を許可します。</li><li>複数の<code>--allow-fs-read</code>フラグを使用すると、複数のパスを許可できます。例：<code>--allow-fs-read=/folder1/ --allow-fs-read=/folder1/</code></li></ul><p>例は、<a href="/ja/nodejs/api/permissions#file-system-permissions">File System Permissions</a>ドキュメントにあります。</p><p>イニシャライザモジュールも許可する必要があります。次の例を考えてみてください。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permission</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Access</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> has</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restricted</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:internal/main/run_main_module:23:47</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  code:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_ACCESS_DENIED&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  permission:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;FileSystemRead&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resource:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/Users/rafaelgss/repos/os/node/index.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>プロセスは<code>index.js</code>モジュールにアクセスする必要があります。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permission</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-fs-read=/path/to/index.js</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="--allow-fs-write" tabindex="-1"><code>--allow-fs-write</code> <a class="header-anchor" href="#--allow-fs-write" aria-label="Permalink to “--allow-fs-write”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v23.5.0</td><td>パーミッションモデルと --allow-fs フラグが安定版になりました。</td></tr><tr><td>v20.7.0</td><td>カンマ (<code>,</code>) で区切られたパスは許可されなくなりました。</td></tr><tr><td>v20.0.0</td><td>v20.0.0 で追加されました</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定。</p></div><p>このフラグは、<a href="/ja/nodejs/api/permissions#permission-model">パーミッションモデル</a>を使用してファイルシステムの書き込みパーミッションを構成します。</p><p><code>--allow-fs-write</code> フラグの有効な引数は次のとおりです。</p><ul><li><code>*</code> - すべての <code>FileSystemWrite</code> 操作を許可します。</li><li>複数の <code>--allow-fs-write</code> フラグを使用すると、複数のパスを許可できます。 例：<code>--allow-fs-write=/folder1/ --allow-fs-write=/folder1/</code></li></ul><p>カンマ (<code>,</code>) で区切られたパスは許可されなくなりました。 カンマ付きの単一のフラグを渡すと、警告が表示されます。</p><p>例は、<a href="/ja/nodejs/api/permissions#file-system-permissions">ファイルシステムパーミッション</a>のドキュメントにあります。</p><h3 id="--allow-wasi" tabindex="-1"><code>--allow-wasi</code> <a class="header-anchor" href="#--allow-wasi" aria-label="Permalink to “--allow-wasi”">​</a></h3><p><strong>追加: v22.3.0, v20.16.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a>.1 - 活発な開発</p></div><p><a href="/ja/nodejs/api/permissions#permission-model">パーミッションモデル</a>を使用する場合、プロセスはデフォルトで WASI インスタンスを作成できません。 セキュリティ上の理由から、ユーザーがメインの Node.js プロセスで明示的にフラグ <code>--allow-wasi</code> を渡さない限り、呼び出しは <code>ERR_ACCESS_DENIED</code> をスローします。</p><p>例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:wasi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// パーミッションをバイパスしようとする</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WASI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;preview1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ファイルシステム全体をマウントしようとする</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preopens: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permission</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-fs-read=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Access</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> has</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restricted</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:internal/main/run_main_module:30:49</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  code:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_ACCESS_DENIED&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  permission:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;WASI&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="--allow-worker" tabindex="-1"><code>--allow-worker</code> <a class="header-anchor" href="#--allow-worker" aria-label="Permalink to “--allow-worker”">​</a></h3><p><strong>追加: v20.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a>.1 - 活発な開発</p></div><p><a href="/ja/nodejs/api/permissions#permission-model">パーミッションモデル</a>を使用する場合、プロセスはデフォルトで worker スレッドを作成できません。 セキュリティ上の理由から、ユーザーがメインの Node.js プロセスで明示的にフラグ <code>--allow-worker</code> を渡さない限り、呼び出しは <code>ERR_ACCESS_DENIED</code> をスローします。</p><p>例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:worker_threads&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// パーミッションをバイパスしようとする</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permission</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --allow-fs-read=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Access</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> has</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> been</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restricted</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:internal/main/run_main_module:17:47</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  code:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ERR_ACCESS_DENIED&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  permission:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;WorkerThreads&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="--build-snapshot" tabindex="-1"><code>--build-snapshot</code> <a class="header-anchor" href="#--build-snapshot" aria-label="Permalink to “--build-snapshot”">​</a></h3><p><strong>追加:</strong> v18.8.0</p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><p>プロセスが終了するときにスナップショット blob を生成してディスクに書き込みます。これは後で <code>--snapshot-blob</code> でロードできます。</p><p>スナップショットを構築するときに、<code>--snapshot-blob</code> が指定されていない場合、生成された blob はデフォルトで現在の作業ディレクトリの <code>snapshot.blob</code> に書き込まれます。それ以外の場合は、<code>--snapshot-blob</code> で指定されたパスに書き込まれます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;globalThis.foo = &#39;I am from the snapshot&#39;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># アプリケーションを初期化し、その状態を snapshot.blob にスナップショットするために snapshot.js を実行します。 {#run-snapshotjs-to-initialize-the-application-and-snapshot-the}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --snapshot-blob</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot.blob</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build-snapshot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;console.log(globalThis.foo)&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成されたスナップショットをロードし、index.js からアプリケーションを起動します。 {#state-of-it-into-snapshotblob}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --snapshot-blob</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot.blob</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> am</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><a href="/ja/nodejs/api/v8#startup-snapshot-api"><code>v8.startupSnapshot</code> API</a> を使用して、スナップショットの構築時にエントリポイントを指定できます。これにより、デシリアライズ時に追加のエントリスクリプトは不要になります。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;require(&#39;v8&#39;).startupSnapshot.setDeserializeMainFunction(() =&gt; console.log(&#39;I am from the snapshot&#39;))&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --snapshot-blob</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot.blob</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build-snapshot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --snapshot-blob</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot.blob</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> am</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>詳細については、<a href="/ja/nodejs/api/v8#startup-snapshot-api"><code>v8.startupSnapshot</code> API</a> のドキュメントを確認してください。</p><p>現在、実行時スナップショットのサポートは試験的です。</p><h3 id="load-the-generated-snapshot-and-start-the-application-from-indexjs" tabindex="-1"><code>--build-snapshot-config</code> <a class="header-anchor" href="#load-the-generated-snapshot-and-start-the-application-from-indexjs" aria-label="Permalink to “--build-snapshot-config”">​</a></h3><p><strong>追加:</strong> v21.6.0, v20.12.0</p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><p>スナップショットの作成動作を構成する JSON 構成ファイルへのパスを指定します。</p><p>現在、次のオプションがサポートされています。</p><ul><li><code>builder</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 必須。<a href="/ja/nodejs/api/cli#build-snapshot"><code>--build-snapshot</code></a> がメインスクリプト名として <code>builder</code> で渡された場合と同様に、スナップショットを構築する前に実行されるスクリプトの名前を提供します。</li><li><code>withoutCodeCache</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> オプション。コードキャッシュを含めると、スナップショットに含まれる関数のコンパイルに費やす時間を短縮できますが、スナップショットのサイズが大きくなり、スナップショットの移植性が損なわれる可能性があります。</li></ul><p>このフラグを使用する場合、コマンドラインで提供される追加のスクリプトファイルは実行されず、代わりに通常のコマンドライン引数として解釈されます。</p><h3 id="--build-snapshot-config" tabindex="-1"><code>-c</code>, <code>--check</code> <a class="header-anchor" href="#--build-snapshot-config" aria-label="Permalink to “-c, --check”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v10.0.0</td><td><code>--require</code>オプションがファイルのチェック時にサポートされるようになりました。</td></tr><tr><td>v5.0.0, v4.2.0</td><td>Added in: v5.0.0, v4.2.0</td></tr></tbody></table></div><p>実行せずにスクリプトの構文をチェックします。</p><h3 id="-c---check" tabindex="-1"><code>--completion-bash</code> <a class="header-anchor" href="#-c---check" aria-label="Permalink to “--completion-bash”">​</a></h3><p><strong>Added in: v10.12.0</strong></p><p>Node.js のソース可能な bash 補完スクリプトを出力します。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --completion-bash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node_bash_completion</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node_bash_completion</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="--completion-bash" tabindex="-1"><code>-C condition</code>, <code>--conditions=condition</code> <a class="header-anchor" href="#--completion-bash" aria-label="Permalink to “-C condition, --conditions=condition”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.9.0, v20.18.0</td><td>このフラグは実験的ではなくなりました。</td></tr><tr><td>v14.9.0, v12.19.0</td><td>Added in: v14.9.0, v12.19.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定</p></div><p>カスタムの<a href="/ja/nodejs/api/packages#conditional-exports">条件付きエクスポート</a>解決条件を提供します。</p><p>任意の数のカスタム文字列条件名を許可します。</p><p><code>&quot;node&quot;</code>、<code>&quot;default&quot;</code>、<code>&quot;import&quot;</code>、<code>&quot;require&quot;</code>のデフォルトの Node.js 条件は、常に定義どおりに適用されます。</p><p>たとえば、「development」解決でモジュールを実行するには:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> development</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="-c-condition---conditions=condition" tabindex="-1"><code>--cpu-prof</code> <a class="header-anchor" href="#-c-condition---conditions=condition" aria-label="Permalink to “--cpu-prof”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.4.0, v20.16.0</td><td><code>--cpu-prof</code>フラグが安定版になりました。</td></tr><tr><td>v12.0.0</td><td>Added in: v12.0.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定</p></div><p>起動時に V8 CPU プロファイラを開始し、終了前に CPU プロファイルをディスクに書き込みます。</p><p><code>--cpu-prof-dir</code>が指定されていない場合、生成されたプロファイルは現在の作業ディレクトリに配置されます。</p><p><code>--cpu-prof-name</code>が指定されていない場合、生成されたプロファイルの名前は <code>CPU.\${yyyymmdd}.\${hhmmss}.\${pid}.\${tid}.\${seq}.cpuprofile</code> になります。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cpu-prof</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.cpuprofile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CPU.20190409.202950.15293.0.0.cpuprofile</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="--cpu-prof" tabindex="-1"><code>--cpu-prof-dir</code> <a class="header-anchor" href="#--cpu-prof" aria-label="Permalink to “--cpu-prof-dir”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.4.0, v20.16.0</td><td><code>--cpu-prof</code>フラグが安定版になりました。</td></tr><tr><td>v12.0.0</td><td>Added in: v12.0.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定</p></div><p><code>--cpu-prof</code>によって生成された CPU プロファイルを配置するディレクトリを指定します。</p><p>デフォルト値は、<a href="/ja/nodejs/api/cli#diagnostic-dirdirectory"><code>--diagnostic-dir</code></a> コマンドラインオプションによって制御されます。</p><h3 id="--cpu-prof-dir" tabindex="-1"><code>--cpu-prof-interval</code> <a class="header-anchor" href="#--cpu-prof-dir" aria-label="Permalink to “--cpu-prof-interval”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.4.0, v20.16.0</td><td><code>--cpu-prof</code> フラグが安定版になりました。</td></tr><tr><td>v12.2.0</td><td>追加: v12.2.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> - 安定</p></div><p><code>--cpu-prof</code> で生成される CPU プロファイルのサンプリング間隔をマイクロ秒単位で指定します。 デフォルトは 1000 マイクロ秒です。</p><h3 id="--cpu-prof-interval" tabindex="-1"><code>--cpu-prof-name</code> <a class="header-anchor" href="#--cpu-prof-interval" aria-label="Permalink to “--cpu-prof-name”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.4.0, v20.16.0</td><td><code>--cpu-prof</code> フラグが安定版になりました。</td></tr><tr><td>v12.0.0</td><td>追加: v12.0.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> - 安定</p></div><p><code>--cpu-prof</code> で生成される CPU プロファイルの名前を指定します。</p><h3 id="--cpu-prof-name" tabindex="-1"><code>--diagnostic-dir=directory</code> <a class="header-anchor" href="#--cpu-prof-name" aria-label="Permalink to “--diagnostic-dir=directory”">​</a></h3><p>すべての診断出力ファイルを書き込むディレクトリを設定します。 デフォルトは現在の作業ディレクトリです。</p><p>次のデフォルトの出力ディレクトリに影響します。</p><ul><li><a href="/ja/nodejs/api/cli#cpu-prof-dir"><code>--cpu-prof-dir</code></a></li><li><a href="/ja/nodejs/api/cli#heap-prof-dir"><code>--heap-prof-dir</code></a></li><li><a href="/ja/nodejs/api/cli#redirect-warningsfile"><code>--redirect-warnings</code></a></li></ul><h3 id="--diagnostic-dir=directory" tabindex="-1"><code>--disable-proto=mode</code> <a class="header-anchor" href="#--diagnostic-dir=directory" aria-label="Permalink to “--disable-proto=mode”">​</a></h3><p><strong>追加: v13.12.0, v12.17.0</strong></p><p><code>Object.prototype.__proto__</code> プロパティを無効にします。 <code>mode</code> が <code>delete</code> の場合、プロパティは完全に削除されます。 <code>mode</code> が <code>throw</code> の場合、プロパティへのアクセスはコード <code>ERR_PROTO_ACCESS</code> で例外をスローします。</p><h3 id="--disable-proto=mode" tabindex="-1"><code>--disable-warning=code-or-type</code> <a class="header-anchor" href="#--disable-proto=mode" aria-label="Permalink to “--disable-warning=code-or-type”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> - 活発な開発</p></div><p><strong>追加: v21.3.0, v20.11.0</strong></p><p><code>code</code> または <code>type</code> で特定のプロセスの警告を無効にします。</p><p><a href="/ja/nodejs/api/process#processemitwarningwarning-options"><code>process.emitWarning()</code></a> から出力される警告には、<code>code</code> および <code>type</code> が含まれている場合があります。 このオプションは、一致する <code>code</code> または <code>type</code> を持つ警告を出力しません。</p><p><a href="/ja/nodejs/api/deprecations#list-of-deprecated-apis">非推奨の警告</a>のリスト。</p><p>Node.js コアの警告の種類は、<code>DeprecationWarning</code> および <code>ExperimentalWarning</code> です。</p><p>たとえば、次のスクリプトは、<code>node --disable-warning=DEP0025</code> で実行すると、<a href="/ja/nodejs/api/deprecations#dep0025-requirenodesys">DEP0025 <code>require(&#39;node:sys&#39;)</code></a> を出力しません。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-754" id="tab-755" checked><label data-title="ESM" for="tab-755">ESM</label><input type="radio" name="group-754" id="tab-756"><label data-title="CJS" for="tab-756">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:sys&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:sys&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><p>たとえば、次のスクリプトは、<a href="/ja/nodejs/api/deprecations#dep0025-requirenodesys">DEP0025 <code>require(&#39;node:sys&#39;)</code></a> を出力しますが、<code>node --disable-warning=ExperimentalWarning</code> で実行すると、(&lt;=v21 の <a href="/ja/nodejs/api/vm#vmmeasurememoryoptions">ExperimentalWarning: <code>vm.measureMemory</code> は実験的な機能です</a> など) 実験的な警告は出力しません。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-761" id="tab-762" checked><label data-title="ESM" for="tab-762">ESM</label><input type="radio" name="group-761" id="tab-763"><label data-title="CJS" for="tab-763">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:sys&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:vm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">measureMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:sys&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:vm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">measureMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div></div><h3 id="--disable-warning=code-or-type" tabindex="-1"><code>--disable-wasm-trap-handler</code> <a class="header-anchor" href="#--disable-warning=code-or-type" aria-label="Permalink to “--disable-wasm-trap-handler”">​</a></h3><p><strong>追加: v22.2.0, v20.15.0</strong></p><p>デフォルトでは、Node.js はトラップハンドラーベースの WebAssembly バウンドチェックを有効にします。その結果、V8 は WebAssembly からコンパイルされたコードにインラインバウンドチェックを挿入する必要がなくなり、WebAssembly の実行が大幅に高速化される可能性があります。ただし、この最適化には大きな仮想メモリケージ（現在は 10GB）の割り当てが必要です。システム構成またはハードウェアの制限により、Node.js プロセスが十分に大きな仮想メモリアドレス空間にアクセスできない場合、ユーザーはこの仮想メモリケージで割り当てを伴う WebAssembly を実行できなくなり、メモリ不足エラーが発生します。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ulimit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;new WebAssembly.Memory({ initial: 10, maximum: 100 });&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[eval]:1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WebAssembly.Memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ initial: 10, maximum: 100 });</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">^</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RangeError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WebAssembly.Memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> could</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allocate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> memory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [eval]:1:1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runScriptInThisContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/vm:209:10)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:internal/process/execution:118:14</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [eval]-wrapper:6:24</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/process/execution:101:62)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> evalScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node:internal/process/execution:136:3)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:internal/main/eval_string:49:3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>--disable-wasm-trap-handler</code> はこの最適化を無効にするため、Node.js プロセスで利用可能な仮想メモリアドレス空間が V8 WebAssembly メモリケージに必要なものよりも小さい場合でも、ユーザーは少なくとも（最適ではないパフォーマンスで）WebAssembly を実行できます。</p><h3 id="--disable-wasm-trap-handler" tabindex="-1"><code>--disallow-code-generation-from-strings</code> <a class="header-anchor" href="#--disable-wasm-trap-handler" aria-label="Permalink to “--disallow-code-generation-from-strings”">​</a></h3><p><strong>追加: v9.8.0</strong></p><p>文字列からコードを生成する <code>eval</code> や <code>new Function</code> のような組み込み言語機能を例外をスローするようにします。これは Node.js <code>node:vm</code> モジュールには影響しません。</p><h3 id="--disallow-code-generation-from-strings" tabindex="-1"><code>--dns-result-order=order</code> <a class="header-anchor" href="#--disallow-code-generation-from-strings" aria-label="Permalink to “--dns-result-order=order”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v22.1.0, v20.13.0</td><td><code>ipv6first</code> がサポートされるようになりました。</td></tr><tr><td>v17.0.0</td><td>デフォルト値を <code>verbatim</code> に変更しました。</td></tr><tr><td>v16.4.0, v14.18.0</td><td>追加: v16.4.0, v14.18.0</td></tr></tbody></table></div><p><a href="/ja/nodejs/api/dns#dnslookuphostname-options-callback"><code>dns.lookup()</code></a> と <a href="/ja/nodejs/api/dns#dnspromiseslookuphostname-options"><code>dnsPromises.lookup()</code></a> で <code>order</code> のデフォルト値を設定します。値は次のいずれかになります。</p><ul><li><code>ipv4first</code>: デフォルトの <code>order</code> を <code>ipv4first</code> に設定します。</li><li><code>ipv6first</code>: デフォルトの <code>order</code> を <code>ipv6first</code> に設定します。</li><li><code>verbatim</code>: デフォルトの <code>order</code> を <code>verbatim</code> に設定します。</li></ul><p>デフォルトは <code>verbatim</code> であり、<a href="/ja/nodejs/api/dns#dnssetdefaultresultorderorder"><code>dns.setDefaultResultOrder()</code></a> は <code>--dns-result-order</code> よりも優先度が高くなります。</p><h3 id="--dns-result-order=order" tabindex="-1"><code>--enable-fips</code> <a class="header-anchor" href="#--dns-result-order=order" aria-label="Permalink to “--enable-fips”">​</a></h3><p><strong>Added in: v6.0.0</strong></p><p>起動時に FIPS 準拠の暗号化を有効にします。（Node.js が FIPS 互換の OpenSSL に対してビルドされている必要があります。）</p><h3 id="--enable-fips" tabindex="-1"><code>--enable-network-family-autoselection</code> <a class="header-anchor" href="#--enable-fips" aria-label="Permalink to “--enable-network-family-autoselection”">​</a></h3><p><strong>Added in: v18.18.0</strong></p><p>接続オプションで明示的に無効にしない限り、family 自動選択アルゴリズムを有効にします。</p><h3 id="--enable-network-family-autoselection" tabindex="-1"><code>--enable-source-maps</code> <a class="header-anchor" href="#--enable-network-family-autoselection" aria-label="Permalink to “--enable-source-maps”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v15.11.0, v14.18.0</td><td>この API は実験的ではなくなりました。</td></tr><tr><td>v12.12.0</td><td>Added in: v12.12.0</td></tr></tbody></table></div><p>スタックトレースの <a href="https://sourcemaps.info/spec" target="_blank" rel="noreferrer">Source Map v3</a> サポートを有効にします。</p><p>TypeScript などのトランスパイラを使用する場合、アプリケーションによってスローされるスタックトレースは、元のソース位置ではなく、トランスパイルされたコードを参照します。<code>--enable-source-maps</code> は、ソースマップのキャッシュを有効にし、元のソースファイルに対するスタックトレースを報告するように最善を尽くします。</p><p><code>Error.prepareStackTrace</code> をオーバーライドすると、<code>--enable-source-maps</code> がスタックトレースを変更できなくなる場合があります。ソースマップでスタックトレースを変更するには、オーバーライド関数で元の <code>Error.prepareStackTrace</code> の結果を呼び出して返します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> originalPrepareStackTrace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Error.prepareStackTrace;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Error.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepareStackTrace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">trace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // エラーとトレースを変更し、元の Error.prepareStackTrace でスタックトレースをフォーマットします。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> originalPrepareStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error, trace);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注: ソースマップを有効にすると、<code>Error.stack</code> にアクセスするときにアプリケーションにレイテンシが発生する可能性があります。アプリケーションで <code>Error.stack</code> に頻繁にアクセスする場合は、<code>--enable-source-maps</code> のパフォーマンスへの影響を考慮してください。</p><h3 id="--enable-source-maps" tabindex="-1"><code>--entry-url</code> <a class="header-anchor" href="#--enable-source-maps" aria-label="Permalink to “--entry-url”">​</a></h3><p><strong>Added in: v23.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> - 実験的</p></div><p>存在する場合、Node.js はエントリポイントをパスではなく URL として解釈します。</p><p><a href="/ja/nodejs/api/esm#modules-ecmascript-modules">ECMAScript モジュール</a> の解決規則に従います。</p><p>URL 内のクエリパラメータまたはハッシュは、<a href="/ja/nodejs/api/esm#importmetaurl"><code>import.meta.url</code></a> を介してアクセスできます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --entry-url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;file:///path/to/file.js?queryparams=work#and-hashes-too&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --entry-url</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --experimental-strip-types</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;file.ts?query#hash&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --entry-url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;data:text/javascript,console.log(&quot;Hello&quot;)&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="--entry-url" tabindex="-1"><code>--env-file-if-exists=config</code> <a class="header-anchor" href="#--entry-url" aria-label="Permalink to “--env-file-if-exists=config”">​</a></h3><p><strong>Added in: v22.9.0</strong></p><p>挙動は<a href="/ja/nodejs/api/cli#env-fileconfig"><code>--env-file</code></a>と同じですが、ファイルが存在しない場合にエラーはスローされません。</p><h3 id="--env-file-if-exists=config" tabindex="-1"><code>--env-file=config</code> <a class="header-anchor" href="#--env-file-if-exists=config" aria-label="Permalink to “--env-file=config”">​</a></h3><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a>.1 - 活発な開発</p></div><div class="info custom-block"><p class="custom-block-title">[沿革]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v21.7.0, v20.12.0</td><td>複数行の値のサポートを追加。</td></tr><tr><td>v20.6.0</td><td>Added in: v20.6.0</td></tr></tbody></table></div><p>現在のディレクトリを基準としたファイルから環境変数をロードし、<code>process.env</code>上のアプリケーションで利用できるようにします。<a href="/ja/nodejs/api/cli#environment-variables">Node.jsを構成する環境変数</a>（<code>NODE_OPTIONS</code>など）は、パースされ適用されます。同じ変数が環境とファイルの両方で定義されている場合、環境の値が優先されます。</p><p>複数の<code>--env-file</code>引数を渡すことができます。後続のファイルは、以前のファイルで定義された既存の変数を上書きします。</p><p>ファイルが存在しない場合、エラーがスローされます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --env-file=.env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --env-file=.development.env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ファイルの形式は、環境変数名と値を <code>=</code> で区切ったキーと値のペアを1行に1つ記述する必要があります。</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>PORT=3000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>#</code> の後のテキストはコメントとして扱われます。</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span># これはコメントです {#--env-file=config}</span></span>
<span class="line"><span>PORT=3000 # これもコメントです</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>値は、\`\`\`, <code>&quot;</code> または <code>&#39;</code> の引用符で始まり、終わることができます。それらは値から省略されます。</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>USERNAME=&quot;nodejs&quot; # \`nodejs\` が値になります。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>複数行の値がサポートされています。</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>MULTI_LINE=&quot;THIS IS</span></span>
<span class="line"><span>A MULTILINE&quot;</span></span>
<span class="line"><span># \`THIS IS\\nA MULTILINE\` が値になります。 {#this-is-a-comment}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>キーの前の Export キーワードは無視されます。</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>export USERNAME=&quot;nodejs&quot; # \`nodejs\` が値になります。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>存在しない可能性のあるファイルから環境変数をロードする場合は、代わりに<a href="/ja/nodejs/api/cli#env-file-if-existsconfig"><code>--env-file-if-exists</code></a>フラグを使用できます。</p><h3 id="e-eval-script-will-result-in-this-is-na-multiline-as-the-value" tabindex="-1"><code>-e</code>, <code>--eval &quot;script&quot;</code> {#will-result-in-this-is\\na-multiline-as-the-value} <a class="header-anchor" href="#e-eval-script-will-result-in-this-is-na-multiline-as-the-value" aria-label="Permalink to “-e, --eval &quot;script&quot; {#will-result-in-this-is\\na-multiline-as-the-value}”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.6.0</td><td>Eval は実験的な型削除をサポートするようになりました。</td></tr><tr><td>v5.11.0</td><td>組み込みライブラリが事前定義された変数として利用可能になりました。</td></tr><tr><td>v0.5.2</td><td>追加: v0.5.2</td></tr></tbody></table></div><p>以下の引数を JavaScript として評価します。REPL で事前定義されているモジュールも <code>script</code> で使用できます。</p><p>Windows では、<code>cmd.exe</code> を使用している場合、引用符としてダブルクォート <code>&quot;</code> のみ認識するため、シングルクォートは正しく機能しません。Powershell または Git bash では、<code>&#39;</code> と <code>&quot;</code> の両方が使用可能です。</p><p><a href="/ja/nodejs/api/cli#experimental-strip-types"><code>--experimental-strip-types</code></a> を渡すことで、インライン型を含むコードを実行できます。</p><h3 id="-e---eval-&quot;script&quot;" tabindex="-1"><code>--experimental-async-context-frame</code> <a class="header-anchor" href="#-e---eval-&quot;script&quot;" aria-label="Permalink to “--experimental-async-context-frame”">​</a></h3><p><strong>追加: v22.7.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 実験的</p></div><p>async_hooks に依存するデフォルトの実装ではなく、<code>AsyncContextFrame</code> によって裏打ちされた <a href="/ja/nodejs/api/async_context#class-asynclocalstorage"><code>AsyncLocalStorage</code></a> の使用を有効にします。この新しいモデルは非常に異なる方法で実装されているため、アプリケーション内でのコンテキストデータの流れに違いがある可能性があります。そのため、本番環境で使用する前に、この変更によってアプリケーションの動作に影響がないことを確認することをお勧めします。</p><h3 id="--experimental-async-context-frame" tabindex="-1"><code>--experimental-eventsource</code> <a class="header-anchor" href="#--experimental-async-context-frame" aria-label="Permalink to “--experimental-eventsource”">​</a></h3><p><strong>追加: v22.3.0, v20.18.0</strong></p><p>グローバルスコープでの <a href="https://html.spec.whatwg.org/multipage/server-sent-events#server-sent-events" target="_blank" rel="noreferrer">EventSource Web API</a> の公開を有効にします。</p><h3 id="--experimental-eventsource" tabindex="-1"><code>--experimental-import-meta-resolve</code> <a class="header-anchor" href="#--experimental-eventsource" aria-label="Permalink to “--experimental-import-meta-resolve”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v20.6.0, v18.19.0</td><td>同期的な import.meta.resolve がデフォルトで利用可能になり、以前サポートされていた実験的な第2引数を有効にするためのフラグが保持されました。</td></tr><tr><td>v13.9.0, v12.16.2</td><td>追加: v13.9.0, v12.16.2</td></tr></tbody></table></div><p>実験的な <code>import.meta.resolve()</code> の親 URL サポートを有効にします。これにより、コンテキストに応じた解決のために2番目の <code>parentURL</code> 引数を渡すことができます。</p><p>以前は、<code>import.meta.resolve</code> 機能全体を制御していました。</p><h3 id="--experimental-import-meta-resolve" tabindex="-1"><code>--experimental-loader=module</code> <a class="header-anchor" href="#--experimental-import-meta-resolve" aria-label="Permalink to “--experimental-loader=module”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v12.11.1</td><td>このフラグの名前が <code>--loader</code> から <code>--experimental-loader</code> に変更されました。</td></tr><tr><td>v8.8.0</td><td>追加: v8.8.0</td></tr></tbody></table></div><p>エクスポートされた<a href="/ja/nodejs/api/module#customization-hooks">モジュールカスタマイズフック</a>を含む <code>module</code> を指定します。<code>module</code> は、<a href="/ja/nodejs/api/esm#import-specifiers"><code>import</code> 指定子</a>として受け入れられる任意の文字列で構いません。</p><h3 id="--experimental-loader=module" tabindex="-1"><code>--experimental-network-inspection</code> <a class="header-anchor" href="#--experimental-loader=module" aria-label="Permalink to “--experimental-network-inspection”">​</a></h3><p><strong>追加: v22.6.0, v20.18.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定度: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><p>Chrome DevToolsを使用したネットワークインスペクションの実験的サポートを有効にします。</p><h3 id="--experimental-network-inspection" tabindex="-1"><code>--experimental-print-required-tla</code> <a class="header-anchor" href="#--experimental-network-inspection" aria-label="Permalink to “--experimental-print-required-tla”">​</a></h3><p><strong>追加: v22.0.0, v20.17.0</strong></p><p><code>require()</code> されているESモジュールにトップレベルの<code>await</code>が含まれている場合、このフラグを使用すると、Node.jsがモジュールを評価し、トップレベルのawaitを見つけようとし、それらの場所を出力して、ユーザーがそれらを見つけやすくすることができます。</p><h3 id="--experimental-print-required-tla" tabindex="-1"><code>--experimental-require-module</code> <a class="header-anchor" href="#--experimental-print-required-tla" aria-label="Permalink to “--experimental-require-module”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>これはデフォルトで true になりました。</td></tr><tr><td>v22.0.0, v20.17.0</td><td>追加: v22.0.0, v20.17.0</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[安定度: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 活発な開発</p></div><p><code>require()</code> で同期的なESモジュールグラフのロードをサポートします。</p><p><a href="/ja/nodejs/api/modules#loading-ecmascript-modules-using-require"><code>require()</code> を使用した ECMAScript モジュールの読み込み</a> を参照してください。</p><h3 id="--experimental-require-module" tabindex="-1"><code>--experimental-sea-config</code> <a class="header-anchor" href="#--experimental-require-module" aria-label="Permalink to “--experimental-sea-config”">​</a></h3><p><strong>追加: v20.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定度: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><p>このフラグを使用して、Node.jsバイナリに注入して<a href="/ja/nodejs/api/single-executable-applications">単一実行可能アプリケーション</a>を生成できるblobを生成します。詳細については、<a href="/ja/nodejs/api/single-executable-applications#generating-single-executable-preparation-blobs">この構成</a>に関するドキュメントを参照してください。</p><h3 id="--experimental-sea-config" tabindex="-1"><code>--experimental-shadow-realm</code> <a class="header-anchor" href="#--experimental-sea-config" aria-label="Permalink to “--experimental-shadow-realm”">​</a></h3><p><strong>追加: v19.0.0, v18.13.0</strong></p><p>このフラグを使用して、<a href="https://github.com/tc39/proposal-shadowrealm" target="_blank" rel="noreferrer">ShadowRealm</a> のサポートを有効にします。</p><h3 id="--experimental-shadow-realm" tabindex="-1"><code>--experimental-strip-types</code> <a class="header-anchor" href="#--experimental-shadow-realm" aria-label="Permalink to “--experimental-strip-types”">​</a></h3><p><strong>追加: v22.6.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a>.1 - 活発な開発</p></div><p>TypeScriptファイルの実験的な型ストリッピングを有効にします。詳細については、<a href="/ja/nodejs/api/typescript#type-stripping">TypeScript型ストリッピング</a>のドキュメントを参照してください。</p><h3 id="--experimental-strip-types" tabindex="-1"><code>--experimental-test-coverage</code> <a class="header-anchor" href="#--experimental-strip-types" aria-label="Permalink to “--experimental-test-coverage”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v20.1.0, v18.17.0</td><td>このオプションは<code>--test</code>で使用できます。</td></tr><tr><td>v19.7.0, v18.15.0</td><td>追加: v19.7.0, v18.15.0</td></tr></tbody></table></div><p><code>node:test</code>モジュールと組み合わせて使用​​すると、コードカバレッジレポートがテストランナー出力の一部として生成されます。テストが実行されない場合、カバレッジレポートは生成されません。詳細については、<a href="/ja/nodejs/api/test#collecting-code-coverage">テストからコードカバレッジを収集する</a>のドキュメントを参照してください。</p><h3 id="--experimental-test-coverage" tabindex="-1"><code>--experimental-test-isolation=mode</code> <a class="header-anchor" href="#--experimental-test-coverage" aria-label="Permalink to “--experimental-test-isolation=mode”">​</a></h3><p><strong>追加: v22.8.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a>.0 - 初期開発</p></div><p>テストランナーで使用されるテスト分離の種類を設定します。 <code>mode</code>が<code>&#39;process&#39;</code>の場合、各テストファイルは個別の子プロセスで実行されます。 <code>mode</code>が<code>&#39;none&#39;</code>の場合、すべてのテストファイルはテストランナーと同じプロセスで実行されます。デフォルトの分離モードは<code>&#39;process&#39;</code>です。このフラグは、<code>--test</code>フラグが存在しない場合は無視されます。詳細については、<a href="/ja/nodejs/api/test#test-runner-execution-model">テストランナーの実行モデル</a>セクションを参照してください。</p><h3 id="--experimental-test-isolation=mode" tabindex="-1"><code>--experimental-test-module-mocks</code> <a class="header-anchor" href="#--experimental-test-isolation=mode" aria-label="Permalink to “--experimental-test-module-mocks”">​</a></h3><p><strong>追加: v22.3.0, v20.18.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a>.0 - 初期開発</p></div><p>テストランナーでモジュールモックを有効にします。</p><h3 id="--experimental-test-module-mocks" tabindex="-1"><code>--experimental-transform-types</code> <a class="header-anchor" href="#--experimental-test-module-mocks" aria-label="Permalink to “--experimental-transform-types”">​</a></h3><p><strong>Added in: v22.7.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a>.1 - 開発中</p></div><p>TypeScript のみの構文を JavaScript コードに変換できるようにします。<code>--experimental-strip-types</code> と <code>--enable-source-maps</code> を暗黙的に指定します。</p><h3 id="--experimental-transform-types" tabindex="-1"><code>--experimental-vm-modules</code> <a class="header-anchor" href="#--experimental-transform-types" aria-label="Permalink to “--experimental-vm-modules”">​</a></h3><p><strong>Added in: v9.6.0</strong></p><p><code>node:vm</code> モジュールで実験的な ES モジュールサポートを有効にします。</p><h3 id="--experimental-vm-modules" tabindex="-1"><code>--experimental-wasi-unstable-preview1</code> <a class="header-anchor" href="#--experimental-vm-modules" aria-label="Permalink to “--experimental-wasi-unstable-preview1”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v20.0.0, v18.17.0</td><td>このオプションは、WASI がデフォルトで有効になっているため不要になりましたが、引き続き渡すことができます。</td></tr><tr><td>v13.6.0</td><td><code>--experimental-wasi-unstable-preview0</code> から <code>--experimental-wasi-unstable-preview1</code> に変更されました。</td></tr><tr><td>v13.3.0, v12.16.0</td><td>Added in: v13.3.0, v12.16.0</td></tr></tbody></table></div><p>実験的な WebAssembly System Interface (WASI) サポートを有効にします。</p><h3 id="--experimental-wasi-unstable-preview1" tabindex="-1"><code>--experimental-wasm-modules</code> <a class="header-anchor" href="#--experimental-wasi-unstable-preview1" aria-label="Permalink to “--experimental-wasm-modules”">​</a></h3><p><strong>Added in: v12.3.0</strong></p><p>実験的な WebAssembly モジュールサポートを有効にします。</p><h3 id="--experimental-wasm-modules" tabindex="-1"><code>--experimental-webstorage</code> <a class="header-anchor" href="#--experimental-wasm-modules" aria-label="Permalink to “--experimental-webstorage”">​</a></h3><p><strong>Added in: v22.4.0</strong></p><p>実験的な <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API" target="_blank" rel="noreferrer"><code>Web Storage</code></a> サポートを有効にします。</p><h3 id="--experimental-webstorage" tabindex="-1"><code>--expose-gc</code> <a class="header-anchor" href="#--experimental-webstorage" aria-label="Permalink to “--expose-gc”">​</a></h3><p><strong>Added in: v22.3.0, v20.18.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 試験的。このフラグは V8 から継承されたものであり、アップストリームで変更される可能性があります。</p></div><p>このフラグは、V8 の gc 拡張機能を公開します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (globalThis.gc) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  globalThis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="--expose-gc" tabindex="-1"><code>--force-context-aware</code> <a class="header-anchor" href="#--expose-gc" aria-label="Permalink to “--force-context-aware”">​</a></h3><p><strong>Added in: v12.12.0</strong></p><p><a href="/ja/nodejs/api/addons#context-aware-addons">context-aware</a> ではないネイティブアドオンのロードを無効にします。</p><h3 id="--force-context-aware" tabindex="-1"><code>--force-fips</code> <a class="header-anchor" href="#--force-context-aware" aria-label="Permalink to “--force-fips”">​</a></h3><p><strong>Added in: v6.0.0</strong></p><p>起動時に FIPS 準拠の暗号化を強制します。（スクリプトコードから無効にすることはできません。）（<code>--enable-fips</code> と同じ要件です。）</p><h3 id="--force-fips" tabindex="-1"><code>--force-node-api-uncaught-exceptions-policy</code> <a class="header-anchor" href="#--force-fips" aria-label="Permalink to “--force-node-api-uncaught-exceptions-policy”">​</a></h3><p><strong>Added in: v18.3.0, v16.17.0</strong></p><p>Node-API 非同期コールバックで <code>uncaughtException</code> イベントを強制します。</p><p>既存のアドオンがプロセスをクラッシュさせるのを防ぐため、このフラグはデフォルトでは有効になっていません。将来的には、正しい動作を強制するために、このフラグがデフォルトで有効になります。</p><h3 id="--force-node-api-uncaught-exceptions-policy" tabindex="-1"><code>--frozen-intrinsics</code> <a class="header-anchor" href="#--force-node-api-uncaught-exceptions-policy" aria-label="Permalink to “--frozen-intrinsics”">​</a></h3><p><strong>追加: v11.12.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><p><code>Array</code> や <code>Object</code> のような実験的な凍結された組み込み関数を有効にします。</p><p>ルートコンテキストのみがサポートされています。<code>globalThis.Array</code> が実際にデフォルトの組み込み関数への参照であるという保証はありません。このフラグの下ではコードが壊れる可能性があります。</p><p>ポリフィルを追加できるようにするために、<a href="/ja/nodejs/api/cli#r-require-module"><code>--require</code></a> と <a href="/ja/nodejs/api/cli#importmodule"><code>--import</code></a> は両方とも組み込み関数の凍結前に実行されます。</p><h3 id="--frozen-intrinsics" tabindex="-1"><code>--heap-prof</code> <a class="header-anchor" href="#--frozen-intrinsics" aria-label="Permalink to “--heap-prof”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.4.0, v20.16.0</td><td><code>--heap-prof</code> フラグが安定版になりました。</td></tr><tr><td>v12.4.0</td><td>追加: v12.4.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 2</a> - 安定</p></div><p>起動時に V8 ヒーププロファイラを開始し、終了前にヒーププロファイルをディスクに書き込みます。</p><p><code>--heap-prof-dir</code> が指定されていない場合、生成されたプロファイルは現在の作業ディレクトリに配置されます。</p><p><code>--heap-prof-name</code> が指定されていない場合、生成されたプロファイルの名前は <code>Heap.\${yyyymmdd}.\${hhmmss}.\${pid}.\${tid}.\${seq}.heapprofile</code> になります。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --heap-prof</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.heapprofile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Heap.20190409.202950.15293.0.001.heapprofile</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="--heap-prof" tabindex="-1"><code>--heap-prof-dir</code> <a class="header-anchor" href="#--heap-prof" aria-label="Permalink to “--heap-prof-dir”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.4.0, v20.16.0</td><td><code>--heap-prof</code> フラグが安定版になりました。</td></tr><tr><td>v12.4.0</td><td>追加: v12.4.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 2</a> - 安定</p></div><p><code>--heap-prof</code> によって生成されたヒーププロファイルが配置されるディレクトリを指定します。</p><p>デフォルト値は、<a href="/ja/nodejs/api/cli#diagnostic-dirdirectory"><code>--diagnostic-dir</code></a> コマンドラインオプションによって制御されます。</p><h3 id="--heap-prof-dir" tabindex="-1"><code>--heap-prof-interval</code> <a class="header-anchor" href="#--heap-prof-dir" aria-label="Permalink to “--heap-prof-interval”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.4.0, v20.16.0</td><td><code>--heap-prof</code> フラグが安定版になりました。</td></tr><tr><td>v12.4.0</td><td>追加: v12.4.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 2</a> - 安定</p></div><p><code>--heap-prof</code> によって生成されるヒーププロファイルの平均サンプリング間隔をバイト単位で指定します。デフォルトは 512 * 1024 バイトです。</p><h3 id="--heap-prof-interval" tabindex="-1"><code>--heap-prof-name</code> <a class="header-anchor" href="#--heap-prof-interval" aria-label="Permalink to “--heap-prof-name”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v22.4.0, v20.16.0</td><td><code>--heap-prof</code> フラグが安定版になりました。</td></tr><tr><td>v12.4.0</td><td>追加: v12.4.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> - 安定</p></div><p><code>--heap-prof</code> によって生成されるヒーププロファイルファイル名を指定します。</p><h3 id="--heap-prof-name" tabindex="-1"><code>--heapsnapshot-near-heap-limit=max_count</code> <a class="header-anchor" href="#--heap-prof-name" aria-label="Permalink to “--heapsnapshot-near-heap-limit=max_count”">​</a></h3><p><strong>追加: v15.1.0, v14.18.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> - 試験的</p></div><p>V8ヒープの使用量がヒープ制限に近づくと、V8ヒープスナップショットをディスクに書き込みます。<code>count</code> は負でない整数でなければなりません（その場合、Node.jsは最大 <code>max_count</code> 個のスナップショットをディスクに書き込みます）。</p><p>スナップショットを生成するときに、ガベージコレクションがトリガーされ、ヒープの使用量が低下する可能性があります。したがって、Node.jsインスタンスが最終的にメモリ不足になる前に、複数のスナップショットがディスクに書き込まれる場合があります。これらのヒープスナップショットを比較して、連続するスナップショットの取得中にどのオブジェクトが割り当てられているかを判断できます。Node.jsが正確に <code>max_count</code> 個のスナップショットをディスクに書き込むことは保証されていませんが、<code>max_count</code> が <code>0</code> より大きい場合、Node.jsインスタンスがメモリ不足になる前に、少なくとも1つ、最大で <code>max_count</code> 個のスナップショットを生成するように最善を尽くします。</p><p>V8スナップショットの生成には、時間とメモリが必要です（V8ヒープによって管理されるメモリと、V8ヒープ外のネイティブメモリの両方）。ヒープが大きいほど、より多くのリソースが必要です。Node.jsは、追加のV8ヒープメモリのオーバーヘッドに対応するようにV8ヒープを調整し、プロセスが利用できるすべてのメモリを使い果たさないように最善を尽くします。プロセスがシステムが適切と見なすよりも多くのメモリを使用すると、システムの構成に応じて、システムによってプロセスが突然終了される場合があります。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --max-old-space-size=100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --heapsnapshot-near-heap-limit=3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Wrote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Heap.20200430.100036.49580.0.001.heapsnapshot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Wrote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Heap.20200430.100037.49580.0.002.heapsnapshot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Wrote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snapshot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Heap.20200430.100038.49580.0.003.heapsnapshot</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--- Last few GCs ---</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[49580:0x110000000]     4826 ms: Mark-sweep 130.6 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">147.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 130.5 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">147.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) MB, 27.4 / 0.0 ms  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.126,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.034</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) allocation failure scavenge might not succeed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[49580:0x110000000]     4845 ms: Mark-sweep 130.6 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">147.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 130.6 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">147.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) MB, 18.8 / 0.0 ms  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.088,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mu</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.031</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) allocation failure scavenge might not succeed</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--- JS stacktrace ---</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FATAL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ERROR:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ineffective</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mark-compacts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> near</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> heap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> limit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Allocation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JavaScript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> heap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> memory</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">....</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="--heapsnapshot-near-heap-limit=max_count" tabindex="-1"><code>--heapsnapshot-signal=signal</code> <a class="header-anchor" href="#--heapsnapshot-near-heap-limit=max_count" aria-label="Permalink to “--heapsnapshot-signal=signal”">​</a></h3><p><strong>追加: v12.0.0</strong></p><p>指定されたシグナルを受信したときに Node.js プロセスがヒープダンプを書き出すシグナルハンドラを有効にします。 <code>signal</code> は有効なシグナル名である必要があります。 デフォルトでは無効になっています。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --heapsnapshot-signal=SIGUSR2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aux</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">USER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       PID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %CPU</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %MEM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    VSZ</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   RSS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TTY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      STAT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> START</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   TIME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> COMMAND</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  5.5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  6.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 787252</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 247004</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       Ssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  16:43</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   0:02</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --heapsnapshot-signal=SIGUSR2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kill</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -USR2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Heap.20190718.133405.15554.0.001.heapsnapshot</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="--heapsnapshot-signal=signal" tabindex="-1"><code>-h</code>, <code>--help</code> <a class="header-anchor" href="#--heapsnapshot-signal=signal" aria-label="Permalink to “-h, --help”">​</a></h3><p><strong>追加: v0.1.3</strong></p><p>node コマンドラインオプションを出力します。 このオプションの出力は、このドキュメントよりも詳細ではありません。</p><h3 id="-h---help" tabindex="-1"><code>--icu-data-dir=file</code> <a class="header-anchor" href="#-h---help" aria-label="Permalink to “--icu-data-dir=file”">​</a></h3><p><strong>追加: v0.11.15</strong></p><p>ICU データロードパスを指定します。（<code>NODE_ICU_DATA</code> を上書きします。）</p><h3 id="--icu-data-dir=file" tabindex="-1"><code>--import=module</code> <a class="header-anchor" href="#--icu-data-dir=file" aria-label="Permalink to “--import=module”">​</a></h3><p><strong>追加: v19.0.0, v18.18.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 試験的</p></div><p>起動時に指定されたモジュールをプリロードします。 フラグが複数回指定された場合、各モジュールは、<a href="/ja/nodejs/api/cli#node-optionsoptions"><code>NODE_OPTIONS</code></a> で指定されたものから順に、表示される順に順番に実行されます。</p><p><a href="/ja/nodejs/api/esm#modules-ecmascript-modules">ECMAScript モジュール</a> の解決規則に従います。 <a href="/ja/nodejs/api/modules">CommonJS モジュール</a> をロードするには、<a href="/ja/nodejs/api/cli#r-require-module"><code>--require</code></a> を使用します。 <code>--require</code> でプリロードされたモジュールは、<code>--import</code> でプリロードされたモジュールよりも前に実行されます。</p><p>モジュールは、メインスレッドだけでなく、ワーカー スレッド、フォークされたプロセス、またはクラスタ化されたプロセスにもプリロードされます。</p><h3 id="--import=module" tabindex="-1"><code>--input-type=type</code> <a class="header-anchor" href="#--import=module" aria-label="Permalink to “--input-type=type”">​</a></h3><p><strong>追加: v12.0.0</strong></p><p>これは、Node.js が <code>--eval</code> または <code>STDIN</code> 入力を CommonJS または ES モジュールとして解釈するように構成します。 有効な値は <code>&quot;commonjs&quot;</code> または <code>&quot;module&quot;</code> です。 デフォルトは <code>&quot;commonjs&quot;</code> です。</p><p>REPL はこのオプションをサポートしていません。 <a href="/ja/nodejs/api/cli#p-print-script"><code>--print</code></a> で <code>--input-type=module</code> を使用すると、<code>--print</code> が ES モジュールの構文をサポートしていないため、エラーがスローされます。</p><h3 id="--input-type=type" tabindex="-1"><code>--insecure-http-parser</code> <a class="header-anchor" href="#--input-type=type" aria-label="Permalink to “--insecure-http-parser”">​</a></h3><p><strong>追加: v13.4.0, v12.15.0, v10.19.0</strong></p><p>HTTP パーサーで寛容フラグを有効にします。これにより、非準拠の HTTP 実装との相互運用が可能になる場合があります。</p><p>有効にすると、パーサーは以下を受け入れます。</p><ul><li>無効な HTTP ヘッダー値。</li><li>無効な HTTP バージョン。</li><li><code>Transfer-Encoding</code> と <code>Content-Length</code> ヘッダーの両方を含むメッセージを許可します。</li><li><code>Connection: close</code> が存在する場合、メッセージの後の余分なデータを許可します。</li><li><code>chunked</code> が提供された後、追加の転送エンコーディングを許可します。</li><li><code>\\r\\n</code> の代わりに <code>\\n</code> をトークン区切り文字として使用することを許可します。</li><li>チャンクの後に <code>\\r\\n</code> を提供しないことを許可します。</li><li>チャンクサイズの後と <code>\\r\\n</code> の前にスペースが存在することを許可します。</li></ul><p>上記のすべては、アプリケーションをリクエストスマグリングまたはポイズニング攻撃にさらします。このオプションの使用は避けてください。</p><h4 id="--insecure-http-parser" tabindex="-1">警告: パブリック IP:ポートの組み合わせにインスペクターをバインドすることは安全ではありません <a class="header-anchor" href="#--insecure-http-parser" aria-label="Permalink to “警告: パブリック IP:ポートの組み合わせにインスペクターをバインドすることは安全ではありません”">​</a></h4><p>開いているポートを持つパブリック IP ( <code>0.0.0.0</code> を含む) にインスペクターをバインドすることは安全ではありません。外部ホストがインスペクターに接続し、<a href="https://www.owasp.org/index.php/Code_Injection" target="_blank" rel="noreferrer">リモートコード実行</a>攻撃を実行できるようになるためです。</p><p>ホストを指定する場合は、次のいずれかを確認してください。</p><ul><li>ホストがパブリックネットワークからアクセスできない。</li><li>ファイアウォールがポート上の不要な接続を許可しない。</li></ul><p><strong>より具体的には、ポート（デフォルトでは <code>9229</code>）がファイアウォールで保護されていない場合、<code>--inspect=0.0.0.0</code> は安全ではありません。</strong></p><p>詳細については、<a href="https://nodejs.org/en/docs/guides/debugging-getting-started/#security-implications" target="_blank" rel="noreferrer">デバッグのセキュリティに関する考慮事項</a>セクションを参照してください。</p><h3 id="warning-binding-inspector-to-a-public-ipport-combination-is-insecure" tabindex="-1"><code>--inspect-brk[=[host:]port]</code> <a class="header-anchor" href="#warning-binding-inspector-to-a-public-ipport-combination-is-insecure" aria-label="Permalink to “--inspect-brk[=[host:]port]”">​</a></h3><p><strong>追加: v7.6.0</strong></p><p><code>host:port</code> でインスペクターをアクティブにし、ユーザースクリプトの開始時に中断します。デフォルトの <code>host:port</code> は <code>127.0.0.1:9229</code> です。ポート <code>0</code> が指定されている場合は、ランダムに使用可能なポートが使用されます。</p><p>Node.js デバッガーの詳細については、<a href="/ja/nodejs/api/debugger#v8-inspector-integration-for-nodejs">Node.js 用の V8 インスペクター統合</a>を参照してください。</p><h3 id="--inspect-brk=hostport" tabindex="-1"><code>--inspect-port=[host:]port</code> <a class="header-anchor" href="#--inspect-brk=hostport" aria-label="Permalink to “--inspect-port=[host:]port”">​</a></h3><p><strong>追加: v7.6.0</strong></p><p>インスペクターがアクティブ化されたときに使用する <code>host:port</code> を設定します。<code>SIGUSR1</code> シグナルを送信してインスペクターをアクティブ化する場合に役立ちます。</p><p>デフォルトのホストは <code>127.0.0.1</code> です。ポート <code>0</code> が指定されている場合は、ランダムに使用可能なポートが使用されます。</p><p><code>host</code> パラメータの使用に関する以下の<a href="/ja/nodejs/api/cli#warning-binding-inspector-to-a-public-ipport-combination-is-insecure">セキュリティ警告</a>を参照してください。</p><h3 id="--inspect-port=hostport" tabindex="-1"><code>--inspect-publish-uid=stderr,http</code> <a class="header-anchor" href="#--inspect-port=hostport" aria-label="Permalink to “--inspect-publish-uid=stderr,http”">​</a></h3><p>インスペクターの WebSocket URL の公開方法を指定します。</p><p>デフォルトでは、インスペクターの WebSocket URL は stderr で利用可能であり、<code>http://host:port/json/list</code> の <code>/json/list</code> エンドポイントで利用可能です。</p><h3 id="--inspect-publish-uid=stderrhttp" tabindex="-1"><code>--inspect-wait[=[host:]port]</code> <a class="header-anchor" href="#--inspect-publish-uid=stderrhttp" aria-label="Permalink to “--inspect-wait[=[host:]port]”">​</a></h3><p><strong>Added in: v22.2.0, v20.15.0</strong></p><p><code>host:port</code> でインスペクターをアクティブにし、デバッガーが接続されるのを待ちます。デフォルトの <code>host:port</code> は <code>127.0.0.1:9229</code> です。ポート <code>0</code> が指定された場合、ランダムに利用可能なポートが使用されます。</p><p>Node.js デバッガーの詳細については、<a href="/ja/nodejs/api/debugger#v8-inspector-integration-for-nodejs">Node.js の V8 インスペクター統合</a> を参照してください。</p><h3 id="--inspect-wait=hostport" tabindex="-1"><code>--inspect[=[host:]port]</code> <a class="header-anchor" href="#--inspect-wait=hostport" aria-label="Permalink to “--inspect[=[host:]port]”">​</a></h3><p><strong>Added in: v6.3.0</strong></p><p><code>host:port</code> でインスペクターをアクティブにします。デフォルトは <code>127.0.0.1:9229</code> です。ポート <code>0</code> が指定された場合、ランダムに利用可能なポートが使用されます。</p><p>V8 インスペクター統合により、Chrome DevTools や IDE などのツールを使用して、Node.js インスタンスをデバッグおよびプロファイルできます。これらのツールは、TCP ポート経由で Node.js インスタンスに接続し、<a href="https://chromedevtools.github.io/devtools-protocol/" target="_blank" rel="noreferrer">Chrome DevTools Protocol</a> を使用して通信します。Node.js デバッガーの詳細については、<a href="/ja/nodejs/api/debugger#v8-inspector-integration-for-nodejs">Node.js の V8 インスペクター統合</a> を参照してください。</p><h3 id="--inspect=hostport" tabindex="-1"><code>-i</code>, <code>--interactive</code> <a class="header-anchor" href="#--inspect=hostport" aria-label="Permalink to “-i, --interactive”">​</a></h3><p><strong>Added in: v0.7.7</strong></p><p>stdin が端末ではないと思われる場合でも、REPL を開きます。</p><h3 id="-i---interactive" tabindex="-1"><code>--jitless</code> <a class="header-anchor" href="#-i---interactive" aria-label="Permalink to “--jitless”">​</a></h3><p><strong>Added in: v12.0.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 実験的。このフラグは V8 から継承されており、上流で変更される可能性があります。</p></div><p><a href="https://v8.dev/blog/jitless" target="_blank" rel="noreferrer">実行可能メモリのランタイム割り当て</a>を無効にします。これは、セキュリティ上の理由から一部のプラットフォームで必要になる場合があります。また、他のプラットフォームでの攻撃対象領域を減らすこともできますが、パフォーマンスへの影響は深刻になる可能性があります。</p><h3 id="--jitless" tabindex="-1"><code>--localstorage-file=file</code> <a class="header-anchor" href="#--jitless" aria-label="Permalink to “--localstorage-file=file”">​</a></h3><p><strong>Added in: v22.4.0</strong></p><p><code>localStorage</code> データの保存に使用されるファイル。ファイルが存在しない場合は、<code>localStorage</code> に最初にアクセスしたときに作成されます。同じファイルを複数の Node.js プロセスで同時に共有できます。このフラグは、Node.js が <code>--experimental-webstorage</code> フラグで起動されていない限り、何もしません。</p><h3 id="--localstorage-file=file" tabindex="-1"><code>--max-http-header-size=size</code> <a class="header-anchor" href="#--localstorage-file=file" aria-label="Permalink to “--max-http-header-size=size”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v13.13.0</td><td>HTTPヘッダーの最大デフォルトサイズを8 KiBから16 KiBに変更。</td></tr><tr><td>v11.6.0, v10.15.0</td><td>追加: v11.6.0, v10.15.0</td></tr></tbody></table></div><p>HTTPヘッダーの最大サイズをバイト単位で指定します。デフォルトは16 KiBです。</p><h3 id="--max-http-header-size=size" tabindex="-1"><code>--napi-modules</code> <a class="header-anchor" href="#--max-http-header-size=size" aria-label="Permalink to “--napi-modules”">​</a></h3><p><strong>追加: v7.10.0</strong></p><p>このオプションは何もしません。互換性のために維持されています。</p><h3 id="--napi-modules" tabindex="-1"><code>--network-family-autoselection-attempt-timeout</code> <a class="header-anchor" href="#--napi-modules" aria-label="Permalink to “--network-family-autoselection-attempt-timeout”">​</a></h3><p><strong>追加: v22.1.0, v20.13.0</strong></p><p>ネットワークファミリーの自動選択試行タイムアウトのデフォルト値を設定します。詳細については、<a href="/ja/nodejs/api/net#netgetdefaultautoselectfamilyattempttimeout"><code>net.getDefaultAutoSelectFamilyAttemptTimeout()</code></a> を参照してください。</p><h3 id="--network-family-autoselection-attempt-timeout" tabindex="-1"><code>--no-addons</code> <a class="header-anchor" href="#--network-family-autoselection-attempt-timeout" aria-label="Permalink to “--no-addons”">​</a></h3><p><strong>追加: v16.10.0, v14.19.0</strong></p><p><code>node-addons</code> エクスポート条件を無効にし、ネイティブアドオンのロードも無効にします。<code>--no-addons</code> が指定されている場合、<code>process.dlopen</code> の呼び出しまたはネイティブ C++ アドオンの require は失敗し、例外がスローされます。</p><h3 id="--no-addons" tabindex="-1"><code>--no-deprecation</code> <a class="header-anchor" href="#--no-addons" aria-label="Permalink to “--no-deprecation”">​</a></h3><p><strong>追加: v0.8.0</strong></p><p>非推奨の警告を抑制します。</p><h3 id="--no-deprecation" tabindex="-1"><code>--no-experimental-detect-module</code> <a class="header-anchor" href="#--no-deprecation" aria-label="Permalink to “--no-experimental-detect-module”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v22.7.0</td><td>構文検出がデフォルトで有効になりました。</td></tr><tr><td>v21.1.0, v20.10.0</td><td>追加: v21.1.0, v20.10.0</td></tr></tbody></table></div><p><a href="/ja/nodejs/api/packages#syntax-detection">構文検出</a>を使用してモジュールタイプを決定することを無効にします。</p><h3 id="--no-experimental-detect-module" tabindex="-1"><code>--no-experimental-global-navigator</code> <a class="header-anchor" href="#--no-experimental-detect-module" aria-label="Permalink to “--no-experimental-global-navigator”">​</a></h3><p><strong>追加: v21.2.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 試験的</p></div><p>グローバルスコープでの <a href="/ja/nodejs/api/globals#navigator">Navigator API</a> の公開を無効にします。</p><h3 id="--no-experimental-global-navigator" tabindex="-1"><code>--no-experimental-repl-await</code> <a class="header-anchor" href="#--no-experimental-global-navigator" aria-label="Permalink to “--no-experimental-repl-await”">​</a></h3><p><strong>追加: v16.6.0</strong></p><p>このフラグを使用して、REPL でのトップレベル await を無効にします。</p><h3 id="--no-experimental-repl-await" tabindex="-1"><code>--no-experimental-require-module</code> <a class="header-anchor" href="#--no-experimental-repl-await" aria-label="Permalink to “--no-experimental-require-module”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v23.0.0</td><td>これはデフォルトで false になりました。</td></tr><tr><td>v22.0.0, v20.17.0</td><td>追加: v22.0.0, v20.17.0</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a>.1 - 活発な開発</p></div><p><code>require()</code> での同期 ES モジュールグラフのロードのサポートを無効にします。</p><p><a href="/ja/nodejs/api/modules#loading-ecmascript-modules-using-require">require() を使用した ECMAScript モジュールのロード</a> を参照してください。</p><h3 id="--no-experimental-require-module" tabindex="-1"><code>--no-experimental-sqlite</code> <a class="header-anchor" href="#--no-experimental-require-module" aria-label="Permalink to “--no-experimental-sqlite”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v23.4.0</td><td>SQLiteのフラグは解除されましたが、まだ実験的です。</td></tr><tr><td>v22.5.0</td><td>追加: v22.5.0</td></tr></tbody></table></div><p>実験的な <a href="/ja/nodejs/api/sqlite"><code>node:sqlite</code></a> モジュールを無効にします。</p><h3 id="--no-experimental-sqlite" tabindex="-1"><code>--no-experimental-websocket</code> <a class="header-anchor" href="#--no-experimental-sqlite" aria-label="Permalink to “--no-experimental-websocket”">​</a></h3><p><strong>追加: v22.0.0</strong></p><p>グローバルスコープでの <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" target="_blank" rel="noreferrer"><code>WebSocket</code></a> の公開を無効にします。</p><h3 id="--no-experimental-websocket" tabindex="-1"><code>--no-extra-info-on-fatal-exception</code> <a class="header-anchor" href="#--no-experimental-websocket" aria-label="Permalink to “--no-extra-info-on-fatal-exception”">​</a></h3><p><strong>追加: v17.0.0</strong></p><p>終了を引き起こす致命的な例外に関する追加情報を非表示にします。</p><h3 id="--no-extra-info-on-fatal-exception" tabindex="-1"><code>--no-force-async-hooks-checks</code> <a class="header-anchor" href="#--no-extra-info-on-fatal-exception" aria-label="Permalink to “--no-force-async-hooks-checks”">​</a></h3><p><strong>追加: v9.0.0</strong></p><p><code>async_hooks</code> のランタイムチェックを無効にします。 これらは、<code>async_hooks</code> が有効になっている場合は、動的に有効になります。</p><h3 id="--no-force-async-hooks-checks" tabindex="-1"><code>--no-global-search-paths</code> <a class="header-anchor" href="#--no-force-async-hooks-checks" aria-label="Permalink to “--no-global-search-paths”">​</a></h3><p><strong>追加: v16.10.0</strong></p><p><code>$HOME/.node_modules</code> や <code>$NODE_PATH</code> のようなグローバルパスからモジュールを検索しません。</p><h3 id="--no-global-search-paths" tabindex="-1"><code>--no-network-family-autoselection</code> <a class="header-anchor" href="#--no-global-search-paths" aria-label="Permalink to “--no-network-family-autoselection”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v20.0.0</td><td>フラグの名前が <code>--no-enable-network-family-autoselection</code> から <code>--no-network-family-autoselection</code> に変更されました。 古い名前はエイリアスとして引き続き機能します。</td></tr><tr><td>v19.4.0</td><td>追加: v19.4.0</td></tr></tbody></table></div><p>接続オプションで明示的に有効にしない限り、ファミリーの自動選択アルゴリズムを無効にします。</p><h3 id="--no-network-family-autoselection" tabindex="-1"><code>--no-warnings</code> <a class="header-anchor" href="#--no-network-family-autoselection" aria-label="Permalink to “--no-warnings”">​</a></h3><p><strong>追加: v6.0.0</strong></p><p>すべてのプロセスの警告（非推奨を含む）を抑制します。</p><h3 id="--no-warnings" tabindex="-1"><code>--node-memory-debug</code> <a class="header-anchor" href="#--no-warnings" aria-label="Permalink to “--node-memory-debug”">​</a></h3><p><strong>追加: v15.0.0, v14.18.0</strong></p><p>Node.js内部のメモリリークに対する追加のデバッグチェックを有効にします。 これは通常、Node.js自体をデバッグする開発者にのみ役立ちます。</p><h3 id="--node-memory-debug" tabindex="-1"><code>--openssl-config=file</code> <a class="header-anchor" href="#--node-memory-debug" aria-label="Permalink to “--openssl-config=file”">​</a></h3><p><strong>追加: v6.9.0</strong></p><p>起動時にOpenSSL構成ファイルをロードします。 特に、Node.jsがFIPS対応のOpenSSLに対して構築されている場合、これを使用してFIPS準拠の暗号化を有効にできます。</p><h3 id="--openssl-config=file" tabindex="-1"><code>--openssl-legacy-provider</code> <a class="header-anchor" href="#--openssl-config=file" aria-label="Permalink to “--openssl-legacy-provider”">​</a></h3><p><strong>追加: v17.0.0, v16.17.0</strong></p><p>OpenSSL 3.0レガシープロバイダーを有効にします。 詳細については、<a href="https://www.openssl.org/docs/man3.0/man7/OSSL_PROVIDER-legacy" target="_blank" rel="noreferrer">OSSL_PROVIDER-legacy</a>を参照してください。</p><h3 id="--openssl-legacy-provider" tabindex="-1"><code>--openssl-shared-config</code> <a class="header-anchor" href="#--openssl-legacy-provider" aria-label="Permalink to “--openssl-shared-config”">​</a></h3><p><strong>追加: v18.5.0, v16.17.0, v14.21.0</strong></p><p>OpenSSLのデフォルト構成セクションである <code>openssl_conf</code> がOpenSSL構成ファイルから読み込まれるようにします。 デフォルトの構成ファイルは <code>openssl.cnf</code> という名前ですが、これは環境変数 <code>OPENSSL_CONF</code> を使用するか、コマンドラインオプション <code>--openssl-config</code> を使用して変更できます。 デフォルトのOpenSSL構成ファイルの場所は、OpenSSLがNode.jsにどのようにリンクされているかによって異なります。 OpenSSL構成を共有すると、予期しない影響が生じる可能性があるため、Node.jsに固有の構成セクションである <code>nodejs_conf</code> を使用することをお勧めします。これは、このオプションが使用されていない場合のデフォルトです。</p><h3 id="--openssl-shared-config" tabindex="-1"><code>--pending-deprecation</code> <a class="header-anchor" href="#--openssl-shared-config" aria-label="Permalink to “--pending-deprecation”">​</a></h3><p><strong>追加: v8.0.0</strong></p><p>保留中の非推奨警告を発行します。</p><p>保留中の非推奨は一般的にランタイムの非推奨と同一ですが、デフォルトで <em>オフ</em> になっており、<code>--pending-deprecation</code> コマンドラインフラグまたは <code>NODE_PENDING_DEPRECATION=1</code> 環境変数が設定されない限り発行されない点が異なります。保留中の非推奨は、開発者が非推奨の API 使用を検出するために活用できる、一種の選択的な &quot;早期警告&quot; メカニズムを提供するために使用されます。</p><h3 id="--pending-deprecation" tabindex="-1"><code>--permission</code> <a class="header-anchor" href="#--pending-deprecation" aria-label="Permalink to “--permission”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v23.5.0</td><td>許可モデルが安定しました。</td></tr><tr><td>v20.0.0</td><td>追加: v20.0.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定。</p></div><p>現在のプロセスに対して許可モデルを有効にします。有効にすると、次の許可が制限されます。</p><ul><li>ファイルシステム - <a href="/ja/nodejs/api/cli#allow-fs-read"><code>--allow-fs-read</code></a>, <a href="/ja/nodejs/api/cli#allow-fs-write"><code>--allow-fs-write</code></a> フラグで管理可能</li><li>子プロセス - <a href="/ja/nodejs/api/cli#allow-child-process"><code>--allow-child-process</code></a> フラグで管理可能</li><li>Workerスレッド - <a href="/ja/nodejs/api/cli#allow-worker"><code>--allow-worker</code></a> フラグで管理可能</li><li>WASI - <a href="/ja/nodejs/api/cli#allow-wasi"><code>--allow-wasi</code></a> フラグで管理可能</li><li>アドオン - <a href="/ja/nodejs/api/cli#allow-addons"><code>--allow-addons</code></a> フラグで管理可能</li></ul><h3 id="--permission" tabindex="-1"><code>--preserve-symlinks</code> <a class="header-anchor" href="#--permission" aria-label="Permalink to “--preserve-symlinks”">​</a></h3><p><strong>追加: v6.3.0</strong></p><p>モジュールを解決およびキャッシュするときに、シンボリックリンクを保持するようにモジュールローダーに指示します。</p><p>デフォルトでは、Node.js がシンボリックリンクされている別のディスク上の場所からモジュールをロードする場合、Node.js はリンクを解決し、モジュールの実際のディスク上の &quot;実パス&quot; を識別子として、また他の依存モジュールを見つけるためのルートパスとして使用します。ほとんどの場合、このデフォルトの動作で問題ありません。ただし、以下の例に示すように、シンボリックリンクされたピア依存関係を使用する場合、<code>moduleA</code> が <code>moduleB</code> をピア依存関係として require しようとすると、デフォルトの動作により例外がスローされます。</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>{appDir}</span></span>
<span class="line"><span> ├── app</span></span>
<span class="line"><span> │   ├── index.js</span></span>
<span class="line"><span> │   └── node_modules</span></span>
<span class="line"><span> │       ├── moduleA -&gt; {appDir}/moduleA</span></span>
<span class="line"><span> │       └── moduleB</span></span>
<span class="line"><span> │           ├── index.js</span></span>
<span class="line"><span> │           └── package.json</span></span>
<span class="line"><span> └── moduleA</span></span>
<span class="line"><span>     ├── index.js</span></span>
<span class="line"><span>     └── package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>--preserve-symlinks</code> コマンドラインフラグは、Node.js に実パスではなくモジュールのシンボリックリンクパスを使用するように指示し、シンボリックリンクされたピア依存関係を見つけることを可能にします。</p><p>ただし、<code>--preserve-symlinks</code> を使用すると、他の副作用が発生する可能性があることに注意してください。具体的には、シンボリックリンクされた <em>ネイティブ</em> モジュールは、依存関係ツリー内の複数の場所からリンクされている場合、ロードに失敗する可能性があります（Node.js はこれらを 2 つの別個のモジュールとして認識し、モジュールを複数回ロードしようとするため、例外がスローされます）。</p><p><code>--preserve-symlinks</code> フラグはメインモジュールには適用されません。これにより、<code>node --preserve-symlinks node_module/.bin/\\&lt;foo\\&gt;</code> が機能します。メインモジュールに同じ動作を適用するには、<code>--preserve-symlinks-main</code> も使用します。</p><h3 id="--preserve-symlinks" tabindex="-1"><code>--preserve-symlinks-main</code> <a class="header-anchor" href="#--preserve-symlinks" aria-label="Permalink to “--preserve-symlinks-main”">​</a></h3><p><strong>Added in: v10.2.0</strong></p><p>モジュールローダーに、メインモジュール (<code>require.main</code>) を解決してキャッシュするときにシンボリックリンクを保持するように指示します。</p><p>このフラグが存在するのは、メインモジュールが、<code>--preserve-symlinks</code> が他のすべてのインポートに与えるのと同じ動作をオプトインできるようにするためです。ただし、古いバージョンのNode.jsとの下位互換性のために、これらは別々のフラグです。</p><p><code>--preserve-symlinks-main</code> は <code>--preserve-symlinks</code> を意味しません。相対パスを解決する前にシンボリックリンクをたどることが望ましくない場合は、<code>--preserve-symlinks-main</code> に加えて <code>--preserve-symlinks</code> を使用してください。</p><p>詳細については、<a href="/ja/nodejs/api/cli#preserve-symlinks"><code>--preserve-symlinks</code></a> を参照してください。</p><h3 id="--preserve-symlinks-main" tabindex="-1"><code>-p</code>, <code>--print &quot;script&quot;</code> <a class="header-anchor" href="#--preserve-symlinks-main" aria-label="Permalink to “-p, --print &quot;script&quot;”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v5.11.0</td><td>組み込みライブラリが定義済みの変数として利用可能になりました。</td></tr><tr><td>v0.6.4</td><td>Added in: v0.6.4</td></tr></tbody></table></div><p><code>-e</code> と同じですが、結果を出力します。</p><h3 id="-p---print-&quot;script&quot;" tabindex="-1"><code>--prof</code> <a class="header-anchor" href="#-p---print-&quot;script&quot;" aria-label="Permalink to “--prof”">​</a></h3><p><strong>Added in: v2.0.0</strong></p><p>V8プロファイラー出力を生成します。</p><h3 id="--prof" tabindex="-1"><code>--prof-process</code> <a class="header-anchor" href="#--prof" aria-label="Permalink to “--prof-process”">​</a></h3><p><strong>Added in: v5.2.0</strong></p><p>V8オプション<code>--prof</code>を使用して生成されたV8プロファイラー出力を処理します。</p><h3 id="--prof-process" tabindex="-1"><code>--redirect-warnings=file</code> <a class="header-anchor" href="#--prof-process" aria-label="Permalink to “--redirect-warnings=file”">​</a></h3><p><strong>Added in: v8.0.0</strong></p><p>プロセス警告をstderrに出力する代わりに、指定されたファイルに書き込みます。ファイルが存在しない場合は作成され、存在する場合は追記されます。警告をファイルに書き込もうとしたときにエラーが発生した場合、警告は代わりにstderrに書き込まれます。</p><p><code>file</code> 名は絶対パスでもかまいません。そうでない場合、書き込まれるデフォルトのディレクトリは、<a href="/ja/nodejs/api/cli#diagnostic-dirdirectory"><code>--diagnostic-dir</code></a> コマンドラインオプションによって制御されます。</p><h3 id="--redirect-warnings=file" tabindex="-1"><code>--report-compact</code> <a class="header-anchor" href="#--redirect-warnings=file" aria-label="Permalink to “--report-compact”">​</a></h3><p><strong>Added in: v13.12.0, v12.17.0</strong></p><p>レポートをコンパクトな形式、つまり、人間が消費するために設計されたデフォルトの複数行形式よりも、ログ処理システムでより簡単に消費できる単一行JSONで書き込みます。</p><h3 id="--report-compact" tabindex="-1"><code>--report-dir=directory</code>, <code>report-directory=directory</code> <a class="header-anchor" href="#--report-compact" aria-label="Permalink to “--report-dir=directory, report-directory=directory”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v13.12.0, v12.17.0</td><td>このオプションは実験的ではなくなりました。</td></tr><tr><td>v12.0.0</td><td><code>--diagnostic-report-directory</code> から <code>--report-directory</code> に変更されました。</td></tr><tr><td>v11.8.0</td><td>Added in: v11.8.0</td></tr></tbody></table></div><p>レポートが生成される場所。</p><h3 id="--report-dir=directory-report-directory=directory" tabindex="-1"><code>--report-exclude-env</code> <a class="header-anchor" href="#--report-dir=directory-report-directory=directory" aria-label="Permalink to “--report-exclude-env”">​</a></h3><p><strong>Added in: v23.3.0</strong></p><p><code>--report-exclude-env</code> が渡されると、生成される診断レポートに <code>environmentVariables</code> データが含まれません。</p><h3 id="--report-exclude-env" tabindex="-1"><code>--report-exclude-network</code> <a class="header-anchor" href="#--report-exclude-env" aria-label="Permalink to “--report-exclude-network”">​</a></h3><p><strong>Added in: v22.0.0, v20.13.0</strong></p><p>診断レポートから <code>header.networkInterfaces</code> を除外します。デフォルトでは設定されておらず、ネットワークインターフェースは含まれます。</p><h3 id="--report-exclude-network" tabindex="-1"><code>--report-filename=filename</code> <a class="header-anchor" href="#--report-exclude-network" aria-label="Permalink to “--report-filename=filename”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v13.12.0, v12.17.0</td><td>このオプションは実験的ではなくなりました。</td></tr><tr><td>v12.0.0</td><td><code>--diagnostic-report-filename</code> から <code>--report-filename</code> に変更されました。</td></tr><tr><td>v11.8.0</td><td>Added in: v11.8.0</td></tr></tbody></table></div><p>レポートが書き込まれるファイルの名前。</p><p>ファイル名が <code>&#39;stdout&#39;</code> または <code>&#39;stderr&#39;</code> に設定されている場合、レポートはそれぞれプロセスの stdout または stderr に書き込まれます。</p><h3 id="--report-filename=filename" tabindex="-1"><code>--report-on-fatalerror</code> <a class="header-anchor" href="#--report-filename=filename" aria-label="Permalink to “--report-on-fatalerror”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v14.0.0, v13.14.0, v12.17.0</td><td>このオプションは実験的ではなくなりました。</td></tr><tr><td>v12.0.0</td><td><code>--diagnostic-report-on-fatalerror</code> から <code>--report-on-fatalerror</code> に変更されました。</td></tr><tr><td>v11.8.0</td><td>Added in: v11.8.0</td></tr></tbody></table></div><p>アプリケーションの終了につながる致命的なエラー (メモリ不足など、Node.js ランタイム内の内部エラー) でレポートがトリガーされるようにします。ヒープ、スタック、イベントループの状態、リソース消費など、さまざまな診断データ要素を検査して、致命的なエラーについて推論するのに役立ちます。</p><h3 id="--report-on-fatalerror" tabindex="-1"><code>--report-on-signal</code> <a class="header-anchor" href="#--report-on-fatalerror" aria-label="Permalink to “--report-on-signal”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v13.12.0, v12.17.0</td><td>このオプションは実験的ではなくなりました。</td></tr><tr><td>v12.0.0</td><td><code>--diagnostic-report-on-signal</code> から <code>--report-on-signal</code> に変更されました。</td></tr><tr><td>v11.8.0</td><td>Added in: v11.8.0</td></tr></tbody></table></div><p>実行中の Node.js プロセスへの指定された (または事前定義された) シグナルを受信したときにレポートが生成されるようにします。レポートをトリガーするシグナルは、<code>--report-signal</code> を使用して指定します。</p><h3 id="--report-on-signal" tabindex="-1"><code>--report-signal=signal</code> <a class="header-anchor" href="#--report-on-signal" aria-label="Permalink to “--report-signal=signal”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v13.12.0, v12.17.0</td><td>このオプションは実験的ではなくなりました。</td></tr><tr><td>v12.0.0</td><td><code>--diagnostic-report-signal</code> から <code>--report-signal</code> に変更されました。</td></tr><tr><td>v11.8.0</td><td>Added in: v11.8.0</td></tr></tbody></table></div><p>レポート生成のシグナルを設定またはリセットします (Windows ではサポートされていません)。デフォルトのシグナルは <code>SIGUSR2</code> です。</p><h3 id="--report-signal=signal" tabindex="-1"><code>--report-uncaught-exception</code> <a class="header-anchor" href="#--report-signal=signal" aria-label="Permalink to “--report-uncaught-exception”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v18.8.0, v16.18.0</td><td>未処理の例外が処理された場合、レポートは生成されません。</td></tr><tr><td>v13.12.0, v12.17.0</td><td>このオプションは実験的ではなくなりました。</td></tr><tr><td>v12.0.0</td><td><code>--diagnostic-report-uncaught-exception</code> から <code>--report-uncaught-exception</code> に変更されました。</td></tr><tr><td>v11.8.0</td><td>Added in: v11.8.0</td></tr></tbody></table></div><p>未処理の例外が原因でプロセスが終了したときにレポートが生成されるようにします。ネイティブスタックや他のランタイム環境データと組み合わせて JavaScript スタックを検査する場合に役立ちます。</p><h3 id="--report-uncaught-exception" tabindex="-1"><code>-r</code>, <code>--require module</code> <a class="header-anchor" href="#--report-uncaught-exception" aria-label="Permalink to “-r, --require module”">​</a></h3><p><strong>Added in: v1.6.0</strong></p><p>起動時に指定されたモジュールをプリロードします。</p><p><code>require()</code> のモジュール解決ルールに従います。<code>module</code> は、ファイルへのパス、または node モジュール名である場合があります。</p><p>CommonJS モジュールのみがサポートされています。 <a href="/ja/nodejs/api/esm#modules-ecmascript-modules">ECMAScript モジュール</a> をプリロードするには、<a href="/ja/nodejs/api/cli#importmodule"><code>--import</code></a> を使用してください。<code>--require</code> でプリロードされたモジュールは、<code>--import</code> でプリロードされたモジュールよりも先に実行されます。</p><p>モジュールは、メインスレッドだけでなく、すべてのワーカーースレッド、フォークされたプロセス、またはクラスタ化されたプロセスにプリロードされます。</p><h3 id="-r---require-module" tabindex="-1"><code>--run</code> <a class="header-anchor" href="#-r---require-module" aria-label="Permalink to “--run”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.3.0</td><td>NODE_RUN_SCRIPT_NAME 環境変数が追加されました。</td></tr><tr><td>v22.3.0</td><td>NODE_RUN_PACKAGE_JSON_PATH 環境変数が追加されました。</td></tr><tr><td>v22.3.0</td><td>ルートディレクトリまで遡って <code>package.json</code> ファイルを見つけ、そこからコマンドを実行し、それに応じて <code>PATH</code> 環境変数を更新します。</td></tr><tr><td>v22.0.0</td><td>Added in: v22.0.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定</p></div><p>これは、package.json の <code>&quot;scripts&quot;</code> オブジェクトから指定されたコマンドを実行します。 <code>&quot;command&quot;</code> が見つからない場合は、利用可能なスクリプトが一覧表示されます。</p><p><code>--run</code> はルートディレクトリまで遡って <code>package.json</code> ファイルを見つけ、そこからコマンドを実行します。</p><p><code>--run</code> は、現在のディレクトリの各親の <code>./node_modules/.bin</code> を <code>PATH</code> に追加して、複数の <code>node_modules</code> ディレクトリが存在する異なるフォルダからバイナリを実行できるようにします ( <code>ancestor-folder/node_modules/.bin</code> がディレクトリの場合)。</p><p><code>--run</code> は、関連する <code>package.json</code> を含むディレクトリでコマンドを実行します。</p><p>たとえば、次のコマンドは、現在のフォルダにある <code>package.json</code> の <code>test</code> スクリプトを実行します。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>コマンドに引数を渡すこともできます。 <code>--</code> の後の引数はすべて、スクリプトに追加されます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --verbose</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="--run" tabindex="-1">意図的な制限 <a class="header-anchor" href="#--run" aria-label="Permalink to “意図的な制限”">​</a></h4><p><code>node --run</code> は <code>npm run</code> や他のパッケージマネージャーの <code>run</code> コマンドの動作と一致することを意図していません。Node.js の実装は、最も一般的なユースケースにおいて最高のパフォーマンスに焦点を当てるため、意図的に制限されています。他の <code>run</code> 実装の一部の機能のうち、意図的に除外されているものは次のとおりです。</p><ul><li>指定されたスクリプトに加えて、<code>pre</code> または <code>post</code> スクリプトの実行。</li><li>パッケージマネージャー固有の環境変数の定義。</li></ul><h4 id="intentional-limitations" tabindex="-1">環境変数 <a class="header-anchor" href="#intentional-limitations" aria-label="Permalink to “環境変数”">​</a></h4><p><code>--run</code> でスクリプトを実行する際には、以下の環境変数が設定されます。</p><ul><li><code>NODE_RUN_SCRIPT_NAME</code>: 実行されているスクリプトの名前。たとえば、<code>--run</code> を使用して <code>test</code> を実行する場合、この変数の値は <code>test</code> になります。</li><li><code>NODE_RUN_PACKAGE_JSON_PATH</code>: 処理されている <code>package.json</code> へのパス。</li></ul><h3 id="environment-variables" tabindex="-1"><code>--secure-heap-min=n</code> <a class="header-anchor" href="#environment-variables" aria-label="Permalink to “--secure-heap-min=n”">​</a></h3><p><strong>追加: v15.6.0</strong></p><p><code>--secure-heap</code> を使用する場合、<code>--secure-heap-min</code> フラグはセキュアヒープからの最小割り当てを指定します。最小値は <code>2</code> です。最大値は <code>--secure-heap</code> または <code>2147483647</code> のいずれか小さい方です。指定された値は 2 の累乗である必要があります。</p><h3 id="--secure-heap-min=n" tabindex="-1"><code>--secure-heap=n</code> <a class="header-anchor" href="#--secure-heap-min=n" aria-label="Permalink to “--secure-heap=n”">​</a></h3><p><strong>追加: v15.6.0</strong></p><p><code>n</code> バイトの OpenSSL セキュアヒープを初期化します。初期化されると、セキュアヒープは、キーの生成やその他の操作中に OpenSSL 内の選択された種類の割り当てに使用されます。これは、たとえば、ポインタのオーバーランまたはアンダーランによって機密情報が漏洩するのを防ぐのに役立ちます。</p><p>セキュアヒープは固定サイズであり、実行時にサイズ変更できないため、使用する場合は、すべてのアプリケーションの使用をカバーするのに十分な大きさのヒープを選択することが重要です。</p><p>指定されたヒープサイズは 2 の累乗である必要があります。2 未満の値はセキュアヒープを無効にします。</p><p>セキュアヒープはデフォルトで無効になっています。</p><p>セキュアヒープは Windows では利用できません。</p><p>詳細については、<a href="https://www.openssl.org/docs/man3.0/man3/CRYPTO_secure_malloc_init" target="_blank" rel="noreferrer"><code>CRYPTO_secure_malloc_init</code></a> を参照してください。</p><h3 id="--secure-heap=n" tabindex="-1"><code>--snapshot-blob=path</code> <a class="header-anchor" href="#--secure-heap=n" aria-label="Permalink to “--snapshot-blob=path”">​</a></h3><p><strong>追加: v18.8.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 実験的</p></div><p><code>--build-snapshot</code> と共に使用すると、<code>--snapshot-blob</code> は、生成されたスナップショットブロブが書き込まれるパスを指定します。指定されていない場合、生成されたブロブは現在の作業ディレクトリの <code>snapshot.blob</code> に書き込まれます。</p><p><code>--build-snapshot</code> なしで使用すると、<code>--snapshot-blob</code> は、アプリケーションの状態を復元するために使用されるブロブへのパスを指定します。</p><p>スナップショットをロードすると、Node.js は以下を確認します。</p><p>一致しない場合、Node.js はスナップショットのロードを拒否し、ステータスコード 1 で終了します。</p><h3 id="--snapshot-blob=path" tabindex="-1"><code>--test</code> <a class="header-anchor" href="#--snapshot-blob=path" aria-label="Permalink to “--test”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v20.0.0</td><td>テストランナーが安定版になりました。</td></tr><tr><td>v19.2.0, v18.13.0</td><td>テストランナーがウォッチモードでの実行をサポートするようになりました。</td></tr><tr><td>v18.1.0, v16.17.0</td><td>v18.1.0、v16.17.0 で追加</td></tr></tbody></table></div><p>Node.js コマンドラインテストランナーを起動します。このフラグは、<code>--watch-path</code>、<code>--check</code>、<code>--eval</code>、<code>--interactive</code>、またはインスペクターと組み合わせることはできません。詳細については、<a href="/ja/nodejs/api/test#running-tests-from-the-command-line">コマンドラインからのテストの実行</a>に関するドキュメントを参照してください。</p><h3 id="--test" tabindex="-1"><code>--test-concurrency</code> <a class="header-anchor" href="#--test" aria-label="Permalink to “--test-concurrency”">​</a></h3><p><strong>追加: v21.0.0, v20.10.0, v18.19.0</strong></p><p>テストランナー CLI が同時実行するテストファイルの最大数。<code>--experimental-test-isolation</code> が <code>&#39;none&#39;</code> に設定されている場合、このフラグは無視され、並行処理は 1 になります。それ以外の場合、並行処理はデフォルトで <code>os.availableParallelism() - 1</code> になります。</p><h3 id="--test-concurrency" tabindex="-1"><code>--test-coverage-branches=threshold</code> <a class="header-anchor" href="#--test-concurrency" aria-label="Permalink to “--test-coverage-branches=threshold”">​</a></h3><p><strong>追加: v22.8.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 試験的</p></div><p>カバーされるブランチの最小パーセントを要求します。コードカバレッジが指定されたしきい値に達しない場合、プロセスはコード <code>1</code> で終了します。</p><h3 id="--test-coverage-branches=threshold" tabindex="-1"><code>--test-coverage-exclude</code> <a class="header-anchor" href="#--test-coverage-branches=threshold" aria-label="Permalink to “--test-coverage-exclude”">​</a></h3><p><strong>追加: v22.5.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 試験的</p></div><p>絶対ファイルパスと相対ファイルパスの両方に一致する可能性のあるグロブパターンを使用して、コードカバレッジから特定のファイルを除外します。</p><p>このオプションを複数回指定して、複数のグロブパターンを除外できます。</p><p><code>--test-coverage-exclude</code> と <code>--test-coverage-include</code> の両方が指定されている場合、ファイルはカバレッジレポートに含まれるために<strong>両方</strong>の基準を満たす必要があります。</p><p>デフォルトでは、一致するすべてのテストファイルがカバレッジレポートから除外されます。このオプションを指定すると、デフォルトの動作がオーバーライドされます。</p><h3 id="--test-coverage-exclude" tabindex="-1"><code>--test-coverage-functions=threshold</code> <a class="header-anchor" href="#--test-coverage-exclude" aria-label="Permalink to “--test-coverage-functions=threshold”">​</a></h3><p><strong>追加: v22.8.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 試験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 試験的</p></div><p>カバーされる関数の最小パーセントを要求します。コードカバレッジが指定されたしきい値に達しない場合、プロセスはコード <code>1</code> で終了します。</p><h3 id="--test-coverage-functions=threshold" tabindex="-1"><code>--test-coverage-include</code> <a class="header-anchor" href="#--test-coverage-functions=threshold" aria-label="Permalink to “--test-coverage-include”">​</a></h3><p><strong>Added in: v22.5.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 試験的</p></div><p>グロブパターンを使用してコードカバレッジに特定のファイルを含めます。グロブパターンは絶対ファイルパスと相対ファイルパスの両方に一致させることができます。</p><p>このオプションは、複数のグロブパターンを含めるために複数回指定できます。</p><p><code>--test-coverage-exclude</code> と <code>--test-coverage-include</code> の両方が指定されている場合、ファイルはカバレッジレポートに含めるためには <strong>両方</strong> の条件を満たす必要があります。</p><h3 id="--test-coverage-include" tabindex="-1"><code>--test-coverage-lines=threshold</code> <a class="header-anchor" href="#--test-coverage-include" aria-label="Permalink to “--test-coverage-lines=threshold”">​</a></h3><p><strong>Added in: v22.8.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 試験的</p></div><p>カバーされた行の最小パーセントを要求します。コードカバレッジが指定された閾値に達しない場合、プロセスはコード <code>1</code> で終了します。</p><h3 id="--test-coverage-lines=threshold" tabindex="-1"><code>--test-force-exit</code> <a class="header-anchor" href="#--test-coverage-lines=threshold" aria-label="Permalink to “--test-force-exit”">​</a></h3><p><strong>Added in: v22.0.0, v20.14.0</strong></p><p>既知のテストがすべて実行を終了した後でも、イベントループがアクティブなままである場合でも、プロセスを終了するようにテストランナーを構成します。</p><h3 id="--test-force-exit" tabindex="-1"><code>--test-name-pattern</code> <a class="header-anchor" href="#--test-force-exit" aria-label="Permalink to “--test-name-pattern”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v20.0.0</td><td>テストランナーが安定版になりました。</td></tr><tr><td>v18.11.0</td><td>Added in: v18.11.0</td></tr></tbody></table></div><p>指定されたパターンに名前が一致するテストのみを実行するようにテストランナーを構成する正規表現。詳細については、<a href="/ja/nodejs/api/test#filtering-tests-by-name">名前によるテストのフィルタリング</a>のドキュメントを参照してください。</p><p><code>--test-name-pattern</code> と <code>--test-skip-pattern</code> の両方が指定されている場合、テストを実行するには <strong>両方</strong> の要件を満たす必要があります。</p><h3 id="--test-name-pattern" tabindex="-1"><code>--test-only</code> <a class="header-anchor" href="#--test-name-pattern" aria-label="Permalink to “--test-only”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v20.0.0</td><td>テストランナーが安定版になりました。</td></tr><tr><td>v18.0.0, v16.17.0</td><td>Added in: v18.0.0, v16.17.0</td></tr></tbody></table></div><p><code>only</code> オプションが設定されているトップレベルテストのみを実行するようにテストランナーを構成します。テスト分離が無効になっている場合、このフラグは必要ありません。</p><h3 id="--test-only" tabindex="-1"><code>--test-reporter</code> <a class="header-anchor" href="#--test-only" aria-label="Permalink to “--test-reporter”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v20.0.0</td><td>テストランナーが安定版になりました。</td></tr><tr><td>v19.6.0, v18.15.0</td><td>Added in: v19.6.0, v18.15.0</td></tr></tbody></table></div><p>テストの実行時に使用するテストレポーター。<a href="/ja/nodejs/api/test#test-reporters">テストレポーター</a>のドキュメントで詳細を参照してください。</p><h3 id="--test-reporter" tabindex="-1"><code>--test-reporter-destination</code> <a class="header-anchor" href="#--test-reporter" aria-label="Permalink to “--test-reporter-destination”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v20.0.0</td><td>テストランナーが安定版になりました。</td></tr><tr><td>v19.6.0, v18.15.0</td><td>追加: v19.6.0, v18.15.0</td></tr></tbody></table></div><p>対応するテストレポーターの出力先を指定します。詳細については、<a href="/ja/nodejs/api/test#test-reporters">テストレポーター</a>のドキュメントを参照してください。</p><h3 id="--test-reporter-destination" tabindex="-1"><code>--test-shard</code> <a class="header-anchor" href="#--test-reporter-destination" aria-label="Permalink to “--test-shard”">​</a></h3><p><strong>追加: v20.5.0, v18.19.0</strong></p><p>実行するテストスイートのシャードを <code>\\&lt;index\\&gt;/\\&lt;total\\&gt;</code> の形式で指定します。ここで、</p><p><code>index</code> は正の整数で、分割された部分のインデックスです。<code>total</code> は正の整数で、分割された部分の合計です。このコマンドは、すべてのテストファイルを <code>total</code> 個の等しい部分に分割し、<code>index</code> の部分にあるものだけを実行します。</p><p>たとえば、テストスイートを 3 つの部分に分割するには、次のようにします。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test-shard=1/3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test-shard=2/3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test-shard=3/3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="--test-shard" tabindex="-1"><code>--test-skip-pattern</code> <a class="header-anchor" href="#--test-shard" aria-label="Permalink to “--test-skip-pattern”">​</a></h3><p><strong>追加: v22.1.0</strong></p><p>指定されたパターンに名前が一致するテストをスキップするようにテストランナーを設定する正規表現。詳細については、<a href="/ja/nodejs/api/test#filtering-tests-by-name">名前によるテストのフィルタリング</a>のドキュメントを参照してください。</p><p><code>--test-name-pattern</code> と <code>--test-skip-pattern</code> の両方が指定されている場合、テストを実行するには<strong>両方</strong>の要件を満たす必要があります。</p><h3 id="--test-skip-pattern" tabindex="-1"><code>--test-timeout</code> <a class="header-anchor" href="#--test-skip-pattern" aria-label="Permalink to “--test-timeout”">​</a></h3><p><strong>追加: v21.2.0, v20.11.0</strong></p><p>テストの実行が失敗するまでのミリ秒数。指定しない場合、サブテストはこの値を親から継承します。デフォルト値は <code>Infinity</code> です。</p><h3 id="--test-timeout" tabindex="-1"><code>--test-update-snapshots</code> <a class="header-anchor" href="#--test-timeout" aria-label="Permalink to “--test-update-snapshots”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v23.4.0</td><td>スナップショットテストは実験的ではなくなりました。</td></tr><tr><td>v22.3.0</td><td>追加: v22.3.0</td></tr></tbody></table></div><p><a href="/ja/nodejs/api/test#snapshot-testing">スナップショットテスト</a>のためにテストランナーで使用されるスナップショットファイルを再生成します。</p><h3 id="--test-update-snapshots" tabindex="-1"><code>--throw-deprecation</code> <a class="header-anchor" href="#--test-update-snapshots" aria-label="Permalink to “--throw-deprecation”">​</a></h3><p><strong>追加: v0.11.14</strong></p><p>非推奨でエラーをスローします。</p><h3 id="--throw-deprecation" tabindex="-1"><code>--title=title</code> <a class="header-anchor" href="#--throw-deprecation" aria-label="Permalink to “--title=title”">​</a></h3><p><strong>追加: v10.7.0</strong></p><p>起動時に <code>process.title</code> を設定します。</p><h3 id="--title=title" tabindex="-1"><code>--tls-cipher-list=list</code> <a class="header-anchor" href="#--title=title" aria-label="Permalink to “--tls-cipher-list=list”">​</a></h3><p><strong>追加: v4.0.0</strong></p><p>代替のデフォルト TLS 暗号リストを指定します。Node.js が crypto サポート (デフォルト) でビルドされている必要があります。</p><h3 id="--tls-cipher-list=list" tabindex="-1"><code>--tls-keylog=file</code> <a class="header-anchor" href="#--tls-cipher-list=list" aria-label="Permalink to “--tls-keylog=file”">​</a></h3><p><strong>Added in: v13.2.0, v12.16.0</strong></p><p>TLS鍵マテリアルをファイルに記録します。キーマテリアルはNSS <code>SSLKEYLOGFILE</code> 形式で、(Wiresharkなどの) TLSトラフィックを復号化するためにソフトウェアで使用できます。</p><h3 id="--tls-keylog=file" tabindex="-1"><code>--tls-max-v1.2</code> <a class="header-anchor" href="#--tls-keylog=file" aria-label="Permalink to “--tls-max-v1.2”">​</a></h3><p><strong>Added in: v12.0.0, v10.20.0</strong></p><p><a href="/ja/nodejs/api/tls#tlsdefault-max-version"><code>tls.DEFAULT_MAX_VERSION</code></a> を &#39;TLSv1.2&#39; に設定します。TLSv1.3 のサポートを無効にするために使用します。</p><h3 id="--tls-max-v12" tabindex="-1"><code>--tls-max-v1.3</code> <a class="header-anchor" href="#--tls-max-v12" aria-label="Permalink to “--tls-max-v1.3”">​</a></h3><p><strong>Added in: v12.0.0</strong></p><p>デフォルトの <a href="/ja/nodejs/api/tls#tlsdefault-max-version"><code>tls.DEFAULT_MAX_VERSION</code></a> を &#39;TLSv1.3&#39; に設定します。TLSv1.3 のサポートを有効にするために使用します。</p><h3 id="--tls-max-v13" tabindex="-1"><code>--tls-min-v1.0</code> <a class="header-anchor" href="#--tls-max-v13" aria-label="Permalink to “--tls-min-v1.0”">​</a></h3><p><strong>Added in: v12.0.0, v10.20.0</strong></p><p>デフォルトの <a href="/ja/nodejs/api/tls#tlsdefault-min-version"><code>tls.DEFAULT_MIN_VERSION</code></a> を &#39;TLSv1&#39; に設定します。古い TLS クライアントまたはサーバーとの互換性のために使用します。</p><h3 id="--tls-min-v10" tabindex="-1"><code>--tls-min-v1.1</code> <a class="header-anchor" href="#--tls-min-v10" aria-label="Permalink to “--tls-min-v1.1”">​</a></h3><p><strong>Added in: v12.0.0, v10.20.0</strong></p><p>デフォルトの <a href="/ja/nodejs/api/tls#tlsdefault-min-version"><code>tls.DEFAULT_MIN_VERSION</code></a> を &#39;TLSv1.1&#39; に設定します。古い TLS クライアントまたはサーバーとの互換性のために使用します。</p><h3 id="--tls-min-v11" tabindex="-1"><code>--tls-min-v1.2</code> <a class="header-anchor" href="#--tls-min-v11" aria-label="Permalink to “--tls-min-v1.2”">​</a></h3><p><strong>Added in: v12.2.0, v10.20.0</strong></p><p>デフォルトの <a href="/ja/nodejs/api/tls#tlsdefault-min-version"><code>tls.DEFAULT_MIN_VERSION</code></a> を &#39;TLSv1.2&#39; に設定します。これは 12.x 以降のデフォルトですが、このオプションは古い Node.js バージョンとの互換性のためにサポートされています。</p><h3 id="--tls-min-v12" tabindex="-1"><code>--tls-min-v1.3</code> <a class="header-anchor" href="#--tls-min-v12" aria-label="Permalink to “--tls-min-v1.3”">​</a></h3><p><strong>Added in: v12.0.0</strong></p><p>デフォルトの <a href="/ja/nodejs/api/tls#tlsdefault-min-version"><code>tls.DEFAULT_MIN_VERSION</code></a> を &#39;TLSv1.3&#39; に設定します。TLSv1.2 のサポートを無効にするために使用します。TLSv1.2 は TLSv1.3 ほど安全ではありません。</p><h3 id="--tls-min-v13" tabindex="-1"><code>--trace-deprecation</code> <a class="header-anchor" href="#--tls-min-v13" aria-label="Permalink to “--trace-deprecation”">​</a></h3><p><strong>Added in: v0.8.0</strong></p><p>非推奨のスタックトレースを表示します。</p><h3 id="--trace-deprecation" tabindex="-1"><code>--trace-env</code> <a class="header-anchor" href="#--trace-deprecation" aria-label="Permalink to “--trace-env”">​</a></h3><p><strong>Added in: v23.4.0</strong></p><p>現在の Node.js インスタンスで実行された環境変数へのアクセスに関する情報を stderr に出力します。</p><ul><li>Node.js が内部的に行う環境変数の読み取り。</li><li><code>process.env.KEY = &quot;SOME VALUE&quot;</code> 形式の書き込み。</li><li><code>process.env.KEY</code> 形式の読み取り。</li><li><code>Object.defineProperty(process.env, &#39;KEY&#39;, {...})</code> 形式の定義。</li><li><code>Object.hasOwn(process.env, &#39;KEY&#39;)</code>、<code>process.env.hasOwnProperty(&#39;KEY&#39;)</code>、または <code>&#39;KEY&#39; in process.env</code> 形式のクエリ。</li><li><code>delete process.env.KEY</code> 形式の削除。</li><li><code>...process.env</code> または <code>Object.keys(process.env)</code> 形式の列挙。</li></ul><p>アクセスされている環境変数の名前のみが出力されます。値は出力されません。</p><p>アクセス時のスタックトレースを出力するには、<code>--trace-env-js-stack</code> または <code>--trace-env-native-stack</code> を使用してください。</p><h3 id="--trace-env" tabindex="-1"><code>--trace-env-js-stack</code> <a class="header-anchor" href="#--trace-env" aria-label="Permalink to “--trace-env-js-stack”">​</a></h3><p><strong>追加:</strong> v23.4.0</p><p><code>--trace-env</code> の機能に加え、アクセス時の JavaScript スタックトレースを出力します。</p><h3 id="--trace-env-js-stack" tabindex="-1"><code>--trace-env-native-stack</code> <a class="header-anchor" href="#--trace-env-js-stack" aria-label="Permalink to “--trace-env-native-stack”">​</a></h3><p><strong>追加:</strong> v23.4.0</p><p><code>--trace-env</code> の機能に加え、アクセス時のネイティブスタックトレースを出力します。</p><h3 id="--trace-env-native-stack" tabindex="-1"><code>--trace-event-categories</code> <a class="header-anchor" href="#--trace-env-native-stack" aria-label="Permalink to “--trace-event-categories”">​</a></h3><p><strong>追加:</strong> v7.7.0</p><p><code>--trace-events-enabled</code> を使用してトレースイベントトレースが有効になっている場合にトレースされるべきカテゴリのカンマ区切りリスト。</p><h3 id="--trace-event-categories" tabindex="-1"><code>--trace-event-file-pattern</code> <a class="header-anchor" href="#--trace-event-categories" aria-label="Permalink to “--trace-event-file-pattern”">​</a></h3><p><strong>追加:</strong> v9.8.0</p><p>トレースイベントデータのファイルパスを指定するテンプレート文字列。<code>\${rotation}</code> と <code>\${pid}</code> をサポートします。</p><h3 id="--trace-event-file-pattern" tabindex="-1"><code>--trace-events-enabled</code> <a class="header-anchor" href="#--trace-event-file-pattern" aria-label="Permalink to “--trace-events-enabled”">​</a></h3><p><strong>追加:</strong> v7.7.0</p><p>トレースイベントトレース情報の収集を有効にします。</p><h3 id="--trace-events-enabled" tabindex="-1"><code>--trace-exit</code> <a class="header-anchor" href="#--trace-events-enabled" aria-label="Permalink to “--trace-exit”">​</a></h3><p><strong>追加:</strong> v13.5.0, v12.16.0</p><p>環境が積極的に終了するたびに、つまり <code>process.exit()</code> を呼び出すたびに、スタックトレースを出力します。</p><h3 id="--trace-exit" tabindex="-1"><code>--trace-require-module=mode</code> <a class="header-anchor" href="#--trace-exit" aria-label="Permalink to “--trace-require-module=mode”">​</a></h3><p><strong>追加:</strong> v23.5.0</p><p><a href="/ja/nodejs/api/modules#loading-ecmascript-modules-using-require"><code>require()</code> を使用した ECMAScript モジュールのロード</a> の使用状況に関する情報を出力します。</p><p><code>mode</code> が <code>all</code> の場合、すべての使用状況が出力されます。 <code>mode</code> が <code>no-node-modules</code> の場合、<code>node_modules</code> フォルダからの使用状況は除外されます。</p><h3 id="--trace-require-module=mode" tabindex="-1"><code>--trace-sigint</code> <a class="header-anchor" href="#--trace-require-module=mode" aria-label="Permalink to “--trace-sigint”">​</a></h3><p><strong>追加:</strong> v13.9.0, v12.17.0</p><p>SIGINT でスタックトレースを出力します。</p><h3 id="--trace-sigint" tabindex="-1"><code>--trace-sync-io</code> <a class="header-anchor" href="#--trace-sigint" aria-label="Permalink to “--trace-sync-io”">​</a></h3><p><strong>追加:</strong> v2.1.0</p><p>イベントループの最初のターン後に同期 I/O が検出されるたびにスタックトレースを出力します。</p><h3 id="--trace-sync-io" tabindex="-1"><code>--trace-tls</code> <a class="header-anchor" href="#--trace-sync-io" aria-label="Permalink to “--trace-tls”">​</a></h3><p><strong>追加:</strong> v12.2.0</p><p>TLS パケットトレース情報を <code>stderr</code> に出力します。 これは TLS 接続の問題をデバッグするために使用できます。</p><h3 id="--trace-tls" tabindex="-1"><code>--trace-uncaught</code> <a class="header-anchor" href="#--trace-tls" aria-label="Permalink to “--trace-uncaught”">​</a></h3><p><strong>追加:</strong> v13.1.0</p><p>キャッチされない例外のスタックトレースを出力します。 通常、<code>Error</code> の作成に関連付けられたスタックトレースが出力されますが、これにより Node.js は値のスローに関連付けられたスタックトレースも出力します (これは <code>Error</code> インスタンスである必要はありません)。</p><p>このオプションを有効にすると、ガベージコレクションの動作に悪影響を与える可能性があります。</p><h3 id="--trace-uncaught" tabindex="-1"><code>--trace-warnings</code> <a class="header-anchor" href="#--trace-uncaught" aria-label="Permalink to “--trace-warnings”">​</a></h3><p><strong>追加:</strong> v6.0.0</p><p>プロセスの警告（非推奨を含む）のスタックトレースを出力します。</p><h3 id="--trace-warnings" tabindex="-1"><code>--track-heap-objects</code> <a class="header-anchor" href="#--trace-warnings" aria-label="Permalink to “--track-heap-objects”">​</a></h3><p><strong>追加:</strong> v2.4.0</p><p>ヒープスナップショットのためにヒープオブジェクトの割り当てを追跡します。</p><h3 id="--track-heap-objects" tabindex="-1"><code>--unhandled-rejections=mode</code> <a class="header-anchor" href="#--track-heap-objects" aria-label="Permalink to “--unhandled-rejections=mode”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v15.0.0</td><td>デフォルトモードを <code>throw</code> に変更しました。以前は、警告が出力されていました。</td></tr><tr><td>v12.0.0, v10.17.0</td><td>追加: v12.0.0, v10.17.0</td></tr></tbody></table></div><p>このフラグを使用すると、未処理のリジェクションが発生したときに何が起こるかを変更できます。次のいずれかのモードを選択できます。</p><ul><li><code>throw</code>: <a href="/ja/nodejs/api/process#event-unhandledrejection"><code>unhandledRejection</code></a> を発行します。このフックが設定されていない場合は、未処理のリジェクションをキャッチされない例外として発生させます。これがデフォルトです。</li><li><code>strict</code>: 未処理のリジェクションをキャッチされない例外として発生させます。例外が処理された場合、<a href="/ja/nodejs/api/process#event-unhandledrejection"><code>unhandledRejection</code></a> が発行されます。</li><li><code>warn</code>: <a href="/ja/nodejs/api/process#event-unhandledrejection"><code>unhandledRejection</code></a> フックが設定されているかどうかに関係なく、常に警告をトリガーしますが、非推奨の警告は出力しません。</li><li><code>warn-with-error-code</code>: <a href="/ja/nodejs/api/process#event-unhandledrejection"><code>unhandledRejection</code></a> を発行します。このフックが設定されていない場合は、警告をトリガーし、プロセスの終了コードを 1 に設定します。</li><li><code>none</code>: すべての警告を抑制します。</li></ul><p>コマンドラインのエントリポイントの ES モジュール静的ロードフェーズ中にリジェクションが発生した場合、常にキャッチされない例外として発生します。</p><h3 id="--unhandled-rejections=mode" tabindex="-1"><code>--use-bundled-ca</code>, <code>--use-openssl-ca</code> <a class="header-anchor" href="#--unhandled-rejections=mode" aria-label="Permalink to “--use-bundled-ca, --use-openssl-ca”">​</a></h3><p><strong>追加:</strong> v6.11.0</p><p>現在の Node.js バージョンで提供されているバンドルされた Mozilla CA ストアを使用するか、OpenSSL のデフォルト CA ストアを使用します。デフォルトのストアは、ビルド時に選択できます。</p><p>Node.js によって提供されるバンドルされた CA ストアは、リリース時に固定された Mozilla CA ストアのスナップショットです。サポートされているすべてのプラットフォームで同一です。</p><p>OpenSSL ストアを使用すると、ストアを外部から変更できます。ほとんどの Linux および BSD ディストリビューションでは、このストアはディストリビューションのメンテナおよびシステム管理者によって維持されています。OpenSSL CA ストアの場所は OpenSSL ライブラリの構成に依存しますが、環境変数を使用して実行時に変更できます。</p><p><code>SSL_CERT_DIR</code> および <code>SSL_CERT_FILE</code> を参照してください。</p><h3 id="--use-bundled-ca---use-openssl-ca" tabindex="-1"><code>--use-largepages=mode</code> <a class="header-anchor" href="#--use-bundled-ca---use-openssl-ca" aria-label="Permalink to “--use-largepages=mode”">​</a></h3><p><strong>Added in: v13.6.0, v12.17.0</strong></p><p>Node.jsの静的コードを起動時に大きなメモリページに再マップします。ターゲットシステムでサポートされている場合、これにより、Node.jsの静的コードが4 KiBページではなく2 MiBページに移動されます。</p><p><code>mode</code>に有効な値は次のとおりです。</p><ul><li><code>off</code>: マッピングは試行されません。これがデフォルトです。</li><li><code>on</code>: OSでサポートされている場合、マッピングが試行されます。マッピングに失敗しても無視され、メッセージが標準エラーに出力されます。</li><li><code>silent</code>: OSでサポートされている場合、マッピングが試行されます。マッピングに失敗しても無視され、報告されません。</li></ul><h3 id="--use-largepages=mode" tabindex="-1"><code>--v8-options</code> <a class="header-anchor" href="#--use-largepages=mode" aria-label="Permalink to “--v8-options”">​</a></h3><p><strong>Added in: v0.1.3</strong></p><p>V8のコマンドラインオプションを出力します。</p><h3 id="--v8-options" tabindex="-1"><code>--v8-pool-size=num</code> <a class="header-anchor" href="#--v8-options" aria-label="Permalink to “--v8-pool-size=num”">​</a></h3><p><strong>Added in: v5.10.0</strong></p><p>バックグラウンドジョブの割り当てに使用されるV8のスレッドプールサイズを設定します。</p><p><code>0</code>に設定すると、Node.jsは並列処理の推定量に基づいて、スレッドプールの適切なサイズを選択します。</p><p>並列処理の量は、特定のマシンで同時に実行できる計算の数です。一般的に、CPUの数と同じですが、VMやコンテナなどの環境では異なる場合があります。</p><h3 id="--v8-pool-size=num" tabindex="-1"><code>-v</code>, <code>--version</code> <a class="header-anchor" href="#--v8-pool-size=num" aria-label="Permalink to “-v, --version”">​</a></h3><p><strong>Added in: v0.1.3</strong></p><p>Nodeのバージョンを出力します。</p><h3 id="-v---version" tabindex="-1"><code>--watch</code> <a class="header-anchor" href="#-v---version" aria-label="Permalink to “--watch”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v22.0.0, v20.13.0</td><td>ウォッチモードが安定しました。</td></tr><tr><td>v19.2.0, v18.13.0</td><td>テストランナーがウォッチモードでの実行をサポートするようになりました。</td></tr><tr><td>v18.11.0, v16.19.0</td><td>Added in: v18.11.0, v16.19.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定</p></div><p>Node.jsをウォッチモードで起動します。ウォッチモードでは、監視対象ファイルの変更により、Node.jsプロセスが再起動されます。デフォルトでは、ウォッチモードはエントリポイントと、requireまたはimportされたモジュールを監視します。監視するパスを指定するには、<code>--watch-path</code>を使用します。</p><p>このフラグは、<code>--check</code>、<code>--eval</code>、<code>--interactive</code>、またはREPLと組み合わせて使用​​することはできません。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="--watch" tabindex="-1"><code>--watch-path</code> <a class="header-anchor" href="#--watch" aria-label="Permalink to “--watch-path”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v22.0.0, v20.13.0</td><td>ウォッチモードが安定版になりました。</td></tr><tr><td>v18.11.0, v16.19.0</td><td>追加: v18.11.0, v16.19.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定</p></div><p>Node.js をウォッチモードで起動し、監視するパスを指定します。 ウォッチモードでは、監視対象パスの変更により Node.js プロセスが再起動されます。 これは、<code>--watch</code> と組み合わせて使用した場合でも、require または import されたモジュールの監視をオフにします。</p><p>このフラグは、<code>--check</code>、<code>--eval</code>、<code>--interactive</code>、<code>--test</code>、または REPL と組み合わせて使用することはできません。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch-path=./src</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch-path=./tests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>このオプションは、macOS および Windows でのみサポートされています。 オプションがサポートされていないプラットフォームで使用すると、<code>ERR_FEATURE_UNAVAILABLE_ON_PLATFORM</code> 例外がスローされます。</p><h3 id="--watch-path" tabindex="-1"><code>--watch-preserve-output</code> <a class="header-anchor" href="#--watch-path" aria-label="Permalink to “--watch-preserve-output”">​</a></h3><p><strong>追加: v19.3.0, v18.13.0</strong></p><p>ウォッチモードがプロセスを再起動するときに、コンソールのクリアを無効にします。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch-preserve-output</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="--watch-preserve-output" tabindex="-1"><code>--zero-fill-buffers</code> <a class="header-anchor" href="#--watch-preserve-output" aria-label="Permalink to “--zero-fill-buffers”">​</a></h3><p><strong>追加: v6.0.0</strong></p><p>新しく割り当てられたすべての <a href="/ja/nodejs/api/buffer#class-buffer"><code>Buffer</code></a> および <a href="/ja/nodejs/api/buffer#class-slowbuffer"><code>SlowBuffer</code></a> インスタンスを自動的にゼロで埋めます。</p><h2 id="--zero-fill-buffers" tabindex="-1">環境変数 <a class="header-anchor" href="#--zero-fill-buffers" aria-label="Permalink to “環境変数”">​</a></h2><h3 id="environment-variables_1" tabindex="-1"><code>FORCE_COLOR=[1, 2, 3]</code> <a class="header-anchor" href="#environment-variables_1" aria-label="Permalink to “FORCE_COLOR=[1, 2, 3]”">​</a></h3><p><code>FORCE_COLOR</code> 環境変数は、ANSI カラー出力の有効化に使用されます。 値は次のいずれかです。</p><ul><li><code>1</code>、<code>true</code>、または空の文字列 <code>&#39;&#39;</code> は 16 色のサポートを示します。</li><li><code>2</code> は 256 色のサポートを示します。</li><li><code>3</code> は 1600 万色のサポートを示します。</li></ul><p><code>FORCE_COLOR</code> が使用され、サポートされている値に設定されている場合、<code>NO_COLOR</code> および <code>NODE_DISABLE_COLORS</code> 環境変数は無視されます。</p><p>他の値を使用すると、カラー出力は無効になります。</p><h3 id="force_color=1-2-3" tabindex="-1"><code>NODE_COMPILE_CACHE=dir</code> <a class="header-anchor" href="#force_color=1-2-3" aria-label="Permalink to “NODE_COMPILE_CACHE=dir”">​</a></h3><p><strong>追加: v22.1.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a>.1 - 活発な開発</p></div><p>Node.js インスタンスの<a href="/ja/nodejs/api/module#module-compile-cache">モジュールコンパイルキャッシュ</a>を有効にします。 詳細については、<a href="/ja/nodejs/api/module#module-compile-cache">モジュールコンパイルキャッシュ</a>のドキュメントを参照してください。</p><h3 id="node_compile_cache=dir" tabindex="-1"><code>NODE_DEBUG=module[,…]</code> <a class="header-anchor" href="#node_compile_cache=dir" aria-label="Permalink to “NODE_DEBUG=module[,…]”">​</a></h3><p><strong>追加:</strong> v0.1.32</p><p>デバッグ情報を出力するコアモジュールを <code>&#39;,&#39;</code> で区切ったリスト。</p><h3 id="node_debug=module" tabindex="-1"><code>NODE_DEBUG_NATIVE=module[,…]</code> <a class="header-anchor" href="#node_debug=module" aria-label="Permalink to “NODE_DEBUG_NATIVE=module[,…]”">​</a></h3><p>デバッグ情報を出力するコア C++ モジュールを <code>&#39;,&#39;</code> で区切ったリスト。</p><h3 id="node_debug_native=module" tabindex="-1"><code>NODE_DISABLE_COLORS=1</code> <a class="header-anchor" href="#node_debug_native=module" aria-label="Permalink to “NODE_DISABLE_COLORS=1”">​</a></h3><p><strong>追加:</strong> v0.3.0</p><p>設定すると、REPL で色が使用されなくなります。</p><h3 id="node_disable_colors=1" tabindex="-1"><code>NODE_DISABLE_COMPILE_CACHE=1</code> <a class="header-anchor" href="#node_disable_colors=1" aria-label="Permalink to “NODE_DISABLE_COMPILE_CACHE=1”">​</a></h3><p><strong>追加:</strong> v22.8.0</p><div class="warning custom-block"><p class="custom-block-title">[安定: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定: 1</a>.1 - 活発な開発</p></div><p>Node.js インスタンスの<a href="/ja/nodejs/api/module#module-compile-cache">モジュールコンパイルキャッシュ</a>を無効にします。詳細については、<a href="/ja/nodejs/api/module#module-compile-cache">モジュールコンパイルキャッシュ</a>のドキュメントを参照してください。</p><h3 id="node_disable_compile_cache=1" tabindex="-1"><code>NODE_EXTRA_CA_CERTS=file</code> <a class="header-anchor" href="#node_disable_compile_cache=1" aria-label="Permalink to “NODE_EXTRA_CA_CERTS=file”">​</a></h3><p><strong>追加:</strong> v7.3.0</p><p>設定すると、既知の &quot;ルート&quot; CA (VeriSign など) が <code>file</code> 内の追加の証明書で拡張されます。ファイルは、PEM 形式の 1 つ以上の信頼できる証明書で構成されている必要があります。ファイルが見つからないか、形式が正しくない場合、<a href="/ja/nodejs/api/process#processemitwarningwarning-options"><code>process.emitWarning()</code></a> でメッセージが (一度) 発行されますが、それ以外のエラーは無視されます。</p><p>TLS または HTTPS クライアントまたはサーバーに <code>ca</code> オプションプロパティが明示的に指定されている場合、既知の証明書も追加の証明書も使用されません。</p><p>この環境変数は、<code>node</code> が setuid root として実行されているか、Linux ファイルの機能が設定されている場合は無視されます。</p><p><code>NODE_EXTRA_CA_CERTS</code> 環境変数は、Node.js プロセスの初回起動時にのみ読み取られます。実行時に <code>process.env.NODE_EXTRA_CA_CERTS</code> を使用して値を変更しても、現在のプロセスには影響しません。</p><h3 id="node_extra_ca_certs=file" tabindex="-1"><code>NODE_ICU_DATA=file</code> <a class="header-anchor" href="#node_extra_ca_certs=file" aria-label="Permalink to “NODE_ICU_DATA=file”">​</a></h3><p><strong>追加:</strong> v0.11.15</p><p>ICU (<code>Intl</code> オブジェクト) データ用のデータパス。 small-icu サポートでコンパイルすると、リンクされたデータが拡張されます。</p><h3 id="node_icu_data=file" tabindex="-1"><code>NODE_NO_WARNINGS=1</code> <a class="header-anchor" href="#node_icu_data=file" aria-label="Permalink to “NODE_NO_WARNINGS=1”">​</a></h3><p><strong>追加:</strong> v6.11.0</p><p><code>1</code> に設定すると、プロセスの警告は抑制されます。</p><h3 id="node_no_warnings=1" tabindex="-1"><code>NODE_OPTIONS=options...</code> <a class="header-anchor" href="#node_no_warnings=1" aria-label="Permalink to “NODE_OPTIONS=options...”">​</a></h3><p><strong>追加:</strong> v8.0.0</p><p>空白で区切られたコマンドラインオプションのリスト。 <code>options...</code> はコマンドラインオプションの前に解釈されるため、コマンドラインオプションは <code>options...</code> の内容の後にオーバーライドまたは合成されます。環境で許可されていないオプション ( <code>-p</code> やスクリプトファイルなど) を使用すると、Node.js はエラーで終了します。</p><p>オプションの値にスペースが含まれている場合は、二重引用符を使用してエスケープできます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_OPTIONS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;--require &quot;./my path/file.js&quot;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>コマンドラインオプションとして渡されたシングルトンフラグは、<code>NODE_OPTIONS</code> に渡された同じフラグをオーバーライドします。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># インスペクターはポート 5555 で利用可能になります {#node_options=options}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_OPTIONS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;--inspect=localhost:4444&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inspect=localhost:5555</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>複数回渡すことができるフラグは、<code>NODE_OPTIONS</code> のインスタンスが最初に渡され、次にコマンドラインインスタンスが渡されたかのように扱われます。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_OPTIONS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;--require &quot;./a.js&quot;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./b.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># は以下と同等です: {#the-inspector-will-be-available-on-port-5555}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./a.js&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./b.js&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>許可されている Node.js オプションは、次のリストにあります。オプションが <code>--XX</code> と <code>--no-XX</code> の両方のバリアントをサポートしている場合、両方がサポートされますが、以下のリストには 1 つのみが含まれています。</p><ul><li><code>--allow-addons</code></li><li><code>--allow-child-process</code></li><li><code>--allow-fs-read</code></li><li><code>--allow-fs-write</code></li><li><code>--allow-wasi</code></li><li><code>--allow-worker</code></li><li><code>--conditions</code>, <code>-C</code></li><li><code>--diagnostic-dir</code></li><li><code>--disable-proto</code></li><li><code>--disable-warning</code></li><li><code>--disable-wasm-trap-handler</code></li><li><code>--dns-result-order</code></li><li><code>--enable-fips</code></li><li><code>--enable-network-family-autoselection</code></li><li><code>--enable-source-maps</code></li><li><code>--entry-url</code></li><li><code>--experimental-abortcontroller</code></li><li><code>--experimental-async-context-frame</code></li><li><code>--experimental-detect-module</code></li><li><code>--experimental-eventsource</code></li><li><code>--experimental-import-meta-resolve</code></li><li><code>--experimental-json-modules</code></li><li><code>--experimental-loader</code></li><li><code>--experimental-modules</code></li><li><code>--experimental-permission</code></li><li><code>--experimental-print-required-tla</code></li><li><code>--experimental-require-module</code></li><li><code>--experimental-shadow-realm</code></li><li><code>--experimental-specifier-resolution</code></li><li><code>--experimental-strip-types</code></li><li><code>--experimental-top-level-await</code></li><li><code>--experimental-transform-types</code></li><li><code>--experimental-vm-modules</code></li><li><code>--experimental-wasi-unstable-preview1</code></li><li><code>--experimental-wasm-modules</code></li><li><code>--experimental-webstorage</code></li><li><code>--force-context-aware</code></li><li><code>--force-fips</code></li><li><code>--force-node-api-uncaught-exceptions-policy</code></li><li><code>--frozen-intrinsics</code></li><li><code>--heap-prof-dir</code></li><li><code>--heap-prof-interval</code></li><li><code>--heap-prof-name</code></li><li><code>--heap-prof</code></li><li><code>--heapsnapshot-near-heap-limit</code></li><li><code>--heapsnapshot-signal</code></li><li><code>--http-parser</code></li><li><code>--icu-data-dir</code></li><li><code>--import</code></li><li><code>--input-type</code></li><li><code>--insecure-http-parser</code></li><li><code>--inspect-brk</code></li><li><code>--inspect-port</code>, <code>--debug-port</code></li><li><code>--inspect-publish-uid</code></li><li><code>--inspect-wait</code></li><li><code>--inspect</code></li><li><code>--localstorage-file</code></li><li><code>--max-http-header-size</code></li><li><code>--napi-modules</code></li><li><code>--network-family-autoselection-attempt-timeout</code></li><li><code>--no-addons</code></li><li><code>--no-deprecation</code></li><li><code>--no-experimental-global-navigator</code></li><li><code>--no-experimental-repl-await</code></li><li><code>--no-experimental-sqlite</code></li><li><code>--no-experimental-websocket</code></li><li><code>--no-extra-info-on-fatal-exception</code></li><li><code>--no-force-async-hooks-checks</code></li><li><code>--no-global-search-paths</code></li><li><code>--no-network-family-autoselection</code></li><li><code>--no-warnings</code></li><li><code>--node-memory-debug</code></li><li><code>--openssl-config</code></li><li><code>--openssl-legacy-provider</code></li><li><code>--openssl-shared-config</code></li><li><code>--pending-deprecation</code></li><li><code>--permission</code></li><li><code>--preserve-symlinks-main</code></li><li><code>--preserve-symlinks</code></li><li><code>--prof-process</code></li><li><code>--redirect-warnings</code></li><li><code>--report-compact</code></li><li><code>--report-dir</code>, <code>--report-directory</code></li><li><code>--report-exclude-env</code></li><li><code>--report-exclude-network</code></li><li><code>--report-filename</code></li><li><code>--report-on-fatalerror</code></li><li><code>--report-on-signal</code></li><li><code>--report-signal</code></li><li><code>--report-uncaught-exception</code></li><li><code>--require</code>, <code>-r</code></li><li><code>--secure-heap-min</code></li><li><code>--secure-heap</code></li><li><code>--snapshot-blob</code></li><li><code>--test-coverage-branches</code></li><li><code>--test-coverage-exclude</code></li><li><code>--test-coverage-functions</code></li><li><code>--test-coverage-include</code></li><li><code>--test-coverage-lines</code></li><li><code>--test-name-pattern</code></li><li><code>--test-only</code></li><li><code>--test-reporter-destination</code></li><li><code>--test-reporter</code></li><li><code>--test-shard</code></li><li><code>--test-skip-pattern</code></li><li><code>--throw-deprecation</code></li><li><code>--title</code></li><li><code>--tls-cipher-list</code></li><li><code>--tls-keylog</code></li><li><code>--tls-max-v1.2</code></li><li><code>--tls-max-v1.3</code></li><li><code>--tls-min-v1.0</code></li><li><code>--tls-min-v1.1</code></li><li><code>--tls-min-v1.2</code></li><li><code>--tls-min-v1.3</code></li><li><code>--trace-deprecation</code></li><li><code>--trace-env-js-stack</code></li><li><code>--trace-env-native-stack</code></li><li><code>--trace-env</code></li><li><code>--trace-event-categories</code></li><li><code>--trace-event-file-pattern</code></li><li><code>--trace-events-enabled</code></li><li><code>--trace-exit</code></li><li><code>--trace-require-module</code></li><li><code>--trace-sigint</code></li><li><code>--trace-sync-io</code></li><li><code>--trace-tls</code></li><li><code>--trace-uncaught</code></li><li><code>--trace-warnings</code></li><li><code>--track-heap-objects</code></li><li><code>--unhandled-rejections</code></li><li><code>--use-bundled-ca</code></li><li><code>--use-largepages</code></li><li><code>--use-openssl-ca</code></li><li><code>--v8-pool-size</code></li><li><code>--watch-path</code></li><li><code>--watch-preserve-output</code></li><li><code>--watch</code></li><li><code>--zero-fill-buffers</code></li></ul><p>許可されている V8 オプションは次のとおりです。</p><ul><li><code>--abort-on-uncaught-exception</code></li><li><code>--disallow-code-generation-from-strings</code></li><li><code>--enable-etw-stack-walking</code></li><li><code>--expose-gc</code></li><li><code>--interpreted-frames-native-stack</code></li><li><code>--jitless</code></li><li><code>--max-old-space-size</code></li><li><code>--max-semi-space-size</code></li><li><code>--perf-basic-prof-only-functions</code></li><li><code>--perf-basic-prof</code></li><li><code>--perf-prof-unwinding-info</code></li><li><code>--perf-prof</code></li><li><code>--stack-trace-limit</code></li></ul><p><code>--perf-basic-prof-only-functions</code>、<code>--perf-basic-prof</code>、<code>--perf-prof-unwinding-info</code>、および <code>--perf-prof</code> は Linux でのみ使用できます。</p><p><code>--enable-etw-stack-walking</code> は Windows でのみ使用できます。</p><h3 id="is-equivalent-to" tabindex="-1"><code>NODE_PATH=path[:…]</code> <a class="header-anchor" href="#is-equivalent-to" aria-label="Permalink to “NODE_PATH=path[:…]”">​</a></h3><p><strong>追加:</strong> v0.1.32</p><p>モジュール検索パスの先頭に追加されるディレクトリの <code>&#39;:&#39;</code> で区切られたリストです。</p><p>Windows では、代わりに <code>&#39;;&#39;</code> で区切られたリストになります。</p><h3 id="node_path=path" tabindex="-1"><code>NODE_PENDING_DEPRECATION=1</code> <a class="header-anchor" href="#node_path=path" aria-label="Permalink to “NODE_PENDING_DEPRECATION=1”">​</a></h3><p><strong>追加:</strong> v8.0.0</p><p><code>1</code> に設定すると、保留中の非推奨警告を発行します。</p><p>保留中の非推奨は、一般的にランタイムの非推奨と同じですが、デフォルトで <em>オフ</em> になっており、<code>--pending-deprecation</code> コマンドラインフラグまたは <code>NODE_PENDING_DEPRECATION=1</code> 環境変数が設定されない限り発行されないという点で顕著な例外があります。保留中の非推奨は、開発者が非推奨のAPI使用を検出するために活用できる一種の選択的な「早期警告」メカニズムを提供するために使用されます。</p><h3 id="node_pending_deprecation=1" tabindex="-1"><code>NODE_PENDING_PIPE_INSTANCES=instances</code> <a class="header-anchor" href="#node_pending_deprecation=1" aria-label="Permalink to “NODE_PENDING_PIPE_INSTANCES=instances”">​</a></h3><p>パイプサーバーが接続を待機しているときに保留中のパイプインスタンスハンドルの数を設定します。この設定は Windows のみに適用されます。</p><h3 id="node_pending_pipe_instances=instances" tabindex="-1"><code>NODE_PRESERVE_SYMLINKS=1</code> <a class="header-anchor" href="#node_pending_pipe_instances=instances" aria-label="Permalink to “NODE_PRESERVE_SYMLINKS=1”">​</a></h3><p><strong>追加:</strong> v7.1.0</p><p><code>1</code> に設定すると、モジュールを解決してキャッシュするときに、モジュールローダーにシンボリックリンクを保持するように指示します。</p><h3 id="node_preserve_symlinks=1" tabindex="-1"><code>NODE_REDIRECT_WARNINGS=file</code> <a class="header-anchor" href="#node_preserve_symlinks=1" aria-label="Permalink to “NODE_REDIRECT_WARNINGS=file”">​</a></h3><p><strong>追加:</strong> v8.0.0</p><p>設定すると、プロセスの警告は stderr に出力する代わりに、指定されたファイルに出力されます。ファイルが存在しない場合は作成され、存在する場合は追加されます。警告をファイルに書き込もうとしたときにエラーが発生した場合、警告は代わりに stderr に書き込まれます。これは、<code>--redirect-warnings=file</code> コマンドラインフラグを使用するのと同じです。</p><h3 id="node_redirect_warnings=file" tabindex="-1"><code>NODE_REPL_EXTERNAL_MODULE=file</code> <a class="header-anchor" href="#node_redirect_warnings=file" aria-label="Permalink to “NODE_REPL_EXTERNAL_MODULE=file”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v22.3.0, v20.16.0</td><td>エンベッダー向けの kDisableNodeOptionsEnv でこの環境変数を使用する可能性を削除しました。</td></tr><tr><td>v13.0.0, v12.16.0</td><td>追加: v13.0.0, v12.16.0</td></tr></tbody></table></div><p>組み込み REPL の代わりに使用される Node.js モジュールへのパス。この値を空文字列 (<code>&#39;&#39;</code>) で上書きすると、組み込み REPL が使用されます。</p><h3 id="node_repl_external_module=file" tabindex="-1"><code>NODE_REPL_HISTORY=file</code> <a class="header-anchor" href="#node_repl_external_module=file" aria-label="Permalink to “NODE_REPL_HISTORY=file”">​</a></h3><p><strong>追加:</strong> v3.0.0</p><p>永続的な REPL 履歴を保存するために使用されるファイルへのパス。デフォルトのパスは <code>~/.node_repl_history</code> であり、この変数によって上書きされます。値を空文字列 (<code>&#39;&#39;</code> または <code>&#39; &#39;</code>) に設定すると、永続的な REPL 履歴が無効になります。</p><h3 id="node_repl_history=file" tabindex="-1"><code>NODE_SKIP_PLATFORM_CHECK=value</code> <a class="header-anchor" href="#node_repl_history=file" aria-label="Permalink to “NODE_SKIP_PLATFORM_CHECK=value”">​</a></h3><p><strong>追加: v14.5.0</strong></p><p><code>value</code> が <code>&#39;1&#39;</code> に等しい場合、Node.js の起動時にサポートされているプラットフォームのチェックがスキップされます。Node.js は正しく実行されない可能性があります。サポートされていないプラットフォームで発生した問題は修正されません。</p><h3 id="node_skip_platform_check=value" tabindex="-1"><code>NODE_TEST_CONTEXT=value</code> <a class="header-anchor" href="#node_skip_platform_check=value" aria-label="Permalink to “NODE_TEST_CONTEXT=value”">​</a></h3><p><code>value</code> が <code>&#39;child&#39;</code> に等しい場合、テストレポーターのオプションはオーバーライドされ、テスト出力は TAP 形式で stdout に送信されます。他の値が指定された場合、Node.js は使用されるレポーターの形式またはその安定性について保証しません。</p><h3 id="node_test_context=value" tabindex="-1"><code>NODE_TLS_REJECT_UNAUTHORIZED=value</code> <a class="header-anchor" href="#node_test_context=value" aria-label="Permalink to “NODE_TLS_REJECT_UNAUTHORIZED=value”">​</a></h3><p><code>value</code> が <code>&#39;0&#39;</code> に等しい場合、TLS 接続の証明書検証が無効になります。これにより、TLS、そして拡張された HTTPS は安全でなくなります。この環境変数の使用は強く推奨されません。</p><h3 id="node_tls_reject_unauthorized=value" tabindex="-1"><code>NODE_V8_COVERAGE=dir</code> <a class="header-anchor" href="#node_tls_reject_unauthorized=value" aria-label="Permalink to “NODE_V8_COVERAGE=dir”">​</a></h3><p>設定すると、Node.js は <a href="https://v8project.blogspot.com/2017/12/javascript-code-coverage" target="_blank" rel="noreferrer">V8 JavaScript コードカバレッジ</a> および <a href="https://sourcemaps.info/spec" target="_blank" rel="noreferrer">ソースマップ</a> データを引数として指定されたディレクトリに出力し始めます（カバレッジ情報は <code>coverage</code> プレフィックスを持つファイルに JSON として書き込まれます）。</p><p><code>NODE_V8_COVERAGE</code> はサブプロセスに自動的に伝播するため、<code>child_process.spawn()</code> ファミリの関数を呼び出すアプリケーションのインストルメント化が容易になります。<code>NODE_V8_COVERAGE</code> を空の文字列に設定して、伝播を防ぐことができます。</p><h3 id="node_v8_coverage=dir" tabindex="-1"><code>NO_COLOR=&lt;any&gt;</code> <a class="header-anchor" href="#node_v8_coverage=dir" aria-label="Permalink to “NO_COLOR=&lt;any&gt;”">​</a></h3><p><a href="https://no-color.org/" target="_blank" rel="noreferrer"><code>NO_COLOR</code></a> は <code>NODE_DISABLE_COLORS</code> のエイリアスです。環境変数の値は任意です。</p><h4 id="カバレッジ出力-no-color-lt-any-gt" tabindex="-1">カバレッジ出力 {#no_color=&lt;any&gt;} <a class="header-anchor" href="#カバレッジ出力-no-color-lt-any-gt" aria-label="Permalink to “カバレッジ出力 {#no_color=&amp;lt;any&amp;gt;}”">​</a></h4><p>カバレッジは、最上位のキー <code>result</code> の <a href="https://chromedevtools.github.io/devtools-protocol/tot/Profiler#type-ScriptCoverage" target="_blank" rel="noreferrer">ScriptCoverage</a> オブジェクトの配列として出力されます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;result&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;scriptId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;67&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;internal/tty.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;functions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="coverage-output" tabindex="-1">ソースマップキャッシュ <a class="header-anchor" href="#coverage-output" aria-label="Permalink to “ソースマップキャッシュ”">​</a></h4><div class="warning custom-block"><p class="custom-block-title">[安定版: 1 - 実験的]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 1</a> - 実験的</p></div><p>ソースマップデータが見つかった場合、JSON カバレッジオブジェクトの最上位キー <code>source-map-cache</code> に追加されます。</p><p><code>source-map-cache</code> は、ソースマップが抽出されたファイルを表すキーを持つオブジェクトであり、値には、生のソースマップ URL（キー <code>url</code> 内）、解析されたソースマップ v3 情報（キー <code>data</code> 内）、およびソースファイルの行の長さ（キー <code>lineLengths</code> 内）が含まれます。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;result&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;scriptId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;68&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file:///absolute/path/to/source.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;functions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;source-map-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;file:///absolute/path/to/source.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./path-to-map.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;sources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;file:///absolute/path/to/original.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;names&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;Foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;console&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;info&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;mappings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MAAMA,IACJC,YAAaC&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;sourceRoot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;lineLengths&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        62</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        38</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        27</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="source-map-cache" tabindex="-1"><code>OPENSSL_CONF=file</code> <a class="header-anchor" href="#source-map-cache" aria-label="Permalink to “OPENSSL_CONF=file”">​</a></h3><p><strong>Added in: v6.11.0</strong></p><p>起動時にOpenSSL設定ファイルを読み込みます。特に、Node.jsが<code>./configure --openssl-fips</code>でビルドされている場合、FIPS準拠の暗号化を有効にするために使用できます。</p><p><a href="/ja/nodejs/api/cli#openssl-configfile"><code>--openssl-config</code></a>コマンドラインオプションが使用されている場合、この環境変数は無視されます。</p><h3 id="openssl_conf=file" tabindex="-1"><code>SSL_CERT_DIR=dir</code> <a class="header-anchor" href="#openssl_conf=file" aria-label="Permalink to “SSL_CERT_DIR=dir”">​</a></h3><p><strong>Added in: v7.7.0</strong></p><p><code>--use-openssl-ca</code>が有効になっている場合、信頼された証明書を含むOpenSSLのディレクトリを上書きして設定します。</p><p>子環境が明示的に設定されていない限り、この環境変数はすべての子プロセスに継承され、それらがOpenSSLを使用する場合、Node.jsと同じCAを信頼する可能性があることに注意してください。</p><h3 id="ssl_cert_dir=dir" tabindex="-1"><code>SSL_CERT_FILE=file</code> <a class="header-anchor" href="#ssl_cert_dir=dir" aria-label="Permalink to “SSL_CERT_FILE=file”">​</a></h3><p><strong>Added in: v7.7.0</strong></p><p><code>--use-openssl-ca</code>が有効になっている場合、信頼された証明書を含むOpenSSLのファイルを上書きして設定します。</p><p>子環境が明示的に設定されていない限り、この環境変数はすべての子プロセスに継承され、それらがOpenSSLを使用する場合、Node.jsと同じCAを信頼する可能性があることに注意してください。</p><h3 id="ssl_cert_file=file" tabindex="-1"><code>TZ</code> <a class="header-anchor" href="#ssl_cert_file=file" aria-label="Permalink to “TZ”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v16.2.0</td><td>process.env.TZ = を使用してTZ変数を変更すると、Windowsでもタイムゾーンが変更されます。</td></tr><tr><td>v13.0.0</td><td>process.env.TZ = を使用してTZ変数を変更すると、POSIXシステムでタイムゾーンが変更されます。</td></tr><tr><td>v0.0.1</td><td>Added in: v0.0.1</td></tr></tbody></table></div><p><code>TZ</code>環境変数は、タイムゾーン構成を指定するために使用されます。</p><p>Node.jsは、他の環境で<code>TZ</code>が処理されるさまざまな<a href="https://www.gnu.org/software/libc/manual/html_node/TZ-Variable" target="_blank" rel="noreferrer">方法</a>のすべてをサポートしているわけではありませんが、基本的な<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noreferrer">タイムゾーンID</a>（<code>&#39;Etc/UTC&#39;</code>、<code>&#39;Europe/Paris&#39;</code>、<code>&#39;America/New_York&#39;</code>など）をサポートしています。 他のいくつかの省略形またはエイリアスをサポートする場合がありますが、これらは強く推奨されず、保証もされていません。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TZ=Europe/Dublin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -pe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;new Date().toString()&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Wed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> May</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2021</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 20:30:48</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GMT+0100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Irish </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Standard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="tz" tabindex="-1"><code>UV_THREADPOOL_SIZE=size</code> <a class="header-anchor" href="#tz" aria-label="Permalink to “UV_THREADPOOL_SIZE=size”">​</a></h3><p>libuv のスレッドプールで使用されるスレッド数を <code>size</code> スレッドに設定します。</p><p>Node.js では可能な限り非同期システム API が使用されますが、存在しない場合は、libuv のスレッドプールを使用して、同期システム API に基づいた非同期ノード API が作成されます。スレッドプールを使用する Node.js API は次のとおりです。</p><ul><li>ファイルウォッチャー API と明示的に同期的なものを除く、すべての <code>fs</code> API</li><li><code>crypto.pbkdf2()</code>、<code>crypto.scrypt()</code>、<code>crypto.randomBytes()</code>、<code>crypto.randomFill()</code>、<code>crypto.generateKeyPair()</code> などの非同期 crypto API</li><li><code>dns.lookup()</code></li><li>明示的に同期的なものを除く、すべての <code>zlib</code> API</li></ul><p>libuv のスレッドプールのサイズは固定されているため、何らかの理由でこれらの API のいずれかが長時間かかる場合、libuv のスレッドプールで実行される他の（一見無関係な）API のパフォーマンスが低下します。この問題を軽減するために、<code>&#39;UV_THREADPOOL_SIZE&#39;</code> 環境変数を <code>4</code>（現在のデフォルト値）より大きい値に設定して、libuv のスレッドプールのサイズを大きくすることが考えられます。ただし、<code>process.env.UV_THREADPOOL_SIZE=size</code> を使用してプロセス内部から設定しても、スレッドプールはユーザーコードが実行されるよりもずっと前にランタイム初期化の一部として作成されているため、動作することは保証されません。詳細については、<a href="https://docs.libuv.org/en/latest/threadpool" target="_blank" rel="noreferrer">libuv スレッドプールのドキュメント</a>を参照してください。</p><h2 id="uv_threadpool_size=size" tabindex="-1">役立つ V8 オプション <a class="header-anchor" href="#uv_threadpool_size=size" aria-label="Permalink to “役立つ V8 オプション”">​</a></h2><p>V8 には、独自の CLI オプションのセットがあります。<code>node</code> に提供された V8 CLI オプションは、すべて V8 に渡されて処理されます。V8 のオプションには<em>安定性の保証はありません</em>。V8 チーム自体は、それらを正式な API の一部とは見なしておらず、いつでも変更する権利を留保しています。同様に、それらは Node.js の安定性保証の対象ではありません。V8 オプションの多くは、V8 開発者のみが対象としています。それにもかかわらず、Node.js に広く適用できる V8 オプションの小さなセットがあり、ここに文書化されています。</p><h3 id="useful-v8-options" tabindex="-1"><code>--abort-on-uncaught-exception</code> <a class="header-anchor" href="#useful-v8-options" aria-label="Permalink to “--abort-on-uncaught-exception”">​</a></h3><h3 id="--abort-on-uncaught-exception_1" tabindex="-1"><code>--disallow-code-generation-from-strings</code> <a class="header-anchor" href="#--abort-on-uncaught-exception_1" aria-label="Permalink to “--disallow-code-generation-from-strings”">​</a></h3><h3 id="--disallow-code-generation-from-strings_1" tabindex="-1"><code>--enable-etw-stack-walking</code> <a class="header-anchor" href="#--disallow-code-generation-from-strings_1" aria-label="Permalink to “--enable-etw-stack-walking”">​</a></h3><h3 id="--enable-etw-stack-walking" tabindex="-1"><code>--expose-gc</code> <a class="header-anchor" href="#--enable-etw-stack-walking" aria-label="Permalink to “--expose-gc”">​</a></h3><h3 id="--expose-gc_1" tabindex="-1"><code>--harmony-shadow-realm</code> <a class="header-anchor" href="#--expose-gc_1" aria-label="Permalink to “--harmony-shadow-realm”">​</a></h3><h3 id="--harmony-shadow-realm" tabindex="-1"><code>--interpreted-frames-native-stack</code> <a class="header-anchor" href="#--harmony-shadow-realm" aria-label="Permalink to “--interpreted-frames-native-stack”">​</a></h3><h3 id="--interpreted-frames-native-stack" tabindex="-1"><code>--jitless</code> <a class="header-anchor" href="#--interpreted-frames-native-stack" aria-label="Permalink to “--jitless”">​</a></h3><h3 id="--jitless_1" tabindex="-1"><code>--max-old-space-size=SIZE</code> (MiB単位) <a class="header-anchor" href="#--jitless_1" aria-label="Permalink to “--max-old-space-size=SIZE (MiB単位)”">​</a></h3><p>V8の古いメモリセクションの最大メモリサイズを設定します。メモリ消費量が制限に近づくと、V8は未使用メモリを解放するためにガベージコレクションにより多くの時間を費やします。</p><p>2 GiBのメモリを搭載したマシンでは、他の用途のためにメモリを残し、スワップを避けるために、これを1536（1.5 GiB）に設定することを検討してください。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --max-old-space-size=1536</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="--max-old-space-size=size-in-mib" tabindex="-1"><code>--max-semi-space-size=SIZE</code> (MiB単位) <a class="header-anchor" href="#--max-old-space-size=size-in-mib" aria-label="Permalink to “--max-semi-space-size=SIZE (MiB単位)”">​</a></h3><p>V8の<a href="https://v8.dev/blog/orinoco-parallel-scavenger" target="_blank" rel="noreferrer">スカベンジガベージコレクター</a>の最大<a href="https://www.memorymanagement.org/glossary/s#semi.space" target="_blank" rel="noreferrer">セミスペース</a>サイズをMiB（メビバイト）単位で設定します。セミスペースの最大サイズを大きくすると、より多くのメモリを消費する代わりに、Node.jsのスループットが向上する可能性があります。</p><p>V8ヒープのヤングジェネレーションサイズはセミスペースのサイズの3倍であるため（V8の<a href="https://chromium.googlesource.com/v8/v8.git/+/refs/tags/10.3.129/src/heap/heap.cc#328" target="_blank" rel="noreferrer"><code>YoungGenerationSizeFromSemiSpaceSize</code></a>を参照）、セミスペースに1 MiBを追加すると、3つの個々のセミスペースのそれぞれに適用され、ヒープサイズが3 MiB増加します。スループットの向上は、ワークロードによって異なります（<a href="https://github.com/nodejs/node/issues/42511" target="_blank" rel="noreferrer">#42511</a>を参照）。</p><p>デフォルト値は、メモリ制限によって異なります。たとえば、メモリ制限が512 MiBの64ビットシステムでは、セミスペースの最大サイズはデフォルトで1 MiBになります。最大2GiBまでのメモリ制限の場合、セミスペースのデフォルトの最大サイズは、64ビットシステムで16 MiB未満になります。</p><p>アプリケーションに最適な構成を取得するには、アプリケーションのベンチマークを実行するときに、さまざまなmax-semi-space-sizeの値を試す必要があります。</p><p>たとえば、64ビットシステムのベンチマーク：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MiB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --max-semi-space-size=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$MiB</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="--max-semi-space-size=size-in-mib" tabindex="-1"><code>--perf-basic-prof</code> <a class="header-anchor" href="#--max-semi-space-size=size-in-mib" aria-label="Permalink to “--perf-basic-prof”">​</a></h3><h3 id="--perf-basic-prof" tabindex="-1"><code>--perf-basic-prof-only-functions</code> <a class="header-anchor" href="#--perf-basic-prof" aria-label="Permalink to “--perf-basic-prof-only-functions”">​</a></h3><h3 id="--perf-basic-prof-only-functions" tabindex="-1"><code>--perf-prof</code> <a class="header-anchor" href="#--perf-basic-prof-only-functions" aria-label="Permalink to “--perf-prof”">​</a></h3><h3 id="--perf-prof" tabindex="-1"><code>--perf-prof-unwinding-info</code> <a class="header-anchor" href="#--perf-prof" aria-label="Permalink to “--perf-prof-unwinding-info”">​</a></h3><h3 id="--perf-prof-unwinding-info" tabindex="-1"><code>--prof</code> <a class="header-anchor" href="#--perf-prof-unwinding-info" aria-label="Permalink to “--prof”">​</a></h3><h3 id="--prof_1" tabindex="-1"><code>--security-revert</code> <a class="header-anchor" href="#--prof_1" aria-label="Permalink to “--security-revert”">​</a></h3><h3 id="--security-revert" tabindex="-1"><code>--stack-trace-limit=limit</code> <a class="header-anchor" href="#--security-revert" aria-label="Permalink to “--stack-trace-limit=limit”">​</a></h3><p>エラーのスタックトレースに収集するスタックフレームの最大数。0 に設定すると、スタックトレースの収集が無効になります。デフォルト値は 10 です。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stack-trace-limit=12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Error.stackTraceLimit&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 12 を出力</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,880)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};