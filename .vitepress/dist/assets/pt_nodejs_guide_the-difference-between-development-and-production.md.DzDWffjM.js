import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"A diferença entre desenvolvimento e produção no Node.js","description":"Entender o papel de NODE_ENV no Node.js e seu impacto nos ambientes de desenvolvimento e produção.","frontmatter":{"title":"A diferença entre desenvolvimento e produção no Node.js","description":"Entender o papel de NODE_ENV no Node.js e seu impacto nos ambientes de desenvolvimento e produção.","head":[["meta",{"name":"og:title","content":"A diferença entre desenvolvimento e produção no Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Entender o papel de NODE_ENV no Node.js e seu impacto nos ambientes de desenvolvimento e produção."}],["meta",{"name":"twitter:title","content":"A diferença entre desenvolvimento e produção no Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Entender o papel de NODE_ENV no Node.js e seu impacto nos ambientes de desenvolvimento e produção."}],["link",{"rel":"canonical","href":"https://idoc.dev/pt/nodejs/guide/the-difference-between-development-and-production"}],["meta",{"property":"og:url","content":"https://idoc.dev/pt/nodejs/guide/the-difference-between-development-and-production"}]]},"headers":[],"relativePath":"pt/nodejs/guide/the-difference-between-development-and-production.md","filePath":"pt/nodejs/guide/the-difference-between-development-and-production.md","lastUpdated":null}`),a={name:`pt/nodejs/guide/the-difference-between-development-and-production.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-a-diferenca-entre-desenvolvimento-e-producao" tabindex="-1">Node.js, a diferença entre desenvolvimento e produção <a class="header-anchor" href="#node-js-a-diferenca-entre-desenvolvimento-e-producao" aria-label="Permalink to “Node.js, a diferença entre desenvolvimento e produção”">​</a></h1><p><code>Não há diferença entre desenvolvimento e produção em Node.js</code>, ou seja, não há configurações específicas que você precisa aplicar para fazer o Node.js funcionar em uma configuração de produção. No entanto, algumas bibliotecas no registro npm reconhecem o uso da variável <code>NODE_ENV</code> e a definem como <code>development</code> por padrão. Sempre execute seu Node.js com <code>NODE_ENV=production</code> definido.</p><p>Uma maneira popular de configurar sua aplicação é usando a <a href="https://12factor.net" target="_blank" rel="noreferrer">metodologia dos doze fatores</a>.</p><h2 id="node-env-no-express" tabindex="-1">NODE_ENV no Express <a class="header-anchor" href="#node-env-no-express" aria-label="Permalink to “NODE_ENV no Express”">​</a></h2><p>No framework extremamente popular <a href="https://expressjs.com" target="_blank" rel="noreferrer">express</a>, definir o NODE_ENV para produção geralmente garante que:</p><ul><li>o registro em log seja mantido em um nível mínimo e essencial</li><li>mais níveis de cache ocorram para otimizar o desempenho</li></ul><p>Isso geralmente é feito executando o comando</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">production</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>no shell, mas é melhor colocá-lo no seu arquivo de configuração do shell (por exemplo, <code>.bash_profile</code> com o shell Bash), pois, caso contrário, a configuração não persistirá em caso de reinicialização do sistema.</p><p>Você também pode aplicar a variável de ambiente prefixando-a ao comando de inicialização do seu aplicativo:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Por exemplo, em um aplicativo Express, você pode usar isso para definir diferentes manipuladores de erros por ambiente:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ dumpExceptions: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, showStack: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Por exemplo, o [Pug](<a href="https://pugjs.org" target="_blank" rel="noreferrer">https://pugjs.org</a>], a biblioteca de templates usada pelo [Express.js](<a href="https://expressjs.com" target="_blank" rel="noreferrer">https://expressjs.com</a>], compila no modo de depuração se <code>NODE_ENV</code> não estiver definido como <code>production</code>. As views do Express são compiladas em cada requisição no modo de desenvolvimento, enquanto em produção são armazenadas em cache. Existem muitos outros exemplos.</p><p><code>Esta variável de ambiente é uma convenção amplamente utilizada em bibliotecas externas, mas não dentro do próprio Node.js.</code></p><h2 id="por-que-node-env-e-considerado-um-antipadrao" tabindex="-1">Por que NODE_ENV é considerado um antipadrão? <a class="header-anchor" href="#por-que-node-env-e-considerado-um-antipadrao" aria-label="Permalink to “Por que NODE_ENV é considerado um antipadrão?”">​</a></h2><p>Um ambiente é uma plataforma digital ou um sistema onde os engenheiros podem construir, testar, implantar e gerenciar produtos de software. Convencionalmente, existem quatro estágios ou tipos de ambientes onde nosso aplicativo é executado:</p><ul><li>Desenvolvimento</li><li>Staging</li><li>Produção</li><li>Teste</li></ul><p>O problema fundamental do <code>NODE_ENV</code> decorre dos desenvolvedores combinarem otimizações e comportamento do software com o ambiente em que seu software está sendo executado. O resultado é um código como o seguinte:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;staging&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;testing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Embora isso possa parecer inofensivo, torna os ambientes de produção e staging diferentes, tornando impossível o teste confiável. Por exemplo, um teste e, portanto, uma funcionalidade do seu produto pode passar quando <code>NODE_ENV</code> está definido como <code>development</code>, mas falhar quando <code>NODE_ENV</code> está definido como <code>production</code>. Portanto, definir <code>NODE_ENV</code> para qualquer valor diferente de <code>production</code> é considerado um antipadrão.</p>`,21)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};