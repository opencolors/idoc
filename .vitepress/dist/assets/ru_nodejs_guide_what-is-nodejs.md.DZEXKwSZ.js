import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Введение в Node.js","description":"Node.js - это открытая,跨 платформенная среда выполнения JavaScript, позволяющая разработчикам выполнять JavaScript на стороне сервера, обеспечивая высокую производительность и масштабируемость.","frontmatter":{"title":"Введение в Node.js","description":"Node.js - это открытая,跨 платформенная среда выполнения JavaScript, позволяющая разработчикам выполнять JavaScript на стороне сервера, обеспечивая высокую производительность и масштабируемость.","head":[["meta",{"name":"og:title","content":"Введение в Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js - это открытая,跨 платформенная среда выполнения JavaScript, позволяющая разработчикам выполнять JavaScript на стороне сервера, обеспечивая высокую производительность и масштабируемость."}],["meta",{"name":"twitter:title","content":"Введение в Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js - это открытая,跨 платформенная среда выполнения JavaScript, позволяющая разработчикам выполнять JavaScript на стороне сервера, обеспечивая высокую производительность и масштабируемость."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/guide/what-is-nodejs"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/guide/what-is-nodejs"}]]},"headers":[],"relativePath":"ru/nodejs/guide/what-is-nodejs.md","filePath":"ru/nodejs/guide/what-is-nodejs.md","lastUpdated":null}`),a={name:`ru/nodejs/guide/what-is-nodejs.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="введение-в-node-js" tabindex="-1">Введение в Node.js <a class="header-anchor" href="#введение-в-node-js" aria-label="Permalink to “Введение в Node.js”">​</a></h1><p>Node.js - это кроссплатформенная среда выполнения JavaScript с открытым исходным кодом. Это популярный инструмент практически для любого типа проекта!</p><p>Node.js запускает движок V8 JavaScript, ядро Google Chrome, вне браузера. Это позволяет Node.js быть очень производительным.</p><p>Приложение Node.js запускается в одном процессе, не создавая новый поток для каждого запроса. Node.js предоставляет набор асинхронных примитивов ввода-вывода в своей стандартной библиотеке, которые предотвращают блокировку кода JavaScript, и, как правило, библиотеки в Node.js написаны с использованием неблокирующих парадигм, что делает блокирующее поведение исключением, а не нормой.</p><p>Когда Node.js выполняет операцию ввода-вывода, например чтение из сети, доступ к базе данных или файловой системе, вместо блокировки потока и траты циклов ЦП в ожидании, Node.js возобновит операции, когда вернется ответ.</p><p>Это позволяет Node.js обрабатывать тысячи одновременных соединений с одним сервером, не вводя бремя управления параллелизмом потоков, что может быть значительным источником ошибок.</p><p>Node.js имеет уникальное преимущество, поскольку миллионы frontend-разработчиков, пишущих JavaScript для браузера, теперь могут писать код на стороне сервера в дополнение к коду на стороне клиента без необходимости изучать совершенно другой язык.</p><p>В Node.js новые стандарты ECMAScript можно использовать без проблем, поскольку вам не нужно ждать, пока все ваши пользователи обновят свои браузеры - вы сами решаете, какую версию ECMAScript использовать, изменив версию Node.js, и вы также можете включить определенные экспериментальные функции, запустив Node.js с флагами.</p><h2 id="пример-приложения-node-js" tabindex="-1">Пример приложения Node.js <a class="header-anchor" href="#пример-приложения-node-js" aria-label="Permalink to “Пример приложения Node.js”">​</a></h2><p>Самый распространенный пример &quot;Hello World&quot; в Node.js - это веб-сервер:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createServer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:http&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hostname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;127.0.0.1&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port, hostname, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Server running at http://\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hostname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Чтобы запустить этот фрагмент, сохраните его как файл <code>server.js</code> и запустите <code>node server.js</code> в своем терминале. Если вы используете mjs-версию кода, вам следует сохранить ее как файл <code>server.mjs</code> и запустить <code>node server.mjs</code> в своем терминале.</p><p>Этот код сначала включает <a href="/ru/nodejs/api/http">модуль http</a> Node.js.</p><p>Node.js имеет фантастическую <a href="/ru/nodejs/api/synopsis">стандартную библиотеку</a>, включая первоклассную поддержку сети.</p><p>Метод <code>createServer()</code> из <code>http</code> создает новый HTTP-сервер и возвращает его.</p><p>Сервер настроен на прослушивание указанного порта и имени хоста. Когда сервер готов, вызывается функция обратного вызова, в данном случае информирующая нас о том, что сервер запущен.</p><p>Всякий раз, когда получается новый запрос, вызывается <a href="/ru/nodejs/api/http">событие request</a>, предоставляя два объекта: запрос (объект <code>http.IncomingMessage</code>) и ответ (объект <code>http.ServerResponse</code>).</p><p>Эти 2 объекта необходимы для обработки HTTP-вызова.</p><p>Первый предоставляет детали запроса. В этом простом примере он не используется, но вы можете получить доступ к заголовкам запроса и данным запроса.</p><p>Второй используется для возврата данных вызывающему объекту.</p><p>В этом случае с:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>мы устанавливаем свойство statusCode в 200, чтобы указать на успешный ответ.</p><p>Мы устанавливаем заголовок Content-Type:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>и мы закрываем ответ, добавляя содержимое в качестве аргумента к <code>end()</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Это отправит ответ клиенту.</p>`,28)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};