import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"发布 Node-API 包","description":"了解如何发布 Node-API 版本的包与非 Node-API 版本并行，以及如何在包中引入 Node-API 版本的依赖。","frontmatter":{"title":"发布 Node-API 包","description":"了解如何发布 Node-API 版本的包与非 Node-API 版本并行，以及如何在包中引入 Node-API 版本的依赖。","head":[["meta",{"name":"og:title","content":"发布 Node-API 包 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"了解如何发布 Node-API 版本的包与非 Node-API 版本并行，以及如何在包中引入 Node-API 版本的依赖。"}],["meta",{"name":"twitter:title","content":"发布 Node-API 包 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"了解如何发布 Node-API 版本的包与非 Node-API 版本并行，以及如何在包中引入 Node-API 版本的依赖。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/guide/how-to-publish-a-nodejs-package"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/guide/how-to-publish-a-nodejs-package"}]]},"headers":[],"relativePath":"zh/nodejs/guide/how-to-publish-a-nodejs-package.md","filePath":"zh/nodejs/guide/how-to-publish-a-nodejs-package.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/guide/how-to-publish-a-nodejs-package.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="如何发布-node-api-包" tabindex="-1">如何发布 Node-API 包 <a class="header-anchor" href="#如何发布-node-api-包" aria-label="Permalink to “如何发布 Node-API 包”">​</a></h1><h2 id="如何同时发布一个包的-node-api-版本和非-node-api-版本" tabindex="-1">如何同时发布一个包的 Node-API 版本和非 Node-API 版本 <a class="header-anchor" href="#如何同时发布一个包的-node-api-版本和非-node-api-版本" aria-label="Permalink to “如何同时发布一个包的 Node-API 版本和非 Node-API 版本”">​</a></h2><p>以下步骤使用 <code>iotivity-node</code> 包进行说明：</p><ul><li><p>首先，发布非 Node-API 版本：</p><ul><li>更新 <code>package.json</code> 中的版本。对于 <code>iotivity-node</code>，版本变为 1.2.0-2。</li><li>完成发布清单（确保测试/演示/文档都 OK）。</li><li><code>npm publish</code>。</li></ul></li><li><p>然后，发布 Node-API 版本：</p><ul><li>更新 <code>package.json</code> 中的版本。对于 <code>iotivity-node</code>，版本变为 1.2.0-3。对于版本控制，我们建议遵循 <a href="https://semver.org" target="_blank" rel="noreferrer">semver.org</a> 描述的预发布版本方案，例如 1.2.0-napi。</li><li>完成发布清单（确保测试/演示/文档都 OK）。</li><li><code>npm publish --tag n-api</code>。</li></ul></li></ul><p>在这个例子中，使用 <code>n-api</code> 标记发布确保了，尽管版本 1.2.0-3 比已发布的非 Node-API 版本 (1.2.0-2) 更新，但如果有人选择简单地运行 <code>npm install iotivity-node</code> 来安装 <code>iotivity-node</code>，它将不会被安装。默认情况下，这将安装非 Node-API 版本。用户必须运行 <code>npm install iotivity-node@n-api</code> 才能接收 Node-API 版本。有关将标签与 npm 结合使用的更多信息，请查看 &quot;Using dist-tags&quot;。</p><h2 id="如何引入对包的-node-api-版本的依赖" tabindex="-1">如何引入对包的 Node-API 版本的依赖 <a class="header-anchor" href="#如何引入对包的-node-api-版本的依赖" aria-label="Permalink to “如何引入对包的 Node-API 版本的依赖”">​</a></h2><p>要添加 <code>iotivity-node</code> 的 Node-API 版本作为依赖项，<code>package.json</code> 将如下所示：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;iotivity-node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;n-api&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如 &quot;Using dist-tags&quot; 中所述，与常规版本不同，标记版本不能通过 <code>package.json</code> 中的版本范围（例如 <code>&quot;^2.0.0&quot;</code>）来寻址。原因是该标签恰好引用一个版本。因此，如果包维护者选择使用相同的标签标记包的更高版本，则 <code>npm update</code> 将接收到更高版本。除了最新发布的版本之外，这应该是可以接受的版本，<code>package.json</code> 依赖项必须引用确切的版本，如下所示：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;iotivity-node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.2.0-3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,10)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};