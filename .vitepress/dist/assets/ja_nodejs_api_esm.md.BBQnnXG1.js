import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js における ECMAScript モジュール","description":"このページでは、Node.js で ECMAScript モジュール（ESM）を使用する方法について詳細に説明しています。モジュールの解決、インポートおよびエクスポートの構文、CommonJS との互換性を含みます。","frontmatter":{"title":"Node.js における ECMAScript モジュール","description":"このページでは、Node.js で ECMAScript モジュール（ESM）を使用する方法について詳細に説明しています。モジュールの解決、インポートおよびエクスポートの構文、CommonJS との互換性を含みます。","head":[["meta",{"name":"og:title","content":"Node.js における ECMAScript モジュール | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"このページでは、Node.js で ECMAScript モジュール（ESM）を使用する方法について詳細に説明しています。モジュールの解決、インポートおよびエクスポートの構文、CommonJS との互換性を含みます。"}],["meta",{"name":"twitter:title","content":"Node.js における ECMAScript モジュール | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"このページでは、Node.js で ECMAScript モジュール（ESM）を使用する方法について詳細に説明しています。モジュールの解決、インポートおよびエクスポートの構文、CommonJS との互換性を含みます。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/esm"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/esm"}]]},"headers":[],"relativePath":"ja/nodejs/api/esm.md","filePath":"ja/nodejs/api/esm.md","lastUpdated":null}`),a={name:`ja/nodejs/api/esm.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="modules-ecmascript-modules" tabindex="-1">モジュール: ECMAScript モジュール <a class="header-anchor" href="#modules-ecmascript-modules" aria-label="Permalink to “モジュール: ECMAScript モジュール”">​</a></h1><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v23.1.0</td><td>インポート属性は実験的ではなくなりました。</td></tr><tr><td>v22.0.0</td><td>インポートアサーションのサポートを削除しました。</td></tr><tr><td>v21.0.0, v20.10.0, v18.20.0</td><td>インポート属性の実験的なサポートを追加しました。</td></tr><tr><td>v20.0.0, v18.19.0</td><td>モジュールカスタマイズフックはメインスレッド外で実行されます。</td></tr><tr><td>v18.6.0, v16.17.0</td><td>モジュールカスタマイズフックのチェーニングのサポートを追加しました。</td></tr><tr><td>v17.1.0, v16.14.0</td><td>インポートアサーションの実験的なサポートを追加しました。</td></tr><tr><td>v17.0.0, v16.12.0</td><td>カスタマイズフックを統合し、<code>getFormat</code>、<code>getSource</code>、<code>transformSource</code>、および <code>getGlobalPreloadCode</code> フックを削除し、<code>load</code> および <code>globalPreload</code> フックを追加し、<code>resolve</code> または <code>load</code> フックのいずれかから <code>format</code> を返すことを許可しました。</td></tr><tr><td>v14.8.0</td><td>トップレベルアウェイトのフラグを解除しました。</td></tr><tr><td>v15.3.0, v14.17.0, v12.22.0</td><td>モジュールの実装を安定化させます。</td></tr><tr><td>v14.13.0, v12.20.0</td><td>CommonJS の名前付きエクスポートの検出をサポートします。</td></tr><tr><td>v14.0.0, v13.14.0, v12.20.0</td><td>実験的モジュールの警告を削除しました。</td></tr><tr><td>v13.2.0, v12.17.0</td><td>ECMAScript モジュールをロードするのにコマンドラインフラグは不要になりました。</td></tr><tr><td>v12.0.0</td><td><code>package.json</code> の <code>&quot;type&quot;</code> フィールドを介して <code>.js</code> ファイル拡張子を使用する ES モジュールのサポートを追加しました。</td></tr><tr><td>v8.5.0</td><td>追加: v8.5.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定版]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定版</p></div><h2 id="introduction" tabindex="-1">導入 <a class="header-anchor" href="#introduction" aria-label="Permalink to “導入”">​</a></h2><p>ECMAScript モジュールは、JavaScript コードを再利用のためにパッケージ化する<a href="https://tc39.github.io/ecma262/#sec-modules" target="_blank" rel="noreferrer">公式の標準形式</a>です。 モジュールは、さまざまな <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noreferrer"><code>import</code></a> および <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export" target="_blank" rel="noreferrer"><code>export</code></a> ステートメントを使用して定義されます。</p><p>ES モジュールの次の例では、関数をエクスポートします。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// addTwo.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addTwo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { addTwo };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>ES モジュールの次の例では、<code>addTwo.mjs</code> から関数をインポートします。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { addTwo } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./addTwo.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints: 6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTwo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Node.js は現在指定されている ECMAScript モジュールを完全にサポートし、それらと元のモジュール形式である <a href="/ja/nodejs/api/modules">CommonJS</a> との間の相互運用性を提供します。</p><h2 id="enabling" tabindex="-1">有効化 <a class="header-anchor" href="#enabling" aria-label="Permalink to “有効化”">​</a></h2><p>Node.jsには、<a href="/ja/nodejs/api/modules">CommonJS</a>モジュールとECMAScriptモジュールの2つのモジュールシステムがあります。</p><p>作成者は、<code>.mjs</code>ファイル拡張子、<code>package.json</code>の<a href="/ja/nodejs/api/packages#type"><code>&quot;type&quot;</code></a>フィールドに<code>&quot;module&quot;</code>の値を設定する、または<a href="/ja/nodejs/api/cli#input-typetype"><code>--input-type</code></a>フラグに<code>&quot;module&quot;</code>の値を設定することで、Node.jsにJavaScriptをESモジュールとして解釈するように指示できます。これらは、コードがESモジュールとして実行されることを意図していることを明示的に示すマーカーです。</p><p>逆に、作成者は、<code>.cjs</code>ファイル拡張子、<code>package.json</code>の<a href="/ja/nodejs/api/packages#type"><code>&quot;type&quot;</code></a>フィールドに<code>&quot;commonjs&quot;</code>の値を設定する、または<a href="/ja/nodejs/api/cli#input-typetype"><code>--input-type</code></a>フラグに<code>&quot;commonjs&quot;</code>の値を設定することで、Node.jsにJavaScriptをCommonJSとして解釈するように明示的に指示できます。</p><p>コードにどちらのモジュールシステムの明示的なマーカーもない場合、Node.jsはモジュールのソースコードを調べてESモジュールの構文を探します。そのような構文が見つかった場合、Node.jsはそのコードをESモジュールとして実行します。それ以外の場合は、そのモジュールをCommonJSとして実行します。詳細については、<a href="/ja/nodejs/api/packages#determining-module-system">モジュールシステムの決定</a>を参照してください。</p><h2 id="packages" tabindex="-1">パッケージ <a class="header-anchor" href="#packages" aria-label="Permalink to “パッケージ”">​</a></h2><p>このセクションは、<a href="/ja/nodejs/api/packages">モジュール: パッケージ</a>に移動しました。</p><h2 id="import-specifiers" tabindex="-1"><code>import</code> Specifier <a class="header-anchor" href="#import-specifiers" aria-label="Permalink to “import Specifier”">​</a></h2><h3 id="terminology" tabindex="-1">用語 <a class="header-anchor" href="#terminology" aria-label="Permalink to “用語”">​</a></h3><p><code>import</code>ステートメントの<em>specifier</em>は、<code>from</code>キーワードの後の文字列です。たとえば、<code>import { sep } from &#39;node:path&#39;</code>の<code>&#39;node:path&#39;</code>です。Specifierは、<code>export from</code>ステートメントでも使用され、<code>import()</code>式の引数としても使用されます。</p><p>Specifierには、次の3つの種類があります。</p><ul><li><em>相対Specifier</em>：<code>&#39;./startup.js&#39;</code>や<code>&#39;../config.mjs&#39;</code>など。これらは、インポートするファイルの場所からの相対パスを参照します。<em>これらの場合、ファイル拡張子は常に必要です。</em></li><li><em>ベアSpecifier</em>：<code>&#39;some-package&#39;</code>や<code>&#39;some-package/shuffle&#39;</code>など。これらは、パッケージ名でパッケージのメインエントリポイントを参照したり、例のようにパッケージ名が先頭に付いたパッケージ内の特定の機能モジュールを参照したりできます。<em><a href="packages.html#exports"><code>&quot;exports&quot;</code></a>フィールドがないパッケージの場合のみ、ファイル拡張子を含める必要があります。</em></li><li><em>絶対Specifier</em>：<code>&#39;file:///opt/nodejs/config.js&#39;</code>など。これらは、完全なパスを直接かつ明示的に参照します。</li></ul><p>ベアSpecifierの解決は、<a href="/ja/nodejs/api/esm#resolution-algorithm-specification">Node.jsモジュール解決およびロードアルゴリズム</a>によって処理されます。他のすべてのSpecifierの解決は、常に標準の相対<a href="https://url.spec.whatwg.org/" target="_blank" rel="noreferrer">URL</a>解決セマンティクスでのみ解決されます。</p><p>CommonJSと同様に、パッケージ内のモジュールファイルは、パッケージの<a href="/ja/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a>に<a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>フィールドが含まれていない限り、パッケージ名にパスを追加することでアクセスできます。パッケージ内のファイルには、<a href="/ja/nodejs/api/packages#exports"><code>&quot;exports&quot;</code></a>で定義されたパスを介してのみアクセスできます。</p><p>Node.jsモジュール解決のベアSpecifierに適用されるこれらのパッケージ解決規則の詳細については、<a href="/ja/nodejs/api/packages">パッケージのドキュメント</a>を参照してください。</p><h3 id="mandatory-file-extensions" tabindex="-1">必須のファイル拡張子 <a class="header-anchor" href="#mandatory-file-extensions" aria-label="Permalink to “必須のファイル拡張子”">​</a></h3><p>相対または絶対指定子を解決するために <code>import</code> キーワードを使用する場合、ファイル拡張子を提供する必要があります。ディレクトリのインデックス (例: <code>&#39;./startup/index.js&#39;</code>) も完全に指定する必要があります。</p><p>この動作は、一般的に設定されたサーバーを想定すると、ブラウザー環境での <code>import</code> の動作と一致します。</p><h3 id="urls" tabindex="-1">URL <a class="header-anchor" href="#urls" aria-label="Permalink to “URL”">​</a></h3><p>ESモジュールはURLとして解決およびキャッシュされます。これは、特殊文字を<a href="/ja/nodejs/api/url#percent-encoding-in-urls">パーセントエンコード</a>する必要があることを意味します。たとえば、<code>#</code> は <code>%23</code>、<code>?</code> は <code>%3F</code> になります。</p><p><code>file:</code>、<code>node:</code>、および <code>data:</code> URLスキームがサポートされています。<code>&#39;https://example.com/app.js&#39;</code> のような指定子は、<a href="/ja/nodejs/api/module#import-from-https">カスタムHTTPSローダー</a>を使用しない限り、Node.jsではネイティブにサポートされていません。</p><h4 id="file-urls" tabindex="-1"><code>file:</code> URL <a class="header-anchor" href="#file-urls" aria-label="Permalink to “file: URL”">​</a></h4><p>モジュールは、それらを解決するために使用される <code>import</code> 指定子が異なるクエリまたはフラグメントを持っている場合、複数回ロードされます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo.mjs?query=1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// クエリ &quot;?query=1&quot; で ./foo.mjs をロードします</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo.mjs?query=2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// クエリ &quot;?query=2&quot; で ./foo.mjs をロードします</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>ボリュームルートは、<code>/</code>、<code>//</code>、または <code>file:///</code> を介して参照できます。<a href="https://url.spec.whatwg.org/" target="_blank" rel="noreferrer">URL</a> とパスの解決 (パーセントエンコードの詳細など) の違いを考えると、パスをインポートするときは <a href="/ja/nodejs/api/url#urlpathtofileurlpath-options">url.pathToFileURL</a> を使用することをお勧めします。</p><h4 id="data-imports" tabindex="-1"><code>data:</code> インポート <a class="header-anchor" href="#data-imports" aria-label="Permalink to “data: インポート”">​</a></h4><p><strong>追加: v12.10.0</strong></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs" target="_blank" rel="noreferrer"><code>data:</code> URL</a> は、次のMIMEタイプでのインポートがサポートされています。</p><ul><li>ESモジュール用の <code>text/javascript</code></li><li>JSON用の <code>application/json</code></li><li>Wasm用の <code>application/wasm</code></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;data:text/javascript,console.log(&quot;hello!&quot;);&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;data:application/json,&quot;world!&quot;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>data:</code> URLは、組み込みモジュールと<a href="/ja/nodejs/api/esm#terminology">絶対指定子</a>に対してのみ<a href="/ja/nodejs/api/esm#terminology">ベア指定子</a>を解決します。<a href="/ja/nodejs/api/esm#terminology">相対指定子</a>の解決は、<code>data:</code> が<a href="https://url.spec.whatwg.org/#special-scheme" target="_blank" rel="noreferrer">特殊スキーム</a>ではないため、機能しません。たとえば、<code>data:text/javascript,import &quot;./foo&quot;;</code> から <code>./foo</code> をロードしようとすると、<code>data:</code> URL には相対解決の概念がないため、解決に失敗します。</p><h4 id="node-imports" tabindex="-1"><code>node:</code> インポート <a class="header-anchor" href="#node-imports" aria-label="Permalink to “node: インポート”">​</a></h4><div class="info custom-block"><p class="custom-block-title">[歴史]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v16.0.0, v14.18.0</td><td><code>require(...)</code> への <code>node:</code> インポートのサポートを追加。</td></tr><tr><td>v14.13.1, v12.20.0</td><td>追加: v14.13.1, v12.20.0</td></tr></tbody></table></div><p><code>node:</code> URL は、Node.js 組み込みモジュールをロードする代替手段としてサポートされています。この URL スキームにより、組み込みモジュールを有効な絶対 URL 文字列で参照できます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="import-attributes" tabindex="-1">インポート属性 <a class="header-anchor" href="#import-attributes" aria-label="Permalink to “インポート属性”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[歴史]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v21.0.0, v20.10.0, v18.20.0</td><td>Import Assertions から Import Attributes に切り替え。</td></tr><tr><td>v17.1.0, v16.14.0</td><td>追加: v17.1.0, v16.14.0</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定</p></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import/with" target="_blank" rel="noreferrer">インポート属性</a> は、モジュール指定子とともにモジュールインポートステートメントにさらに多くの情報を渡すためのインライン構文です。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fooData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./foo.json&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">barData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./bar.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { with: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Node.js は <code>type</code> 属性のみをサポートしており、以下の値をサポートしています。</p><table tabindex="0"><thead><tr><th>属性 <code>type</code></th><th>必要なもの</th></tr></thead><tbody><tr><td><code>&#39;json&#39;</code></td><td><a href="/ja/nodejs/api/esm#json-modules">JSON モジュール</a></td></tr><tr><td>JSON モジュールをインポートする際には、<code>type: &#39;json&#39;</code> 属性が必須です。</td><td></td></tr></tbody></table><h2 id="built-in-modules" tabindex="-1">組み込みモジュール <a class="header-anchor" href="#built-in-modules" aria-label="Permalink to “組み込みモジュール”">​</a></h2><p><a href="/ja/nodejs/api/modules#built-in-modules">組み込みモジュール</a> は、パブリック API の名前付きエクスポートを提供します。CommonJS エクスポートの値であるデフォルトのエクスポートも提供されます。デフォルトのエクスポートは、とりわけ、名前付きエクスポートの変更に使用できます。組み込みモジュールの名前付きエクスポートは、<a href="/ja/nodejs/api/module#modulesyncbuiltinesmexports"><code>module.syncBuiltinESMExports()</code></a> を呼び出すことによってのみ更新されます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EventEmitter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:events&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFile } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./foo.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs, { readFileSync } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { syncBuiltinESMExports } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Buffer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:buffer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, ESM&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">syncBuiltinESMExports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.readFileSync </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> readFileSync;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="import-expressions" tabindex="-1"><code>import()</code> 式 <a class="header-anchor" href="#import-expressions" aria-label="Permalink to “import() 式”">​</a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import" target="_blank" rel="noreferrer">Dynamic <code>import()</code></a> は CommonJS と ES modules の両方でサポートされています。CommonJS モジュールでは、ES modules をロードするために使用できます。</p><h2 id="importmeta" tabindex="-1"><code>import.meta</code> <a class="header-anchor" href="#importmeta" aria-label="Permalink to “import.meta”">​</a></h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p><code>import.meta</code> メタプロパティは、以下のプロパティを含む <code>Object</code> です。ES modules でのみサポートされています。</p><h3 id="importmetadirname" tabindex="-1"><code>import.meta.dirname</code> <a class="header-anchor" href="#importmetadirname" aria-label="Permalink to “import.meta.dirname”">​</a></h3><p><strong>Added in: v21.2.0, v20.11.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a>.2 - Release candidate</p></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 現在のモジュールのディレクトリ名。これは、<a href="/ja/nodejs/api/esm#importmetafilename"><code>import.meta.filename</code></a> の <a href="/ja/nodejs/api/path#pathdirnamepath"><code>path.dirname()</code></a> と同じです。</li></ul><h3 id="importmetafilename" tabindex="-1"><code>import.meta.filename</code> <a class="header-anchor" href="#importmetafilename" aria-label="Permalink to “import.meta.filename”">​</a></h3><p><strong>Added in: v21.2.0, v20.11.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a>.2 - Release candidate</p></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 現在のモジュールの完全な絶対パスとファイル名。シンボリックリンクは解決されます。</li><li>これは、<a href="/ja/nodejs/api/esm#importmetaurl"><code>import.meta.url</code></a> の <a href="/ja/nodejs/api/url#urlfileurltopathurl-options"><code>url.fileURLToPath()</code></a> と同じです。</li></ul><h3 id="importmetaurl" tabindex="-1"><code>import.meta.url</code> <a class="header-anchor" href="#importmetaurl" aria-label="Permalink to “import.meta.url”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> モジュールの絶対 <code>file:</code> URL。</li></ul><p>これは、現在のモジュールファイルのURLを提供するブラウザと同じように定義されます。</p><p>これにより、相対ファイル読み込みなどの便利なパターンが可能になります。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { readFileSync } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./data.proto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="importmetaresolvespecifier" tabindex="-1"><code>import.meta.resolve(specifier)</code> <a class="header-anchor" href="#importmetaresolvespecifier" aria-label="Permalink to “import.meta.resolve(specifier)”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v20.6.0, v18.19.0</td><td><code>--experimental-import-meta-resolve</code> CLI フラグの背後に隠れていなくなりました。ただし、非標準の <code>parentURL</code> パラメーターを除きます。</td></tr><tr><td>v20.6.0, v18.19.0</td><td>この API は、ローカル FS 上に既存のファイルにマップされない <code>file:</code> URL をターゲットにしても、スローしなくなりました。</td></tr><tr><td>v20.0.0, v18.19.0</td><td>この API は、Promise の代わりに文字列を同期的に返すようになりました。</td></tr><tr><td>v16.2.0, v14.18.0</td><td>WHATWG <code>URL</code> オブジェクトの <code>parentURL</code> パラメーターへのサポートを追加します。</td></tr><tr><td>v13.9.0, v12.16.2</td><td>Added in: v13.9.0, v12.16.2</td></tr></tbody></table></div><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a>.2 - Release candidate</p></div><ul><li><code>specifier</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 現在のモジュールを基準に解決するモジュール指定子。</li><li>Returns: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> 指定子が解決される絶対 URL 文字列。</li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta/resolve" target="_blank" rel="noreferrer"><code>import.meta.resolve</code></a> は、各モジュールにスコープされたモジュール相対解決関数で、URL 文字列を返します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dependencyAsset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;component-lib/asset.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file:///app/node_modules/component-lib/asset.css</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dep.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file:///app/dep.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Node.js モジュール解決のすべての機能がサポートされています。依存関係の解決は、パッケージ内で許可されているエクスポートの解決に従います。</p><p><strong>注意点</strong>:</p><ul><li>これにより、同期的なファイルシステム操作が発生する可能性があり、<code>require.resolve</code> と同様にパフォーマンスに影響を与える可能性があります。</li><li>この機能は、カスタムローダー内では利用できません（デッドロックが発生します）。</li></ul><p><strong>非標準 API</strong>:</p><p><code>--experimental-import-meta-resolve</code> フラグを使用すると、その関数は2番目の引数を受け入れます。</p><ul><li><code>parent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="/ja/nodejs/api/url#the-whatwg-url-api">&lt;URL&gt;</a> 解決元のオプションの絶対親モジュール URL。 <strong>Default:</strong> <code>import.meta.url</code></li></ul><h2 id="interoperability-with-commonjs" tabindex="-1">CommonJS との相互運用性 <a class="header-anchor" href="#interoperability-with-commonjs" aria-label="Permalink to “CommonJS との相互運用性”">​</a></h2><h3 id="import-statements" tabindex="-1"><code>import</code> ステートメント <a class="header-anchor" href="#import-statements" aria-label="Permalink to “import ステートメント”">​</a></h3><p><code>import</code> ステートメントは、ES モジュールまたは CommonJS モジュールを参照できます。<code>import</code> ステートメントは ES モジュールでのみ許可されますが、動的な <a href="/ja/nodejs/api/esm#import-expressions"><code>import()</code></a> 式は、ES モジュールをロードするために CommonJS でサポートされています。</p><p><a href="/ja/nodejs/api/esm#commonjs-namespaces">CommonJS モジュール</a>をインポートする場合、<code>module.exports</code> オブジェクトがデフォルトのエクスポートとして提供されます。名前付きエクスポートは、より良いエコシステム互換性のために、静的解析によって提供される場合があります。</p><h3 id="require" tabindex="-1"><code>require</code> <a class="header-anchor" href="#require" aria-label="Permalink to “require”">​</a></h3><p>CommonJS モジュールの <code>require</code> は現在、同期的な ES モジュール（つまり、トップレベルの <code>await</code> を使用しない ES モジュール）のロードのみをサポートしています。</p><p>詳細については、<a href="/ja/nodejs/api/modules#loading-ecmascript-modules-using-require"><code>require()</code> を使用した ECMAScript モジュールのロード</a> を参照してください。</p><h3 id="commonjs-namespaces" tabindex="-1">CommonJS 名前空間 <a class="header-anchor" href="#commonjs-namespaces" aria-label="Permalink to “CommonJS 名前空間”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更</th></tr></thead><tbody><tr><td>v23.0.0</td><td><code>&#39;module.exports&#39;</code> エクスポートマーカーを CJS 名前空間に追加しました。</td></tr><tr><td>v14.13.0</td><td>追加: v14.13.0</td></tr></tbody></table></div><p>CommonJS モジュールは、任意の型にできる <code>module.exports</code> オブジェクトで構成されています。</p><p>これをサポートするために、ECMAScript モジュールから CommonJS をインポートするときに、CommonJS モジュールの名前空間ラッパーが構築されます。これは常に CommonJS の <code>module.exports</code> 値を指す <code>default</code> エクスポートキーを提供します。</p><p>さらに、CommonJS モジュールのソーステキストに対してヒューリスティックな静的解析が実行され、<code>module.exports</code> の値から名前空間で提供するエクスポートの可能な限り最適な静的リストを取得します。これは、これらの名前空間が CJS モジュールの評価の前に構築される必要があるため、必要です。</p><p>これらの CommonJS 名前空間オブジェクトは、<code>&#39;module.exports&#39;</code> 名前付きエクスポートとして <code>default</code> エクスポートも提供し、CommonJS での表現がこの値を使用し、名前空間の値を使用しないことを明確に示すために提供します。これは、<a href="/ja/nodejs/api/modules#loading-ecmascript-modules-using-require"><code>require(esm)</code></a> 相互運用サポートにおける <code>&#39;module.exports&#39;</code> エクスポート名の処理のセマンティクスを反映しています。</p><p>CommonJS モジュールをインポートする場合、ES モジュールのデフォルトのインポートまたは対応する構文シュガーを使用して確実にインポートできます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cjs } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上記と同一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cjsSugar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cjs);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cjs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cjsSugar);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &lt;module.exports&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>このモジュール名前空間エキゾチックオブジェクトは、<code>import * as m from &#39;cjs&#39;</code> または動的なインポートを使用するときに直接観察できます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   [Module] { default: &lt;module.exports&gt;, &#39;module.exports&#39;: &lt;module.exports&gt; }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>JS エコシステムでの既存の使用法とのより良い互換性のために、Node.js はさらに、インポートされたすべての CommonJS モジュールの CommonJS 名前付きエクスポートを決定し、静的解析プロセスを使用して個別の ES モジュールエクスポートとして提供しようとします。</p><p>たとえば、次のように記述された CommonJS モジュールを考えてみます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cjs.cjs</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;exported&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上記のモジュールは、ES モジュールで名前付きインポートをサポートします。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./cjs.cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: &#39;exported&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cjs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./cjs.cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cjs);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力: { name: &#39;exported&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./cjs.cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出力:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   [Module] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     default: { name: &#39;exported&#39; },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     &#39;module.exports&#39;: { name: &#39;exported&#39; },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     name: &#39;exported&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>モジュール名前空間エキゾチックオブジェクトの最後の例からわかるように、<code>name</code> エクスポートは <code>module.exports</code> オブジェクトからコピーされ、モジュールがインポートされるときに ES モジュール名前空間に直接設定されます。</p><p>ライブバインディングの更新または <code>module.exports</code> に追加された新しいエクスポートは、これらの名前付きエクスポートに対して検出されません。</p><p>名前付きエクスポートの検出は、一般的な構文パターンに基づいていますが、名前付きエクスポートを常に正しく検出するとは限りません。このような場合、上記で説明したデフォルトのインポート形式を使用する方が良い場合があります。</p><p>名前付きエクスポートの検出は、多くの一般的なエクスポートパターン、再エクスポートパターン、およびビルドツールとトランスパイラーの出力をカバーしています。実装されている正確なセマンティクスについては、<a href="https://github.com/nodejs/cjs-module-lexer/tree/1.2.2" target="_blank" rel="noreferrer">cjs-module-lexer</a> を参照してください。</p><h3 id="differences-between-es-modules-and-commonjs" tabindex="-1">ESモジュールとCommonJSの違い <a class="header-anchor" href="#differences-between-es-modules-and-commonjs" aria-label="Permalink to “ESモジュールとCommonJSの違い”">​</a></h3><h4 id="no-require-exports-or-moduleexports" tabindex="-1"><code>require</code>、<code>exports</code>、<code>module.exports</code> がない <a class="header-anchor" href="#no-require-exports-or-moduleexports" aria-label="Permalink to “require、exports、module.exports がない”">​</a></h4><p>ほとんどの場合、ESモジュールの <code>import</code> を使用してCommonJSモジュールをロードできます。</p><p>必要な場合は、<a href="/ja/nodejs/api/module#modulecreaterequirefilename"><code>module.createRequire()</code></a> を使用してESモジュール内に <code>require</code> 関数を構築できます。</p><h4 id="no-__filename-or-__dirname" tabindex="-1"><code>__filename</code> または <code>__dirname</code> がない <a class="header-anchor" href="#no-__filename-or-__dirname" aria-label="Permalink to “__filename または __dirname がない”">​</a></h4><p>これらのCommonJS変数はESモジュールでは利用できません。</p><p><code>__filename</code> と <code>__dirname</code> のユースケースは、<a href="/ja/nodejs/api/esm#importmetafilename"><code>import.meta.filename</code></a> と <a href="/ja/nodejs/api/esm#importmetadirname"><code>import.meta.dirname</code></a> で再現できます。</p><h4 id="no-addon-loading" tabindex="-1">アドオンのロードなし <a class="header-anchor" href="#no-addon-loading" aria-label="Permalink to “アドオンのロードなし”">​</a></h4><p><a href="/ja/nodejs/api/addons">アドオン</a> は現在、ESモジュールインポートではサポートされていません。</p><p>代わりに、<a href="/ja/nodejs/api/module#modulecreaterequirefilename"><code>module.createRequire()</code></a> または <a href="/ja/nodejs/api/process#processdlopenmodule-filename-flags"><code>process.dlopen</code></a> でロードできます。</p><h4 id="no-requireresolve" tabindex="-1"><code>require.resolve</code> がない <a class="header-anchor" href="#no-requireresolve" aria-label="Permalink to “require.resolve がない”">​</a></h4><p>相対的な解決は、<code>new URL(&#39;./local&#39;, import.meta.url)</code> を介して処理できます。</p><p>完全な <code>require.resolve</code> の代替として、<a href="/ja/nodejs/api/esm#importmetaresolvespecifier">import.meta.resolve</a> APIがあります。</p><p>または、<code>module.createRequire()</code> を使用することもできます。</p><h4 id="no-node_path" tabindex="-1"><code>NODE_PATH</code> がない <a class="header-anchor" href="#no-node_path" aria-label="Permalink to “NODE_PATH がない”">​</a></h4><p><code>NODE_PATH</code> は <code>import</code> 指定子の解決の一部ではありません。 この動作が必要な場合は、シンボリックリンクを使用してください。</p><h4 id="no-requireextensions" tabindex="-1"><code>require.extensions</code> がない <a class="header-anchor" href="#no-requireextensions" aria-label="Permalink to “require.extensions がない”">​</a></h4><p><code>require.extensions</code> は <code>import</code> では使用されません。 モジュールのカスタマイズフックで代替を提供できます。</p><h4 id="no-requirecache" tabindex="-1"><code>require.cache</code> がない <a class="header-anchor" href="#no-requirecache" aria-label="Permalink to “require.cache がない”">​</a></h4><p>ESモジュールローダーには独自のキャッシュがあるため、<code>require.cache</code> は <code>import</code> では使用されません。</p><h2 id="json-modules" tabindex="-1">JSONモジュール <a class="header-anchor" href="#json-modules" aria-label="Permalink to “JSONモジュール”">​</a></h2><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v23.1.0</td><td>JSONモジュールは実験的ではなくなりました。</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">[安定版: 2 - 安定]</p><p><a href="/ja/nodejs/api/documentation#stability-index">安定版: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">安定性: 2</a> - 安定</p></div><p>JSONファイルは <code>import</code> で参照できます。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> packageConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./package.json&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>with { type: &#39;json&#39; }</code> 構文は必須です。<a href="/ja/nodejs/api/esm#import-attributes">インポート属性</a> を参照してください。</p><p>インポートされたJSONは <code>default</code> エクスポートのみを公開します。 名前付きエクスポートはサポートされていません。 重複を避けるために、CommonJSキャッシュにキャッシュエントリが作成されます。 JSONモジュールが同じパスからすでにインポートされている場合、同じオブジェクトがCommonJSで返されます。</p><h2 id="wasm-modules" tabindex="-1">Wasm モジュール <a class="header-anchor" href="#wasm-modules" aria-label="Permalink to “Wasm モジュール”">​</a></h2><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 実験的</p></div><p>WebAssembly モジュールのインポートは <code>--experimental-wasm-modules</code> フラグの下でサポートされており、任意の <code>.wasm</code> ファイルを通常のモジュールとしてインポートできるとともに、それらのモジュールのインポートもサポートしています。</p><p>この統合は、<a href="https://github.com/webassembly/esm-integration" target="_blank" rel="noreferrer">WebAssembly の ES Module Integration Proposal</a> に沿ったものです。</p><p>たとえば、<code>index.mjs</code> に以下が含まれているとします。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module.wasm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">M</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>以下のように実行した場合：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --experimental-wasm-modules</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.mjs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>module.wasm</code> のインスタンス化のためのエクスポートインターフェースが提供されます。</p><h2 id="top-level-await" tabindex="-1">トップレベルの <code>await</code> <a class="header-anchor" href="#top-level-await" aria-label="Permalink to “トップレベルの await”">​</a></h2><p><strong>Added in: v14.8.0</strong></p><p><code>await</code> キーワードは、ECMAScript モジュールのトップレベルの本体で使用できます。</p><p><code>a.mjs</code> に以下が含まれていると仮定します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> five</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>そして、<code>b.mjs</code> に以下が含まれていると仮定します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { five } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./a.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(five); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Logs \`5\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b.mjs</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # works</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>トップレベルの <code>await</code> 式が解決されない場合、<code>node</code> プロセスは <code>13</code> の <a href="/ja/nodejs/api/process#exit-codes">ステータスコード</a> で終了します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { spawn } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:child_process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { execPath } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spawn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(execPath, [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;--input-type=module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;--eval&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Never-resolving Promise:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;await new Promise(() =&gt; {})&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">once</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;exit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Logs \`13\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="loaders" tabindex="-1">ローダー <a class="header-anchor" href="#loaders" aria-label="Permalink to “ローダー”">​</a></h2><p>以前のローダーのドキュメントは、<a href="/ja/nodejs/api/module#customization-hooks">モジュール: カスタマイズフック</a> にあります。</p><h2 id="resolution-and-loading-algorithm" tabindex="-1">解決と読み込みアルゴリズム <a class="header-anchor" href="#resolution-and-loading-algorithm" aria-label="Permalink to “解決と読み込みアルゴリズム”">​</a></h2><h3 id="features" tabindex="-1">機能 <a class="header-anchor" href="#features" aria-label="Permalink to “機能”">​</a></h3><p>デフォルトの解決器には、次のプロパティがあります。</p><ul><li>ES モジュールで使用されている FileURL ベースの解決</li><li>相対 URL および絶対 URL の解決</li><li>デフォルトの拡張子はありません</li><li>フォルダのメインはありません</li><li>node_modules を介したベア指定子のパッケージ解決ルックアップ</li><li>不明な拡張子またはプロトコルで失敗しません</li><li>オプションで、読み込みフェーズにフォーマットのヒントを提供できます</li></ul><p>デフォルトのローダーには、次のプロパティがあります。</p><ul><li><code>node:</code> URL を介した組み込みモジュールの読み込みのサポート</li><li><code>data:</code> URL を介した「インライン」モジュールの読み込みのサポート</li><li><code>file:</code> モジュールの読み込みのサポート</li><li>他の URL プロトコルで失敗します</li><li><code>file:</code> の読み込みで不明な拡張子で失敗します（<code>.cjs</code>、<code>.js</code>、<code>.mjs</code> のみをサポート）</li></ul><h3 id="resolution-algorithm" tabindex="-1">解決アルゴリズム <a class="header-anchor" href="#resolution-algorithm" aria-label="Permalink to “解決アルゴリズム”">​</a></h3><p>ESモジュール指定子をロードするアルゴリズムは、以下の<strong>ESM_RESOLVE</strong>メソッドを通じて提供されます。これは、親URLを基準としたモジュール指定子の解決済みURLを返します。</p><p>解決アルゴリズムは、モジュールのロードのための完全な解決済みURLと、推奨されるモジュール形式を決定します。解決アルゴリズムは、解決済みURLのプロトコルがロード可能かどうか、またはファイル拡張子が許可されているかどうかを決定しません。代わりに、これらの検証はNode.jsがロード段階で適用します（たとえば、<code>file:</code>、<code>data:</code>、または<code>node:</code>ではないプロトコルを持つURLをロードするように要求された場合）。</p><p>このアルゴリズムは、拡張子に基づいてファイルの形式を判別しようともします（以下の<code>ESM_FILE_FORMAT</code>アルゴリズムを参照）。ファイル拡張子を認識しない場合（たとえば、<code>.mjs</code>、<code>.cjs</code>、または<code>.json</code>ではない場合）、<code>undefined</code>の形式が返され、ロード段階でエラーがスローされます。</p><p>解決済みURLのモジュール形式を決定するアルゴリズムは<strong>ESM_FILE_FORMAT</strong>によって提供され、これは任意のファイルの固有のモジュール形式を返します。*&quot;module&quot;<em>形式はECMAScriptモジュールに対して返され、</em>&quot;commonjs&quot;<em>形式は従来のCommonJSローダーを介したロードを示すために使用されます。</em>&quot;addon&quot;*のような追加の形式は、将来のアップデートで拡張できます。</p><p>以下のアルゴリズムでは、特に明記されていない限り、すべてのサブルーチンエラーはこれらのトップレベルルーチンのエラーとして伝播されます。</p><p><em>defaultConditions</em>は、条件付き環境名配列<code>[&quot;node&quot;, &quot;import&quot;]</code>です。</p><p>リゾルバーは、次のエラーをスローする可能性があります。</p><ul><li><em>Invalid Module Specifier</em>: モジュール指定子が、無効なURL、パッケージ名、またはパッケージサブパス指定子です。</li><li><em>Invalid Package Configuration</em>: package.jsonの構成が無効であるか、無効な構成が含まれています。</li><li><em>Invalid Package Target</em>: パッケージのエクスポートまたはインポートが、パッケージのターゲットモジュールを無効な型または文字列ターゲットとして定義しています。</li><li><em>Package Path Not Exported</em>: パッケージのエクスポートが、指定されたモジュールのパッケージ内のターゲットサブパスを定義または許可していません。</li><li><em>Package Import Not Defined</em>: パッケージのインポートが指定子を定義していません。</li><li><em>Module Not Found</em>: 要求されたパッケージまたはモジュールが存在しません。</li><li><em>Unsupported Directory Import</em>: 解決されたパスがディレクトリに対応しており、これはモジュールインポートでサポートされているターゲットではありません。</li></ul><h3 id="resolution-algorithm-specification" tabindex="-1">解決アルゴリズムの仕様 <a class="header-anchor" href="#resolution-algorithm-specification" aria-label="Permalink to “解決アルゴリズムの仕様”">​</a></h3><p><strong>ESM_RESOLVE</strong>(<em>specifier</em>, <em>parentURL</em>)</p><p><strong>PACKAGE_RESOLVE</strong>(<em>packageSpecifier</em>, <em>parentURL</em>)</p><p><strong>PACKAGE_SELF_RESOLVE</strong>(<em>packageName</em>, <em>packageSubpath</em>, <em>parentURL</em>)</p><p><strong>PACKAGE_EXPORTS_RESOLVE</strong>(<em>packageURL</em>, <em>subpath</em>, <em>exports</em>, <em>conditions</em>)</p><p><strong>PACKAGE_IMPORTS_RESOLVE</strong>(<em>specifier</em>, <em>parentURL</em>, <em>conditions</em>)</p><p><strong>PACKAGE_IMPORTS_EXPORTS_RESOLVE</strong>(<em>matchKey</em>, <em>matchObj</em>, <em>packageURL</em>, <em>isImports</em>, <em>conditions</em>)</p><p><strong>PATTERN_KEY_COMPARE</strong>(<em>keyA</em>, <em>keyB</em>)</p><p><strong>PACKAGE_TARGET_RESOLVE</strong>(<em>packageURL</em>, <em>target</em>, <em>patternMatch</em>, <em>isImports</em>, <em>conditions</em>)</p><p><strong>ESM_FILE_FORMAT</strong>(<em>url</em>)</p><p><strong>LOOKUP_PACKAGE_SCOPE</strong>(<em>url</em>)</p><p><strong>READ_PACKAGE_JSON</strong>(<em>packageURL</em>)</p><p><strong>DETECT_MODULE_SYNTAX</strong>(<em>source</em>)</p><h3 id="customizing-esm-specifier-resolution-algorithm" tabindex="-1">ESM指定子解決アルゴリズムのカスタマイズ <a class="header-anchor" href="#customizing-esm-specifier-resolution-algorithm" aria-label="Permalink to “ESM指定子解決アルゴリズムのカスタマイズ”">​</a></h3><p><a href="/ja/nodejs/api/module#customization-hooks">モジュールカスタマイズフック</a>は、ESM指定子解決アルゴリズムをカスタマイズするメカニズムを提供します。 ESM指定子にCommonJSスタイルの解決を提供する例として、<a href="https://github.com/nodejs/loaders-test/tree/main/commonjs-extension-resolution-loader" target="_blank" rel="noreferrer">commonjs-extension-resolution-loader</a>があります。</p>`,191)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};