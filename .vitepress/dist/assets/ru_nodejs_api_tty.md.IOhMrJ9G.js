import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Документация TTY Node.js","description":"Модуль TTY в Node.js предоставляет интерфейс для взаимодействия с устройствами TTY, включая методы для проверки, является ли поток TTY, получения размера окна и обработки событий терминала.","frontmatter":{"title":"Документация TTY Node.js","description":"Модуль TTY в Node.js предоставляет интерфейс для взаимодействия с устройствами TTY, включая методы для проверки, является ли поток TTY, получения размера окна и обработки событий терминала.","head":[["meta",{"name":"og:title","content":"Документация TTY Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Модуль TTY в Node.js предоставляет интерфейс для взаимодействия с устройствами TTY, включая методы для проверки, является ли поток TTY, получения размера окна и обработки событий терминала."}],["meta",{"name":"twitter:title","content":"Документация TTY Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Модуль TTY в Node.js предоставляет интерфейс для взаимодействия с устройствами TTY, включая методы для проверки, является ли поток TTY, получения размера окна и обработки событий терминала."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/api/tty"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/api/tty"}]]},"headers":[],"relativePath":"ru/nodejs/api/tty.md","filePath":"ru/nodejs/api/tty.md","lastUpdated":null}`),a={name:`ru/nodejs/api/tty.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="tty" tabindex="-1">TTY <a class="header-anchor" href="#tty" aria-label="Permalink to “TTY”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/ru/nodejs/api/documentation#stability-index">Стабильно: 2</a> <a href="/ru/nodejs/api/documentation#stability-index">Стабильность: 2</a> - Стабильно</p></div><p><strong>Исходный код:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/tty.js" target="_blank" rel="noreferrer">lib/tty.js</a></p><p>Модуль <code>node:tty</code> предоставляет классы <code>tty.ReadStream</code> и <code>tty.WriteStream</code>. В большинстве случаев нет необходимости или возможности использовать этот модуль напрямую. Однако к нему можно получить доступ с помощью:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:tty&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Когда Node.js обнаруживает, что он запущен с подключенным текстовым терминалом (&quot;TTY&quot;), <a href="/ru/nodejs/api/process#processstdin"><code>process.stdin</code></a> по умолчанию инициализируется как экземпляр <code>tty.ReadStream</code>, а <a href="/ru/nodejs/api/process#processstdout"><code>process.stdout</code></a> и <a href="/ru/nodejs/api/process#processstderr"><code>process.stderr</code></a> по умолчанию будут экземплярами <code>tty.WriteStream</code>. Предпочтительный способ определить, выполняется ли Node.js в контексте TTY, - проверить, что значение свойства <code>process.stdout.isTTY</code> равно <code>true</code>:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Boolean(process.stdout.isTTY)&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Boolean(process.stdout.isTTY)&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cat</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>В большинстве случаев у приложения должно быть мало причин или вообще никаких причин для ручного создания экземпляров классов <code>tty.ReadStream</code> и <code>tty.WriteStream</code>.</p><h2 id="class-ttyreadstream" tabindex="-1">Класс: <code>tty.ReadStream</code> <a class="header-anchor" href="#class-ttyreadstream" aria-label="Permalink to “Класс: tty.ReadStream”">​</a></h2><p><strong>Добавлено в: v0.5.8</strong></p><ul><li>Расширяет: <a href="/ru/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>Представляет читаемую сторону TTY. В нормальных обстоятельствах <a href="/ru/nodejs/api/process#processstdin"><code>process.stdin</code></a> будет единственным экземпляром <code>tty.ReadStream</code> в процессе Node.js, и не должно быть причин для создания дополнительных экземпляров.</p><h3 id="readstreamisraw" tabindex="-1"><code>readStream.isRaw</code> <a class="header-anchor" href="#readstreamisraw" aria-label="Permalink to “readStream.isRaw”">​</a></h3><p><strong>Добавлено в: v0.7.7</strong></p><p><code>boolean</code>, который имеет значение <code>true</code>, если TTY в настоящее время настроен для работы в качестве необработанного устройства.</p><p>Этот флаг всегда <code>false</code> при запуске процесса, даже если терминал работает в необработанном режиме. Его значение будет меняться с последующими вызовами <code>setRawMode</code>.</p><h3 id="readstreamistty" tabindex="-1"><code>readStream.isTTY</code> <a class="header-anchor" href="#readstreamistty" aria-label="Permalink to “readStream.isTTY”">​</a></h3><p><strong>Добавлено в: v0.5.8</strong></p><p><code>boolean</code>, который всегда равен <code>true</code> для экземпляров <code>tty.ReadStream</code>.</p><h3 id="readstreamsetrawmodemode" tabindex="-1"><code>readStream.setRawMode(mode)</code> <a class="header-anchor" href="#readstreamsetrawmodemode" aria-label="Permalink to “readStream.setRawMode(mode)”">​</a></h3><p><strong>Добавлено в: v0.7.7</strong></p><ul><li><code>mode</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> Если <code>true</code>, конфигурирует <code>tty.ReadStream</code> для работы в качестве необработанного устройства. Если <code>false</code>, конфигурирует <code>tty.ReadStream</code> для работы в режиме по умолчанию. Свойство <code>readStream.isRaw</code> будет установлено в полученный режим.</li><li>Возвращает: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">&lt;this&gt;</a> Экземпляр потока чтения.</li></ul><p>Позволяет настроить <code>tty.ReadStream</code> так, чтобы он работал как необработанное устройство.</p><p>В необработанном режиме ввод всегда доступен посимвольно, без учета модификаторов. Кроме того, вся специальная обработка символов терминалом отключена, включая эхо-отображение вводимых символов. + больше не будет вызывать <code>SIGINT</code> в этом режиме.</p><h2 id="class-ttywritestream" tabindex="-1">Класс: <code>tty.WriteStream</code> <a class="header-anchor" href="#class-ttywritestream" aria-label="Permalink to “Класс: tty.WriteStream”">​</a></h2><p><strong>Добавлено в: v0.5.8</strong></p><ul><li>Расширяет: <a href="/ru/nodejs/api/net#class-netsocket">&lt;net.Socket&gt;</a></li></ul><p>Представляет записываемую сторону TTY. В нормальных условиях, <a href="/ru/nodejs/api/process#processstdout"><code>process.stdout</code></a> и <a href="/ru/nodejs/api/process#processstderr"><code>process.stderr</code></a> будут единственными экземплярами <code>tty.WriteStream</code>, созданными для процесса Node.js, и не должно быть причин для создания дополнительных экземпляров.</p><h3 id="new-ttyreadstreamfd-options" tabindex="-1"><code>new tty.ReadStream(fd[, options])</code> <a class="header-anchor" href="#new-ttyreadstreamfd-options" aria-label="Permalink to “new tty.ReadStream(fd[, options])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v0.9.4</td><td>Поддерживается аргумент <code>options</code>.</td></tr><tr><td>v0.5.8</td><td>Добавлено в: v0.5.8</td></tr></tbody></table></div><ul><li><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> Файловый дескриптор, связанный с TTY.</li><li><code>options</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> Параметры, переданные родительскому <code>net.Socket</code>, см. <code>options</code> <a href="/ru/nodejs/api/net#new-netsocketoptions"><code>конструктора net.Socket</code></a>.</li><li>Возвращает: <a href="/ru/nodejs/api/tty#class-ttyreadstream">&lt;tty.ReadStream&gt;</a></li></ul><p>Создает <code>ReadStream</code> для <code>fd</code>, связанного с TTY.</p><h3 id="new-ttywritestreamfd" tabindex="-1"><code>new tty.WriteStream(fd)</code> <a class="header-anchor" href="#new-ttywritestreamfd" aria-label="Permalink to “new tty.WriteStream(fd)”">​</a></h3><p><strong>Добавлено в: v0.5.8</strong></p><ul><li><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> Файловый дескриптор, связанный с TTY.</li><li>Возвращает: <a href="/ru/nodejs/api/tty#class-ttywritestream">&lt;tty.WriteStream&gt;</a></li></ul><p>Создает <code>WriteStream</code> для <code>fd</code>, связанного с TTY.</p><h3 id="event-resize" tabindex="-1">Событие: <code>&#39;resize&#39;</code> <a class="header-anchor" href="#event-resize" aria-label="Permalink to “Событие: &#39;resize&#39;”">​</a></h3><p><strong>Добавлено в: v0.7.7</strong></p><p>Событие <code>&#39;resize&#39;</code> возникает, когда изменяются свойства <code>writeStream.columns</code> или <code>writeStream.rows</code>. При вызове функции обратного вызова прослушивателя аргументы не передаются.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;размер экрана изменился!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">columns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}x\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rows</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="writestreamclearlinedir-callback" tabindex="-1"><code>writeStream.clearLine(dir[, callback])</code> <a class="header-anchor" href="#writestreamclearlinedir-callback" aria-label="Permalink to “writeStream.clearLine(dir[, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v12.7.0</td><td>Предоставлены обратный вызов и возвращаемое значение <code>write()</code> потока.</td></tr><tr><td>v0.7.7</td><td>Добавлено в: v0.7.7</td></tr></tbody></table></div><ul><li><p><code>dir</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></p><ul><li><code>-1</code>: слева от курсора</li><li><code>1</code>: справа от курсора</li><li><code>0</code>: вся строка</li></ul></li><li><p><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> Вызывается после завершения операции.</p></li><li><p>Возвращает: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>false</code>, если поток хочет, чтобы вызывающий код ждал, пока не будет сгенерировано событие <code>&#39;drain&#39;</code>, прежде чем продолжить запись дополнительных данных; в противном случае <code>true</code>.</p></li></ul><p><code>writeStream.clearLine()</code> очищает текущую строку этого <code>WriteStream</code> в направлении, указанном <code>dir</code>.</p><h3 id="writestreamclearscreendowncallback" tabindex="-1"><code>writeStream.clearScreenDown([callback])</code> <a class="header-anchor" href="#writestreamclearscreendowncallback" aria-label="Permalink to “writeStream.clearScreenDown([callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v12.7.0</td><td>Предоставлены обратный вызов и возвращаемое значение <code>write()</code> потока.</td></tr><tr><td>v0.7.7</td><td>Добавлено в: v0.7.7</td></tr></tbody></table></div><ul><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> Вызывается после завершения операции.</li><li>Возвращает: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>false</code>, если поток хочет, чтобы вызывающий код ждал, пока не будет сгенерировано событие <code>&#39;drain&#39;</code>, прежде чем продолжить запись дополнительных данных; в противном случае <code>true</code>.</li></ul><p><code>writeStream.clearScreenDown()</code> очищает этот <code>WriteStream</code> от текущего курсора вниз.</p><h3 id="writestreamcolumns" tabindex="-1"><code>writeStream.columns</code> <a class="header-anchor" href="#writestreamcolumns" aria-label="Permalink to “writeStream.columns”">​</a></h3><p><strong>Добавлено в версии: v0.7.7</strong></p><p><code>number</code>, указывающий количество столбцов, которое в данный момент имеет TTY. Это свойство обновляется при каждом событии <code>&#39;resize&#39;</code>.</p><h3 id="writestreamcursortox-y-callback" tabindex="-1"><code>writeStream.cursorTo(x[, y][, callback])</code> <a class="header-anchor" href="#writestreamcursortox-y-callback" aria-label="Permalink to “writeStream.cursorTo(x[, y][, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v12.7.0</td><td>Открыт обратный вызов write() потока и возвращаемое значение.</td></tr><tr><td>v0.7.7</td><td>Добавлено в версии: v0.7.7</td></tr></tbody></table></div><ul><li><code>x</code> <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>y</code> <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> Вызывается после завершения операции.</li><li>Возвращает: <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>false</code>, если поток желает, чтобы вызывающий код подождал, пока не будет испущено событие <code>&#39;drain&#39;</code>, прежде чем продолжить запись дополнительных данных; в противном случае <code>true</code>.</li></ul><p><code>writeStream.cursorTo()</code> перемещает курсор этого <code>WriteStream</code> в указанную позицию.</p><h3 id="writestreamgetcolordepthenv" tabindex="-1"><code>writeStream.getColorDepth([env])</code> <a class="header-anchor" href="#writestreamgetcolordepthenv" aria-label="Permalink to “writeStream.getColorDepth([env])”">​</a></h3><p><strong>Добавлено в версии: v9.9.0</strong></p><ul><li><code>env</code> <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> Объект, содержащий переменные окружения для проверки. Это позволяет имитировать использование определенного терминала. <strong>По умолчанию:</strong> <code>process.env</code>.</li><li>Возвращает: <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li></ul><p>Возвращает:</p><ul><li><code>1</code> для 2,</li><li><code>4</code> для 16,</li><li><code>8</code> для 256,</li><li><code>24</code> для 16 777 216 поддерживаемых цветов.</li></ul><p>Используйте это, чтобы определить, какие цвета поддерживает терминал. Из-за природы цветов в терминалах возможны как ложные срабатывания, так и ложные отрицания. Это зависит от информации о процессе и переменных окружения, которые могут лгать об используемом терминале. Можно передать объект <code>env</code> для имитации использования определенного терминала. Это может быть полезно для проверки поведения конкретных настроек среды.</p><p>Чтобы принудительно включить определенную поддержку цветов, используйте одну из приведенных ниже настроек среды.</p><ul><li>2 цвета: <code>FORCE_COLOR = 0</code> (Отключает цвета)</li><li>16 цветов: <code>FORCE_COLOR = 1</code></li><li>256 цветов: <code>FORCE_COLOR = 2</code></li><li>16 777 216 цветов: <code>FORCE_COLOR = 3</code></li></ul><p>Отключить поддержку цветов также можно с помощью переменных окружения <code>NO_COLOR</code> и <code>NODE_DISABLE_COLORS</code>.</p><h3 id="writestreamgetwindowsize" tabindex="-1"><code>writeStream.getWindowSize()</code> <a class="header-anchor" href="#writestreamgetwindowsize" aria-label="Permalink to “writeStream.getWindowSize()”">​</a></h3><p><strong>Добавлено в версии: v0.7.7</strong></p><ul><li>Возвращает: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number[]&gt;</a></li></ul><p><code>writeStream.getWindowSize()</code> возвращает размер TTY, соответствующего этому <code>WriteStream</code>. Массив имеет тип <code>[numColumns, numRows]</code>, где <code>numColumns</code> и <code>numRows</code> представляют количество столбцов и строк в соответствующем TTY.</p><h3 id="writestreamhascolorscount-env" tabindex="-1"><code>writeStream.hasColors([count][, env])</code> <a class="header-anchor" href="#writestreamhascolorscount-env" aria-label="Permalink to “writeStream.hasColors([count][, env])”">​</a></h3><p><strong>Добавлено в версии: v11.13.0, v10.16.0</strong></p><ul><li><code>count</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;integer&gt;</a> Количество запрошенных цветов (минимум 2). <strong>По умолчанию:</strong> 16.</li><li><code>env</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> Объект, содержащий переменные окружения для проверки. Это позволяет имитировать использование определенного терминала. <strong>По умолчанию:</strong> <code>process.env</code>.</li><li>Возвращает: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>Возвращает <code>true</code>, если <code>writeStream</code> поддерживает как минимум столько цветов, сколько указано в <code>count</code>. Минимальная поддержка - 2 (черный и белый).</p><p>Имеет те же ложные срабатывания и отрицательные результаты, что и описано в <a href="/ru/nodejs/api/tty#writestreamgetcolordepthenv"><code>writeStream.getColorDepth()</code></a>.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Возвращает true или false в зависимости от того, поддерживает ли \`stdout\` как минимум 16 цветов.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Возвращает true или false в зависимости от того, поддерживает ли \`stdout\` как минимум 256 цветов.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ TMUX: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Возвращает true.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasColors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { TMUX: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Возвращает false (настройка окружения предполагает поддержку 2 ** 8 цветов).</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="writestreamistty" tabindex="-1"><code>writeStream.isTTY</code> <a class="header-anchor" href="#writestreamistty" aria-label="Permalink to “writeStream.isTTY”">​</a></h3><p><strong>Добавлено в версии: v0.5.8</strong></p><p><code>boolean</code>, который всегда <code>true</code>.</p><h3 id="writestreammovecursordx-dy-callback" tabindex="-1"><code>writeStream.moveCursor(dx, dy[, callback])</code> <a class="header-anchor" href="#writestreammovecursordx-dy-callback" aria-label="Permalink to “writeStream.moveCursor(dx, dy[, callback])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[История]</p><table tabindex="0"><thead><tr><th>Версия</th><th>Изменения</th></tr></thead><tbody><tr><td>v12.7.0</td><td>Предоставляется обратный вызов write() потока и возвращаемое значение.</td></tr><tr><td>v0.7.7</td><td>Добавлено в версии: v0.7.7</td></tr></tbody></table></div><ul><li><code>dx</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>dy</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a> Вызывается после завершения операции.</li><li>Возвращает: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> <code>false</code>, если поток желает, чтобы вызывающий код ждал, пока не будет сгенерировано событие <code>&#39;drain&#39;</code>, прежде чем продолжить запись дополнительных данных; в противном случае <code>true</code>.</li></ul><p><code>writeStream.moveCursor()</code> перемещает курсор этого <code>WriteStream</code> <em>относительно</em> его текущей позиции.</p><h3 id="writestreamrows" tabindex="-1"><code>writeStream.rows</code> <a class="header-anchor" href="#writestreamrows" aria-label="Permalink to “writeStream.rows”">​</a></h3><p><strong>Добавлено в: v0.7.7</strong></p><p>Число <code>number</code>, указывающее количество строк, которое в данный момент имеет TTY. Это свойство обновляется всякий раз, когда генерируется событие <code>&#39;resize&#39;</code>.</p><h2 id="ttyisattyfd" tabindex="-1"><code>tty.isatty(fd)</code> <a class="header-anchor" href="#ttyisattyfd" aria-label="Permalink to “tty.isatty(fd)”">​</a></h2><p><strong>Добавлено в: v0.5.8</strong></p><ul><li><code>fd</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> Числовой файловый дескриптор</li><li>Возвращает: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a></li></ul><p>Метод <code>tty.isatty()</code> возвращает <code>true</code>, если данный <code>fd</code> связан с TTY, и <code>false</code>, если нет, в том числе, когда <code>fd</code> не является неотрицательным целым числом.</p>`,88)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};