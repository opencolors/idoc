import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js インスペクターモジュールのドキュメント","description":"Node.jsのインスペクターモジュールは、V8インスペクターと対話するためのAPIを提供し、開発者がインスペクタープロトコルに接続してNode.jsアプリケーションをデバッグできるようにします。","frontmatter":{"title":"Node.js インスペクターモジュールのドキュメント","description":"Node.jsのインスペクターモジュールは、V8インスペクターと対話するためのAPIを提供し、開発者がインスペクタープロトコルに接続してNode.jsアプリケーションをデバッグできるようにします。","head":[["meta",{"name":"og:title","content":"Node.js インスペクターモジュールのドキュメント | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.jsのインスペクターモジュールは、V8インスペクターと対話するためのAPIを提供し、開発者がインスペクタープロトコルに接続してNode.jsアプリケーションをデバッグできるようにします。"}],["meta",{"name":"twitter:title","content":"Node.js インスペクターモジュールのドキュメント | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.jsのインスペクターモジュールは、V8インスペクターと対話するためのAPIを提供し、開発者がインスペクタープロトコルに接続してNode.jsアプリケーションをデバッグできるようにします。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/api/inspector"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/api/inspector"}]]},"headers":[],"relativePath":"ja/nodejs/api/inspector.md","filePath":"ja/nodejs/api/inspector.md","lastUpdated":null}`),a={name:`ja/nodejs/api/inspector.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="inspector" tabindex="-1">Inspector <a class="header-anchor" href="#inspector" aria-label="Permalink to “Inspector”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">[Stable: 2 - Stable]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 2</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 2</a> - 安定版</p></div><p><strong>ソースコード:</strong> <a href="https://github.com/nodejs/node/blob/v23.5.0/lib/inspector.js" target="_blank" rel="noreferrer">lib/inspector.js</a></p><p><code>node:inspector</code>モジュールは、V8インスペクターと対話するためのAPIを提供します。</p><p>以下を使用してアクセスできます。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-17" id="tab-18" checked><label data-title="ESM" for="tab-18">ESM</label><input type="radio" name="group-17" id="tab-19"><label data-title="CJS" for="tab-19">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inspector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:inspector/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inspector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:inspector/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><p>または</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-24" id="tab-25" checked><label data-title="ESM" for="tab-25">ESM</label><input type="radio" name="group-24" id="tab-26"><label data-title="CJS" for="tab-26">CJS</label></div><div class="blocks"><div class="language-js active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inspector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:inspector&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inspector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:inspector&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><h2 id="promises-api" tabindex="-1">Promises API <a class="header-anchor" href="#promises-api" aria-label="Permalink to “Promises API”">​</a></h2><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - 試験的</p></div><p><strong>追加:</strong> v19.0.0</p><h3 id="class-inspectorsession" tabindex="-1">クラス: <code>inspector.Session</code> <a class="header-anchor" href="#class-inspectorsession" aria-label="Permalink to “クラス: inspector.Session”">​</a></h3><ul><li>拡張: <a href="/ja/nodejs/api/events#class-eventemitter">&lt;EventEmitter&gt;</a></li></ul><p><code>inspector.Session</code>は、V8インスペクターバックエンドにメッセージをディスパッチし、メッセージ応答と通知を受信するために使用されます。</p><h4 id="new-inspectorsession" tabindex="-1"><code>new inspector.Session()</code> <a class="header-anchor" href="#new-inspectorsession" aria-label="Permalink to “new inspector.Session()”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p><code>inspector.Session</code>クラスの新しいインスタンスを作成します。 インスペクターバックエンドにメッセージをディスパッチする前に、インスペクターセッションを<a href="/ja/nodejs/api/inspector#sessionconnect"><code>session.connect()</code></a>を介して接続する必要があります。</p><p><code>Session</code>を使用する場合、console APIによって出力されたオブジェクトは、手動で<code>Runtime.DiscardConsoleEntries</code>コマンドを実行しない限り解放されません。</p><h4 id="event-inspectornotification" tabindex="-1">イベント: <code>&#39;inspectorNotification&#39;</code> <a class="header-anchor" href="#event-inspectornotification" aria-label="Permalink to “イベント: &#39;inspectorNotification&#39;”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 通知メッセージオブジェクト</li></ul><p>V8インスペクターからの通知を受信すると発生します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;inspectorNotification&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.method));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Debugger.paused</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Debugger.resumed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>特定の方法でのみ通知をサブスクライブすることも可能です。</p><h4 id="イベント-lt-inspector-protocol-method-gt-event-lt-inspector-protocol-method-gt" tabindex="-1">イベント: <code>&amp;lt;inspector-protocol-method&amp;gt;</code>; {#event-&lt;inspector-protocol-method&gt;;} <a class="header-anchor" href="#イベント-lt-inspector-protocol-method-gt-event-lt-inspector-protocol-method-gt" aria-label="Permalink to “イベント: &amp;lt;inspector-protocol-method&amp;gt;; {#event-&amp;lt;inspector-protocol-method&amp;gt;;}”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 通知メッセージオブジェクト</li></ul><p><code>method</code> フィールドが <code>\\&lt;inspector-protocol-method\\&gt;</code> 値に設定されているインスペクター通知を受信したときに発生します。</p><p>次のスニペットは、<a href="https://chromedevtools.github.io/devtools-protocol/v8/Debugger#event-paused" target="_blank" rel="noreferrer"><code>&#39;Debugger.paused&#39;</code></a> イベントにリスナーをインストールし、プログラムの実行が中断されるたびに (たとえば、ブレークポイントを介して) プログラムの中断理由を出力します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Debugger.paused&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params.hitBreakpoints);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ &#39;/the/file/that/has/the/breakpoint.js:11:0&#39; ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="sessionconnect" tabindex="-1"><code>session.connect()</code> <a class="header-anchor" href="#sessionconnect" aria-label="Permalink to “session.connect()”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p>セッションをインスペクターバックエンドに接続します。</p><h4 id="sessionconnecttomainthread" tabindex="-1"><code>session.connectToMainThread()</code> <a class="header-anchor" href="#sessionconnecttomainthread" aria-label="Permalink to “session.connectToMainThread()”">​</a></h4><p><strong>追加:</strong> v12.11.0</p><p>セッションをメインスレッドのインスペクターバックエンドに接続します。 このAPIがWorkerスレッドで呼び出されなかった場合、例外がスローされます。</p><h4 id="sessiondisconnect" tabindex="-1"><code>session.disconnect()</code> <a class="header-anchor" href="#sessiondisconnect" aria-label="Permalink to “session.disconnect()”">​</a></h4><p><strong>追加:</strong> v8.0.0</p><p>セッションをすぐに閉じます。 保留中のすべてのメッセージコールバックはエラーで呼び出されます。 メッセージを再度送信できるようにするには、<a href="/ja/nodejs/api/inspector#sessionconnect"><code>session.connect()</code></a> を呼び出す必要があります。 再接続されたセッションは、有効になっているエージェントや構成済みのブレークポイントなど、すべてのインスペクター状態を失います。</p><h4 id="sessionpostmethod-params" tabindex="-1"><code>session.post(method[, params])</code> <a class="header-anchor" href="#sessionpostmethod-params" aria-label="Permalink to “session.post(method[, params])”">​</a></h4><p><strong>追加:</strong> v19.0.0</p><ul><li><code>method</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>params</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">&lt;Promise&gt;</a></li></ul><p>メッセージをインスペクターバックエンドにポストします。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Session } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:inspector/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Runtime.evaluate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { expression: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2 + 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: { result: { type: &#39;number&#39;, value: 4, description: &#39;4&#39; } }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>V8インスペクタープロトコルの最新バージョンは、<a href="https://chromedevtools.github.io/devtools-protocol/v8/" target="_blank" rel="noreferrer">Chrome DevTools Protocol Viewer</a> に公開されています。</p><p>Node.jsインスペクターは、V8によって宣言されたすべてのChrome DevTools Protocolドメインをサポートしています。 Chrome DevTools Protocolドメインは、アプリケーションの状態を検査し、実行時イベントをリッスンするために使用されるランタイムエージェントの1つと対話するためのインターフェイスを提供します。</p><h4 id="example-usage" tabindex="-1">使用例 <a class="header-anchor" href="#example-usage" aria-label="Permalink to “使用例”">​</a></h4><p>デバッガー以外にも、さまざまなV8プロファイラーがDevToolsプロトコルを通じて利用可能です。</p><h5 id="cpu-profiler" tabindex="-1">CPUプロファイラー <a class="header-anchor" href="#cpu-profiler" aria-label="Permalink to “CPUプロファイラー”">​</a></h5><p><a href="https://chromedevtools.github.io/devtools-protocol/v8/Profiler" target="_blank" rel="noreferrer">CPUプロファイラー</a>の使用例を以下に示します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Session } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:inspector/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Profiler.enable&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Profiler.start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ここで測定対象のビジネスロジックを呼び出します...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// しばらくして...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Profiler.stop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// プロファイルをディスクに書き込み、アップロードなど</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./profile.cpuprofile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(profile));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="heap-profiler" tabindex="-1">ヒーププロファイラー <a class="header-anchor" href="#heap-profiler" aria-label="Permalink to “ヒーププロファイラー”">​</a></h5><p><a href="https://chromedevtools.github.io/devtools-protocol/v8/HeapProfiler" target="_blank" rel="noreferrer">ヒーププロファイラー</a>の使用例を以下に示します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Session } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:inspector/promises&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;profile.heapsnapshot&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;w&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HeapProfiler.addHeapSnapshotChunk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd, m.params.chunk);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HeapProfiler.takeHeapSnapshot&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HeapProfiler.takeHeapSnapshot done:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="callback-api" tabindex="-1">コールバックAPI <a class="header-anchor" href="#callback-api" aria-label="Permalink to “コールバックAPI”">​</a></h2><h3 id="class-inspectorsession_1" tabindex="-1">クラス: <code>inspector.Session</code> <a class="header-anchor" href="#class-inspectorsession_1" aria-label="Permalink to “クラス: inspector.Session”">​</a></h3><ul><li>拡張: <a href="/ja/nodejs/api/events#class-eventemitter">&lt;EventEmitter&gt;</a></li></ul><p><code>inspector.Session</code>は、V8インスペクターバックエンドにメッセージをディスパッチし、メッセージ応答と通知を受信するために使用されます。</p><h4 id="new-inspectorsession_1" tabindex="-1"><code>new inspector.Session()</code> <a class="header-anchor" href="#new-inspectorsession_1" aria-label="Permalink to “new inspector.Session()”">​</a></h4><p><strong>追加: v8.0.0</strong></p><p><code>inspector.Session</code>クラスの新しいインスタンスを作成します。 インスペクターセッションは、<a href="/ja/nodejs/api/inspector#sessionconnect"><code>session.connect()</code></a>を介して接続してから、メッセージをインスペクターバックエンドにディスパッチする必要があります。</p><p><code>Session</code>を使用する場合、コンソールAPIによって出力されたオブジェクトは、手動で<code>Runtime.DiscardConsoleEntries</code>コマンドを実行しない限り、解放されません。</p><h4 id="event-inspectornotification_1" tabindex="-1">Event: <code>&#39;inspectorNotification&#39;</code> <a class="header-anchor" href="#event-inspectornotification_1" aria-label="Permalink to “Event: &#39;inspectorNotification&#39;”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 通知メッセージオブジェクト</li></ul><p>V8 Inspectorからの通知を受信したときに発生します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;inspectorNotification&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.method));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Debugger.paused</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Debugger.resumed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>特定メソッドの通知のみをサブスクライブすることも可能です。</p><h4 id="event-lt-inspector-protocol-method-gt-event-lt-inspector-protocol-method-gt-1" tabindex="-1">Event: <code>&amp;lt;inspector-protocol-method&amp;gt;</code>; {#event-&lt;inspector-protocol-method&gt;;_1} <a class="header-anchor" href="#event-lt-inspector-protocol-method-gt-event-lt-inspector-protocol-method-gt-1" aria-label="Permalink to “Event: &amp;lt;inspector-protocol-method&amp;gt;; {#event-&amp;lt;inspector-protocol-method&amp;gt;;_1}”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> 通知メッセージオブジェクト</li></ul><p>methodフィールドが <code>\\&lt;inspector-protocol-method\\&gt;</code> の値に設定されたインスペクター通知を受信したときに発生します。</p><p>次のスニペットは、<a href="https://chromedevtools.github.io/devtools-protocol/v8/Debugger#event-paused" target="_blank" rel="noreferrer"><code>&#39;Debugger.paused&#39;</code></a> イベントにリスナーをインストールし、プログラムの実行が中断されるたびに（ブレークポイントなどによって）プログラムが中断された理由を出力します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Debugger.paused&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params.hitBreakpoints);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ &#39;/the/file/that/has/the/breakpoint.js:11:0&#39; ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="sessionconnect_1" tabindex="-1"><code>session.connect()</code> <a class="header-anchor" href="#sessionconnect_1" aria-label="Permalink to “session.connect()”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p>セッションをインスペクターバックエンドに接続します。</p><h4 id="sessionconnecttomainthread_1" tabindex="-1"><code>session.connectToMainThread()</code> <a class="header-anchor" href="#sessionconnecttomainthread_1" aria-label="Permalink to “session.connectToMainThread()”">​</a></h4><p><strong>Added in: v12.11.0</strong></p><p>セッションをメインスレッドのインスペクターバックエンドに接続します。この API が Worker スレッドで呼び出されなかった場合は、例外がスローされます。</p><h4 id="sessiondisconnect_1" tabindex="-1"><code>session.disconnect()</code> <a class="header-anchor" href="#sessiondisconnect_1" aria-label="Permalink to “session.disconnect()”">​</a></h4><p><strong>Added in: v8.0.0</strong></p><p>セッションを直ちに閉じます。保留中のすべてのメッセージコールバックは、エラーとともに呼び出されます。メッセージを再度送信できるようにするには、<a href="/ja/nodejs/api/inspector#sessionconnect"><code>session.connect()</code></a> を呼び出す必要があります。再接続されたセッションは、有効化されたエージェントや構成されたブレークポイントなど、すべてのインスペクター状態を失います。</p><h4 id="sessionpostmethod-params-callback" tabindex="-1"><code>session.post(method[, params][, callback])</code> <a class="header-anchor" href="#sessionpostmethod-params-callback" aria-label="Permalink to “session.post(method[, params][, callback])”">​</a></h4><div class="info custom-block"><p class="custom-block-title">[History]</p><table tabindex="0"><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v18.0.0</td><td><code>callback</code> 引数に無効なコールバックを渡すと、<code>ERR_INVALID_CALLBACK</code> ではなく <code>ERR_INVALID_ARG_TYPE</code> がスローされるようになりました。</td></tr><tr><td>v8.0.0</td><td>Added in: v8.0.0</td></tr></tbody></table></div><ul><li><code>method</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a></li><li><code>params</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li><li><code>callback</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noreferrer">&lt;Function&gt;</a></li></ul><p>メッセージをインスペクターバックエンドに投稿します。応答を受信すると、<code>callback</code> に通知されます。<code>callback</code> は、error とメッセージ固有の結果という 2 つのオプションの引数を受け入れる関数です。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Runtime.evaluate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { expression: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2 + 2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: { type: &#39;number&#39;, value: 4, description: &#39;4&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>V8インスペクタープロトコルの最新バージョンは、<a href="https://chromedevtools.github.io/devtools-protocol/v8/" target="_blank" rel="noreferrer">Chrome DevTools Protocol Viewer</a>で公開されています。</p><p>Node.jsインスペクターは、V8によって宣言されたすべてのChrome DevToolsプロトコルドメインをサポートしています。Chrome DevToolsプロトコルドメインは、アプリケーションの状態を検査し、ランタイムイベントをリッスンするために使用されるランタイムエージェントの1つと対話するためのインターフェースを提供します。</p><p>V8に <code>HeapProfiler.takeHeapSnapshot</code> または <code>HeapProfiler.stopTrackingHeapObjects</code> コマンドを送信するときに、<code>reportProgress</code> を <code>true</code> に設定することはできません。</p><h4 id="example-usage_1" tabindex="-1">Example usage <a class="header-anchor" href="#example-usage_1" aria-label="Permalink to “Example usage”">​</a></h4><p>デバッガーの他に、さまざまな V8 プロファイラーが DevTools プロトコルを通じて利用できます。</p><h5 id="cpu-profiler_1" tabindex="-1">CPU プロファイラー <a class="header-anchor" href="#cpu-profiler_1" aria-label="Permalink to “CPU プロファイラー”">​</a></h5><p><a href="https://chromedevtools.github.io/devtools-protocol/v8/Profiler" target="_blank" rel="noreferrer">CPU プロファイラー</a> の使用例を以下に示します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inspector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:inspector&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inspector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Profiler.enable&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Profiler.start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ここで測定対象のビジネスロジックを呼び出します...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // しばらくして...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Profiler.stop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // プロファイルをディスクに書き込み、アップロードなどを行います。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./profile.cpuprofile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(profile));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h5 id="heap-profiler_1" tabindex="-1">ヒーププロファイラー <a class="header-anchor" href="#heap-profiler_1" aria-label="Permalink to “ヒーププロファイラー”">​</a></h5><p><a href="https://chromedevtools.github.io/devtools-protocol/v8/HeapProfiler" target="_blank" rel="noreferrer">ヒーププロファイラー</a> の使用例を以下に示します。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inspector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:inspector&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inspector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;profile.heapsnapshot&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;w&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HeapProfiler.addHeapSnapshotChunk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd, m.params.chunk);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HeapProfiler.takeHeapSnapshot&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HeapProfiler.takeHeapSnapshot done:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err, r);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="common-objects" tabindex="-1">Common Objects <a class="header-anchor" href="#common-objects" aria-label="Permalink to “Common Objects”">​</a></h2><h3 id="inspectorclose" tabindex="-1"><code>inspector.close()</code> <a class="header-anchor" href="#inspectorclose" aria-label="Permalink to “inspector.close()”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v18.10.0</td><td>API が worker スレッドで公開されました。</td></tr><tr><td>v9.0.0</td><td>Added in: v9.0.0</td></tr></tbody></table></div><p>残りのすべての接続を閉じようとし、すべてが閉じるまでイベントループをブロックします。すべての接続が閉じられると、インスペクターを非アクティブ化します。</p><h3 id="inspectorconsole" tabindex="-1"><code>inspector.console</code> <a class="header-anchor" href="#inspectorconsole" aria-label="Permalink to “inspector.console”">​</a></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a> リモートインスペクターコンソールにメッセージを送信するオブジェクト。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node:inspector&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>インスペクターコンソールは、Node.js console と API の同等性を持っていません。</p><h3 id="inspectoropenport-host-wait" tabindex="-1"><code>inspector.open([port[, host[, wait]]])</code> <a class="header-anchor" href="#inspectoropenport-host-wait" aria-label="Permalink to “inspector.open([port[, host[, wait]]])”">​</a></h3><div class="info custom-block"><p class="custom-block-title">[履歴]</p><table tabindex="0"><thead><tr><th>バージョン</th><th>変更点</th></tr></thead><tbody><tr><td>v20.6.0</td><td>inspector.open() が <code>Disposable</code> オブジェクトを返すようになりました。</td></tr></tbody></table></div><ul><li><code>port</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type" target="_blank" rel="noreferrer">&lt;number&gt;</a> インスペクター接続をリッスンするポート。省略可能です。<strong>デフォルト:</strong> CLI で指定されたもの。</li><li><code>host</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> インスペクター接続をリッスンするホスト。省略可能です。<strong>デフォルト:</strong> CLI で指定されたもの。</li><li><code>wait</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type" target="_blank" rel="noreferrer">&lt;boolean&gt;</a> クライアントが接続するまでブロックします。省略可能です。<strong>デフォルト:</strong> <code>false</code>。</li><li>戻り値: <a href="https://tc39.es/proposal-explicit-resource-management/#sec-disposable-interface" target="_blank" rel="noreferrer">&lt;Disposable&gt;</a> <a href="/ja/nodejs/api/inspector#inspectorclose"><code>inspector.close()</code></a> を呼び出す Disposable。</li></ul><p>ホストとポートでインスペクターを有効にします。 <code>node --inspect=[[host:]port]</code> と同等ですが、node の起動後にプログラム的に実行できます。</p><p>wait が <code>true</code> の場合、クライアントがインスペクトポートに接続し、フロー制御がデバッガークライアントに渡されるまでブロックします。</p><p><code>host</code> パラメーターの使用に関する <a href="/ja/nodejs/api/cli#warning-binding-inspector-to-a-public-ipport-combination-is-insecure">セキュリティ警告</a> を参照してください。</p><h3 id="inspectorurl" tabindex="-1"><code>inspector.url()</code> <a class="header-anchor" href="#inspectorurl" aria-label="Permalink to “inspector.url()”">​</a></h3><ul><li>戻り値: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type" target="_blank" rel="noreferrer">&lt;string&gt;</a> | <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type" target="_blank" rel="noreferrer">&lt;undefined&gt;</a></li></ul><p>アクティブなインスペクターの URL を返します。存在しない場合は <code>undefined</code> を返します。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inspect</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;inspector.url()&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Debugger</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> listening</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">For</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> see:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://nodejs.org/en/docs/inspector</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --inspect=localhost:3000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;inspector.url()&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Debugger</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> listening</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">For</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> see:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://nodejs.org/en/docs/inspector</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;inspector.url()&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="inspectorwaitfordebugger" tabindex="-1"><code>inspector.waitForDebugger()</code> <a class="header-anchor" href="#inspectorwaitfordebugger" aria-label="Permalink to “inspector.waitForDebugger()”">​</a></h3><p><strong>追加:</strong> v12.7.0</p><p>クライアント（既存または後から接続されたもの）が <code>Runtime.runIfWaitingForDebugger</code> コマンドを送信するまでブロックします。</p><p>アクティブなインスペクターがない場合、例外がスローされます。</p><h2 id="integration-with-devtools" tabindex="-1">DevTools との統合 <a class="header-anchor" href="#integration-with-devtools" aria-label="Permalink to “DevTools との統合”">​</a></h2><p><code>node:inspector</code> モジュールは、Chrome DevTools Protocol をサポートする devtools と統合するための API を提供します。実行中の Node.js インスタンスに接続された DevTools フロントエンドは、インスタンスから発行されたプロトコルイベントをキャプチャし、デバッグを容易にするためにそれに応じて表示できます。以下のメソッドは、接続されたすべてのフロントエンドにプロトコルイベントをブロードキャストします。メソッドに渡される <code>params</code> は、プロトコルに応じてオプションになる場合があります。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`Network.requestWillBeSent\` イベントが発火されます。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inspector.Network.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestWillBeSent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  requestId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;request-id-1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  timestamp: Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wallTime: Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  request: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://nodejs.org/en&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="inspectornetworkrequestwillbesentparams" tabindex="-1"><code>inspector.Network.requestWillBeSent([params])</code> <a class="header-anchor" href="#inspectornetworkrequestwillbesentparams" aria-label="Permalink to “inspector.Network.requestWillBeSent([params])”">​</a></h3><p><strong>追加:</strong> v22.6.0, v20.18.0</p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 実験的</p></div><ul><li><code>params</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>この機能は、<code>--experimental-network-inspection</code> フラグが有効になっている場合にのみ使用できます。</p><p>接続されたフロントエンドに <code>Network.requestWillBeSent</code> イベントをブロードキャストします。このイベントは、アプリケーションが HTTP リクエストを送信しようとしていることを示します。</p><h3 id="inspectornetworkresponsereceivedparams" tabindex="-1"><code>inspector.Network.responseReceived([params])</code> <a class="header-anchor" href="#inspectornetworkresponsereceivedparams" aria-label="Permalink to “inspector.Network.responseReceived([params])”">​</a></h3><p><strong>追加:</strong> v22.6.0, v20.18.0</p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">安定度: 1</a> - 実験的</p></div><ul><li><code>params</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>この機能は、<code>--experimental-network-inspection</code> フラグが有効になっている場合にのみ使用できます。</p><p>接続されたフロントエンドに <code>Network.responseReceived</code> イベントをブロードキャストします。このイベントは、HTTP レスポンスが利用可能になったことを示します。</p><h3 id="inspectornetworkloadingfinishedparams" tabindex="-1"><code>inspector.Network.loadingFinished([params])</code> <a class="header-anchor" href="#inspectornetworkloadingfinishedparams" aria-label="Permalink to “inspector.Network.loadingFinished([params])”">​</a></h3><p><strong>Added in: v22.6.0, v20.18.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - Experimental</p></div><ul><li><code>params</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>この機能は、<code>--experimental-network-inspection</code> フラグが有効になっている場合にのみ利用可能です。</p><p>接続されたフロントエンドに <code>Network.loadingFinished</code> イベントをブロードキャストします。このイベントは、HTTP リクエストのロードが終了したことを示します。</p><h3 id="inspectornetworkloadingfailedparams" tabindex="-1"><code>inspector.Network.loadingFailed([params])</code> <a class="header-anchor" href="#inspectornetworkloadingfailedparams" aria-label="Permalink to “inspector.Network.loadingFailed([params])”">​</a></h3><p><strong>Added in: v22.7.0, v20.18.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[Stable: 1 - Experimental]</p><p><a href="/ja/nodejs/api/documentation#stability-index">Stable: 1</a> <a href="/ja/nodejs/api/documentation#stability-index">Stability: 1</a> - Experimental</p></div><ul><li><code>params</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">&lt;Object&gt;</a></li></ul><p>この機能は、<code>--experimental-network-inspection</code> フラグが有効になっている場合にのみ利用可能です。</p><p>接続されたフロントエンドに <code>Network.loadingFailed</code> イベントをブロードキャストします。このイベントは、HTTP リクエストのロードに失敗したことを示します。</p><h2 id="support-of-breakpoints" tabindex="-1">ブレークポイントのサポート <a class="header-anchor" href="#support-of-breakpoints" aria-label="Permalink to “ブレークポイントのサポート”">​</a></h2><p>Chrome DevTools Protocol の <a href="https://chromedevtools.github.io/devtools-protocol/v8/Debugger" target="_blank" rel="noreferrer"><code>Debugger</code> ドメイン</a> により、<code>inspector.Session</code> はプログラムにアタッチし、コードをステップ実行するためのブレークポイントを設定できます。</p><p>ただし、<a href="/ja/nodejs/api/inspector#sessionconnect"><code>session.connect()</code></a> で接続された同じスレッドの <code>inspector.Session</code> でブレークポイントを設定することは避ける必要があります。アタッチおよび一時停止されているプログラムは、まさにデバッガー自体であるためです。代わりに、<a href="/ja/nodejs/api/inspector#sessionconnecttomainthread"><code>session.connectToMainThread()</code></a> でメインスレッドに接続し、ワーカースレッドにブレークポイントを設定するか、WebSocket 接続を介して <a href="/ja/nodejs/api/debugger">Debugger</a> プログラムに接続してみてください。</p>`,151)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};