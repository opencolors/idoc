import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Понимание setImmediate() в Node.js","description":"Узнайте, как работает setImmediate() в Node.js, его отличия от setTimeout(), process.nextTick() и Promise.then(), а также как он взаимодействует с циклом событий и очередями.","frontmatter":{"title":"Понимание setImmediate() в Node.js","description":"Узнайте, как работает setImmediate() в Node.js, его отличия от setTimeout(), process.nextTick() и Promise.then(), а также как он взаимодействует с циклом событий и очередями.","head":[["meta",{"name":"og:title","content":"Понимание setImmediate() в Node.js | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Узнайте, как работает setImmediate() в Node.js, его отличия от setTimeout(), process.nextTick() и Promise.then(), а также как он взаимодействует с циклом событий и очередями."}],["meta",{"name":"twitter:title","content":"Понимание setImmediate() в Node.js | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Узнайте, как работает setImmediate() в Node.js, его отличия от setTimeout(), process.nextTick() и Promise.then(), а также как он взаимодействует с циклом событий и очередями."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/guide/understanding-setimmediate"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/guide/understanding-setimmediate"}]]},"headers":[],"relativePath":"ru/nodejs/guide/understanding-setimmediate.md","filePath":"ru/nodejs/guide/understanding-setimmediate.md","lastUpdated":1749464498000}`),a={name:`ru/nodejs/guide/understanding-setimmediate.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="понимание-setimmediate" tabindex="-1">Понимание <code>setImmediate()</code> <a class="header-anchor" href="#понимание-setimmediate" aria-label="Permalink to “Понимание setImmediate()”">​</a></h1><p>Когда вы хотите выполнить фрагмент кода асинхронно, но как можно скорее, один из вариантов - использовать функцию <code>setImmediate()</code>, предоставляемую Node.js:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // сделать что-то</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Любая функция, переданная в качестве аргумента <code>setImmediate()</code>, является обратным вызовом, который выполняется в следующей итерации цикла событий.</p><p>Чем <code>setImmediate()</code> отличается от <code>setTimeout(() =&gt; {}, 0)</code> (с передачей тайм-аута в 0 мс) и от <code>process.nextTick()</code> и <code>Promise.then()</code>?</p><p>Функция, переданная в <code>process.nextTick()</code>, будет выполнена в текущей итерации цикла событий, после завершения текущей операции. Это означает, что она всегда будет выполняться до <code>setTimeout</code> и <code>setImmediate</code>.</p><p>Обратный вызов <code>setTimeout()</code> с задержкой 0 мс очень похож на <code>setImmediate()</code>. Порядок выполнения будет зависеть от различных факторов, но оба они будут запущены в следующей итерации цикла событий.</p><p>Обратный вызов <code>process.nextTick</code> добавляется в <strong>очередь process.nextTick</strong>. Обратный вызов <code>Promise.then()</code> добавляется в <strong>очередь микрозадач promises</strong>. Обратный вызов <code>setTimeout</code>, <code>setImmediate</code> добавляется в <strong>очередь макрозадач</strong>.</p><p>Цикл событий сначала выполняет задачи в <strong>очереди process.nextTick</strong>, затем выполняет <strong>очередь микрозадач promises</strong>, а затем выполняет <code>setTimeout</code> или <code>setImmediate</code> <strong>очередь макрозадач</strong>.</p><p>Вот пример, показывающий порядок между <code>setImmediate()</code>, <code>process.nextTick()</code> и <code>Promise.then()</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> zoo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zoo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baz);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(zoo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start foo bar zoo baz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Этот код сначала вызывает <code>start()</code>, затем вызывает <code>foo()</code> в <strong>очереди process.nextTick</strong>. После этого он обработает <strong>очередь микрозадач promises</strong>, которая выводит bar и добавляет <code>zoo()</code> в <strong>очередь process.nextTick</strong> одновременно. Затем он вызовет <code>zoo()</code>, который только что был добавлен. В конце вызывается <code>baz()</code> в <strong>очереди макрозадач</strong>.</p><p>Вышеупомянутый принцип справедлив в случаях CommonJS, но имейте в виду, что в ES Modules, например, в файлах <code>.mjs</code>, порядок выполнения будет другим:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start bar foo zoo baz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Это связано с тем, что загружаемый ES Module обернут как асинхронная операция, и, таким образом, весь скрипт фактически уже находится в <strong>очереди микрозадач promises</strong>. Поэтому, когда промис немедленно разрешается, его обратный вызов добавляется в <strong>очередь микрозадач</strong>. Node.js попытается очистить очередь, прежде чем переходить к любой другой очереди, и поэтому вы увидите, что сначала выводится bar.</p>`,15)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};