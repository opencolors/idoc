import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js とブラウザーの違い","description":"Node.js とブラウザーの違いを理解しよう。エコシステム、環境制御、モジュールシステムなど、開発者にとって重要な違いを紹介します。","frontmatter":{"title":"Node.js とブラウザーの違い","description":"Node.js とブラウザーの違いを理解しよう。エコシステム、環境制御、モジュールシステムなど、開発者にとって重要な違いを紹介します。","head":[["meta",{"name":"og:title","content":"Node.js とブラウザーの違い | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Node.js とブラウザーの違いを理解しよう。エコシステム、環境制御、モジュールシステムなど、開発者にとって重要な違いを紹介します。"}],["meta",{"name":"twitter:title","content":"Node.js とブラウザーの違い | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Node.js とブラウザーの違いを理解しよう。エコシステム、環境制御、モジュールシステムなど、開発者にとって重要な違いを紹介します。"}],["link",{"rel":"canonical","href":"https://idoc.dev/ja/nodejs/guide/differences-between-node-and-browser"}],["meta",{"property":"og:url","content":"https://idoc.dev/ja/nodejs/guide/differences-between-node-and-browser"}]]},"headers":[],"relativePath":"ja/nodejs/guide/differences-between-node-and-browser.md","filePath":"ja/nodejs/guide/differences-between-node-and-browser.md","lastUpdated":1749464498000}`),a={name:`ja/nodejs/guide/differences-between-node-and-browser.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="node-js-とブラウザの違い" tabindex="-1">Node.js とブラウザの違い <a class="header-anchor" href="#node-js-とブラウザの違い" aria-label="Permalink to “Node.js とブラウザの違い”">​</a></h1><p>ブラウザと Node.js はどちらも JavaScript をプログラミング言語として使用します。ブラウザで実行されるアプリを構築することは、Node.js アプリケーションを構築することとは全く異なります。常に JavaScript であるという事実に反して、その経験を根本的に異なるものにするいくつかの重要な違いがあります。</p><p>JavaScript を広範囲に使用するフロントエンド開発者の視点から見ると、Node.js アプリは大きな利点をもたらします。それは、フロントエンドとバックエンドの両方すべてを単一の言語でプログラミングできるという快適さです。</p><p>プログラミング言語を完全に、深く習得することがいかに難しいかを知っているので、大きなチャンスがあります。クライアントとサーバーの両方で、Web 上ですべての作業を実行するために同じ言語を使用することで、あなたは他に類を見ない有利な立場にいます。</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>変わるのはエコシステムです。</p></div><p>ブラウザでは、ほとんどの場合、DOM または Cookie などの他の Web プラットフォーム API とやり取りしています。もちろん、これらは Node.js には存在しません。ブラウザによって提供される <code>document</code>、<code>window</code>、その他のすべてのオブジェクトはありません。</p><p>そしてブラウザでは、Node.js がファイルシステムアクセス機能などのモジュールを通じて提供するすべての優れた API はありません。</p><p>もう 1 つの大きな違いは、Node.js では環境を制御できることです。誰でもどこにでもデプロイできるオープンソースアプリケーションを構築しているのでない限り、アプリケーションを実行する Node.js のバージョンを知っています。訪問者が使用するブラウザを選択するという贅沢がないブラウザ環境と比較して、これは非常に便利です。</p><p>これは、Node.js バージョンがサポートするすべての最新の ES2015+ JavaScript を記述できることを意味します。JavaScript は非常に速く進化しますが、ブラウザのアップグレードは少し遅れる可能性があるため、Web 上では古い JavaScript / ECMAScript リリースを使用せざるを得ない場合があります。Babel を使用して、コードを ES5 互換に変換してからブラウザに出荷できますが、Node.js ではその必要はありません。</p><p>もう 1 つの違いは、Node.js は CommonJS と ES モジュールシステムの両方をサポートしていること（Node.js v12 以降）ですが、ブラウザでは、ES Modules 標準の実装が開始されつつあります。</p><p>実際には、これは Node.js では <code>require()</code> と <code>import</code> の両方を使用できるのに対し、ブラウザでは <code>import</code> に制限されることを意味します。</p>`,11)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};