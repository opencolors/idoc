import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Отличия Node.js и браузера","description":"Узнайте о ключевых различиях между разработкой приложений на Node.js и в браузере, включая экосистему, контроль окружения и системы модулей.","frontmatter":{"title":"Отличия Node.js и браузера","description":"Узнайте о ключевых различиях между разработкой приложений на Node.js и в браузере, включая экосистему, контроль окружения и системы модулей.","head":[["meta",{"name":"og:title","content":"Отличия Node.js и браузера | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Узнайте о ключевых различиях между разработкой приложений на Node.js и в браузере, включая экосистему, контроль окружения и системы модулей."}],["meta",{"name":"twitter:title","content":"Отличия Node.js и браузера | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Узнайте о ключевых различиях между разработкой приложений на Node.js и в браузере, включая экосистему, контроль окружения и системы модулей."}],["link",{"rel":"canonical","href":"https://idoc.dev/ru/nodejs/guide/differences-between-node-and-browser"}],["meta",{"property":"og:url","content":"https://idoc.dev/ru/nodejs/guide/differences-between-node-and-browser"}]]},"headers":[],"relativePath":"ru/nodejs/guide/differences-between-node-and-browser.md","filePath":"ru/nodejs/guide/differences-between-node-and-browser.md","lastUpdated":1749464498000}`),a={name:`ru/nodejs/guide/differences-between-node-and-browser.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="различия-между-node-js-и-браузером" tabindex="-1">Различия между Node.js и браузером <a class="header-anchor" href="#различия-между-node-js-и-браузером" aria-label="Permalink to “Различия между Node.js и браузером”">​</a></h1><p>И браузер, и Node.js используют JavaScript в качестве языка программирования. Создание приложений, работающих в браузере, полностью отличается от создания приложения Node.js. Несмотря на то, что это всегда JavaScript, существуют ключевые различия, которые кардинально меняют опыт.</p><p>С точки зрения frontend-разработчика, активно использующего JavaScript, приложения Node.js приносят огромное преимущество: комфорт программирования всего - и frontend, и backend - на одном языке.</p><p>У вас есть огромная возможность, потому что мы знаем, как трудно полностью и глубоко изучить язык программирования, и, используя один и тот же язык для выполнения всей вашей работы в сети - как на клиенте, так и на сервере, вы находитесь в уникально выгодном положении.</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>Что меняется, так это экосистема.</p></div><p>В браузере большую часть времени вы взаимодействуете с DOM или другими API веб-платформы, такими как Cookies. Их, конечно, не существует в Node.js. У вас нет <code>document</code>, <code>window</code> и всех других объектов, предоставляемых браузером.</p><p>А в браузере у нас нет всех тех приятных API, которые Node.js предоставляет через свои модули, таких как функциональность доступа к файловой системе.</p><p>Другое большое различие заключается в том, что в Node.js вы контролируете среду. Если вы не создаете приложение с открытым исходным кодом, которое любой может развернуть где угодно, вы знаете, какую версию Node.js вы будете использовать для запуска приложения. По сравнению с браузерной средой, где у вас нет возможности выбирать, какой браузер будут использовать ваши посетители, это очень удобно.</p><p>Это означает, что вы можете писать весь современный ES2015+ JavaScript, который поддерживает ваша версия Node.js. Поскольку JavaScript развивается так быстро, а браузеры могут немного медленно обновляться, иногда в сети вы застреваете с использованием более старых версий JavaScript / ECMAScript. Вы можете использовать Babel, чтобы преобразовать свой код в ES5-совместимый, прежде чем отправлять его в браузер, но в Node.js вам это не понадобится.</p><p>Еще одно отличие заключается в том, что Node.js поддерживает как CommonJS, так и ES module systems (с Node.js v12), в то время как в браузере мы начинаем видеть реализацию стандарта ES Modules.</p><p>На практике это означает, что вы можете использовать как <code>require()</code>, так и <code>import</code> в Node.js, в то время как в браузере вы ограничены <code>import</code>.</p>`,11)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};