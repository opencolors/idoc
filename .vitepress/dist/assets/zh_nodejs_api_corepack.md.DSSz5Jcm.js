import{__plugin_vue_export_helper_default as e,createElementBlock as t,createStaticVNode as n,openBlock as r}from"./chunks/plugin-vue_export-helper.Bts1mPc7.js";const i=JSON.parse(`{"title":"Node.js Corepack 文档","description":"Corepack 是随 Node.js 一起发布的二进制文件，提供了一个标准接口来管理包管理器，如 npm、pnpm 和 Yarn。它允许用户在不同的包管理器和版本之间轻松切换，确保兼容性并简化开发工作流程。","frontmatter":{"title":"Node.js Corepack 文档","description":"Corepack 是随 Node.js 一起发布的二进制文件，提供了一个标准接口来管理包管理器，如 npm、pnpm 和 Yarn。它允许用户在不同的包管理器和版本之间轻松切换，确保兼容性并简化开发工作流程。","head":[["meta",{"name":"og:title","content":"Node.js Corepack 文档 | Node.js - iDoc.dev"}],["meta",{"name":"og:description","content":"Corepack 是随 Node.js 一起发布的二进制文件，提供了一个标准接口来管理包管理器，如 npm、pnpm 和 Yarn。它允许用户在不同的包管理器和版本之间轻松切换，确保兼容性并简化开发工作流程。"}],["meta",{"name":"twitter:title","content":"Node.js Corepack 文档 | Node.js - iDoc.dev"}],["meta",{"name":"twitter:description","content":"Corepack 是随 Node.js 一起发布的二进制文件，提供了一个标准接口来管理包管理器，如 npm、pnpm 和 Yarn。它允许用户在不同的包管理器和版本之间轻松切换，确保兼容性并简化开发工作流程。"}],["link",{"rel":"canonical","href":"https://idoc.dev/zh/nodejs/api/corepack"}],["meta",{"property":"og:url","content":"https://idoc.dev/zh/nodejs/api/corepack"}]]},"headers":[],"relativePath":"zh/nodejs/api/corepack.md","filePath":"zh/nodejs/api/corepack.md","lastUpdated":1749464498000}`),a={name:`zh/nodejs/api/corepack.md`};function o(e,i,a,o,s,c){return r(),t(`div`,null,i[0]||=[n(`<h1 id="corepack" tabindex="-1">Corepack <a class="header-anchor" href="#corepack" aria-label="Permalink to “Corepack”">​</a></h1><p><strong>加入于: v16.9.0, v14.19.0</strong></p><div class="warning custom-block"><p class="custom-block-title">[稳定度: 1 - 实验性]</p><p><a href="/zh/nodejs/api/documentation#stability-index">稳定度: 1</a> <a href="/zh/nodejs/api/documentation#stability-index">稳定性: 1</a> - 实验性</p></div><p><em><a href="https://github.com/nodejs/corepack">Corepack</a></em> 是一个实验性工具，旨在帮助管理你的包管理器版本。 它为每个<a href="/zh/nodejs/api/corepack#supported-package-managers">支持的包管理器</a>公开二进制代理，这些代理在被调用时，将识别为当前项目配置的包管理器，如果需要则下载它，并最终运行它。</p><p>尽管 Corepack 随 Node.js 的默认安装一起分发，但 Corepack 管理的包管理器不是 Node.js 发行版的一部分，并且：</p><ul><li>首次使用时，Corepack 会从网络下载最新版本。</li><li>任何必需的更新（与安全漏洞或其他原因相关）都不在 Node.js 项目的范围内。 如果有必要，最终用户必须自己弄清楚如何更新。</li></ul><p>此功能简化了两个核心工作流程：</p><ul><li>简化了新贡献者的入门，因为他们不再需要遵循特定于系统的安装过程，就可以拥有你想要的包管理器。</li><li>允许你确保团队中的每个人都将使用你希望他们使用的确切包管理器版本，而无需他们在每次需要进行更新时手动同步它。</li></ul><h2 id="workflows" tabindex="-1">工作流程 <a class="header-anchor" href="#workflows" aria-label="Permalink to “工作流程”">​</a></h2><h3 id="enabling-the-feature" tabindex="-1">启用该功能 <a class="header-anchor" href="#enabling-the-feature" aria-label="Permalink to “启用该功能”">​</a></h3><p>由于其实验性状态，Corepack 目前需要显式启用才能生效。 要做到这一点，运行 <a href="https://github.com/nodejs/corepack#corepack-enable--name" target="_blank" rel="noreferrer"><code>corepack enable</code></a>，这将在你的环境中 <code>node</code> 二进制文件旁边设置符号链接（如果需要，会覆盖现有的符号链接）。</p><p>从现在开始，任何对<a href="/zh/nodejs/api/corepack#supported-package-managers">支持的二进制文件</a>的调用都将无需进一步设置即可工作。 如果你遇到问题，请运行 <a href="https://github.com/nodejs/corepack#corepack-disable--name" target="_blank" rel="noreferrer"><code>corepack disable</code></a> 从你的系统中移除代理（并考虑在 <a href="https://github.com/nodejs/corepack" target="_blank" rel="noreferrer">Corepack 仓库</a> 上开启一个 issue，让我们知道）。</p><h3 id="configuring-a-package" tabindex="-1">配置包 <a class="header-anchor" href="#configuring-a-package" aria-label="Permalink to “配置包”">​</a></h3><p>Corepack 代理会找到当前目录层级中最接近的 <a href="/zh/nodejs/api/packages#nodejs-packagejson-field-definitions"><code>package.json</code></a> 文件，以提取其 <a href="/zh/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> 属性。</p><p>如果该值对应于一个<a href="/zh/nodejs/api/corepack#supported-package-managers">受支持的包管理器</a>，Corepack 将确保对相关二进制文件的所有调用都针对请求的版本运行，并在需要时按需下载，如果无法成功检索，则中止。</p><p>您可以使用 <a href="https://github.com/nodejs/corepack#corepack-use-nameversion" target="_blank" rel="noreferrer"><code>corepack use</code></a> 命令来要求 Corepack 更新本地 <code>package.json</code> 文件，以使用您选择的包管理器：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 在 package.json 中设置最新的 7.x 版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 在 package.json 中设置最新的版本</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="upgrading-the-global-versions" tabindex="-1">升级全局版本 <a class="header-anchor" href="#upgrading-the-global-versions" aria-label="Permalink to “升级全局版本”">​</a></h3><p>当在现有项目之外运行（例如，运行 <code>yarn init</code> 时），Corepack 默认会使用预定义的版本，这些版本大致对应于每个工具的最新稳定版本。可以通过运行 <a href="https://github.com/nodejs/corepack#corepack-install--g--global---all--nameversion" target="_blank" rel="noreferrer"><code>corepack install</code></a> 命令以及您希望设置的包管理器版本来覆盖这些版本：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者，可以使用标签或范围：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corepack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn@stable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="offline-workflow" tabindex="-1">离线工作流 <a class="header-anchor" href="#offline-workflow" aria-label="Permalink to “离线工作流”">​</a></h3><p>许多生产环境没有网络访问权限。由于 Corepack 通常直接从其注册表下载包管理器版本，因此它可能会与此类环境发生冲突。为避免这种情况发生，请在您仍然具有网络访问权限时（通常在准备部署映像时）调用 <a href="https://github.com/nodejs/corepack#corepack-pack---all--nameversion" target="_blank" rel="noreferrer"><code>corepack pack</code></a> 命令。这将确保即使没有网络访问权限，所需的包管理器仍然可用。</p><p><code>pack</code> 命令有<a href="https://github.com/nodejs/corepack#utility-commands" target="_blank" rel="noreferrer">各种标志</a>。有关更多信息，请参阅详细的 <a href="https://github.com/nodejs/corepack#readme" target="_blank" rel="noreferrer">Corepack 文档</a>。</p><h2 id="supported-package-managers" tabindex="-1">支持的包管理器 <a class="header-anchor" href="#supported-package-managers" aria-label="Permalink to “支持的包管理器”">​</a></h2><p>以下二进制文件通过 Corepack 提供：</p><table tabindex="0"><thead><tr><th>包管理器</th><th>二进制文件名</th></tr></thead><tbody><tr><td><a href="https://yarnpkg.com/" target="_blank" rel="noreferrer">Yarn</a></td><td><code>yarn</code> , <code>yarnpkg</code></td></tr><tr><td><a href="https://pnpm.io/" target="_blank" rel="noreferrer">pnpm</a></td><td><code>pnpm</code> , <code>pnpx</code></td></tr></tbody></table><h2 id="common-questions" tabindex="-1">常见问题 <a class="header-anchor" href="#common-questions" aria-label="Permalink to “常见问题”">​</a></h2><h3 id="how-does-corepack-interact-with-npm?" tabindex="-1">Corepack 如何与 npm 交互？ <a class="header-anchor" href="#how-does-corepack-interact-with-npm?" aria-label="Permalink to “Corepack 如何与 npm 交互？”">​</a></h3><p>虽然 Corepack 可以像支持其他包管理器一样支持 npm，但它的 shim 默认情况下未启用。 这会产生一些后果：</p><ul><li>始终可以在配置为使用另一个包管理器的项目中运行 <code>npm</code> 命令，因为 Corepack 无法拦截它。</li><li>虽然 <code>npm</code> 在 <a href="/zh/nodejs/api/packages#packagemanager"><code>&quot;packageManager&quot;</code></a> 属性中是一个有效的选项，但缺少 shim 会导致使用全局 npm。</li></ul><h3 id="running-npm-install--g-yarn-doesnt-work" tabindex="-1">运行 <code>npm install -g yarn</code> 不起作用 <a class="header-anchor" href="#running-npm-install--g-yarn-doesnt-work" aria-label="Permalink to “运行 npm install -g yarn 不起作用”">​</a></h3><p>npm 会阻止在进行全局安装时意外覆盖 Corepack 二进制文件。 为了避免这个问题，请考虑以下选项之一：</p><ul><li>不要运行此命令； Corepack 无论如何都会提供包管理器二进制文件，并将确保始终提供请求的版本，因此不需要显式安装包管理器。</li><li>将 <code>--force</code> 标志添加到 <code>npm install</code>； 这将告诉 npm 可以覆盖二进制文件，但您会在此过程中擦除 Corepack 的二进制文件。（运行 <a href="https://github.com/nodejs/corepack#corepack-enable--name" target="_blank" rel="noreferrer"><code>corepack enable</code></a> 将它们添加回来。）</li></ul>`,35)])}var s=e(a,[[`render`,o]]);export{i as __pageData,s as default};